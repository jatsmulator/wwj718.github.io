<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writing for time</title><link>/</link><description></description><atom:link href="/feeds/shu-ju.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 01 Aug 2016 00:00:00 -0000</lastBuildDate><item><title>换一种姿势招工作</title><link>/jobsVisualization.html</link><description>&lt;p&gt;&lt;img alt="caravel" src="http://oav6fgfj1.bkt.clouddn.com/caravel_configdea10468.png" /&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章里，我们简单介绍了caracel和它的安装方式，这篇文章主要介绍如何简单配置/定制caravel&lt;/p&gt;
&lt;h1&gt;默认配置&lt;/h1&gt;
&lt;p&gt;caravel的默认配置为&lt;a href="https://github.com/airbnb/caravel/blob/master/caravel/config.py"&gt;config&lt;/a&gt;，我们可能对其中的一些配置项感兴趣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CARAVEL_WORKERS&lt;/li&gt;
&lt;li&gt;CARAVEL_WEBSERVER_PORT&lt;/li&gt;
&lt;li&gt;APP_NAME&lt;/li&gt;
&lt;li&gt;APP_ICON&lt;/li&gt;
&lt;li&gt;BABEL_DEFAULT_LOCALE&lt;/li&gt;
&lt;li&gt;LANGUAGES&lt;/li&gt;
&lt;li&gt;CACHE_CONFIG&lt;/li&gt;
&lt;li&gt;ENABLE_CORS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些变量的自说明性很好，就不解释了&lt;/p&gt;
&lt;h3&gt;修改默认配置&lt;/h3&gt;
&lt;p&gt;创建caravel_config.py，通过在PYTHONPATH里添加caravel_config.py所在目录的路径&lt;/p&gt;
&lt;p&gt;至于如何修改PYTHONPATH，我的做法是修改&lt;code&gt;~/.bash_profile&lt;/code&gt;，添加&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PYTHONPATH=/home/wwj/caravel_dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后需要退出shell，再进入才生效&lt;/p&gt;
&lt;p&gt;我的caravel_config.py在/home/wwj/caravel_dev目录下&lt;/p&gt;
&lt;p&gt;启动caravel runserver -d,即可看到定制化的caravel&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_configccd15ac6.png" /&gt;&lt;/p&gt;
&lt;h3&gt;界面定制&lt;/h3&gt;
&lt;p&gt;点击dashboard里&lt;code&gt;Edit the dashboard'css&lt;/code&gt;按钮，之后你可以选择不同的主题，方然也可以添加你自己css样式&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_css2304d63d.png" /&gt;&lt;/p&gt;
&lt;p&gt;caravel使用flask-appbuilder构建项目骨架,flask-appbuilder采用了&lt;a href="https://github.com/thomaspark/bootswatch"&gt;bootswatch&lt;/a&gt;来定制主题样式，可以通过APP_THEME变量来改变主题,可选主题参考&lt;a href="http://bootswatch.com/"&gt;bootswatch.com&lt;/a&gt;,我偏好slate主题，slate对应的配置为&lt;code&gt;APP_THEME = "slate.css"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;具体的配置选项参考:&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/blob/master/examples/oauth/config.py"&gt;examples/oauth/config.py&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;更多定制&lt;/h3&gt;
&lt;p&gt;前头说到caravel使用flask-appbuilder来构建项目骨架，所以flask-appbuilder的配置参数，对caravel有效，具体配置参考：&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/config.html"&gt;flask-appbuilder config&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;汉化&lt;/h3&gt;
&lt;p&gt;首先你需要修改LANGUAGES变量的默认值，默认不包含汉语，当前（2016-07-26）默认安装的caravel版本为caravel-0.10.0,这个版本的源码不带有翻译包（translations）, 如果你期望做汉化的话，需要手动将&lt;code&gt;translations/zh/LC_MESSAGES&lt;/code&gt;目录放到package安装路径下&lt;/p&gt;
&lt;p&gt;以下是我的汉化文件，在目录下执行以下代码即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/wwj718/caravel/master/caravel/translations/zh/LC_MESSAGES/messages.po
wget https://raw.githubusercontent.com/wwj718/caravel/master/caravel/translations/zh/LC_MESSAGES/messages.mo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目前汉化包还不完备，之后有时间，我想维护一个&lt;code&gt;caravel_cn&lt;/code&gt;的项目，做些本地化的工作,包括常用前端库的国内cdn和google字体之类的本地化，有兴趣的小伙伴可以一起&lt;/p&gt;
&lt;h3&gt;认证系统&lt;/h3&gt;
&lt;p&gt;默认的认证系统为&lt;code&gt;AUTH_TYPE = AUTH_DB&lt;/code&gt;,我们可以将其配置为其他选项，诸如：AUTH_REMOTE_USER,AUTH_OID,AUTH_LDAP以及AUTH_OAUTH,配置为OAuth时,需要安装&lt;code&gt;Flask-OAuthlib&lt;/code&gt;,之后flask-appbuilder和Flask-OAuthlib有一个整合，如果你需要使用自己的oauth provider，可能需要处理下这部分&lt;/p&gt;
&lt;p&gt;另,把用户设置为public，会导致无法登陆(错误信息为：Access is Denied for: can_welcome)。建议给新用户alpha权限，这样一来不具有管理权限,又可以正常浏览&lt;/p&gt;
&lt;!--
使用cas：https://github.com/cameronbwhite/Flask-CAS
可能需要修改flask-appbuilderd额用户机制
添加AUTH_TYPE类型
可以试着跟踪一个实现
userdbmodelview
以及：MyUserDBView

拿个flask-appbuilderd来测试吧

http://flask-appbuilder.readthedocs.io/en/latest/security.html  拓展用户
https://github.com/chuanqitan/union-SSO
改造oauth2是可能的
oauth2手写，需要新建

    def oauth_providers(self):
        return self.appbuilder.get_app.config['OAUTH_PROVIDERS']

https://github.com/dpgaspar/Flask-AppBuilder/blob/master/flask_appbuilder/security/manager.py#L359 github 跟踪

https://github.com/lepture/flask-oauthlib/blob/master/flask_oauthlib/contrib/apps.py#L37  这就是关键字所在
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 -0000</pubDate><guid>tag:,2016-08-01:jobsVisualization.html</guid><category>data</category></item><item><title>可视化筛选你中意的工作</title><link>/jobsVisualization.html</link><description>&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wwj718/jobsVisualization/master/jobs.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;晚上到星巴克写作的效率好高!&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;在技术这个话题下，我比较形而下，大概算实用主义者，关注技术的现实意义。另一个原因可能是数学不够好的缘故，数学好的小伙伴如@sevenry，更多兴趣在探索算法和问题的数学形式。&lt;/p&gt;
&lt;p&gt;前段时间有朋友在找工作，作为技术宅，当然不能像一般用户那样找啦，于是小伙伴决定写个爬虫帮忙去搜寻合适的工作。我觉得有趣，那算时间正好在看数据可视化和数据采集相关的书，心痒痒地想试试，于是就用了一个周末时间写了一个爬虫和数据可视化项目，帮助求职者更方面地找到中意的职位&lt;/p&gt;
&lt;h1&gt;现有问题&lt;/h1&gt;
&lt;p&gt;我一开始在思考，用户上主流的招聘网站寻找合适的职位，是怎样一种体验呢，自己试着用了几个主流网站。体验类似淘宝购物，选择过滤条件，然后逐个职位看过去。其中比较不爽的是，翻了后叶，忘了前页，对不同的职位我想做个对比，不得不逐个记下第一印象合格的职位的网址，之后逐个网页打开，做优劣势的对比。十分困难，大脑每次只能处理极少数量的职位和维度（薪资，地理位置，福利），以至于半天没法得出那个更好。我想用控制变量来比较，发现工作量很大&lt;/p&gt;
&lt;h1&gt;构思&lt;/h1&gt;
&lt;p&gt;在没想清楚怎么做可视化之前，我先写了爬虫，采集到数据后，这部分反正不怎么需要思考。看到怕取到的数据有很多个维度之后（薪资，地理位置，福利...），突然想到，这是是个多指标的过滤问题啊，而这个词我在印象笔记里记过，也不知道是不是自创，是对阅读&lt;a href="https://github.com/bokeh/bokeh/tree/0.11.1/examples/app/movies"&gt;bokeh example app movies&lt;/a&gt;项目的批注，这个项目和我将做的事，在模式上是何等相似啊，于是剩下的就是细节工作了&lt;/p&gt;
&lt;h1&gt;项目细节&lt;/h1&gt;
&lt;h3&gt;项目相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gold.xitu.io/entry/577bc0601532bc005fe0e651/detail"&gt;稀土掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/jobSpider"&gt;jobSpider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;github jobsVisualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="jobs.just4fun.site/jobsVisualization"&gt;online demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;爬虫部分&lt;/h3&gt;
&lt;p&gt;我最初想爬取主流招聘网站的数据，考虑到工作量，选取了最喜欢的&lt;a href="http://www.lagou.com/"&gt;拉勾网&lt;/a&gt;，后期要拓展数据集只是体力活&lt;/p&gt;
&lt;p&gt;目前&lt;a href="https://github.com/wwj718/jobSpider"&gt;jobSpider&lt;/a&gt;jobSpider是一只爬取拉勾网的&lt;a href="https://github.com/scrapy/scrapy"&gt;scrapy&lt;/a&gt;爬虫，用于爬取职位信息。拉钩的数据接口非常漂亮，以至于这个项目本质上都不能算爬虫，它直接请求拉勾网的接口，获得漂亮的json数据，核心代码很短：&lt;a href="https://github.com/wwj718/jobSpider/blob/master/lagou/spiders/lagou_spider.py"&gt;lagou_spider.py&lt;/a&gt;，不用一分钟看完&lt;/p&gt;
&lt;p&gt;默认拉勾网会给出最新的5000条数据，如果你想爬取更多（比如研究职位变化趋势、从职位看行业热门），那么你需要进一步了解拉钩的数据接口&lt;/p&gt;
&lt;p&gt;为了对数据有个感性认知，我们来看下数据接口，可以在你的浏览器里打开&lt;a href="http://www.lagou.com/jobs/positionAjax.json"&gt;positionAjax&lt;/a&gt;，最好你的浏览器（chrome）装有JSONView插件，这样数据看去笔记层次分明&lt;/p&gt;
&lt;p&gt;至于我们是如何拉钩网友接口的，这就是体力活的，通过不段尝试（每个网站不尽相同），我是通过chrome的调试工具&lt;/p&gt;
&lt;p&gt;爬虫很简单，你读完scrapy的入门教程（&lt;a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html"&gt;中文教程&lt;/a&gt;）就能看懂了&lt;/p&gt;
&lt;p&gt;我在源码里给出了参考资源&lt;/p&gt;
&lt;h3&gt;可视化部分&lt;/h3&gt;
&lt;p&gt;要理解可视化部分:&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;，你可能需要对&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;和&lt;a href="https://github.com/bokeh/bokeh"&gt;bokeh&lt;/a&gt;。不过放心需要的都是入门级别的知识，稍微先过一下下门文档，遇到不懂回去查就好&lt;/p&gt;
&lt;h4&gt;bokeh&lt;/h4&gt;
&lt;p&gt;bokeh是一个非常酷的Python 交互式可视化库，在数据科学家聚集的&lt;a href="https://www.kaggle.com/"&gt;kaggle&lt;/a&gt;社区，被广泛使用，bokeh非常使用用来设计数据驱动的交互式应用，而我们让用户可视化地选择合适的工作，便是典型的此类应用。&lt;/p&gt;
&lt;p&gt;如果你对数据分析和可视化感兴趣，并向做出好玩的东西给别人试试，bokeh不容错过&lt;/p&gt;
&lt;p&gt;pandas太过有名，就不单独介绍了&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;等你看完pandas和bokeh的入门教程，就可以轻松阅读这个项目啦，不到不懂google就好&lt;/p&gt;
&lt;p&gt;这个项目也很简单，实际就是一个文件:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/main.py"&gt;main.py&lt;/a&gt;，数据源为:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/lagouSpider-newest.csv"&gt;lagouSpider-newest.csv&lt;/a&gt;，这个就是我们爬虫每天爬去的职位数据，是可视化应用的数据来源&lt;/p&gt;
&lt;p&gt;可视化部分的运作流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在浏览器里选择期待的地理位置、薪资、福利&lt;/li&gt;
&lt;li&gt;数据被传到后台，pandas根据用户的条件，从爬虫采集的数据里过滤出合适的，并返回&lt;/li&gt;
&lt;li&gt;浏览器将这些结果可视化&lt;/li&gt;
&lt;li&gt;用户直观看到合格数据在一个二维空间的分布，可以直观上进行对比选出最合适的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上的可视化和用户界面以及数据在网络的传输这些繁琐的杂货就是bokeh做的&lt;/p&gt;
&lt;h3&gt;部署成网站！&lt;/h3&gt;
&lt;p&gt;我已经将它部署成线上应用了:&lt;a href="jobs.just4fun.site/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;，你如果熟悉服务器和网站部署，也可以部署到自己的服务器上，相关文档我写在项目首页了:&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 -0000</pubDate><guid>tag:,2016-08-01:jobsVisualization.html</guid><category>data</category></item><item><title>caravel系列之架构与源码浅析</title><link>/caravel-code.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_Architecture4aacdce6.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你打算改造和定制caravel，这篇文章可能对你有帮助&lt;/p&gt;
&lt;h1&gt;外围观察&lt;/h1&gt;
&lt;p&gt;上边的这张图列出了caravel用到的部分技术（由Wappalyzer分析得出）&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;h3&gt;后端&lt;/h3&gt;
&lt;p&gt;采用python的Flask框架（当前版本是Flask 0.11.10，caravel版本是0.10.0)&lt;/p&gt;
&lt;h3&gt;前端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;D3&lt;/li&gt;
&lt;li&gt;NVD3&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术栈的细节可以通过翻阅&lt;a href="https://github.com/airbnb/caravel"&gt;源码库&lt;/a&gt;得到&lt;/p&gt;
&lt;h1&gt;走近源码库&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_github6c3f2fb2.png" /&gt;&lt;/p&gt;
&lt;p&gt;查阅caravel的项目页我们可以知道其技术栈构成，python和javascript分别支撑前后端,python占据大半代码量&lt;/p&gt;
&lt;h3&gt;后端依赖&lt;/h3&gt;
&lt;p&gt;查阅源码库中的&lt;a href="https://github.com/airbnb/caravel/blob/0.10.0/setup.py"&gt;setup.py&lt;/a&gt;，我们可以知道项目依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;'cryptography==1.4',&lt;/li&gt;
&lt;li&gt;'flask-appbuilder==1.8.1',&lt;/li&gt;
&lt;li&gt;'flask-cache==0.13.1',&lt;/li&gt;
&lt;li&gt;'flask-migrate==1.5.1',&lt;/li&gt;
&lt;li&gt;'flask-script==2.0.5',&lt;/li&gt;
&lt;li&gt;'flask-testing==0.5.0',&lt;/li&gt;
&lt;li&gt;'flask-sqlalchemy==2.0',&lt;/li&gt;
&lt;li&gt;'humanize==0.5.1',&lt;/li&gt;
&lt;li&gt;'gunicorn==19.6.0',&lt;/li&gt;
&lt;li&gt;'markdown==2.6.6',&lt;/li&gt;
&lt;li&gt;'pandas==0.18.1',&lt;/li&gt;
&lt;li&gt;'parsedatetime==2.0.0',&lt;/li&gt;
&lt;li&gt;'pydruid==0.3.0',&lt;/li&gt;
&lt;li&gt;'python-dateutil==2.5.3',&lt;/li&gt;
&lt;li&gt;'requests==2.10.0',&lt;/li&gt;
&lt;li&gt;'simplejson==3.8.2',&lt;/li&gt;
&lt;li&gt;'six==1.10.0',&lt;/li&gt;
&lt;li&gt;'sqlalchemy==1.0.13',&lt;/li&gt;
&lt;li&gt;'sqlalchemy-utils==0.32.7',&lt;/li&gt;
&lt;li&gt;'sqlparse==0.1.19',&lt;/li&gt;
&lt;li&gt;'werkzeug==0.11.10',&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们忽视工具型的库，对核心库做个简要介绍&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder"&gt;flask-appbuilder&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple and rapid application development framework, built on top of Flask. Includes detailed security, auto CRUD generation for your models, google charts and much more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;flask-appbuilder是caravel的项目骨架，如果想定制深度caravel，建议认真读完flask-appbuilder的&lt;a href="http://flask-appbuilder.readthedocs.io/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多介绍可以参考&lt;a href="http://flaskappbuilder.pythonanywhere.com/"&gt;flaskappbuilder.pythonanywhere.com/&lt;/a&gt;或者&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/intro.html"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些简单的案例可以参考这里&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/tree/master/examples"&gt;examples&lt;/a&gt;和&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder-Skeleton"&gt;Flask-AppBuilder-Skeleton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;flask-appbuilder给我感觉像是把flask的工具链做了整合，使其功能全面（通往django之路？）&lt;/p&gt;
&lt;!--
专门写一篇文章介绍flask-appbuilder
所有指令：http://flask-appbuilder.readthedocs.io/en/latest/fabmanager.html
fabmanager list-users --app caravel
babel-compile   翻译
http://flask-appbuilder.readthedocs.io/en/latest/quickhowto.html 和django admin很像！ 由此可知每个仅仅是数据表，可以被复制重用！！
--&gt;

&lt;h3&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;关于pandas的介绍我们引&lt;a href="http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/"&gt;这篇文章&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pandas是python的一个数据分析包，最初由AQR Capital Management于2008年4月开发，并于2009年底开源出来，目前由专注于Python数据包开发的PyData开发team继续开发和维护，属于PyData项目的一部分。Pandas最初被作为金融数据分析工具而开发出来，因此，pandas为时间序列分析提供了很好的支持。 Pandas的名称来自于面板数据（panel data）和python数据分析（data analysis）。panel data是经济学中关于多维数据集的一个术语，在Pandas中也提供了panel的数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/zzzeek/sqlalchemy"&gt;sqlalchemy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SQLAlchemy是Python社区中最广泛使用的ORM工具，底层而强大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy的理念是，SQL数据库的量级和性能重要于对象集合；而对象集合的抽象又重要于表和行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于sqlalchemy的更多细节，可以参考我的&lt;a href="http://blog.just4fun.site/relational-database-summary.html"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;前端依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"autobind-decorator": "^1.3.3",&lt;/li&gt;
&lt;li&gt;"babel-loader": "^6.2.1",&lt;/li&gt;
&lt;li&gt;"babel-polyfill": "^6.3.14",&lt;/li&gt;
&lt;li&gt;"babel-preset-es2015": "^6.3.13",&lt;/li&gt;
&lt;li&gt;"babel-preset-react": "^6.3.13",&lt;/li&gt;
&lt;li&gt;"bootstrap": "^3.3.6",&lt;/li&gt;
&lt;li&gt;"bootstrap-datepicker": "^1.6.0",&lt;/li&gt;
&lt;li&gt;"bootstrap-toggle": "^2.2.1",&lt;/li&gt;
&lt;li&gt;"brace": "^0.7.0",&lt;/li&gt;
&lt;li&gt;"brfs": "^1.4.3",&lt;/li&gt;
&lt;li&gt;"cal-heatmap": "3.5.4",&lt;/li&gt;
&lt;li&gt;"css-loader": "^0.23.1",&lt;/li&gt;
&lt;li&gt;"d3": "^3.5.14",&lt;/li&gt;
&lt;li&gt;"d3-cloud": "^1.2.1",&lt;/li&gt;
&lt;li&gt;"d3-sankey": "^0.2.1",&lt;/li&gt;
&lt;li&gt;"d3-tip": "^0.6.7",&lt;/li&gt;
&lt;li&gt;"datamaps": "^0.4.4",&lt;/li&gt;
&lt;li&gt;"datatables-bootstrap3-plugin": "^0.4.0",&lt;/li&gt;
&lt;li&gt;"datatables.net-bs": "^1.10.11",&lt;/li&gt;
&lt;li&gt;"exports-loader": "^0.6.3",&lt;/li&gt;
&lt;li&gt;"font-awesome": "^4.5.0",&lt;/li&gt;
&lt;li&gt;"gridster": "^0.5.6",&lt;/li&gt;
&lt;li&gt;"imports-loader": "^0.6.5",&lt;/li&gt;
&lt;li&gt;"jquery": "^2.2.1",&lt;/li&gt;
&lt;li&gt;"jquery-ui": "^1.10.5",&lt;/li&gt;
&lt;li&gt;"json-loader": "^0.5.4",&lt;/li&gt;
&lt;li&gt;"less": "^2.6.1",&lt;/li&gt;
&lt;li&gt;"less-loader": "^2.2.2",&lt;/li&gt;
&lt;li&gt;"mapbox-gl": "^0.20.0",&lt;/li&gt;
&lt;li&gt;"mustache": "^2.2.1",&lt;/li&gt;
&lt;li&gt;"nvd3": "1.8.3",&lt;/li&gt;
&lt;li&gt;"react": "^0.14.7",&lt;/li&gt;
&lt;li&gt;"react-bootstrap": "^0.28.3",&lt;/li&gt;
&lt;li&gt;"react-dom": "^0.14.7",&lt;/li&gt;
&lt;li&gt;"react-grid-layout": "^0.12.3",&lt;/li&gt;
&lt;li&gt;"react-map-gl": "^1.0.0-beta-10",&lt;/li&gt;
&lt;li&gt;"react-resizable": "^1.3.3",&lt;/li&gt;
&lt;li&gt;"select2": "3.5",&lt;/li&gt;
&lt;li&gt;"select2-bootstrap-css": "^1.4.6",&lt;/li&gt;
&lt;li&gt;"style-loader": "^0.13.0",&lt;/li&gt;
&lt;li&gt;"supercluster": "Pending PR at https://github.com/mapbox/supercluster/pull/12",&lt;/li&gt;
&lt;li&gt;"supercluster": "https://github.com/georgeke/supercluster/tarball/ac3492737e7ce98e07af679623aad452373bbc40",&lt;/li&gt;
&lt;li&gt;"topojson": "^1.6.22",&lt;/li&gt;
&lt;li&gt;"transform-loader": "^0.2.3",&lt;/li&gt;
&lt;li&gt;"viewport-mercator-project": "^2.1.0",&lt;/li&gt;
&lt;li&gt;"webpack": "^1.12.12",&lt;/li&gt;
&lt;li&gt;"webworkify-webpack": "1.0.6"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;源码分析（后端）&lt;/h1&gt;
&lt;p&gt;caravel提供命令行工具&lt;code&gt;caravel&lt;/code&gt;,项目的创建，demo的加载都由改指令负责，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Create default roles and permissions
caravel init

# Load some data to play with
caravel load_examples

# Start the web server on port 8088
caravel runserver -p 8088
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们知道&lt;a href="https://github.com/airbnb/caravel/blob/master/setup.py"&gt;setup.py&lt;/a&gt;里的scripts将被注册为命令行工具（参考&lt;a href="https://docs.python.org/2.7/distutils/setupscript.html#installing-scripts"&gt; Installing Scripts&lt;/a&gt;），&lt;code&gt;caravel&lt;/code&gt;便是注册自这里&lt;/p&gt;
&lt;p&gt;从源码中我们看到&lt;code&gt;scripts=['caravel/bin/caravel']&lt;/code&gt;,按图索骥找到入口：&lt;a href="https://github.com/airbnb/caravel/blob/0.10.0/caravel/bin/caravel"&gt;caravel&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;启动参数&lt;/h3&gt;
&lt;p&gt;从中我们连接到caravel（caravel runserver）服务跑起来时各个参数的意义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d : 以debug模式启动 //官方教程里启动caravel服务的指令为 caravel runserver -d ，即默认为调试模式,&lt;/li&gt;
&lt;li&gt;-p : 指定端口&lt;/li&gt;
&lt;li&gt;-w : 指定gunicorn的worker数量 // gunicorn是一个Python WSGI UNIX的HTTP服务器&lt;/li&gt;
&lt;li&gt;-t : 指定gunicorn服务过期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们用-d参数运行caravel runserver时，我们并未将wsgi app跑在gunicorn，如果是生产使用，应该去掉-d&lt;/p&gt;
&lt;p&gt;如果我们有兴趣跟踪或定制caravel init(创建默认角色和权限)和caravel load_example的执行流程，跟踪相应函数即可&lt;/p&gt;
&lt;h3&gt;web服务&lt;/h3&gt;
&lt;p&gt;由&lt;code&gt;caravel runserver&lt;/code&gt;跑起来的web服务的相关信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由gunicorn运行wsgi application&lt;/li&gt;
&lt;li&gt;wsgi application为caravel:app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们开始分析&lt;code&gt;caravel:app&lt;/code&gt;，这是整个项目的核心所在&lt;/p&gt;
&lt;h3&gt;caravel:app&lt;/h3&gt;
&lt;p&gt;由python模块相关的知识（建议参考《learning python》），我们知道&lt;code&gt;from caravel import app&lt;/code&gt;中，当caravel是目录是，app来自&lt;a href="https://github.com/airbnb/caravel/blob/0.10.0/caravel/__init__.py"&gt;caravel/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这实际上是Flask-AppBuilder常见的项目组织形式 ，可以参考这个简要的&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/tree/master/examples/quickhowto"&gt;例子&lt;/a&gt;,相关解释看&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/quickminimal.html"&gt;这篇文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要想了解caravel的项目骨架，必须通读一遍&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/index.html"&gt;flask-appbuilder的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过阅读flask-appbuilder的文档，我们了解到caravel实际是Flask-AppBuilder的一个具体应用（app），所以我们可以用fabmanager来控制caravel，诸如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an admin user&lt;/span&gt;
fabmanager create-admin --app caravel

fabmanager list-users --app caravel

fabmanager list-views --app caravel
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;caravel api&lt;/h3&gt;
&lt;p&gt;通过阅读&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/quickhowto.html"&gt;Model Views (Quick How to)&lt;/a&gt;,我们了解了caravel的项目骨架和model相关的知识，和django十分相似，包括管理CURD机制也和django admin极其相似，django admin的确是个耀眼的设计，被借鉴倒是不奇怪。&lt;/p&gt;
&lt;p&gt;这篇文章还提到ModelView最终会暴露出 REST API，而且带有权限验证，方面你做各种粒度的控制 ！ 这个设计比django admin还漂亮，惊为天人&lt;/p&gt;
&lt;p&gt;相关细节参考&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/quickhowto.html#exposed-methods"&gt;Exposed methods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们到caravel中一试，完全可用:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_api7b396d27.png" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;目前这个分析更侧重项目结构的源码分析，还不涉及数据分析部分的分析，限于时间有限，数据部分，下回分解&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Jul 2016 00:00:00 -0000</pubDate><guid>tag:,2016-07-27:caravel-code.html</guid><category>data</category></item><item><title>caravel系列之简易配置/定制</title><link>/caravel-config.html</link><description>&lt;p&gt;&lt;img alt="caravel" src="http://oav6fgfj1.bkt.clouddn.com/caravel_configdea10468.png" /&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章里，我们简单介绍了caracel和它的安装方式，这篇文章主要介绍如何简单配置/定制caravel&lt;/p&gt;
&lt;h1&gt;默认配置&lt;/h1&gt;
&lt;p&gt;caravel的默认配置为&lt;a href="https://github.com/airbnb/caravel/blob/master/caravel/config.py"&gt;config&lt;/a&gt;，我们可能对其中的一些配置项感兴趣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CARAVEL_WORKERS&lt;/li&gt;
&lt;li&gt;CARAVEL_WEBSERVER_PORT&lt;/li&gt;
&lt;li&gt;APP_NAME&lt;/li&gt;
&lt;li&gt;APP_ICON&lt;/li&gt;
&lt;li&gt;BABEL_DEFAULT_LOCALE&lt;/li&gt;
&lt;li&gt;LANGUAGES&lt;/li&gt;
&lt;li&gt;CACHE_CONFIG&lt;/li&gt;
&lt;li&gt;ENABLE_CORS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些变量的自说明性很好，就不解释了&lt;/p&gt;
&lt;h3&gt;修改默认配置&lt;/h3&gt;
&lt;p&gt;创建caravel_config.py，通过在PYTHONPATH里添加caravel_config.py所在目录的路径&lt;/p&gt;
&lt;p&gt;至于如何修改PYTHONPATH，我的做法是修改&lt;code&gt;~/.bash_profile&lt;/code&gt;，添加&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PYTHONPATH=/home/wwj/caravel_dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后需要退出shell，再进入才生效&lt;/p&gt;
&lt;p&gt;我的caravel_config.py在/home/wwj/caravel_dev目录下&lt;/p&gt;
&lt;p&gt;启动caravel runserver -d,即可看到定制化的caravel&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_configccd15ac6.png" /&gt;&lt;/p&gt;
&lt;h3&gt;界面定制&lt;/h3&gt;
&lt;p&gt;点击dashboard里&lt;code&gt;Edit the dashboard'css&lt;/code&gt;按钮，之后你可以选择不同的主题，方然也可以添加你自己css样式&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_css2304d63d.png" /&gt;&lt;/p&gt;
&lt;p&gt;caravel使用flask-appbuilder构建项目骨架,flask-appbuilder采用了&lt;a href="https://github.com/thomaspark/bootswatch"&gt;bootswatch&lt;/a&gt;来定制主题样式，可以通过APP_THEME变量来改变主题,可选主题参考&lt;a href="http://bootswatch.com/"&gt;bootswatch.com&lt;/a&gt;,我偏好slate主题，slate对应的配置为&lt;code&gt;APP_THEME = "slate.css"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;具体的配置选项参考:&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/blob/master/examples/oauth/config.py"&gt;examples/oauth/config.py&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;更多定制&lt;/h3&gt;
&lt;p&gt;前头说到caravel使用flask-appbuilder来构建项目骨架，所以flask-appbuilder的配置参数，对caravel有效，具体配置参考：&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/config.html"&gt;flask-appbuilder config&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;汉化&lt;/h3&gt;
&lt;p&gt;首先你需要修改LANGUAGES变量的默认值，默认不包含汉语，当前（2016-07-26）默认安装的caravel版本为caravel-0.10.0,这个版本的源码不带有翻译包（translations）, 如果你期望做汉化的话，需要手动将&lt;code&gt;translations/zh/LC_MESSAGES&lt;/code&gt;目录放到package安装路径下&lt;/p&gt;
&lt;p&gt;以下是我的汉化文件，在目录下执行以下代码即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/wwj718/caravel/master/caravel/translations/zh/LC_MESSAGES/messages.po
wget https://raw.githubusercontent.com/wwj718/caravel/master/caravel/translations/zh/LC_MESSAGES/messages.mo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目前汉化包还不完备，之后有时间，我想维护一个&lt;code&gt;caravel_cn&lt;/code&gt;的项目，做些本地化的工作,包括常用前端库的国内cdn和google字体之类的本地化，有兴趣的小伙伴可以一起&lt;/p&gt;
&lt;h3&gt;认证系统&lt;/h3&gt;
&lt;p&gt;默认的认证系统为&lt;code&gt;AUTH_TYPE = AUTH_DB&lt;/code&gt;,我们可以将其配置为其他选项，诸如：AUTH_REMOTE_USER,AUTH_OID,AUTH_LDAP以及AUTH_OAUTH,配置为OAuth时,需要安装&lt;code&gt;Flask-OAuthlib&lt;/code&gt;,之后flask-appbuilder和Flask-OAuthlib有一个整合，如果你需要使用自己的oauth provider，可能需要处理下这部分&lt;/p&gt;
&lt;p&gt;另,把用户设置为public，会导致无法登陆(错误信息为：Access is Denied for: can_welcome)。建议给新用户alpha权限，这样一来不具有管理权限,又可以正常浏览&lt;/p&gt;
&lt;!--
使用cas：https://github.com/cameronbwhite/Flask-CAS
可能需要修改flask-appbuilderd额用户机制
添加AUTH_TYPE类型
可以试着跟踪一个实现
userdbmodelview
以及：MyUserDBView

拿个flask-appbuilderd来测试吧

http://flask-appbuilder.readthedocs.io/en/latest/security.html  拓展用户
https://github.com/chuanqitan/union-SSO
改造oauth2是可能的
oauth2手写，需要新建

    def oauth_providers(self):
        return self.appbuilder.get_app.config['OAUTH_PROVIDERS']

https://github.com/dpgaspar/Flask-AppBuilder/blob/master/flask_appbuilder/security/manager.py#L359 github 跟踪

https://github.com/lepture/flask-oauthlib/blob/master/flask_oauthlib/contrib/apps.py#L37  这就是关键字所在
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 -0000</pubDate><guid>tag:,2016-07-26:caravel-config.html</guid><category>data</category></item><item><title>caravel系列之案例讲解与分析</title><link>/caravel-demo-analysis.html</link><description>&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_static/img/dash.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们以官方的示例数据为例(sqlite数据库中的birch_names数据表)&lt;/p&gt;
&lt;p&gt;想体验真实数据的小伙伴可以登录我的demo中一看究竟&lt;a href="http://caravel.just4fun.site/caravel/dashboard/births/"&gt;demo births&lt;/a&gt;,用户名和密码都是test&lt;/p&gt;
&lt;h1&gt;birch_names&lt;/h1&gt;
&lt;p&gt;birch_names是一张数据表（table），来自于数据库：&lt;code&gt;sqlite:////tmp/caravel.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="表结构" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_mainac79ec66.png" /&gt;&lt;/p&gt;
&lt;p&gt;数据一览
&lt;img alt="表内容" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_main84bfa3fb.png" /&gt;&lt;/p&gt;
&lt;p&gt;以上便是我们的原始数据，那么原始数据是如何一步步变为开篇那幅图表的呢，下边为你揭晓&lt;/p&gt;
&lt;h1&gt;workflow&lt;/h1&gt;
&lt;h3&gt;添加数据源&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_mainccb9413c.png" /&gt;&lt;/p&gt;
&lt;p&gt;填写数据信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_main65e7c6e5.png" /&gt;&lt;/p&gt;
&lt;p&gt;完成后点击&lt;code&gt;Test Connection&lt;/code&gt;,底部将列出数据库中所有的数据表&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_main45b437b8.png" /&gt;&lt;/p&gt;
&lt;h3&gt;添加表&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_table79220d59.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_table0734672c.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意到图片上方有3个tab页，分别为：Detail、List Table Column和List Sql Metric,默认打开Detail（如上）&lt;/p&gt;
&lt;p&gt;List Table Column:
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table606ba397.png" /&gt;&lt;/p&gt;
&lt;p&gt;List Table Column中的操作决定，各个字段可以做哪些操作(操作类型有,Groupable(分组),Filterable（过滤）,Count Distinct(统计有多少种不同值),Sum（求和），Min（最小值），Max（最大值）  Is tempora（是否是时间序列字段）)，如果你熟悉SQL，你应该一眼就能看懂什么意思&lt;/p&gt;
&lt;p&gt;值得注意的是表中必须有一个日期或时间类型的字段&lt;/p&gt;
&lt;p&gt;List Sql Metric:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_tablefe9a074f.png" /&gt;&lt;/p&gt;
&lt;p&gt;Metrics意为度量，做统计时，时常会遇到这个词，折腾elk是就遇到&lt;/p&gt;
&lt;p&gt;Druid.io文档中有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Metric columns: Metrics are columns used in aggregations and computations. In our example, the metrics are clicks and price. Metrics are usually numeric values, and computations include operations such as count, sum, and mean. Also known as measures in standard OLAP terminology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在List Sql Metric页面，可以编辑和定义指标，如果上面对一些字段勾选了Sum、Min、Max、Count Distinct选项，则这里会自动生成相应的指标字段。&lt;/p&gt;
&lt;h3&gt;可视化探索&lt;/h3&gt;
&lt;p&gt;我们以table为中心，这里我们已经定义好了birch_names表的维度字段和指标,下边我们可以开始对它进行探索&lt;/p&gt;
&lt;p&gt;开始探索&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table3d6d5109.png" /&gt;&lt;/p&gt;
&lt;p&gt;在页面中，可以针对birch_names事先定义的字段和指标字段进行可视化探索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table985b1aa2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下边是我们探索的一个成果，是不同名字的变化时序图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table3cf9cdfa.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上它是以下SQL的可视化&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table_sqlddb06dfe.png" /&gt;&lt;/p&gt;
&lt;p&gt;而我们在左边面板选择参数的过程就是动态生成SQL语句的过程&lt;/p&gt;
&lt;h3&gt;收获探索成果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将探索结果导出为JSON或是CSV&lt;/li&gt;
&lt;li&gt;将探索的成果保存为slide，之后可以分享给同伴&lt;ul&gt;
&lt;li&gt;将slide拼接为dashboard（就是这篇文章最初的那幅图）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将探索成果生成iframe嵌入到其他页面里（当报表用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_sharee4e2dcc7.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们带现连自适应也做的很好&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;生成iframe&lt;/h3&gt;
&lt;p&gt;直接分享url没有问题，而iframe的尺寸有问题（caravel版本为0.10.0）&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/caravel/tutorial.html"&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;Caravel–一款开源OLAP+数据可视化分析前端工具，支持Druid和Kylin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 -0000</pubDate><guid>tag:,2016-07-26:caravel-demo-analysis.html</guid><category>data</category></item><item><title>caravel系列之安装与入门</title><link>/caravel-startup-and-install.html</link><description>&lt;p&gt;&lt;img alt="caravel" src="http://i.imgur.com/H0Kyvyi.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;caravel是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Caravel is an open source data visualization platform that provides easy exploration of your data and allows you to create and share beautiful charts and dashboards&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;caravel是Airbnb开源的一款数据可视化和探索工具，使用caravel用户可以轻松对数据进行可视化分析。&lt;/p&gt;
&lt;h1&gt;一图胜千言&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/line.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/bubble.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/world_map.png" /&gt;&lt;/p&gt;
&lt;h1&gt;使用场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库可视化分析&lt;/li&gt;
&lt;li&gt;数据模式套索&lt;/li&gt;
&lt;li&gt;BI&lt;/li&gt;
&lt;li&gt;数据报表与可视化图表&lt;/li&gt;
&lt;li&gt;tableau的开源替代&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;功能特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;丰富的可视化组件（集成最优秀的可视化图表库）&lt;/li&gt;
&lt;li&gt;创建和分享数据可视化互动仪表盘&lt;/li&gt;
&lt;li&gt;灵活的权限模型, 方面控制数据的可见度&lt;/li&gt;
&lt;li&gt;方便企业使用的用户验证机制，支持 database, OpenID, LDAP, OAuth和 REMOTE_USER (通过 Flask AppBuilder）&lt;/li&gt;
&lt;li&gt;简洁的语义层，可以控制数据资源在 UI 的展现方式&lt;/li&gt;
&lt;li&gt;通过SqlAlchemy可接入大多数据库&lt;/li&gt;
&lt;li&gt;与 Druid.io 的深度集成，可以方便处理大规模数据集&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;demo尝试&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://caravel.just4fun.site/login/"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户名/密码：test/test&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;根据&lt;a href="http://airbnb.io/caravel/installation.html"&gt;官方文档&lt;/a&gt;，caravel目前只支持python2.7，将来会支持python3&lt;/p&gt;
&lt;p&gt;我们在此演示Ubuntu下的安装，其他系统可以参考官方文档&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# OS dependencies&lt;/span&gt;
sudo apt-get install build-essential libssl-dev libffi-dev python-dev python-pip

&lt;span class="c1"&gt;# create virtual env and use it&lt;/span&gt;
sudo pip virtualenv -i http://mirrors.aliyun.com/pypi/simple/
virtualenv caravel_env
. caravel_env/bin/activate

&lt;span class="c1"&gt;# Install caravel&lt;/span&gt;
pip install caravel &lt;span class="c1"&gt;# 推荐使用anaconda&lt;/span&gt;

&lt;span class="c1"&gt;# Create an admin user&lt;/span&gt;
fabmanager create-admin --app caravel

&lt;span class="c1"&gt;# Initialize the database&lt;/span&gt;
caravel db upgrade

&lt;span class="c1"&gt;# Create default roles and permissions&lt;/span&gt;
caravel init

&lt;span class="c1"&gt;# Load some data to play with&lt;/span&gt;
caravel load_examples

&lt;span class="c1"&gt;# Start the web server on port 8088&lt;/span&gt;
caravel runserver -p 8088

&lt;span class="c1"&gt;# To start a development web server, use the -d switch&lt;/span&gt;
caravel runserver -d &lt;span class="c1"&gt;#建议使用tmux来跑，默认可通过0.0.0.0:8088访问&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你熟悉docker，你可以使用docker安装&lt;/p&gt;
&lt;h3&gt;使用docker安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker run --name caravel -d -p 8088:8088 amancevice/caravel&lt;/code&gt;，之后&lt;code&gt;docker exec -it caravel demo&lt;/code&gt;,初始化用户 ,细节参考 &lt;a href="https://hub.docker.com/r/amancevice/caravel/"&gt;dockerhub amancevice/caravel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;caravel被映射到本地的8088端口，之后可以用nginx反向代理把它映射出去，nginx中配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;             #端口
        server_name caravel.just4fun.site;   #访问域名
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:8088;  
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;支持的数据源&lt;/h1&gt;
&lt;p&gt;目前通过相关的python驱动支持大多主流数据仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prestodb/presto"&gt;Presto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;MSSQL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudera/Impala"&gt;Impala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关依赖和更多细节可以参考官方文档：&lt;a href="http://airbnb.io/caravel/installation.html#database-dependencies"&gt;Database dependencies&lt;/a&gt;,或者&lt;a href="https://github.com/zzzeek/sqlalchemy"&gt;sqlalchemy&lt;/a&gt;的文档：&lt;a href="http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html"&gt;Engine Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中Presto,Redshift和Impala可能需要做个介绍.&lt;/p&gt;
&lt;h4&gt;Presto&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed SQL query engine for big data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过&lt;a href="https://github.com/dropbox/PyHive"&gt;PyHive&lt;/a&gt;,我们能用sqlalchemy操作presto数据库，这样依赖我们就可以解决海量数据的SQL查询问题，presto支持PB级别的查询&lt;/p&gt;
&lt;h4&gt;Redshift&lt;/h4&gt;
&lt;p&gt;Amazon Redshift 是一种可轻松扩展的完全托管型 PB 级数据仓库服务i&lt;/p&gt;
&lt;h4&gt;Impala&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Lightning-fast, distributed SQL queries for petabytes of data stored in Apache Hadoop clusters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;分布式大数据SQL查询&lt;/h1&gt;
&lt;p&gt;如果我们的数据仓库存储海量的数据，直接查询数据库是低效的,caravel已经与Druid.io深度整合.对于大数据集可以采用Druid.io或是以上的解决方案&lt;/p&gt;
&lt;h1&gt;原理&lt;/h1&gt;
&lt;p&gt;这部分直接引用@lxw1234的&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caravel通过将界面的操作转换成SQL语句，提交给SQLAlchemy适配数据源查询并返回结果，对于Druid，Caravel将界面的操作转换成Druid的API进行查询并返回结果，与Druid的深度集成，可以实现大规模海量数据的OLAP分析和实时探索。&lt;/p&gt;
&lt;p&gt;另外，为了提高并发查询下的性能，还支持数据缓存，可配置将数据缓存至Redis、Memcache或者本地文件系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;登录问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新建用户无法登录，后端会说权限不够,无提示信息.猜测是用户系统尚未启用.目前是用fabmanager(Flask App Builder)后创建的的admin&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/caravel/index.html"&gt;caravel documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/caravel"&gt;caravel github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prestodb/presto"&gt;presto&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://prestodb-china.com/index.html"&gt;国内社区与文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;京东开放的版本&lt;a href="https://github.com/CHINA-JD/presto/"&gt;presto&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;京东已实现presto到oracle的连接:http://prestodb-china.com/faq.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://prestodb-china.com/resources.html"&gt;prestodb-china.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/analytically/hadoop-ansible"&gt;ansble安装脚本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;Caravel–一款开源OLAP+数据可视化分析前端工具，支持Druid和Kylin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 -0000</pubDate><guid>tag:,2016-07-26:caravel-startup-and-install.html</guid><category>data</category></item></channel></rss>