<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Thu, 15 Mar 2018 00:00:00 +0000</lastBuildDate><item><title>OCR应用一例</title><link>/OCR-example.html</link><description>&lt;p&gt;晚上朋友发微信问能否帮忙折腾个东西: 明天需要整理出一份Word文档，大部分内容来自一篇公众号文章，文章内容由一张张图片组成，好几十张，字数很多&lt;/p&gt;
&lt;p&gt;朋友的问题是:手动输入太累了，能否帮她用程序把图片内容转成文本，放在Word文档里&lt;/p&gt;
&lt;p&gt;我看了下她发过来的公众号文章，内容确实很长，好在虽然用的是图片，字体还算端正。不过用电脑打开后看，字体比较小，不大清晰。&lt;/p&gt;
&lt;p&gt;试着折腾了一下，大约花了半小时。记录下过程&lt;/p&gt;
&lt;h1 id="_1"&gt;思路&lt;/h1&gt;
&lt;p&gt;从图片中提取出文字内容是个OCR(Optical Character Recognition,光学字符识别)问题&lt;/p&gt;
&lt;p&gt;首先想到的是自然是大名鼎鼎的&lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;Tesseract&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我比较懒，想到现在云端工具那么多，何必为这个小任务多折腾，找个好用的云端工具，5分钟弄好继续看书&lt;/p&gt;
&lt;h1 id="_2"&gt;准备工作&lt;/h1&gt;
&lt;p&gt;微信中的图片是webp格式（可以通过chrome调试工具查看），我把整站保存后，资源文件夹中，图片有一堆，不过没带后缀，在ipython中写2行程序为所有文件，加上.webp后缀&lt;/p&gt;
&lt;h1 id="_3"&gt;捷径&lt;/h1&gt;
&lt;p&gt;之前在折腾冲顶大会外挂时，觉得百度OCR识别率还不错。为百度OCR做过简单的Python包装，想着用它来试试&lt;/p&gt;
&lt;p&gt;当时的百度OCR接口只接收jpg图片，我们先使用ffmpeg吧webp图片转为jpg&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i 640\(1\).webp 01.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ps: &lt;code&gt;640\(1\)&lt;/code&gt;是微信公众号文章保存后某个图片的默认名字&lt;/p&gt;
&lt;p&gt;之后使用百度OCR工具对01.jpg做识别，效果很烂，可能是图片不够清晰或其中字数很多的缘故&lt;/p&gt;
&lt;p&gt;我换了其他几个云端OCR工具，效果都不好&lt;/p&gt;
&lt;p&gt;正好上个周末在用&lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;Tesseract&lt;/a&gt;、&lt;a href="https://github.com/opencv/opencv"&gt;opencv&lt;/a&gt;和树莓派帮朋友折腾个项目：目标是利用树莓派摄像头从身份证中提取信息，对tesseract还算熟悉，于是决定用&lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;Tesseract&lt;/a&gt;来折腾试试&lt;/p&gt;
&lt;h1 id="_4"&gt;环境安装&lt;/h1&gt;
&lt;p&gt;根据你自己的系统，按照官方wiki里的方式安装:&lt;a href="https://github.com/tesseract-ocr/tesseract/wiki#introduction"&gt;tesseract Installation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我用的是mac，使用:&lt;code&gt;brew install tesseract&lt;/code&gt;来安装&lt;/p&gt;
&lt;p&gt;我的tesseract版本是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; tesseract -v
tesseract &lt;span class="m"&gt;3&lt;/span&gt;.05.01
 leptonica-1.75.3
  libjpeg 9c : libpng &lt;span class="m"&gt;1&lt;/span&gt;.6.34 : libtiff &lt;span class="m"&gt;4&lt;/span&gt;.0.9 : zlib &lt;span class="m"&gt;1&lt;/span&gt;.2.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们的目标是识别简体中文，如果你不打算自行训练模型的话，可以直接下载官方训练好的&lt;/p&gt;
&lt;p&gt;进入到模型存放目录&lt;code&gt;/usr/local/Cellar/tesseract/3.05.01/share/tessdata&lt;/code&gt;,根据系统和tesseract不同，做相应调整。如果你不知道目录在哪儿也没关系，往下读，待会儿在你实际运行命令，缺少相应语言模型的时候，系统会告诉你语言模型该放置的的目录&lt;/p&gt;
&lt;p&gt;在这儿下载官方训练好的简体中文模型：&lt;code&gt;wget https://github.com/tesseract-ocr/tessdata/raw/master/chi_sim.traineddata&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更多语言模型可以参考&lt;a href="https://github.com/tesseract-ocr/tessdata"&gt;tessdata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成之后，我们就可以使用tesseract在本地提取图片中的文字了&lt;/p&gt;
&lt;h1 id="tesseract"&gt;使用tesseract&lt;/h1&gt;
&lt;p&gt;前边的准备工作中，我们已经从微信公众号下载下来的一堆webp图片转为一堆的jpg图片：01.jpg-020.jpg&lt;/p&gt;
&lt;p&gt;我们先来试着将一张图片转为文本内容看看&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tesseract -l chi_sim /tmp/01.jpg /tmp/output&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ps:如果你没下载chi_sim（简体中文模型），系统会告诉你该在什么目录下放置这个模型&lt;/p&gt;
&lt;p&gt;图片里边文字较多，执行识别操作需要一会儿时间，完成后，在本地生成一个output.txt文件，将文本内容对照原图，正确率在90%以上！出错的地方主要是&lt;code&gt;，&lt;/code&gt;容易识别为&lt;code&gt;'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是我们在ipython中简单写几行来遍历处理所有图片:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tesseract -l chi_sim 0{}.jpg   output_{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps: 如果想用更Pythonic的方式使用tesseract，你可以看看&lt;a href="https://github.com/madmaze/pytesseract"&gt;pytesseract&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;洗个澡回来，全部处理完毕，再写个和上边类似的几行代码，把所有output文件粘合起来，放到Word里，任务完成&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-03-15:OCR-example.html</guid><category>data</category></item><item><title>写一个租房机器人</title><link>/apartment-finding-bot.html</link><description>&lt;p&gt;房子下月到期，近期在关注找合适房源，靠谱室友，今晚回来花了一个多小时在豆瓣看租房帖子。&lt;/p&gt;
&lt;p&gt;深感效率之低：打开&lt;a href="https://www.douban.com/group/zf365"&gt;南京租房豆瓣&lt;/a&gt;，逐个点开帖子，首先排除非个人发布信息，留下的帖子里，排除仅限女生合租的，排除已租的，排除价格过低不靠谱的，然后开始综合评估：照片/地段/价格，有些帖子只给小区不给位置的，还得百度地图查下小区所在位置&lt;/p&gt;
&lt;p&gt;这个工作很适合让机器人（bot）来做，找房源这件事至少有一半的工作是可以自动化的，用上简单的爬虫和正则可以过滤大量的无效信息，如果加上自然语言处理（nlp）几乎可以完成大多的内容提取&lt;/p&gt;
&lt;p&gt;之后再加上bokeh来做交互式数据展示，自然语言处理完，我们可以得到一些关键信息，命名实体（微信号、价格、地段、图片、评论数），然后把它们结构化，让用户与数据可视化地交互（实际是使用pandas来筛选数据），基于我之前的这个工作：&lt;a href="http://blog.just4fun.site/a-generic-Subscription-Services.html"&gt;一种通用的可视化订阅服务&lt;/a&gt;，很容易按照某个指标筛选出合适的房源&lt;/p&gt;
&lt;p&gt;前端时间有篇文章很火：&lt;a href="http://www.codingpy.com/article/apartment-finding-slackbot/?utm_source=tuicool&amp;amp;utm_medium=referral"&gt;硅谷码农用Python写了个机器人，租到了让女友满意的房子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章写得很漂亮，受租房困扰，本着DRY原则，一个问题只解决一次，我想解决方案把工具分享出来，让别人解决同样的问题。&lt;/p&gt;
&lt;p&gt;决定挖坑写个租房机器人和可视化筛选工具&lt;/p&gt;
&lt;h1 id="_1"&gt;先挖坑 待填&lt;/h1&gt;
&lt;p&gt;先给个大纲&lt;/p&gt;
&lt;h1 id="_2"&gt;爬虫部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;scrapy/pyspider&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;信息提取&lt;/h1&gt;
&lt;h3 id="_4"&gt;清洗数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;html -&amp;gt; txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;自然语言处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命名实体识别&lt;/li&gt;
&lt;li&gt;取出地段&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;数据检索/可视化&lt;/h1&gt;
&lt;p&gt;bokeh/pandas&lt;/p&gt;
&lt;p&gt;根据字段筛选：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价格区间&lt;/li&gt;
&lt;li&gt;开关（是否地铁站附近/阳台）&lt;/li&gt;
&lt;li&gt;整租/主卧/次卧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片悬停/帖子超链/地图展示&lt;/p&gt;
&lt;h1 id="why"&gt;why&lt;/h1&gt;
&lt;p&gt;比运行租房机器人让它找房更省力的是，写一篇文章，让同在找房子的你看到，等你说：hi，我也是技术发烧友，寻一个志趣相投的室友，周末还可以一起写个好玩的bot~&lt;/p&gt;
&lt;h1 id="_7"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/soulteary/tenant-point"&gt;tenant-point&lt;/a&gt;：租房要点，适用于北上广深杭，欢迎补充&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zhangxiaoyang/zufang"&gt;zufang&lt;/a&gt;：豆瓣租房搜索引擎&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codingpy.com/article/apartment-finding-slackbot/?utm_source=tuicool&amp;amp;utm_medium=referral"&gt;硅谷码农用Python写了个机器人，租到了让女友满意的房子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-11-01:apartment-finding-bot.html</guid><category>data</category></item><item><title>[译]使用Keras构建神经网络来识别手写数字</title><link>/keras-mnist-tutorial.html</link><description>&lt;h1 id="_1"&gt;前言&lt;/h1&gt;
&lt;p&gt;在&lt;a href="http://blog.just4fun.site/keras-hello-world-pelican.html"&gt;上篇文章&lt;/a&gt;里我们介绍了Keras的入门，本文将介绍如何使用Keras构建神经网络来识别手写数字&lt;/p&gt;
&lt;p&gt;所用的数据集为：&lt;a href="https://en.wikipedia.org/wiki/MNIST_database"&gt;mnist&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;本文写作说明&lt;/h1&gt;
&lt;p&gt;本文的写作依然在jupyter notebook中，写完后，将ipynb导出为html(单个文件)，然后放到博客的output里，用&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;链入博客主体&lt;/p&gt;
&lt;p&gt;期间尝试过pelican和ipynb整合的方法（试了热度最高的两个插件），可能由于依赖库版本的问题（不匹配），导致无法正常使用,如果你的插件使用正常，求告知&lt;/p&gt;
&lt;h1 id="_3"&gt;正文&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="/others/keras-mnist-tutorial.html" width="100%" height="8000px" marginwidth="0" marginheight="0" frameborder="0" scrolling="no"&gt;You need an iFrame capable browser to view this.&lt;/iframe&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-29:keras-mnist-tutorial.html</guid><category>data</category></item><item><title>热力学熵与信息熵</title><link>/Entropy.html</link><description>&lt;blockquote&gt;
&lt;p&gt;贝尔实验室和MIT有很多人将香农和爱因斯坦相提并论，而其他人则认为这种对比是不公平的，对香农不公平  -- 威廉·庞德斯通&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两天晚上在看&lt;code&gt;熵&lt;/code&gt;相关的知识，觉得饶有趣味，做个笔记&lt;/p&gt;
&lt;p&gt;我大学本科学的是&lt;code&gt;热能与动力工程&lt;/code&gt;，大多时间在与热力学打交道。出于对编程的喜爱，毕业后当了程序员。熵是我毕业前后都接触的概念，在热力学和信息论中都极其重要。&lt;/p&gt;
&lt;h1 id="_1"&gt;热力学熵&lt;/h1&gt;
&lt;p&gt;我们先说说热力学第二定律。&lt;/p&gt;
&lt;p&gt;热力学第二定律是热力学的四个基本定律之一（第零定律不大出名：若两个热力学系统均与第三个系统处于热平衡状态，此两个系统也必互相处于热平衡）&lt;/p&gt;
&lt;p&gt;热力学第二定律有多种表述，克劳修斯表述为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不可能把热量从低温物体传递到高温物体而不产生其他影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个表述我们在高中物理中应该就见过&lt;/p&gt;
&lt;p&gt;他重点描述了热量传递的不可逆性，如此一来，&lt;a href="https://zh.wikipedia.org/wiki/%E6%B0%B8%E5%8A%A8%E6%9C%BA#.E7.AC.AC.E4.BA.8C.E7.B1.BB.E6.B0.B8.E5.8A.A8.E6.9C.BA"&gt;第二类永动机&lt;/a&gt;梦想宣告破灭&lt;/p&gt;
&lt;h4 id="_2"&gt;插曲：永动机&lt;/h4&gt;
&lt;p&gt;相信不少小时候喜欢折腾机械玩具的小伙伴，都有过永动机的梦想。小时候我设想过几类永动机，印象深刻的一个，是一年小学暑假，把碎了一半的磁铁用胶带粘到玩具小车A的车尾，而相斥的另一半粘到玩具小车B的车头，中间通过一个弹性绳子连接。不知哪来的信心，确信自己解决了人类能源的问题：小车B启动后，靠近小车A，由于磁性，把小车A往前推，之后小车A拉长弹性绳子，拉动小车B，小车B前进，如此周而复始。不需能源便能行驶&lt;/p&gt;
&lt;p&gt;做实验的时候，并不顺利，我发现它们往复几次就停下了，我将其归结为两者重量不合适、绳子的弹性以及初始推力大小的问题，我相信当满足某种比例时（当时模糊觉得是某种组合方式），它们就能永远运动下去，为了找到这个比例，每天下午无聊的时候，玩腻了小霸王游戏机，便拿出玩具车寻找这个合适的比例。&lt;/p&gt;
&lt;h3 id="_3"&gt;数学表述&lt;/h3&gt;
&lt;p&gt;热力学第二定律的数学表述主要借助克劳修斯所引入的&lt;code&gt;熵&lt;/code&gt;的概念，下边的式子描述了热力学系统中熵的增减:&lt;/p&gt;
&lt;div class="math"&gt;$$\Delta S = \frac{\Delta Q}{T}$$&lt;/div&gt;
&lt;p&gt;变量S被定义为&lt;code&gt;熵&lt;/code&gt;，&lt;span class="math"&gt;\(\Delta Q\)&lt;/span&gt; 是系统热的变化，吸热为正，放热为负，T为系统的绝对温度。&lt;/p&gt;
&lt;p&gt;如果&lt;span class="math"&gt;\(\Delta Q = 0\)&lt;/span&gt;，那么&lt;span class="math"&gt;\(\Delta S\)&lt;/span&gt; ≥ 0。意思是一个绝热系统的全部熵不会自动减少。这是热力学第二定律的另一种表述（熵增原理）&lt;/p&gt;
&lt;p&gt;你可能想到那个著名的担忧：如果没有新的能量源源不断流入我们的宇宙，由于熵只增不减，我们的宇宙终将走向无序和寂灭（热寂说）&lt;/p&gt;
&lt;h4 id="-"&gt;插曲：生命-负熵&lt;/h4&gt;
&lt;p&gt;关于熵增与生命，凯文凯利在《失控》中有段精彩的感慨：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;宇宙中并存着两个趋势。一种是永远下行的趋势，这股力量初时炽热难当，然后嘶嘶作响归于冰冷的死寂。这就是令人沮丧的卡诺第二定律，所有规律中最残酷的法则：所有秩序都终归于混沌，所有火焰都将熄灭，所有变异都趋于平淡，所有结构都终将自行消亡&lt;/p&gt;
&lt;p&gt;第二种趋势与此平行，但产生与此相反的效果。它在热量消散前（因为热必会消散）将其转移，在无序中构建有序。它借助趋微之势，逆流而上。 这股上升之流利用其短暂的有序时光，尽可能抢夺消散的能量以建立一个平台，来为下一轮的有序作铺垫。它倾尽所有，无所保留，其秩序全部用来增强下一轮的复杂性、成长和有序。它以这种方式在混沌中孕育出反混沌，我们称之为生命&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps：关于生命是否是负熵，反方的有力反驳是生命不是孤立系统，包括地球也不是&lt;/p&gt;
&lt;h3 id="_4"&gt;熵的微观解释&lt;/h3&gt;
&lt;p&gt;热力学第二定律在热力学范畴内是一条经验定律，随着统计力学的发展，这一定律才得到了解释，同时也使其意义更加深远，波及到物理学之外的许多领域&lt;/p&gt;
&lt;p&gt;玻尔兹曼发现单一系统中的熵跟构成热力学性质的微观状态数量相关。微观状态可以以每个组成的原子的位置及动量予以表达&lt;/p&gt;
&lt;p&gt;玻尔兹曼这样来定义熵：&lt;/p&gt;
&lt;div class="math"&gt;$$S = k(ln\Omega)$$&lt;/div&gt;
&lt;p&gt;其中k是玻尔兹曼常数，&lt;span class="math"&gt;\(\Omega\)&lt;/span&gt;则为&lt;code&gt;该宏观状态中所包含之微观状态数量&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们知道，熵可以作为混乱程度的度量，可此前无论在热力学第二的表述或是克劳修斯定义的熵中，我们都无从看到这点。&lt;/p&gt;
&lt;p&gt;只有在玻尔兹曼这里，熵才和系统的混乱程度联系起来，因为&lt;span class="math"&gt;\(\Omega\)&lt;/span&gt;可以作为一个系统混乱程度的度量：作为有规律的系统，只有有限的几种构型，而混乱的系统可以有无限多个构型&lt;/p&gt;
&lt;p&gt;维基百科里的这个例子很好：&lt;/p&gt;
&lt;p&gt;设想有一组10个硬币，每一个硬币有两面，掷硬币时得到最有规律的状态是10个都是正面或10个都是反面，这两种状态都只有一种构型（排列）。反之，如果是最混乱的情况，有5个正面5个反面，排列构型可以有 &lt;span class="math"&gt;\({\displaystyle C_{10}^{5}}\)&lt;/span&gt; = 252种&lt;/p&gt;
&lt;p&gt;在微观视角下，如何解释孤立系统熵增的必然性呢，毕竟，如果粒子数量和上边硬币一样多，在瓶子里乱窜，按概率来说。完全可能存在某个时段，熵减啊，诸如原本反向的例子碰壁后都同向了，如此一来&lt;span class="math"&gt;\(\Omega\)&lt;/span&gt;减小，熵不是也减小了么。如果你对这个问题感到疑惑，可以参考&lt;a href="https://www.zhihu.com/question/19753084"&gt;这个回答&lt;/a&gt;。简单来说就是：&lt;strong&gt;熵增，这样一个在微观状态下完全由概率决定的事情，在宏观状态就成了必然&lt;/strong&gt;，在分子数目足够多的时候，只有一种情况最常见最稳定，即所有气体分子均匀分布&lt;/p&gt;
&lt;h1 id="_5"&gt;信息熵&lt;/h1&gt;
&lt;p&gt;1948年，香农这位不世出的天才，将热力学熵，引入到信息论&lt;/p&gt;
&lt;p&gt;在热力学中，熵可以作为混乱程度的度量度量。在信息论中，熵最好理解为不确定性的量度。两者的关联，放到后边论述&lt;/p&gt;
&lt;p&gt;在信息世界，熵越高，则能传输越多的信息，熵越低，则意味着传输的信息越少&lt;/p&gt;
&lt;h3 id="_6"&gt;定义&lt;/h3&gt;
&lt;div class="math"&gt;$$\mathrm{H} (X)=-\sum _{{i}}{{\mathrm  {P}}(x_{i})\log _{b}{\mathrm  {P}}(x_{i})},$$&lt;/div&gt;
&lt;p&gt;b是对数所使用的底，通常是2,自然常数e，或是10，b为2时，熵的单位是bit&lt;/p&gt;
&lt;h1 id="_7"&gt;两者联系&lt;/h1&gt;
&lt;p&gt;在传统热力学中，熵被定义为对系统的宏观测定，并没有涉及概率分布，而概率分布是信息熵的核心定义。&lt;/p&gt;
&lt;p&gt;香农在定义熵时，根据的是玻尔兹曼对熵的统计学定义，所以两者在形式上基本一致，基本意义也完全一样，都是『（拥有某种观测能力的观测者）描述一个系统所需的信息量』。（按&lt;a href="https://www.zhihu.com/question/20992022"&gt;信息熵与热力学熵有什么区别和联系？&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;描述一个系统所需的信息量（信息熵）与观测的精细程度相关，这个精细度存在物理极限，达到物理极限时，玻尔兹曼熵就是信息熵，系统的物理状态数就是这个系统包含的/携带的信息量的上限。就是说，当这个世界的信息量达到（或接近）这个世界本身的玻尔兹曼熵之后，就无法增长了&lt;/p&gt;
&lt;h3 id="_8"&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E6%96%AF%E9%9F%A6%E5%A6%96"&gt;麦克斯韦妖&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;麦克斯韦妖（Maxwell's demon），是在物理学中假想的妖，能探测并控制单个分子的运动。&lt;/p&gt;
&lt;p&gt;可以表述为：一个绝热容器被分成相等的两格，中间是由“妖”控制的一扇小“门”，容器中的空气分子作无规则热运动时会向门上撞击，“门”可以选择性的将速度较快的分子放入一格，而较慢的分子放入另一格，这样，其中的一格就会比另外一格温度高，可以利用此温差，驱动热机做功。&lt;/p&gt;
&lt;p&gt;这是第二类永动机的一个范例&lt;/p&gt;
&lt;p&gt;可以采用信息熵来消解这个问题：让小妖精行使职责本身——即便只是了解和储存每个分子最初的香农信息——就会给系统带来热力学熵的增加，因此总的来说，系统的熵的总量没有减少&lt;/p&gt;
&lt;h1 id="_9"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%86%B5"&gt;维基百科 熵(热力学)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA)"&gt;维基百科 熵(信息论)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/19753084"&gt;「熵」是什么？ 怎样以简单易懂的方式向其他人解释？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20992022"&gt;信息熵与热力学熵有什么区别和联系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E6%96%AF%E9%9F%A6%E5%A6%96"&gt;麦克斯韦妖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E5%8A%9B%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%AE%9A%E5%BE%8B"&gt;热力学第二定律&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E7%83%AD%E5%8A%9B%E5%AD%A6"&gt;热力学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E5%AF%82"&gt;热寂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E8%AE%A1%E5%8A%9B%E5%AD%A6"&gt;统计力学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-23:Entropy.html</guid><category>data</category></item><item><title>[译]神经网络的"Hello world" --keras 入门</title><link>/keras-hello-world-pelican.html</link><description>&lt;h1 id="_1"&gt;本文写作说明&lt;/h1&gt;
&lt;p&gt;本文在jupyter notebook中写作，因为博客使用pelican构建，于是我将ipynb导出为html(单个文件)，然后放到博客的output里，用&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;链入博客主体&lt;/p&gt;
&lt;p&gt;当然你也可以直接在github上读：&lt;a href="https://github.com/wwj718/keras-hello-world/blob/master/kerashelloworld_zh.ipynb"&gt;wwj718/keras-hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;正文&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="/others/keras-hello-world.html" width="100%" height="8000px" marginwidth="0" marginheight="0" frameborder="0" scrolling="no"&gt;You need an iFrame capable browser to view this.&lt;/iframe&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-20:keras-hello-world-pelican.html</guid><category>data</category></item><item><title>把聊天机器人接入微信</title><link>/create-wechat-bot.html</link><description>&lt;p&gt;今晚看了个电影，回得有点迟。上周末写了一篇&lt;a href="http://blog.just4fun.site/create-a-smart-chat-bot.html"&gt;构建自己的智能聊天机器人&lt;/a&gt;。在微博中被一位技术大V转载，而后博客访问量陡增，之后又被微信一个机器学习的公众号转载，大家似乎很感兴趣，为了对得起增长的访问流量，趁热再写些东西&lt;/p&gt;
&lt;p&gt;今天分享如何把聊天机器人接入微信，代替我们和好友聊天&lt;/p&gt;
&lt;p&gt;源码我已经托管到github：&lt;a href="https://github.com/wwj718/wechat_bot"&gt;wechat_bot&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="api"&gt;机器人的api接口&lt;/h1&gt;
&lt;p&gt;首先我们决定把聊天机器人封装为api服务，这样它的使用场合就不受限制了，能服务于任何http client&lt;/p&gt;
&lt;p&gt;这样做的另一个原因是，我们的微信接入脚本是python2的，而中文聊天机器人脚本基于python3，我不想处理pyhton2/3的编码，所以把机器人封装为服务&lt;/p&gt;
&lt;p&gt;阅读下文前，假设你读过我的上篇文章&lt;a href="http://blog.just4fun.site/create-a-smart-chat-bot.html"&gt;构建自己的智能聊天机器人&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们直接开始构建聊天服务.&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;bot_api.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hug&lt;/span&gt;


&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deepThought&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 使用中文语料库训练它&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatterbot.corpus.chinese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 语料库&lt;/span&gt;


&lt;span class="nd"&gt;@hug.get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;源码十分简单，不必多做解释&lt;/p&gt;
&lt;p&gt;在此我选择&lt;a href="https://github.com/timothycrosley/hug"&gt;hug&lt;/a&gt;作为我的api框架，原因是它的效率很高（比flask还高不少）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/hug16201c01.png" /&gt;&lt;/p&gt;
&lt;p&gt;安装依赖：pip3 install hug ，chatterbot的安装方法参考上篇文章&lt;/p&gt;
&lt;p&gt;跑起服务：&lt;code&gt;hug -f bot_api.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/hug0e6e17ad.png" /&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;测试服务&lt;/h3&gt;
&lt;p&gt;在浏览器中测试&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/hug336b216d.png" /&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;接入微信&lt;/h1&gt;
&lt;p&gt;首先感谢@liuwons的&lt;a href="https://github.com/liuwons/wxBot"&gt;wxBot&lt;/a&gt;项目，它让我们能用代码与微信交互，这样一来使聊天过程（input/output）可编程了&lt;/p&gt;
&lt;p&gt;于是我们可以让聊天机器人接管我们的聊天。&lt;/p&gt;
&lt;h3 id="_3"&gt;操作过程&lt;/h3&gt;
&lt;p&gt;首先下载wxBot脚本到本地：&lt;code&gt;wget https://raw.githubusercontent.com/liuwons/wxBot/master/wxbot.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接着创建&lt;code&gt;wechat_bot.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WXBot&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;bot_api&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1:8000/get_response&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWXBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WXBot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_msg_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;msg_type_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bot_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#print(type(response)) # unicode&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg_by_uid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWXBot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装依赖：&lt;code&gt;pip install requests pyqrcode pypng Pillow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;开始运行(使用python2)：&lt;code&gt;python wechat_bot.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后扫码登录即可&lt;/p&gt;
&lt;h1 id="_4"&gt;开始聊天&lt;/h1&gt;
&lt;p&gt;这是程序收到的消息
&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/botaed8c5a1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是被机器人接管的聊天界面&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/wechat_bot6055328f.png" /&gt;&lt;/p&gt;
&lt;p&gt;感谢小伙伴半夜出出镜助攻，哈哈码农都是夜猫子&lt;/p&gt;
&lt;p&gt;have a good time&lt;/p&gt;
&lt;p&gt;啊 写完都半夜了，赶紧睡觉&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-16:create-wechat-bot.html</guid><category>data</category></item><item><title>自然语言处理之语料库资源</title><link>/NLP-corpus.html</link><description>&lt;blockquote&gt;
&lt;p&gt;巧妇难为无米之炊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_1"&gt;语料库&lt;/h1&gt;
&lt;p&gt;语料库（corpus）一词在语言学上意指大量的文本，是在语言的实际使用中真实出现过的语言材，通常经过整理，具有既定格式与标记&lt;/p&gt;
&lt;p&gt;事实上，语料库英文 "text corpus" 的涵意即为 "body of text"。&lt;/p&gt;
&lt;p&gt;语料库是语料库语言学研究的基础资源，也是经验主义语言研究方法的主要资源。&lt;/p&gt;
&lt;p&gt;本文主要关注中文语料库（顺便一提英文语料库）&lt;/p&gt;
&lt;h3 id="_2"&gt;英文语料库&lt;/h3&gt;
&lt;p&gt;NLTK的&lt;a href="https://github.com/nltk/nltk_data"&gt;nltk_data&lt;/a&gt;囊括数个在 NLP 研究圈里广泛使用的实用语料库，针对英文的自然语言处理，已经成果显著，资源也易于获取，这里列出一些不错的语料库，我们更多的精力放在中文语料库上&lt;/p&gt;
&lt;p&gt;先列出NLTK里的语料库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布朗语料库（Brown Corpus）：第一个可以在计算语言学处理中使用的通用英语语料库。它包含了一百万字 1961 年出版的美语文本。它代表了通用英语的样本，采样自小说，新闻和宗教文本。随后，在大量的人工标注后，诞生了词性标注过的版本。&lt;/li&gt;
&lt;li&gt;古登堡语料库（Gutenberg Corpus）：古登堡计划（Gutenberg Project）致力于将文化作品的数字化和归档，并鼓励创作和发行电子书。古登堡语料库选择了 14 个文本，整个语料库包含了一百七十万字v&lt;/li&gt;
&lt;li&gt;Stopwords Corpus：NLTK 所收集的停用词语料库（Stopwords Corpus）包含了 来自 11 种不同语言（包括英语）的 2400 个停用词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他的著名语料库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://corpus.byu.edu/coca/"&gt;美国当代英语语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.collinslanguage.com/"&gt;柯林斯英语语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sara.natcorp.ox.ac.uk/"&gt;英国国家语料库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;中文语料库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dumps.wikimedia.org/zhwiki/"&gt;维基百科中文@维基dump&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;使用：&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C"&gt;中英文维基百科语料上的Word2Vec实验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://licstar.net/archives/262"&gt;维基百科简体中文语料的获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/hereiskxm/article/details/49664845"&gt;用wiki百科中文语料训练word2vec模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pan.baidu.com/s/1bnhXX6Z"&gt;搜狗20061127新闻语料(包含分类)@百度盘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pan.baidu.com/s/1gdJJ1FP"&gt;分词库(语料)&lt;/a&gt;：包含非常多的各行业词汇&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.nlpcn.org/resource/list/2"&gt;中国自然语言开源组织(nlpcn)语料资源&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cncorpus.org/Resources.aspx"&gt;国家语委现代汉语语料库&lt;/a&gt; ：现代汉语语料库在线提供免费检索的语料约2000万字，为分词和词性标注语料
    &lt;a href="http://www.cncorpus.org/ACindex.aspx"&gt;古代汉语语料库&lt;/a&gt;：提供了分词、词性标注软件、词频统计、字频统计软件&lt;/li&gt;
&lt;li&gt;&lt;a href="http://app.sinica.edu.tw/kiwi/mkiwi/"&gt;台湾中央研究院&lt;/a&gt;：有丰富的语料库&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bcc.blcu.edu.cn/"&gt;BCC语料库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nlp.blcu.edu.cn/research"&gt;资源下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.datatang.com/data/list"&gt;数据堂&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="github"&gt;github的一些资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nonamestreet/weixin_public_corpus"&gt;weixin_public_corpus&lt;/a&gt;  微信公众号语料库，目前数据大约3G&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shijiebei2009/CEC-Corpus"&gt;CEC-Corpus&lt;/a&gt;：中文突发事件语料库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ml-distribution/chinese-corpus"&gt;chinese-corpus&lt;/a&gt;  中文相关词典和语料库&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_4"&gt;搜狗实验室&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sogou.com/labs/resource/w.php"&gt;互联网词库(SogouW)&lt;/a&gt;：搜狗实验室&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/first20hours/google-10000-english"&gt;google-10000-english&lt;/a&gt;：list of the 10,000 most common English words in order of frequency, as determined by n-gram frequency analysis of the Google's Trillion Word Corpus&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dariusk/corpora"&gt;corpora&lt;/a&gt;：A collection of small corpuses of interesting data for the creation of bots and similar stuff.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/clips/pattern"&gt;pattern&lt;/a&gt;  从互联网获取语料&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="www.lingviko.net/feng/05-23-final.pdf"&gt;应用语言学中的语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.douban.com/note/269081724/"&gt;【汇总】语料库资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_66dfbcca0100r3ex.html"&gt;国内可用免费语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.52nlp.cn/nlp%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E7%9B%9B%E5%AE%B4"&gt;NLP资源共享盛宴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/85094/"&gt;Python自然语言处理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/206caa232ded"&gt;中文文本语料库整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-13:NLP-corpus.html</guid><category>data</category></item><item><title>构建自己的智能聊天机器人</title><link>/create-a-smart-chat-bot.html</link><description>&lt;p&gt;(说明: 这篇文章读者较多，时常会收到邮件咨询问题， 大多是因为文章落后于源码库，我之后定期更新到最新源码库，大家之后发邮件,也麻烦注明使用的依赖库版本)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The answer to life, universe and everything is 42     --deepThought&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/bot1983acb5.png" /&gt;&lt;/p&gt;
&lt;p&gt;今年的F8 开发者大会,Facebook大谈他们看好聊天机器人的未来 。通过这些聊天机器人，用户可以在交谈中完成许多任务，在线购物，航班查询、组织会议等。如此一来，用户再不必下载一堆app,而只需打开一个简单的文本对话框，你就可以对着它说：神灯神灯，我的第三个愿望是我还要三个愿望&lt;/p&gt;
&lt;p&gt;你说不定想到了：hi siri&lt;/p&gt;
&lt;p&gt;说不定又是一次用户入口的重新洗牌，这样就不难解释科技界的大公司们蜂拥而至了&lt;/p&gt;
&lt;h1 id="_1"&gt;缘起&lt;/h1&gt;
&lt;p&gt;我一直对自然语言处理（NLP）兴致勃勃，这大半年对机器学习/深度学习兴致盎然，而聊天机器人恰好结合了两者。&lt;/p&gt;
&lt;p&gt;对聊天机器人最早的兴趣可能追溯到大学。当时关注过一段时间风靡人人网的小黄鸡，后来发现它只是调用了一个闭源的云服务，转而折腾AIML。&lt;/p&gt;
&lt;p&gt;最近下班后喜欢到星巴克看看课程（近期在跟udacity的这门课：&lt;a href="https://classroom.udacity.com/courses/ud730"&gt;Deep Learning&lt;/a&gt;），写写博客,今天也是如此，怕往后的时间会更多花在深度学习上（对RNN尤其感兴趣），这几天陆续对折腾过的聊天机器人做个笔记&lt;/p&gt;
&lt;h1 id="_2"&gt;聊天机器人 &amp;amp; 开源框架&lt;/h1&gt;
&lt;p&gt;目前聊天这块的云服务倒是不少，facebook也好微软也好，都有自己的框架。相比而言，开源的项目倒是没有很耀眼的，也许是起步不久的原因，大神们还在憋大招。&lt;/p&gt;
&lt;p&gt;我们到github逛一圈，发现&lt;a href="https://github.com/gunthercox/ChatterBot"&gt;ChatterBot&lt;/a&gt;看起来挺酷, 项目活跃, 文档清晰，代码也算干净利落。&lt;/p&gt;
&lt;p&gt;由于项目还小，源码读起来十分容易，作为构建自己的智能聊天机器人的脚手架是不错的&lt;/p&gt;
&lt;h1 id="chatterbot"&gt;ChatterBot&lt;/h1&gt;
&lt;p&gt;ChatterBot是一个基于机器学习的聊天机器人引擎,构建在python上,可以&lt;code&gt;从已有的对话中学习&lt;/code&gt;, 该项目的设计允许它接入任何语言&lt;/p&gt;
&lt;h2 id="_3"&gt;原理&lt;/h2&gt;
&lt;p&gt;一个未经训练的ChatterBot机器人,并没有与用户交谈所需的知识。每当用户输入一句话，机器人将存下它，同时也存下答复的句子。 随着机器人接受的输入的增加，它能够回答的问题的数量和准确度都会相应提升.程序是如何响应用户输入的呢？首先从已知句子中匹配出与用户输入最相近的句子（如何衡量&lt;code&gt;相近&lt;/code&gt;, 大家可以想想）,之后找到最有可能的回复，那么如何得出&lt;code&gt;最有可能&lt;/code&gt;的回复呢？由所有和机器交流过的人们，对这个输入问题（匹配过的）的各个回答的频率决定&lt;/p&gt;
&lt;h2 id="_4"&gt;安装和使用&lt;/h2&gt;
&lt;h3 id="_5"&gt;安装&lt;/h3&gt;
&lt;p&gt;pip install chatterbot (我的当前版本是：chatterbot==0.5.4)&lt;/p&gt;
&lt;h3 id="_6"&gt;基本使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;

&lt;span class="n"&gt;chatbot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myBot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;chatbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 使用英文语料库训练它&lt;/span&gt;
&lt;span class="n"&gt;chatbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatterbot.corpus.english&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 开始对话 &lt;/span&gt;
&lt;span class="n"&gt;chatbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, how are you today?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_7"&gt;采用中文语料库&lt;/h3&gt;
&lt;p&gt;我之前给这个项目添加了中文语料库,在新版本中可以直接使用&lt;/p&gt;
&lt;p&gt;使用中文语料库来训练机器人(仅支持python3)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deepThought&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 使用中文语料库训练它&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatterbot.corpus.chinese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 语料库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;------------更新于2016.08.30&lt;/p&gt;
&lt;p&gt;我今天在pypi上看到，0.4.6版本（08.14号上传）已经把中文预料库包含在内了，直接pip3 install ChatterBot就行&lt;/p&gt;
&lt;p&gt;------------更新于2017.1.4&lt;/p&gt;
&lt;p&gt;需要注意的是，python2中使用，不能直接用语料训练，需要手动训练&lt;/p&gt;
&lt;p&gt;参见FAQ中的 手动训练(手动训练可以直接在python2中使用中文)&lt;/p&gt;
&lt;h3 id="_8"&gt;开始玩耍&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;很高兴认识你&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;嗨，最近如何?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;复杂优于晦涩&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#语出 The Zen of Python&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;面对模棱两可，拒绝猜测的诱惑.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# print(deepThought.get_response(&amp;quot;生命、宇宙以及世间万物的终极答案是什么?&amp;quot;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="faq"&gt;FAQ（非官方）&lt;/h1&gt;
&lt;h3 id="_9"&gt;默认配置&lt;/h3&gt;
&lt;p&gt;默认情况下, ChatterBot 使用 &lt;code&gt;JsonDatabaseAdapter&lt;/code&gt;作为storage adapter,使用 &lt;code&gt;ClosestMatchAdapter&lt;/code&gt; 作为 logic adapter, 使用 &lt;code&gt;VariableInputTypeAdapter&lt;/code&gt; 作为 input adapter&lt;/p&gt;
&lt;h3 id="_10"&gt;手动训练&lt;/h3&gt;
&lt;p&gt;稀土掘金上的小伙伴&lt;code&gt;@guoweikuang&lt;/code&gt;问道"采用中文语料库那个地方是怎么操作的"，下边补充手动训练的办法。对原理有兴趣可以翻阅源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListTrainer&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Training demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;嗳，渡边君，真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那还用说?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那么，可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;三件也依得&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="c1"&gt;# test&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;----------更新于2016.10.26&lt;/p&gt;
&lt;p&gt;通过设置好编码环境我们可以在python2使用中文训练机器人,这样就不需要在python2/3中来回切换了（我把它封装为服务不存在这个问题，且效率提高）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListTrainer&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Training demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;嗳，渡边君，真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那还用说?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那么，可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;三件也依得&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="c1"&gt;# test&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_11"&gt;只读模式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;chatbot = ChatBot("wwjtest", read_only=True)&lt;/code&gt;  //否则bot会学习每个输入&lt;/p&gt;
&lt;h3 id="_12"&gt;创建自己的训练类&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/gunthercox/ChatterBot/tree/master/chatterbot/training"&gt;chatterbot/training&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="adapters"&gt;创建自己的adapters&lt;/h3&gt;
&lt;p&gt;参考默认使用的&lt;a href="http://chatterbot.readthedocs.io/en/latest/_modules/chatterbot/adapters/logic/closest_match.html#ClosestMatchAdapter"&gt;ClosestMatchAdapter&lt;/a&gt;、&lt;a href="http://chatterbot.readthedocs.io/en/latest/_modules/chatterbot/adapters/input/variable_input_type_adapter.html#VariableInputTypeAdapter"&gt;VariableInputTypeAdapter&lt;/a&gt;即可&lt;/p&gt;
&lt;p&gt;诸如我们可以写一个输入/输出 adapters，对接到微信（我偏好werobot）&lt;/p&gt;
&lt;p&gt;io的一个案例是&lt;a href="https://github.com/gunthercox/chatterbot-voice"&gt;chatterbot-voice&lt;/a&gt;（使用方法参考&lt;a href="https://github.com/gunthercox/chatterbot-voice/blob/master/examples/example.py"&gt;examples/example.py&lt;/a&gt;），这个adapters让我们可以使用语音与我们的机器人沟通，原理很简单，我此前折腾过&lt;a href="https://github.com/wwj718/PyBaiduYuyin"&gt;BaiduYuyin&lt;/a&gt;，国内用户可以使用它&lt;/p&gt;
&lt;h3 id="_13"&gt;案例&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://github.com/gunthercox/ChatterBot/tree/master/examples"&gt;examples&lt;/a&gt; ，案例中已经有很多种机器人了&lt;/p&gt;
&lt;h3 id="_14"&gt;训练好的模型如何分发&lt;/h3&gt;
&lt;p&gt;训练好的数据，默认存在&lt;code&gt;./database.db&lt;/code&gt;（参考&lt;a href="https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/storage/jsondatabase.py"&gt;jsondatabase.py&lt;/a&gt;）,不是sqlite数据库，实际是&lt;a href="https://github.com/gunthercox/jsondb"&gt;jsondb&lt;/a&gt;，对json做了封装（参考&lt;a href="https://github.com/gunthercox/jsondb/blob/master/jsondb/db.py"&gt;jsondb/db.py&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id="_15"&gt;算法相关&lt;/h3&gt;
&lt;p&gt;默认情况下，使用 &lt;a href="https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/closest_match.py#L5"&gt;ClosestMatchAdapter&lt;/a&gt; 作为 logic adapter ，用来找出与用户输入最接近的一句话&lt;/p&gt;
&lt;p&gt;核心代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fuzzywuzzy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;

&lt;span class="n"&gt;closest_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;confidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;input_statement&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;text_of_all_statements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我们用到了&lt;a href="https://github.com/seatgeek/fuzzywuzzy"&gt;fuzzywuzzy&lt;/a&gt;，具体用法参考&lt;a href="https://github.com/seatgeek/fuzzywuzzy#process"&gt;fuzzywuzzy#process&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;fuzzywuzzy用于计算句子之间的相似度，采用的字符串相似度算法为 Levenshtein Distance(编辑距离算法)&lt;/p&gt;
&lt;h4 id="levenshtein-distance"&gt;Levenshtein Distance（引用自维基百科）&lt;/h4&gt;
&lt;p&gt;编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数，如果它们的距离越大，说明它们越是不同。允许的编辑操作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将一个字符替换成另一个字符&lt;/li&gt;
&lt;li&gt;插入一个字符&lt;/li&gt;
&lt;li&gt;删除一个字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上述描述我们可以看出，这种算法适用于任何文字，而且我们使用&lt;code&gt;process.extract&lt;/code&gt;时,使用中文不会影响相似度度量的准确性。当然我们也可以看出这种算法的缺陷，它无法理解语义的相似性，甚至连同义词都完全无法处理。这是一个十分明显的短板，有必要根据你的问题域重新实现一套度量文本相似的logic adapter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fuzzywuzzy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fuzz&lt;/span&gt;
&lt;span class="n"&gt;fuzz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#80 &lt;/span&gt;
&lt;span class="n"&gt;fuzz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#100 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_16"&gt;其他算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/time_adapter.py"&gt;time_adapter.py&lt;/a&gt;中用到朴素贝叶斯:&lt;code&gt;from textblob.classifiers import NaiveBayesClassifier&lt;/code&gt;，这里也是目前唯一一处引用textblob的地方&lt;/p&gt;
&lt;p&gt;接受的数据很简单，形如&lt;code&gt;[("what time is it", 1), xxx, xxx,...]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="nltk"&gt;nltk的使用&lt;/h3&gt;
&lt;p&gt;目前主要用了nltk的&lt;code&gt;word_tokenize&lt;/code&gt;、&lt;code&gt;wordnet&lt;/code&gt;和&lt;code&gt;stopwords&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="todo"&gt;todo&lt;/h1&gt;
&lt;p&gt;这是我最近在做的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使这个项目能更适合训练中文语料库&lt;/li&gt;
&lt;li&gt;用其他的文本相似算法写一个logic adapter&lt;/li&gt;
&lt;li&gt;加入中文的停用词等（取代nltk的停用词）&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/isnowfy/snownlp"&gt;snownlp&lt;/a&gt;和jieba替代既有依赖（nltk和textblob）&lt;/li&gt;
&lt;li&gt;fork这个项目，采用它的架构，重写一个更适合中文的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有兴趣跟进的小伙伴，可以关注&lt;a href="https://github.com/wwj718/deepThought"&gt;wwj718/deepThought&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_17"&gt;聊天语料库&lt;/h1&gt;
&lt;p&gt;聊天语料涉及隐私，网上几乎没有公开的中文语料，我们开脑洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;siri对小冰（用wechat api使对话可编程）&lt;/li&gt;
&lt;li&gt;柏拉图《对话录》&lt;/li&gt;
&lt;li&gt;《论语》&lt;/li&gt;
&lt;li&gt;古龙小说&lt;/li&gt;
&lt;li&gt;电影字幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_18"&gt;坑&lt;/h1&gt;
&lt;p&gt;ChatterBot本身支持python2/python3，如果要使用中文，目前只支持python3&lt;/p&gt;
&lt;p&gt;Python2中文问题出在:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;statement_list = self.context.storage.get_response_statements()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到的&lt;code&gt;statement_list&lt;/code&gt;是编码错误的句子列表（编解码问题）&lt;/p&gt;
&lt;p&gt;解决思路可以参考我的这篇博客：&lt;a href="http://blog.just4fun.site/decode-and-encode-note.html"&gt;编码相关的笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_19"&gt;结语&lt;/h1&gt;
&lt;p&gt;当前这个项目给出了一个漂亮的bot骨架，插件式的设计，十分利于插入强大的功能，这也是这个项目中我最喜欢的地方，就chat bot功能而言，功能比较简单、清晰&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-13:create-a-smart-chat-bot.html</guid><category>data</category></item><item><title>可视化筛选你中意的工作</title><link>/jobsVisualization.html</link><description>&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/jobsVisualization/master/jobs.gif" /&gt;&lt;/p&gt;
&lt;p&gt;晚上到星巴克写作的效率好高!&lt;/p&gt;
&lt;h1 id="_1"&gt;缘起&lt;/h1&gt;
&lt;p&gt;在技术这个话题下，我比较形而下，大概算实用主义者，关注技术的现实意义。另一个原因可能是数学不够好，数学好的小伙伴如@sevenry，更多兴趣在探索算法和问题的数学形式。&lt;/p&gt;
&lt;p&gt;前段时间有朋友在找工作，作为技术宅，当然不能像一般用户那样找啦，于是小伙伴决定写个爬虫帮忙去搜寻合适的工作。我觉得有趣，那算时间正好在看数据可视化和数据采集相关的书，心痒痒地想试试，于是就用了一个周末时间写了一个爬虫和数据可视化项目，帮助求职者更方便地找到中意的职位&lt;/p&gt;
&lt;h1 id="_2"&gt;现有问题&lt;/h1&gt;
&lt;p&gt;一开始在思考，用户上主流的招聘网站寻找合适的职位，是怎样一种体验呢，自己试着用了几个主流网站。体验类似淘宝购物，选择过滤条件，然后逐个职位看过去。其中比较不爽的是，翻了后页，忘了前页，对不同的职位我想做个对比，不得不逐个记下第一印象合格的职位的网址，之后逐个网页打开，做优劣势的比较。十分困难，大脑每次只能处理极少数量的职位和维度（薪资，地理位置，福利），以至于半天没法得出那个更好。想用控制变量来比较，发现工作量很大&lt;/p&gt;
&lt;h1 id="_3"&gt;构思&lt;/h1&gt;
&lt;p&gt;在没想清楚怎么做可视化之前，先写了爬虫，采集到数据后，这部分反正不怎么需要思考。看到爬取到的数据有很多个维度之后（薪资，地理位置，福利...），突然想到，这是是个多指标的过滤问题啊，而这个词我在印象笔记里记过，也不知道是不是自创，是对阅读&lt;a href="https://github.com/bokeh/bokeh/tree/0.11.1/examples/app/movies"&gt;bokeh example app movies&lt;/a&gt;项目的批注，这个项目和我将做的事，在模式上是何等相似啊，于是剩下的就是细节工作了&lt;/p&gt;
&lt;h1 id="_4"&gt;项目细节&lt;/h1&gt;
&lt;h3 id="_5"&gt;项目相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gold.xitu.io/entry/577bc0601532bc005fe0e651/detail"&gt;稀土掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/jobSpider"&gt;jobSpider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;github jobsVisualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="jobs.just4fun.site/jobsVisualization"&gt;online demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;爬虫部分&lt;/h3&gt;
&lt;p&gt;我最初想爬取主流招聘网站的数据，考虑到工作量，选取了最喜欢的&lt;a href="http://www.lagou.com/"&gt;拉勾网&lt;/a&gt;，后期要拓展数据集只是体力活&lt;/p&gt;
&lt;p&gt;目前&lt;a href="https://github.com/wwj718/jobSpider"&gt;jobSpider&lt;/a&gt;jobSpider是一只爬取拉勾网的&lt;a href="https://github.com/scrapy/scrapy"&gt;scrapy&lt;/a&gt;爬虫，用于爬取职位信息。拉钩的数据接口非常漂亮，以至于这个项目本质上都不能算爬虫，它直接请求拉勾网的接口，获得漂亮的json数据，核心代码很短：&lt;a href="https://github.com/wwj718/jobSpider/blob/master/lagou/spiders/lagou_spider.py"&gt;lagou_spider.py&lt;/a&gt;，不用一分钟看完&lt;/p&gt;
&lt;p&gt;默认拉勾网会给出最新的5000条数据，如果你想爬取更多（比如研究职位变化趋势、从职位看行业热门），那么你需要进一步了解拉钩的数据接口&lt;/p&gt;
&lt;p&gt;为了对数据有个感性认知，我们来看下数据接口，可以在你的浏览器里打开&lt;a href="http://www.lagou.com/jobs/positionAjax.json"&gt;positionAjax&lt;/a&gt;，最好你的浏览器（chrome）装有JSONView插件，这样数据看去笔记层次分明&lt;/p&gt;
&lt;p&gt;至于我们是如何拉钩网友接口的，这就是体力活的，通过不段尝试（每个网站不尽相同），我是通过chrome的调试工具&lt;/p&gt;
&lt;p&gt;爬虫很简单，你读完scrapy的入门教程（&lt;a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html"&gt;中文教程&lt;/a&gt;）就能看懂了&lt;/p&gt;
&lt;p&gt;我在源码里给出了参考资源&lt;/p&gt;
&lt;h3 id="_7"&gt;可视化部分&lt;/h3&gt;
&lt;p&gt;要理解可视化部分:&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;，你可能需要对&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;和&lt;a href="https://github.com/bokeh/bokeh"&gt;bokeh&lt;/a&gt;。不过放心需要的都是入门级别的知识，稍微先过一下下门文档，遇到不懂回去查就好&lt;/p&gt;
&lt;h4 id="bokeh"&gt;bokeh&lt;/h4&gt;
&lt;p&gt;bokeh是一个非常酷的Python 交互式可视化库，在数据科学家聚集的&lt;a href="https://www.kaggle.com/"&gt;kaggle&lt;/a&gt;社区，被广泛使用，bokeh非常使用用来设计数据驱动的交互式应用，而我们让用户可视化地选择合适的工作，便是典型的此类应用。&lt;/p&gt;
&lt;p&gt;如果你对数据分析和可视化感兴趣，并向做出好玩的东西给别人试试，bokeh不容错过&lt;/p&gt;
&lt;p&gt;pandas太过有名，就不单独介绍了&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;等你看完pandas和bokeh的入门教程，就可以轻松阅读这个项目啦，不到不懂google就好&lt;/p&gt;
&lt;p&gt;这个项目也很简单，实际就是一个文件:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/main.py"&gt;main.py&lt;/a&gt;，数据源为:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/lagouSpider-newest.csv"&gt;lagouSpider-newest.csv&lt;/a&gt;，这个就是我们爬虫每天爬去的职位数据，是可视化应用的数据来源&lt;/p&gt;
&lt;p&gt;可视化部分的运作流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在浏览器里选择期待的地理位置、薪资、福利&lt;/li&gt;
&lt;li&gt;数据被传到后台，pandas根据用户的条件，从爬虫采集的数据里过滤出合适的，并返回&lt;/li&gt;
&lt;li&gt;浏览器将这些结果可视化&lt;/li&gt;
&lt;li&gt;用户直观看到合格数据在一个二维空间的分布，可以直观上进行对比选出最合适的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上的可视化和用户界面以及数据在网络的传输这些繁琐的杂货就是bokeh做的&lt;/p&gt;
&lt;h3 id="_8"&gt;部署成网站！&lt;/h3&gt;
&lt;p&gt;我已经将它部署成线上应用了:&lt;a href="jobs.just4fun.site/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;，你如果熟悉服务器和网站部署，也可以部署到自己的服务器上，相关文档我写在项目首页了:&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-08-01:jobsVisualization.html</guid><category>data</category></item><item><title>caravel系列之案例讲解与分析</title><link>/caravel-demo-analysis.html</link><description>&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_static/img/dash.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们以官方的示例数据为例(sqlite数据库中的birch_names数据表)&lt;/p&gt;
&lt;p&gt;想体验真实数据的小伙伴可以登录我的demo中一看究竟&lt;a href="http://caravel.just4fun.site/caravel/dashboard/births/"&gt;demo births&lt;/a&gt;,用户名和密码都是test&lt;/p&gt;
&lt;h1 id="birch_names"&gt;birch_names&lt;/h1&gt;
&lt;p&gt;birch_names是一张数据表（table），来自于数据库：&lt;code&gt;sqlite:////tmp/caravel.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="表结构" src="http://wwj-fig-bed.just4fun.site/caravel_demo_mainac79ec66.png" /&gt;&lt;/p&gt;
&lt;p&gt;数据一览
&lt;img alt="表内容" src="http://wwj-fig-bed.just4fun.site/caravel_demo_main84bfa3fb.png" /&gt;&lt;/p&gt;
&lt;p&gt;以上便是我们的原始数据，那么原始数据是如何一步步变为开篇那幅图表的呢，下边为你揭晓&lt;/p&gt;
&lt;h1 id="workflow"&gt;workflow&lt;/h1&gt;
&lt;h3 id="_1"&gt;添加数据源&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_demo_mainccb9413c.png" /&gt;&lt;/p&gt;
&lt;p&gt;填写数据信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_demo_main65e7c6e5.png" /&gt;&lt;/p&gt;
&lt;p&gt;完成后点击&lt;code&gt;Test Connection&lt;/code&gt;,底部将列出数据库中所有的数据表&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_demo_main45b437b8.png" /&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;添加表&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_demo_table79220d59.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_demo_table0734672c.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意到图片上方有3个tab页，分别为：Detail、List Table Column和List Sql Metric,默认打开Detail（如上）&lt;/p&gt;
&lt;p&gt;List Table Column:
&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_table606ba397.png" /&gt;&lt;/p&gt;
&lt;p&gt;List Table Column中的操作决定，各个字段可以做哪些操作(操作类型有,Groupable(分组),Filterable（过滤）,Count Distinct(统计有多少种不同值),Sum（求和），Min（最小值），Max（最大值）  Is tempora（是否是时间序列字段）)，如果你熟悉SQL，你应该一眼就能看懂什么意思&lt;/p&gt;
&lt;p&gt;值得注意的是表中必须有一个日期或时间类型的字段&lt;/p&gt;
&lt;p&gt;List Sql Metric:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_tablefe9a074f.png" /&gt;&lt;/p&gt;
&lt;p&gt;Metrics意为度量，做统计时，时常会遇到这个词，折腾elk是就遇到&lt;/p&gt;
&lt;p&gt;Druid.io文档中有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Metric columns: Metrics are columns used in aggregations and computations. In our example, the metrics are clicks and price. Metrics are usually numeric values, and computations include operations such as count, sum, and mean. Also known as measures in standard OLAP terminology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在List Sql Metric页面，可以编辑和定义指标，如果上面对一些字段勾选了Sum、Min、Max、Count Distinct选项，则这里会自动生成相应的指标字段。&lt;/p&gt;
&lt;h3 id="_3"&gt;可视化探索&lt;/h3&gt;
&lt;p&gt;我们以table为中心，这里我们已经定义好了birch_names表的维度字段和指标,下边我们可以开始对它进行探索&lt;/p&gt;
&lt;p&gt;开始探索&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_table3d6d5109.png" /&gt;&lt;/p&gt;
&lt;p&gt;在页面中，可以针对birch_names事先定义的字段和指标字段进行可视化探索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_table985b1aa2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下边是我们探索的一个成果，是不同名字的变化时序图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_table3cf9cdfa.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上它是以下SQL的可视化&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_table_sqlddb06dfe.png" /&gt;&lt;/p&gt;
&lt;p&gt;而我们在左边面板选择参数的过程就是动态生成SQL语句的过程&lt;/p&gt;
&lt;h3 id="_4"&gt;收获探索成果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将探索结果导出为JSON或是CSV&lt;/li&gt;
&lt;li&gt;将探索的成果保存为slide，之后可以分享给同伴&lt;ul&gt;
&lt;li&gt;将slide拼接为dashboard（就是这篇文章最初的那幅图）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将探索成果生成iframe嵌入到其他页面里（当报表用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/caravel_sharee4e2dcc7.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们带现连自适应也做的很好&lt;/p&gt;
&lt;h1 id="_5"&gt;坑&lt;/h1&gt;
&lt;h3 id="iframe"&gt;生成iframe&lt;/h3&gt;
&lt;p&gt;直接分享url没有问题，而iframe的尺寸有问题（caravel版本为0.10.0）&lt;/p&gt;
&lt;h1 id="_6"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/caravel/tutorial.html"&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;Caravel–一款开源OLAP+数据可视化分析前端工具，支持Druid和Kylin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-26:caravel-demo-analysis.html</guid><category>data</category></item><item><title>caravel系列之安装与入门</title><link>/caravel-startup-and-install.html</link><description>&lt;p&gt;&lt;img alt="caravel" src="http://i.imgur.com/H0Kyvyi.jpg" /&gt;&lt;/p&gt;
&lt;h1 id="caravel"&gt;caravel是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Caravel is an open source data visualization platform that provides easy exploration of your data and allows you to create and share beautiful charts and dashboards&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;caravel是Airbnb开源的一款数据可视化和探索工具，使用caravel用户可以轻松对数据进行可视化分析。&lt;/p&gt;
&lt;h1 id="_1"&gt;一图胜千言&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/line.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/bubble.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/world_map.png" /&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;使用场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库可视化分析&lt;/li&gt;
&lt;li&gt;数据模式套索&lt;/li&gt;
&lt;li&gt;BI&lt;/li&gt;
&lt;li&gt;数据报表与可视化图表&lt;/li&gt;
&lt;li&gt;tableau的开源替代&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;功能特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;丰富的可视化组件（集成最优秀的可视化图表库）&lt;/li&gt;
&lt;li&gt;创建和分享数据可视化互动仪表盘&lt;/li&gt;
&lt;li&gt;灵活的权限模型, 方面控制数据的可见度&lt;/li&gt;
&lt;li&gt;方便企业使用的用户验证机制，支持 database, OpenID, LDAP, OAuth和 REMOTE_USER (通过 Flask AppBuilder）&lt;/li&gt;
&lt;li&gt;简洁的语义层，可以控制数据资源在 UI 的展现方式&lt;/li&gt;
&lt;li&gt;通过SqlAlchemy可接入大多数据库&lt;/li&gt;
&lt;li&gt;与 Druid.io 的深度集成，可以方便处理大规模数据集&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="demo"&gt;demo尝试&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://caravel.just4fun.site/login/"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户名/密码：test/test&lt;/p&gt;
&lt;h1 id="_4"&gt;安装&lt;/h1&gt;
&lt;p&gt;根据&lt;a href="http://airbnb.io/caravel/installation.html"&gt;官方文档&lt;/a&gt;，caravel目前只支持python2.7，将来会支持python3&lt;/p&gt;
&lt;p&gt;我们在此演示Ubuntu下的安装，其他系统可以参考官方文档&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# OS dependencies&lt;/span&gt;
sudo apt-get install build-essential libssl-dev libffi-dev python-dev python-pip

&lt;span class="c1"&gt;# create virtual env and use it&lt;/span&gt;
sudo pip virtualenv -i http://mirrors.aliyun.com/pypi/simple/
virtualenv caravel_env
. caravel_env/bin/activate

&lt;span class="c1"&gt;# Install caravel&lt;/span&gt;
pip install caravel &lt;span class="c1"&gt;# 推荐使用anaconda&lt;/span&gt;

&lt;span class="c1"&gt;# Create an admin user&lt;/span&gt;
fabmanager create-admin --app caravel

&lt;span class="c1"&gt;# Initialize the database&lt;/span&gt;
caravel db upgrade

&lt;span class="c1"&gt;# Create default roles and permissions&lt;/span&gt;
caravel init

&lt;span class="c1"&gt;# Load some data to play with&lt;/span&gt;
caravel load_examples

&lt;span class="c1"&gt;# Start the web server on port 8088&lt;/span&gt;
caravel runserver -p &lt;span class="m"&gt;8088&lt;/span&gt;

&lt;span class="c1"&gt;# To start a development web server, use the -d switch&lt;/span&gt;
caravel runserver -d &lt;span class="c1"&gt;#建议使用tmux来跑，默认可通过0.0.0.0:8088访问&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你熟悉docker，你可以使用docker安装&lt;/p&gt;
&lt;h3 id="docker"&gt;使用docker安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker run --name caravel -d -p 8088:8088 amancevice/caravel&lt;/code&gt;，之后&lt;code&gt;docker exec -it caravel demo&lt;/code&gt;,初始化用户 ,细节参考 &lt;a href="https://hub.docker.com/r/amancevice/caravel/"&gt;dockerhub amancevice/caravel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;caravel被映射到本地的8088端口，之后可以用nginx反向代理把它映射出去，nginx中配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;             #端口
        server_name caravel.just4fun.site;   #访问域名
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:8088;  
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_5"&gt;支持的数据源&lt;/h1&gt;
&lt;p&gt;目前通过相关的python驱动支持大多主流数据仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prestodb/presto"&gt;Presto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;MSSQL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudera/Impala"&gt;Impala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关依赖和更多细节可以参考官方文档：&lt;a href="http://airbnb.io/caravel/installation.html#database-dependencies"&gt;Database dependencies&lt;/a&gt;,或者&lt;a href="https://github.com/zzzeek/sqlalchemy"&gt;sqlalchemy&lt;/a&gt;的文档：&lt;a href="http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html"&gt;Engine Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中Presto,Redshift和Impala可能需要做个介绍.&lt;/p&gt;
&lt;h4 id="presto"&gt;Presto&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed SQL query engine for big data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过&lt;a href="https://github.com/dropbox/PyHive"&gt;PyHive&lt;/a&gt;,我们能用sqlalchemy操作presto数据库，这样依赖我们就可以解决海量数据的SQL查询问题，presto支持PB级别的查询&lt;/p&gt;
&lt;h4 id="redshift"&gt;Redshift&lt;/h4&gt;
&lt;p&gt;Amazon Redshift 是一种可轻松扩展的完全托管型 PB 级数据仓库服务i&lt;/p&gt;
&lt;h4 id="impala"&gt;Impala&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Lightning-fast, distributed SQL queries for petabytes of data stored in Apache Hadoop clusters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="sql"&gt;分布式大数据SQL查询&lt;/h1&gt;
&lt;p&gt;如果我们的数据仓库存储海量的数据，直接查询数据库是低效的,caravel已经与Druid.io深度整合.对于大数据集可以采用Druid.io或是以上的解决方案&lt;/p&gt;
&lt;h1 id="_6"&gt;原理&lt;/h1&gt;
&lt;p&gt;这部分直接引用@lxw1234的&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caravel通过将界面的操作转换成SQL语句，提交给SQLAlchemy适配数据源查询并返回结果，对于Druid，Caravel将界面的操作转换成Druid的API进行查询并返回结果，与Druid的深度集成，可以实现大规模海量数据的OLAP分析和实时探索。&lt;/p&gt;
&lt;p&gt;另外，为了提高并发查询下的性能，还支持数据缓存，可配置将数据缓存至Redis、Memcache或者本地文件系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_7"&gt;坑&lt;/h1&gt;
&lt;h3 id="_8"&gt;登录问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新建用户无法登录，后端会说权限不够,无提示信息.猜测是用户系统尚未启用.目前是用fabmanager(Flask App Builder)后创建的的admin&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_9"&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/caravel/index.html"&gt;caravel documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/caravel"&gt;caravel github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prestodb/presto"&gt;presto&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://prestodb-china.com/index.html"&gt;国内社区与文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;京东开放的版本&lt;a href="https://github.com/CHINA-JD/presto/"&gt;presto&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;京东已实现presto到oracle的连接:http://prestodb-china.com/faq.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://prestodb-china.com/resources.html"&gt;prestodb-china.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/analytically/hadoop-ansible"&gt;ansble安装脚本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;Caravel–一款开源OLAP+数据可视化分析前端工具，支持Druid和Kylin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-26:caravel-startup-and-install.html</guid><category>data</category></item></channel></rss>