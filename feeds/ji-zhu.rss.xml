<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writing for time</title><link>/</link><description></description><atom:link href="/feeds/ji-zhu.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 04 May 2016 00:00:00 -0000</lastBuildDate><item><title>nginx使用笔记</title><link>/nginx-note.html</link><description>&lt;h1&gt;安装&lt;/h1&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;p&gt;sudo apt-get install nginx&lt;/p&gt;
&lt;h3&gt;编译安装&lt;/h3&gt;
&lt;p&gt;waiting (可以加入其它模块)&lt;/p&gt;
&lt;h3&gt;配置文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;/etc/nginx //所有的配置文件&lt;/li&gt;
&lt;li&gt;/etc/nginx/sites-available //sites-available存放所有配置文件，无论是非启用&lt;/li&gt;
&lt;li&gt;/etc/nginx/sites-enabled   //软链接到sites-available，这里的符号链接代表启用&lt;/li&gt;
&lt;li&gt;/var/log/nginx  //日志&lt;/li&gt;
&lt;li&gt;/etc/init.d/  //该目录下有启动脚本&lt;/li&gt;
&lt;li&gt;/usr/share/nginx/www //默认的虚拟主机的目录&lt;/li&gt;
&lt;li&gt;/usr/sbin/nginx  //启动文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日常管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo /etc/init.d/nginx start  //apt安装的启动方式&lt;/li&gt;
&lt;li&gt;sudo /etc/init.d/nginx restart  //重启&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;用例&lt;/h1&gt;
&lt;h3&gt;一个静态文件服务器&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/nginx/sites-available/static_server
sudo ln -s /etc/nginx/sites-available/static_server /etc/nginx/sites-enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        client_max_body_size 4G;
        listen  80;  ## listen for ipv4; this line is default and implied
        #server_name static.test.sdk.iwplay.com.tw;
         root /home/wwj/static_dir;
         location / {
               #auth_basic   &amp;quot;Restricted&amp;quot;;  #认证模块
               #auth_basic_user_file /etc/nginx/pass_file;
               autoindex on; #显示索引
               autoindex_exact_size on; #显示大小
               autoindex_localtime on;  #显示时间
        }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加认证用户: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2-utils
sudo touch /etc/nginx/pass_file
sudo htpasswd -c -d /etc/nginx/pass_file wwj718
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;反向代理&lt;/h3&gt;
&lt;p&gt;假设我们的网站跑在5000端口（flask demo）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 8050;             #端口
        #server_name dylan.com;   #访问域名
        #root /home/bob/dylan/;
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:5000;  #这里是flask应用的gunicorn端口
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们也时常反向代理到内网的服务器上，诸如: &lt;code&gt;proxy_pass http://192.168.100.2&lt;/code&gt;;&lt;/p&gt;
&lt;h3&gt;流媒体&lt;/h3&gt;
&lt;p&gt;ps：目前版本的nginx好像支持视频流，或者自己编译添加视频模块&lt;/p&gt;
&lt;p&gt;目前 WEB 上主流的视频直播方案有 HLS（HTTP Live Streaming） 和 RTMP，移动 WEB 端目前就只有 HLS 能用&lt;/p&gt;
&lt;h5&gt;docker镜像&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/cine/hls-chopper-docker/"&gt;hls-chopper-docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/hls-chopper-docker/blob/master/service/config/nginx.conf"&gt;hls-chopper-docker nginx配置&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;docker&lt;/h1&gt;
&lt;p&gt;我们可以借助docker来使用使用nginx，借助-v参数，可将宿主机的目录映射到docker里，这样一来网站目录和配置文件都不是问题&lt;/p&gt;
&lt;pre&gt;sudo docker run -it -p 80:80 -v `pwd`/www:/www -v `pwd`/config:/etc/nginx/sites-enabled  -v `pwd`/logs:/var/log/nginx dockerfile/nginx&lt;/pre&gt;

&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v `pwd`/www:/www，将当前路径下的www目录设置为/www，和server配置的路径对应&lt;/li&gt;
&lt;li&gt;-v `pwd`/logs:/var/log/nginx,nginx运行时产生的日志&lt;/li&gt;
&lt;li&gt;-v `pwd`/config:/etc/nginx/sites-enabled，server文件的本地路径，映射到docker容器的nginx配置路径。config目录下放一个文件，名为server，Nginx静态网站配置文件,内容为&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;

        root /www;
        index index.html index.htm;

        server_name localhost;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://blog.shiqichan.com/Deploying-Nginx-with-Docker/"&gt;在Docker下部署Nginx&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;相关项目&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/h5bp/server-configs-nginx"&gt;server-configs-nginx&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Nginx HTTP server boilerplate configs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/arut/nginx-rtmp-module"&gt;nginx-rtmp-module&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;NGINX-based Media Streaming Server&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/nginx-boilerplate/nginx-boilerplate"&gt;nginx-boilerplate&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Awesome Nginx configuration template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/openresty/openresty"&gt;openresty&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Turning Nginx into a Full-Fledged Scriptable Web Platform  (高效)&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/lebinh/ngxtop"&gt;ngxtop&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Real-time metrics for nginx server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/fatiherikli/nginxparser"&gt;nginxparser&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Parses nginx configuration with Pyparsing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Same as other serialization modules also you can export configuration with dump and dumps methods.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/alexazhou/VeryNginx"&gt;VeryNginx&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;功能强大且拥有对人类友好界面的Nginx，提供防火墙，自定义行为，和统计功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你不想安装 OpenResty，或者你已经有了一个正在工作的 Nginx，你也可以自己手动为 Nginx 编译安装这些模块&lt;/p&gt;
&lt;h1&gt;遇到问题及解决方案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Q1:you should increase server_names_hash_bucket_size: 32&lt;ul&gt;
&lt;li&gt;A: 在配置文件(/etc/nginx/nginx.conf)的http{}段增加一行配置 : &lt;code&gt;server_names_hash_bucket_size 64;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/languoliang/archive/2013/04/01/nginx.html"&gt;Ubuntu中Nginx的安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imququ.com/post/html5-live-player-2.html"&gt;HTML5 视频直播&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 May 2016 00:00:00 -0000</pubDate><guid>tag:,2016-05-04:nginx-note.html</guid><category>技术</category></item><item><title>使用cookiecutter-django开始你的django项目</title><link>/use-cookiecutter-django-to-startup-django-project.html</link><description>&lt;h1&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Cookiecutter Django is a framework for jumpstarting production-ready Django projects quickly.&lt;/p&gt;
&lt;h1&gt;Features&lt;/h1&gt;
&lt;p&gt;我只列出我关注的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For Django 1.9 //最新版本angular可选，支持docker&lt;/li&gt;
&lt;li&gt;Renders Django projects with 100% starting test coverage&lt;/li&gt;
&lt;li&gt;Twitter Bootstrap v4.0.0 - alpha&lt;/li&gt;
&lt;li&gt;End-to-end via Hitch&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;12-Factor based settings via django-environ&lt;/li&gt;
&lt;li&gt;Docker support using docker-compose for development and production&lt;/li&gt;
&lt;li&gt;Comes with custom user model ready to go.&lt;/li&gt;
&lt;li&gt;Run tests with unittest or py.test&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;start up&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;pip install cookiecutter&lt;/li&gt;
&lt;li&gt;cookiecutter https://github.com/pydanny/cookiecutter-django.git&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mac/windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You’ll need at least docker 1.10 : &lt;a href="https://github.com/docker/toolbox/releases"&gt;toolbox download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker-machine create --driver virtualbox default&lt;/li&gt;
&lt;li&gt;docker-machine ip&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;p&gt;linux直接使用docker就行&lt;/p&gt;
&lt;h3&gt;help&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose --help&lt;/li&gt;
&lt;li&gt;docker-machine --help&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;build&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cd 到项目根目录&lt;/li&gt;
&lt;li&gt;eval (docker-machine env default)&lt;/li&gt;
&lt;li&gt;docker-compose -f dev.yml build&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;start it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose -f dev.yml up&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Running management commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py migrate&lt;/li&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py createsuperuser&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;映射关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;8000端口&lt;/li&gt;
&lt;li&gt;目录映射，项目根目录（./）映射到restserver_django的/app （可以使用docker exec -it xxx bash进入）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python env&lt;/h3&gt;
&lt;p&gt;在restserver_django中，以root的pip安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requirements/base.txt&lt;/li&gt;
&lt;li&gt;requirements/local.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django settings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认是local（manage.py中指定）&lt;/li&gt;
&lt;li&gt;config/settings/local.py&lt;ul&gt;
&lt;li&gt;导入config/settings/common.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATABASES = {
    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    &amp;#39;default&amp;#39;: env.db(&amp;#39;DATABASE_URL&amp;#39;, default=&amp;#39;postgres:///rest_server&amp;#39;),
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些有用的命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose --help&lt;/li&gt;
&lt;li&gt;docker-compose logs&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;开发笔记&lt;/h1&gt;
&lt;h3&gt;migrate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py makemigrationsposts posts&lt;/li&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py migrate posts&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;django-rest-framework&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;token 直接用&lt;a href="http://www.django-rest-framework.org/api-guide/authentication/"&gt;TokenAuthentication&lt;/a&gt;,在代码里创建就行&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/agconti/cookiecutter-django-rest"&gt;cookiecutter-django-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CORS&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ottoyiu/django-cors-headers"&gt;django-cors-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;源码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/django-startup"&gt;django-startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cookiecutter-django.readthedocs.org/en/latest/developing-locally-docker.html"&gt;developing-locally-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 -0000</pubDate><guid>tag:,2016-04-16:use-cookiecutter-django-to-startup-django-project.html</guid><category>python</category></item><item><title>centos使用笔记</title><link>/centos-note.html</link><description>&lt;h1&gt;版本信息&lt;/h1&gt;
&lt;p&gt;cat /etc/redhat-release&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Derived from Red Hat Enterprise Linux 7.1 (Source)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;用户相关&lt;/h1&gt;
&lt;h3&gt;使用root用户创建用户&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd wwj
passwd wwj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;useradd所做的初始化操作已经包括在/home目录下为wwj帐号建立一个名为wwj的主目录&lt;/p&gt;
&lt;h3&gt;将用添加至sudoers组&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#以 root用户执行
chmod 740 /etc/sudoers
echo &amp;quot;wwj     ALL=(ALL)     ALL&amp;quot; &amp;gt;&amp;gt;  /etc/sudoers #可能需要用vim
chmod 440 /etc/sudoers
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置网络&lt;/h1&gt;
&lt;h3&gt;ip设置&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://www.21andy.com/new/20100227/1717.html"&gt;CentOS 修改IP地址, DNS, 网关&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;DNS&lt;/h3&gt;
&lt;p&gt;vi /etc/resolv.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nameserver 8.8.8.8 #google域名服务器
nameserver 8.8.4.4 #google域名服务器
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存即生效&lt;/p&gt;
&lt;h1&gt;yum&lt;/h1&gt;
&lt;h3&gt;install tmux&lt;/h3&gt;
&lt;p&gt;sudo yun apt-get install tmux&lt;/p&gt;
&lt;h3&gt;pip&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install epel-release
yum install -y python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;python&lt;/h3&gt;
&lt;p&gt;sudo yum install python34&lt;/p&gt;
&lt;h3&gt;pip3&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://bootstrap.pypa.io/get-pip.py
sudo python3 get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安装aria2&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm
sudo yum --enablerepo=rpmforge install aria2 -y
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安装docker&lt;/h1&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;sudo yum install docker&lt;/p&gt;
&lt;h3&gt;启用&lt;/h3&gt;
&lt;p&gt;sudo systemctl start docker&lt;/p&gt;
&lt;h3&gt;开机启动&lt;/h3&gt;
&lt;p&gt;sudo systemctl enable docker&lt;/p&gt;
&lt;h3&gt;数据卷问题&lt;/h3&gt;
&lt;p&gt;docker run --privileged=true ...&lt;/p&gt;
&lt;h1&gt;nginx&lt;/h1&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install nginx
sudo systemctl start nginx
sudo firewall-cmd --permanent --zone=public --add-service=http 
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;视频支持&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.scalescale.com/tips/nginx/optimizing-nginx-for-video-sites"&gt;Optimizing Nginx for Video sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jalena.bcsytv.com/archives/1104"&gt;Nginx 添加MP4流媒体模块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;端口相关&lt;/h1&gt;
&lt;h3&gt;查询&lt;/h3&gt;
&lt;p&gt;sudo firewall-cmd --query-port=8080/tcp&lt;/p&gt;
&lt;h3&gt;开启&lt;/h3&gt;
&lt;p&gt;sudo firewall-cmd --add-port=8080/tcp&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 -0000</pubDate><guid>tag:,2016-03-10:centos-note.html</guid><category>edx</category></item><item><title>django源码阅读笔记</title><link>/django-source-code-explore-note.html</link><description>&lt;p&gt;Open edX的后端采用Django来写，Django是一个大而全的web框架，许多地方和Rails相似&lt;/p&gt;
&lt;p&gt;Open edX对Django框架做了大量的改造，对其特性的应用也是十分全面。由于时常需要去hack Open edX，以至于不得不深入到Django源码本身，读别人的源码，和大多事情一样，都符合万事开头难的规律，深入之后，其乐无穷.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;初极狭，才通人，复行数十步，豁然开朗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open edX的最新稳定版所依赖的Django版本为1.8.7，所以我主要阅读的也是这个版本的源码:&lt;a href="https://github.com/django/django/tree/1.8.7"&gt;Django 1.8.7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面下阅读过程一些值得记录的地方记下来&lt;/p&gt;
&lt;h1&gt;django-admin&lt;/h1&gt;
&lt;p&gt;安装django后，我们会获得一个命令行工具&lt;code&gt;django-admin&lt;/code&gt;，用于创建django项目和djangoapp&lt;/p&gt;
&lt;p&gt;这主要是通过&lt;a href="https://github.com/django/django/blob/1.8.7/setup.py#L47"&gt;entry_points&lt;/a&gt;实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;entry_points={&amp;#39;console_scripts&amp;#39;: [
        &amp;#39;django-admin = django.core.management:execute_from_command_line&amp;#39;,
    ]},
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过entry_points,我们可以将python函数注册到系统，这对于用python写系统应用十分有用&lt;/p&gt;
&lt;h1&gt;request&lt;/h1&gt;
&lt;p&gt;首先来看看&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fhttp%2Frequest.py#L42"&gt;HttpRequest&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;QueryDict&lt;/h3&gt;
&lt;p&gt;request的两个GET和POST属性是&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fhttp%2Frequest.py#L316"&gt;QueryDict&lt;/a&gt;.
QueryDict集成自&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Futils%2Fdatastructures.py#L285"&gt;MultiValueDict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MultiValueDict来自&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Futils%2Fdatastructures.py"&gt;django/django/utils/datastructures.py&lt;/a&gt;,是django为自身打造的一种抽象数据结构，这个抽象数据结构主要是为了解决这个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This class exists to solve the irritating problem raised by cgi.parse_qs,which returns a list for every key, even though most Web forms submitsingle name-value pairs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;MultiPartParser&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/http/multipartparser.py#L45"&gt;MultiPartParser&lt;/a&gt;类的主要作用是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multi-part parsing for file uploads.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;更多的可用属性和方法参考:&lt;a href="https://docs.djangoproject.com/en/1.8/ref/request-response/"&gt;Request and response objects&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;response&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/http/response.py#L330"&gt;HttpResponse&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An HTTP response class with a string as content.
     This content that can be read, appended to or replaced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;JsonResponse&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/http/response.py#L517"&gt;django/django/http/response.py JsonResponse&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class JsonResponse(HttpResponse):
        ...
        kwargs.setdefault(&amp;#39;content_type&amp;#39;, &amp;#39;application/json&amp;#39;)
        data = json.dumps(data, cls=encoder)
        super(JsonResponse, self).__init__(content=data, **kwargs)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;middleware&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们关注一下几个middleware&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/contrib/sessions/middleware.py#L9"&gt;SessionMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;process_request&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionStore&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COOKIES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;process_response&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;process_response() is called on all responses before they’re returned to the browser.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;max_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expires&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_SECURE&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;httponly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_HTTPONLY&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fmiddleware%2Fcommon.py#L16"&gt;CommonMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用条件分支来过滤非法客户端&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user_agent_regex&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DISALLOWED_USER_AGENTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_agent_regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Forbidden (User agent): &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="s1"&gt;&amp;#39;status_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Forbidden&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ETag header的处理也在CommonMiddleware&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/middleware/csrf.py#L76"&gt;CsrfViewMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;process_view&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;csrf_exempt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;callback come from &lt;code&gt;def process_view(self, request, callback, callback_args, callback_kwargs):&lt;/code&gt;,callback是装饰器？&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/master/django%2Fcontrib%2Fauth%2Fmiddleware.py#L14"&gt;AuthenticationMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;process_request&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;The Django authentication middleware requires session middleware &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;to be installed. Edit your MIDDLEWARE_CLASSES setting to insert &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39; before &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;.&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleLazyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意断言（assert）的使用，这里设置了request.user,并且&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Django authentication middleware requires session middleware&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;get_user&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fcontrib%2Fauth%2F__init__.py#L159"&gt;get_user&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;backends&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fcontrib%2Fauth%2Fbackends.py#L7"&gt;ModelBackend&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, AUTHENTICATION_BACKENDS is set to:  &lt;code&gt;['django.contrib.auth.backends.ModelBackend']&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;CASBackend&lt;/h3&gt;
&lt;p&gt;look at &lt;a href="https://github.com/wwj718/django-cas/blob/wwj/1.2.0/cas/backends.py#L218"&gt;CASBackend&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;storage system&lt;/h1&gt;
&lt;h3&gt;qiniu&lt;/h3&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/tree/1.8.7"&gt;django/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/"&gt;Django documentation 1.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/index.html"&gt;djangobook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/"&gt;中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/appendixG.html"&gt;Appendix G: Request and Response Objects&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/appendixH/"&gt;中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;Django documentation Middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/topics/auth/customizing/"&gt;Customizing authentication in Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/howto/custom-file-storage/"&gt;Writing a custom storage system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 07 Mar 2016 00:00:00 -0000</pubDate><guid>tag:,2016-03-07:django-source-code-explore-note.html</guid><category>django</category></item><item><title>使用mitmproxy查看红包照片</title><link>/mitmproxy-demo.html</link><description>&lt;h1&gt;微信红包照片&lt;/h1&gt;
&lt;p&gt;今天下午，微信朋友圈有个限时活动，发红包看照片，一时人山人海，秀恩爱都秀出了朦胧感与新高度，单身狗们纷纷付费被虐，场面空前惨烈。&lt;/p&gt;
&lt;p&gt;为响应动物保护协会号召，虽然我们做不到没有恩爱就没有伤害，但收费秀恩爱毕竟不太人道了，于是作为新世纪有爱心的码农，义不容辞地决定做些什么&lt;/p&gt;
&lt;h1&gt;mitmproxy&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;mitmproxy is an interactive, SSL-capable man-in-the-middle proxy for HTTP with a console interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它可以用来拦截、修改、重放和保存 HTTP/HTTPS 请求。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;pip install mitmproxy&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;在命令行里输入&lt;code&gt;mitmproxy -p 1234&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用ifconfig查看电脑的ip，之后将其填入手机代理&lt;/p&gt;
&lt;p&gt;&lt;img alt="mitmproxy0" src="img/wechat/mitmproxy0.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后打开你的朋友圈，点击你想看的照片,mitmproxy就能抓取到它的url了&lt;/p&gt;
&lt;p&gt;&lt;img alt="mitmproxy1" src="img/wechat/mitmproxy1.png" /&gt;&lt;/p&gt;
&lt;p&gt;将此url复制到浏览器，不需付费也能被秀一脸恩爱啦233 &lt;/p&gt;
&lt;p&gt;哦对了 如果你在mac下，你需要按住option键再拖动鼠标才能复制&lt;/p&gt;
&lt;p&gt;&lt;img alt="mitmproxy2" src="img/wechat/mitmproxy2.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jan 2016 00:00:00 -0000</pubDate><guid>tag:,2016-01-26:mitmproxy-demo.html</guid><category>技术</category></item><item><title>教育信息化、信息孤岛与身份认证</title><link>/educational-information-information-island-authentication.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Design programs to be connected to other programs  --Unix philosophy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近接触的项目和需求中，统一身份认证的问题反复出现，花了不少功夫去了解身份认证这块相关的标准和协议。&lt;/p&gt;
&lt;p&gt;身份认证/授权这部分涉及的概念真是五花八门，一度把我搞得七荤八素，相关概念包括但不限于：session，cookie，OpenID，OAuth2，CAS,JWT,SSO,Token，SAML，Shibboleth（以上这些概念并不都在同一层面）&lt;/p&gt;
&lt;p&gt;其中一些属于协议，一些属于实现，一些属于通用的概念。&lt;/p&gt;
&lt;p&gt;最近在和某高校合作的项目中，校方也痛下决心要把校园内各个系统进行打通（教育部有要求避免信息孤岛），在交流中发现，信息孤岛在国内高校中广泛存在，而我自己目前折腾的东西属于教育信息化这个领域，所以觉得相比于技术细节，理清这些问题是更有意义的。&lt;/p&gt;
&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;我们首先来看看我们面临的问题&lt;/p&gt;
&lt;p&gt;许多高校每年采购若干教育信息化系统，再加上内部自建的，积年累月，大浪淘下之后，学校里运行着若干异构系统，他们都有一套自己的认证机制，自己的用户系统，某天学校有了新需求，需要若干系统协同合作，却发现整合他们的成本已经高于购置一套新系统的成本（包括时间成本）。&lt;/p&gt;
&lt;p&gt;于是他们用新购的系统解决眼前的业务问题，接着这个新系统风风火火地奔往下一个信息孤岛&lt;/p&gt;
&lt;p&gt;这些教育信息化系统/教务系统进校之初，往往需要先与教务相关的数据中心整合，同步用户以及其他关系，和许多工程项目一样，为了进度采用一种dirty and quick的方案。不同公司的不同系统，与学校数据中心的整合又往往不一样，于是校方整出许多数据视图和接口，应对一直只需，没精力做长期打算，这些临时接口往往是滋生bug，产生臃肿代码，引起错误和需要大量重复劳动的地方。&lt;/p&gt;
&lt;h1&gt;问题分析&lt;/h1&gt;
&lt;p&gt;这些问题的出现，几乎是一种必然。我们知道几乎所有的系统都需要登录访问，访问是有状态的，所以各个系统需要与数据中心整合（获取用户信息），而整合过程中，由于业务的压力，人们往往倾向于一种quick的方案，dirty与否并不再考量范围，更遑论架构上的长远考虑。&lt;/p&gt;
&lt;p&gt;缺乏标准，临时方案，追赶进度，于是盐水越喝越多，越来越渴。&lt;/p&gt;
&lt;p&gt;我觉得解开这团乱码的关键是身份认证与授权，放弃临时方案，而采用一些被广泛采用而健壮灵活的开放标准。在初期架构上花些精力，一劳永逸地解决这些问题。当然由于这些设计的完备和周到，他们也允许最大非侵入式地整合既有系统，尽可能少地干预以及投入使用的系统，是认证层尽量透明。前提是校方真的有决心去推荐这件事&lt;/p&gt;
&lt;p&gt;当然，这个问题倒并不只在高校出现了，企业中也是广泛存在的。实际上只要纯在异构系统，统一身份的需求就很可能出现，由于&lt;code&gt;懒惰是程序员的美德&lt;/code&gt;（这是个玩笑，程序员三大美德里的懒惰当然不是这种愚蠢的懒惰啦），dirty and quick的临时方案就层出不穷&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;我认为上述的这些问题，可以把它们视为分布式系统的身份认证问题。&lt;/p&gt;
&lt;p&gt;而在高校中，教务系统（数据库）往往作为认证权威，不同于OAuth解决的分布式认证问题（去中心化），高校信息化系统的身份认证问题可以被简化为集中式身份认证&lt;/p&gt;
&lt;h1&gt;标准和协议的意义&lt;/h1&gt;
&lt;p&gt;有了标准和协议，我们就避免了不必要的争论，而将精力放到真正的问题上。&lt;/p&gt;
&lt;p&gt;比如在大括号是否换行这类问题上，你很难说谁的做法更好，所以换行的一派对待不换行的一派，一贯的做法就是手持火把以异教徒的眼光看待对方。但各执己见的结果是项目整体上的一致性很差。一旦有了标准，许多无谓的争论（而且不可能有结果）就可以避免，这在公司之间的协作上很有意义，否则谁也不愿服谁的方案，而且是任意一方的方案逻辑上都能救得一时之急。&lt;/p&gt;
&lt;p&gt;在选择标准和协议的时候，我们最好尽量选择被业界广泛使用的，这样一来，不仅易于整合进其他优秀的系统（国外许多优秀的系统都会特意说明兼容这些标准，国内这种做法还不多，但据我所知最近已经有一些教育行业的公司开始或准备这么做了）&lt;/p&gt;
&lt;p&gt;采用标准和协议的另一个好处是，许多常见的漏洞可以被避免，这些协议经过广泛的使用，大多的坑都被踩过了，后来者们不仅容易免费获得优秀的实现（诸如CAS有&lt;a href="https://github.com/Jasig/cas"&gt;Jasig/cas&lt;/a&gt;）。我们不必重造车轮，就能获得安全可靠的解决方案，这要比拍脑袋的临时方案健壮得多&lt;/p&gt;
&lt;p&gt;想想我自己之前踩过的坑，多数时候都可以用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读书太少而想得太多来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来解释&lt;/p&gt;
&lt;p&gt;同时标准和协议是一种可增量式改良的实体，由于这些协议和标准的开放性，用户在使用过程遇到的任何问题，都能被收集与反馈，最后标准和协议被不断完善。它们像生命体一样不断地成长与健壮&lt;/p&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;p&gt;顺着身份认证的思路，具体的解决方案倒有很多可选的，诸如CAS,JWT,SAML等，这些具体的协议与解决方案就留在后续文章里来讨论啦。&lt;/p&gt;
&lt;p&gt;在下篇文章里，我们会关注耶鲁大学贡献了CAS协议（CAS是一个协议，并不限于具体语言实现），该协议在国外高校中广泛使用，Open edX就天然支持这种协议，通过该协议，我们轻松就将Open edX与教务系统整合了&lt;/p&gt;
&lt;p&gt;也正是这个经历，让我尝到了标准和协议的甜头，才决定写这一系列的文章&lt;/p&gt;
&lt;h1&gt;另外&lt;/h1&gt;
&lt;p&gt;身份认证并不足以消除信息孤岛，但会是关键的一步&lt;/p&gt;
&lt;p&gt;在折腾Open edX的过程中，我发现RESTful API也是极其有力的工具，通过让系统对外暴露RESTful风格的接口，系统之间变得协作友好，它们如同有了生命体一般，这正是《Unix编程艺术》里建议的，考虑尽量让程序彼此之间能通信，让程序具有组合性，用清晰的接口把若干简单的模块组合成一个复杂的软件。这样是应对复杂度极好的策略&lt;/p&gt;
&lt;p&gt;系统之间的协作，如同你培育的生态球一般，各个生物既互相依存/共生又彼此独立，能量和物质顺着食物链流动，它们形成一个生态系统&lt;/p&gt;
&lt;p&gt;在协作紧密的地方，信息是流通顺畅的，系统之间分工协作，友好相处。信息孤岛就被打破了&lt;/p&gt;
&lt;p&gt;而系统之间的协作，统一的身份往往是最初需要迈出的一步&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 25 Dec 2015 00:00:00 -0000</pubDate><guid>tag:,2015-12-25:educational-information-information-island-authentication.html</guid><category>技术</category></item><item><title>国内静态文件CDN整理</title><link>/static-file-cdn.html</link><description>&lt;h1&gt;资源列表&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://libs.useso.com/"&gt;360网站卫士常用前端公共库CDN服务&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用前端公共库&lt;/li&gt;
&lt;li&gt;google公共库：用以方便地替代google前端库。将Google前端库的域名 ajax.googleapis.com 修改为：ajax.useso.com 即可*  &lt;/li&gt;
&lt;li&gt;google字体库:将Google免费字体库的域名 fonts.googleapis.com 修改为：fonts.useso.com 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源缓存在360网站卫士全国的CDN节点上！稳定快速&lt;/p&gt;
&lt;p&gt;ps:可使用sed批量替换&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.bootcdn.cn/"&gt;BootCDN&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;稳定、快速、免费的开源项目 CDN 服务.&lt;br /&gt;
共收录了 1612 个开源项目.&lt;/p&gt;
&lt;p&gt;开源库数量丰富，版本齐全。由&lt;a href="http://www.upyun.com/"&gt;upyun&lt;/a&gt;赞助，十分稳定&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.staticfile.org/about.html"&gt;staticfile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;开放静态文件 CDN&lt;/p&gt;
&lt;p&gt;全面收录优秀的开源库，并免费为之提供 CDN 加速服务。也提供开源库源接入的入口，让所有人都可以提交开源库&lt;/p&gt;
&lt;p&gt;国外源同步于 CDNJS&lt;/p&gt;
&lt;p&gt;由七牛云赞助&lt;/p&gt;
&lt;h3&gt;百度 CDN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs"&gt;百度 CDN公共库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cdn.code.baidu.com/"&gt;百度静态资源公共库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://jscdn.upai.com/"&gt;常用JavaScript库CDN服务&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;又拍云托管的常用JavaScript库。资源较少&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://cdnjs.com/"&gt;cdnjs.com&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;资源丰富，国内访问速度也还行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Dec 2015 00:00:00 -0000</pubDate><guid>tag:,2015-12-10:static-file-cdn.html</guid><category>技术</category></item><item><title>youtube-dl使用记录</title><link>/youtube-dl-note.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近在跟着一些资料学习数据分析，时常会连接到youtube，要看些演讲之类的，想下载下来看。有朋友也在学习这块知识，所以最理想是把视频放到国内云上，这样可以分享给小伙伴&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;恰好有服务器在国外，所以想做个自动化的工作，大体思路是&lt;/p&gt;
&lt;p&gt;写个网页收集下载链接，然后后台触发celery去执行任务，任务里使用&lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;去下载视频，下载完后使用&lt;a href="https://github.com/houtianze/bypy"&gt;bypy&lt;/a&gt;同步到百度云盘，然后发一封邮件通知视频下载者。&lt;/p&gt;
&lt;p&gt;关于同步到云盘和邮件通知这部分我之前在&lt;a href="https://github.com/wwj718/for_dinner"&gt;for_dinner&lt;/a&gt;里写过&lt;/p&gt;
&lt;p&gt;所以这次任务不算太难，写个建议的表单页面，熟悉使用&lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;就行了。&lt;/p&gt;
&lt;h3&gt;dirty and quick&lt;/h3&gt;
&lt;p&gt;我们也可以简化以上流程，一种建议的不那么自动化的方式是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小伙伴把想下载的视频微信告诉你&lt;/li&gt;
&lt;li&gt;你去国外vps上使用youtube-dl把视频下载下来&lt;/li&gt;
&lt;li&gt;之后使用FTP把视频拖回本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;what&lt;/h2&gt;
&lt;p&gt;youtube-dl是一个简单的命令行下载工具，支持全球上百个视频网站的下载，包括国内主流视频网站资源，无须注册，无须付费，无须登录，智能嗅探出真实下载地址。据官网介绍，youtube-dl甚至支持全球最大的成人视频网站免费下载。&lt;/p&gt;
&lt;p&gt;具体列表可通过&lt;code&gt;youtube-dl --extractor-descriptions&lt;/code&gt;查看&lt;/p&gt;
&lt;p&gt;我使用wc统计了下（&lt;code&gt;youtube-dl --extractor-descriptions|wc -l&lt;/code&gt;），一共可以下载国内外714个视频源的视频/音频。&lt;/p&gt;
&lt;p&gt;此外前头说的官网介绍属实！&lt;/p&gt;
&lt;p&gt;可供下载的国内一些著名音视频源包括：优酷/百度视频/音悦Tai/QQ音乐/网易云音乐/酷我音乐&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;sudo pip install youtube-dl&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;帮助&lt;/h3&gt;
&lt;p&gt;youtube-dl --help&lt;/p&gt;
&lt;h3&gt;常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;youtube-dl --list-extractors #查看支持网站列表 &lt;/li&gt;
&lt;li&gt;youtube-dl -U #程序升级 &lt;/li&gt;
&lt;li&gt;youtube-dl --get-format URL #获取视频格式 &lt;/li&gt;
&lt;li&gt;youtube-dl -F URL #获取所有格式（目前仅支持YouTube）&lt;/li&gt;
&lt;li&gt;youtube-dl -f format URL #下载指定格式的视频，这里以下载1080p原画质量的视频格式为例: youtube-dl -f 137 https://www.youtube.com/watch?v=Izj_F8r2yt0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;我们以下载&lt;a href="https://www.youtube.com/watch?v=CoxjADZHUQA"&gt;Role of Python in Data Science and Machine Learning&lt;/a&gt;(地址：https://www.youtube.com/watch?v=CoxjADZHUQA)为例&lt;/p&gt;
&lt;p&gt;因为YouTube的video 和 audio 部分是分开的，所以这里要用到 ffmpeg 这个神器来合并视频和音频：&lt;code&gt;sudo apt-get install ffmpeg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;youtube-dl -F " youtube-dl -F "&lt;/code&gt;,输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[youtube] CoxjADZHUQA: Downloading webpage
[youtube] CoxjADZHUQA: Downloading video info webpage
[youtube] CoxjADZHUQA: Extracting video information
[youtube] CoxjADZHUQA: Downloading DASH manifest
[youtube] CoxjADZHUQA: Downloading DASH manifest
[info] Available formats for CoxjADZHUQA:
format code  extension  resolution note
140          m4a        audio only DASH audio   99k , m4a_dash container, aac  @128k (44100Hz), 29.96MiB
141          m4a        audio only DASH audio  195k , m4a_dash container, aac  @256k (44100Hz), 59.79MiB
160          mp4        256x144    DASH video  119k , avc1.4d400c, 13fps, video only, 34.22MiB
133          mp4        426x240    DASH video  258k , avc1.4d4015, 25fps, video only, 76.12MiB
134          mp4        640x360    DASH video  605k , avc1.4d401e, 25fps, video only, 77.20MiB
135          mp4        854x480    DASH video 1104k , avc1.4d401e, 25fps, video only, 160.60MiB
136          mp4        1280x720   DASH video 2205k , avc1.4d401f, 25fps, video only, 322.11MiB
137          mp4        1920x1080  DASH video 4127k , avc1.640028, 25fps, video only, 632.46MiB
17           3gp        176x144    small ,  mp4a.40.2, mp4v.20.3
36           3gp        320x240    small ,  mp4a.40.2, mp4v.20.3
5            flv        400x240    small
43           webm       640x360    medium ,  vorbis, vp8.0
18           mp4        640x360    medium ,  mp4a.40.2, avc1.42001E
22           mp4        1280x720   hd720 ,  mp4a.40.2, avc1.64001F (best)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选定音视频质量后（比如我们选择160对应的视频，141对于的音频），开始下载： &lt;code&gt;youtube-dl  -f 160+141  "https://www.youtube.com/watch?v=CoxjADZHUQA"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;youtube] CoxjADZHUQA: Downloading webpage
[youtube] CoxjADZHUQA: Downloading video info webpage
[youtube] CoxjADZHUQA: Extracting video information
[youtube] CoxjADZHUQA: Downloading DASH manifest
[youtube] CoxjADZHUQA: Downloading DASH manifest
[download] Destination: PyCon Ukraine 2014 - Jeremy Achin - Role of Python in Data Science and Machine Learning-CoxjADZHUQA.f160.mp4
[download] 100% of 34.22MiB in 00:09
[download] Destination: PyCon Ukraine 2014 - Jeremy Achin - Role of Python in Data Science and Machine Learning-CoxjADZHUQA.f141.m4a
[download] 100% of 59.79MiB in 00:12
[ffmpeg] Merging formats into &amp;quot;PyCon Ukraine 2014 - Jeremy Achin - Role of Python in Data Science and Machine Learning-CoxjADZHUQA.mp4&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载完毕！&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rg3/youtube-dl"&gt;rg3/youtube-dl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 04 Dec 2015 00:00:00 -0000</pubDate><guid>tag:,2015-12-04:youtube-dl-note.html</guid><category>技术</category></item><item><title>更好的Python时间日期库 Arrow</title><link>/arrow-better-dates-and-times-for-python.html</link><description>&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;使用Python标准库来处理时区、日期转换、格式输出之类的问题，十分繁琐。标准库虽然提供了完备的功能，但常用方法分布得十分散乱。每次使用都得在文档里奔波&lt;/p&gt;
&lt;h1&gt;Arrow&lt;/h1&gt;
&lt;p&gt;Arrow提供了明智、友好的的方式来创建（操作/格式化/转换）时间（日期/时间戳）
，如此一来常用函数易于调用，而不是藏于深巷。只需要查阅一处文档即可&lt;/p&gt;
&lt;p&gt;Arrow的灵感来自&lt;a href="https://github.com/moment/moment"&gt;moment.js&lt;/a&gt; 和 &lt;a href="https://github.com/kennethreitz/requests"&gt;requests&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;pip install arrow&lt;/p&gt;
&lt;h1&gt;快速开始&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;arrow&lt;/span&gt;
&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Arrow [2015-12-02T01:55:16.190145+00:00]&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;utc_Beijing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#北京时间 东八区&lt;/span&gt;
&lt;span class="n"&gt;utc_Beijing&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Arrow [2015-12-02T09:55:16.190145+00:00]&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;#local&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Arrow [2015-12-02T09:55:16.190145+08:00]&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="c1"&gt;#1449021316&lt;/span&gt;

&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#u&amp;#39;2015-12-02 09:55:16+08:00&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD HH:mm:ss ZZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#u&amp;#39;2015-12-02 09:55:16 +08:00&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;humanize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#u&amp;#39;2 minutes ago&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;humanize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zh_cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#3分钟前&lt;/span&gt;

&lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2013-05-11T21:23:58.970460+00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#&amp;lt;Arrow [2013-05-11T21:23:58.970460+00:00]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arrow.readthedocs.org/en/latest/#arrow-better-dates-and-times-for-python"&gt;Arrow: better dates and times for Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 02 Dec 2015 00:00:00 -0000</pubDate><guid>tag:,2015-12-02:arrow-better-dates-and-times-for-python.html</guid><category>技术</category></item><item><title>用pyspider写的爬虫几例</title><link>/pyspider-demo.html</link><description>&lt;h1&gt;爬虫&lt;/h1&gt;
&lt;p&gt;最初折腾爬虫还是在校期间，一个玩具项目，想把校内信息爬取下来，写一个小型校内搜索引擎，整合到公众号里&lt;/p&gt;
&lt;p&gt;而后原理实现之后，就不想打磨细节了，急着跳入下一个坑。如那个笑话里的，程序员好不容易买齐了笔墨纸砚，写下&lt;code&gt;hello world&lt;/code&gt;，就心满意足地离去了&lt;/p&gt;
&lt;p&gt;去年在知乎里答过一个爬虫题目，拿了1000来个赞，陆陆续续收到一些私信问有没有兴趣换工作啥的，当时的百度和美团还是蛮有吸引力的，哎谁知一年多工夫，局势变了好多，看来拒绝的还算有先鉴之明。如pyspider作者binux所言，爬虫就那点东西，有趣的部分并不多，所以也从未考虑过此类工作。&lt;/p&gt;
&lt;p&gt;闲暇时间，陆陆续续写过简易的几个爬虫玩具，帮朋友爬过1w枚种子，据说质量奇高，是xx中的艺术片。也爬过豆瓣知乎，数据拿来训练机器人。&lt;/p&gt;
&lt;p&gt;说要种子的，我也不会给你啦，代码有毒，身体要紧啊同学们&lt;/p&gt;
&lt;p&gt;写爬虫比较钟爱pyspider，选择器是jquery语法（用了pyquery），调试起来十分方便，而且又有web界面很是舒服&lt;/p&gt;
&lt;p&gt;以下几个demo，需求都来自小伙伴。&lt;/p&gt;
&lt;h1&gt;pyspider介绍&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/binux/pyspider"&gt;pyspider&lt;/a&gt;作者在在博客里说到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pyspider 来源于以前做的一个垂直搜索引擎使用的爬虫后端。我们需要从200个站点（由于站点失效，不是都同时啦，同时有100+在跑吧）采集数据，并要求在5分钟内将对方网站的更新更新到库中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和大多开源项目一样，pyspider也始于作者自己真实的需求，而后发现这个解决方案对于其他人也是适用的，于是开源出来。正是自己最初真实的需求，使项目在细节方面十分周到贴心&lt;/p&gt;
&lt;p&gt;十分推荐有兴趣的小伙伴把作者博客里的几篇文章读完:&lt;a href="http://blog.binux.me/"&gt;Binuxの杂货铺&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是关于爬虫方面我读过最简易清晰的几篇文章了&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h2&gt;mac下安装与运行&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv env &lt;span class="c1"&gt;#使用virtualenv建立虚拟环境&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; env/bin/activate
pip install pyspider
brew install phantomjs &lt;span class="c1"&gt;#运行js的环境（ajax）&lt;/span&gt;
pyspider phantomjs &lt;span class="c1"&gt;#开启服务在25555端口&lt;/span&gt;
pyspider
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用docker安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull binux/pyspider:master
sudo docker run -d -p 5000:5000 -v /opt/pyspider:/opt/pyspider binux/pyspider:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后在5000端口上就可以写爬虫逻辑啦，web本身作为控制面板&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://docs.pyspider.org/en/latest/Running-pyspider-with-Docker/"&gt;Running-pyspider-with-Docker&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;h3&gt;1&lt;/h3&gt;
&lt;p&gt;爬取豆瓣8分以上书籍&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Created on 2015-09-17&lt;/span&gt;
&lt;span class="c1"&gt;# Project: douban_book&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspider.libs.base_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;crawl_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://book.douban.com/tag/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a[href^=&amp;quot;http&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;http://www.douban.com/tag/\w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;#print each.attr.href&lt;/span&gt;
                &lt;span class="c1"&gt;#romantic novels tag ：  http://www.douban.com/tag/%E8%A8%80%E6%83%85/?focus=book&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#print re.search(r&amp;#39;http://www.douban.com/tag/[^/]*&amp;#39;,response.url ,).group() + &amp;#39;/book&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;http://www.douban.com/tag/[^/]*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_page_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_page_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a[href^=&amp;quot;http&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;http://book.douban.com/subject/\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.next &amp;gt; a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c1"&gt;#print each.attr.href&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_page_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;page_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;vote_average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strong[property=&amp;quot;v:average&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vote_average&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;http://book.douban.com/subject/\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;h1 &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;vote_average&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strong[property=&amp;quot;v:average&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;vote_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span[property=&amp;quot;v:votes&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;demo2&lt;/h3&gt;
&lt;p&gt;爬取京东众筹数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Created on 2015-11-30&lt;/span&gt;
&lt;span class="c1"&gt;# Project: jdzc&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspider.libs.base_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;crawl_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#手动输入最大页面，这部分有ajax很烦 手写吧&lt;/span&gt;
        &lt;span class="c1"&gt;#max_page = response.doc(&amp;#39;a.next&amp;#39;)&lt;/span&gt;
        &lt;span class="c1"&gt;#print max_page&lt;/span&gt;
        &lt;span class="n"&gt;max_page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;218&lt;/span&gt; &lt;span class="c1"&gt;#当前是218，有了phantomjs后可以自动获取&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page_num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max_page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://z.jd.com/bigger/search.html?&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sort&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zhtj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enter_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#print response.doc(&amp;quot;.lr-lists .link-pic&amp;quot;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.lr-lists .link-pic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fetch_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;item_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;item_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.project-tilte &amp;gt; h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#项目名称&lt;/span&gt;
        &lt;span class="n"&gt;item_owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.font18 &amp;gt; a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#项目发起人&lt;/span&gt;
        &lt;span class="n"&gt;item_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.icon_pag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#项目状态&lt;/span&gt;
        &lt;span class="c1"&gt;#item_begintime =  response.doc(&amp;#39;div.font14 &amp;gt; .lh24 &amp;gt; span:first&amp;#39;).text()#发起日期，只有筹款中的才有发起日期，完成的没有&lt;/span&gt;
        &lt;span class="n"&gt;item_deadline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div.font14 &amp;gt; .lh24 &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#截止日期&lt;/span&gt;
        &lt;span class="n"&gt;item_target_fundraising&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div.font14 &amp;gt; .lh24 &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#众筹目标&lt;/span&gt;
        &lt;span class="n"&gt;item_real_fundraising&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.font45&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#已筹款数&lt;/span&gt;
        &lt;span class="n"&gt;supporter_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.pr &amp;gt; p &amp;gt; strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#支持人数&lt;/span&gt;
        &lt;span class="n"&gt;topic_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#topicBtn &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#话题数，需要执行完js才得到，所以需要phantomjs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_deadline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_deadline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_target_fundraising&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_target_fundraising&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_real_fundraising&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_real_fundraising&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;supporter_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;supporter_num&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;demo3&lt;/h3&gt;
&lt;p&gt;爬取知乎指定用户收藏夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Created on 2015-03-24 21:56:49&lt;/span&gt;
&lt;span class="c1"&gt;# Project: zhihu_collection&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspider.libs.base_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;crawl_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nd"&gt;@every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;start_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.zhihu.com/people/liu-shi-jiu-84/collections&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_page&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index_page&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.zm-profile-fav-item-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
             &lt;span class="n"&gt;collection_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_answer_pages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;collection_name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all_answer_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.border-pager a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;max_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#倒数第二个, 最大页数&lt;/span&gt;
         &lt;span class="n"&gt;all_collections_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?page=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max_pages&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_collections_pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;collection_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.toggle-expand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

    &lt;span class="nd"&gt;@config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.autohide-false .zm-item-rich-text &amp;gt; div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;附录&lt;/h1&gt;
&lt;h3&gt;Ubuntu 12.04 64bit 安装PhantomJS&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget https://phantomjs.googlecode.com/files/phantomjs-1.9.0-linux-x86_64.tar.bz2
sudo tar xjf phantomjs-1.9.0-linux-x86_64.tar.bz2
sudo ln -s /usr/local/share/phantomjs-1.9.0-linux-x86_64/bin/phantomjs /usr/local/share/phantomjs&lt;span class="p"&gt;;&lt;/span&gt; 
sudo ln -s /usr/local/share/phantomjs-1.9.0-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs&lt;span class="p"&gt;;&lt;/span&gt;
sudo ln -s /usr/local/share/phantomjs-1.9.0-linux-x86_64/bin/phantomjs /usr/bin/phantomjs
phantomjs --version
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 30 Nov 2015 00:00:00 -0000</pubDate><guid>tag:,2015-11-30:pyspider-demo.html</guid><category>技术</category></item><item><title>Install pygame on Mac OSX</title><link>/install-pygame-on-Mac-OSX.html</link><description>&lt;p&gt;Last sunday,when I explored github,I found &lt;a href="https://github.com/justinmeister/Mario-Level-1"&gt;Mario-Level-1&lt;/a&gt; which I enjoyed  very much when i was a kid.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/justinmeister/Mario-Level-1"&gt;Mario-Level-1&lt;/a&gt; is writen in python（pygame）！ &lt;/p&gt;
&lt;p&gt;I want to hack it ！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;First of all，I need to install &lt;a href="http://pygame.org/hifi.html"&gt;Pygame&lt;/a&gt; on my Mac OSX&lt;/p&gt;
&lt;p&gt;According to some online tutorial，I fail to install it because I could't install smpeg with brew. All  the method  to install smpeg will fail.&lt;/p&gt;
&lt;p&gt;Then I found an easy way to install pygame , just install:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xquartz.macosforge.org/landing/"&gt;XQuartz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pygame.org/ftp/pygame-1.9.2pre-py2.7-macosx10.7.mpkg.zip"&gt;pygame-1.9.2pre-py2.7-macosx10.7.mpkg.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All started working!&lt;/p&gt;
&lt;p&gt;Enjoying it!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 Nov 2015 00:00:00 -0000</pubDate><guid>tag:,2015-11-04:install-pygame-on-Mac-OSX.html</guid><category>技术</category></item><item><title>git资源汇集</title><link>/git-resource-summary.html</link><description>&lt;h1&gt;动机&lt;/h1&gt;
&lt;p&gt;对git的一些资源进行汇总。&lt;/p&gt;
&lt;p&gt;不作为教程使用 :)&lt;/p&gt;
&lt;p&gt;对熟悉git的你可能会有帮助&lt;/p&gt;
&lt;p&gt;本来想把常用的指令一一列出，后来觉得不如用人家做好的git cheat sheet呀，于是本文的写作动机定位为：作为自己日常使用git的资源入口&lt;/p&gt;
&lt;h1&gt;git的操作流程&lt;/h1&gt;
&lt;p&gt;&lt;img alt="git1" src="img/git/git1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="git2" src="img/git/git2.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;cheat sheet&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ArslanBilal/Git-Cheat-Sheet/blob/master/other-sheets/git-cheat-sheet-zh.md"&gt;git-cheat-sheet-zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md"&gt;github-cheat-sheet-zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://static.oschina.net/uploads/img/201210/15181332_I4p6.jpg"&gt;git命令思维导图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;工作流&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md"&gt;Git工作流指南&lt;/a&gt;
*  &lt;a href="https://github.com/nvie/gitflow"&gt;gitflow&lt;/a&gt;
    *  我的使用案例:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/gitflow_dev_note.md"&gt;gitflow_dev_note&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;小工具&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/github/gitignore"&gt;gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tj/git-extras"&gt;git-extras&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tj/git-extras/blob/master/Commands.md"&gt;Go to Commands page for basic usage and examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/git-up/GitUp"&gt;GitUp&lt;/a&gt; : 用于编辑commit，以及分支观察&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;tig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;diff&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/so-fancy/diff-so-fancy"&gt;diff-so-fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jeffkaufman/icdiff"&gt;icdiff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;merge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mhagger/git-imerge"&gt;git-imerge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;理解git的资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/zh/v2"&gt;Pro Git book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html"&gt;图解Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pcottle/learnGitBranching"&gt;learnGitBranching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;git style guide&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aseaday/git-style-guide"&gt;git-style-guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关服务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.oschina.net/"&gt;Git@OSC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gitlabhq/gitlabhq"&gt;gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gogits/gogs"&gt;gogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sitaramc/gitolite"&gt;gitolite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;git周边&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gollum/gollum"&gt;gollum&lt;/a&gt;:A simple, Git-powered wiki with a sweet API and local frontend.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FredrikNoren/ungit"&gt;ungit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-fugitive"&gt;vim-fugitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bup/https://github.com/bup/bup"&gt;bup&lt;/a&gt;:基于git的备份跟工具&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 28 Oct 2015 00:00:00 -0000</pubDate><guid>tag:,2015-10-28:git-resource-summary.html</guid><category>技术</category></item><item><title>Python与系统日常管理</title><link>/Python-for-system-administrators.html</link><description>&lt;p&gt;大多时间都在linux下工作，虽说不算系统管理员，也免不了要处理许多系统相关的东西。对linux还算熟悉，偶尔也在公司客串系统管理员的角色。于是就免不了要写许多自动化脚本的东西，来方便系统日常管理了。&lt;/p&gt;
&lt;p&gt;bash脚本挺让人恶心的，属于dirty and quick一类。而Python语法清新可人，Python与系统的交互也极其便利，写自动化脚本再合适不过。&lt;/p&gt;
&lt;p&gt;在此就分享些自己在写自动化脚本时中意的Python工具：&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;build-in&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;glob:文件名的匹配,比如 &lt;ul&gt;
&lt;li&gt;glob.glob('somedir/*.py')&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;subprocess&lt;ul&gt;
&lt;li&gt;启动一个子进程建议的方式是使用下面的便捷函数:subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)&lt;ul&gt;
&lt;li&gt;subprocess.call(["ls", "-l"])&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于更高级的使用场景当它们不能满足你的需求时，可以使用底层的Popen接口。&lt;/li&gt;
&lt;li&gt;subprocess.call(["sed", "-i", "-e",  's/hello/helloworld/g', "www.txt"])&lt;/li&gt;
&lt;li&gt;单行：subprocess.call(["sed -i -e 's/hello/helloworld/g' www.txt"], shell=True)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/amoffat/sh"&gt;sh&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;sh is a full-fledged subprocess replacement for Python 2.6 - 3.4 that allows you to call any program as if it were a function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用sh可以用 Python 函数的语法去调用 shell 命令，比subprocess舒服多了&lt;/p&gt;
&lt;p&gt;有了sh，就可以方便地用python写逻辑，而与系统的交互依然使用shell指令&lt;/p&gt;
&lt;p&gt;sh并没有自己去实现一遍系统指令(也不现实)，sh的原理很有趣，是通过ModuleType来实现的。有兴趣的同学可以参考源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sh&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_log_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ERROR&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;send_an_email_to_support&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;info.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;process_log_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ... do other stuff here ...&lt;/span&gt;

&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/jaraco/path.py"&gt;path.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;简化文件系统相关操作。与文件系统的相关操作，在python中有些分散，path.py把它们聚合在一个类文件对象里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;path.py implements a path objects as first-class entities, allowing common operations on files to be invoked on those path objects directly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guido/bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mo"&gt;0755&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/gorakhargosh/watchdog"&gt;Watchdog&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;监视文件系统改动.事件驱动真是适合用来写监控逻辑啊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python library and shell utilities to monitor filesystem events&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以在python中使用，也提供shell指令&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Russell91/pythonpy"&gt;pythonpy&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;the swiss army knife of the command line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让python更方便与shell配合使用，行为更像过滤器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;mv `&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;` `&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.txt`&amp;quot; % (x,x)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A cross-platform process and system utilities module for Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方便用来查看系统信息（CPU, memory, disks, network）&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple, Pythonic remote execution and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动化运维工具，也可用于自动化本地任务，本地机器无非也只是一个普通的host&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ansible/ansible"&gt;ansible&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大大有名的自动化运维工具，热度已远超Fabric，当部署环境巨复杂是，ansible playbook就是救星了。当然学习成本也是在不低，edX就是用它来自动化部署的，有700+ task好像&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;用户身份与进程权限&lt;/h1&gt;
&lt;p&gt;顺便提一下用户身份与进程权限，python脚本中与系统交互（操作文件等），必然涉及到权限问题，所以我们需要了解linux的权限机制&lt;/p&gt;
&lt;p&gt;linux中，子进程将继承了父进程的所有权限&lt;/p&gt;
&lt;p&gt;当Linux加载内核文件以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境，init是第一个运行的程序，它的进程编号（pid）为1。其他所有进程都从它衍生，都是它的子进程。init进程在运行各种开机启动的程序之后，会执行一个login的子进程。我们将用户名和密码传递给login子进程。login在查询了/etc/passwd和/etc/shadow，并确定了其合法性之后，运行(利用exec)一个shell进程，shell进程有效身份被设置成为该用户的身份。&lt;/p&gt;
&lt;p&gt;终于轮到我们的python进程登场啦，python进程从shell中启动，&lt;code&gt;python权限为执行它的用户的权限，此后python中调用的shell指令则为python的子进程，权限与python相同&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 -0000</pubDate><guid>tag:,2015-10-17:Python-for-system-administrators.html</guid><category>技术</category></item><item><title>推荐一款SSH连接工具：Mosh</title><link>/mosh.html</link><description>&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;最初知道mosh，是在某一期的内核恐慌中。  &lt;/p&gt;
&lt;p&gt;经常使用SSH的人大约都有过以下遭遇，喝杯茶的功夫，SSH就断了，tmux当然是个保持会话的选择，可烦人的事你还得进进出出ssh，现在你有了更好的选择：Mosh,它除了能帮你维持持久的ssh连接之外，还能提供更多的优化，比如让你的输入体验丝般顺滑，如同本地一般，尽管你的服务器在国外。&lt;/p&gt;
&lt;p&gt;我现在的远程连接基本都是有Mosh，一次连接用不掉线，在移动办公，断网环境下简直酸爽。&lt;/p&gt;
&lt;h1&gt;正式的介绍&lt;/h1&gt;
&lt;p&gt;直接援引&lt;a href="https://mosh.mit.edu/"&gt;官网&lt;/a&gt;的介绍就好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remote terminal application that allows roaming, supports intermittent connectivity, and provides intelligent local echo and line editing of user keystrokes.&lt;/p&gt;
&lt;p&gt;Mosh is a replacement for SSH. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;mosh是个服务，和ssh类似，有server何client，所以需要在通信的两台机器上都安装。我的客户机是mac，而服务器是ubuntu&lt;/p&gt;
&lt;h3&gt;在服务器（ubuntu）上&lt;/h3&gt;
&lt;p&gt;sudo apt-get install mosh&lt;/p&gt;
&lt;h3&gt;在客户机（mac）上&lt;/h3&gt;
&lt;p&gt;sudo brew install mosh&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在服务器上开放两个UDP端口：60001和60002 （云服务器需要设置防火墙规则）&lt;/li&gt;
&lt;li&gt;我一般习惯让服务端支持中文（两边对语言环境支持不同可能引发bug）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;配置中文环境的详细步骤&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://wwj718.github.io/ubuntu-server-daily.html"&gt;ubuntu server日常&lt;/a&gt;中的&lt;em&gt;支持中文&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;mosh USERNAME@IP&lt;/p&gt;
&lt;h3&gt;SSH端口&lt;/h3&gt;
&lt;p&gt;如果你更改了SSH的默认端口(22),假设改为2022，那么你需要这样连接:&lt;br /&gt;
mosh --ssh="ssh -p 2022"  USERNAME@IP&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 10 Oct 2015 00:00:00 -0000</pubDate><guid>tag:,2015-10-10:mosh.html</guid><category>linux</category></item><item><title>搭建ngrok服务（内网穿透）</title><link>/build-ngrok-server.html</link><description>&lt;p&gt;由于众所周知的原因，我们无法使用ngrok.com&lt;/p&gt;
&lt;p&gt;国内有一个基于ngrok的网络服务：&lt;a href="tunnel.mobi"&gt;tunnel.mobi&lt;/a&gt;，不过时常不稳定。所以想自己搭建一个&lt;/p&gt;
&lt;h1&gt;搭建&lt;/h1&gt;
&lt;p&gt;环境：ubuntu14.04&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#安装依赖&lt;/span&gt;
sudo apt-get install build-essential golang mercurial git&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;#获取ngrok&lt;/span&gt;
git clone https://github.com/inconshreveable/ngrok.git ngrok
&lt;span class="nb"&gt;cd&lt;/span&gt; ngrok

&lt;span class="c1"&gt;#生成并替换默认的证书&lt;/span&gt;
&lt;span class="nv"&gt;NGROK_DOMAIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUR_DOMAIN&amp;quot;&lt;/span&gt;
openssl genrsa -out base.key 2048
openssl req -new -x509 -nodes -key base.key -days &lt;span class="m"&gt;10000&lt;/span&gt; -subj &lt;span class="s2"&gt;&amp;quot;/CN=&lt;/span&gt;&lt;span class="nv"&gt;$NGROK_DOMAIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -out base.pem
openssl genrsa -out server.key 2048
openssl req -new -key server.key -subj &lt;span class="s2"&gt;&amp;quot;/CN=&lt;/span&gt;&lt;span class="nv"&gt;$NGROK_DOMAIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -out server.csr
openssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days &lt;span class="m"&gt;10000&lt;/span&gt; -out server.crt
cp base.pem assets/client/tls/ngrokroot.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;开始编译&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sudo make release-server release-client&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译完成后bin目录下将生产ngrokd和ngrok&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;编译window版本客户端：&lt;/h3&gt;
&lt;p&gt;GOOS=windows GOARCH=386&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;windows &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;386&lt;/span&gt;  make  release-client
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;编译mac版本客户端：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;darwin &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 make  release-client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后都能在bin目录下找到&lt;/p&gt;
&lt;h1&gt;运行服务&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x ./bin/ngrokd
sudo ./bin/ngrokd -tlsKey&lt;span class="o"&gt;=&lt;/span&gt;server.key -tlsCrt&lt;span class="o"&gt;=&lt;/span&gt;server.crt -domain&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUR_DOMAIN&amp;quot;&lt;/span&gt; -httpAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt; -httpsAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;注意&lt;/h1&gt;
&lt;p&gt;客户端必须使用自己编译的ngrok文件&lt;/p&gt;
&lt;h1&gt;设置开机自动启动ngrok服务&lt;/h1&gt;
&lt;p&gt;vim /etc/init.d/ngrok_start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/path/to/ngrokd -tlsKey&lt;span class="o"&gt;=&lt;/span&gt;/path/to/server.key -tlsCrt&lt;span class="o"&gt;=&lt;/span&gt;/path/to/server.crt -domain&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;findhao.com&amp;quot;&lt;/span&gt; -httpAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt; -httpsAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;做些设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/ngrok_start
&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/init.d
sudo update-rc.d ngrok_start defaults 20
&lt;span class="c1"&gt;#卸载启动脚本&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/init.d
sudo update-rc.d -f ngrok_start remove
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置域名解析&lt;/h1&gt;
&lt;p&gt;把域名解析到VPS上，如果你只需要主机记录@和www，直接设置A记录把他们解析到VPS的IP上，如果需要很多二级域名的话，可以直接把*解析到IP上&lt;/p&gt;
&lt;h1&gt;客户端使用&lt;/h1&gt;
&lt;p&gt;vim ngrok.cfg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server_addr: YOUR_DOMAIN:4443
trust_host_root_certs: &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;./ngrok -subdomain wwj -config=ngrok.cfg 8000&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 09 Sep 2015 00:00:00 -0000</pubDate><guid>tag:,2015-09-09:build-ngrok-server.html</guid><category>技术</category></item><item><title>搭建私有文件存储服务</title><link>/build-seafile.html</link><description>&lt;p&gt;公司最近准备搭建私有文件存储服务，主要的需求点在团队协作，文件共享和权限控制，我又有机会冒充系统管理员啦。&lt;/p&gt;
&lt;p&gt;一直对seafile很感兴趣，给L演示后，他也觉得不错，于是开始搭建。&lt;/p&gt;
&lt;p&gt;首选方案当然是用docker。一搜github找到它:&lt;a href="https://github.com/JensErat/docker-seafile"&gt;docker-seafile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;剩下的就是细节啦。&lt;/p&gt;
&lt;h1&gt;安装seafile&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;安装docker,参考&lt;a href="http://wwj718.github.io/docker-edx-birch-1.html"&gt;我此前的文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker run：  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  sudo docker run -t -i \
  -p 10001:10001 \
  -p 12001:12001 \
  -p 8001:8000 \
  -p 8080:8080 \
  -p 8082:8082 \
  -v /srv/seafile:/opt/seafile \
  jenserat/seafile -- /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir seafile&amp;amp;cd seafile&lt;/code&gt;，&lt;code&gt;git clone https://github.com/JensErat/docker-seafile.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在宿主机里 &lt;code&gt;cd docker-seafile&lt;/code&gt;,&lt;code&gt;./download-seafile.sh&lt;/code&gt; , &lt;code&gt;sudo cp . /srv/seafile -R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入容器：&lt;code&gt;/opt/seafile/seafile-server-4.3.2/setup-seafile.sh&lt;/code&gt;,回答相应问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/seafile/seafile-server-latest/seafile.sh start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/seafile/seafile-server-latest/seahub.sh start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;运行seafile&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
  --name seafile &lt;span class="se"&gt;\&lt;/span&gt;
  -p 10001:10001 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 12001:12001 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 8001:8000 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 8080:8080 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 8082:8082 &lt;span class="se"&gt;\&lt;/span&gt;
  -v /srv/seafile:/opt/seafile &lt;span class="se"&gt;\&lt;/span&gt;
  -e &lt;span class="nv"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  jenserat/seafile
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;开机自启&lt;/h1&gt;
&lt;p&gt;加上&lt;code&gt;--restart=no&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;访问ip:8001&lt;/p&gt;
&lt;h1&gt;重新配置&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;进入到容器中
rm -rf /opt/seafile/ccnet
rm -rf  /opt/seafile/seafile-data
/opt/seafile/seafile-server-4.3.2/setup-seafile.sh
/opt/seafile/seafile-server-latest/seafile.sh restart
/opt/seafile/seafile-server-latest/seahub.sh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;定制开发（将其作为文件服务）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;web api ： &lt;a href="http://manual-cn.seafile.com/develop/web_api.html#file-share-link"&gt;http://manual-cn.seafile.com/develop/web_api.html#file-share-link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;python api : &lt;a href="http://manual-cn.seafile.com/develop/python_api.html"&gt;http://manual-cn.seafile.com/develop/python_api.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;桌面端以及移动端下载&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.seafile.com/download/"&gt;https://www.seafile.com/download/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;接口调试&lt;/h1&gt;
&lt;p&gt;试了下缩略图功能：&lt;a href="http://manual-cn.seafile.com/develop/web_api.html#get-thumbnail-image"&gt;http://manual-cn.seafile.com/develop/web_api.html#get-thumbnail-image&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取token：&lt;code&gt;curl -d "username=MYUSERNAME&amp;amp;password=MYPASSWORD" http://MYSERVER/api2/auth-token/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取缩略图：&lt;code&gt;curl -H "Authorization: Token MYTOKEN"   http://MYSERVER/api2/repos/{repo_id}/thumbnail/?p=echarts5.jpeg&amp;amp;size=123 &amp;gt; thumbnail.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中repo_id进入具体资料库，从url中可以看到&lt;/p&gt;
&lt;h1&gt;坑记录&lt;/h1&gt;
&lt;p&gt;由于文件服务器搭建在内网，偶尔也有外部访问的需求（主要是文件分类之类的工作，技术负责人/规范制定者们得经常出门在外，这个需求还是挺常见的），所以使用ngrok映射出去，由于文件相关的服务在8082端口，而ngrok只映射web server服务，所以外部可以操作网站，却无法查看/上传/下载文件。这与需求不矛盾: )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Sep 2015 00:00:00 -0000</pubDate><guid>tag:,2015-09-08:build-seafile.html</guid><category>技术</category></item><item><title>使用Supervisor来管理进程</title><link>/process-control-system-supervisor.html</link><description>&lt;h1&gt;Supervisor是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Supervisor是用Python实现的一款实用的进程管理工具。Supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启、关闭、重启进程等操作，而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序执行中断后的情况下有自我修复的功能。&lt;/p&gt;
&lt;h1&gt;安装与配置&lt;/h1&gt;
&lt;p&gt;Supervisor本质上是个python包,安装很简易:&lt;code&gt;sudo pip install supervisor&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;配置文件&lt;/h2&gt;
&lt;p&gt;运行&lt;code&gt;echo_supervisord_conf&lt;/code&gt;，会输出一个模板，修修改改就可用了。
将其写入文件：&lt;code&gt;sudo echo_supervisord_conf &amp;gt; supervisord.conf&lt;/code&gt;&lt;br /&gt;
如果没有root权限，可以将配置文件写在本地，之后用&lt;code&gt;-c&lt;/code&gt;参数来指定配置文件: &lt;code&gt;supervisord -c supervisord.conf&lt;/code&gt;。推荐做法是将配置文件写到&lt;code&gt;/etc/supervisord.conf&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;生成默认配置文件(推荐做法)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo_supervisord_conf &amp;gt; /etc/supervisord.conf
mkdir /etc/supervisord.conf.d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个需要管理的进程分别写在一个文件里面，放在/etc/supervisord.conf.d/目录下，便于管理。修改配置文件,include区段修改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[include]
files = /etc/supervisord.conf.d/*.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如需要访问web控制界面，inet_http_server区段修改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[inet_http_server]
port=0.0.0.0:9001
username=username 
password=password 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;开机自启&lt;/h2&gt;
&lt;p&gt;将supervisord加入系统服务,文件：&lt;code&gt;/etc/init.d/supervisord&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简单的方法是往&lt;code&gt;/etc/rc.local&lt;/code&gt;加入&lt;code&gt;/usr/local/bin/supervisord&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supervisord安装完成后有两个可用的命令行&lt;code&gt;supervisor&lt;/code&gt;和&lt;code&gt;supervisorctl&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;supervisord:初始启动Supervisord，启动、管理配置中设置的进程:
启动supervisord：&lt;code&gt;supervisord -c /etc/supervisord.conf&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:programxxx]里配置的值。stop可替换为start/restart/reload&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;edX中（Cypress版本）&lt;/h2&gt;
&lt;h4&gt;Shutdown the lms and cms:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/supervisorctl  
&amp;gt; stop edxapp: edxapp_worker:
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;See what services are running&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/supervisorctl status&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Restarting Services&lt;/h4&gt;
&lt;p&gt;LMS/CMS : &lt;code&gt;sudo /edx/bin/supervisorctl restart edxapp:&lt;/code&gt;&lt;br /&gt;
Workers : &lt;code&gt;sudo /edx/bin/supervisorctl restart edxapp_worker:&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;stop everything except the LMS and CMS&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/supervisorctl stop discern discern_celery 
  forum ora ora_celery xqueue xqueue_consumer xserver edxapp_worker:&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;edx中相关配置文件&lt;/h3&gt;
&lt;p&gt;搜索&lt;code&gt;sudo find /  -name *supervisord*&lt;/code&gt;。观察发现lms和cms相关的配置文件在&lt;code&gt;/edx/app/supervisor/supervisord.conf&lt;/code&gt; , &lt;code&gt;/edx/app/supervisor/conf.d/*.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中lms的配置文件为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[program:lms]

command=/edx/app/edxapp/venvs/edxapp/bin/gunicorn -c /edx/app/edxapp/lms_gunicorn.py lms.wsgi

user=www-data
directory=/edx/app/edxapp/edx-platform
environment=PORT=8000,ADDRESS=127.0.0.1,LANG=en_US.UTF-8,DJANGO_SETTINGS_MODULE=lms.envs.aws,SERVICE_VARIANT=&amp;quot;lms&amp;quot;,PATH=&amp;quot;/edx/app/edxapp/venvs/edxapp/bin:/edx/app/edxapp/edx-plat
form/bin:/edx/app/edxapp/.rbenv/bin:/edx/app/edxapp/.rbenv/shims:/edx/app/edxapp/.gem/bin:/edx/app/edxapp/edx-platform/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;
stdout_logfile=/edx/var/log/supervisor/%(program_name)s-stdout.log
stderr_logfile=/edx/var/log/supervisor/%(program_name)s-stderr.log
killasgroup=true
stopasgroup=true
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://supervisord.org/"&gt;Supervisor: A Process Control System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://type.so/linux/supervisor-install-and-configure.html"&gt;Supervisor安装及配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 -0000</pubDate><guid>tag:,2015-09-06:process-control-system-supervisor.html</guid><category>技术</category></item><item><title>for dinner</title><link>/for-dinner.html</link><description>&lt;p&gt;部门新来了个同事，负责视频编导和制作。经常需要使用Premiere渲染视频，这是一项十分费时的工作，动辄3-4个小时。&lt;/p&gt;
&lt;p&gt;同事时常在傍晚4-5点开始渲染视频，待其完成，将渲染好的视频发送出去，再关闭电脑回家。这样一来，往往就到晚上9/10点了。&lt;/p&gt;
&lt;p&gt;这样一来，就没空做晚饭和次日的便当了，念其厨艺棒极，为了午饭时间能闻到土豆炖牛肉的香味，我决定写个脚本完成这个工作。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;h3&gt;任务描述&lt;/h3&gt;
&lt;p&gt;写一个python脚本，该脚本运行在Windows环境下，该脚本监控视频导出目录，发现视频文件生成时，将其同步到云盘，同步完成后给相关人员发送邮件，通知其下载。此后关机。&lt;/p&gt;
&lt;h3&gt;任务分解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在Windows搭建python环境(easy)&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/gorakhargosh/watchdog"&gt;watchdog&lt;/a&gt;监控视频导出目录变化&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/houtianze/bypy"&gt;bypy&lt;/a&gt;同步文件到百度网盘&lt;/li&gt;
&lt;li&gt;使用smtp发送邮件&lt;/li&gt;
&lt;li&gt;关机:&lt;code&gt;from sys import system;system('halt')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在windows下配置好python环境，安装pip&lt;ul&gt;
&lt;li&gt;安装python&lt;/li&gt;
&lt;li&gt;下载 &lt;a href="https://bootstrap.pypa.io/ez_setup.py"&gt;easy_install&lt;/a&gt;到Python文件夹 点击安装  &lt;/li&gt;
&lt;li&gt;添加环境变量 D:\Python27 与 D:\Python27\Scripts&lt;/li&gt;
&lt;li&gt;cmd &amp;gt; easy_install pip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pip install bypy -i http://pypi.douban.com/simple&lt;/li&gt;
&lt;li&gt;pip install watchdog -i http://pypi.douban.com/simple&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;配置bypy&lt;/h3&gt;
&lt;p&gt;在终端执行bypy.py info，之后按照提示操作就行&lt;/p&gt;
&lt;h1&gt;show my code&lt;/h1&gt;
&lt;h3&gt;源代码&lt;/h3&gt;
&lt;p&gt;看这里:&lt;a href="https://github.com/wwj718/for_dinner"&gt;for_dinner&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#for_dinner.py&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;watchdog.observers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;watchdog.events&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoggingEventHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;FileSystemEventHandler&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;send_emails&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;commands&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;watchdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;watch_file_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;remotedir&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notice2download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;下载视频&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;请登录百度网盘&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_watch_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileSystemEventHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_created&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch_file_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;
            &lt;span class="c1"&gt;#上传到云盘&lt;/span&gt;
            &lt;span class="n"&gt;mycommands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bypy.py upload &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;remotedir&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getoutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycommands&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
            &lt;span class="c1"&gt;#发送邮件&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;新建文件：&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;
            &lt;span class="n"&gt;notice2download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#十分钟后关机&lt;/span&gt;
            &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;halt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_modified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch_file_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;     &lt;span class="c1"&gt;#监控指定文件内容、权限等变化&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;log file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; changed!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;watchdir&lt;/span&gt;
    &lt;span class="n"&gt;event_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#send_emails.py&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_pass&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_user&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#config.py&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="n"&gt;watchdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#监控的目录&lt;/span&gt;
&lt;span class="n"&gt;watch_file_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;txt&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#监控的文件类型&lt;/span&gt;
&lt;span class="n"&gt;remotedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remotedir&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#云盘上的目录,需要先创建bypy.py mkdir remotedir&lt;/span&gt;
&lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;someone@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="c1"&gt;#接收人&lt;/span&gt;
&lt;span class="n"&gt;mail_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;smtp.example.com&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#设置服务器&lt;/span&gt;
&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user@example.com&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#用户名&lt;/span&gt;
&lt;span class="n"&gt;mail_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;#口令&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;h3&gt;mac/linux&lt;/h3&gt;
&lt;p&gt;sudo python for_dinner.py  &lt;/p&gt;
&lt;p&gt;其中/tmp是需要监控的目录&lt;/p&gt;
&lt;p&gt;关机权限需要sudo &lt;/p&gt;
&lt;h3&gt;windows&lt;/h3&gt;
&lt;p&gt;写一个bat脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#run.bat&lt;/span&gt;
python for_dinner.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;右键以管理员身份运行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 -0000</pubDate><guid>tag:,2015-08-16:for-dinner.html</guid><category>技术</category></item><item><title>ubuntu server日常</title><link>/ubuntu-server-daily.html</link><description>&lt;h1&gt;系统信息&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lsb_release -a&lt;/code&gt;:发行版信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname -a&lt;/code&gt;:Unix／kernel 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;支持中文&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install language-pack-zh-hant language-pack-zh-hans
sudo vim /etc/environment
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN.UTF8&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN:zh:en_US:en&amp;quot;&lt;/span&gt;




sudo vim /etc/default/locale
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN:zh&amp;quot;&lt;/span&gt;

sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置fish为默认的shell&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install fish
chsh -s /usr/bin/fish
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用mosh连接远程服务器&lt;/h1&gt;
&lt;p&gt;想在mac下使用mosh连接服务器(服务器端也需要安装mosh)，两边的语言环境最好相同（可都做以上「支持中文」设置），否则可能因为LANG的问题报错&lt;/p&gt;
&lt;h1&gt;IP&lt;/h1&gt;
&lt;p&gt;vim /etc/network/interfaces&lt;/p&gt;
&lt;h3&gt;以DHCP方式配置网卡&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto eth0  
iface eth0 inet dhcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启使网络生效：&lt;code&gt;sudo /etc/init.d/networking restart&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;配置静态IP&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The primary network interface  &lt;/span&gt;
auto eth0  
iface eth0 inet static  
address 192.168.2.1  
gateway 192.168.2.254  
netmask 255.255.255.0  
&lt;span class="c1"&gt;#network 192.168.2.0  &lt;/span&gt;
&lt;span class="c1"&gt;#broadcast 192.168.2.255 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启生效:&lt;code&gt;sudo /etc/init.d/networking restart&lt;/code&gt; &lt;/p&gt;
&lt;h1&gt;配置DNS&lt;/h1&gt;
&lt;p&gt;sudo vim /etc/resolvconf/resolv.conf.d/tail
添加内容格式和&lt;code&gt;/etc/resolv.conf&lt;/code&gt;相同:&lt;code&gt;nameserver 8.8.8.8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启使网络生效:&lt;code&gt;sudo /etc/init.d/resolvconf restart&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;查看端口&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sudo lsof -i:8000&lt;/code&gt;:查看8000端口被什么占用&lt;/p&gt;
&lt;h3&gt;永久生效&lt;/h3&gt;
&lt;p&gt;sudo vim /etc/resolvconf/resolv.conf.d/base&lt;br /&gt;
sudo resolvconf -u&lt;/p&gt;
&lt;h1&gt;交换分区&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="c1"&gt;# sudo dd if=/dev/zero of=/wwjdata/swapfile count=8096 bs=1M&lt;/span&gt;
sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/swapfile swap swap auto 0 0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/fstab
sudo sysctl -w vm.swappiness&lt;span class="o"&gt;=&lt;/span&gt;10
sudo &lt;span class="nb"&gt;echo&lt;/span&gt; vm.swappiness &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/sysctl.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置ssh免登陆&lt;/h1&gt;
&lt;p&gt;ssh-copy-id ~/.ssh/id_rsa.pub wwj@192.168。1.100 &lt;/p&gt;
&lt;h1&gt;z jump&lt;/h1&gt;
&lt;p&gt;look at &lt;a href="https://raw.githubusercontent.com/wwj718/mytools/master/startMyUbuntu.sh"&gt;startMyUbuntu.sh&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;删除&lt;/h1&gt;
&lt;p&gt;sudo apt-get remove --purge xxx&lt;/p&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html"&gt;Linux工具快速教程&lt;/a&gt;:已经按用途做了分类，方便参考&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 -0000</pubDate><guid>tag:,2015-08-15:ubuntu-server-daily.html</guid><category>ubuntu</category></item><item><title>搭建公司内部论坛discourse</title><link>/discourse-install.html</link><description>&lt;p&gt;上周在公司内部搭建好gitlab。不少同事此前用的是svn，我对git可能最为熟悉，老板建议说给大家做个培训，于是整理了一些好的资料。至于解决大家遇到的问题，我倒是更倾向于使用在线问答的形式，所以顺带在公司内部搭建了一个论坛服务，方便大家贴出问题，交流讨论，大多问题一贴代码都解决了。而且方便后来者参考，不必每个问题大家都问一遍。&lt;/p&gt;
&lt;p&gt;文本的可重用性比口头强多了。&lt;/p&gt;
&lt;h1&gt;discourse&lt;/h1&gt;
&lt;p&gt;Discourse是一个为下一个十年的互联网准备的论坛程序。&lt;/p&gt;
&lt;p&gt;使用体验极佳。&lt;/p&gt;
&lt;p&gt;允许直接贴代码，对于技术交流十分方便&lt;/p&gt;
&lt;h1&gt;install docker discourse&lt;/h1&gt;
&lt;p&gt;像上一篇安装gitlab一样，我依然偏好使用docker&lt;/p&gt;
&lt;p&gt;docker的安装就不赘述了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /var/discourse
git clone https://github.com/discourse/discourse_docker.git /var/discourse
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse
cp samples/standalone.yml containers/app.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑配置文件&lt;code&gt;containers/app.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初始化：&lt;code&gt;./launcher bootstrap app&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;SMTP邮件服务器部分折腾了挺久，其实一般的qq邮箱就行，需要注意的是使用admin账号将&lt;code&gt;notification email&lt;/code&gt;设置为smtp user email一致&lt;/p&gt;
&lt;p&gt;也可以直接在&lt;code&gt;containers/app.yml&lt;/code&gt;里改：&lt;code&gt;- exec: rails r "SiteSetting.notification_email='xxx@qq.com'"&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#创建管理员&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse
sudo ./launcher enter app
rake admin:create
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后打开url : &lt;code&gt;/admin/site_settings/category/required&lt;/code&gt;,设置其中的notification email，使其与smtp user email一致。&lt;/p&gt;
&lt;h1&gt;一些可能用得到的操作&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse
&lt;span class="c1"&gt;#初始化&lt;/span&gt;
./launcher bootstrap app
&lt;span class="c1"&gt;#rebuild&lt;/span&gt;
./launcher rebuild app
&lt;span class="c1"&gt;#启动&lt;/span&gt;
./launcher start app
&lt;span class="c1"&gt;#停止&lt;/span&gt;
./launcher stop app
&lt;span class="c1"&gt;#更多操作课参考 ./launcher&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md"&gt;INSTALL-cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 -0000</pubDate><guid>tag:,2015-08-03:discourse-install.html</guid><category>技术</category></item><item><title>搭建 gogs 代码托管服务器</title><link>/gogs-install.html</link><description>&lt;p&gt;前头写到搭建好了gitlab，不过没有找到汉化的方法，而且看去界面蛮繁琐的（针对没有使用github的同学而言）。为了降低大家入门门槛，决定使用gogs来搭建代码托管服务器。&lt;/p&gt;
&lt;h1&gt;gogs&lt;/h1&gt;
&lt;p&gt;github上的star截止至15.08.03，已经超过8k。自助安装极其方便，有各个平台的二进制文件，甚至可以轻易搭建在树莓派上&lt;/p&gt;
&lt;h1&gt;install&lt;/h1&gt;
&lt;h2&gt;安装mysql&lt;/h2&gt;
&lt;p&gt;你也可以不安装任何数据库，默认会使用sqlite&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入mysql，创建好数据库：&lt;code&gt;CREATE DATABASE gogs;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;安装gogs&lt;/h2&gt;
&lt;p&gt;采用二进制安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://gogs.dn.qbox.me/gogs_v0.6.3_linux_amd64.zip
unzip gogs_v0.6.3_linux_amd64.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;run it&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x gogs
./gogs web
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跑起来后进入到一个安装配置页面,邮件服务器的配置需要注意一下端口号，举个栗子：&lt;code&gt;smtp.qq.com:25&lt;/code&gt;.此外注意一下当出现&lt;code&gt;运行系统用户非当前用户&lt;/code&gt;错误是，在配置里填上你运行&lt;code&gt;./gogs web&lt;/code&gt;对应的用户&lt;/p&gt;
&lt;p&gt;如果需要修改配置文件，只要编辑gogs目录下的:&lt;code&gt;custom/conf/app.ini&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;整个过程极其建议&lt;/p&gt;
&lt;h2&gt;备份&lt;/h2&gt;
&lt;p&gt;默认情况下，代码仓库在&lt;code&gt;~/gogs-repositories&lt;/code&gt;下，备份的话除了备份数据库(gogs/data)，也注意备份这个目录，推荐使用backup，我在此前的一篇博客里有提到:&lt;a href="http://wwj718.github.io/use-backup-for-edx.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;backup的安装非常蛋疼，在ruby1.9中各种出错，还是使用rsync好了&lt;/p&gt;
&lt;h3&gt;使用rsync同步数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;配置好ssh免登陆&lt;ul&gt;
&lt;li&gt;ssh-keygen -t dsa&lt;/li&gt;
&lt;li&gt;sudo cp -R .ssh /root/&lt;/li&gt;
&lt;li&gt;ssh-copy-id -i .ssh/id_dsa.pub xx@backup_host&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本地推送到远程：&lt;code&gt;/usr/bin/rsync -avH  /home/xx/gogs-repositories xx@backup_host:~/backup/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;备份mysql数据    &lt;ul&gt;
&lt;li&gt;/usr/bin/mysqldump -uroot -pxxx gogs &amp;gt; /tmp/gogs.sql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用cron写定时任务&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00 01 * * * /usr/bin/rsync xxx&lt;/code&gt; （每天凌晨1点同步数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用Supervisor管理进程&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="http://blog.just4fun.site/process-control-system-supervisor.html"&gt;使用Supervisor来管理进程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/supervisord.conf.d/&lt;/code&gt;创建&lt;code&gt;gogs.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[program:gogs]

user=wwj
directory=/home/wwj/gogs/gogs
command=/home/wwj/gogs/gogs/gogs web
environment = HOME=&amp;quot;/home/wwj&amp;quot;, USER=&amp;quot;wwj&amp;quot;
autostart=true
autorestart=true
startsecs=10
stdout_logfile=/var/log/gogs/stdout.log
stdout_logfile_maxbytes=1MB
stdout_logfile_backups=10
stdout_capture_maxbytes=1MB
stderr_logfile=/var/log/gogs/stderr.log
stderr_logfile_maxbytes=1MB
stderr_logfile_backups=10
stderr_capture_maxbytes=1MB
supervisorctl  restart gogs
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 -0000</pubDate><guid>tag:,2015-08-03:gogs-install.html</guid><category>技术</category></item><item><title>搭建私有 GitLab 代码托管服务器</title><link>/gitlab-install.html</link><description>&lt;p&gt;最近正使用docker给公司内部搭建 GitLab 代码托管服务器&lt;/p&gt;
&lt;h1&gt;Gitlab&lt;/h1&gt;
&lt;p&gt;按照维基百科的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab实现了一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。&lt;br /&gt;
它拥有与GitHub类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序（Wall）进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;install docker gitlab&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#安装docker（国内）&lt;/span&gt;
curl -sSL https://get.daocloud.io/docker &lt;span class="p"&gt;|&lt;/span&gt; sh
sudo pip install docker-compose
wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
&lt;span class="c1"&gt;#vim docker-compose.yml 可以自己更改参数，所有可选参数在这里：https://github.com/sameersbn/docker-gitlab#available-configuration-parameters&lt;/span&gt;
sudo docker-compose up
&lt;span class="c1"&gt;#之后可以把GITLAB_PORT，用ngrok映射到公网。这样不在同个局域网内也可以访问了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些值得注意的参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GITLAB_TIMEZONE = "Asia/Shanghai"&lt;/li&gt;
&lt;li&gt;GITLAB_HOST&lt;/li&gt;
&lt;li&gt;GITLAB_PORT&lt;/li&gt;
&lt;li&gt;GITLAB_ROOT_PASSWORD,默认是5iveL!fe&lt;/li&gt;
&lt;li&gt;GITLAB_BACKUP_DIR，默认是&lt;code&gt;/home/git/data/backups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GITLAB_BACKUPS,备份周期，可选disable, daily, weekly or monthly&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;git学习资料&lt;/h1&gt;
&lt;p&gt;以下列出一些我个人觉得比较好的学习资料&lt;/p&gt;
&lt;h3&gt;入门参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Mark24Code/15minGit/blob/master/15minGit.md"&gt;15分钟学会使用Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"&gt;Git教程 廖雪峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://backlogtool.com/git-guide/cn/intro/intro1_1.html"&gt;猴子都能懂的GIT入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zhengkun.info/2014/10/09/git_usage.html"&gt;Git 常用命令用法：程序员的场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;权威参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/zh/v1"&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sameersbn/docker-gitlab#installation"&gt;github docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.damagehead.com/docker-gitlab/"&gt;www.damagehead.com docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jul 2015 00:00:00 -0000</pubDate><guid>tag:,2015-07-28:gitlab-install.html</guid><category>技术</category></item><item><title>edX开发相关</title><link>/edx-development.html</link><description>&lt;p&gt;最近收到几封邮件，来自国内的几个edX团队，问我些edX开发相关的问题，问题大同小异，一并列举到博客上，下回开发者中再有人问。我就把链接一甩,然后在沙发上继续翘着二郎腿看《冰与火之歌》&lt;/p&gt;
&lt;p&gt;本文将谈论几个方面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发环境&lt;/li&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;代码管理&lt;/li&gt;
&lt;li&gt;部署到生产环境&lt;/li&gt;
&lt;li&gt;协同开发&lt;/li&gt;
&lt;li&gt;部署到生产环境&lt;/li&gt;
&lt;li&gt;我常用的开发工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;开发环境&lt;/h2&gt;
&lt;p&gt;理论上可以在任何系统下开发，Linux/Mac/Windows都行。无论你在哪个系统下开发，你都应该熟悉linux（Ubuntu）。edX的开发者版本实际是个虚拟机，跑在Virtualbox里的Ubuntu12.04，采用Vagrant管理，更多细节可以参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack"&gt;edX-Developer-Stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以只要你的机器装装有Vagrant和Virtualbox，无论Linux/Mac/Windows，你都可以开发edX&lt;/p&gt;
&lt;p&gt;开发环境的搭建读官方wiki就好，在此不赘述，参考这边&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack#installing-the-edx-developer-stack"&gt;installing-the-edx-developer-stack&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;IDE&lt;/h2&gt;
&lt;p&gt;我是Vim党，偏好Unix工具箱，基本不用IDE。Python社区比较鼓励Editor+IPython，我在折腾edX时,用的一直是Vim+IPython的组合，且用得越来越顺手。据我所知，edX官方团队里，用IDE的人也是不多的，如果你偏好IDE，那么wiki里已经为你准备好文档了，关于如何配置PyCharm来开发edX：&lt;a href="https://github.com/edx/edx-platform/wiki/Setting-up-PyCharm-for-edX-development"&gt;Setting-up-PyCharm-for-edX-development&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说实话，给edX配置PyCharm还蛮繁琐的，我在三个平台下(Linux/Mac/Windows)都帮人配置过，需要注意的是，Windows平台下无法把代码放到本地目录开发，其中有个软链接的坑（没记错的话，是xmodule目录，Windows下没有软链接），所以跑代码的时候会报错，你需要单独处理下这个软链接的问题。解决方案可以参考这里:&lt;a href="https://github.com/edx/configuration/wiki/Vagrant-troubleshooting#dealing-with-line-endings-and-symlinks-under-windows"&gt;dealing-with-line-endings-and-symlinks-under-windows&lt;/a&gt;,实际上我觉得官方的解决方案很烦，我采取的是PyCharm的远程编辑功能，如此一来，代码其实在本地虚拟机里，这样就不存在这个问题软链接的问题了&lt;/p&gt;
&lt;h2&gt;代码管理&lt;/h2&gt;
&lt;p&gt;最恶劣的情况是，安装完毕后，就撸起袖子开始侵入式地定制开发了。连分支都不新建。  &lt;/p&gt;
&lt;p&gt;稍好一些的情况是， 知道先&lt;code&gt;git checkout -b mybranch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么最佳实践是什么呢，在我们谈论最佳实践的之前，必须熟悉git的常用workflow，而后，选一种适合你们使用场景的。这和恋爱相似，适合你的才是好的。之后我会分享下我们的做法&lt;/p&gt;
&lt;p&gt;项目的技术负责人必须考虑到这样的事实，我们的开发和生产版本基于上游代码库（官方版本）的某个release，在此基础上做自己的定制开发。而上游库一直在演进中，一边增加新特性，一边修复旧bug。越到后来，上游版本越健壮和强大，但我们不能一直等对不对，我们得着手开发自己的定制需求。同时我们又期望能够升级到新的上游版本，免费获得新特性的同时，又不丢失定制功能，这个过程就是商业公司使用开源项目都要面临的问题。如果你不考虑升级和迁移，那么对于你们公司而言，等同于损失了整个开源社区的力量。我想不出技术层面上更大的损失。&lt;/p&gt;
&lt;p&gt;项目技术负责人，在项目初期对这块投入多大的重视都不为过，之后会有丰厚的回报，如果草率开始，到时候肯定面临手动迁移的局面，那么项目升级很可能不是件艰难的事，而是根本不可能，你只能推倒重来&lt;/p&gt;
&lt;h3&gt;定制开发&lt;/h3&gt;
&lt;p&gt;《代码大全2》里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件工程的本质即是管理复杂度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我只能提一些泛泛的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把代码尽量的模块化，定制的功能，可以的话，尽量整个丢到django app里&lt;/li&gt;
&lt;li&gt;尽量不要去入侵edx-platform源代码，尽可能采用非侵入式插件风格的定制&lt;/li&gt;
&lt;li&gt;诸如主题的定制，你应当使用theme，而不是去改templates&lt;/li&gt;
&lt;li&gt;诸如要课程分类，添加属性，尽量不要去动课程模型，而是自建model，采用course_id关联到原有课程。而后整个功能模块丢到django app里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你采用了以上做法，你会发现迁移起来是并不麻烦的，至少是可能的。git rebase到上游新的release上，而后做些冲突解决工作就好。&lt;/p&gt;
&lt;h2&gt;部署到生产环境&lt;/h2&gt;
&lt;p&gt;现在假设你已经定制开发完毕了，代码也已经git commit。&lt;/p&gt;
&lt;p&gt;如果要细说的话，涉及到一系列Workflow相关的问题，所以不打算在此细说，况且一时半会儿也没法说清。&lt;/p&gt;
&lt;p&gt;简单说来就是用好Git，在你的开发环境和生产环境之间只需要同步代码就够了。最简单的做法是只修改了行为相关的代码，没有动系统环境和数据模型。那么只需要在开发环境下&lt;code&gt;git push&lt;/code&gt;，然后到生产环境下&lt;code&gt;git pull&lt;/code&gt;，之后&lt;code&gt;sudo /edx/bin/supervisorctl restart edxapp:&lt;/code&gt;一下，生产环境就同步生效了&lt;/p&gt;
&lt;p&gt;此外，如果想让让发布迭代过程更流畅。推荐采用&lt;a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html"&gt;Gitflow工作流&lt;/a&gt;，这种工作流示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_development.png" src="img/edx/edx_development/edx_development.png" /&gt;&lt;/p&gt;
&lt;p&gt;此外重点提醒一下，保证你的开发环境和生产环境的configuration版本一致，其中edx-platform的一致是最重要的。&lt;/p&gt;
&lt;h2&gt;协同开发&lt;/h2&gt;
&lt;p&gt;只要是一个开发团队，就得面对这个问题，如何协同开发。&lt;/p&gt;
&lt;p&gt;其实只要熟悉Vagrant和Git，遵循一些社区的建议，基本协同开发就不成问题了。&lt;/p&gt;
&lt;p&gt;Vagrant用来保证成员之间系统环境的一致性，而Git用来管理代码。&lt;/p&gt;
&lt;p&gt;根据协作情景的不同，我们需要选择不同的Git工作流&lt;/p&gt;
&lt;p&gt;如果是1，2个人折腾，那么&lt;code&gt;集中式工作流&lt;/code&gt;就够用了，以中央仓库作为项目所有修改的单点实体。SVN用户应该很熟悉&lt;/p&gt;
&lt;p&gt;针对小团队而言（多数情况）。&lt;code&gt;功能分支工作流&lt;/code&gt;，可能是不错的选择，简单清晰。核心想法是所有的功能开发应该在一个专门的分支上，而不是在master分支上。 这样一来，开发者在各自的功能上开发而不会弄乱主干代码&lt;/p&gt;
&lt;p&gt;针对社区协作而言，&lt;code&gt;Forking工作流&lt;/code&gt;最合适，如果暑期国内开发者会议顺利，应该国内社区也会成型，到时候，社区便采用这种方式，在github上协作，目前官方采用的也是这种工作流，采用&lt;code&gt;Forking工作流&lt;/code&gt;的好处是开发者只需把定制代码push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。 这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。&lt;/p&gt;
&lt;p&gt;同时&lt;code&gt;Pull Request&lt;/code&gt;作为补充，可在以上三种工作流中应用,github的Pull Request提供了一个用户友好的Web界面，在提交变更到项目之前可以对变更进行讨论。&lt;br /&gt;
如此一来，每次提交的都有了专门的谈论区。团队成员间的协作变得更轻松方便
如果是小团队。&lt;/p&gt;
&lt;h2&gt;我常用的开发工具&lt;/h2&gt;
&lt;p&gt;前边说了 我是Vim党，偏好Unix工具箱，基本不用IDE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器：Vim&lt;/li&gt;
&lt;li&gt;debug&lt;ul&gt;
&lt;li&gt;IPython&lt;ul&gt;
&lt;li&gt;切换到edxapp环境下，安装IPython，之后sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws shell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sudo -u www-data /edx/bin/python.edxapp ./manage.py {lms|cms} runserver 8000 --settings aws 使用django的django-debug-toolbar来调试，用于调试生产环境 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库相关:mongodump,mysqldump，图形化工具可以使用:Robomongo,MySQLWorkbench&lt;/li&gt;
&lt;li&gt;网络相关：httpie，nethogs，iftop&lt;/li&gt;
&lt;li&gt;源码解读：understand，Souce Insight&lt;/li&gt;
&lt;li&gt;Unix工具箱：tail，tmux，htop，ack，diff，grep&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 -0000</pubDate><guid>tag:,2015-06-19:edx-development.html</guid><category>edx</category></item><item><title>Pipeline and Python</title><link>/Pipeline-and-Python.html</link><description>&lt;blockquote&gt;
&lt;p&gt;程序应该只关注一个目标，并尽可能把它做好。让程序能够互相协同工作。应该让程序处理文本数据流，因为这是一个通用的接口  --Malcolm Douglas McIlroy(Unix管道发明者)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此前写过这篇：&lt;a href="http://wwj718.github.io/regex-demo.html"&gt;正则表达式一例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我试着用多种语言去完成这个任务，当我试着用bash和perl去解决这个问题的时候，发现perl和命令行的的结合十分紧密，很容易将perl作为管道的一截，就像sed或是grep一样。&lt;/p&gt;
&lt;p&gt;而管道是我极喜欢的Unix特性之一。&lt;/p&gt;
&lt;p&gt;一旦习惯了管道，将程序作为过滤器，就十分容易与Unix工具箱中的其他组件协作，如此一来绝大多数的工作都省了！过滤器之间协作的力量常常十分惊人。&lt;/p&gt;
&lt;h2&gt;Pipeline&lt;/h2&gt;
&lt;p&gt;管道(Pipeline)依赖于这样的约定，每个程序一开始有两个I/O数据流可用：标准输入和标准输出，许多程序都可以写作过滤器，从标准输入顺序读入数据，并且向标准输出写数据。&lt;/p&gt;
&lt;h3&gt;语法&lt;/h3&gt;
&lt;p&gt;典型语法是使用ASCII中的垂直线&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ls -l | less&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;ls用于在Unix下列出目录内容，less是一个有搜索功能的交互式的文本分页器 &lt;/p&gt;
&lt;h3&gt;从管道中获益&lt;/h3&gt;
&lt;p&gt;上边的less将程序员从为自己的软件开发分页器的负担中解放了出来：他们只需要把他们的输出用过“管道”导入到less程序中即可，可以完全不顾分页问题&lt;/p&gt;
&lt;p&gt;这样就避免了代码的臃肿，降低和全局复杂度&lt;/p&gt;
&lt;p&gt;《代码大全》中给出过一个观点:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件工程的本质即是管理复杂度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;管道触进了“Do one thing, Do it well”，于是当然也有利于“Keep it Simple Stupid”&lt;/p&gt;
&lt;p&gt;而这些对于一个复杂项目的成败都是至关重要的&lt;/p&gt;
&lt;h3&gt;other demo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tr -c '[:alnux]' '[\n*]' | sort -iu |grep -v '^[0-9]*$'&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;以上操作把标准输入的文本生成了经过排序的单词表送到标准输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个命令把标准输入中非字母和数字的字符在标准输出中转化为新行。&lt;/li&gt;
&lt;li&gt;第二个命令对标准输入的行进行排序，对于重复的相邻行只保留一个，然后把排好序的数据写到标准输出。&lt;/li&gt;
&lt;li&gt;第三个命令去掉所有只包含数字的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pipeline and Python&lt;/h2&gt;
&lt;p&gt;那么Python程序能否方便地作为过滤器放到管道里呢。毕竟我不想捏着鼻子写perl。&lt;/p&gt;
&lt;p&gt;github了一下，找到这个&lt;a href="https://github.com/Russell91/pythonpy"&gt;pythonpy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下边我们试着用pythonpy来完成&lt;a href="http://wwj718.github.io/regex-demo.html"&gt;正则表达式一例&lt;/a&gt;中的任务&lt;/p&gt;
&lt;h3&gt;环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;virtualenv(python3) ps:涉及到中文的问题尽量用python3&lt;/li&gt;
&lt;li&gt;pip install pythonpy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ls /PATH/*.txt&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="nv"&gt;$filenames&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
cat &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s2"&gt;&amp;quot;re.sub(r&amp;#39;[\u4e00-\u9fa5].*&amp;#39;,&amp;#39;&amp;#39;,x)&amp;quot;&lt;/span&gt;&amp;gt;output_&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;怎么样，够简洁吧！&lt;/p&gt;
&lt;h3&gt;pythonpy demo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#计算&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;3 * 1.5&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#4.5&lt;/span&gt;

&lt;span class="c1"&gt;#py -x ：treat each row of stdin as x&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;range(3)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;int(x)*7&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#0\n7\n14&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a1,b1,c1\na2,b2,c2&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;x.split(&amp;quot;,&amp;quot;)[1]&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#b1\nb2&lt;/span&gt;
&lt;span class="c1"&gt;##Append &amp;quot;.txt&amp;quot; to each line of input&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;range(3)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;x + &amp;quot;.txt&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#0.txt\n1.txt\n2.txt&lt;/span&gt;
&lt;span class="c1"&gt;##Append &amp;quot;.txt&amp;quot; to every file in the directory,ps:还是使用ipython或是shell的for来做吧&lt;/span&gt;
ls &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;&amp;quot;mv `%s` `%s.txt`&amp;quot; % (x,x)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sh 

&lt;span class="c1"&gt;#py -l ：treat list of stdin as l&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;range(3)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -l &lt;span class="s1"&gt;&amp;#39;sum(int(x) for x in l)&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;#Count words beginning with each letter 。多熟悉collections（python cookbook），集合的特性相关&lt;/span&gt;
cat /usr/share/dict/words &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;x[0].lower()&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -l &lt;span class="s1"&gt;&amp;#39;collections.Counter(l).most_common(5)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;python脚本作为过滤器&lt;/h3&gt;
&lt;p&gt;如果我们想将python脚本当做过滤器用在管道里，关键便是让它能处理输入(stdin)输出(stdout)流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#myscript.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#sys.stdout.write与print的区别是，print会默认添加换行符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;code&gt;cat text.txt|python myscript.py&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Russell91/pythonpy"&gt;pythonpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/管道_(Unix)"&gt;管道_Unix wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/1467587/"&gt;Unix编程艺术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Jun 2015 00:00:00 -0000</pubDate><guid>tag:,2015-06-16:Pipeline-and-Python.html</guid><category>python</category></item><item><title>正则表达式之处理一组lrc听力文件后续</title><link>/regex-demo2_more.html</link><description>&lt;p&gt;此前写过这篇：&lt;a href="http://wwj718.github.io/regex-demo2.html"&gt;正则表达式之处理一组lrc听力文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;室友近期在学Python，觉得上篇用的方法不够直观,理解起来有些费力,希望看到一个用正则找到文本之后进行替换的demo~ 作为中国好室友，我当然要给出demo啦&lt;/p&gt;
&lt;p&gt;需求描述为：将时间格式改为以秒为单位。eg：[01:11.36]=&amp;gt;[71.36]&lt;/p&gt;
&lt;h1&gt;待处理文本&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[00:00.12]section 2.
[00:02.68]you will part of a radio programme about the opening of a new local sports shop.
[00:09.32]first you have some time to look at questions 11 to 16.
[00:39.64]now listen carefully and answer questions 11 to 16.
[00:48.24]now we go to Jane who is going to tell us about what&amp;#39;s happening in town this weekend.
[00:52.24]right,thanks Andrew,
[00:53.92]and now on to what&amp;#39;s new,
[00:56.48]and do we really need yet another sports shop in Bradcaster?
[01:01.24]well,most of you probably know Sports World-
[01:04.44]the branch of a Danish sports goods company that opened a few years ago-
[01:09.04]it&amp;#39;s attracted a lot of custom,
[01:11.36]and so the company has now decided to open another branch in the area.
[01:16.60]it&amp;#39;s going to be in the shopping centre to the west of Bradcaster,
[01:20.44]so that will be good news for all of you who&amp;#39;ve found the original shop in the north of the town hard to get to.
[01:27.12]i was invited to a special preview
[01:29.60]and i can promise you,this is the ultimate in sports retailing.

......
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;min_sec_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;thetime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#return min_sec_str&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;minute:second change to second&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sec_str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_file_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;outputfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output.lrc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#命名分组&lt;/span&gt;
    &lt;span class="n"&gt;thetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;(?P&amp;lt;thetime&amp;gt;\d{2}:.{5})&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;format_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#print format_line&lt;/span&gt;
        &lt;span class="n"&gt;outputfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outputfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 12 Jun 2015 00:00:00 -0000</pubDate><guid>tag:,2015-06-12:regex-demo2_more.html</guid><category>regex</category></item><item><title>Python tricks</title><link>/python-tricks.html</link><description>&lt;p&gt;前些日子重读《Python Cookbook》，对书中的一些小技巧爱不释手，今天又看到这个&lt;a href="https://github.com/brennerm/PyTricks"&gt;PyTricks&lt;/a&gt;,决定将自己喜欢/常用的一些技巧摘录下来，加入到日常tricks里。&lt;/p&gt;
&lt;h1&gt;exec&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;exec("print('Hello ' + s)", {'s': 'World'})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;exec can be used to execute Python code during runtime.&lt;br /&gt;
variables can be handed over as a &lt;code&gt;dict&lt;/code&gt;(相当于环境)&lt;/p&gt;
&lt;h1&gt;calculator&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;使用字典搜索来实现 if..else 逻辑&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truediv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter an operator [OPTIONS: +, -, *, /]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;swicth在python中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f(x):
    return {
        &amp;#39;a&amp;#39;: 1,
        &amp;#39;b&amp;#39;: 2,
    }.get(x, 9)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;conditional function call&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;calling different functions with same arguments based on condition&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;dictionary get&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;returning None or default value, when key is not in dict&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;dict sort by value&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Sort a dictionary by its values with the built-in sorted() function and a &amp;#39;key&amp;#39; argument. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotten tomato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Sort using operator.itemgetter as the sort key instead of a lambda&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Sort dict keys by value&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;operator&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/operator.html"&gt;document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;让你更方便地使用函数式风格&lt;/p&gt;
&lt;h1&gt;tree&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;

&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;harold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chopper&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hunter2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;正则表达式&lt;/h1&gt;
&lt;h2&gt;灵活切割字符串&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;asdf fjdk; afed, fjek,asdf, foo&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;[;,\s]\s*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[&amp;#39;asdf&amp;#39;, &amp;#39;fjdk&amp;#39;, &amp;#39;afed&amp;#39;, &amp;#39;fjek&amp;#39;, &amp;#39;asdf&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;匹配和搜索&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Today is 11/27/2012. PyCon starts 3/13/2013.&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;datepat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(\d+)/(\d+)/(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;match1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#match1.groups() =&amp;gt;&amp;#39;NoneType&amp;#39; object has no attribute &amp;#39;groups&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;match2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#match.groups() =&amp;gt; (&amp;#39;11&amp;#39;, &amp;#39;27&amp;#39;, &amp;#39;2012&amp;#39;)&lt;/span&gt;
&lt;span class="n"&gt;match3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt;[(&amp;#39;11&amp;#39;, &amp;#39;27&amp;#39;, &amp;#39;2012&amp;#39;), (&amp;#39;3&amp;#39;, &amp;#39;13&amp;#39;, &amp;#39;2013&amp;#39;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;搜索和替换&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;datepat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(\d+)/(\d+)/(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\3-\1-\2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#更复杂的替换，sub的第一个参数可以是callback，默认传入match对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;时间和日期&lt;/h1&gt;
&lt;h2&gt;字符串转换为日期&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2012-09-20&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;文件IO&lt;/h1&gt;
&lt;h2&gt;读写文本文件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Read the entire file as a single string&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Iterate over the lines of the file&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# process line&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;########&lt;/span&gt;
&lt;span class="c1"&gt;# Write chunks of text data&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Redirected print statement&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;读写json&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ACME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;shares&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;542.23&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;读写csv&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stocks.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# process row&lt;/span&gt;
        &lt;span class="c1"&gt;#可以使用列名去访问每一行的数据。如，row[&amp;#39;Symbol&amp;#39;]&lt;/span&gt;

&lt;span class="c1"&gt;#写入&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Symbol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Volume&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;39.48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6/11/2007&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;9:36am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;181800&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AIG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;71.38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6/11/2007&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;9:36am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;195500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AXP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;62.58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6/11/2007&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;9:36am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;935000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stocks.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#如果你写入的每一行都是dict，只需要改变writer对象：f_csv = csv.DictWriter(f, headers)    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;可迭代对象&lt;/h1&gt;
&lt;h2&gt;循环中获取下标&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;元编程&lt;/h1&gt;
&lt;h2&gt;装饰器&lt;/h2&gt;
&lt;p&gt;wait&lt;/p&gt;
&lt;h2&gt;自省&lt;/h2&gt;
&lt;p&gt;检测一个对象是否包含某个属性：&lt;code&gt;if hasattr(obj, 'attr_name')&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brennerm/PyTricks"&gt;PyTricks&lt;/a&gt; ps：没有分类&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wklken/stackoverflow-py-top-qa"&gt;stackoverflow-py-top-qa&lt;/a&gt;  ps:分类很好&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python3-cookbook.readthedocs.org/"&gt;python3-cookbook&lt;/a&gt;  ps：分类不错&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 May 2015 00:00:00 -0000</pubDate><guid>tag:,2015-05-27:python-tricks.html</guid><category>regex</category></item><item><title>正则表达式之处理一组lrc听力文件</title><link>/regex-demo2.html</link><description>&lt;p&gt;我觉得可以写一个「室友需求」系列的文章了 ^_^&lt;/p&gt;
&lt;p&gt;工作缘故，室友时常会处理一些文本文件，手动编辑不胜其烦，于是我又可以有秀代码的机会啦！&lt;/p&gt;
&lt;p&gt;看着自己十几分钟写的代码，能在生产实际中被使用，并且给人家节约大量的时间，嘚瑟的不行啊简直！&lt;/p&gt;
&lt;h1&gt;需求描述&lt;/h1&gt;
&lt;p&gt;此次的任务是处理一批lrc文件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转化时间的格式，将[分钟:秒]转化为&lt;code&gt;秒&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每一个句子前头时间应当包含&lt;code&gt;始末&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输出txt格式的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;待处理文本&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[00:00.12]section 2.
[00:02.68]you will part of a radio programme about the opening of a new local sports shop.
[00:09.32]first you have some time to look at questions 11 to 16.
[00:39.64]now listen carefully and answer questions 11 to 16.
[00:48.24]now we go to Jane who is going to tell us about what&amp;#39;s happening in town this weekend.
[00:52.24]right,thanks Andrew,
[00:53.92]and now on to what&amp;#39;s new,
[00:56.48]and do we really need yet another sports shop in Bradcaster?
[01:01.24]well,most of you probably know Sports World-
[01:04.44]the branch of a Danish sports goods company that opened a few years ago-
[01:09.04]it&amp;#39;s attracted a lot of custom,
[01:11.36]and so the company has now decided to open another branch in the area.
[01:16.60]it&amp;#39;s going to be in the shopping centre to the west of Bradcaster,
[01:20.44]so that will be good news for all of you who&amp;#39;ve found the original shop in the north of the town hard to get to.
[01:27.12]i was invited to a special preview
[01:29.60]and i can promise you,this is the ultimate in sports retailing.
......
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;目标格式&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.12      2.68   section 2.
2.68      9.32   you will part of a radio programme about the opening of a new local sports shop.
9.32     39.64   first you have some time to look at questions 11 to 16.
39.64    48.24   now listen carefully and answer questions 11 to 16.
48.24    52.24   now we go to Jane who is going to tell us about what&amp;#39;s happening in town this weekend.
52.24    53.92   right,thanks Andrew,
53.92    56.48   and now on to what&amp;#39;s new,
56.48    61.24   and do we really need yet another sports shop in Bradcaster?
61.24    64.44   well,most of you probably know Sports World-
64.44    69.04   the branch of a Danish sports goods company that opened a few years ago-
69.04    71.36   it&amp;#39;s attracted a lot of custom,
71.36    76.60   and so the company has now decided to open another branch in the area.
76.60    80.44   it&amp;#39;s going to be in the shopping centre to the west of Bradcaster,
80.44    87.12   so that will be good news for all of you who&amp;#39;ve found the original shop in the north of the town hard to get to.
87.12    89.60   i was invited to a special preview
89.60    94.88   and i can promise you,this is the ultimate in sports retailing.
......
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;这种问题当然是用正则表达式来解决。比较目标文本格式和待处理文本格式，我们发现，上下两行间需要关联处理，而正则表达式一般是以一行为处理单位的。&lt;/p&gt;
&lt;p&gt;我把这个问题转化为列表迭代的问题。之后匹配替换。all in code。直接读代码吧&lt;/p&gt;
&lt;h1&gt;解决方案（Python版）&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt; &lt;span class="c1"&gt;#Get all regular files&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;minute:second change to second&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sec_str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_file_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;thetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;\[(\d{2}:.{5})\]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#match is list: [&amp;#39;00:00.12&amp;#39;,...]&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sec_strs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;min_sec_str&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;#再一次推导，使其成为新的格式，注意边界&lt;/span&gt;
        &lt;span class="n"&gt;new_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{:&amp;lt;6s}  {:&amp;gt;6s}   &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sec_str&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#最后一行是边界&lt;/span&gt;
        &lt;span class="c1"&gt;#单独添加最后一行&lt;/span&gt;
        &lt;span class="c1"&gt;#new_format.append(sec_strs[-1])#list本身被改变了&lt;/span&gt;
        &lt;span class="c1"&gt;#print new_format&lt;/span&gt;
        &lt;span class="c1"&gt;#exit()&lt;/span&gt;
    &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#后缀改为txt&lt;/span&gt;
    &lt;span class="n"&gt;out_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.txt&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;#行号标记&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;#最后一行不要&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;result_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_format&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#print result_line&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;format_file_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;#注意路径&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;code&gt;python3 two_line_time.py PATH lrc&lt;/code&gt; （PATH是你要处理的lrc文件的路径，请使用绝对路径!）&lt;/p&gt;
&lt;p&gt;室友说这段代码可能会挺有用，目前网上下载到的多是这类lrc，需要这样转化后才能被软件读取。&lt;/p&gt;
&lt;p&gt;在OS X 和ubuntu下测试都正常&lt;/p&gt;
&lt;p&gt;用得着的同学就自取吧~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 22 May 2015 00:00:00 -0000</pubDate><guid>tag:,2015-05-22:regex-demo2.html</guid><category>regex</category></item><item><title>正则表达式一例</title><link>/regex-demo.html</link><description>&lt;p&gt;前些日子读《精通正则表达式》读的起劲，每天早起读个把小时，兴趣盎然。&lt;/p&gt;
&lt;p&gt;正愁没实战场景，只每天在Vim里用用，颇为寂寞。&lt;/p&gt;
&lt;p&gt;前几天室友要处理一批类歌词文件（英文朗读？），需要清理其中的部分内容，手动操作很是繁琐，让我试着用代码帮着处理下。啊，这不正是使用正则的绝佳场所么&lt;/p&gt;
&lt;h1&gt;待处理文本&lt;/h1&gt;
&lt;p&gt;文本是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TPO_2102_L01

0   2.16    Listen to part of lecture in the history of science class.
2.16    11.2    OK, we&amp;#39;ve been talking about how throughout the history.        好的,我们已经讨论过历史的发展.
11.2    14.8    It was often difficult for people to give up ideas which have long been taken for granted as scientific truths, even if those ideas were false.     人们放弃一种已经被认定是科学的事实的念头非常困难,即使那个念头是不对的.
14.8    24.32   In astronomy, for example, the distinction between the solar system and the universe wasn&amp;#39;t clear until modern times.       拿天文学来举个例子,人们直到近代才将太阳系和宇宙的概念弄清楚. (第一题what&amp;#39;s the purpose of the lecture?)
24.32   32.04   The ancient Greeks believed that what we called the solar system was in fact the entire universe, and that the universe was geocentric.     古希腊认为宇宙就是我们现在所说的太阳系,而整个宇宙中,地球就是宇宙的中心.
32.04   43.0    Geocentric means Earth-centric, so the geocentric view holds that the Sun, the planets, and the stars, all revolve around the Earth which is stationary.
43.0    54.72   Of course, we now know that the planets including Earth revolve around the Sun, and that solar system is only a tiny part of the universe.      当然了,我们现在是知道所有的星球都围绕着太阳转,地球也是星球,而且太阳系只是宇宙的一小部分.

......
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;需求&lt;/h1&gt;
&lt;p&gt;某路径下有若干txt文件,清理掉文件中的中文，夹杂在中文中数字/英文/标点也一并清除&lt;/p&gt;
&lt;h1&gt;正则的视角&lt;/h1&gt;
&lt;p&gt;在正则的视角下的解决方案，大约是这样的，对于每个文件，从每一行的第一个中文字符，一直清除到行尾 （以行为基本单位）&lt;/p&gt;
&lt;h1&gt;解决方案（Python版）&lt;/h1&gt;
&lt;p&gt;直接上代码啦，当当当当&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt; &lt;span class="c1"&gt;#Get all regular files&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;zh_to_endline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;[\u4e00-\u9fa5].*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MULTILINE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#匹配从中文开始到行尾,多行模式&lt;/span&gt;
    &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;clean_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zh_to_endline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="c1"&gt;#clean_line = zh_to_endline.sub(&amp;quot;&amp;quot;,line) #返回替换完的行，如果没有替换则原文返回&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#input_file.seek(0) #移到文件头，覆盖掉&lt;/span&gt;
            &lt;span class="c1"&gt;#input_file.write(clean_content)&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#传递命令行参数 path&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#传递命令行参数 filetype&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上代码保存在clean_zh.py中&lt;/p&gt;
&lt;p&gt;使用：&lt;code&gt;python3 clean_zh.py PATH txt&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;使用python3运行，python2对unicode的支持不好&lt;/p&gt;
&lt;p&gt;函数写的很不纯，之后重构一下&lt;/p&gt;
&lt;p&gt;关于Python字符串的搜索和替换可以参考&lt;a href="http://python3-cookbook.readthedocs.org/zh_CN/latest/c02/p05_search_and_replace_text.html"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;发现这是个很棒的Code Kata（通过实际的编程练习来提升敏捷开发的技能）&lt;br /&gt;
于是决定写下其他语言的实现版本作为练习&lt;/p&gt;
&lt;p&gt;涉及的知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;li&gt;字符串(unicode)&lt;/li&gt;
&lt;li&gt;文件和目录&lt;/li&gt;
&lt;li&gt;函数(参数)&lt;/li&gt;
&lt;li&gt;命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="c1"&gt;#encoding=UTF-8&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downcase&lt;/span&gt;
  &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_with?filetype&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;zh_to_endline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/[\u4e00-\u9fa5].*/&lt;/span&gt; &lt;span class="c1"&gt;#匹配从中文开始到行尾&lt;/span&gt;
  &lt;span class="c1"&gt;#clean_content = str.sub(zh_to_endline, &amp;quot;&amp;quot;)&lt;/span&gt;
  &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;#file.each_line{|line| puts line.sub(zh_to_endline,&amp;quot;&amp;quot;)}&lt;/span&gt;
    &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#clean_content = contents.sub(zh_to_endline,&amp;quot;&amp;quot;)&lt;/span&gt;
    &lt;span class="n"&gt;clean_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zh_to_endline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#puts clean_content&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vg"&gt;$0&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;ruby clean_zh.rb PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ruby写起来似乎比Python还惬意~&lt;/p&gt;
&lt;h3&gt;Golang&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;path/filepath&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(?i)[&lt;/span&gt;&lt;span class="se"&gt;\u4e00&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="se"&gt;\u9fa5&lt;/span&gt;&lt;span class="s2"&gt;].*&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(?i)[&lt;/span&gt;&lt;span class="se"&gt;\u4e00&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="se"&gt;\u9fa5&lt;/span&gt;&lt;span class="s2"&gt;].*&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;clean_content&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceAllString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_content&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getpath&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;是索引，&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;是值&lt;/span&gt;
                &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;go run clean_zh.go PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Golang的语法糖好少！想使用Slices来收集过滤完的filename&lt;/p&gt;
&lt;h3&gt;Nodejs&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//use =G to formet js with javascript.vim&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;is_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 使用全局变量？之后使用闭包替换吧&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/[\u4e00-\u9fa5].*/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//等待io的返回，需要使用同步方法&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filter_filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;is_filetype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;filter_filenames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;code&gt;node clean_zh.js PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;js注意回调。回调之外想要控制顺序的话，用同步函数吧&lt;/p&gt;
&lt;h3&gt;Coffeescript&lt;/h3&gt;
&lt;p&gt;waiting&lt;/p&gt;
&lt;h3&gt;Bash&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;#cd /tmp  使之成为当前工作目录&lt;/span&gt;

&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="c1"&gt;#不能有空格 &lt;/span&gt;
&lt;span class="nv"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;
&lt;span class="nv"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="c1"&gt;#echo $filenames&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; filename in &lt;span class="nv"&gt;$filenames&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ .*txt &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c1"&gt;#注意空格&lt;/span&gt;
        &lt;span class="c1"&gt;#如何把$filename变为字符串&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import re;zh_to_endline = re.compile(r\&amp;quot;[\u4e00-\u9fa5].*\&amp;quot;);file = open(\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;);clean_content = zh_to_endline.sub(\&amp;quot;\&amp;quot;,file.read());print(clean_content);&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python3 &amp;gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;output_&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;#echo $filename&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;sh clean_zh PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原先想用sed的，发现它好像根本不支持unicode？？耍赖把文本处理的工作丢给Python了。&lt;/p&gt;
&lt;p&gt;bash真是dirty and quick&lt;/p&gt;
&lt;h3&gt;Scheme&lt;/h3&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;h3&gt;Prolog&lt;/h3&gt;
&lt;h3&gt;Lua&lt;/h3&gt;
&lt;h3&gt;Clojure&lt;/h3&gt;
&lt;h3&gt;Scala&lt;/h3&gt;
&lt;h3&gt;Perl&lt;/h3&gt;
&lt;h3&gt;Racket&lt;/h3&gt;
&lt;h3&gt;C&lt;code&gt;#&lt;/code&gt;&lt;/h3&gt;
&lt;h3&gt;C&lt;/h3&gt;
&lt;h3&gt;Java&lt;/h3&gt;
&lt;h3&gt;PHP&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 20 May 2015 00:00:00 -0000</pubDate><guid>tag:,2015-05-20:regex-demo.html</guid><category>regex</category></item><item><title>使用IPython Notebook来学习编程</title><link>/use-ipython-notebook.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果遇到了生活中不顺利的事情，你也只是需要一个新技巧了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我记下学习和做过的每件事。所以我很轻松可以回忆起自己的各种心理状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有你确定了你的目的，你才会应用你所学到的内容去实现你的目的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你知道以上三句话出自哪里，你会鄙视我三天的&lt;/p&gt;
&lt;p&gt;所以我当然不会说出它们的出处，可偏偏你又会去搜索，我偏偏又喜欢到不得不引用它们orz  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;近来不少小伙伴有兴趣学编程，时常会被要求给些建议什么的。&lt;/p&gt;
&lt;p&gt;从自己的经历说起~&lt;br /&gt;
大四去西安玩，途中快读完《Python for Data Analysis》,兴致盎然，不能入睡。书的作者也是Pandas的作者（Pandas是基于Python的结构化数据分析利器）。书中案例的操作性极强，精彩纷呈。当时在车上觉得大致掌握了Pandas。&lt;br /&gt;
而后从事的工作与数据分析关系不大。长时间没有接触它，等前段时间再想用它来从log(json格式)中做些分析/统计，却连如何将json数据加载到DataFrame都给忘了orz&lt;/p&gt;
&lt;p&gt;不知你是否也有过此类尴尬，以至心有戚戚。对于那些不是日常使用的工具，如何保证学完后，能随时取用当时学会的知识，而不是遗忘之后，每次都从头再学一遍。&lt;/p&gt;
&lt;p&gt;当时学会是远远不够的，我们更关心的是需要时拿得出来用。用兵一时&lt;/p&gt;
&lt;p&gt;我的学习偏偏又习惯由兴趣驱动，等到想用的时候，兴趣不在这里，让我硬着头皮去再学一遍，恐怕效率是不高的。&lt;/p&gt;
&lt;p&gt;于是我琢磨能否尽可能地留存学会的东西，或者复习时能快速进入掌握时的状态，我能想到的，且实践过行之有效的一些方法如下：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在书籍上批注，这样其实相当于给记忆打快照，日后再翻有助于勾起记忆&lt;/li&gt;
&lt;li&gt;一边学习，一遍在印象笔记做笔记&lt;/li&gt;
&lt;li&gt;学会某些知识后，即时梳理，整理为博客，给身边的小伙伴布道，将学会的东西表达出来，加深理解的同时，也方便自己此后穿梭回这个状态点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上几点便是我学习新东西时，习惯采用的方法，知识的留存率的确比采用它们之前提高不少，可也不尽如人意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一点实施起来并不方便，首先你得买纸质书，抛开价格贵，难搬家，易遗失不说，不少资料是根本没有纸质版的。我见过最好的替代方案是将素材拍到Noteself中，而后在其中做笔记，这是最近从一个小伙伴那儿学来的，笔记全部交给Noteself，从不丢失，随时可用，她的技能树极其茂盛，我想Noteself是很重要的原因，所谓善假于物。&lt;/li&gt;
&lt;li&gt;我大约是那种离开印象笔记就生活无法自理的人。但即便如此，它也有不令人满意的地方，首先没法用markdown，这样一来做技术相关的笔记是很不方便的（弥补方法是使用web版本的印象笔记，而后用chrome的markdown here插件转化markdown）。另外学习中做的笔记往往是很碎片的，如果不定期整理/合并很难以复用，可能比资料本身还乱。&lt;/li&gt;
&lt;li&gt;写博客是我现在最喜欢的一种学习方式，如果你还没开始，或不够坚定，建议看看刘未鹏的&lt;a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/"&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;，缺点的话，大约是它不适合容纳细碎的知识。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回到我们的编程话题。以上几点适用于大多数的学习，针对Python编程，我最近找到更好的方法，用了几天，觉得效率简直飞起。分享过来。&lt;/p&gt;
&lt;p&gt;杀器就是&lt;code&gt;IPython Notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ipython就已经够神器了，Tab键补全、魔术方法、与一堆科学计算库的搭配，以及强大的调试功能。&lt;/p&gt;
&lt;p&gt;我此前有写过一篇&lt;a href="http://wwj718.github.io/learning-ipython.html"&gt;ipython使用笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IPython Notebook是一种基于Web技术的交互式计算文档格式，同时也是计算工具（界面）&lt;/p&gt;
&lt;p&gt;notebook的页面都被保存为.ipynb 的类JSON文件格式。这也是 Notebook 最吸引人的地方，其中可以写python代码，可以写markdown文档，可以呈现图表...&lt;/p&gt;
&lt;p&gt;你还可以将写好的.ipynb上传到github，分发给小伙伴，拿到.ipynb的小伙伴在IPython Notebook中加载执行它，对你的工作便一目了然，你们近乎共享了编程的过程。你在.ipynb中加上批注和说明之后分发出去，它就成为绝佳的教学和交流的载体！&lt;/p&gt;
&lt;p&gt;此外我最近在用它学习Pandas，以便做edX tracking logs的数据分析工作，简直酸爽&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pydata/pydata-book"&gt;pydata-book&lt;/a&gt;是《Python for Data Analysis》一书中相应的示例源码。这本书我翻过，所以直接将其源码加载到ipyhton notebook里开撸，偶有不懂，通过交互式探索或是查阅书籍，很快就回忆起来了，而我又可以随时在其中注释批注，用markdown写心得或疑问，而所有这些，都连同可执行的代码保存在.ipynb里，&lt;/p&gt;
&lt;p&gt;如果中途我遇到问题，我完全可以将代码连同批注和疑惑发给别人（仅是.ipynb这个文件），对方完全看得到我的思维过程。他也在.ipynb中解答，之后回传给我即可，多便捷的交流过程啊！&lt;/p&gt;
&lt;h2&gt;我的Pandas学习环境&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~
mkdir pydata
cd pydata
git clone https://github.com/pydata/pydata-book
virtualenv pandas_env
source pandas_env/bin/activate
pip install ipython pyzmq jinja2 tornado jsonschema pylab
vim ~/.zshrc
#我用的是zsh，你用bash的话，对应的是 .bashrc
alias pandas=&amp;#39;cd ~/pydata/pydata-book&amp;amp;&amp;amp;source ~/pydata/pandas_env/bin/activate&amp;amp;&amp;amp;ipython notebook&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;退出重新进入shell，输入pandas，就进入学习环境了&lt;/p&gt;
&lt;p&gt;这样一来，我每次想学习的时候，直接在终端输入pandas就可以开始了！循着上次的注释和笔记，很快就可以进入学习状态&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas_shell" src="img/jishu/pandas_shell.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas_web1" src="img/jishu/pandas_web1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas_web2" src="img/jishu/pandas_web2.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;安装错误:&lt;code&gt;No module named zmq.eventloop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方案: &lt;code&gt;sudo pip install pyzmq --upgrade&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 20 May 2015 00:00:00 -0000</pubDate><guid>tag:,2015-05-20:use-ipython-notebook.html</guid><category>python</category></item><item><title>搜索技巧小结</title><link>/search-skill.html</link><description>&lt;h1&gt;网络搜索&lt;/h1&gt;
&lt;h2&gt;google&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;谷歌给你你想要的，百度给你它想给你的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First of all , please use Google &lt;/p&gt;
&lt;p&gt;无论对于技术人员搜索问题解决方案，或是科研人员进行学术搜索，又或是黑客们搜集目标资料，谷歌都是极好的选择。也许是这个星球上最好的选择:)&lt;/p&gt;
&lt;p&gt;下边小结下可能时常用到的一些技巧&lt;/p&gt;
&lt;h3&gt;与或非逻辑&lt;/h3&gt;
&lt;h4&gt;与&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;空格&lt;/code&gt;表示&lt;code&gt;与&lt;/code&gt;逻辑&lt;/p&gt;
&lt;h5&gt;示例&lt;/h5&gt;
&lt;p&gt;搜索所有包含&lt;code&gt;编程&lt;/code&gt;和&lt;code&gt;入门&lt;/code&gt;的网页&lt;br /&gt;
搜索：&lt;code&gt;编程 + 入门&lt;/code&gt; 或者 &lt;code&gt;编程 入门&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;另外&lt;/h5&gt;
&lt;p&gt;你如果要求&lt;code&gt;编程入门&lt;/code&gt;需要作为一个短语出现，那么需要这样搜索&lt;code&gt;"编程入门"&lt;/code&gt;，给短语加上双引号&lt;/p&gt;
&lt;h4&gt;或&lt;/h4&gt;
&lt;p&gt;用大写的&lt;code&gt;OR&lt;/code&gt;表示&lt;code&gt;或&lt;/code&gt;逻辑&lt;/p&gt;
&lt;h5&gt;示例&lt;/h5&gt;
&lt;p&gt;搜索所有包含&lt;code&gt;编程&lt;/code&gt;或&lt;code&gt;入门&lt;/code&gt;的网页&lt;br /&gt;
搜索：&lt;code&gt;编程 OR 入门&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;非&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt;表示&lt;code&gt;非&lt;/code&gt;逻辑&lt;/p&gt;
&lt;h5&gt;示例&lt;/h5&gt;
&lt;p&gt;搜索所有包含&lt;code&gt;编程&lt;/code&gt;而不含&lt;code&gt;入门&lt;/code&gt;的网页&lt;br /&gt;
搜索：&lt;code&gt;编程 - 入门&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;通配符、大小写、忽略字符&lt;/h3&gt;
&lt;p&gt;GOOGLE不支持通配符，如&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;等，只能做精确查询&lt;br /&gt;
GOOGLE对大小写不敏感&lt;br /&gt;
英文符号（如问号，句号，逗号等）无法成为搜索关键字&lt;/p&gt;
&lt;h3&gt;site，link，inurl，allinurl，intitle，allintitle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:URL&lt;/code&gt;:表示搜索结果局限于某个具体网站&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link:URL&lt;/code&gt;:返回所有链接到某个URL地址的网页,&lt;code&gt;link&lt;/code&gt;不能与其他语法相混合操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inurl:word1 word2&lt;/code&gt;:返回的网页链接中包含第一个关键字word1，后面的关键字word2则出现在链接中或者网页文档中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allinurl:word1 word2&lt;/code&gt;:语法返回的网页的链接中包含所有查询关键字。这个查询的对象只集中于网页的链接字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allintitle&lt;/code&gt;和&lt;code&gt;intitle&lt;/code&gt;的用法类似于上面的allinurl和inurl，只是后者对URL进行查询，而前者对网页的标题栏进行查询.即html里title之间的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;related:URL&lt;/code&gt;:用来搜索结构内容方面相似的网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache:URL&lt;/code&gt;:用来搜索GOOGLE服务器上某页面的缓存，这个功能同“网页快照”，通常用于查找某些已经被删除的死链接网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;用来显示与某链接相关的一系列搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;指定文件类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;filetype&lt;/code&gt;
举例：&lt;code&gt;filetype:pdf&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;PDF文档搜索&lt;/h3&gt;
&lt;p&gt;Google提供对PDF文档内文的检索&lt;br /&gt;
示例：搜索关于电子商务（ECOMMERCE）的PDF文档。&lt;br /&gt;
搜索：&lt;code&gt;inurl:pdf ecommerce&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;github&lt;/h2&gt;
&lt;p&gt;todo...&lt;/p&gt;
&lt;h1&gt;本地搜索&lt;/h1&gt;
&lt;h2&gt;ack&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ack is the better grep&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ack是为程序员量身定制的grep，号称"可以替代99%grep的工作",以更简洁清晰的命令&lt;/p&gt;
&lt;h3&gt;卖点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;速度快,因其只搜索有意义的东西。不会去搜索诸如.git和缓存之类的东西&lt;/li&gt;
&lt;li&gt;为源代码搜索而设计，更少的击键。write less do more&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;h4&gt;ubuntu&lt;/h4&gt;
&lt;p&gt;sudo apt-get install ack-grep&lt;/p&gt;
&lt;h4&gt;OS X&lt;/h4&gt;
&lt;p&gt;brew install ack&lt;/p&gt;
&lt;h3&gt;常用特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码搜索&lt;ul&gt;
&lt;li&gt;在指定类型文件中查找   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件查找&lt;/li&gt;
&lt;li&gt;支持正则&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;代码搜索&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ack-grep hello&lt;/code&gt; //默认是递归搜索(从当前目录开始)&lt;/p&gt;
&lt;h5&gt;在指定类型文件中查找&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ack-grep --python django&lt;/code&gt; #查找所有python文件中出现的django&lt;/p&gt;
&lt;p&gt;ack预定义了很多类型，可以用 --help-types 来查看，如果没有你想要的，也可以自定义。好比你的css是用Sass写的，只要在~/.ackrc 里增加一行：
&lt;code&gt;--type-add css=.scss&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;文件查找&lt;/h4&gt;
&lt;p&gt;ack也可查找文件，免去结合find和grep的麻烦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ack-grep -f hello.py    # 查找全匹配的文件
ack-grep -g hello.py$    # 查找正则匹配的文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些常用的参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; 不递归查找子目录 . &lt;code&gt;ack-grep -n note&lt;/code&gt; 只在当前目录下的文件里查找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; 忽略大小写. &lt;code&gt;ack-grep -i note&lt;/code&gt; 也会匹配 Note&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; 查找文件 . &lt;code&gt;ack-grep -f --css&lt;/code&gt; 列出所有的css文件。--x 等价于 --type=x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; 匹配文件名. &lt;code&gt;ack-grep -g note&lt;/code&gt; 会匹配所有文件名里包含note的文件 . &lt;code&gt;ack-grep -g hello.py$&lt;/code&gt;  查找正则匹配文件， 路径名也作为文件名的一部分！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt; [NUM] 输出上下文 . &lt;code&gt;ack-grep -C 5 note&lt;/code&gt; 会在上下各多输出5行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Q&lt;/code&gt; 不转义 . &lt;code&gt;ack-grep -Q 'note.url()'&lt;/code&gt; 不需要对点和括号进行转义了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;与Vim搭配&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mileszs/ack.vim"&gt;ack.vim&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/intl/zh-CN/search/about/insidesearch/tipstricks/basics.html"&gt;搜索技巧–搜索前沿–Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sciencenet.cn/blog-734884-667157.html"&gt;如何使用GOOGLE高级搜索技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 19 May 2015 00:00:00 -0000</pubDate><guid>tag:,2015-05-19:search-skill.html</guid><category>web</category></item><item><title>有趣的前端项目收集</title><link>/front-interesting.html</link><description>&lt;hr /&gt;
&lt;h1&gt;PhysicsJS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;你可以很方便地实现各种物理运动效果，比如碰撞、下落等。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wellcaffeinated/PhysicsJS"&gt;PhysicsJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wellcaffeinated.net/PhysicsJS/#demo-3"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;three.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Three.js 是一款运行在浏览器中的3D 引擎，你可以用它创建各种三维场景&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrdoob/three.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://carvisualizer.plus360degrees.com/threejs/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;D3.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;是一个用动态图形显示数据的JavaScript库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;impress.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在线演示工具  可视为web版的ppt 效果比ppt更酷&lt;/li&gt;
&lt;li&gt;&lt;a href="github.com/bartaz/impress.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bartaz.github.io/impress.js/#/bored"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;reveal.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;另一款在线演示工具&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.hakim.se/reveal-js/#/1"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;socket.io&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;socket.io 是一个为实时应用提供跨平台实时通信的库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Automattic/socket.io"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chat.socket.io/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Chart.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Chart.js是一个基于HTML5 canvas技术的开源图表绘制工具库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nnnick/Chart.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另外两个交互式图表&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ecomfe/echarts"&gt;echarts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://echarts.baidu.com/doc/example/map12.html"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/highslide-software/highcharts.com"&gt;highcharts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.highcharts.com/demo"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;gitbook&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可以借用该工具使用Github/Git和Markdown来制作精美的图书&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitbookIO/gitbook"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tyleradl.gitbooks.io/how-to-make-french-toast/introduction/README.html"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;iZhihu&lt;/h3&gt;
&lt;p&gt;我最近正在用gitbook做个东西，暂时起名iZhihu&lt;/p&gt;
&lt;h3&gt;需求描述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;知乎的搜索功能很弱,知乎的匹配机制非常糟糕，不只被一次吐槽了&lt;/li&gt;
&lt;li&gt;而我又十分喜欢和依赖它,从生活建议，出游策略，淘宝购物，第一个想到的都是知乎，有时候写作／微信／聊天 的时候，想到知乎里有趣的言论，想引用却很难找到，尤其是我这种收藏夹里有上千条资料的用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：使用爬虫爬取用户收藏资料，使用gitbook做成精美文档，支持搜索，支持导出pdf&lt;/p&gt;
&lt;p&gt;知乎的用户有极高的用户黏度，知乎的核心价值在高质量内容，可挖掘点是高质内容n可运用到那些地方  ps：其实最初想法就是为了自己方便囧&lt;/p&gt;
&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;微信聊天时，可搜索iZhihu公众号，根据搜索内容返回最佳匹配优质回答（来自用户收藏夹）&lt;/li&gt;
&lt;li&gt;用户可保存自己心爱的资料，聚散有时，知乎会挂，而我想永存这些资料，最好是可收藏易使用的精致版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;迭代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可搜索范围加大，诸如定向搜索大牛的答案&lt;/li&gt;
&lt;li&gt;可以建立各类分组，比如超过1000赞的，最佳吐槽之类，这种分类有些搜狗输入法匹配词汇的意味，个性化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;目前进度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;会使用gitbook&lt;/li&gt;
&lt;li&gt;能有爬虫爬取到知乎指定内容&lt;/li&gt;
&lt;li&gt;使用正则匹配搜索结果&lt;/li&gt;
&lt;li&gt;第一版做来自己用，mac下实现，直接使用grep来过滤搜索，打算整合进Alfred&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;node-webkit&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;允许开发者使用Web技术开发桌面应用&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rogerwang/node-webkit"&gt;github&lt;/a&gt;  用css写桌面程序&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zcbenz/nw-sample-apps"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;TimelineJS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;帮助你创建精美、可交互的时间轴&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NUKnightLab/TimelineJS"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://timeline.knightlab.com/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;togetherjs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;能为一个已经存在的网站增加实时协作特性，在线成员能看到对方的实时操作&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/togetherjs"&gt;github&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://togetherjs.com/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 24 Sep 2014 00:00:00 -0000</pubDate><guid>tag:,2014-09-24:front-interesting.html</guid><category>web</category></item><item><title>ipython使用笔记</title><link>/learning-ipython.html</link><description>&lt;p&gt;"给我一个强大而又灵活的文本编辑器（vim），一个交互式shell（IPython）以及一个语言（Python），我就能撬动整个世界。"&lt;/p&gt;
&lt;p&gt;将IPython用熟了，可以轻松在试验、编码、测试间 "无缝折腾"。&lt;/p&gt;
&lt;p&gt;"?" 和 "??" 是 IPython 中最常用的命令。&lt;/p&gt;
&lt;h2&gt;和shell交互&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在shell中使用python变量，加上$&lt;ul&gt;
&lt;li&gt;folder = 'data' , mkdir $folder &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;!command  ,执行shell命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path = &amp;quot;/var/www&amp;quot;
!echo $path
&amp;gt; /var/www
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;目录/书签&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%pwd: 显示当前工作目录。&lt;/li&gt;
&lt;li&gt;%cd: 切换工作目录。&lt;/li&gt;
&lt;li&gt;%bookmark: 工作目录书签。  (永久？)
cd 和 bookmark 配合起来用，非常方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%bookmark test #为当前目录定义书签
%bookmark www /var/www #为其他目录定义书签
%bookmark -l # 显示书签列表
%bookmark -d text #删除书签
cd -b www #使用书签跳转，可省略 -b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;书签跟别名的区别在于，它们会被自动持久化(写到.ipython里？)&lt;/p&gt;
&lt;h2&gt;edit&lt;/h2&gt;
&lt;p&gt;edit xx 进入文本 退出后执行文本中代码 默认使用vim,这样就可以跟外部文件沟通啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;edit hello.py
run hello
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;给ipython edit指定编辑器&lt;/h3&gt;
&lt;p&gt;eg：（我的mac下）&lt;br /&gt;
export EDITOR="/usr/local/bin/vim” &lt;/p&gt;
&lt;h3&gt;使编辑生效&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reload(hello)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;历史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%history: 显示历史。&lt;/li&gt;
&lt;li&gt;%hist: %history 别名。&lt;/li&gt;
&lt;li&gt;%dhist: 显示工作目录历史。&lt;/li&gt;
&lt;li&gt;%clear: 清除历史数据。&lt;/li&gt;
&lt;li&gt;%save: 保存输入命令到文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以将多个范围的输入数据保存到文件中。通常用于将交互环境中写的测试代码保存成源码文件。&lt;/p&gt;
&lt;p&gt;%save -r test.txt 33-34 36&lt;br /&gt;
保存33-34(闭区间)以及36行到当前目录下test.txt文件里&lt;br /&gt;
参数 -a 添加到结尾&lt;/p&gt;
&lt;h3&gt;自动设置ipython环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;写好ipython_context.py&lt;/li&gt;
&lt;li&gt;run ipython_context.py ,相关语句被导入执行，在上下文中&lt;/li&gt;
&lt;li&gt;dir()查看上下文变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;执行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%bg: 使用独立线程在后台执行。&lt;/li&gt;
&lt;li&gt;%rep: 获取上一次命令的输出，或提取某个历史命令。&lt;/li&gt;
&lt;li&gt;%run: 用来执行一个脚本，并将相关对象导入交互环境上下文。使用起来类似于熟悉的python test.py&lt;ul&gt;
&lt;li&gt;run命令还可以附加选项，常用的有-t选项，这个会在脚本执行完后，打印出执行的cpu timings。如果指定了-t选项，后面可以跟一个-Nx，x代表一个数字。表示重复执行x次。&lt;/li&gt;
&lt;li&gt;还有一个-p选项，这个选项会开启python profiler，从而打印出详细的执行时间、函数调用等等信息供优化参考。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;%runlog: 执行记录文件中命令。这对于 "恢复现场" 是非常有帮助地。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;记录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%logstart: 启动记录器。&lt;/li&gt;
&lt;li&gt;%logon: 开始记录。&lt;/li&gt;
&lt;li&gt;%logoff: 暂停记录。&lt;/li&gt;
&lt;li&gt;%logstate: 查看记录状态。&lt;/li&gt;
&lt;li&gt;%logstop: 关闭记录器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先需要用 %logstart 启动记录器，中间可以随时使用 %logon/%logoff 启动或暂停，末了别忘了关闭记录器，确保记录信息写到磁盘文件中。&lt;br /&gt;
%logstart 启动后会连同该命令之前的历史记录一起保存，因此要想有个干净起点的话，最好调用 %clear 清理现场&lt;/p&gt;
&lt;h2&gt;显示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%p: Python print 函数的缩写。&lt;/li&gt;
&lt;li&gt;%pfile: 查看对象所在源码文件。&lt;/li&gt;
&lt;li&gt;%pycat: 查看源代码文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%psearch: 在当前上下文的命名空间中进行模糊搜索。&lt;/li&gt;
&lt;li&gt;%psearch -i t&lt;em&gt;.S&lt;/em&gt;   其中 参数 -i 忽略大小写&lt;/li&gt;
&lt;li&gt;输入 CTRL + R 搜索历史命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%prun: 使用 profile 获取代码执行的性能统计。&lt;/li&gt;
&lt;li&gt;%time: 获取代码执行时间。&lt;/li&gt;
&lt;li&gt;%timeit: 通过多次循环，获得最佳的执行时间评测。 这个命令用来测试一条命令执行的时间，一般而且，会重复100次运行这个命令，然后取出最好的3个结果取平均值。&lt;ul&gt;
&lt;li&gt;%timeit [x*x for x in range(100000)]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;调试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%debug: 激活交互调试模式。&lt;/li&gt;
&lt;li&gt;%pdb: 激活 pdb 调试模式，在引发异常时自动切入 pdb 调试命令行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;熟悉 pdb 是必须的，别老想着用 print，assert 也比那个强些。&lt;/p&gt;
&lt;h2&gt;宏 macro&lt;/h2&gt;
&lt;p&gt;宏允许用户为一段代码定义一个名字&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%autoindent: 自动缩进开关。&lt;/li&gt;
&lt;li&gt;%automagic: 打开时可省略 %magic 前的百分号。&lt;/li&gt;
&lt;li&gt;%colors: 彩色方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一次运行ipython时会自动生成配置目录 $HOME/.ipython&lt;/p&gt;
&lt;h2&gt;notebook&lt;/h2&gt;
&lt;p&gt;ipython notebook。一个基于web的ipython shell！&lt;/p&gt;
&lt;p&gt;notebook使用起来和ipython差不多，不过修改起来方便得多，并且可以建多个notebook，所以使用起来各种方便&lt;/p&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;%reset: 重置 IPython，清理相关环境对象，但历史信息被保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.kochiya.me/www/posts/Ipython!.html"&gt;Ipython!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyist.diandian.com/?tag=ipython"&gt;IPython Magic Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 -0000</pubDate><guid>tag:,2014-09-03:learning-ipython.html</guid><category>ipython</category></item><item><title>Mixin技术学习笔记</title><link>/learning-python-mixin.html</link><description>&lt;p&gt;折腾edX和Django Rest Framework的时候都看到Mixin的身影，决定弄清楚它。&lt;/p&gt;
&lt;h2&gt;解释&lt;/h2&gt;
&lt;p&gt;Mixin即mix in，就是混入的意思。在不改变原对象的情况下对其进行扩展. 在运行期间,动态改变类的基类或类的方法&lt;br /&gt;
利用Mixin我们还可以增加无数总特征，而无需对已有代码作太大改动。实现无痛扩展&lt;/p&gt;
&lt;p&gt;和&lt;code&gt;多重继承&lt;/code&gt;类似.&lt;/p&gt;
&lt;p&gt;但通常主类和 Mixin 类本身不是 is-a 的关系，混入 Mixin 类是为了添加某些（可选的）功能。自由地混入 Mixin 类就可以灵活地为被混入的类添加不同的功能。&lt;/p&gt;
&lt;p&gt;传统的「接口」概念中并不包含实现，而 Mixin 包含实现。Mixin 提供了（默认）实现&lt;/p&gt;
&lt;p&gt;wu：是为了额外获得方法？&lt;/p&gt;
&lt;p&gt;Mixin的好处是可以为主类添加任意多的Mixin来实现多态&lt;/p&gt;
&lt;h2&gt;QuickStart&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GiftMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_gift_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotGiftMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_gift_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PareMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pare&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HuskMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Husk&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Apple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PareMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Orange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HuskMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotGiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PareMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Banana&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotGiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HuskMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样水果就知道自己的种类和特性啦&lt;/p&gt;
&lt;h2&gt;何时用&lt;/h2&gt;
&lt;p&gt;There are two main situations where mixins are used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You want to provide a lot of optional features for a class.&lt;/li&gt;
&lt;li&gt;You want to use one particular feature in a lot of different classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;摘自&lt;a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful"&gt;what-is-a-mixin-and-why-are-they-useful&lt;/a&gt;这篇回答，就是说当一个功能特性被很多个类用到时，或者一个类需要很多功能特性时&lt;/p&gt;
&lt;h2&gt;demo&lt;/h2&gt;
&lt;h3&gt;&lt;a href="http://werkzeug.pocoo.org/docs/0.9/wrappers/"&gt;werkzeug中Request / Response&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;答主随后举了&lt;a href="http://werkzeug.pocoo.org/docs/0.9/wrappers/"&gt;werkzeug中Request / Response&lt;/a&gt;的例子&lt;/p&gt;
&lt;p&gt;If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AcceptMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ETagRequestMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserAgentMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AuthorizationMixin&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AcceptMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ETagRequestMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserAgentMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AuthorizationMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://www.django-rest-framework.org/tutorial/3-class-based-views.html"&gt;django-rest-framework.org/tutorial/3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;许多公共行为在REST framework's mixin类中都实现了.方便的组合与重用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;snippets.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Snippet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;snippets.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SnippetSerializer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generics&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SnippetList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListModelMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModelMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultipleObjectAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Snippet&lt;/span&gt;
     &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SnippetSerializer&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MultipleObjectAPIView构建了view, 然后加上了inListModelMixin和CreateModelMixin.&lt;/p&gt;
&lt;p&gt;基类提供了核心功能，mixin类提供了 .list() 和 .create() 动作。然后显式的把 get 和 post 方法与合适的动作绑定在一起。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20778853"&gt;Mixin是什么概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/tutorial/3-class-based-views.html"&gt;django-rest-framework.org/tutorial/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful"&gt;what-is-a-mixin-and-why-are-they-useful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/gzlaiyonghao/article/details/1656969"&gt;Mixin 扫盲班&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 -0000</pubDate><guid>tag:,2014-09-03:learning-python-mixin.html</guid><category>python</category></item><item><title>用函数式风格写python</title><link>/python-functional.html</link><description>&lt;h2&gt;缘起&lt;/h2&gt;
&lt;p&gt;定制edx的过程中，需要自己去筛选处理不少数据，大多是直接从mongo中挖出。 大部分的工作都可以抽象描述成按条件筛选出一个数据集的子集，数据集包括courses(课程对象集合),commentThread(论坛帖子)，comment（帖子评论）,courseInfo（课程公告），这些数据的结构都极其相似，都是类列表数据（跟操作list基本一样）， 恰好前段时间一直在关注函数式，也在学习Scheme，所以自然想到用函数式风格处理list是最方便的了。&lt;/p&gt;
&lt;p&gt;一试，果不其然。&lt;/p&gt;
&lt;p&gt;高阶函数提高了程序的模块性。比如使用一个高阶函数来实现排序，可以使得我们使用不同的条件(函数)来排序，这就将排序条件和排序过程清楚地划分开来。很容易写函数来实现插拔。&lt;/p&gt;
&lt;p&gt;具体使用中，比如筛选过程使用高阶函数(def course_filter)来写，之后的筛选条件都写成filter_by_xx形式:filter_by_name/filter_by_subject,清晰明了，提高代码复用性，也导致了良好的一致性，进而使可读性提高。&lt;/p&gt;
&lt;p&gt;使用函数风格来写函数，具体的 理念/原则 可以通过搜索函数式编程找到，其中一些比较关键的地方:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数是"一等公民",使用高阶函数&lt;/li&gt;
&lt;li&gt;尽量不要产生"副作用"&lt;/li&gt;
&lt;li&gt;函数只是返回新的值，不修改变量.&lt;/li&gt;
&lt;li&gt;引用透明(确定性),任何时候只要参数相同，引用函数所得到的返回值总是相同的。&lt;/li&gt;
&lt;li&gt;函数应该像管道&lt;/li&gt;
&lt;li&gt;把函数当成变量来用，关注于描述问题而不是怎么实现，这样可以让代码更易读&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;函数式编程的几个技术&lt;/h2&gt;
&lt;p&gt;其实在python中以下几个东西基本也可以用for(列表推导)来做，不过列表推导不是模块化的，倾向于一次性使用、&lt;/p&gt;
&lt;h3&gt;map&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#列表长度&lt;/span&gt;
&lt;span class="n"&gt;name_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coolshell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name_len&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 [3, 4, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的代码是在描述要干什么，而不是怎么干  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#首字母大写&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;upper_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coolshell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 [&amp;#39;HAO&amp;#39;, &amp;#39;CHEN&amp;#39;, &amp;#39;COOLSHELL&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#求一组数据的平方数&lt;/span&gt;
&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;reduce&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#求和 相当于：((((1+2)+3)+4)+5) ）&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#数组中正数的平均值&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;positive_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;positive_num&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#避免了变量倒来倒去逻辑&lt;/span&gt;
&lt;span class="c1"&gt;#代码变成了在描述你要干什么，而不是怎么去干。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;map函数的实现(js)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var map = function (mappingFunction, list) {
  var result = [];
  forEach(list, function (item) {
    result.push(mappingFunction(item));
  });
  return result;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;filter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[6,7]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#是否是成年人&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;age_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[18,19]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以作为高阶函数的参数,模块化，可插拔&lt;/p&gt;
&lt;h2&gt;zip&lt;/h2&gt;
&lt;p&gt;zip()是Python的一个内建函数，它接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个tuple（元组），然后返回由这些tuples组成的list（列表）&lt;/p&gt;
&lt;p&gt;若传入参数的长度不等，则返回list的长度和参数中长度最短的对象相同。利用*号操作符，可以将list unzip（解压）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;zipped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[(1, 4), (2, 5), (3, 6)]&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[(1, 4), (2, 5), (3, 6)]&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;zipped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[(1, 2, 3), (4, 5, 6)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;sorted和groupby&lt;/h3&gt;
&lt;h4&gt;sorted&lt;/h4&gt;
&lt;p&gt;sorted([...],key = fuc) &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[1,2,3,4,5,6]&lt;/span&gt;

&lt;span class="c1"&gt;#reverse：注明升序还是降序，True--降序，False--升序（默认）&lt;/span&gt;
&lt;span class="c1"&gt;#fuc 经常使用lambda&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;groupby&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abbcdddef&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ee&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ff&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意先排序(sorted),groupby("abbca")中前后两个a不会连在一起。&lt;/p&gt;
&lt;p&gt;groupby(list,func)的返回值(i,j)，i是func的计算结果；j是一个迭代器，j的内容是经过func计算值相同的lst中的元素；  &lt;/p&gt;
&lt;p&gt;本质是mapreduce  所以记不住全局,只有一个交换空间，所以必须相邻&lt;/p&gt;
&lt;h3&gt;pipeline&lt;/h3&gt;
&lt;p&gt;pipeline 管道借鉴于Unix Shell的管道操作——把若干个命令串起来(他的设哲学就是KISS – 让每个功能就做一件事，并把这件事做到极致)，前面命令的输出成为后面命令的输入，如此完成一个流式计算。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#1）找出偶数。&lt;/span&gt;
&lt;span class="c1"&gt;#2）乘以3&lt;/span&gt;
&lt;span class="c1"&gt;#3）转成字符串返回&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply_by_three&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Number: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;even_filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;multiply_by_three&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;convert_to_string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pipeline_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#reduce有两个列表时怎么处理？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;高阶函数&lt;/h3&gt;
&lt;p&gt;python中，高阶函数常常写作装饰器(Decorator)，可以参考之前的一篇&lt;a href="http://wwj718.github.io/learning-python-decorator.html"&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如陈浩在博客中说的：我们不用太纠结是不是我们的程序就是OO，就是functional的，我们重要的品味其中的味道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体的使用 map filter groupby sorted (信息隐藏，对外True/False) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kachayev/fn.py"&gt;fn.py&lt;/a&gt; Functional programming in Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JulienPalard/Pipe"&gt;Pipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cyberdelia/django-pipeline"&gt;django-pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kvalle/diy-lisp"&gt;diy-lisp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/10822.html"&gt;函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html"&gt;函数式编程初探&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 -0000</pubDate><guid>tag:,2014-09-03:python-functional.html</guid><category>python</category></item><item><title>RESTful Api设计</title><link>/RESTful-Api.html</link><description>&lt;h1&gt;拆分资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;”资源“应该是个名词&lt;/li&gt;
&lt;li&gt;内部数据模型和资源对应起来&lt;/li&gt;
&lt;li&gt;不需要把它们一对一的都暴露出来。隐藏内部资源，暴露必需的外部资源。&lt;/li&gt;
&lt;li&gt;一旦定义好了要暴露的资源，你可以定义资源上允许的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET /blog # 获取blog列表
GET /blog/12 # 查看某个具体的blog
POST /blog # 新建一个blog
PUT /blog/12 # 更新blog 12.
DELETE /blog/12 #删除blog 12
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;REST的好处在于可以充分利用http的强大实现对资源的CURD功能。而这里你只需要一个endpoint：/blog,再没有其他什么命名规则和url规则了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;处理关联&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET /tickets/12/messages- Retrieves list of messages for ticket #12
GET /tickets/12/messages/5- Retrieves message #5 for ticket #12
POST /tickets/12/messages- Creates a new message in ticket #12
PUT /tickets/12/messages/5- Updates message #5 for ticket #12
PATCH /tickets/12/messages/5- Partially updates message #5 for ticket #12
DELETE /tickets/12/messages/5- Deletes message #5 for ticket #12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这种关联和资源独立，那么我们可以在资源的输出表示中保存相应资源的endpoint。然后API的使用者就可以通过点击链接找到相关的资源。如果关联和资源联系紧密。资源的输出表示就应该直接保存相应资源信息&lt;/p&gt;
&lt;h1&gt;使用SSL&lt;/h1&gt;
&lt;p&gt;使用SSL可以减少鉴权的成本：你只需要一个简单的令牌（token）就可以鉴权了，而不是每次让用户对每次请求签名。&lt;/p&gt;
&lt;h1&gt;文档&lt;/h1&gt;
&lt;p&gt;文档应该有展示请求和输出的例子：或者以点击链接的方式或者通过curl的方式&lt;br /&gt;
文档中应该有关于何时弃用某个API的时间表以及详情&lt;/p&gt;
&lt;h1&gt;结果过滤，排序，搜索&lt;/h1&gt;
&lt;p&gt;url最好越简短越好，和结果过滤，排序，搜索相关的功能都应该通过参数实现&lt;/p&gt;
&lt;p&gt;get /tickekts state=open&lt;/p&gt;
&lt;h1&gt;限制API返回值的域&lt;/h1&gt;
&lt;p&gt;使用fields查询参数来限制返回的域例如：&lt;/p&gt;
&lt;p&gt;GET /tickets fields=id,subject,customer_name,updated_at&amp;amp;state=open&amp;amp;sort=-updated_at&lt;/p&gt;
&lt;h1&gt;只提供json作为返回格式&lt;/h1&gt;
&lt;p&gt;好读好用，逆袭xml成功&lt;/p&gt;
&lt;h1&gt;API的输入数据格式&lt;/h1&gt;
&lt;p&gt;使用json&lt;br /&gt;
很多的API使用url编码格式：就像是url查询参数的格式一样：单纯的键值对。这种方法简单有效，但是也有自己的问题：它没有数据类型的概念。这使得程序不得不根据字符串解析出布尔和整数,而且还没有层次结构。&lt;br /&gt;
如果API本身就很简单，那么使用url格式的输入没什么问题。但对于复杂的API你应该使用json。或者干脆统一使用json。&lt;br /&gt;
注意使用json传输的时候，要求请求头里面加入：Content-Type：application/json&lt;/p&gt;
&lt;h1&gt;分页&lt;/h1&gt;
&lt;p&gt;推荐将分页信息放到link header里面：&lt;br /&gt;
http://tools.ietf.org/html/rfc5988#page-6。&lt;/p&gt;
&lt;h1&gt;鉴权 Authentication&lt;/h1&gt;
&lt;p&gt;restful API是无状态的也就是说用户请求的鉴权和cookie以及session无关，每一次请求都应该包含鉴权证明。&lt;br /&gt;
通过使用ssl，可以不用每次都提供用户名和密码：我们可以给用户返回一个随机产生的token。这样可以极大的方便使用浏览器访问API的用户。这种方法适用于用户可以首先通过一次用户名-密码的验证并得到token，并且可以拷贝返回的token到以后的请求中。如果不方便，可以使用OAuth 2来进行token的安全传输。&lt;/p&gt;
&lt;h1&gt;缓存&lt;/h1&gt;
&lt;p&gt;HTTP提供了自带的缓存框架。你需要做的是在返回的时候加入一些返回头信息&lt;/p&gt;
&lt;h1&gt;出错处理&lt;/h1&gt;
&lt;p&gt;就像html错误页面能够显示错误信息一样，API 也应该能返回可读的错误信息–它应该和一般的资源格式一致。&lt;br /&gt;
API应该始终返回相应的状态码，以反映服务器或者请求的状态。&lt;br /&gt;
API的错误码可以分为两部分，400系列和500系列，400系列表明客户端错误：如错误的请求格式等。500系列表示服务器错误。以json形式返回。错误应该包含以下信息：一个有用的错误信息，一个唯一的错误码，以及任何可能的详细错误描述。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;code&amp;quot; : 1234,
  &amp;quot;message&amp;quot; : &amp;quot;Something bad happened :-(&amp;quot;,
  &amp;quot;description&amp;quot; : &amp;quot;More details about the error here&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;附录：HTTP 状态码&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 200 ok  - 成功返回状态，对应，GET,PUT,PATCH,DELETE.
 201 created  - 成功创建。
 304 not modified   - HTTP缓存有效。
 400 bad request   - 请求格式错误。
 401 unauthorized   - 未授权。
 403 forbidden   - 鉴权成功，但是该用户没有权限。
 404 not found - 请求的资源不存在
 405 method not allowed - 该http方法不被允许。
 410 gone - 这个url对应的资源现在不可用。
 415 unsupported media type - 请求类型错误。
 422 unprocessable entity - 校验错误时用。
 429 too many request - 请求过多。
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;示例&lt;/h1&gt;
&lt;p&gt;github的api设计得非常好&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/41233/"&gt;RESTful API 设计最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-28:RESTful-Api.html</guid><category>RESTful</category></item><item><title>HTTP相关</title><link>/about-HTTP.html</link><description>&lt;h1&gt;HTTP协议&lt;/h1&gt;
&lt;p&gt;（参考维基百科）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;协议概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准&lt;/li&gt;
&lt;li&gt;通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口。在用户代理和源服务器中间可能存在多个“中间层”，比如代理、网关或者隧道。&lt;/li&gt;
&lt;li&gt;HTTP假定其下层协议提供可靠的传输&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;请求应答过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。&lt;/li&gt;
&lt;li&gt;HTTP服务器则在那个端口监听客户端的请求。&lt;/li&gt;
&lt;li&gt;一旦收到请求，服务器会向客户端返回一个状态，比如"HTTP/1.1 200 OK"，以及返回的内容，如请求的文件、错误消息等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;请求信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件。&lt;/li&gt;
&lt;li&gt;（请求）头，&lt;/li&gt;
&lt;li&gt;例如Accept-Language: en&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;其他消息体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请求行和标题必须以&lt;CR&gt;&lt;LF&gt;作为结尾。空行内必须只有&lt;CR&gt;&lt;LF&gt;而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。&lt;/p&gt;
&lt;h2&gt;请求方法&lt;/h2&gt;
&lt;p&gt;HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OPTIONS：这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用'*'来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。&lt;/li&gt;
&lt;li&gt;HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部份。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。&lt;/li&gt;
&lt;li&gt;GET：向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法&lt;/li&gt;
&lt;li&gt;POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。&lt;/li&gt;
&lt;li&gt;PUT：向指定资源位置上传其最新内容。&lt;/li&gt;
&lt;li&gt;DELETE：请求服务器删除Request-URI所标识的资源。&lt;/li&gt;
&lt;li&gt;TRACE：回显服务器收到的请求，主要用于测试或诊断。&lt;/li&gt;
&lt;li&gt;CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。&lt;/li&gt;
&lt;li&gt;此外  PATCH（由RFC5789指定的方法）:用于将局部修改应用到资源。
方法名称是区分大小写  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。&lt;/p&gt;
&lt;p&gt;HTTP服务器至少应该实现GET和HEAD方法  &lt;/p&gt;
&lt;h3&gt;安全方法&lt;/h3&gt;
&lt;p&gt;对于GET和HEAD方法而言，除了进行获取资源信息外，这些请求不应当再有其他意义。&lt;/p&gt;
&lt;h3&gt;副作用&lt;/h3&gt;
&lt;p&gt;若干次请求的副作用与单次请求相同，那么这些请求方法就能够被视作“幂等”的。GET，HEAD，PUT和DELETE方法都有这样的幂等属性，同样由于根据协议，OPTIONS，TRACE也是幂等的。&lt;/p&gt;
&lt;h3&gt;状态码&lt;/h3&gt;
&lt;p&gt;所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1xx消息——请求已被服务器接收，继续处理&lt;/li&gt;
&lt;li&gt;2xx成功——请求已成功被服务器接收、理解、并接受&lt;/li&gt;
&lt;li&gt;3xx重定向——需要后续操作才能完成这一请求&lt;/li&gt;
&lt;li&gt;4xx请求错误——请求含有词法错误或者无法被执行&lt;/li&gt;
&lt;li&gt;5xx服务器错误——服务器在处理某个正确请求时发生错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;协议例子&lt;/h3&gt;
&lt;p&gt;下面是一个HTTP客户端与服务器之间会话的例子，运行于www.google.com，端口80&lt;/p&gt;
&lt;h4&gt;客户端请求：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET / HTTP/1.1
Host:www.google.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（末尾有一个空行。第一行指定方法、资源路径、协议版本；第二行是在1.1版里必带的一个header作用指定主机）&lt;/p&gt;
&lt;h4&gt;服务器应答：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Content-Length: 3059
Server: GWS/2.0
Date: Sat, 11 Jan 2003 02:44:04 GMT
Content-Type: text/html
Cache-control: private
Set-Cookie: PREF=ID=73d4aef52e57bae9:TM=1042253044:LM=1042253044:S=SMCc_HRPCQiqy
X9j; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/; domain=.google.com
Connection: keep-alive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（紧跟着一个空行，并且由HTML格式的文本组成了Google的主页）&lt;/p&gt;
&lt;h2&gt;中文译名问题&lt;/h2&gt;
&lt;p&gt;HTTP在中国大陆被翻译为“超文本传输协议”&lt;br /&gt;
“transfer”表达的是“（表述状态的）转移”（Representational State Transfer）&lt;/p&gt;
&lt;h1&gt;调试/测试&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/httpbin"&gt;httpbin&lt;/a&gt;  替代curl&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cn.python-requests.org/zh_CN/latest/"&gt;requests&lt;/a&gt;  python处理http&lt;/li&gt;
&lt;li&gt;使用chrome自带调试工具(F12)&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-28:about-HTTP.html</guid><category>web</category></item><item><title>理解RESTful架构</title><link>/about-RESTful.html</link><description>&lt;p&gt;关于这个话题，读过最好的中文资料是阮一峰老师博客上的&lt;a href="http://www.ruanyifeng.com/blog/2011/09/restful.html"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下做些摘录，方便自己查看，想理解RESTful架构架构，建议翻阅上头的文章。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;解决什么问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;网站即软件&lt;/li&gt;
&lt;li&gt;这种"互联网软件"具有高延时（high latency）、高并发等特点。&lt;/li&gt;
&lt;li&gt;RESTful架构，就是目前最流行的一种互联网软件架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;顾名思义&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;REST，即&lt;code&gt;Representational State Transfer&lt;/code&gt;的缩写。阮一峰老师对这个词组的翻译是&lt;code&gt;表现层状态转化&lt;/code&gt;。如果一个架构符合REST原则，就称它为RESTful架构。&lt;/li&gt;
&lt;li&gt;要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;逐词分析&lt;/h1&gt;
&lt;h2&gt;资源（Resources）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;REST的名称"表现层状态转化"中，省略了主语。"表现层"其实指的是"资源"（Resources）的"表现层"。&lt;/li&gt;
&lt;li&gt;所谓"资源"，就是网络上的一个实体，或者说是网络上的一个具体信息。&lt;/li&gt;
&lt;li&gt;"资源"是具体的实在。你可以用一个URI（统一资源定位符）指向它&lt;/li&gt;
&lt;li&gt;注：uri是定位关键，在后端视角来看（django-restful-framework），框架要把资源（数据)映射到uri（url）上&lt;/li&gt;
&lt;li&gt;注2：资源可能是分布式的，使用超链接来连接它们&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;表现层（Representation）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;"资源"是一种信息实体，它可以有多种外在表现形式。我们把"资源"具体呈现出来的形式，叫做它的"表现层"（Representation）。&lt;/li&gt;
&lt;li&gt;而URI应该只代表"资源"的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;状态转化（State Transfer）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。&lt;/li&gt;
&lt;li&gt;互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。客户端想要操作服务器，必须通过某种手段，让服务器端发生"状态转化"（State Transfer）。而这种转化是建立在表现层之上的，所以就是"表现层状态转化"。&lt;/li&gt;
&lt;li&gt;HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;综述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;每一个URI代表一种资源；&lt;/li&gt;
&lt;li&gt;客户端和服务器之间，传递这种资源的某种表现层；&lt;/li&gt;
&lt;li&gt;客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;误区&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;最常见的一种设计错误，就是URI包含动词. "资源"表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-28:about-RESTful.html</guid><category>RESTful</category></item><item><title>计算机学习资源汇总</title><link>/free-programming.html</link><description>&lt;p&gt;与大家分享～&lt;/p&gt;
&lt;h2&gt;入口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/free-programming-books-zh_CN"&gt;free-programming-books-zh_CN&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bayandin/awesome-awesomeness"&gt;awesome-awesomeness&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/kahun/awesome-sysadmin"&gt;Awesome Sysadmin&lt;/a&gt; Awesome系列都很帅，可以作为资源入口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;优质IT网站/博客&lt;/h2&gt;
&lt;h4&gt;网站&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jianshu.io/collections"&gt;jianshu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/news"&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://group.yeeyan.org/hackernews"&gt;hackernews汉化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://news.dbanotes.net/"&gt;Startup News&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.v2ex.com/"&gt;v2ex&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/"&gt;伯乐在线&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/cn/opensource/os-django-mongo/"&gt;ibm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/"&gt;medium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;博客&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mindhacks.cn/"&gt;刘未鹏&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/"&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/"&gt;酷壳&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.vimer.cn/"&gt;vimer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://beiyuu.com/"&gt;beiyuu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.ryanye.me/"&gt;ryanye&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://haoluobo.com/"&gt;天地一沙鸥&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://foofish.net/"&gt;foofish&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dmyz.org/"&gt;动漫驿站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.yinwang.org/"&gt;yinwang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.codingnow.com/"&gt;yunfeng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zhs/blog"&gt;byvoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cppblog.com/vczh/"&gt;vczh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pycoders-weekly-chinese.readthedocs.org/en/latest/"&gt;pycoders-weekly-zh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bixly.com/blog/"&gt;django方面优质博客&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/lzjun567/note"&gt;python note&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;零碎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-27:free-programming.html</guid><category>web</category></item><item><title>coffeescript语法学习笔记</title><link>/js-coffeescript.html</link><description>&lt;p&gt;http://coffeescript.org/  官网&lt;/p&gt;
&lt;h2&gt;语法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coffee          js  
@, this       this


# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -&amp;gt; x * square x

# Functions:
square = (x) -&amp;gt; x * x

# Array comprehensions:
cubes = (math.cube num for num in list)

fill = (container, liquid = &amp;quot;coffee&amp;quot;) -&amp;gt;
  &amp;quot;Filling the #{container} with #{liquid}...&amp;quot;


$(&amp;#39;.account&amp;#39;).attr class: &amp;#39;active&amp;#39;  
对应jq
$(&amp;#39;.account&amp;#39;).attr({
  &amp;quot;class&amp;quot;: &amp;#39;active&amp;#39;
});

alert food for food in [&amp;#39;toast&amp;#39;, &amp;#39;cheese&amp;#39;, &amp;#39;wine&amp;#39;]

countdown = (num for num in [10..1])

yearsOld = max: 10, ida: 9, tim: 11

ages = for child, age of yearsOld
  &amp;quot;#{child} is #{age}&amp;quot;


alert(
  try
    nonexistent / undefined
  catch error
    &amp;quot;And the error is ... #{error}&amp;quot;
)

coffee：true, yes, on    js ：true
coffee：false, no, off   js：false
coffee：isnt js: !==

？  存在与否  ，mind？ 返回 true 或者false，

无法定义一套精简的，所以用各种语法糖来东拼西凑？
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;对象用法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Animal
  constructor: (@name) -&amp;gt;

  move: (meters) -&amp;gt;
    alert @name + &amp;quot; moved #{meters}m.&amp;quot;

class Snake extends Animal
  move: -&amp;gt;
    alert &amp;quot;Slithering...&amp;quot;
    super 5

class Horse extends Animal
  move: -&amp;gt;
    alert &amp;quot;Galloping...&amp;quot;
    super 45

sam = new Snake &amp;quot;Sammy the Python&amp;quot;
tom = new Horse &amp;quot;Tommy the Palomino&amp;quot;

sam.move()
tom.move()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的js&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var Animal, Horse, Snake, sam, tom,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Animal = (function() {
  function Animal(name) {
    this.name = name;
  }

  Animal.prototype.move = function(meters) {
    return alert(this.name + (&amp;quot; moved &amp;quot; + meters + &amp;quot;m.&amp;quot;));
  };

  return Animal;

})();

Snake = (function(_super) {
  __extends(Snake, _super);

  function Snake() {
    return Snake.__super__.constructor.apply(this, arguments);
  }

  Snake.prototype.move = function() {
    alert(&amp;quot;Slithering...&amp;quot;);
    return Snake.__super__.move.call(this, 5);
  };

  return Snake;

})(Animal);

Horse = (function(_super) {
  __extends(Horse, _super);

  function Horse() {
    return Horse.__super__.constructor.apply(this, arguments);
  }

  Horse.prototype.move = function() {
    alert(&amp;quot;Galloping...&amp;quot;);
    return Horse.__super__.move.call(this, 45);
  };

  return Horse;

})(Animal);

sam = new Snake(&amp;quot;Sammy the Python&amp;quot;);

tom = new Horse(&amp;quot;Tommy the Palomino&amp;quot;);

sam.move();

tom.move();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;coffee -&amp;gt; 指向匿名函数？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;weatherReport = (location) -&amp;gt;
  # Make an Ajax request to fetch the weather...
  [location, 72, &amp;quot;Mostly Sunny&amp;quot;]

[city, temp, forecast] = weatherReport &amp;quot;Berkeley, CA&amp;quot;



var city, forecast, temp, weatherReport, _ref;

weatherReport = function(location) {
  return [location, 72, &amp;quot;Mostly Sunny&amp;quot;];
};

_ref = weatherReport(&amp;quot;Berkeley, CA&amp;quot;), city = _ref[0], temp = _ref[1], forecast = _ref[2];
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;类似于python的拆取，解析json很方便&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;futurists =
  sculptor: &amp;quot;Umberto Boccioni&amp;quot;
  painter:  &amp;quot;Vladimir Burliuk&amp;quot;
  poet:
    name:   &amp;quot;F.T. Marinetti&amp;quot;
    address: [
      &amp;quot;Via Roma 42R&amp;quot;
      &amp;quot;Bellagio, Italy 22021&amp;quot;
    ]

{poet: {name, address: [street, city]}} = futurists
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-27:js-coffeescript.html</guid><category>web</category></item><item><title>js相关资料</title><link>/js-interesting.html</link><description>&lt;h1&gt;前端资源汇总&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dypsilon/frontend-dev-bookmarks"&gt;frontend-dev-bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;bootstrap&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://startbootstrap.com/"&gt;开箱可用&lt;/a&gt;，套上后端就行&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bootcss.com/"&gt;bootcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://182.92.129.185/"&gt;微信应用框架,采用bs写的页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;AngularJS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://campus.codeschool.com/courses/shaping-up-with-angular-js/level/2/section/1/video/1"&gt;官方视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zouyesheng.com/angular.html#toc3"&gt;AngularJS学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ituring.com.cn/article/13472"&gt;AngularJS入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;与django结合&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jrief/django-angular"&gt;django-angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kevinastone/django-api-rest-and-angular"&gt;django-api-rest-and-angular&lt;/a&gt;,&lt;a href="http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html"&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;backbone.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jashkenas/backbone/tree/master/examples/todos"&gt;backbone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;nodejs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/linnovate/mean"&gt;mean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;运行环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jsfiddle.net/"&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jsbin.com/"&gt;jsbin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://runjs.cn/"&gt;runjs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;心得&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注意node版本 尽量用0.10以上，注意sudo&lt;/li&gt;
&lt;li&gt;npm install -g grunt-cli &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;coffee&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coffeescript.org/"&gt;coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twilson63/express-coffee"&gt;express-coffee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;express&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://expressjs.jser.us/"&gt;入口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csser.com/board/4f77e6f996ca600f78000936"&gt; Express.js 中文入门指引手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;requirejs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jrburke/requirejs"&gt;require.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html"&gt;require.js的用法&lt;/a&gt;   wu:比起如何使用更重要的是为何要用它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JSON-js&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/douglascrockford/JSON-js"&gt;JSON-js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;有趣&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/pdf.js"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js#installation"&gt;html ppt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slides.com/wwj718/new"&gt;在线制作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://slides.com/explore"&gt;案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NUKnightLab/TimelineJS"&gt;TimelineJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/needim/noty"&gt;noty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mindmup/bootstrap-wysiwyg"&gt;bootstrap-wysiwyg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jhollingworth.github.io/bootstrap-wysihtml5/"&gt;bootstrap-wysihtml5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/daviferreira/medium-editor"&gt;medium-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/raphaelcruzeiro/jquery-notebook"&gt;jquery-notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="href=" title="https://github.com/pydanny/django-wysiwyg"&gt;django-wysiwyga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;demo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tastejs/todomvc"&gt;todomvc包含各种前端框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-27:js-interesting.html</guid><category>web</category></item><item><title>一种网站架构方案</title><link>/bulid_website.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;毕业之后的第一份工作跟edX相关。  &lt;/p&gt;
&lt;p&gt;edX是哈佛和MIT各资助了 3000万美元的开源项目，规模可想而知&lt;/p&gt;
&lt;p&gt;一个多月来，几乎每天都在翻阅源码，以便做些定制并为移动端提供接口，目前大概骨架算是构建好了，平台运行得也还算稳定&lt;/p&gt;
&lt;p&gt;这是我迄今为止折腾过最庞大的项目，粗略地把核心代码翻了一遍。算是对内部逻辑和数据流程有了大致的了解。&lt;/p&gt;
&lt;p&gt;从edX中学到许多东西，关于如何构建一个复杂度大,灵活性高的大型项目。&lt;/p&gt;
&lt;p&gt;我的确也再没见过比edX更复杂的web站点了&lt;/p&gt;
&lt;h1&gt;edX的架构&lt;/h1&gt;
&lt;p&gt;我后边要提到的架构方案结合edX来说可能比较容易说清楚它的意义和特性，这部分不应该忽略。&lt;/p&gt;
&lt;p&gt;这实际上提供了为何需要这种架构的理由，如果我们做的只是一个博客或是企业官网，那么随意怎样最终都能折腾出来。&lt;/p&gt;
&lt;p&gt;我们实际上是想为高复杂度高灵活性的需求提供解决方案。&lt;/p&gt;
&lt;p&gt;关于edX的总体架构，暂时不多谈功能和逻辑上的部分，这部分可能牵扯到业务逻辑,我们点到为止&lt;/p&gt;
&lt;p&gt;在此，重点说它的技术架构。&lt;/p&gt;
&lt;p&gt;我们跟随数据流从后往前说&lt;/p&gt;
&lt;h2&gt;服务器：nginx+gunicore&lt;/h2&gt;
&lt;p&gt;这一部分没啥好说&lt;/p&gt;
&lt;p&gt;nginx负责静态文件/反向代理（外部请求转发给端口）&lt;/p&gt;
&lt;p&gt;gunicore是Python WSGI的HTTP服务器，用来跑django。&lt;/p&gt;
&lt;h2&gt;数据库：mysql，mongo&lt;/h2&gt;
&lt;p&gt;edX同时采用了mysql和mongo，关系型数据库（mysql）用来存储用户相关的信息，而mongo用来存储课程相关的信息。 (相关细节我记录在个人wiki里，暂未整理)&lt;/p&gt;
&lt;p&gt;这么做的好处是什么，两个数据库管理起来明显是要麻烦的啊。&lt;/p&gt;
&lt;p&gt;我想原因至少有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edX的核心框架选择了django，django自带了用户系统，强大实用，且可扩展，对于edX已经足够，而django可用的数据库目前并未包括mongo，所以得用mysql&lt;/li&gt;
&lt;li&gt;用户模型，用户与其他东西的关系，也适合用关系描述，加上django的orm，其实使用起来十分方便。此外django中有许多跟用户模块相关的优秀第三方库，诸如django-rest-framework，django-social-auth，edX用上它们，许多工作都省事多了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说edX由于django的原因，必须用上一个关系型数据库。&lt;/p&gt;
&lt;p&gt;pass：github上也有将mongo用作django后端数据库的第三方开源库，不过似乎社区都不活跃&lt;/p&gt;
&lt;p&gt;那么使用mongo的原因呢：
应对课程部分的复杂度。&lt;/p&gt;
&lt;p&gt;课程是edX的核心部分，我们从代码量上也可以轻易看出。mongo这种文档型/非结构型的特性，再合适不过了，数据模型的变化，根本不影响存储，类似json的树状结构数据，往数据库一丢就行，搜索也方便之极，都跟用上了orm一般方便，甚至可读性更好&lt;/p&gt;
&lt;p&gt;此外mongo也存储论坛数据，文档型的树状结构数据使用mongo极其合适，而文档型数据，很可能数据模型常随需求变化，这也是mongo用着很爽的原因。你想啊，使用关系型数据库，django1.7之前如果不用south之类的工具，每次数据模型变更，烦都烦死&lt;/p&gt;
&lt;p&gt;总结来说，使用mysql存储用户数据，可以利用django用户系统带来的便利。而使用mongo，可以方便应对灵活多变的文档型数据结构，而大多复杂数据都可以用这种树状结构描述，这也是json和xml使用广泛的原因，他们都是树状的&lt;/p&gt;
&lt;h2&gt;后端&lt;/h2&gt;
&lt;p&gt;edX网站后端使用django框架。&lt;br /&gt;
这是edX架构中我最熟悉的部分。&lt;br /&gt;
其实之所以毕业之后第一份工作选择edX,这也是重要原因。想先深入python/django&lt;br /&gt;
django是edX的核心部分，80%以上的代码都是用django写的。&lt;/p&gt;
&lt;p&gt;django是个大而全的框架，像edX这种大项目使用django，就免去了大量的杂活。&lt;/p&gt;
&lt;p&gt;此外django模板是一直为人诟病的地方，功能实在太鸡肋，于是edX使用了mako替代它，不得不说这是个明智之举，pythonic多了&lt;/p&gt;
&lt;p&gt;此外论坛部分不在edx-platform里，论坛部分单独用ruby写，对外提供api接口，django去调用接口获取数据，所以可以将论坛视为一个黑箱服务，对外而言，看去和用django写的没有区别。&lt;/p&gt;
&lt;h2&gt;前端&lt;/h2&gt;
&lt;h3&gt;前端mvc框架：backbone.js&lt;/h3&gt;
&lt;p&gt;edX的课程制作部分极其强大，与用户有大量的交互，有大量数据在与后端往来，如果手动操作DOM手动写ajax，估计要累的半死，而且极其容易出错。&lt;/p&gt;
&lt;p&gt;backbone.js是前端mvc框架，不仅为代码提供了组织结构，还为我们干了大量杂活，让我们可以专注数据和业务逻辑，当然时下更流行的是angular.js.我也觊觎很久了，不过没怎么在项目中实践过，看了又忘。&lt;/p&gt;
&lt;p&gt;此外CSS预处理器使用Scss,js预处理器使用coffeescript，前端自动化使用grunt.js，（依赖于nodejs）&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;我的架构方案&lt;/h1&gt;
&lt;p&gt;好啦，是时候亮出我从edX学到的架构方案啦，其实大多内容就是对上边做个总结。  &lt;/p&gt;
&lt;p&gt;当当当当&lt;/p&gt;
&lt;h2&gt;服务器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;gunicore&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;mongo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mysql跟django紧密结合，主要使用其用户模块功能，其实这一部分功能强大之极。基本功能由django的auth模块提供，django还为我们提供了session（会话），csrf（安全性）等功能，几乎不花功夫就能得到的特性。真是免费的午餐&lt;/p&gt;
&lt;h2&gt;后端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django&lt;/li&gt;
&lt;li&gt;django-rest-framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;django作为核心框架，提供了骨架和组织方式。&lt;/p&gt;
&lt;p&gt;django-rest-framework为我们对外提供restful风格的api接口&lt;/p&gt;
&lt;p&gt;重要的是！！&lt;/p&gt;
&lt;p&gt;提供这些api接口几乎不费事，只要定义好model就几乎万事大吉了！包括麻烦的用户认证和权限等问题都有现成的解决方案&lt;/p&gt;
&lt;p&gt;至于mongo部分，就由pymongo来操作，pymongo操作mongo，其舒适程度与使用orm无异，且查找功能还更清晰明了。当然这主要是mongo本身的特性。&lt;/p&gt;
&lt;h2&gt;前端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;angular.js&lt;/li&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;angular.js与后端的django-rest-framework提供的接口交互  &lt;/p&gt;
&lt;p&gt;如此一来，模板使用angular.js的就行，不需要django的模板了，也避免符号问题&lt;/p&gt;
&lt;p&gt;这样大多页面都是无刷新的！&lt;/p&gt;
&lt;p&gt;很适合做大型web应用&lt;/p&gt;
&lt;p&gt;自适应采用bootstrap&lt;/p&gt;
&lt;h2&gt;为移动端提供接口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我最近正在做这一部分，使用nodejs来应对大量的并发请求。&lt;/p&gt;
&lt;p&gt;数据来源，使用nodejs直接操控mongo，用户权限方面直接读取mysql中的数据表&lt;/p&gt;
&lt;p&gt;当然nodejs有这两个数据库的orm&lt;/p&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;p&gt;目前存在问题，以及可能的解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mongo数据如何交给django-rest-framework返回给前端，django-rest-framework功能很全，可以重点用其序列化的功能&lt;/li&gt;
&lt;li&gt;重定向问题，前端来控制，或是使用response&lt;/li&gt;
&lt;li&gt;django本身提供的许多特性，django-rest-framework都支持吗？ 从文档上看，绝大多数核心功能都支持&lt;/li&gt;
&lt;li&gt;好像存在一个内在矛盾，django-rest-framework需要model，而model本身是结构化的，就是说django和mongo其实不怎么关联。  这部分让django-rest-framework只处理序列化的工作。也就是说django-rest-framework在标准接口中用快捷方式，否则用底层更灵活的方式&lt;/li&gt;
&lt;li&gt;让mongo专注于提供文档数据，django-rest-framework来处理权限&lt;/li&gt;
&lt;li&gt;让mysql用字段去记录mongo文档对象的id？相当于外键？还是让mongo中记录user id，来管理用户与数据。后者似乎更恰当。 django在后端负责验证，提取request，本质是sessin，而session本质是核对过的用户名与密码，如果用户是他宣称的身份，则允许这个身份操作自己的数据。以上分析中我们学会这样一种方法，id可以用来关联两者，作为定位符，实际上这也是外键的本质。同时我们发现后端其实无所不能，那里混沌未开，一切数据都可以随意流动，我们人为地对其做限制，划分权职，我们采用身份，权限这些概念，让逻辑清晰，这样才可以映射现实，从而为现实服务,本质是我们在运用逻辑和概念，语言和框架是实施和表达这些想法的工具。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 12 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-12:bulid_website.html</guid><category>web</category></item><item><title>使用django-rest-framework建立RESTful风格的api</title><link>/django-rest-framework-1.html</link><description>&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/serializers"&gt;django-rest-framework&lt;/a&gt;的文档也看过好几回了。&lt;br /&gt;
由于没在实际项目中使用过，真是边看边忘。&lt;br /&gt;
backbone.js/angular.js等框架也类似，看的时候觉得学会了，可时间一长，又只记得个大概&lt;br /&gt;
这种把逻辑移到前端，后端只提供稳定的api接口。想想都觉得美好  &lt;/p&gt;
&lt;h2&gt;为何使用RESTful风格&lt;/h2&gt;
&lt;p&gt;一旦我们使用这种架构，后端只需提供api，把业务逻辑交给前端，一来是界面不需要刷新了，用户体验好，而来对于逻辑复杂的前端，业务逻辑都封装在前段，后端基本稳定不变&lt;/p&gt;
&lt;h2&gt;在django中使用&lt;/h2&gt;
&lt;p&gt;前端使用backbone.js/angular.js，后端使用&lt;a href="http://www.django-rest-framework.org/api-guide/serializers"&gt;django-rest-framework&lt;/a&gt;&lt;br /&gt;
如此一来后端只需定义好models,剩下的工作交给django-rest-framework,就ok啦！
之后将api独立到一个app里，如此依赖，数据层十分稳定，这是多好的事啊！  &lt;/p&gt;
&lt;p&gt;前后端数据使用json来传输，简单清晰&lt;/p&gt;
&lt;h3&gt;django中使用json&lt;/h3&gt;
&lt;p&gt;既然说到json，就顺便也记个笔记好了。&lt;/p&gt;
&lt;h4&gt;django和json相关资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/serialization/"&gt;Serializing Django objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bradjasper/django-jsonfield/blob/master/jsonfield/tests.py#L155"&gt;django-jsonfield&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;django-jsonfield本质上提供了一个字段允许直接存取json，自动做了序列化工作，将字段定义为sonfield的好处是这个字段可以用来处理数据结构不稳定的需求部分，json自身是树状数据结构，而存储进去的实质是字符串，所以可以随意修改&lt;br /&gt;
其实直接使用mongo数据库就可以做到。&lt;/p&gt;
&lt;h2&gt;关键概念：序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;透过网络传送资料时进行编码的过程，可以是字节或是XML等格式。而字节的或XML编码格式可以还原完全相等的对象。这程序被应用在不同应用程式之间传送对象，以及服务器将对象储存到档案或数据库。相反的过程又称为反序列化。&lt;/li&gt;
&lt;li&gt;序列化是将对象状态转换为可保持或传输的形式的过程。序列化的补集是反序列化，后者将流转换为对象。这两个过程一起保证数据易于存储和传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;起步&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-10:django-rest-framework-1.html</guid><category>django</category></item><item><title>索引</title><link>/gist-1.html</link><description>&lt;h1&gt;按语言分&lt;/h1&gt;
&lt;h2&gt;python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/534c6d343b25c210faf8.git"&gt;pymongo_operate.py SEC&lt;/a&gt; Python操作MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/cc10a641e5718abee03e"&gt;easy_django.py&lt;/a&gt;   简单轻巧的Django，最简启动方式&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/a5a93d7d9cb9572b4fc9"&gt;django_404.html SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/08886626d0d499ffdab4"&gt;django_templates_base.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/7edd44a2df4a9d2192e2"&gt;tests.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;html&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/e2c3f4c29b43ffb96d9d"&gt;bootstrap2-begin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/7460403"&gt;bootstrap3-start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/4c453b74bf1372a893c4"&gt;html5_start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/7164189"&gt;一些CDN公共库，常用的js，css公共库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;一旦代码片段被纳入近来，它就进入我们的视野，有了成长改良的机会，这也是git和wiki很有趣的特性&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-10:gist-1.html</guid><category>gist</category></item><item><title>仓库与索引</title><link>/gist-init.html</link><description>&lt;p&gt;最近想寻找有效的方式来存储代码片段。&lt;/p&gt;
&lt;p&gt;此前遇到的问题是代码片段创建时随意一扔，需要用时，寻找十分费劲  &lt;/p&gt;
&lt;p&gt;以至于不如使用google重新搜索&lt;/p&gt;
&lt;p&gt;这样实际上浪费了之前的工作&lt;/p&gt;
&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;h4&gt;基本想法&lt;/h4&gt;
&lt;p&gt;将github的的gist视为代码片段仓库&lt;br /&gt;
仓库本身只负责存储&lt;br /&gt;
在博客中建立索引，实际就是url链接&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;此前代码片段无法使用的原因是：手动去仓库中寻找片段，十分繁琐&lt;/p&gt;
&lt;p&gt;这里的关键概念是 仓库和索引。 &lt;/p&gt;
&lt;p&gt;让仓库保持无序，好处在于可以随意将代码片段丢进去&lt;/p&gt;
&lt;p&gt;让索引来将整理信息，人性化接口&lt;/p&gt;
&lt;h2&gt;类似问题&lt;/h2&gt;
&lt;p&gt;目前我面临许多类似问题&lt;br /&gt;
诸如印象笔记  &lt;/p&gt;
&lt;p&gt;一年不到的时间，记了1500+条笔记&lt;/p&gt;
&lt;p&gt;目前存在许多分类重叠，分类不当，tag使用不当，tag缺失的问题&lt;/p&gt;
&lt;p&gt;带来的后果就是，我知道我笔记里有许多问题的解决方案，寻找它却十分费劲&lt;/p&gt;
&lt;p&gt;实际上是缺乏设计，缺乏整理&lt;/p&gt;
&lt;p&gt;只有数据入库的过程，而在赋予源信息meta的过程不够用心，同时缺乏定期的归纳整理&lt;/p&gt;
&lt;h2&gt;参考方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;附加设计过的meta信息&lt;/li&gt;
&lt;li&gt;定期整理&lt;/li&gt;
&lt;li&gt;增删合并&lt;/li&gt;
&lt;li&gt;分门别类&lt;/li&gt;
&lt;li&gt;建立高一层的索引&lt;/li&gt;
&lt;li&gt;学习别人的做法&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 -0000</pubDate><guid>tag:,2014-08-10:gist-init.html</guid><category>gist</category></item><item><title>django测试</title><link>/django-test.html</link><description>&lt;p&gt;在单元测试方面，Django继承python的&lt;a href="https://docs.python.org/3/library/unittest.html#module-unittest"&gt;unittest&lt;/a&gt;.TestCase实现了自己的django.test.TestCase，编写测试用例通常从这里开始。测试代码通常位于app的tests.py文件中&lt;/p&gt;
&lt;h2&gt;为何要在django中使用test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When you’re writing new code, you can use tests to validate your code works as expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When you’re refactoring or modifying old code, you can use tests to ensure your changes haven’t affected your application’s behavior unexpectedly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;With Django’s test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application’s output and generally verify your code is doing what it should be doing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing and running tests&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from django.test import TestCase
from myapp.models import Animal

class AnimalTestCase(TestCase):
    def setUp(self):
        Animal.objects.create(name=&amp;quot;lion&amp;quot;, sound=&amp;quot;roar&amp;quot;)
        Animal.objects.create(name=&amp;quot;cat&amp;quot;, sound=&amp;quot;meow&amp;quot;)

    def test_animals_can_speak(self):
        &amp;quot;&amp;quot;&amp;quot;函数必须以text_xx命名方式&amp;quot;&amp;quot;&amp;quot;
        lion = Animal.objects.get(name=&amp;quot;lion&amp;quot;)
        cat = Animal.objects.get(name=&amp;quot;cat&amp;quot;)
        self.assertEqual(lion.speak(), &amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;)
        self.assertEqual(cat.speak(), &amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以有几种方式运行单元测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python manage.py test：执行所有的测试用例&lt;/li&gt;
&lt;li&gt;python manage.py test app_name, 执行该app的所有测试用例&lt;/li&gt;
&lt;li&gt;python manage.py test app_name.case_name: 执行指定的测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Testing tools:Overview and a quick example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; from django.test.client import Client
&amp;gt;&amp;gt;&amp;gt; c = Client()
&amp;gt;&amp;gt;&amp;gt; response = c.post(&amp;#39;/login/&amp;#39;, {&amp;#39;username&amp;#39;: &amp;#39;john&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;smith&amp;#39;})
&amp;gt;&amp;gt;&amp;gt; response.status_code
200
&amp;gt;&amp;gt;&amp;gt; response = c.get(&amp;#39;/customer/details/&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; response.content
&amp;#39;&amp;lt;!DOCTYPE html...&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The request factory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from django.contrib.auth.models import User
from django.test import TestCase, RequestFactory

class SimpleTest(TestCase):
    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()
        self.user = User.objects.create_user(
            username=&amp;#39;jacob&amp;#39;, email=&amp;#39;jacob@…&amp;#39;, password=&amp;#39;top_secret&amp;#39;)

    def test_details(self):
        # Create an instance of a GET request.
        request = self.factory.get(&amp;#39;/customer/details&amp;#39;)

        # Recall that middleware are not supported. You can simulate a
        # logged-in user by setting request.user manually.
        request.user = self.user

        # Test my_view() as if it were deployed at /customer/details
        response = my_view(request)
        self.assertEqual(response.status_code, 200)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;unit test file upload in django&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c = Client()
with open(&amp;#39;wishlist.doc&amp;#39;) as fp:
  c.post(&amp;#39;/customers/wishes/&amp;#39;, {&amp;#39;name&amp;#39;: &amp;#39;fred&amp;#39;, &amp;#39;attachment&amp;#39;: fp})
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/"&gt;Testing in Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.6/topics/testing/tools/"&gt;Testing tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/overview/"&gt;Writing and running tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/thinkinside/article/details/7227921"&gt;Django实战（10）：单元测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/translate/django-1-6-test-driven-development"&gt;Django 1.6 的测试驱动开发&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 31 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-31:django-test.html</guid><category>django</category></item><item><title>python多版本安装笔记</title><link>/python2-python3.html</link><description>&lt;p&gt;在同一台机器上使用不同的python版本&lt;/p&gt;
&lt;h3&gt;方法一&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv
$ echo &amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &amp;#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
$ exec $SHELL -l
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;方法二&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install python3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装pip3：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /tmp
wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
sudo python3 get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://seisman.info/python-pyenv.html"&gt;Python多版本共存之pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11268501/how-to-use-pip-with-python-3-x-alongside-python-2-x"&gt;how-to-use-pip-with-python-3-x-alongside-python-2-x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 30 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-30:python2-python3.html</guid><category>python</category></item><item><title>七牛云使用笔记</title><link>/qiniu.html</link><description>&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;pip install qiniu&lt;/p&gt;
&lt;h2&gt;ACCESS_KEY 和 SECRET_KEY&lt;/h2&gt;
&lt;p&gt;在使用SDK 前，您需要拥有一对有效的 AccessKey 和 SecretKey 用来进行签名授权。
&lt;a href="https://portal.qiniu.com/setting/key"&gt;登陆查看Access Key和Secret Key&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;上传流程&lt;/h2&gt;
&lt;h3&gt;在七牛云存储中，整个上传流程大体分为这样几步：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;业务服务器颁发 uptoken（上传授权凭证）给客户端（终端用户）&lt;/li&gt;
&lt;li&gt;客户端凭借 uptoken 上传文件到七牛&lt;/li&gt;
&lt;li&gt;在七牛获得完整数据后，发起一个 HTTP 请求回调到业务服务器&lt;/li&gt;
&lt;li&gt;业务服务器保存相关信息，并返回一些信息给七牛&lt;/li&gt;
&lt;li&gt;七牛原封不动地将这些信息转发给客户端（终端用户）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如果上传发生在业务服务器，以上流程可以自然简化为：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;业务服务器生成 uptoken（不设置回调，自己回调到自己这里没有意义）&lt;/li&gt;
&lt;li&gt;凭借 uptoken 上传文件到七牛&lt;/li&gt;
&lt;li&gt;善后工作，比如保存相关的一些信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;demo&lt;/h2&gt;
&lt;p&gt;官方给了一个&lt;a href="https://github.com/qiniu/python-sdk/blob/develop/docs/gist/demo.py"&gt;代码片段&lt;/a&gt;，其实包含了大多使用场景.&lt;br /&gt;
需要注意的是首先设置环境变量。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;os.environ[&amp;#39;QINIU_ACCESS_KEY&amp;#39;] = &amp;quot;xx&amp;quot;
os.environ[&amp;#39;QINIU_SECRET_KEY&amp;#39;] = &amp;quot;xx&amp;quot;
os.environ[&amp;#39;QINIU_TEST_BUCKET&amp;#39;] = &amp;quot;xx&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后可以在ipython中实验各个函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;demo&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在django中使用&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/piglei/django-qiniu"&gt;django-qiniu&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Save your uploaded file in views.py&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/piglei/django-qiniu#2-save-your-uploaded-file-in-viewspy"&gt;views.py&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/qiniu/python-sdk/tree/develop/docs"&gt;Python SDK 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 30 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-30:qiniu.html</guid><category>python</category></item><item><title>一些django工具笔记</title><link>/django-tools.html</link><description>&lt;h2&gt;&lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A configurable set of panels that display various debug information about the current request/response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;django调试不二神器&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;0.10.0版的配置，edx可用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEBUG_TOOLBAR_PANELS = (
    &amp;#39;debug_toolbar.panels.version.VersionDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.timer.TimerDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.headers.HeaderDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.request_vars.RequestVarsDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.template.TemplateDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.sql.SQLDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.signals.SignalDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.logger.LoggingPanel&amp;#39;,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;p&gt;Django Extensions 是Django框架的扩展功能集合.&lt;br /&gt;
包括management命令扩展,数据库字段扩展,admin后台扩展等.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://django-extensions-zh.readthedocs.org/zh_CN/latest/command_extensions.html"&gt;常用扩展命令列表&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;shell_plus.运行Django shell的同时自动加载所有app的models&lt;/li&gt;
&lt;li&gt;$ ./manage.py shell_plus --use-ipython&lt;/li&gt;
&lt;li&gt;create_jobs - 在指定app内创建一个定时任务扩展目录,可以定期执行指定任务.&lt;/li&gt;
&lt;li&gt;dumpscript - 生成一个Python脚本.包含指定app的所有数据对象.与Django的 dumpdata 命令不同的是 dumpscript 导出的是Python对象,而不是纯数据.这种导出数据的方式比直接导出数据或XML文件更容易理解,也更灵活.&lt;/li&gt;
&lt;li&gt;graph_models - 生成一个 GraphViz 文件.将输出内容写入一个文件.以图形化数据模型.传入多个app的名字作为参数,可以在一个文件中显示多个模型的图形化格式&lt;/li&gt;
&lt;li&gt;mail_debug - 开启一个邮件服务,将Django项目发出的邮件从控制台输出,而不是真的发送出去.&lt;/li&gt;
&lt;li&gt;passwd - 重新设定某个用户的密码,用法: ./manage.py passwd [用户名] .&lt;/li&gt;
&lt;li&gt;print_settings - 与 diffsettings 命令功能类似,但会根据参数显示指定的配置，如果不传参数默认显示的全部配置.&lt;/li&gt;
&lt;li&gt;print_user_for_session - 通过 session key 来查看当前用户信息,这个方法在查找哪个用户行为导致程序异常非常有帮助.&lt;/li&gt;
&lt;li&gt;reset_db - 重置数据库 (目前支持 sqlite3, mysql, postgres)，可以用来删除或创建数据库.&lt;/li&gt;
&lt;li&gt;runjobs - 执行计划任务. 分为按小时执行,按天执行,按周执行,按月执行.是 django-extensions 任务系统中的一部分功能.&lt;/li&gt;
&lt;li&gt;runprofileserver - 在启动 runserver 测试服务的同时,其用 profile 功能,可以记录服务的详细日志,包含了对于Python方法的详细执行分析.在服务器性能分析时,这是最佳方法了.&lt;/li&gt;
&lt;li&gt;runserver_plus - 在Werkzeug debugger模式下开启服务. 需要安装 Werkzeug.这是个杀手级应用.&lt;/li&gt;
&lt;li&gt;show_urls - 统一显示项目中包含的所有url.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/toastdriven/django-haystack"&gt;django-haystack&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;p&gt;Django-haystack应该是Django集成全文检索引擎的最佳选择了，haystack提供了一套非常优雅灵活易用的API， 就像Django本身的ORM/QuerySet一样，使索引、搜索工作大大简化。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://django-debug-toolbar.readthedocs.org/en/1.2/installation.html"&gt;django-debug-toolbar doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-extensions-zh.readthedocs.org/zh_CN/latest/"&gt;django-extensions 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/wenxuansoft/article/details/8172766"&gt;实现Django的全文检索功能（三）：进一步学习Haystack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 28 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-28:django-tools.html</guid><category>django</category></item><item><title>linux下用户与文件权限</title><link>/user.html</link><description>&lt;h2&gt;用户&lt;/h2&gt;
&lt;h3&gt;创建用户(useradd)&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
新建用户
adduser  test //useradd test 也行，建议使用adduser 更友好&lt;/p&gt;
&lt;p&gt;删除用户
sudo userdel -r username&lt;/p&gt;
&lt;p&gt;修改密码
passwd test(username) &lt;/p&gt;
&lt;p&gt;将新用户添加到管理组
gpasswd -a test admin &lt;br /&gt;
gpasswd -a test sudo  &lt;/p&gt;
&lt;p&gt;给test用户创建自己的目录：
cd /home
mkdir test
chown test /home/test
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;为用户添加root权限&lt;/h2&gt;
&lt;p&gt;修改 /etc/passwd 文件，找到如下行，把用户ID修改为 0 ，如下所示：&lt;br /&gt;
tommy:x:50&lt;code&gt;0&lt;/code&gt;:500:tommy:/home/tommy:/bin/bash`&lt;br /&gt;
登陆后就直接是root，不显示用户名，edx中的edxapp就是如此  &lt;/p&gt;
&lt;h2&gt;adduser&lt;/h2&gt;
&lt;p&gt;adduser更适合初级使用者,不用去记那些繁琐的参数选项，只要跟着系统的提示一步一步进行下去就行&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;文件权限&lt;/h2&gt;
&lt;h3&gt;做个实验&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
cd tmp 
touch test.md
ls -l test.md&lt;/p&gt;
&lt;p&gt;输出：-rw-rw-r-- 1 wwj wwj 0  7月 11 14:55 test.md
&lt;/pre&gt;
其中，我们来看-rw-rw-r--。该字段中的首字符（-）指定该文件的类型，-表示常规文件。&lt;br /&gt;
后边三个三元组w-rw-r--，第一个三元字符组代表文件所有者的权限，第二个代表文件的组的权限，第三个代表所有其他用户的权限。&lt;br /&gt;
r 表示允许读（查看文件中的数据），w 表示允许写（修改文件以及删除），x 表示允许“执行”（运行程序）。&lt;/p&gt;
&lt;h3&gt;改变用户和组所有权&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown root /etc/passwd
chgrp wheel /etc/passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了改变文件或其它文件系统对象的所有者或组，分别使用 &lt;code&gt;chown&lt;/code&gt; 或 &lt;code&gt;chgrp&lt;/code&gt;，这两个命令都要一个用户名或组名作参数，后面跟上一个或多个文件名。&lt;br /&gt;
除非您是超级用户，否则您不可以使用 chown，然而任何人都可以使用 chgrp 来将文件的组所有权改为他们所属的组。&lt;br /&gt;
chown 和 chgrp 都有一个 -R 选项，该选项可以用来告诉它们递归地将所属权&lt;/p&gt;
&lt;p&gt;sudo chown 777 所有用户&lt;/p&gt;
&lt;h3&gt;修改rwx权限&lt;/h3&gt;
&lt;p&gt;chmod — 用来改变我们可以在 ls -l 清单中看到的 rwx 权限，比如增加执行权限：&lt;code&gt;chmod +x scriptfile.sh&lt;/code&gt;，同理移除权限：&lt;code&gt;chmod -x scriptfile.sh&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://os.51cto.com/art/201104/256231.htm"&gt;Ubuntu中useradd和adduser的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justcoding.iteye.com/blog/1929063"&gt;Ubuntu用户及用户组管理命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.ubuntu.org.cn/新建用户并添加到管理组"&gt;新建用户并添加到管理组&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zhangfeikr.blog.51cto.com/1999170/396541"&gt;Linux文件权限设置详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-10:user.html</guid><category>linux</category></item><item><title>vagrant</title><link>/vagrant.html</link><description>&lt;h3&gt;init&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
vagrant box add BOX_NAME xxx.box&lt;/p&gt;
&lt;p&gt;vagrant init&lt;/p&gt;
&lt;p&gt;vagrant up
&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;常用操作&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
vagrant up （启动虚拟机）
vagrant halt （关闭虚拟机）
vagrant suspend （暂停虚拟机——只是暂停，虚拟机内存等信息将以状态文件的方式保存在本地，可以执行恢复操作后继续使用）
vagrant resume （恢复虚拟机 —— 与前面的暂停相对应）
vagrant destroy （删除虚拟机，删除后在当前虚拟机所做进行的除开Vagrantfile中的配置都不会保留）
&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.smdcn.net/article/1308.html"&gt;使用Vagrant在Windows下部署开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wing2south.com/post/44371306891/vagrant/"&gt;将Vagrant移出系统盘的方法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://xuclv.blog.51cto.com/5503169/1239250"&gt;vagrant使用简介(很全)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/fuyunbiyi/archive/2013/01/13/2858447.html"&gt;vagrant使用小结（端口映射可参考）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-10:vagrant.html</guid><category>ubuntu</category></item><item><title>ubuntu12.04 apt换源</title><link>/apt-get.html</link><description>&lt;h2&gt;修改源地址：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /etc/apt/sources.list /etc/apt/sources.list.bak  
vim /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;官方源&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntu官方提供的其他软件（第三方闭源软件等）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://archive.canonical.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;precise&lt;/span&gt; &lt;span class="kp"&gt;partner&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://extras.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;precise&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;中科大：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates main restricted
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates main restricted
deb http://mirrors.ustc.edu.cn/ubuntu/ precise universe
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise universe
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates universe
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates universe
deb http://mirrors.ustc.edu.cn/ubuntu/ precise multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;搜狐源：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.sohu.com/ubuntu/ precise-updates main restricted
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates main restricted
deb http://mirrors.sohu.com/ubuntu/ precise universe
deb-src http://mirrors.sohu.com/ubuntu/ precise universe
deb http://mirrors.sohu.com/ubuntu/ precise-updates universe
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates universe
deb http://mirrors.sohu.com/ubuntu/ precise multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-updates multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;网易源：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.163.com/ubuntu/ precise-updates main restricted
deb-src http://mirrors.163.com/ubuntu/ precise-updates main restricted
deb http://mirrors.163.com/ubuntu/ precise universe
deb-src http://mirrors.163.com/ubuntu/ precise universe
deb http://mirrors.163.com/ubuntu/ precise-updates universe
deb-src http://mirrors.163.com/ubuntu/ precise-updates universe
deb http://mirrors.163.com/ubuntu/ precise multiverse
deb-src http://mirrors.163.com/ubuntu/ precise multiverse
deb http://mirrors.163.com/ubuntu/ precise-updates multiverse
deb-src http://mirrors.163.com/ubuntu/ precise-updates multiverse
deb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更新：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-08:apt-get.html</guid><category>ubuntu</category></item><item><title>命令行网络配置</title><link>/network.html</link><description>&lt;p&gt;参考&lt;a href="http://www.cnblogs.com/rusty/archive/2011/04/06/2007139.html"&gt;这个博客&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;通过配置文件配置&lt;/h2&gt;
&lt;h3&gt;1）配置IP网关：sudo gedit /etc/network/interfaces 里面添加&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dhcp的&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;静态IP的&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
auto lo
iface lo inet loopback
#上面的是回环
#网卡eth0的配置
auto eth0
#staic 静态IP
iface eth0 inet static
address 192.168.1.5
netmask 255.255.255.0
gateway 192.168.1.1
#network 192.168.3.0  
#broadcast 192.168.3.255 
#后面两条是网络号和广播号，这个可以由其它信息计算，因此无需设置
&lt;/pre&gt;

&lt;h3&gt;2）配置DNS： sudo gedit /etc/resolv.conf&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
nameserver 202.107.117.11
&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;3）主机名：sudo gedit /etc/hostname 里面输入主机名。默认有个主机名，因此这个不是必须的。&lt;/h3&gt;
&lt;h3&gt;4）重启网络：sudo /etc/init.d/networking restart&lt;/h3&gt;
&lt;p&gt;也可以重启网卡：&lt;/p&gt;
&lt;pre&gt;
sudo ifconfig eth0 down 
sudo ifconfig eth0 up
&lt;/pre&gt;

&lt;p&gt;重启网卡对别的网卡无影响，更推荐一些。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-08:network.html</guid><category>ubuntu</category></item><item><title>系统数据与清理</title><link>/system-clean.html</link><description>&lt;h3&gt;查找1G以上的文件&lt;/h3&gt;
&lt;p&gt;sudo find / -type f -size +1024000k -exec du -h {} \;&lt;/p&gt;
&lt;h3&gt;查看系统空间&lt;/h3&gt;
&lt;p&gt;df --human-readable&lt;/p&gt;
&lt;h3&gt;文件及文件夹的大小&lt;/h3&gt;
&lt;p&gt;du --human-readable&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Jul 2014 00:00:00 -0000</pubDate><guid>tag:,2014-07-08:system-clean.html</guid><category>ubuntu</category></item><item><title>在微软下搭建nodejs微信后端</title><link>/use-nodejs-in-windows.html</link><description>&lt;p&gt;教一个学妹在windows下用nodejs部署微信后台。顺便发到博客上。&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在此只说如何部署后台，至于注册使用微信公众号相关事宜，自行google之。&lt;br /&gt;
以下内容，默认你已经注册好了微信公众号。  &lt;/p&gt;
&lt;p&gt;此外所有需要的工具，我都打包在&lt;a href="http://pan.baidu.com/s/1nthtCfR"&gt;这里&lt;/a&gt;了,点击下载就行.之后解压它。&lt;/p&gt;
&lt;h2&gt;ngrok&lt;/h2&gt;
&lt;p&gt;在cmd中,进入ngrok所在目录，,执行&lt;code&gt;ngrok.exe 80&lt;/code&gt;，终端将返回一个url.不要关闭这个窗口,最后一步将用到.&lt;/p&gt;
&lt;p&gt;就是这货：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok" src="http://wwjpic.qiniudn.com/ngrok.png" /&gt;)&lt;/p&gt;
&lt;h2&gt;nodejs&lt;/h2&gt;
&lt;p&gt;点击安装node-v0.10.28-x86.msi。随意安装在哪个目录。&lt;br /&gt;
新版的node自带了npm，且会自动将环境变量写入PATH,所以无需配置。&lt;/p&gt;
&lt;h2&gt;npm安装依赖环境&lt;/h2&gt;
&lt;p&gt;进入到wechat目录
执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install  express
npm install weixin-robot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;账号微信相关&lt;/h2&gt;
&lt;p&gt;首先登录到&lt;a href="https://mp.weixin.qq.com/"&gt;腾讯微信后台&lt;/a&gt;，
weixin:
&lt;img alt="weixin" src="http://wwjpic.qiniudn.com/weixin.png" /&gt;&lt;/p&gt;
&lt;p&gt;参看你的token,将其填入wechat/weixin.js中。weixin.js中有注释。第40行&lt;/p&gt;
&lt;p&gt;token:
&lt;img alt="token" src="http://wwjpic.qiniudn.com/url2.png" /&gt;&lt;/p&gt;
&lt;p&gt;将ngrok返回的url，填入到下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="url" src="http://wwjpic.qiniudn.com/url2.png" /&gt;&lt;/p&gt;
&lt;h2&gt;后台跑起&lt;/h2&gt;
&lt;p&gt;见证奇迹的时刻到了~ &lt;br /&gt;
进入wechat目录。&lt;br /&gt;
执行&lt;code&gt;node weixin.js&lt;/code&gt;.&lt;br /&gt;
不出意外的话，后台跑起来了。&lt;br /&gt;
可以开始调戏你的公众号啦。&lt;/p&gt;
&lt;h2&gt;使用nodejs后端&lt;/h2&gt;
&lt;p&gt;使用规则，参考这里&lt;a href="https://github.com/node-webot/weixin-robot"&gt;weixin-robot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多的使用细节，参考&lt;a href="http://mp.weixin.qq.com/wiki/index.php"&gt;微信api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自动回复规则,&lt;a href="https://github.com/node-webot/wechat"&gt;参考这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That`s all. enjoying it&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 16 Jun 2014 00:00:00 -0000</pubDate><guid>tag:,2014-06-16:use-nodejs-in-windows.html</guid><category>wechat</category></item><item><title>linux终端小工具使用笔记</title><link>/use-gpm.html</link><description>&lt;p&gt;目前包括：（陆续添加）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gpm&lt;/li&gt;
&lt;li&gt;w3m&lt;/li&gt;
&lt;li&gt;wget&lt;/li&gt;
&lt;li&gt;nethogs &lt;/li&gt;
&lt;li&gt;axel 参数 文件下载地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;gpm&lt;/h2&gt;
&lt;h3&gt;用途&lt;/h3&gt;
&lt;p&gt;在没有图形界面的情况下使用鼠标来移动选择．&lt;/p&gt;
&lt;p&gt;通过左键单击来选择适当的文本输入框，然后按下&lt;code&gt;鼠标中键&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install gpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service gpm start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.it165.net/os/html/201212/4087.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;w3m&lt;/h2&gt;
&lt;h3&gt;用途&lt;/h3&gt;
&lt;p&gt;在命令行里上网&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install w3m
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w3m URL&lt;/code&gt; ：打开网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hjkl&lt;/code&gt;:移动操作类似vim&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: 转到下个超链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多功能，参考&lt;a href="http://baike.baidu.com/view/455886.htm"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;wget&lt;/h2&gt;
&lt;h2&gt;nethogs&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install nethogs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;监控网速&lt;/p&gt;
&lt;p&gt;使用：&lt;code&gt;sudo nethogs wlan0&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;axel&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install axel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用：&lt;code&gt;axel 参数 文件下载地址&lt;/code&gt;，例如&lt;code&gt;axel -n 10 url&lt;/code&gt;,开启十个线程。下载链接可以用chrometool分析&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jun 2014 00:00:00 -0000</pubDate><guid>tag:,2014-06-10:use-gpm.html</guid><category>ubuntu</category></item><item><title>ngrok使用笔记</title><link>/use-ngrok.html</link><description>&lt;h3&gt;ngrok是什么&lt;/h3&gt;
&lt;p&gt;神器．&lt;/p&gt;
&lt;p&gt;将内网映射到外网的神器．&lt;/p&gt;
&lt;p&gt;我之前用它来&lt;a href="http://wwj718.github.io/locale-wechat.html"&gt;在局域网里搭建微信后台&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;它不仅可以映射http协议，还可以映射普通的tcp．&lt;/p&gt;
&lt;p&gt;就是说它不仅可以把你的局域网里的网站映射到外网，还可以把ssh映射到外网．实现外网登陆ssh&lt;/p&gt;
&lt;p&gt;具体用途，自己发挥想象&lt;/p&gt;
&lt;h3&gt;让外网ip可以登陆内网ssh&lt;/h3&gt;
&lt;p&gt;把内部网站映射到外网和把微信后台映射出去完全相同，我之前写过博客，就不赘述了．&lt;/p&gt;
&lt;p&gt;今天讨论把ssh的22号端口映射出去&lt;/p&gt;
&lt;p&gt;十分简单&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ngrok.com/download"&gt;下载&lt;/a&gt;完ngrok后，解压到当前文件夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./ngrok -proto=tcp 22
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行以上代码，返回类似信息&lt;code&gt;tcp://ngrok.com:50292 -&amp;gt; 127.0.0.1:22&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是我们就可以外网登陆了．&lt;/p&gt;
&lt;pre&gt;
ssh username@ngrok.com -p 50292
&lt;/pre&gt;

&lt;h3&gt;更多定制&lt;/h3&gt;
&lt;p&gt;比如定制二级域名&lt;/p&gt;
&lt;p&gt;付费的话还可以绑定域名&lt;/p&gt;
&lt;p&gt;参考&lt;a href="https://ngrok.com/usage"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dorole.com/tag/ngrok/"&gt;这篇&lt;/a&gt;参考文章也很棒&lt;/p&gt;
&lt;h3&gt;tcp相关&lt;/h3&gt;
&lt;p&gt;./ngrok -proto=tcp &lt;port&gt;&lt;br /&gt;
使用tcp的话,通用性更强，http能做到的tcp自然都行。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jun 2014 00:00:00 -0000</pubDate><guid>tag:,2014-06-10:use-ngrok.html</guid><category>ngrok</category></item><item><title>geeknote使用笔记</title><link>/use-geeknote.html</link><description>&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;p&gt;经常需要ssh远程电脑，有时只有纯粹的命令行。&lt;/p&gt;
&lt;p&gt;习惯把笔记放在印象笔记了。一些操作指令，以及技术笔记之类。&lt;/p&gt;
&lt;p&gt;于是希望能在命令行下看印象笔记。&lt;/p&gt;
&lt;h3&gt;geeknote&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/VitaliyRodnenko/geeknote"&gt;Geeknote&lt;/a&gt; is a command line client for &lt;code&gt;Evernote&lt;/code&gt; that can be use on Linux, FreeBSD and OS X.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它是用python写的。Geeknote只能用evernote账号登陆，如果我们要用印象笔记的话，需要使用&lt;a href="https://github.com/gmajian/geeknote"&gt;这个fork版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他们除了允许使用的账号不同，其他没有区别。&lt;/p&gt;
&lt;p&gt;以下我们安装的都是印象笔记版&lt;/p&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/gmajian/geeknote.git
cd geeknote
sudo python setup.py install

##https://github.com/neilagabriel/vim-geeknote vim插件
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用笔记&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geeknote login&lt;/code&gt;:登陆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geeknote logout&lt;/code&gt;:登出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geeknote --help&lt;/code&gt;:帮助，列出可用的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;发挥它&lt;/h3&gt;
&lt;p&gt;同时可以把它当做一个共享区来用&lt;/p&gt;
&lt;h4&gt;使用&lt;a href="http://www.geeknote.me/documentation/#gnsync-synchronization-app"&gt;gnsync&lt;/a&gt;来同步文件&lt;/h4&gt;
&lt;p&gt;官方给的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gnsync --path /home/project/xmpp/logs/
         --mask &lt;span class="s2"&gt;&amp;quot;*.logs&amp;quot;&lt;/span&gt;
         --logpath /home/user/logs/xmpp2evernote.log
         --notebook &lt;span class="s2"&gt;&amp;quot;XMPP logs&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 05 Jun 2014 00:00:00 -0000</pubDate><guid>tag:,2014-06-05:use-geeknote.html</guid><category>ubuntu</category></item><item><title>django笔记之fixtures</title><link>/use-fixtures.html</link><description>&lt;p&gt;主要参考&lt;a href="https://docs.djangoproject.com/en/dev/howto/initial-data/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;为何用它&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Providing initial data for models&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Where Django finds fixture files&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, Django looks in the &lt;code&gt;fixtures&lt;/code&gt; directory inside each app for fixtures. You can set the FIXTURE_DIRS setting to a list of additional directories where Django should look.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;相关指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py loaddata APPNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata APPNAME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;导出数据&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata-app-label-app-label-app-label-model"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata APPNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The output of dumpdata can be used as input for loaddata.&lt;/li&gt;
&lt;li&gt;Outputs to standard output all data in the database associated &lt;code&gt;with the named application(s)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By default dumpdata will output all the serialized data to standard output. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;导入数据&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-loaddata"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata APPNAME&lt;/code&gt;,会自动加载APPNAME/fixtures/xx.json&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实例演示&lt;/h3&gt;
&lt;p&gt;需求:对myblog(一个app)的数据进行导出与导入&lt;/p&gt;
&lt;h4&gt;导出&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata myblog&amp;gt;mydata.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将mydata.json剪切到myblog/fixtures文件夹下&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;导入&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py loaddata myblog&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 -0000</pubDate><guid>tag:,2014-05-30:use-fixtures.html</guid><category>django</category></item><item><title>sshuttle使用笔记</title><link>/use-sshuttle.html</link><description>&lt;h3&gt;sshuttle是什么&lt;/h3&gt;
&lt;p&gt;闲逛github时看到基于 python 的 sshuttle&lt;/p&gt;
&lt;p&gt;sshuttle被称为穷人的VPN.就是说它是免费的.&lt;/p&gt;
&lt;p&gt;仅仅免费其实不够诱人,让我动心的是它的简单,而且可以在&lt;code&gt;纯命令行&lt;/code&gt;下使用.&lt;/p&gt;
&lt;p&gt;理论上vpn也是可以在纯命令行下使用的,我先后按照几个教程,都未成功.当然图形界面配置vpn很简单.&lt;/p&gt;
&lt;p&gt;可问题是我必须在远程服务器上使用vpn(当然是用ssh登陆), 更新部署代码 , 需要连接国外服务器.&lt;/p&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(ubuntu下)首先安装它: &lt;code&gt;sudo apt-get install sshuttle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sshuttle -r action@apne1.nitrousbox.com:22411  0.0.0.0/0 -vv&lt;/li&gt;
&lt;li&gt;搞定 , 就这么简单
注意action@apne1.nitrousbox.com:22411是我的ssh,你可以用你自己的,格式为username@sshserver,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我把sshserver理解为跳板机,在我的需求中,需要有一个国外的ssh账号,你有国外的vps的话就好办了,没有也没关系,感谢云平台的的兴起,我们只要注册&lt;a href="https://www.nitrous.io"&gt;nitrous&lt;/a&gt;,就能有一个免费的ssh账号. &lt;/p&gt;
&lt;p&gt;如果你使用&lt;a href="https://www.nitrous.io"&gt;nitrous&lt;/a&gt;记得每次使用时登录后把它打开.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;14.9.26号更新&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nitrous.io"&gt;nitrous&lt;/a&gt;好像最近网络也有问题了，可以试试&lt;a href="https://www.openshift.com"&gt;openshift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;that`s all.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 -0000</pubDate><guid>tag:,2014-05-30:use-sshuttle.html</guid><category>ssh</category></item><item><title>django1.7试用</title><link>/try-to-use-django1.7.html</link><description>&lt;p&gt;django1.7是django一个具有里程碑性质的版本.&lt;/p&gt;
&lt;p&gt;我们先来看下官方的介绍:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.7 is shaping up to be the biggest Django release since 1.0. It has a new app loading framework, a new checks framework, many improvements to query construction, and most importantly - Migrations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中最惹人注目的是&lt;code&gt;Migrations&lt;/code&gt;,负责数据库表结构自动迁移,这个工作原先是由South来做的.现在是django原生功能啦!&lt;/p&gt;
&lt;p&gt;它有多炫呢?我们通过例子来说明.&lt;/p&gt;
&lt;h3&gt;搭建环境&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
mkdir djangotest
&lt;span class="nb"&gt;cd&lt;/span&gt; djangotest
virtualenv django1.7
&lt;span class="nb"&gt;source&lt;/span&gt; django1.7/bin/activate
pip install https://github.com/django/django/archive/1.7b3.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;创建项目&lt;/h3&gt;
&lt;p&gt;承上.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin startproject mysite
&lt;span class="nb"&gt;cd&lt;/span&gt; mysite
python manage.py startapp blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将blog加入settings.py的INSTALL_APP里.  &lt;/p&gt;
&lt;p&gt;编辑blog/models.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回到项目根目录执行:&lt;code&gt;python manage.py syncdb&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;改变model&lt;/h3&gt;
&lt;p&gt;现在我想为Blog添加content属性.怎么办呢?&lt;br /&gt;
简单,直接将blog/models.py改为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样是不够的,我们需要将数据库也同步,在django1.7以前,我们有两条解决方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用manage提供的sqlall生成sql语句,然后手动在数据库中执行sql语句.这在djangobook中由介绍&lt;/li&gt;
&lt;li&gt;使用south&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用django就容易多了.&lt;/p&gt;
&lt;p&gt;我们只需执行两条指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py makemigrations
python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;搞定!&lt;br /&gt;
需要说明的是新加的属性,需要default参数,否则无法执行.&lt;/p&gt;
&lt;p&gt;enjoying it~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 May 2014 00:00:00 -0000</pubDate><guid>tag:,2014-05-13:try-to-use-django1.7.html</guid><category>django</category></item><item><title>python学习笔记之数据分析(一)</title><link>/python_for_data_analysis_1.html</link><description>&lt;p&gt;对数据分析的兴趣倒不是盲目追随"大数据"热.&lt;/p&gt;
&lt;p&gt;之前朋友需要处理一些xls数据(来自医院),做些统计分析,对药效给出分析结论.我跃跃欲试,觉得应该挺有意思,当时我的大体思路是这样的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先,将数据导出成csv文件.&lt;/li&gt;
&lt;li&gt;使用peewee建立对象模型,其实是想借用sql本身具有的查询统计功能&lt;/li&gt;
&lt;li&gt;解析csv到对象模型中&lt;/li&gt;
&lt;li&gt;分析处理对象集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际操作很繁琐,遇到的一些经典问题如数据缺失之类.&lt;/p&gt;
&lt;p&gt;后台偶然的机会在图书馆看到这本书&lt;code&gt;利用Python进行数据分析&lt;/code&gt;(Python for Data Analysis),十分喜欢.&lt;/p&gt;
&lt;p&gt;在去西安的路上也带着,一夜车程看了100来页,反而把小说搁在一边了.&lt;/p&gt;
&lt;p&gt;涉及的一些工具(库)如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numpy/numpy"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matplotlib/matplotlib"&gt;matplotlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython"&gt;IPython&lt;/a&gt;,书中大多实验实在&lt;code&gt;ipython notebook&lt;/code&gt;下做的&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scipy/scipy"&gt;SciPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书的&lt;a href="https://github.com/pydata/pydata-book"&gt;代码&lt;/a&gt; 也托管在github上.包括需要使用的数据都包含在内.阅读时跟着例子做是很好的学习放法&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 24 Apr 2014 00:00:00 -0000</pubDate><guid>tag:,2014-04-24:python_for_data_analysis_1.html</guid><category>python</category></item><item><title>在局域网中部署微信服务器</title><link>/locale-wechat.html</link><description>&lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;我想这个解决方案对许多在校生是十分有用的。&lt;/p&gt;
&lt;p&gt;喜欢折腾新技术的大多是我们这些在校学生。所以把这个方案分享给大家。&lt;/p&gt;
&lt;p&gt;对于我们，ip都是校内网的。也就是说它是局域网。&lt;/p&gt;
&lt;p&gt;而微信开发模式中服务器配置要求填写&lt;code&gt;公网ip&lt;/code&gt;，并且只允许&lt;code&gt;80端口&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解决方案有两种：&lt;/p&gt;
&lt;p&gt;1  买个vps或使用公有云（bae，sae神马的）&lt;/p&gt;
&lt;p&gt;vps太贵，bae,sae神马的调试很不方便。我采用了方案2&lt;/p&gt;
&lt;p&gt;2  穿透内网。首先想到的是花生壳，用于穿透内网，原理上是可行的，不过linux下使用极其麻烦&lt;br /&gt;
某天闲逛github的时候，发现这个东东&lt;a href="https://github.com/inconshreveable/ngrok"&gt;ngrok&lt;/a&gt; （伟大的github!!），它是跨平台的！！&lt;/p&gt;
&lt;p&gt;方案2最大的最大好处是你完全用你最熟悉的环境来开发！！&lt;/p&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;
&lt;p&gt;使用方法极其简单。&lt;br /&gt;
首先到官网里&lt;a href="https://ngrok.com/download"&gt;下载&lt;/a&gt;.  它是免安装的。
解压之后,进入目录，在终端里执行./ngrok [端口号]. 
该指令的意思是把[端口号]映射到外网。&lt;br /&gt;
之后终端里会有一个ngrok给你分配的地址，这样就映射成功了！&lt;/p&gt;
&lt;h3&gt;开始部署&lt;/h3&gt;
&lt;p&gt;首先在本地搭起微信后台（我使用&lt;a href="https://github.com/whtsky/WeRoBot/"&gt;WeRoBot&lt;/a&gt;这个框架）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd /tmp/&lt;/li&gt;
&lt;li&gt;pip install werobot&lt;/li&gt;
&lt;li&gt;新建weixin.py如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;werobot&lt;/span&gt;

&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;werobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WeRoBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tokenhere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#填写你的token&lt;/span&gt;

&lt;span class="nd"&gt;@robot.handler&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;python weixin.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好的，命令行提示我们在127.0.0.1:8888启动了服务&lt;/p&gt;
&lt;p&gt;接着我们只要把它映射到外网就行&lt;br /&gt;
回到ngrok解压目录下，执行&lt;code&gt;./ngrok 8888&lt;/code&gt;&lt;br /&gt;
我们将在命令行里看到一个&lt;code&gt;分配的地址&lt;/code&gt;，把它粘帖到&lt;code&gt;微信服务器配置&lt;/code&gt;里&lt;br /&gt;
这时候就可以调戏你的微信公众号啦。  &lt;br /&gt;
bingo~看到了吧，可爱又迷人的“hello world”出现了。&lt;br /&gt;
是的 ，就是这么简单，接下来的事就是发挥你的想像力的时间啦。 &lt;/p&gt;
&lt;p&gt;Enjoying it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 16 Apr 2014 00:00:00 -0000</pubDate><guid>tag:,2014-04-16:locale-wechat.html</guid><category>wechat</category></item><item><title>django笔记之Signals</title><link>/django-Signals.html</link><description>&lt;h3&gt;Signals是什么&lt;/h3&gt;
&lt;p&gt;为了回答这个问题，我们先来看下django官网对它的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django includes a “signal dispatcher” which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain senders to notify a set of receivers that some action has taken place. They’re especially useful when many pieces of code may be interested in the same events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是说：Django内部包含了一位“信号调度员”：当某事件在框架内发生时，它可以通知到我们的应用程序（处理函数）。 简而言之，当&lt;code&gt;event&lt;/code&gt;（事件）发生时，&lt;code&gt;signals&lt;/code&gt;（信号）允许若干 &lt;code&gt;senders&lt;/code&gt;（发送者）通知一组 receivers（接收者）。&lt;/p&gt;
&lt;p&gt;很像js的事件驱动模型。关于事件驱动，我在上一篇文章中有谈论，这里不多说。&lt;/p&gt;
&lt;h3&gt;有什么用的&lt;/h3&gt;
&lt;p&gt;在web开发中, 你可能会遇到下面这种场景:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在用户完成某个操作后, 自动去执行一些后续的操作. 譬如用户完成修改密码后,
你要发送一份确认邮件.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个操作可能会触发多个后续事件, 此时使用signals会非常方便. 我们可以想要一下应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sns中的事件通知, 如用户发表了一篇博文, 然后通知所有的好友&lt;/li&gt;
&lt;li&gt;用户信息的更改的邮件通知&lt;/li&gt;
&lt;li&gt;用户订制信息的邮件通知等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;
&lt;h4&gt;常用的信号集：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.signals.pre_save   model在save()前发送的信号&lt;/li&gt;
&lt;li&gt;django.db.models.signals.post_save  model在save()后发送的信号&lt;/li&gt;
&lt;li&gt;django.db.models.signals.pre_delete&lt;/li&gt;
&lt;li&gt;django.db.models.signals.post_delete&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;来自官网的例子&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#使用装饰器&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request_finished&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;

&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_finished&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Request finished!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connecting to signals sent by specific senders.&lt;/p&gt;
&lt;p&gt;就是说我们只处理&lt;code&gt;某个模型&lt;/code&gt;发出的信号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pre_save&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;

&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre_save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;自定义事件&lt;/h4&gt;
&lt;p&gt;在此使用&lt;a href="http://django-china.cn/topic/151/"&gt;一休哥&lt;/a&gt;同学给的例子，也是Django中现成的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#file：django\db\models\signals.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;
&lt;span class="n"&gt;post_syncdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;providing_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;created_models&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s2"&gt;&amp;quot;verbosity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;interactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;#-----------------------------------&lt;/span&gt;

&lt;span class="c1"&gt;#file：django\contrib\contenttypes\management.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;
&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_syncdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_contenttypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#-----------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;#file：django\core\management\sql.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;emit_post_sync_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;created_models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Emit the post_sync signal for every application.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_apps&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbosity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Running post-sync handlers for application &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_syncdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;created_models&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;created_models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更具体的实例可以参考:&lt;a href="http://www.cnblogs.com/mindsbook/archive/2009/10/27/django_signal.html"&gt;django拾遗之signal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.6/topics/signals/"&gt;django官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn/topic/151/"&gt;浅谈django的信号机制 Signals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/mindsbook/archive/2009/10/27/django_signal.html"&gt;django拾遗之signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 15 Apr 2014 00:00:00 -0000</pubDate><guid>tag:,2014-04-15:django-Signals.html</guid><category>django</category></item><item><title>nodejs学习笔记之入门</title><link>/nodejs-learning-1.html</link><description>&lt;p&gt;对js的兴趣由来已久，倒不是对这门语言有什么好感，而是对它能做的事很感兴趣。web的世界太美妙了。nodejs的横空出世，更是让这门语言被视为将统一网络编程的霸主。&lt;/p&gt;
&lt;p&gt;加之对函数式的偏爱，最终决定好好学习js。js有披着C外衣的Lisp的称号，其对函数式编程的支持还是很好的，函数是一等公民。支持闭包。支持lambda算子，关键的是，写的代码能马上在浏览器里执行，很让人兴奋。&lt;/p&gt;
&lt;p&gt;之前其实也看过一些书籍，却一直对js没有好感，对于习惯了面向对象，习惯了python的我来说，读js简直就觉是一种回到史前的感觉，糟糕的全局变量，没有模块的概念，困难的调试...还好后来遇到jquery，虽说平时也能写些前端代码，可总觉得js不像一门语言，整天在折腾些鸡毛蒜皮的琐事，一会添加一个dom元素，一会修改一些元素属性。丝毫没有编程的感觉。&lt;/p&gt;
&lt;p&gt;态度的转变从学习nodejs开始，在学习node的过程中，似乎突然就懂了js是什么了，有了编程的感觉，之前写前端代码时总觉得像个使用者而不是开发者。正如Manuel在他那本很棒的node教程里说的：这次是玩真的了。&lt;/p&gt;
&lt;p&gt;前些日子，看了不少lisp/函数式编程的东西，虽说觉得函数式确实很美好，好比：把函数当变量传递 /引用透明性 /没有"副作用"   /让我们方便地使用递归 /describe what to do, rather than how to do it
可怎么用它，还是没有感性的认识。&lt;/p&gt;
&lt;p&gt;下午在图书馆看书(《了不起的nodejs》)的时候,忽然豁然开朗了，我想这样算是入门了吧。&lt;br /&gt;
想起许多之前读多的话，现在看来，人家都说得那么清楚了，我当时怎么就没有领悟呢。
诸如：
我们大多时候需要的是动作。就是说我们需要动词而不是名词。函数而不是对象！&lt;/p&gt;
&lt;p&gt;我想理解以下几个词就差不多理解js（nodejs）了 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;回调函数（响应）&lt;/li&gt;
&lt;li&gt;事件驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看websocket（socket.io）的时候，例子是用socket.io制作一个聊天室。有些心得也记下，未必有条理，更多的是抓住当时电光火石的感觉，对我个人而言能帮助我回忆当时的想法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信&lt;/li&gt;
&lt;li&gt;持久链接&lt;/li&gt;
&lt;li&gt;事件驱动&lt;/li&gt;
&lt;li&gt;回调&lt;/li&gt;
&lt;li&gt;分发事件(广播)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的概念往往是互相关联的。&lt;/p&gt;
&lt;p&gt;对于事件驱动，当时写下这段话：大多的东西都是辨识（自定义事件），好比代码只是字符串，对我们的逻辑进行划分，使其清晰化才是关键。代码可以视为是对逻辑的划分与标识”&lt;br /&gt;
好吧，我的表达能力估计很弱，只能表达到这么混乱的程度了。&lt;br /&gt;
很羡慕《代码大全》的作者，能把很晦涩的东西说得简单清晰。&lt;br /&gt;
keep it simple and stupid 才是大师。&lt;br /&gt;
虽说表达得不清晰，但还是先记录下来吧。  &lt;/p&gt;
&lt;p&gt;函数式果然是靠顿悟的啊，某个晴朗的午后，阅读代码的时候，恍然，原来还可以这样！其实本该这样啊！&lt;/p&gt;
&lt;p&gt;激动之余在朋友圈里发了个状态：&lt;br /&gt;
...天河倒灌，星月逆行说不定就是这种感觉吧...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0000</pubDate><guid>tag:,2014-04-13:nodejs-learning-1.html</guid><category>js</category></item><item><title>django笔记之项目布局</title><link>/django-begin.html</link><description>&lt;h2&gt;内容摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django最佳实践&lt;/li&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;布局实例（托管在github上，大家可以直接使用，也欢迎fork）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个好的项目布局，能让项目结构更加清晰，这样更有利于维护与扩展，也利于团队协作。&lt;/p&gt;
&lt;p&gt;大体上遵循&lt;a href="#"&gt;django最佳实践&lt;/a&gt;，只有一些部分做了微调。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 -0000</pubDate><guid>tag:,2014-03-20:django-begin.html</guid><category>django</category></item><item><title>django笔记之用户系统</title><link>/django-user.html</link><description>&lt;h2&gt;内容摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django-userena&lt;/li&gt;
&lt;li&gt;profiles&lt;/li&gt;
&lt;li&gt;验证码&lt;/li&gt;
&lt;li&gt;短信认证功能&lt;/li&gt;
&lt;li&gt;邮件认证功能&lt;/li&gt;
&lt;li&gt;权限管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;关于django-userena的profiles可以参考以下资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django-userena&lt;/h3&gt;
&lt;h3&gt;profiles&lt;/h3&gt;
&lt;h3&gt;验证码&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 -0000</pubDate><guid>tag:,2014-03-20:django-user.html</guid><category>django</category></item><item><title>git学习笔记之项目开发与部署</title><link>/git-learn.html</link><description>&lt;p&gt;最近参与一个团队开发的项目，惊叹于git的威力。&lt;/p&gt;
&lt;p&gt;做个笔记备忘。&lt;/p&gt;
&lt;p&gt;项目开发中，需要git支持的地方大约有这些：
&lt;em&gt;  分支,我目前负责羡慕的重构新建了一个Refactoring_medmeeting分支。
&lt;/em&gt;  将托管库中我的分支的更新同步到测试服务器上。&lt;/p&gt;
&lt;h3&gt;具体操作&lt;/h3&gt;
&lt;p&gt;假设我们的项目文件夹是mysite.&lt;/p&gt;
&lt;h4&gt;开发环境&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看现有分支&lt;code&gt;git brance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建分支Refactoring_medmeeting：&lt;code&gt;git brance Refactoring_medmeeting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换到分支下&lt;code&gt;git checkout Refactoring_medmeeting&lt;/code&gt;,之后我们的&lt;code&gt;commit&lt;/code&gt;都会提交到Refactoring_medmeeting分支上&lt;/li&gt;
&lt;li&gt;将'commit'的内容同步到远程的同名分支上，&lt;code&gt;git push origin Refactoring_medmeeting:Refactoring_medmeeting&lt;/code&gt; ,c初次执行时，会在远程生成同名分支Refactoring_medmeeting。之后仅仅是提交&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;远程测试服务器&lt;/h4&gt;
&lt;p&gt;在测试服务器，我需要对自己的分支进行测试。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先克隆项目&lt;/li&gt;
&lt;li&gt;查看远程分支:&lt;code&gt;git branch -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git checkout  -b Refactoring_medmeeting origin/Refactoring_medmeeting&lt;/li&gt;
&lt;li&gt;当前处于Refactoring_medmeeting分支,之后的git pull 都是在当前分支进行&lt;/li&gt;
&lt;li&gt;当git仓库中Refactoring_medmeeting分支更新时，需要把它同步到测试服务器。只需要&lt;code&gt;git pull&lt;/code&gt;就行&lt;/li&gt;
&lt;li&gt;由于开发环境使用sqlite,所以git pull会覆盖之前数据库，git会问题是否这样做，同意的话&lt;code&gt;git reset --hard&lt;/code&gt;，&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由于是测试环境，有些时候遇到冲突，使用了强制执行。加个参数 &lt;code&gt;-f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;修改Git remote add时使用的远程仓库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;git remote rm origin &lt;/li&gt;
&lt;li&gt;git remote add origin git@xxx&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 -0000</pubDate><guid>tag:,2014-03-20:git-learn.html</guid><category>git</category></item><item><title>django笔记之Generic views</title><link>/django-Generic-views.html</link><description>&lt;p&gt;为何要使用通用视图呢，一步步地定义url，写函数取数据，渲染模板不也能完成任务么？仅仅因为这些函数比较高级，我们就得学，为了证明自己django用的熟练？当然不是啦，djangobook中有一段话很好地回答了&lt;code&gt;why&lt;/code&gt;的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在最坏的情况下， Web开发是一项无聊而且单调的工作（大多情况还是很有趣的啦～）。在视图的层面上，也经历着这种令人厌倦的事情。Django的通用视图可以减少这些痛苦。 它抽象出一些在视图开发中常用的代码和&lt;code&gt;模式&lt;/code&gt;，这样就可以在无需编写大量代码的情况下，快速编写出常用的数据视图。 事实上，前面章节中的几乎所有视图的示例都可以在通用视图的帮助下重写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;'技术让生活更美好'，我们只是想拥有更多的时间陪喜欢的人，做喜欢的事，更多的时间出游，看书，睡懒觉。所以我们需要更高级的工具来节省时间，提高效率。那么我们还有什么理由不好好学习高级工具呢。&lt;br /&gt;
好的既然值得学习，我们趁热打铁进入内容部分吧。  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://djangobook.py3k.cn/2.0/chapter11/"&gt;Djangobook第11章&lt;/a&gt;中说内建通用视图可以实现如下功能：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成常用的简单任务： 重定向到另一个页面以及渲染一个指定的模板。  &lt;/li&gt;
&lt;li&gt;显示列表和某个特定对象的详细内容页面。     &lt;/li&gt;
&lt;li&gt;呈现基于日期的数据的年/月/日归档页面，关联的详情页面，最新页面。像是典型的新闻报纸归档。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是极其常见的需求，尤其是在一个新闻发布系统中，而大多企业建站需要的仅仅是个新闻发布系统而已。  &lt;/p&gt;
&lt;h3&gt;使用举例：&lt;/h3&gt;
&lt;h4&gt;direct_to_template&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#url.py&lt;/span&gt;
&lt;span class="c1"&gt;#coding=utf-8&lt;/span&gt;
&lt;span class="c1"&gt;#呈现静态“关于”页面&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.simple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^about/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;direct_to_template视图仅仅是直接从传递过来的额外参数获取信息并用于渲染视图。&lt;br /&gt;
这样就不用为了呈现一个静态页，mvc都得走一遍。&lt;br /&gt;
direct_to_template 。 因为它返回一个&lt;code&gt;HttpResponse&lt;/code&gt;对象，我们只需要简单的返回它就好了。例如可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;about/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.html&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;TemplateDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;其他通用视图也是同理。&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;对象的通用视图&lt;code&gt;list_detail&lt;/code&gt;(使用&lt;code&gt;djangobook&lt;/code&gt;中的例子)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;state_province&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mysite.books.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;

&lt;span class="n"&gt;publisher_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;queryset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;template_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;publisher_list_page.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^publishers/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publisher_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么通用视图究竟有哪些可选的参数呢，可以参考这里&lt;a href="http://www.djangobook.com/en/2.0/appendixC.html"&gt;Appendix C: Generic View Reference&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_empty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特别说明下context字典项会被模板使用。如果不指定模板，该函数将使用[app_name]/[model_name]_list.html作为模板，这很有些&lt;code&gt;约定优于配置&lt;/code&gt;味道。&lt;/p&gt;
&lt;p&gt;object_list函数创建的&lt;code&gt;context&lt;/code&gt;中会包含许多字典项：
&lt;a href="http://blog.csdn.net/thinkinside/article/details/7251130"&gt;深入Django(1): 通用视图 (generic views)&lt;/a&gt;这篇博客给出了详细的中文注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object_list          要显示的对象的list&lt;/li&gt;
&lt;li&gt;is_paginated         是否分页 &lt;/li&gt;
&lt;li&gt;results_per_page    如果分页，存储每页记录数&lt;/li&gt;
&lt;li&gt;has_next             是否有下一页&lt;/li&gt;
&lt;li&gt;has_previous       是否有上一页&lt;/li&gt;
&lt;li&gt;page                 当前页码&lt;/li&gt;
&lt;li&gt;next                 下一页&lt;/li&gt;
&lt;li&gt;previous             上一页&lt;/li&gt;
&lt;li&gt;pages                 总页数&lt;/li&gt;
&lt;li&gt;hits                 总条目数&lt;/li&gt;
&lt;li&gt;last_on_page       本页最后录一条记录的序数（从1开始）&lt;/li&gt;
&lt;li&gt;first_on_page       本页第一条记录的序数（从1开始）&lt;/li&gt;
&lt;li&gt;page_range          页码范围的列表  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果这些context字典项不能满足你的需要，还可以通过指定extra_context参数，传入一个字典，该字典中的内容会被合并到context字典中。我们接下去说如何扩展通用视图，go on ～&lt;/p&gt;
&lt;h4&gt;扩展通用视图&lt;/h4&gt;
&lt;p&gt;在我们最开始举的publisher例子中（来自djanobook），可以这样扩展context字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publisher_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;queryset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;template_object_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;publisher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="c1"&gt;#这是错的！！使用下面一个&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就把一个 {{ book_list }} 变量放到模板的context中。 这个方法可以用来传递任意数据 到通用视图模板中去，这是非常方便的.  &lt;br /&gt;
需要注意的是all()不可立刻触发，应当由请求事件来触发，因此作为函数传递，不写().这是一个函数的引用，并没有真正调用它（通用视图将会在渲染时调用它）。&lt;br /&gt;
还有就是选项'queryset'仅仅是普通的queryset，你可以用对象的子集，比如&lt;code&gt;'queryset':Publisher.objects.filter(name='Harry')&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;当数据过滤比较复杂时&lt;/h3&gt;
&lt;p&gt;这是我们可以把通用视图写到函数里，前头说过&lt;code&gt;通用视图返回一个&lt;/code&gt;HttpResponse&lt;code&gt;对象&lt;/code&gt;，我们提供参数返回它就好，故而用在views中是没问题的，像酱紫：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^publishers/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publisher_info&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^books/(\w+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;books_by_publisher&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mysite.books.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;books_by_publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Look up the publisher (and raise a 404 if it can&amp;#39;t be found).&lt;/span&gt;
    &lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name__iexact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Use the object_list view for the heavy lifting.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;books/books_by_publisher.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;template_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extra_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;publisher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我的个人习惯是直接查阅源码来得快些。推荐使用github的库内搜索功能，比如我们搜索django，之后在django项目中搜索object_list，这样每回遇到新的库，不一定非要下载到本地看代码样随时随地想起来都可以查阅，甚至火车晚点时，可以用手机看看源码。读源码也挺有意思的。许多大项目，源码都写得十分漂亮。&lt;/p&gt;
&lt;p&gt;好了，你现在有了更高效的工具了，因此节约出来的时间可以陪小伙伴去玩耍啦&lt;/p&gt;
&lt;h3&gt;Django提供的其他通用视图&lt;/h3&gt;
&lt;p&gt;我们用&lt;a href="http://blog.csdn.net/thinkinside/article/details/7251130"&gt;深入Django(1): 通用视图 (generic views)&lt;/a&gt;中归纳的：&lt;/p&gt;
&lt;p&gt;分布在几个模块中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django.views.generic.list_detail模块&lt;/li&gt;
&lt;li&gt;object_list      显示模型对象列表    &lt;/li&gt;
&lt;li&gt;object_detail  显示单个模型对象&lt;/li&gt;
&lt;li&gt;django.views.generic.create_update模块&lt;/li&gt;
&lt;li&gt;create_object    创建模型对象&lt;/li&gt;
&lt;li&gt;update_object   修改模型对象&lt;/li&gt;
&lt;li&gt;delete_object    删除模型对象 &lt;/li&gt;
&lt;li&gt;django.views.generic.simple模块&lt;/li&gt;
&lt;li&gt;direct_to_template   直接使用指定的模板渲染给定的context对象&lt;/li&gt;
&lt;li&gt;redirect_to   重定向到指定的url&lt;/li&gt;
&lt;li&gt;django.views.generic.date_based模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个模块主要处理“按时间查看存档”的功能，来源于新闻出版行业。具体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archive_index   最顶级的归档，列出所有年份及指定数量的最新对象&lt;/li&gt;
&lt;li&gt;archive_year     按年归档，列出所有拥有对象的月份&lt;/li&gt;
&lt;li&gt;archive_month   按月归档，列出本月的所有对象，找到拥有对象的上一个、下一个月份&lt;/li&gt;
&lt;li&gt;archive_week     按周归档，列出本周的所有对象&lt;/li&gt;
&lt;li&gt;archive_day     按日归档，列出当天的所有对象，找到拥有对象的上一个、下一个日期&lt;/li&gt;
&lt;li&gt;archive_today     当前日期（今天）的按日归档&lt;/li&gt;
&lt;li&gt;object_detail     显示按照年/月/日/序号找到的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩下的就是查阅文档，了解参数了。  &lt;/p&gt;
&lt;p&gt;我的个人习惯是直接查阅源码来得快些。推荐使用github的库内搜索功能，比如我们搜索django，之后在django项目中搜索object_list，这样每回遇到新的库，不一定非要下载到本地看代码样随时随地想起来都可以查阅，甚至火车晚点时，可以用手机看看源码。读源码也挺有意思的。许多大项目，源码都写得十分漂亮。&lt;/p&gt;
&lt;h3&gt;参考资料：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/chapter11/"&gt;djangobook第11章&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/thinkinside/article/details/7251130"&gt;深入Django(1): 通用视图 (generic views)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/appendixC.html"&gt;Appendix C: Generic View Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Mar 2014 00:00:00 -0000</pubDate><guid>tag:,2014-03-11:django-Generic-views.html</guid><category>django</category></item><item><title>django笔记之富文本编辑器</title><link>/django-WYSIWYG.html</link><description>&lt;p&gt;个人而言我更喜欢markdown，django中配置使用markdown很简单。一两分钟的功夫而已。就不在这里说了。  &lt;br /&gt;
对于普通用户，还是更喜欢富文本编辑器的。  &lt;/p&gt;
&lt;h3&gt;Ueditor&lt;/h3&gt;
&lt;p&gt;我们重点说说这个编辑器。之后会给出一些常见需求的定制化的方案，可能手法有些暴力。
国内的话，百度开源出来的Ueditor很赞，资料也挺全，反正我最近的项目都在用它。&lt;br /&gt;
别急着各种埋头配置啦，干活之前不妨先逛逛github，常常有惊喜哦～&lt;br /&gt;
搜索django ueditor，果然出来一个&lt;a href="https://github.com/zhangfisher/DjangoUeditor"&gt;DjangoUeditor&lt;/a&gt;，貌似人家都帮我们集成好了！！&lt;br /&gt;
按照说明，分分钟配置好，python manage.py runserver ...能用！！就这么简单！！ 
省下的时间陪你的妹子，看你书去吧。
github，你，值得拥有～&lt;/p&gt;
&lt;p&gt;好的，下面我们来说几个定制化问题：（挺常见的需求）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前两天在django技术群里帮一妹子（她非坚持说比我早毕业两年，应当喊姐姐。。）解决了些小问题，她之前使用TinyMCE，无法本地上传图片，我对TinyMCE不太熟，于是推荐DjangoUeditor给她，她觉得默认的功能按钮太少，想使用全功能的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个好办：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#settings.py&lt;/span&gt;
&lt;span class="n"&gt;UEDITOR_SETTINGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;toolbars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;testb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;images_upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;max_size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;asd&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;scrawl_upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scrawlabc&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;容易看出我们应当在toolbars这里配置功能按钮，testa，testb是功能面板名称,可选的参数看这里&lt;a href="https://github.com/campaign/ueditor/blob/master/ueditor.config.js"&gt;ueditor.config.js&lt;/a&gt;，有这些：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontborder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strikethrough&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;superscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;removeformat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;formatmatch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;autotypeset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blockquote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pasteplain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;forecolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backcolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertunorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cleardoc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;rowspacingtop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rowspacingbottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lineheight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;customstyle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontfamily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;directionalityltr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directionalityrtl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;indent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;justifyleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifycenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyjustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touppercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tolowercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unlink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagenone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagecenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;insertimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;emotion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scrawl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertvideo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gmap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insertcode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;webapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pagebreak&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;horizontal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spechars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;snapscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wordimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;inserttable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertparagraphbeforetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertrow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deleterow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertcol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletecol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergecells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergeright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittorows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;charts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preview&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;searchreplace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drafts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们把为toolbars添加一个mytoolbars,像这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;testb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;mytoolbars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontborder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strikethrough&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;superscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;removeformat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;formatmatch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;autotypeset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blockquote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pasteplain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;forecolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backcolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertunorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cleardoc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;rowspacingtop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rowspacingbottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lineheight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;customstyle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontfamily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;directionalityltr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directionalityrtl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;indent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;justifyleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifycenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyjustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touppercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tolowercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unlink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagenone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagecenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;insertimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;emotion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scrawl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertvideo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gmap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insertcode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;webapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pagebreak&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;horizontal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spechars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;snapscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wordimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;inserttable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertparagraphbeforetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertrow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deleterow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertcol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletecol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergecells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergeright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittorows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;charts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preview&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;searchreplace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drafts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在models.py里选用mytoolbars这个风格，像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UEditorField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;内容   &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;imagePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uploadimg/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;imageManagerPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;imglib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;toolbars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mytoolbars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;elementPathEnabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开后台，可以看到全功按钮板块。&lt;/p&gt;
&lt;p&gt;她说项目要求上传的本地图片必须把图片名字哈希&lt;code&gt;加密&lt;/code&gt;，由于近来略忙，我只想当然地给她讲了下思路：在自己重载form，在表单里拦截一下数据，在那里修改图片名字。或者在图片保存前修改。&lt;br /&gt;
她按照这个思路并没有成功，于是我看了下DjangoUeditor源码，似乎上传图片那块不是很常规，于是直接修改源码（这个习惯不好。。），我们先找到文件名的生成函数，就是这个&lt;a href="https://github.com/zhangfisher/DjangoUeditor/blob/master/DjangoUeditor/utils.py"&gt;GenerateRndFilename&lt;/a&gt;，&lt;code&gt;return "%s_%s%s%s"&lt;/code&gt;,改之～搞定。这种方法略暴力，DjangoUeditor的源码不复杂，似乎页不需要升级，这样不会带来什么兼容问题。暂时取个捷径。  大家估计开始鄙视我了。。  &lt;/p&gt;
&lt;p&gt;此外，需要注意的是：&lt;code&gt;xadmin&lt;/code&gt;中并不支持DjangoUeditor，
之前在django技术群中同xadmin的作者聊过 ，xadmin中并不支持DjangoUeditor，我们可以使用其他的富文本编辑器。这个东西已经帮我们做好配置的脏活了。好东西自然是在github里的，&lt;a href="https://github.com/sshwsfc/xadmin-cms"&gt;xadmin-cms&lt;/a&gt;,介绍中说：&lt;br /&gt;
Xcms 是 django-xadmin 的一套插件集, 包含制作 cms 系统需要的常用插件:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可见即可得编辑器&lt;/li&gt;
&lt;li&gt;树形组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于怎么用，自己跑一遍demo_app，看看里面的参数，参考注释修修改改就好了。蛋疼的是我的后台一直不显示富文本编辑器，django群里的一哥们说他的没问题，难道是我打开方式不对 囧，一直怀疑是xadmin版本的问题。xadmin-cms最新一次提交是11个月前。&lt;/p&gt;
&lt;p&gt;如果你非要在xadmin中使用Ueditor，参考下这篇文章&lt;a href="http://blog.csdn.net/u012762088/article/details/14497105"&gt;在django xadmin中使用 Ueditor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;===========分界线 14-3-20===============
在新闻发布系统中有一个需求其实挺常见的：在news_list(新闻列表)页显示摘要，一般而言需要将新闻中的第一张图片也放到这里。
这里解决方案很多，粗暴的方法比如在前台里&lt;code&gt;{{new.content}}&lt;/code&gt;(content用于保存新闻内容)，之后用js来做，取出图片置顶,多余的文本隐藏（我们并不知道图片在文本中的什么位置,所以有必要把文本全部显示出）。
很不优雅对吧，我们也可以这样解决，前台仅显示{{new.content_first_img|safe }} ,&lt;code&gt;{{new.content|slice:":200"|safe }}&lt;/code&gt;,这样语意很清晰有木有。
“代码是写给人看的，只是顺带能在机器上运行”
那么content_first_img是怎么实现的。
直接上代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#取出第一张图片的html，使用正则&lt;/span&gt;
        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_first_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#soup.first(&amp;quot;img&amp;quot;) #只返回第一个pic,需要转化为str，否则是对象&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_pic&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_pic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;News&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实质上我们就是重载了save()方法在，当然你需要为你的模型新建一个content_first_img字段，用于存储第一张图片
好了～。&lt;/p&gt;
&lt;h3&gt;TinyMCE&lt;/h3&gt;
&lt;p&gt;waiting&lt;/p&gt;
&lt;h3&gt;ckeditor&lt;/h3&gt;
&lt;p&gt;waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Mar 2014 00:00:00 -0000</pubDate><guid>tag:,2014-03-11:django-WYSIWYG.html</guid><category>django</category></item><item><title>django笔记之permalink函数</title><link>/django-permalink.html</link><description>&lt;p&gt;为了让项目更好维护，应当尽量减少硬编码，使用permalink能减少url硬编码。我们直接看下它的源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Decorator that calls urlresolvers.reverse() to return a URL using&lt;/span&gt;
&lt;span class="sd"&gt;    parameters returned by the decorated function &amp;quot;func&amp;quot;.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;func&amp;quot; should be a function that returns a tuple in one of the&lt;/span&gt;
&lt;span class="sd"&gt;    following formats:&lt;/span&gt;
&lt;span class="sd"&gt;        (viewname, viewargs)&lt;/span&gt;
&lt;span class="sd"&gt;        (viewname, viewargs, viewkwargs)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由此不难看出，permalink实质是一个装饰器。
其实在我之前的yunfan项目中就用了permalink，主要是受&lt;a href="https://github.com/nathanborror/django-basic-apps"&gt;'django-basic-apps'&lt;/a&gt;的启发，很认真地看过这个项目的源码，感觉写得挺好看的。带领大家弄懂permalink的原理后，我们再来看看permalink在django-basic-apps的groups模块中的应用，如此一来将理论与实践结合。&lt;/p&gt;
&lt;p&gt;好，废话不说，关于permalink，先看&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/instances/"&gt;django官网解释&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This decorator takes the name of a URL pattern (either a view name or a URL pattern name) and a list of position or keyword arguments and uses the URLconf patterns to construct the correct, full URL. It returns a string for the correct URL, with all parameters substituted in the correct positions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;balabala说了一堆，我们还是直接看例子吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^people/(\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;people.views.details&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="nd"&gt;@models.permalink&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;people.views.details&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="c1"&gt;#get_absolute_url一般是某个类的方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你的url更复杂时，你会更感激permalink,像这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;/archive/(?P&amp;lt;year&amp;gt;\d{4})/(?P&amp;lt;month&amp;gt;\d{2})/(?P&amp;lt;day&amp;gt;\d{2})/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;archive_view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是很常见的博客的url.&lt;br /&gt;
对应的model&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@models.permalink&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;archive_view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这里其实已经很明了了。archive_view是url函数，permalink会根据archive_view指向的模式以及提供的参数字典&lt;code&gt;反向解析&lt;/code&gt;出url，并且返回，至此，一切搞定。&lt;br /&gt;
如此一来,抽象地看，对象的url似乎是对象的方法，维护起来十分方便。
在模板里只要酱紫用就行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% archive.get_absolute_url %} 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多么清晰不是～&lt;/p&gt;
&lt;p&gt;好的，我们继续看下permalink在django-basic-apps的groups模块中的应用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="n"&gt;GROUP_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;r&amp;#39;(?P&amp;lt;slug&amp;gt;[-\w]+)/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;basic.groups.views.groups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GROUP_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Group model &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Used for the Group URL: http://example.com/groups/the-club/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="nd"&gt;@permalink&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;groups:group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;#group_list.html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ group.get_absolute_url }}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;良好的代码便是最好的注释，相信大家不须我解释都看懂啦~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 26 Feb 2014 00:00:00 -0000</pubDate><guid>tag:,2014-02-26:django-permalink.html</guid><category>django</category></item><item><title>wsgi学习笔记</title><link>/learning%20wsgi.html</link><description>&lt;p&gt;参考资料在文后列出，本文只是作为我个人的备忘，做个小结，如果想要了解更多细节，欢迎阅读文后参考资料。&lt;/p&gt;
&lt;p&gt;wsgi基本处理模式为 ： &lt;code&gt;WSGI Server&lt;/code&gt; -&amp;gt; &lt;code&gt;WSGI Middleware&lt;/code&gt;-&amp;gt; &lt;code&gt;WSGI Application&lt;/code&gt;
逐一学习以上三个部分。&lt;/p&gt;
&lt;h3&gt;WSGI Server/gateway&lt;/h3&gt;
&lt;h4&gt;功能&lt;/h4&gt;
&lt;p&gt;接收request请求，封装一系列环境变量，按照wsgi规范调用注册的wsgi app，最后将response返回给客户端。&lt;/p&gt;
&lt;h4&gt;基本工作流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;服务器创建socket，监听端口，等待客户端连接。&lt;/li&gt;
&lt;li&gt;当有请求来时，服务器解析客户端信息放到环境变量environ中，并调用绑定的handler来处理请求。&lt;/li&gt;
&lt;li&gt;handler解析这个http请求，将请求信息例如method，path等放到environ中。&lt;/li&gt;
&lt;li&gt;wsgi handler再将一些服务器端信息也放到environ中，最后服务器信息，客户端信息，本次请求信息全部都保存到了环境变量environ中。&lt;/li&gt;
&lt;li&gt;wsgi handler 调用注册的wsgi app，并将environ和回调函数传给wsgi app&lt;/li&gt;
&lt;li&gt;wsgi app 将reponse header/status/body 回传给wsgi handler&lt;/li&gt;
&lt;li&gt;最终handler还是通过socket将response信息塞回给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;WSGI Application&lt;/h3&gt;
&lt;p&gt;wsgi application就是一个普通的callable对象，当有请求到来时，wsgi server会调用这个wsgi app。
这个对象接收两个参数，通常为environ和start_response。（理解为协议接口）.&lt;br /&gt;
environ就像前面介绍的，可以理解为环境变量，跟一次请求相关的所有信息都保存在了这个环境变量中，包括服务器信息，客户端信息，请求信息。start_response是一个callback函数，wsgi application通过调用start_response，将response headers/status 返回给wsgi server。此外这个wsgi app会return 一个iterator对象 ，这个iterator就是response body。&lt;br /&gt;
对着下面这个简单的例子看就明白很多了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;This is hello wsgi app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再用wsgiref 作为wsgi server ，然后调用这个wsgi app，就能直观看到一次request,response的效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiref.simple_server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;This is hello wsgi app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Serving on port 8000...&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此外，上面讲到了wsgi app只要是一个callable对象就可以了，因此不一定要是函数，一个实现了__call__方法的实例也可以&lt;/p&gt;
&lt;h3&gt;WSGI Middleware&lt;/h3&gt;
&lt;p&gt;上面的application看起来没什么意思，感觉没有太大用，但加上一层层的middleware包装之后就不一样了。&lt;/p&gt;
&lt;p&gt;以下例子用来实现URL路由：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiref.simple_server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;

&lt;span class="n"&gt;URL_PATTERNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hi/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;say_hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;say_hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dispatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URL_PATTERNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                   &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404 NOT FOUND&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Page dose not exists!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kenshin say hi to you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kenshin say hello to you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dispatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Serving on port 8000...&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#实际是装饰器模式，没有通过的话 提前返回  提示错误&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过这些middleware的包装，已经有点框架的感觉了。其实基于wsgi的框架，例如paste,pylons就是这样通过一层层middleware组合起来的。只是一个成熟的框架，这样的middleware会有很多&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ErrorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;SessionMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;IdentificationMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="n"&gt;AuthenticationMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;UrlParserMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

&lt;span class="c1"&gt;#哪一层有问题就在那里提前退出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要这些Middleware符合wsgi规范，甚至还可以在各个框架之间组合重用。&lt;/p&gt;
&lt;p&gt;似乎写一个python web框架也不算太难～&lt;/p&gt;
&lt;p&gt;学习wsgi的感触：越是底层越是普适啊，越强大的抽象能力，也越接近于思想本身。各个框架不过是具体实现而已。就像柏拉图在《理想国》里说的 真实的事物只是对理念的模仿，唯有理念是不变的～
参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/sraing/article/details/8455242"&gt;WSGI的理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linluxiang.iteye.com/blog/799163"&gt;wsgi初探&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 23 Feb 2014 00:00:00 -0000</pubDate><guid>tag:,2014-02-23:learning wsgi.html</guid><category>python</category></item><item><title>一起赖床阅读吧</title><link>/web-wechat.html</link><description>&lt;p&gt;建了一个微信公众号，专注于优质文章的推送。&lt;br /&gt;
share with you ～&lt;/p&gt;
&lt;h3&gt;一起赖床阅读吧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;人间乐事，阅读、赖床。 &lt;/li&gt;
&lt;li&gt;每晚精选三篇文章，丰富你睡前、醒后的时光。 &lt;/li&gt;
&lt;li&gt;希望通过阅读成为一个有趣的人，与君共勉^_^&lt;/li&gt;
&lt;li&gt;love life , love reading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=====================================================&lt;/p&gt;
&lt;h3&gt;关注方法：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在微信中扫一扫加关注: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="图片" src="content/img/yqlc.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;或者搜索公众号:"一起赖床阅读吧" &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;为文章归档&lt;/h3&gt;
&lt;h4&gt;14/2/20&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;14/2/21&lt;/h4&gt;
&lt;h4&gt;14/2/22&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Feb 2014 00:00:00 -0000</pubDate><guid>tag:,2014-02-20:web-wechat.html</guid><category>wechat</category></item><item><title>python笔记之运算符重载</title><link>/learning%20python%204.html</link><description>&lt;p&gt;在此对常用的运算符重载做个小结。包括:&lt;code&gt;__init__&lt;/code&gt; , &lt;code&gt;__str__&lt;/code&gt;(&lt;code&gt;__repr__&lt;/code&gt;) , &lt;code&gt;__call__&lt;/code&gt; , &lt;code&gt;__add__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这部分知识属于面向对象部分。&lt;/p&gt;
&lt;h3&gt;关于运算符重载&lt;/h3&gt;
&lt;p&gt;以下是主要概念： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类可以截获python运算符,可覆盖多数内置类型运算:如 加法，切片， 打印， 点号运算&lt;/li&gt;
&lt;li&gt;目的是让对象的用法和外观看起来更像内置类型&lt;/li&gt;
&lt;li&gt;运算符重载让对象与python内置对象模型更紧密结合（接口）,提供了一致性，以及与预期接口的兼容性&lt;/li&gt;
&lt;li&gt;以双下划线命名(&lt;strong&gt;X&lt;/strong&gt;),是特殊钩子,用来拦截运算,定义了固定不变的映射关系&lt;/li&gt;
&lt;li&gt;运算符覆盖方法没有默认值，如果没有定义，又执行相应运算，会触发异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运算符重载的使用者主要是开发工具的人，而不是应用开发这者，不应该盲目使用,清晰优于隐晦&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;   &lt;span class="nc"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__mul__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#&amp;#39;abc&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#&amp;#39;abcxyz&amp;#39;,注意__add__返回了新对象&lt;/span&gt;


&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#&amp;#39;abcabcabc&amp;#39; ,注意__mul__原地修实例&lt;/span&gt;

&lt;span class="c1"&gt;#补充说明：__add__ , __mul__都是`二元运算`。以__add__(self.other)为例，当进行b = a + &amp;#39;xyz&amp;#39;时，a 赋值给self,&amp;#39;xyz&amp;#39;赋值给other,一般而言实例放在左边，如果实例在右边需要使用__radd__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更多细节&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;每次从类产生实例时， python会在自动调用__init__方法(被称为构造器),这是最常用的运算符重载方法.&lt;br /&gt;
需要注意的地方是__init__常常用于调用超类的构造器，除非明确调用，否则超类构造器会被覆盖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;__repr__与__str__会返回对象的字符串表现形式&lt;/h4&gt;
&lt;p&gt;当类的实例打印或转换为字符串时，&lt;strong&gt;repr&lt;/strong&gt;(及其近亲__str__)就会自动调用,这些方法可替对象定义更好的显示格式。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;     &lt;span class="c1"&gt;#data is 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么__repr__与__str__的区别是什么，简单地说__repr__更底层，如果没有__str__则调用__repr__（也就是__str__优先），那么可以利用__repr__更底层的特性为所有环境提供统一的字符串显示。为终端用户提供__str__,开发期间则显示__repr__.&lt;/p&gt;
&lt;h4&gt;__call__拦截调用&lt;/h4&gt;
&lt;p&gt;当实例被调用时，使用__call__，这样可以让实例表现得像函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#6&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这可能是python中保留状态信息的最好方式，&lt;code&gt;状态的记忆&lt;/code&gt;是明确地使用属性赋值运算实现的。
功能很像函数式编程里的闭包&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#  __del__: 析构方法，与__init__相对&lt;/span&gt;
&lt;span class="c1"&gt;#  __getattr__: 点号运算（获取属性），如：X.name&lt;/span&gt;
&lt;span class="c1"&gt;#  __setattr__: 属性赋值运算， 如： X.name = &amp;#39;wwj&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#  __getitem__: 索引运算 ， X[key],没有__item__时的for循环迭代器。否则__item__优先&lt;/span&gt;
&lt;span class="c1"&gt;#  __setitem__: 索引赋值运算 , 如X[key] = value&lt;/span&gt;
&lt;span class="c1"&gt;#  __iter__: 迭代环境  用于循环，测试，列表，映射&lt;/span&gt;
&lt;span class="c1"&gt;#  __cmp__: 比较 ， 如：X == Y , X &amp;gt; Y&lt;/span&gt;
&lt;span class="c1"&gt;#  __lt__: 小于 。 如： X &amp;lt; Y &lt;/span&gt;
&lt;span class="c1"&gt;#  __eq__: 等于&lt;/span&gt;
&lt;span class="c1"&gt;#  __radd__: 左侧加法，如&amp;#39;abc&amp;#39; + X (对象在右侧)&lt;/span&gt;
&lt;span class="c1"&gt;#  __iadd__: 实地（增强的）加法 ，如：X += Y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 -0000</pubDate><guid>tag:,2014-01-09:learning python 4.html</guid><category>python</category></item><item><title>python笔记之命名空间总结</title><link>/learning%20python%203.html</link><description>&lt;p&gt;这两天阅读github上一些项目源码时，发现运算符重载部分不够熟悉，于是又翻了一遍《learning python》。&lt;br /&gt;
这是第三遍阅读，第一次是初学python时，第二次是为了给学习django清除障碍。这本书真是难得的佳作，极其清晰明了的教学风格，读来就像小说般流畅，每次重读总有收获。&lt;br /&gt;
既然开始写博客了，就好好做好读书笔记吧，方便自己日后的查阅，也方便他人。&lt;/p&gt;
&lt;p&gt;在python中，变量名的赋值场所极其重要，这完全决定了变量名所在的作用域或对象。&lt;br /&gt;
直接上代码吧，这个例子很好地对python的命名空间概念做了总结：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#manynames.py&lt;/span&gt;
    &lt;span class="c1"&gt;#解释命名空间对象&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;              &lt;span class="c1"&gt;#global ， X or manynames.X&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;                
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;         

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;          &lt;span class="c1"&gt;# 函数本地作用域 &lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;          &lt;span class="c1"&gt;# 类属性，C.X&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;      &lt;span class="c1"&gt;# 函数本地作用域&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;# 实例属性(instance.X)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上到下，这里对X的赋值语句会产生：模块属性（11）,本地变量（22）,类属性（33）,方法中的本地变量（44）以及实例属性（55）&lt;br /&gt;
这个例子把命名空间的几种情况集合起来了。&lt;br /&gt;
我们运行一下，就一目了然了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# manynames.py ,接上面&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;     &lt;span class="c1"&gt;#11&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#11&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#22&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;     &lt;span class="c1"&gt;#11&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="c1"&gt;#33&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="c1"&gt;#55&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;   &lt;span class="c1"&gt;#33&lt;/span&gt;

    &lt;span class="c1"&gt;#print C.m.X[26]    #失败:只在函数内可见,只有当函数调用时，X才会存在与内存中&lt;/span&gt;
    &lt;span class="c1"&gt;#print f.X  #失败:只在函数内可见&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再来做个模块间读取变量的实验：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;manynames&lt;/span&gt;

&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;         &lt;span class="c1"&gt;#66&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;manynames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;       &lt;span class="c1"&gt;#11&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;manynames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;manynames.f()打印的是manynames中的X而不是本文件中的X。&lt;br /&gt;
这里说明作用域总是由源代码中的赋值语句的位置决定的。&lt;/p&gt;
&lt;p&gt;还有再说一点，就去吃饭啦～实际项目在，每个变量不应该用通样的变量名！！&lt;/p&gt;
&lt;p&gt;走起&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jan 2014 00:00:00 -0000</pubDate><guid>tag:,2014-01-08:learning python 3.html</guid><category>python</category></item><item><title>python算法学习之推荐系统</title><link>/learning%20python%202.html</link><description>&lt;p&gt;之前一直对算法不太感冒，感觉既乏味又务虚，除了用来考试/面试，实在找不出其他用途。毕竟平时实际项目中也不常遇到需要深入理解算法的地方。加上教科书的影响，对算法一直敬而远之。&lt;br /&gt;
直到开始阅读《集体智慧编程》。&lt;br /&gt;
才发现原来这也挺好玩的呀。&lt;br /&gt;
遂决定好好学习。  &lt;/p&gt;
&lt;p&gt;长期以来，受惠于推荐系统，日久生情，对此产生了兴趣。比如豆瓣能根据你的浏览记录（评分记录）推荐你可能喜欢的小组，可能喜欢的文章，可能感兴趣的活动。而且往往还真能猜准～&lt;br /&gt;
无觅阅读的文章推荐也很和我胃口，不必花太多时间就能轻松找到喜欢的文章。&lt;br /&gt;
这类系统能分析出你的&lt;code&gt;品味&lt;/code&gt;，它居然知道我的品味！！想想都令人兴奋，系统居然像你的知音一样知道你的品味！！&lt;/p&gt;
&lt;p&gt;如果不觉得一件东西有趣，实在很难硬着头皮学下去。既然发现它很好玩，想无视它，也难了。&lt;br /&gt;
那就开始我们的算法旅程吧。&lt;br /&gt;
从推荐系统开始～  &lt;/p&gt;
&lt;p&gt;这组文章偏向于总结吧，不是作为入门指南，如果你也对这类算法感兴趣，推荐去阅读《集体智慧编程》，而不是看博客。
这组文章使用的算法皆来自《集体智慧编程》，我只是做些摘录，为了方便日后使用.你也可以使用 这些代码，至于使用过程中你要受到哪些限制，请参考原书的申明部分。 &lt;/p&gt;
&lt;h3&gt;实例学习&lt;/h3&gt;
&lt;p&gt;在这个实例里，我们想知道用户的兴趣偏好（口味）。&lt;br /&gt;
情景是这样的：几位用户看过几部电影，他们对这些电影进行了评分，我们拿到了这组数据,r如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;critics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lisa Rose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Gene Seymour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;Michael Phillips&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Claudia Puig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Mick LaSalle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;Jack Matthews&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Toby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些数据是python的字典格式,你如果熟悉js,会发现它几乎就是json格式.&lt;br /&gt;
大多网站api接口返回的格式都是json，这样你就知道用python处理这些数据是多么容易.  &lt;/p&gt;
&lt;p&gt;现在我想挖掘一下这些数据，看看哪两个人的品味比较接近。&lt;br /&gt;
摆在我面前的问题是如何度量两个人的品味相似程度呢.毕竟口味这东西不是空间距离可以度量。&lt;br /&gt;
&lt;code&gt;距离&lt;/code&gt;真是个很好的隐喻。两个品味不同的人就像来自两个星球&lt;br /&gt;
如果我们能找到一个数值来度量两个人品味的距离，那么这个问题就变成了数值计算问题！！&lt;br /&gt;
还真有这样的东西，我们可以用&lt;code&gt;欧吉里德距离&lt;/code&gt;和&lt;code&gt;皮尔逊相关度&lt;/code&gt;来度量两者相似度.&lt;br /&gt;
这里有一个很有趣的概念，叫偏好空间。我们使用以上数据作图：&lt;br /&gt;
&lt;img alt="偏好空间" src="content/img/suanfa-1.jpeg" /&gt;
两个人在偏好空间中距离越近，表示品味越近.如果有多项评分，那么这张图就对应多维。依然适用&lt;/p&gt;
&lt;p&gt;我们直接给出计算相似度的欧吉里德方法吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;

    &lt;span class="c1"&gt;# Returns a distance-based similarity score for person1 and person2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sim_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="c1"&gt;# Get the list of shared_items&lt;/span&gt;
      &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="c1"&gt;# if they have no ratings in common, return 0&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

      &lt;span class="c1"&gt;# Add up the squares of all the differences&lt;/span&gt;
      &lt;span class="n"&gt;sum_of_squares&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sum_of_squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的核心公式，就是数学中简单的两点间距离计算公式,代码只是对此的一个实现，理解时建议在旁边写个数学距离计算公式，那样比代码更能清晰表达算法的本质。&lt;/p&gt;
&lt;p&gt;顺便把皮尔逊计算方法也写上，稍后解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Returns the Pearson correlation coefficient for p1 and p2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sim_pearson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="c1"&gt;# Get the list of mutually rated items&lt;/span&gt;
      &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="c1"&gt;# if they are no ratings in common, return 0&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

      &lt;span class="c1"&gt;# Sum calculations&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# Sums of all the preferences&lt;/span&gt;
      &lt;span class="n"&gt;sum1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;sum2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

      &lt;span class="c1"&gt;# Sums of the squares&lt;/span&gt;
      &lt;span class="n"&gt;sum1Sq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;sum2Sq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   

      &lt;span class="c1"&gt;# Sum of the products&lt;/span&gt;
      &lt;span class="n"&gt;pSum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

      &lt;span class="c1"&gt;# Calculate r (Pearson score)&lt;/span&gt;
      &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pSum&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sum2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sum1Sq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum2Sq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

      &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;den&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 07 Jan 2014 00:00:00 -0000</pubDate><guid>tag:,2014-01-07:learning python 2.html</guid><category>python</category></item><item><title>微信小结</title><link>/weixin-learning.html</link><description>&lt;p&gt;上个月搭了一个微信公众平台，后台用的是&lt;code&gt;python&lt;/code&gt;（之前用&lt;code&gt;bootle&lt;/code&gt;,现在改用&lt;code&gt;django&lt;/code&gt;），当然用什么语言是无关紧要的。&lt;/p&gt;
&lt;p&gt;近期服务器环境从&lt;code&gt;bae&lt;/code&gt;迁回本地环境（学校给了个服务器），bae上调试不方便，而且稳定性没有保障，变动频繁。当然国内的开放平台基本这样，bae相对算是不错的，似乎由于开源潮流势不可挡的缘故，各家公司不情愿地做个开放平台，深怕被对手甩下，至少在舆论上不落后，又不理解开放的意义，只能做得很蹩脚。当然如果练手的话，bae还是挺不错的。    &lt;/p&gt;
&lt;p&gt;之所以换用django，主要是为了后期的功能加强考虑，之后涉及到session，数据库之类的问题的话，用django熟悉些，扩展起来可能会容易些。&lt;/p&gt;
&lt;p&gt;如果在&lt;code&gt;bae/sae&lt;/code&gt;之类的云环境下部署的话，推荐使用bootle，django配置起来麻烦些。bootle很小巧便捷，仅是一个文件而已，不会出现依赖问题，极其适合练手。&lt;a href="http://article.yeeyan.org/view/35282/123019"&gt;bootle入门&lt;/a&gt;。bae上需要注意一下第三库的配置，就是说你在这里不能使用pip，得自行打包依赖的库，一并上传，之后添加到系统路径里就行。如果在bae下具体可参考&lt;a href="http://git.oschina.net/397667796/bae_django/tree/master/1"&gt;here&lt;/a&gt; 。模仿这个项目布局就行，deps里放置第三方库。 在index.py里加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deps_path = os.path.join(os.path.split(os.path.realpath(__file__))[0],&amp;#39;deps&amp;#39;)
if deps_path not in sys.path:
        sys.path.insert(0, deps_path)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上写一个微信公众平台要比开发一个网站简单得多。不需要前台，不需要美工，后台的逻辑也极其简单。&lt;/p&gt;
&lt;h3&gt;关于微信&lt;/h3&gt;
&lt;p&gt;waiting...&lt;br /&gt;
重要的部分其实和使用什么语言写后台无关，重在熟悉微信的&lt;code&gt;api&lt;/code&gt;，数据格式之类&lt;/p&gt;
&lt;h3&gt;基本思路&lt;/h3&gt;
&lt;p&gt;先说说基本的思路。理解了之后，至于用什么语言作后台来实现，都是细节问题。之后我会演示使用bootle和django来实现（初学者推荐使用bootle。）&lt;/p&gt;
&lt;p&gt;你需要有以下以下东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个公网ip&lt;/li&gt;
&lt;li&gt;服务器使用80端口&lt;/li&gt;
&lt;li&gt;分配一个url给微信使用&lt;/li&gt;
&lt;li&gt;申请公众帐号，为了获得token（之后会用到）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;that's all &lt;/p&gt;
&lt;p&gt;那么我们来看看，从用户发送消息，到收到公众帐号的回应，期间发生了什么。&lt;/p&gt;
&lt;p&gt;&lt;img alt="图片" src="img/weixin.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出，微信扮演中介的角色。&lt;/p&gt;
&lt;p&gt;waiting...&lt;/p&gt;
&lt;h3&gt;与微信通信&lt;/h3&gt;
&lt;p&gt;首先登录你的公众账户，绑定url&lt;/p&gt;
&lt;p&gt;如上图所示，我们站在服务器的角度，我们需处理接收微信发送过来的请求，请求分两种，一种是get，一种是post。我么大多时间在处理post过来的数据。这里需要学习的东西主要是数据的格式，参考微信的开发者文档。&lt;/p&gt;
&lt;p&gt;在服务器与微信公众帐号建立关联的时候，微信会验证服务器是否合格。技术上的细节是微信会get请求绑定的url，我们需要按要求返回数据，这样就能通过微信的认证。直接上代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bootle&lt;/code&gt;里这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
    &lt;span class="c1"&gt;#! /usr/bin/env python&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

    &lt;span class="nd"&gt;@get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkSignature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your token&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#登录你的微信公众平台，里面可以查到  &lt;/span&gt;
            &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echostr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpstr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;django&lt;/code&gt;里这样写&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-  &lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handleRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkSignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkSignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your token&amp;quot;&lt;/span&gt; 
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;signature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nonce&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;echoStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echostr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TOKEN&lt;/span&gt;  
        &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
        &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpstr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echoStr&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你如果用的是django的话，我假设你已经熟悉它了，那么urls.py之类常规配置就不介绍了。&lt;/p&gt;
&lt;p&gt;好～&lt;br /&gt;
这样一来，我们的服务器就通过微信的认证了。&lt;br /&gt;
下面进入真正有趣的地方。处理用户的请求，并给予答复。  &lt;/p&gt;
&lt;h3&gt;案例学习，自动作诗&lt;/h3&gt;
&lt;p&gt;我对诗词比较感兴趣，那我们就来写一个自动作诗的微信公众号吧。一旦你熟悉的其中的逻辑，你可以发挥你的想象力，写个你自己感兴趣的公众号，思路和大多细节都是基本一样的。
直接上代码：(&lt;code&gt;bae&lt;/code&gt;环境下基于&lt;code&gt;bootle&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#! /usr/bin/env python&lt;/span&gt;
    &lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
    &lt;span class="c1"&gt;#自动作诗&lt;/span&gt;
    &lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wwj&amp;#39;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
    &lt;span class="c1"&gt;#解析xml&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ET&lt;/span&gt;
    &lt;span class="c1"&gt;#解析json，给客户端发送数据，用json格式&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;span class="c1"&gt;#第三方库&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;  &lt;span class="c1"&gt;#第三方库，bae下自带    &lt;/span&gt;


    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@app.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#url接口，接收微信的消息&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_signature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#检验token，如果没有这个的话，该服务器会被微信验证失败&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your token&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#set your token here&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echostr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpstr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_msg&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#解析来自微信的请求，request用于传递请求信息，这是bootle的知识，与微信无关，核心只是普通的url get部分内容&lt;/span&gt;
        &lt;span class="n"&gt;recvmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recvmsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_content&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;添加自动作诗模块，输入&amp;quot;诗词#登山&amp;quot;自动写作主题为登山的诗词,目前仅支持平水韵五绝，之后会添加其他体裁&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writepoetry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;无题&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#yb是韵部，tc是体裁，mt是命题&lt;/span&gt;
        &lt;span class="c1"&gt;#mt必须是u&lt;/span&gt;
        &lt;span class="n"&gt;cleanmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;cleanmt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.poeming.com/web/main.asp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cleandate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#现在是utf-8，在程序中保持为unicode,直到输出才化为utf-8&lt;/span&gt;
        &lt;span class="n"&gt;outdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cleandate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;#print outdate&lt;/span&gt;
        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#p是list&lt;/span&gt;
        &lt;span class="c1"&gt;#p[1]是主要内容&lt;/span&gt;
        &lt;span class="n"&gt;p_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p_text&lt;/span&gt;
        &lt;span class="c1"&gt;##成功后的内容&lt;/span&gt;
        &lt;span class="c1"&gt;#p_list=p_text.split(u&amp;quot;。&amp;quot;)#使用句号分割取出&lt;/span&gt;
        &lt;span class="c1"&gt;#print &amp;#39;&amp;#39;.join(p_list[1:])&lt;/span&gt;
        &lt;span class="c1"&gt;#Out[8]: {&amp;#39;confidence&amp;#39;: 0.99, &amp;#39;encoding&amp;#39;: &amp;#39;GB2312&amp;#39;}&lt;/span&gt;
        &lt;span class="c1"&gt;#mypoetry=writepoetry(yb=&amp;quot;2&amp;quot;,tc=&amp;quot;1&amp;quot;,mt=u&amp;quot;无题&amp;quot;)&lt;/span&gt;




    &lt;span class="nd"&gt;@app.post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response_msg&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#返回消息到客户端   &lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_msg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="c1"&gt;#解析接收到的用户消息&lt;/span&gt;
        &lt;span class="c1"&gt;#处理文本消息，注意必须按照微信接口要求的格式，图片消息的话应该给出图片url,多参考别人的源码&lt;/span&gt;
        &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;xml&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/ToUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/FromUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;CreateTime&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/CreateTime&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[text]]&amp;gt;&amp;lt;/MsgType&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;Content&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;FuncFlag&amp;gt;0&amp;lt;/FuncFlag&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;/xml&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
        &lt;span class="c1"&gt;#&amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[text]]&amp;gt;&amp;lt;/MsgType&amp;gt;  这里不用%s才能显示关注？？&lt;/span&gt;
        &lt;span class="c1"&gt;#图片模板&lt;/span&gt;
        &lt;span class="n"&gt;pictextTpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;xml&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/ToUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/FromUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;CreateTime&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/CreateTime&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[news]]&amp;gt;&amp;lt;/MsgType&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;ArticleCount&amp;gt;1&amp;lt;/ArticleCount&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Articles&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;item&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Title&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Title&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Description&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Description&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;PicUrl&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/PicUrl&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Url&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Url&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/Articles&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;FuncFlag&amp;gt;1&amp;lt;/FuncFlag&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/xml&amp;gt; &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_content&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#处理关注事件&lt;/span&gt;
        &lt;span class="c1"&gt;#调试成功，技巧：控制变量，从最少元素开始，逐步增加&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MsgType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;event&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt; 
                &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;添加自动作诗模块，输入&amp;quot;诗词#登山&amp;quot;自动写作主题为登山的诗词,目前仅支持平水韵五绝，之后会添加其他体裁&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

          &lt;span class="c1"&gt;#msg[&amp;#39;Content&amp;#39;]用户消息，汉语还是很好解析的，没有乱七八糟编码问题&lt;/span&gt;
          &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                               &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
                               &lt;span class="s2"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#填充内容&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;诗词&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;#“#”只能用中文&lt;/span&gt;
          &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="c1"&gt;#content=&amp;quot;怀&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;mypoetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;writepoetry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="c1"&gt;#msg[&amp;#39;Content&amp;#39;]用户消息，汉语还是很好解析的，没有乱七八糟编码问题&lt;/span&gt;
          &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                               &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
                               &lt;span class="n"&gt;mypoetry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#填充内容&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                               &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
                               &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;



    &lt;span class="c1"&gt;#call bae serive&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bae.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
    &lt;span class="n"&gt;deps_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deps_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c1"&gt;#create application&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自动作诗的数据，来自稻香老农的网络版自动作诗机，解析数据时注意一下编码问题就行。具体见代码。另外目前只能自动写绝句，其他功能有空添加。&lt;/p&gt;
&lt;p&gt;推荐使用案例驱动式的学习方法，一开始就埋头到文档里，无趣且乏味，可以先看几个成功的案例，试着模仿，运行，修修改改，先跑起来,至于案例的来源，博客和github是个巨大的宝库，我闲来比较喜欢逛逛github，总有意外的收获。&lt;/p&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;p&gt;案例中有趣的地方是，我们借用requests来访问其他网站，这样一来我们可以轻易使用混搭开发模式(mashup),这是个很有趣的话题，也是我一直关注的一个方向。开源与开放平台是未来。
发挥你的想象力吧，想象力是你在数字世界的唯一边界。借用requests，可以做许多有趣的工作，比如写一个根据输入的电影名称，去豆瓣抓取电影资讯的工作平台;或者根据输入的学号，去获取学生的成绩/课程表之类;再或者根据输入的照片，识别人脸,建立人群关系（使用face++）.&lt;br /&gt;
 这里我们可以抽象出一个共性，我们的后台实际也在扮演中介角色，或者理解为入口，从广泛的网络里获取用户需要的内容，至于可以干什么，这里的唯一限制是你的想象力^_^&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 07 Jan 2014 00:00:00 -0000</pubDate><guid>tag:,2014-01-07:weixin-learning.html</guid><category>web</category></item><item><title>fabric备忘</title><link>/learning%20fabric.html</link><description>&lt;p&gt;系统部署环境是一件很乏味的工作，系统管理也是，fabric让这一切更加自动化，何乐而不为呢，于是决定学好这个工具。&lt;/p&gt;
&lt;h3&gt;What is it?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple, Pythonic remote execution and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;fabric具体都干些啥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过SSH在多个host上批量执行任务&lt;/li&gt;
&lt;li&gt;自动化部署，或者执行系统管理任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;学习使用&lt;/h3&gt;
&lt;p&gt;首先当然是去阅读&lt;a href="http://docs.fabfile.org/en/1.8/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lslocal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在django里用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;

&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myproject.myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_instances&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@hosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;production-server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_production_instances&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/path/to/myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fab print_instances&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 -0000</pubDate><guid>tag:,2014-01-05:learning fabric.html</guid><category>python</category></item><item><title>基于Pelican和github的静态博客搭建过程</title><link>/pelican.html</link><description>&lt;p&gt;前两天刚把博客搭好，如你所见，你所在的地方就是用&lt;code&gt;Pelican&lt;/code&gt;搭建的  &lt;br /&gt;
为何使用&lt;code&gt;github&lt;/code&gt;来搭建博客呢，&lt;a href="#todo"&gt;这里&lt;/a&gt;给出了理由 &lt;br /&gt;
Why not &lt;a href="#todo"&gt;Jekyll&lt;/a&gt;?  &lt;br /&gt;
Jekyll基于&lt;code&gt;ruby&lt;/code&gt;,Pelican基于&lt;code&gt;python&lt;/code&gt;，我更习惯python，如此而已 &lt;br /&gt;
使用Pelican之后，你只要用&lt;code&gt;markdown&lt;/code&gt;格式写日志，Pelican会把markdown转换成&lt;code&gt;html&lt;/code&gt;的格式，之后push到github pages上, 就可以看到你写的日志了，就是说你的所有工作就是用markdown写作，是不是很惬意^_^ &lt;br /&gt;
Pelican 的一些主要&lt;code&gt;特性&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python实现，开放源码&lt;/li&gt;
&lt;li&gt;输出静态页面，方便托管&lt;/li&gt;
&lt;li&gt;支持主题，采用Jajin2模板引擎&lt;/li&gt;
&lt;li&gt;支持代码语法高亮&lt;/li&gt;
&lt;li&gt;支持reStructuredText、Markdown、AsciiDoc格式&lt;/li&gt;
&lt;li&gt;支持Disqus评论&lt;/li&gt;
&lt;li&gt;支持Atom和RSS输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;闲话不说，进入主题 &lt;br /&gt;
我假设你是初来乍到的小白.（我也是小白啦～）虽说是小白,搭建这种geek类博客并没有你想象的费劲。just do it   &lt;br /&gt;
首先，你得把git给入门了，入门简单，要掌握的命令不多，这是&lt;a href="#todo"&gt;git基本教程&lt;/a&gt;（虽说git的学习曲线很陡峭，基本用法还是很容易的，don't worry about it） 
我假设你掌握了基本的git命令，接着我们可以正式开始了 &lt;/p&gt;
&lt;h2&gt;安装linux系统&lt;/h2&gt;
&lt;p&gt;as a geek(或者渴望成为geek的小白）你还抱着win7不放么，还舍不得那熟悉的蓝屏么，还舍不得莫名其妙的报错么,果断抛弃娇气的windows，投入linux的怀抱吧。俺使用的发行版是Ubuntu12.04.一直很稳定且顺心  &lt;br /&gt;
你要执意使用window，之后可能在环境配置上得费些功夫，其他基本一样。
本文的环境是Ubuntu12.04。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用Markdown来写文章的话，还需要安装Markdown库&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建blog目录：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myblog
cd myblog
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建一个博客：(在当前目录下，即myblog)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按照提示设置，可按默认的设置，之后可在pelicanconf.py文件中修改设置。&lt;/p&gt;
&lt;p&gt;以下是生成的目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myblog/     
├── content              # 存放输入的源文件  
├── output               # 生成的输出文件  
├── develop_server.sh    # 方便开启测试服务器    
├── Makefile             # 方便管理博客的Makefile  
├── pelicanconf.py       # 主配置文件    
└── publishconf.py       # 发布时使用的配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;写一篇文章&lt;/h4&gt;
&lt;p&gt;以mardown格式举例，具体可以去看pelican的文档. 进入content目录，创建一个文件，写入博客内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="err"&gt;#日期&lt;/span&gt;

&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="err"&gt;＃标题&lt;/span&gt;

&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt; &lt;span class="err"&gt;#标签&lt;/span&gt;

&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="err"&gt;#分类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Date和Title是必须的，其它的可以不写  &lt;br /&gt;
如果该文件位于content目录中某个子目录中时，如./content/python，那pelican就把这篇文章分类为子目录名python&lt;/p&gt;
&lt;h4&gt;生成html&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将看到output文件夹里多了×××.html文件
在myblog所在的地方新建一个myblog_for_github（名字随意）,把output里的文件复制到里面。 &lt;br /&gt;
为何呢，下文解释&lt;/p&gt;
&lt;h2&gt;在github上创建GitHub Pages&lt;/h2&gt;
&lt;p&gt;新建一个Repository，Repository名字为yourname.github.com，yourname是您的用户ID。&lt;/p&gt;
&lt;p&gt;创建成功以后，便可以把生成的页面push到github。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd myblog_for_github
git init
git add .
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin https://github.com/xxx/xxx.github.io.git
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在可以通过 xxx.github.io 或者 xxx.github.com 来访问您的博客了。&lt;/p&gt;
&lt;h2&gt;修改以及更新博客&lt;/h2&gt;
&lt;p&gt;看了几篇资料，里面似乎都没有谈到后续继续写博客的问题，当然这不属于搭建的问题&lt;br /&gt;
顺带也提一下吧，做个备忘。 &lt;br /&gt;
当我们隔了几天继续写博客时，把写好的×××.md文件放到content文件夹里输入：&lt;br /&gt;
    make html
之所以要把内容复制到myblog_for_github里再提交，是因为每次执行 
    make html
output里的文件会被覆盖，不能在这里git init，否则仓库会被删了 &lt;br /&gt;
至于增删改已经提交的博客的内容基本是git的任务，也就是本教程之初让你去入门git的原因  &lt;br /&gt;
会用到的一些指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm ×××.html    //删除代码库中文件
git add . 
git commit -m &amp;quot;some message&amp;quot;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;域名绑定&lt;/h2&gt;
&lt;p&gt;在repo的根目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，比如顶级域名 example.com 或者二级域名 xxx.example.com。&lt;/p&gt;
&lt;p&gt;遇到问题请谷歌,或者查看官方文档&lt;/p&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#todo"&gt;用pelican在github上创建博客极简教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://readthedocs.org/docs/pelican/en/2.8/"&gt;Pelican官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;用 Pelican 和 GitHub Pages 搭建免费的个人博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 09 Aug 2013 00:00:00 -0000</pubDate><guid>tag:,2013-08-09:pelican.html</guid><category>python</category></item><item><title>django的一些资源链接</title><link>/django-links.html</link><description>&lt;h3&gt;使用django的过程里搜集的一些资源，做个总结：&lt;/h3&gt;
&lt;h3&gt;教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/index.html"&gt;The Django Book&lt;/a&gt;   djangobook：很好的入门教材，&lt;code&gt;易懂且丰富&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/"&gt;The Django Book中文版&lt;/a&gt;： 目前是&lt;code&gt;1.1&lt;/code&gt;版,英文版更新到&lt;code&gt;1.4&lt;/code&gt;，django.1.4新特性可参考&lt;a href="http://www.douban.com/group/topic/27110461/"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;官方文档&lt;/a&gt;  涵盖django的方方面面，遇到的问题基本能在这里面找到答案，ps:只有&lt;code&gt;英文版&lt;/code&gt;的，见过一些号称中文版的，翻译得多是虎头蛇尾，这份文档确实够厚，好在读起来并不算费力～ &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/holbrook/archive/2012/02/10/2357343.html"&gt;django实战&lt;/a&gt;(迭代出购物车 ) ： 一个项目示例,是&lt;code&gt;Depot&lt;/code&gt;的django实现（ Depot是《Agile Web Develeopment with Rails》中的一个应用，使许多人走上Rails开发的道路），&lt;code&gt;django实战&lt;/code&gt;是我见过的国内django教程里做得最认真也最好的，最初来自ThinkInside的blog，他把博客迁移到github上了,&lt;a href="http://thinkinside.tk/"&gt;here&lt;/a&gt;。该教程用迭代的方法循序渐进地引导初学者，内容很丰富&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github上一些django资源:&lt;/h3&gt;
&lt;p&gt;github是个巨大的宝库，下面是我的一些推荐(有些和&lt;code&gt;django资源汇总&lt;/code&gt;里重复，不过以下基本都是我自己用过的，各位如果在使用过程遇到问题，欢迎一起交流，my email:&lt;code&gt;wuwenjie718@gmail.com&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pinax/pinax"&gt;pinax&lt;/a&gt;  可以把它当作一个&lt;code&gt;脚手架&lt;/code&gt;，Pinax包含了近43个Apps，有Tagging、Blog、Profiles、OpenID、Messages、Gravatar……大多数常用的Web技术和应用都有提供，你，值得拥有&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/divio/django-cms"&gt;django-cms&lt;/a&gt; 目前开源Django CMS中功能最为完善的一个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/toastdriven/django-tastypie"&gt;django-tastypie&lt;/a&gt;:django的RESTful框架，github上很热&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/omab/django-social-auth"&gt;django-social-auth&lt;/a&gt; 第三方登录&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;django-rest-framework&lt;/a&gt; django的RESTful框架，ThinkInside在&lt;a href="http://www.cnblogs.com/holbrook/archive/2012/02/10/2357343.html"&gt;django实战&lt;/a&gt;中推荐，我目前用的就是这个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lukaszb/django-guardian"&gt;django-guardian&lt;/a&gt;对user权限进行更细致的控制&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stephenmcd/mezzanine"&gt;mezzanine&lt;/a&gt; 一个开源的内容管理平台，包括web版本和移动版本&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maraujop/django-crispy-forms"&gt;django-crispy-forms&lt;/a&gt;    官网介绍'The best way to have Django DRY forms'&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nathanborror/django-basic-apps"&gt;django-basic-apps&lt;/a&gt; 一些基础app,可当脚手架用&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bread-and-pepper/django-userena"&gt;django-userena&lt;/a&gt; 功能完善的注册模块，支持用户信息维护，头像上传，自带了个站内消息模块，很适合sns类网站&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Fantomas42/django-blog-zinnia"&gt;django-blog-zinnia&lt;/a&gt;  博客系统，界面清爽，源码清晰&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lambdafu/django-south"&gt;django-south&lt;/a&gt;  south能够检测对models的更改并同步到数据库.这篇博客不错，&lt;a href="alexliyu.blog.163.com/blog/static/16275449620126239949478/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/divio/django-shop"&gt;django-shop&lt;/a&gt; 基本的网店系统&lt;/li&gt;
&lt;li&gt;几个国内的:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yueyoum/django-social-login"&gt;django-social-login&lt;/a&gt;用第三方帐号登录网站，我使用的过程中有几个问题，是版本更新没有跟上导致的，期待作者的更新&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yueyoum/social-oauth"&gt;social-oauth&lt;/a&gt; 专注于中国大陆开放了OAuth2认证的网站&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/duoshuo/duoshuo-python-sdk"&gt;duoshuo-python-sdk&lt;/a&gt;多说Python SDK，社会化评论系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://haoluobo.com/trac/wiki/Django"&gt;django资源汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/15555/"&gt;10个实用的Django建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/holbrook/archive/2012/02/25/2368231.html"&gt;项目结构最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangosites.org/"&gt;djangosites&lt;/a&gt;  上面有不少带有源码的项目&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn"&gt;django-china&lt;/a&gt;   国内较好的django论坛（ps:国内算得上django论坛的就貌似只有这个。。）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 -0000</pubDate><guid>tag:,2013-08-08:django-links.html</guid><category>django</category></item><item><title>python的一些资源链接</title><link>/python-links.html</link><description>&lt;h3&gt;整理一下zim中python的一些资源链接，多而杂，各个角落里都有，慢慢整理吧，会不断更新～&lt;/h3&gt;
&lt;h3&gt;教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;learning python 我的入门书&lt;/li&gt;
&lt;li&gt;programming python  只有英文版的&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ppurl.com"&gt;皮皮书屋&lt;/a&gt; 在里面搜索一下python,有不少高质量的电子书（免费下载）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.douban.com/note/134971609/"&gt;PEP8 Python编码规范整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythontab.com/html/2012/pythonjichu_1220/10.html"&gt;详解python2 和 python3的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/yuxc/archive/2011/03/24/2029786.html"&gt;unicode&lt;/a&gt;  如果遇到编码问题，中文问题，可以看看&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jsome.net/blog/2010/06/11/start-to-use-virtualenv"&gt;virtualenv入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/gallery.html"&gt;科学计算&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 -0000</pubDate><guid>tag:,2013-08-08:python-links.html</guid><category>python</category></item><item><title>软件推荐</title><link>/ubuntusoft.html</link><description>&lt;h3&gt;以下是我常用的一些软件～&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zim&lt;/code&gt; 桌面wiki，跨平台，一直用它来整理知识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReTest&lt;/code&gt;   markdown编辑器，可实时预览&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sublime test&lt;/code&gt; 极其性感的文本编辑器，用它浏览代码很是赏心悦目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPython&lt;/code&gt; IPython 是 Python 的原生交互式 shell 的增强版&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Notebook&lt;/code&gt; 在web浏览器上使用ipython,极其适合做科学计算，能保存你的练习代码，让你的工作可以累加，不必为保存实验数据头疼&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zsh&lt;/code&gt; The last shell you’ll ever need! 交互性极其好，&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;懒人请点击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ulipad&lt;/code&gt;  Python ide，limodou出品,跨平台,基于wxPython，我也用它写django&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dia&lt;/code&gt;  开放源码的流程图软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fcitx&lt;/code&gt;  Linux操作系统中使用的中文输入法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIMP&lt;/code&gt; photoshop开源替代方案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Docky&lt;/code&gt;  Docky可以被视为Mac OS X的Dock的最佳克隆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Avant&lt;/code&gt;  与Docky类似的东西，感觉用着更顺手&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Synapse&lt;/code&gt; 搜索系统里的任何东西，速度很快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;新立得&lt;/code&gt;   包管理工具apt的图形化前端,适合新手&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freeming&lt;/code&gt;  思维导图软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome&lt;/code&gt;  ubuntu自带的是firefox,chrome的js调试功能让人爱不释手&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filezilla&lt;/code&gt;  ftp客户端，带有sftp功能，极好用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pencil&lt;/code&gt;  网站快速原型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Virtualbox&lt;/code&gt;  开源虚拟机软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wireshark&lt;/code&gt;  据说是神器，不大会用，兵器谱上排名唯一超过Metasploit的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evernote&lt;/code&gt;  linux下只有everpad，印象笔记是我最重要的一个工具，没用之一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;说到软件，推荐两个很不错的网站&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;小众软件&lt;/code&gt;  &lt;a href="http://www.appinn.com/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;异次元&lt;/code&gt;  &lt;a href="http://www.iplaysoft.com/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 -0000</pubDate><guid>tag:,2013-08-08:ubuntusoft.html</guid><category>ubuntu</category></item><item><title>常去的一些网站</title><link>/web-share.html</link><description>&lt;p&gt;与大家分享～&lt;/p&gt;
&lt;p&gt;互联网上有趣的网站很多，无趣的更多，沙里淘金是体力活，多数时候淘出的都是沙子，俺把自己喜欢的和常去的网站都罗列出来，独乐乐不如众乐乐～&lt;/p&gt;
&lt;h3&gt;文艺类：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.douban.com"&gt;豆瓣&lt;/a&gt; 这个不用多说。文艺青年和技术帝们都值得拥有。什么？你身兼两者，那还犹豫神马，赶紧注册吧 ps：&lt;a href="http://www.douban.com/people/59672556/"&gt;my douban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.juzhai.com"&gt;菊斋&lt;/a&gt; 很隐逸的一个诗词论坛，这里民风淳朴，藏龙卧虎，路人甲乙丙丁可能分别是醉卧长安，落花风雨，孟依依 and 发初覆眉  ps:你还没读过《月出集》么，下回不要和我说你喜欢过诗词^_^&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.5sing.com"&gt;5sing&lt;/a&gt; 如果你喜欢古风音乐，这里很适合你;如果你喜欢原创音乐，这里很适合你;什么？！你还喜欢作词作曲？！好吧，你才是这里的主人。。不会作曲的表示很受伤。ps：我真的很喜欢这两个妹子的声音:   &lt;a href="#todo"&gt;樱哚哚&lt;/a&gt;
   &lt;a href="#todo"&gt;樱佩佩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术类:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com"&gt;知乎&lt;/a&gt; 知乎必须排在第一位，真实而精致的的网络问答社区&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.v2ex.com"&gt;v2ex&lt;/a&gt; 创意工作者们的社区&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gitbub.com"&gt;github&lt;/a&gt;  ps：&lt;a href="http://www.github.com/wwj718"&gt;my github&lt;/a&gt;  you can follow me^_^   我们千军万马又各自节点着&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net"&gt;oschina&lt;/a&gt; 专注于开源技术的社区&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hi.42qu.com/"&gt;42区&lt;/a&gt; “42区”是一个基于个人技能的C2C交易平台&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 -0000</pubDate><guid>tag:,2013-08-08:web-share.html</guid><category>web</category></item></channel></rss>