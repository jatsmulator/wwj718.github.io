<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writing for time</title><link>/</link><description></description><atom:link href="/feeds/jia-gou.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 20 Mar 2018 00:00:00 +0000</lastBuildDate><item><title>为Scratch3.0设计的插件系统(上篇)</title><link>/scratch3-plugin-1.html</link><description>&lt;blockquote&gt;
&lt;p&gt;我们每个人在内心深处都怀有一个梦想: 希望创造出一个鲜活的世界，一个宇宙。处在我们生活的中心、被训练为架构师的那些人，拥有这样的渴望: 在某一天，在某一个地方，因为某种原因，创造出了一个不可思议的、美丽的、摄人心魄的场所，在那里人们可以漫步，可以梦想，历经很多世纪绵延不绝.  --Christopher Alexander&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Scratch是一个游乐场&lt;/h1&gt;
&lt;p&gt;在我心目中，Scratch便是这样的一个美丽的场所，孩子们和保持着童真的成年孩子们在其中漫步、游戏以及梦想。Ta们在Scratch这个游乐场中创造并分享着乐趣&lt;/p&gt;
&lt;p&gt;&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;是一个伟大的项目，无论从它最初的愿景(在&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;A Networked, Media-Rich Programming Environment to Enhance Technological Fluency at After-School Centers in Economically-Disadvantaged Communities&lt;/a&gt;这篇提案中有详述最初的构想和愿景），还是它后来的实现，无论就它的软件设计，还是项目影响力而言，它都堪称杰作。&lt;/p&gt;
&lt;p&gt;如果你对关于Scratch的前世今生感兴趣，可以翻翻我之前的这篇文章:&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;, 当时刚读完《爆裂》，借助《爆裂》一书提供的线索和以及借助互联网，我沿着理念传承这条线，从雷斯尼克的Scratch追溯到派珀特的Logo语言，之后抵达皮亚杰的认知论（再往前甚至将追溯到洛克的经验论）&lt;/p&gt;
&lt;p&gt;将于今年8发布的Scratch3.0无疑将延续这个传统，继续做出振奋人心的东西。&lt;/p&gt;
&lt;p&gt;Scratch是个游乐场，而且是一个设施完善的游乐场，你可以在其中发挥天马行空的想象力，创造出属于你的世界。&lt;/p&gt;
&lt;h1&gt;Scratch是个像素世界&lt;/h1&gt;
&lt;p&gt;唯一的遗憾是，这个世界以像素的形式出现。当然你可能觉得这哪是什么遗憾，像素世界比身边这个原子世界广阔多了。去过四维空间的人，回到三维空间，即便漂浮于太空，外面是浩瀚的星空，仍会觉得逼仄得很，一些人的星辰大海只不过是囚禁另一些人的牢笼。这是一种患有幽闭恐惧症的感受。同样，如果你在虚拟世界浪荡久了，回到现实中来，可能也会觉得匮乏，饭居然是要一口一口吃的！我明明都已经完整吃了一口了，这个世界甚至都不提供一个for循环积木块！&lt;/p&gt;
&lt;p&gt;但现在是三月，江南的三月，是鸡鸣寺樱花盛开的季节，站在鸡鸣寺下、玄武湖前的樱花树下，无论阴雨还是春风，你都很难不被这个由原子而非像素构成的世界所打动。&lt;/p&gt;
&lt;p&gt;虽然这个原子世界的确可能就是像素构成的...anyway，先抛开你的怀疑论，让我们进入正题。&lt;/p&gt;
&lt;p&gt;我们说了这个多科幻的内容，正题并不是你期待的《三体》，这篇文章准备讨论的是如何为Scratch3.0构建一个通用的插件系统，让Scratch3.0能与来自物理世界的硬件打交道&lt;/p&gt;
&lt;p&gt;我们准备构建一个通道，连接原子和像素世界&lt;/p&gt;
&lt;h1&gt;来自物理世界的硬件&lt;/h1&gt;
&lt;p&gt;物理世界有许多参数，诸如温度、湿度、磁场、速度、光照强度...以及，你喜欢的姑娘身上特有的香味&lt;/p&gt;
&lt;p&gt;这些参数可以被各种各样的传感器所捕获(你身上的绅士风度属于不可知论范畴，不能被物理参数描述)，一旦你能捕捉到现实世界的各种参数，你就能做出许许多多好玩的东西，诸如，通过捕捉楼道的声音，你可以做到: 当楼道里有声响时，把楼道里的灯打开，这样一来你就做出了声控灯。可是你不想白天楼道里也亮着灯，怎么办呢？ 你可以把光照的信息也捕捉了，这样一来你就可以在光线不足且有人经过的时候才开灯,这样一来就解约了电力。注意我说的是光线不足就开灯，而不是晚上，为什么呢，因为我们希望光线昏暗的时候，都能为行人提供照明，而不是只是晚上，我们通过获取光线而不是根据昼夜时间来决定是否亮灯。这样系统可以在大白天里黑云压城的时候，也能贴心地为行人亮起灯，这便是所谓的"科技以人为本"&lt;/p&gt;
&lt;p&gt;Scratch是个教育项目，如果它能更多地和现实发生关联，一个孩子在Scratch中创作的作品，能对接到各种硬件，在Ta现实中被使用，这些作品帮助了Ta的父母和邻居解决生活问题，Ta的学习热情将将被噼里啪啦点燃。关于这方面的描述，PC之父Alan Curtis Kay和LOGO语言之父Papert都有过精彩论述&lt;/p&gt;
&lt;p&gt;我们结下来要做的，就是实现这样一种架构，在这个架构之下，各种硬件(小车、四轴飞行器、cozmo、microbit、Circuit Playground Express)都能与Scratch3.0交互，而且这个架构将基于消息，利用pub/sub的机制，降低构件的耦合，提高系统健壮性和可重用性&lt;/p&gt;
&lt;h1&gt;为Scratch3.0设计的插件系统&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Make everything as simple as possible, but not simpler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Scratch3.0&lt;/h3&gt;
&lt;p&gt;Scratch3.0基于html5构建，能轻松支持多平台运行，十分可期，而且带来了多项有趣的改进。目前的开发版可以在&lt;a href="https://llk.github.io/scratch-gui/"&gt;这儿尝鲜&lt;/a&gt;. 对源码有兴趣的小伙伴，想围观或者参与，都可以&lt;a href="https://github.com/LLK"&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;社区里不少公司已经用Scratch3.0作出了许多令人惊叹的东西，Cozmo是其中的佼佼者&lt;/p&gt;
&lt;p&gt;Scratch3.0原计划在今年春季正式发布，春天来了，樱花如期盛开，Scratch3.0却跳票了，推迟到8月份发布&lt;/p&gt;
&lt;p&gt;人面不知何处，桃花依旧笑春风&lt;/p&gt;
&lt;h3&gt;Scratch3.0的插件机制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;自由有时候是一种负担&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的目标是为Scratch3.0做一个插件系统，准确地说是做一个连接Scratch3.0与外围硬件的插件系统.&lt;/p&gt;
&lt;p&gt;Scratch3.0已经有它自己的插件机制。Scratch3.0的插件机制比较简单，它允许你写一个自己的插件，这个插件在UI层面表现为自定义的积木块，你在积木块中定义好自己的原语(opcode),之后这个积木块和Scratch中默认的积木块一样，可以被用户拿来拼拼搭搭。用户拼搭的过程中，积木块的组合形式也就是&lt;code&gt;程序&lt;/code&gt;将语义以json的形式传到&lt;a href="https://github.com/LLK/scratch-vm"&gt;scratch-vm&lt;/a&gt;,它们在vm中被解释运行，至于你在页面上看到的小猫的运动和声音，则是scratch-vm中程序的output：output的具体实现是&lt;a href="https://github.com/LLK/scratch-audio"&gt;scratch-audio&lt;/a&gt;和&lt;a href="https://github.com/LLK/scratch-render"&gt;scratch-render&lt;/a&gt;的东西.这些属于实现细节，跟着官方的插件走一遍就行。&lt;/p&gt;
&lt;p&gt;如果你熟悉scratch2和&lt;a href="https://github.com/LLK/scratchx"&gt;scratchx&lt;/a&gt;项目，你会发现，scratch3.0的插件机制和之前相似&lt;/p&gt;
&lt;p&gt;从上边的描述中，我们可以发现，Scratch3.0的插件机制对于你应该如何与外部硬件设备交互，啥都没说。&lt;/p&gt;
&lt;p&gt;在官方的插件机制中，你有极大的自由，因为它无为而治。有时候自由是一种负担，自由意味着你自己得作出选择，并承担所有的风险。&lt;/p&gt;
&lt;h3&gt;官方的尝试&lt;/h3&gt;
&lt;p&gt;说官方对Scratch3.0如何与外部硬件设备交互只字未提，可能会遭到官方的反驳，毕竟他们为乐高的wedo2机器人写了一个Scratch3.0插件（目前源码已经基本完成了，只是官方没有启用这个插件），通过这个插件，我们可以在Scratch3.0中操控wedo2机器人。这个插件的源码向你展示了Scratch3.0是如何与硬件交互的，但这个插件也还是沉默多于言说的，Scratch官方似乎在刻意向维特根斯坦学习保持沉默&lt;/p&gt;
&lt;p&gt;wedo2的源码很好读，写的也漂亮，虽说乐高赞助了media lab一个教授席位，但wedo2的源码并没有获得特殊待遇，而是用了标准的插件机制。如前所述，插件提供了wedo2的编程积木块，这些积木块的语义将传递到scratch-vm中执行，其中最关键的一步是通过socketio将语义传递给硬件。当然上边的说法过于笼统，我跟踪了这个过程，websocket管道的那端并不是直接连着wedo2机器人，而是连着一个本地插件，这个本地插件接着通过蓝牙连接wedo2. 这个本地插件本质上是个代理。&lt;/p&gt;
&lt;p&gt;我之前的的blockly4pi和wedo2的设计几乎一样，这个项目之后我应该会开源出来，之前在jupyter的架构分析的文章中提到过，如果你有兴趣可以翻阅我之前的文章&lt;/p&gt;
&lt;h3&gt;社区的尝试&lt;/h3&gt;
&lt;p&gt;在说我的设计之前，我们来看看社区上已有的方案&lt;/p&gt;
&lt;p&gt;目前把Scratch3.0玩得很溜的，国外有Cozmo，而国内有makeblock和kittenbot&lt;/p&gt;
&lt;p&gt;我去年长途旅行经过深圳时，和makeblock和kittenbot在Maker Faire上碰过面，两个团队都非常优秀&lt;/p&gt;
&lt;h4&gt;Cozmo&lt;/h4&gt;
&lt;p&gt;先从Cozmo说起，Cozmo一骑绝尘，从产品、sdk源码到体验都惊艳之极。Cozmo的目前只公开了python SDK源码，从源码中我们可以看出，Cozmo的server里藏有一个ROS（Robot Operating System），这个ROS应该在它的APP里，这也是它为何如此依赖于APP的原因以及APP如此臃肿的原因。而它的Scratch3.0界面与它的ROS通信，我接下来准备提出的插件架构，本质上是我对Cozmo架构的猜想，因为它的源码未开放，我暂时没办法验证，但我们可以断言的是，cozmo的scratch是以消息的方式与硬件交互的（这是ROS系统的核心），这和wedo2很像，实际上在这一类项目目前只有两种架构风格。大分类下，wedo2和cozmo属于一类，下边我们要说的makeblock和kittenbot是另一类&lt;/p&gt;
&lt;p&gt;我最近花了1.5个周末读完《ROS机器人编程实践》才理解了Cozmo的架构设计（至少在逻辑上），这里边的很多问题，并不是Scratch图形化编程的问题，而是ROS的问题，所以至今Cozmo并无对手。毫无疑问，Cozmo对Scratch3.0的应用上也是一骑绝尘的。这让人想起那句称赞约翰·麦卡锡的那句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;巨人随手丢下的鹅软石都是巨石&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;mblock&lt;/h4&gt;
&lt;p&gt;接下来我们说说makeblock对Scratch3.0的应用，这里我们只关心mblock操作程小奔（硬件机器人）相关的部分，AI和Dl部分有空再说&lt;/p&gt;
&lt;p&gt;插个题外话，mblock中有许多精彩的工作，其中我最喜欢的一个部分是，他们顺利做到让microbit支持多任务(甚至事件)，这个microbit官方目前都还做不到（在python中），实现机制十分精巧，经过逆向分析，我们可以看到具体的代码实现（实际是用正则做预处理），不过即便不通过逆向分析，我们通过观察积木块生成的python代码，也能猜到预编译的机制，关于这块我们之后有空再说&lt;/p&gt;
&lt;p&gt;mblock对硬件的操作是通过将scratch3.0积木generate出python代码来做的，之后将代码灌入他们的硬件机器人（程小奔）中，也就是说在mblock中，Scratch3.0被当作blockly来使用(典型的blcokly app风格)。此外值得一提的是，mblock中有一个叫做通讯变量的概念，这个概念很有趣，它能把硬件和scratch连通。限于篇幅和我困了，也之后再说&lt;/p&gt;
&lt;p&gt;程小奔使用micropython构建，可能是目前最大的micropython项目之一，关于硬件这块，这里也没空多说，前头废话说了太多，对不起诸位。我们之后找个时间来说说mblock是如何使用esp32板子做出程小奔的，当然很多部分是我的实验加猜测，毕竟源码mblock还没有开放。&lt;/p&gt;
&lt;p&gt;mblock和程小奔在工程上都是漂亮的作品，给工程团队打call！&lt;/p&gt;
&lt;h4&gt;kittenbot&lt;/h4&gt;
&lt;p&gt;小喵家的公众号我一直是关注的，小喵们做了许多geek且有趣的工作。团队人不多，但做出的东西却很赞！此处星星眼&lt;/p&gt;
&lt;p&gt;kittenbot之前是open source，新的版本似乎没开放，不过mblock和kittenbot对开源社区都很友好，之后会开放也未可知。&lt;/p&gt;
&lt;p&gt;kittenblcok中之前对microbit的操作也是generate成python再灌入的，这点和mblock相似。最近我没怎么用kittenblcok，不知道最近是不是有调整，等我有空试完再补充。&lt;/p&gt;
&lt;h3&gt;我的设计&lt;/h3&gt;
&lt;p&gt;写到这里都半夜了，只好把这篇文章拆分为二了，明天再来补上我的自己的插件架构设计&lt;/p&gt;
&lt;p&gt;在这个设计之上，我们已经作出了一个具体的实现(scratch3.0和microbit的互操作)，准备以软件包的形式发布(正在制作)，可见我们是吃自己的狗粮的&lt;/p&gt;
&lt;p&gt;架构层面主要受ROS和jupyter的影响&lt;/p&gt;
&lt;p&gt;明天见&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;!--
如果你对Scratch3.0已有的插件机制不熟悉，恐怕这篇文章无法教会你用Scratch3.0来驱动硬件

why

在这个架构之下 scratch也仅是一个组件而已

raspberry4pi

vm的延迟

就像很多人会怀念忙碌的高中一样
如果你不知道要干嘛

关注是差异的开始

驯服 建立联系
订阅

一些你可能会遇到的坑

如果你的硬件和cozmo一样复杂

mblock的做法  通讯变量
你需要ros

‌你不能指望一本书能把傅立叶讲解得和天线宝宝的情节一样简单
‌如果作者说它能
‌要么他是个骗子 要么他是个疯子  要么他是波特兰罗素
‌
‌
scratch源码是复杂的 

它复杂到 甚至发了izuo不短的一段时间去理解它
‌要么这个作者是罗素
‌要么
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid>tag:,2018-03-20:scratch3-plugin-1.html</guid><category>scratch</category></item><item><title>对jupyter notebook的分析、扩展与hack</title><link>/jupyter-notebook-architecture-hack.html</link><description>&lt;h1&gt;大纲&lt;/h1&gt;
&lt;p&gt;本文关心代码在jupyter notebook里从前端传往后端的过程，并试图获取到钩子，因为我最近项目的缘故(可以参考&lt;a href="http://blog.just4fun.site/jupyter-notebook-architecture.html"&gt;我之前的文章&lt;/a&gt;)，分析完通信过程，我将演示如何扩展和hack jupyter notebook&lt;/p&gt;
&lt;p&gt;在接下来动手实践部分将演示如何将其以iframe嵌入到外部网页网页中(在概念上是嵌入一种资源)&lt;/p&gt;
&lt;h1&gt;实验环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu 14.04&lt;/li&gt;
&lt;li&gt;python 2.7.6&lt;/li&gt;
&lt;li&gt;jupyter 4.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装jupyter(notebook)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv env
. env/bin/activate
pip install jupyter #  安装完后是4.3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;运行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;jupyter notebook --no-browser --port 5000 --ip=0.0.0.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我将其跑在5000端口，并接收所有ip的请求&lt;/p&gt;
&lt;p&gt;关于启动参数，不熟悉的同学可以参考我之前&lt;a href="http://blog.just4fun.site/jupyter-summary.html"&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是第一次手动登陆，需要输入token，如果你没加入--no-brower，会自动打开&lt;code&gt;http://127.0.0.1:5000/?token=d311b2834ac7337157c54aaba8d9a524ce48f7597c91xxxx&lt;/code&gt;,验证一次之后，浏览器就有cookie了，之后只需要&lt;code&gt;127.0.0.1:5000&lt;/code&gt;就可访问&lt;/p&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;h3&gt;从websocket入手&lt;/h3&gt;
&lt;p&gt;打开一个新的notebook: &lt;code&gt;http://127.0.0.1:5000/notebooks/Untitled1.ipynb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从chrome调试面板的Network可以看到，有个websocket:&lt;code&gt;ws://127.0.0.1:5000/api/kernels/d13a50b0-6baa-4d5e-8564-95f224daxxxx/channels?session_id=F552491A7C0448A2B5567DE1A71Cxxxx&lt;/code&gt;，代码经由它往后端发送，也经由它接收后台返回的信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebool6c197bf1.png" /&gt;&lt;/p&gt;
&lt;p&gt;当我们运行上头的print("hello world")时，往后台发送如下数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;msg_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;29A5EFC0B11848BE97B66D6E947AEB71&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;session&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;7C49DDC342FD43AA8F5624B08CD7BDAB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;msg_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execute_request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print(\&amp;quot;hello world\&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;silent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;store_history&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;user_expressions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;allow_stdin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;stop_on_error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;buffers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;parent_header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来有5个frames&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebook1122d9a7.png" /&gt;&lt;/p&gt;
&lt;p&gt;其中包含了代码执行的结果&lt;/p&gt;
&lt;p&gt;那么我们只要模拟建立这样的websocket，就拿到所要的钩子了，可以自如地运行代码&lt;/p&gt;
&lt;h3&gt;从页面入手&lt;/h3&gt;
&lt;p&gt;除了建立websocket，我们也可以找找js中钩子&lt;/p&gt;
&lt;p&gt;这个问题在stack overflow里找到解答，方法如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var handle_output = function (data) {console.log(data);}

var callbacks = {
            iopub : {output : handle_output,}
}

var kernel = IPython.notebook.kernel;
kernel.execute(&amp;quot;print(&amp;#39;hello&amp;#39;)&amp;quot;,callbacks)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebookf07db6f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;如此一来我们找到了第二种钩子 &lt;/p&gt;
&lt;p&gt;消息是用websocket传输的，你可以试试实时性:&lt;code&gt;kernel.execute("for i in range(5):import time;time.sleep(1);print('hello')",callbacks)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;嵌入到外部页面中&lt;/h1&gt;
&lt;p&gt;接下来的部分，演示如何将jupyter notebook嵌入到外部页面里，如此一来可以利用jupyter强大的特性做很多好玩的东西，诸如各种语言的线上IDE&lt;/p&gt;
&lt;p&gt;首先建立一个前端页面(my_test.html)，然后以iframe的方式引入jupyter notebook(关于iframe的属性可以参考&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;这里&lt;/a&gt;),接下来在外部网页中与其互操作&lt;/p&gt;
&lt;p&gt;从建立网页开始&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;wwj&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;600&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notebook&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://127.0.0.1:5000/notebooks/Untitled1.ipynb?token=c81b15a38f4fdfebe67cab0400b9feb0e60325f35bafxxxx&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wwjtest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;噢报错了，这个问题这里有描述:&lt;a href="http://stackoverflow.com/questions/26435653/how-do-i-embed-an-ipython-notebook-in-an-iframe-new"&gt;How do I embed an Ipython Notebook in an iframe&lt;/a&gt;,解决方案这个比较靠谱:&lt;a href="https://github.com/jupyter/notebook/issues/284"&gt;Can't use Notebook inside an iframe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决方案是生成配置文件:&lt;code&gt;jupyter notebook --generate-config&lt;/code&gt;，做些配置。往&lt;code&gt;~/.jupyter/jupyter_notebook_config.py&lt;/code&gt;加入&lt;code&gt;c.NotebookApp.tornado_settings = { 'headers': { 'Content-Security-Policy': "frame-ancestors 'self' *" } }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在没有问题啦 (注意不要直接打开my_test.html，使用网络访问它(python -m SimpleHTTPServer))&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebookb1f5c27a.png" /&gt;&lt;/p&gt;
&lt;h3&gt;采用postMessage来传递消息&lt;/h3&gt;
&lt;p&gt;因为jupyter与外部页面可能存在跨域问题（别怕，最复杂的情况，也就是跨域了），我打算采用HTML5 postMessage来处理这个问题&lt;/p&gt;
&lt;p&gt;postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。&lt;/p&gt;
&lt;h3&gt;往iframe里发送消息&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;notebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print(&amp;#39;hello&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;扩展jupyter notebook&lt;/h3&gt;
&lt;p&gt;为了在jupyter notebook中监听到外部网页发过来的消息，并给予响应，我们需要为其写js扩展，哈哈别紧张，jupyter设计得很漂亮，扩展它很简单(可能需要安装:&lt;code&gt;pip install  widgetsnbextension&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;~/.ipython/nbextensions&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;创建我们的扩展(iframe_extension.js):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_on_load&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iframe extension running!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;the iframe get:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data from  iframe extension&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;load_ipython_extension&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_on_load&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在外部网页等待iframe的消息&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response from notebook:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大功告成！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate><guid>tag:,2017-03-22:jupyter-notebook-architecture-hack.html</guid><category>architecture</category></item><item><title>jupyter notebook架构分析</title><link>/jupyter-notebook-architecture.html</link><description>&lt;h1&gt;我的痛点&lt;/h1&gt;
&lt;p&gt;最近在折腾blockly4pi(暂未开源)，这是一个很好玩的项目，试图用blockly来控制树莓派，将硬件功能积木化，从而降低硬件编程入门门槛&lt;/p&gt;
&lt;p&gt;在这个项目中，我将blockly用作代码生成器，这和官方的定位相同，虽然你也可以以其他方式使用它，但我认为将其用作代码生成器，并保持积木的灵活与可组合性(do one thing and do well)，能发挥极大的威力&lt;/p&gt;
&lt;p&gt;我把对blockly的理解都写在这里了：&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个项目中，我遇到一个很典型的问题：将浏览器里的代码丢到机器上运行，然后拿到运行结果，最好能即使给出运行过程信息&lt;/p&gt;
&lt;p&gt;大概像这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="架构图" src="" /&gt; &lt;/p&gt;
&lt;p&gt;实际上这是大多web IDE在做的事&lt;/p&gt;
&lt;p&gt;我的第一个版本很粗暴，用户拼接好积木,blockly生成代码后，点击运行，代码(python)被post到树莓派，在那里执行,然后返回运行结果&lt;/p&gt;
&lt;p&gt;这个过程粗暴到无从批评，因为到处都是槽点，灵活性和扩展性都很糟糕。&lt;/p&gt;
&lt;p&gt;第二个版本采用了websocket(flask-socketio)来通信，后台也加入了事件机制，这样一来阻塞的问题得到解决，c/s两边能及时传递运行时信息&lt;/p&gt;
&lt;p&gt;后来意识到我填坑流的泪，都是当初选web框架时脑子进的水,我需要一个异步非阻塞的框架 ，而不是对flask修修补补,一会加上多线程，一会儿加上事件机制，如果最初就选择&lt;a href="https://github.com/tornadoweb/tornado"&gt;tornado&lt;/a&gt;省去多少时间&lt;/p&gt;
&lt;h1&gt;踏破铁鞋&lt;/h1&gt;
&lt;p&gt;再往后我发现，我特么就是在重造一个轮子，这个轮子在jupyter notebook已经实现得非常漂亮了&lt;/p&gt;
&lt;p&gt;jupyter notebook之前叫ipython notebook，我是它的脑残粉，之前对其做过介绍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/use-ipython-notebook.html"&gt;使用IPython Notebook来学习编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/jupyter-summary.html"&gt;jupyter使用小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;jupyter notebook的架构&lt;/h1&gt;
&lt;p&gt;在&lt;a href="http://jupyter.org/"&gt;jupyter主页&lt;/a&gt;上，官方有对其做个简要说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Jupyter Notebook is based on a set of open standards for interactive computing. Think HTML and CSS for interactive computing on the web. These open standards can be leveraged by third party developers to build customized applications with embedded interactive computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jupyter notebook基于若干开放标准，可以将其视为三个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notebook Document Format : 基于JSON的开放文档格式，完整地记录用户的会话(sessions)和代码、说明性的文本、方程以及富文本输出&lt;/li&gt;
&lt;li&gt;Interactive Computing Protocol: 该协议用于连接Notebook和内核，基于JSON数据、ZMQ以及WebSockets&lt;/li&gt;
&lt;li&gt;The Kernel: 使用特定编程语言实际跑代码的地方，并将输出返回给用户。内核也返回tab键补全信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;架构图&lt;/h3&gt;
&lt;p&gt;上边提到的三个部分直接的关系如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://jupyter.readthedocs.io/en/latest/_images/notebook_components.png" /&gt;&lt;/p&gt;
&lt;p&gt;于是我们可以回答&lt;a href="https://github.com/alex/what-happens-when"&gt;what happens when&lt;/a&gt;这类经典问题,当我们点击运行&lt;code&gt;print("hello world")&lt;/code&gt;时发生了什么&lt;/p&gt;
&lt;p&gt;从上图我们可以看出发生了这样一些事：用户在浏览器里写代码，点击运行后，代码从浏览器发送给Web服务器(tornado)，接着从Web服务器发送消息到Kernel(python)执行代码，在Kernel中执行代码产生的输出/错误会被发送给Web服务器，接着发往给浏览器,用户于是看到输出，这个过程说起来很绕，实际执行飞快无比&lt;/p&gt;
&lt;p&gt;如果你对jupyter的生态有兴趣，那么下边这张架构图，能让你看出各个项目直接的关系,如果你只关心jupyter notebook，它也给出了更为细致的信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://jupyter.readthedocs.io/en/latest/_images/repos_map.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你对通信过程很感兴趣，这一看下这张图（消息的传输用到了 ZeroMQ）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://jupyter-client.readthedocs.io/en/latest/_images/frontend-kernel.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你对ZeroMQ有兴趣，可以看我之前的笔记&lt;a href="http://blog.just4fun.site/mq-note.html"&gt;消息队列中间件学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从途中我们可以看到主要利用了ZeroMQ的Publisher-Subscriber模式来做通信&lt;/p&gt;
&lt;h1&gt;回到我的项目上&lt;/h1&gt;
&lt;p&gt;对上边&lt;code&gt;what happens when&lt;/code&gt;的回答稍作修改，我们就能得到一个改良版的blocklu4pi的架构，而且这类架构几乎适用于任何的web IDE类型的项目。blockly正在流行，这套架构之后大有用武之地&lt;/p&gt;
&lt;p&gt;修改后的通信流程为: 用户在浏览器里拖拽blockly积木块生成代码,点击运行后，代码从浏览器发送给Web服务器(tornado)，接着从Web服务器发送消息到Kernel(python)执行代码，在Kernel中执行代码产生的输出/错误会被发送给Web服务器，接着发往给浏览器,用户于是看到输出&lt;/p&gt;
&lt;p&gt;上述两个流程的区别仅在于产生代码的方式不同而已，jupyter是用户手写，而blockly是用积木生成，余下过程一!模!一!样！&lt;/p&gt;
&lt;h1&gt;交互式探索&lt;/h1&gt;
&lt;p&gt;为了对通信和调用过程有更细致的了解，我们可以在notebook里进行交互式探索, REPL优雅之处在于让我们方便地做实验与探索未知&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hyry.dip.jp/tech/slice/slice.html/36"&gt;这篇文章&lt;/a&gt;给了我们一个思路来观察Kernel是如何接收、运行和返回消息:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户代码和Kernel在同一进程中执行，因此我们可以通过一些特殊的代码研究Kernel是如何接收、运行并返回消息的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者接下来演示了如何通过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gc, threading, traceback, inspect查看了Kernel是如何接收和发送消息，以及如何运行用户代码的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常有意思的一篇分析,不过因为时间过去较久，架构有些调整，所以我这边给出最新的交互数据&lt;/p&gt;
&lt;p&gt;我的版本为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter 4.3.0
ipython 5.2.2
notebook 4.4.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下边是实验数据&lt;/p&gt;
&lt;h3&gt;Kernel中的Socket对象&lt;/h3&gt;
&lt;p&gt;通过gc模块的get_objects()遍历进程中所有的对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mport&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;kapp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IPKernelApp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ipykernel.kernelapp.IPKernelApp at 0x108a22d10&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;kapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell_socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iopub_socket&lt;/span&gt; &lt;span class="c1"&gt;# (&amp;lt;zmq.sugar.socket.Socket at 0x108a8d328&amp;gt;, &amp;lt;ipykernel.iostream.BackgroundSocket at 0x108aa3850&amp;gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;IPKernelApp对象的shell_socket和iopub_socket分别用于接收命令和广播代码执行输出，对应于架构图部分表示通信过程的图中绿色和红色端口&lt;/p&gt;
&lt;p&gt;在Notebook中执行用户输入的&lt;code&gt;print&lt;/code&gt;时，会经由iopub_socket将输出的内容传送给Web服务器，最终在Notebook界面中显示&lt;/p&gt;
&lt;p&gt;我们知道python中，print语句实际上会调用sys.stdout完成输出工作&lt;/p&gt;
&lt;p&gt;那么Kernel中的sys.stdout是什么对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ipykernel.iostream.OutStream object at 0x108a9cfd0&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub_thread&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;ipykernel.iostream.IOPubThread at 0x108aa32d0&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前头说到iopub_socket用于广播代码的输出，可以推测sys.stdout是一个对kapp.iopub_socket进行包装的OutStream对象(sys.stdout经由kapp.iopub_socket广播出来)&lt;/p&gt;
&lt;p&gt;我们可以发现&lt;code&gt;sys.stderr&lt;/code&gt;和&lt;code&gt;sys.stdout&lt;/code&gt;是同个对象(内存地址完全相同)&lt;/p&gt;
&lt;h3&gt;Kernel中的线程&lt;/h3&gt;
&lt;p&gt;通过threading.enumerate()可以获得当前进程中的所有线程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;lt;_MainThread(MainThread, started 140736413283264)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;Thread(Thread-2, started daemon 123145475149824)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;HistorySavingThread(IPythonHistorySavingThread, started 123145485709312)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;Heartbeat(Thread-3, started daemon 123145479356416)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;ParentPollerUnix(Thread-1, started daemon 123145489915904)&amp;gt;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各个线程的功能为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主线程(MainThread)接收来自前端的命令，执行用户代码，并输出代码的执行结果。&lt;/li&gt;
&lt;li&gt;HistorySaving线程用户将用户输入的历史保存到Sqlite数据库中&lt;/li&gt;
&lt;li&gt;Heartbeat线程用于定时向前端发送消息，用于检测心跳&lt;/li&gt;
&lt;li&gt;ParentPollerUnix线程，监视父进程，如果父进程退出，则保证Kernel进程也退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用户代码的执行&lt;/h3&gt;
&lt;p&gt;通过在用户代码中执行traceback.print_stack()输出整个执行堆栈&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pkg_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_code&lt;/span&gt;
    &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_globals&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch_new_instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/traitlets/config/application.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;658&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;launch_instance&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelapp.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;474&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/ioloop.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZMQIOLoop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/tornado/ioloop.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;887&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="n"&gt;handler_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/tornado/stack_context.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;275&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;null_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_events&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;472&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_recv&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;414&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_callback&lt;/span&gt;
    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/tornado/stack_context.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;275&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;null_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;276&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatcher&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch_shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;228&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatch_shell&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;390&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute_request&lt;/span&gt;
    &lt;span class="n"&gt;user_expressions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/ipkernel.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;196&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do_execute&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store_history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;store_history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/zmqshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_cell&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZMQInteractiveShell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2717&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_cell&lt;/span&gt;
    &lt;span class="n"&gt;interactivity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;interactivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2827&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_ast_nodes&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_code&lt;/span&gt;
    &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_global_ns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ipython-input-2-2e94e8c65f66&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从中可以看到用户代码是如何被调用的&lt;/p&gt;
&lt;p&gt;在KernelApp对象的start()中，调用ZeroMQ中的ioloop.start()处理来自shell_socket的消息。当从Web服务器接收到execute_request消息时，将调用kernel.execute_request()方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kapp.kernel.execute_request #&amp;lt;bound method IPythonKernel.execute_request of &amp;lt;ipykernel.ipkernel.IPythonKernel object at 0x10c09f910&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在execute_request()中调用shell对象的如下方法最终执行用户代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print kapp.kernel.shell.run_cell #&amp;lt;bound method ZMQInteractiveShell.run_cell of &amp;lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x10c09f950&amp;gt;&amp;gt;
print kapp.kernel.shell.run_ast_nodes #&amp;lt;bound method ZMQInteractiveShell.run_ast_nodes of &amp;lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x10c09f950&amp;gt;&amp;gt;
print kapp.kernel.shell.run_code #&amp;lt;bound method ZMQInteractiveShell.run_code of &amp;lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x10c09f950&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shell对象在其user_global_ns和user_ns属性在执行代码，这两个字典就是用户代码的执行环境，实际上它们是同一个字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print globals() is kapp.kernel.shell.user_global_ns #True
print globals() is kapp.kernel.shell.user_ns #True
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;查看shell_socket的消息&lt;/h3&gt;
&lt;p&gt;可以利用inspect.stack()获得前面的执行堆栈中的各个frame对象，从而查看堆栈中的局域变量的内容，这样可以观察到Kernel经由shell_socket接收的回送的消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dispatch_shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;execute_request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reply&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上代码在kernel里执行的时候，通信过程已经完成，所以我们可以拿到frames["request"]，frames["reply"]在&lt;code&gt;print "hello world"&lt;/code&gt;之前执行，所以frames["reply"]不包含代码运行的结果&lt;/p&gt;
&lt;p&gt;Kernel接收到的消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;{&amp;#39;buffers&amp;#39;: [],&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;content&amp;#39;: {&amp;#39;allow_stdin&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;code&amp;#39;: &amp;#39;import inspect\nframes = {}\nfor info in inspect.stack():\n    if info[3] == &amp;quot;dispatch_shell&amp;quot;:\n        frames[&amp;quot;request&amp;quot;] = info[0]\n    if info[3] == &amp;quot;execute_request&amp;quot;:\n        frames[&amp;quot;reply&amp;quot;] = info[0]\nprint &amp;quot;hello world&amp;quot;&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;silent&amp;#39;: False,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;stop_on_error&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;store_history&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;user_expressions&amp;#39;: {}},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;header&amp;#39;: {&amp;#39;date&amp;#39;: datetime.datetime(2017, 3, 8, 9, 35, 4, 596768, tzinfo=tzutc()),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_id&amp;#39;: &amp;#39;0616032D8FE8469780CA0A4A89D578AD&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_type&amp;#39;: &amp;#39;execute_request&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;session&amp;#39;: &amp;#39;6DDDE94601B247779637A3F3A0F2F573&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;username&amp;#39;: &amp;#39;username&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;version&amp;#39;: &amp;#39;5.0&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;metadata&amp;#39;: {},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_id&amp;#39;: &amp;#39;0616032D8FE8469780CA0A4A89D578AD&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_type&amp;#39;: &amp;#39;execute_request&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;parent_header&amp;#39;: {}}&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kernel对上述消息的应答&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reply&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reply_msg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;{&amp;#39;content&amp;#39;: {u&amp;#39;execution_count&amp;#39;: 4,&lt;/span&gt;
&lt;span class="sd"&gt;  u&amp;#39;payload&amp;#39;: [],&lt;/span&gt;
&lt;span class="sd"&gt;  u&amp;#39;status&amp;#39;: u&amp;#39;ok&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  u&amp;#39;user_expressions&amp;#39;: {}},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;header&amp;#39;: {&amp;#39;date&amp;#39;: datetime.datetime(2017, 3, 8, 9, 35, 4, 613218, tzinfo=tzutc()),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_id&amp;#39;: u&amp;#39;d4d00f59-d6a3739d12069c2fb8c0a23f&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_type&amp;#39;: u&amp;#39;execute_reply&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;session&amp;#39;: u&amp;#39;337fb80f-b3760e2423717a4de6ff4ba8&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;username&amp;#39;: u&amp;#39;wwj&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;version&amp;#39;: &amp;#39;5.0&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;metadata&amp;#39;: {&amp;#39;dependencies_met&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;engine&amp;#39;: u&amp;#39;7b3fd05a-613d-4c6e-a789-f952660d4edf&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;started&amp;#39;: datetime.datetime(2017, 3, 8, 17, 35, 4, 598015),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;status&amp;#39;: u&amp;#39;ok&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_id&amp;#39;: u&amp;#39;d4d00f59-d6a3739d12069c2fb8c0a23f&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_type&amp;#39;: u&amp;#39;execute_reply&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;parent_header&amp;#39;: {&amp;#39;date&amp;#39;: datetime.datetime(2017, 3, 8, 9, 35, 4, 596768, tzinfo=tzutc()),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_id&amp;#39;: &amp;#39;0616032D8FE8469780CA0A4A89D578AD&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_type&amp;#39;: &amp;#39;execute_request&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;session&amp;#39;: &amp;#39;6DDDE94601B247779637A3F3A0F2F573&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;username&amp;#39;: &amp;#39;username&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;version&amp;#39;: &amp;#39;5.0&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;tracker&amp;#39;: &amp;lt;zmq.sugar.tracker.MessageTracker at 0x10b266f50&amp;gt;}&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的应答消息并非代码的执行结果，代码的输出在执行代码时已经经由sys.stdout-&amp;gt;iopub_socket发送给Web服务器了。&lt;/p&gt;
&lt;h1&gt;手写一jupyter&lt;/h1&gt;
&lt;p&gt;jupyter已经演变得非常庞大，许多的代码都在打磨细节，如此一来直接阅读源码，会陷入各种细枝末节里，不大好一眼看到核心逻辑。为了理解原理，溯本求源是一个好方法，一种策略是翻到早起的版本或者commit&lt;/p&gt;
&lt;p&gt;另一种策略是看一些类似的小项目(专注在原理实现)，&lt;a href="https://github.com/fperez/zmq-pykernel"&gt;zmq-pykernel&lt;/a&gt;是一个不错的实验，它基于ZeroMQ来实现，非常小巧&lt;/p&gt;
&lt;h1&gt;写一个自己的kernel&lt;/h1&gt;
&lt;p&gt;尽管官方文档有相应教程,不过直接从&lt;a href="https://github.com/Calysto/metakernel"&gt;metakernel&lt;/a&gt;开始是个不错的选择,metakernel为我们做了许多起步阶段的工作，具体可以参考&lt;a href="https://github.com/Calysto/metakernel#features"&gt;metakernel features&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jupyter.org/"&gt;jupyter.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter.readthedocs.io/en/latest/architecture/content-architecture.html"&gt;doc jupyter Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jupyter-client.readthedocs.io/en/latest/messaging.html"&gt;Messaging in Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hyry.dip.jp/tech/slice/slice.html/36"&gt;IPython Notebook架构之Kernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate><guid>tag:,2017-03-08:jupyter-notebook-architecture.html</guid><category>architecture</category></item></channel></rss>