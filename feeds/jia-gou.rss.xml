<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Sat, 26 May 2018 00:00:00 +0000</lastBuildDate><item><title>发布scratch3_adapter</title><link>/scratch3_adapter.html</link><description>&lt;h1&gt;项目地址&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-05-26:scratch3_adapter.html</guid><category>scratch</category></item><item><title>日志系统与事件记录</title><link>/log-system-event.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/log_9c5306f2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谁控制过去,谁就控制未来  -- 奥威尔《1984》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;日志(log)系统&lt;/h1&gt;
&lt;p&gt;日志是系统的历史。&lt;/p&gt;
&lt;p&gt;让我们将运行着的大型程序视为一个运转着的社会(小型程序可以视为社区)，运转着的社会和运行着的程序，都是一种时间序列上的事件集合。&lt;/p&gt;
&lt;p&gt;发生在社会里的这些事件，被记录下之后，我们称其为历史。而发生在系统里的这些事件，被记录下之后，我们称之为日志。&lt;/p&gt;
&lt;h3&gt;历史&lt;/h3&gt;
&lt;p&gt;那么我们先来谈谈历史吧。&lt;/p&gt;
&lt;p&gt;在银河系旋臂荒凉的一角，一个称为地球的蓝色行星上(where),一种由猿猴进化而来的的生物(who)在某个时间段里(when)生活其中，做着一些在柏拉图看来非常无关紧要的事(what)(柏拉图说&lt;code&gt;但凡是人的事，就没有一件真的非常重要&lt;/code&gt;)。但我们都知道&lt;code&gt;彼之蜜糖 吾之砒霜&lt;/code&gt;,彼之砒霜也可能是吾之蜜糖，柏拉图不屑的这些人间事，在另一些看来却值得大书特书。他们使用一种编码(文字)将发生过的事件(event)记录在某种存储介质中(竹简或是纸张中)(storage)。由于社会里人数如是此之多，事件发生得是如此的密集，这些记录者(历史学家)不得不拣选其中的一些事来记录，而抛弃另外一些。最初的挑选也许是被迫无奈，毕竟你不可能事无巨细得记录所发生的一切，否则记录历史所需的物质材料将大于构建世界的物质材料。这点很好论证，在你记录这段历史时， &lt;code&gt;你在记录历史&lt;/code&gt;这件事本身也正在发生，这很像站在两面镜子之间的你看到的递归景象。如果事无巨细记录一切，光是记录你自己，就将耗尽所有的墨水。由于事件必须被拣选，于是你总是可以&lt;code&gt;客观&lt;/code&gt;地记录历史的同时，挑挑拣拣，让历史呈现出你想要的样子。&lt;/p&gt;
&lt;p&gt;熟悉数据的人们都知道，如果你有挑选样本的权力，为了得出某些特定结论，你其实不必在数据上&lt;code&gt;造假&lt;/code&gt; ：)&lt;/p&gt;
&lt;h3&gt;事件&lt;/h3&gt;
&lt;p&gt;写上边的一段，倒不是为了调侃历史学家。我其实想说，对于一个程序员而言，如何记录日志，记录哪些事件，怎样安全地存储它，是至关重要的，这和历史之于现实社会一样重要，关于这点《1984》已经给我们论述过了。日志虽是对过往发生的事件的记录，但它影响到系统的未来。从日志中，你能看到系统的很多特性(可视化)，你可以了解到使用系统的人的特质(数据分析)，出了问题能够快速定位与修复(sentry)。&lt;/p&gt;
&lt;p&gt;我们回到历史的比喻。在写作历史时，记录事件所用的纸和笔当然是重要的，但要成为一个好的历史学家，你大多的时间可不是在练字或选纸上，如何挑选以及如何记录所发生事件，才是你需要用心之处&lt;/p&gt;
&lt;p&gt;对于构建程序/网站的日志系统也是一样，日志如何写入，如何存储，这些只是基本工作，这些工作并不怎么花时间，你大多的事件需要花在如何挑选事件，如何记录这些事件，之后如何分析处理它们。而之后如何使用它们，又反过来决定了你需要记录哪些事件，以及事件中的哪些信息&lt;/p&gt;
&lt;p&gt;如何在一个程序语言/框架中写入和存储日志，这方面社区已经有大量的讨论，这个问题往往不必重复解决，很多最佳实践都在语言层(如Python)或者框架层(Django)做完了。稍加配置即可&lt;/p&gt;
&lt;p&gt;构建日志系统，我们大量的事件需要花在考虑如何描述事件，以及哪些是我们关心的事件(这是一个业务相关的问题)。关于如何描述事件，尽管我们最终会用代码实现它，但这其实不是一个编程问题，一个事件无非是某些人(who)在某个时间段(when)在某些场合(where)做了某些事(what),至于他为何要做(why)，就是数据挖掘需要做的事了。写作一篇新闻你常常也要考虑这些要素，所以，对事件的描述，本质上和编程无关。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;功夫在诗外&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;日志中的事件&lt;/h1&gt;
&lt;p&gt;在日志这个话题下，技术社区聊到日志系统，关心的主要是系统的架构，用了什么组件，组件之间如何协同。至于如何描述日志，则谈的不多。对于一个初次使用日志的新手，弄懂怎么将日志文本写入系统并不难，此后的存储、备份、归并、分析也多有现成解决方案或最佳实践。工程师在日志记录这件事上能感受到极大的自由，就像你拿着笔在A4纸面前那种自由，似乎什么都能记下，但该记录些什么，又如何表述它们，往往令人不知所措&lt;/p&gt;
&lt;p&gt;本文将论述日志系统的构建，以网站系统为例，其中记录的日志主要围绕与&lt;code&gt;网站用户&lt;/code&gt;相关的事件，至于&lt;code&gt;系统日志&lt;/code&gt;则不在讨论的范围内。我们也将论述以及如何让日志系统服务于其他系统。架构之外，如何描述日志将是这篇文章的重心所在&lt;/p&gt;
&lt;p&gt;文中，我们将以&lt;a href="https://github.com/edx/edx-platform"&gt;open edx&lt;/a&gt;和我们在&lt;a href="http://www.paperweekly.site/"&gt;PaperWeekly&lt;/a&gt;中的构建的网站后端系统为例来说明。&lt;/p&gt;
&lt;p&gt;这两个系统都基于&lt;a href="https://github.com/django/django"&gt;Django&lt;/a&gt;(一个Python web框架)构建，但阅读本文，并不假设你具备Django的知识，当然如果你懂Django最好不过，一些细节可能对你有用，但不懂也不影响阅读。&lt;/p&gt;
&lt;h3&gt;也许你不需要构建自己的日志系统&lt;/h3&gt;
&lt;p&gt;在我们正式开始之前，需要说明的是: 也许你并不需要专门构建一个完整的日志系统。&lt;/p&gt;
&lt;p&gt;这取决于你要干嘛。如果你关心网站的用户流量、Top10入口页面、Top10来源网站、访客停留时间...这些用户指标，&lt;a href="https://www.google.com/analytics/"&gt;google analytics&lt;/a&gt;、&lt;a href="https://tongji.baidu.com/"&gt;Baidu统计&lt;/a&gt;往往是更聪明的选择，花费一盏茶的事件，你就能将它集成到你的网站里。即便是一些自定义的事件跟踪，你也可以利用这些SDK插件来做&lt;/p&gt;
&lt;p&gt;如果你想做的是网站监控，事件告警，诸如你想知道为何每天深夜，网站都会无故崩溃，是昼夜温差变化还是狼人来袭。那么&lt;a href="https://github.com/getsentry/sentry"&gt;Sentry&lt;/a&gt;是你最佳的选择，集成它也只需要一盏茶的功夫。&lt;/p&gt;
&lt;p&gt;如果你还继续往下读，我们假设你有足够的理由构建日志系统了。&lt;/p&gt;
&lt;h3&gt;open edx中的日志系统&lt;/h3&gt;
&lt;p&gt;如果你意识到构建日志系统时，要将事件的描述也包括在内，那么当你看到open edx复杂的日志系统，你就不会那么吃惊。其中的复杂之处，多是对事件的描述，他们为此构建了多层的抽象，而对事件的描述必然涉及到大量的业务逻辑和概念，所以读起来是十分晦涩的。我并不建议深挖这一块。即便你的系统以open edx为主体，我也不建议去拓展和hack它的日志系统。&lt;/p&gt;
&lt;p&gt;理由如下:&lt;/p&gt;
&lt;p&gt;首先成本高昂，关于edx日志系统，我在一篇文章里有细述:&lt;a href="https://blog.just4fun.site/explore-Open-edX-tracking-system.html"&gt;explore Open edX tracking system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在架构层面，这里边并没有什么复杂性，无非是利用了Django的log机制(其实是对python logging模块的包装)，繁琐的是层层的包装。我觉得去理解和hack这些包装是痛苦且不必要的。原因是日志在存储层面无非是一种文本序列，你可以分别/分布式地存储它们。如果最终的分析需要合并，有很多优秀的工具帮你归并日志（诸如&lt;a href="https://github.com/elastic/beats"&gt;Beats&lt;/a&gt;、Logstash之类）。日志的聚合是最后考虑的问题，而且你大可放心。&lt;/p&gt;
&lt;p&gt;下边我们说说open edx中值得我们学习的地方，先说说open edx中对事件的描述。这部分是这块令人头疼的主要原因。而头疼的原因是这里牵扯到大量的业务逻辑和领域概念。&lt;/p&gt;
&lt;p&gt;典型的事件如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;event_source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edx.course.enrollment.deactivated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;referer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http:\/\/localhost:8001\/container\/i4x:\/\/edX\/DemoX\/vertical\/69dedd38233a46fc89e4d7b5e8da1bf4?action=new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;accept_language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;en-US,en;q=0.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2014-01-26T00:28:28.388782+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla\/5.0 (Windows NT 6.1; WOW64; Trident\/7.0; rv:11.0) like Gecko&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;courses.edx.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;session&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a14j3ifhskngw0gfgn230g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;org_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX\/DemoX\/Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\/change_enrollment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NN.NN.NNN.NNN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;event&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;course_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edX\/DemoX\/Demo_Course&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;honor&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;event_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;edx.course.enrollment.deactivated&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一条相对简单的事件。但我们可以看到基于json的日志，表现力极强(因为支持嵌套结构)，你可以轻松将你关心的信息，都组织在嵌套json结构中。但也别忘了&lt;code&gt;扁平优于嵌套&lt;/code&gt;。这个例子里另一个具有参考价值的是对一些业务无关的信息，诸如username、event_source、referer这些都是通用的概念，这就是我们提到的事件描述相关的部分。&lt;/p&gt;
&lt;p&gt;如果你对细节有更多的兴趣，可以参考我之前的文章:&lt;a href="https://blog.just4fun.site/edx-tracking-logs-data-research.html"&gt;基于tracking logs的数据分析&lt;/a&gt;.如果你的兴趣在open edx本身，那么我之前和同事一起翻译的&lt;a href="https://blog.just4fun.site/events-in-the-tracking-logs.html"&gt;Tracking Logs 中的事件(翻译)&lt;/a&gt;你可能有兴趣。&lt;/p&gt;
&lt;p&gt;open edx中的日志系统给我的影响主要是:你可以直接使用django的日志系统并选择json作为日志格式，此外我们就不必深入了。当然，如果你对open edx本身熟悉，过一遍它的事件类型，作为案例学习，看看它是如何选择事件信息(这需要里理解业务)，也是很有益的&lt;/p&gt;
&lt;h1&gt;PaperWeekly中的日志系统&lt;/h1&gt;
&lt;p&gt;我们在PaperWeekly构建日志系统时，架构层面参考了open edx。我们日志系统同时服务于:推荐系统和数据可视化（对google analytics做些补充）&lt;/p&gt;
&lt;p&gt;我们先做个概览：在&lt;a href="http://www.paperweekly.site/"&gt;PaperWeekly&lt;/a&gt;网站后台我们首先将事件pub出去,对此感兴趣的订阅者自行订阅它(典型订阅者包括消息系统和日志系统)，每个订阅者都跑在一个task中(celery)&lt;/p&gt;
&lt;p&gt;我们最初是在构建通知系统时，发现我们需要考虑如何来描述事件(诸如我们要通知用户A:&lt;code&gt;你发表的文章B被用户C点赞了&lt;/code&gt;)，为了描述这点，我们需要关心事件:&lt;code&gt;用户C点赞了文章B&lt;/code&gt;， 而后在构建推荐系统时，发现我们同样需要关心这些事件。于是我们索性把这几块一并做了。利用pub/sub机制来解耦。&lt;/p&gt;
&lt;p&gt;通知系统和日志系统很大程度是重叠的。核心都是&lt;code&gt;事件&lt;/code&gt;,那么怎么描述事件就摆到桌面来了。&lt;/p&gt;
&lt;p&gt;在关于通知系统的讨论中，这块被讨论得多些，我之前也专门整理了一篇文章：&lt;a href="https://blog.just4fun.site/notification-system-thinking-concept-and-Implementation.html"&gt;notification system思路、概念与实现&lt;/a&gt;,我们在paperweekly，所做的基本是对这篇文章提到的概念做了实现，这块@izuo做了大量出色的工作。&lt;/p&gt;
&lt;p&gt;如何把你关心的事件结构化，一种好的策略是把它们描述为AVOT的结构（我们之所以需要AVOT是因为我们需要结构化事件，我们之所以需要结构化事件，是因为程序善于处理结构化数据，否则你就需要处理一堆脏数据了）。AVOT分别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor&lt;/li&gt;
&lt;li&gt;Verb&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Target&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们举例说明: &lt;code&gt;用户C将文章B放入收藏夹D中&lt;/code&gt;,让我们把对应关系写上:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actor: 用户C&lt;/li&gt;
&lt;li&gt;Verb: 放入&lt;/li&gt;
&lt;li&gt;Object: 文章B&lt;/li&gt;
&lt;li&gt;Target: 收藏夹D&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其中可能引起疑惑的是Object和Target的区别，两者都是名词，如何决定两个名词中哪个对应Object，哪个对应Target。就功能而言你当然可以随意(它们本质只是4个容器)，但最好使用它们的语义，这样你不至于把自己搞乱了，target的意义你可以通过这个英文句子来理解:&lt;code&gt;Erik is pinning Hawaii to his Places to Visit board.&lt;/code&gt;,在这里&lt;code&gt;his Places to Visit board&lt;/code&gt;是Target。&lt;/p&gt;
&lt;p&gt;至于前边我们提到的&lt;code&gt;用户C点赞了文章B&lt;/code&gt;，我们把它视为省略了Target&lt;/p&gt;
&lt;p&gt;你可以试试用AVOT去描述你所关心的事件，你会发现它具有极强的变现力！&lt;/p&gt;
&lt;!--
我们先试着把句子转为`把A当到/加到B`这种结构，B就是Target

前边我们提到的`用户C点赞了文章B`,我们将它转化为:`用户C把他的赞给了文章B`，在此我们将`赞`作为名词使用，在系统里，我们也将它构建为实体，这样以来，我们就能同时直到一个人点赞了哪些文章，以及一篇文章被哪些人点赞了。
--&gt;

&lt;h3&gt;实现细节&lt;/h3&gt;
&lt;p&gt;最后我们来讨论一下实现细节&lt;/p&gt;
&lt;p&gt;PaperWeekly和open edx一样直接使用了Django的日志系统， 我们为用户日志，单独构建了一个handle，以区别与系统日志&lt;/p&gt;
&lt;p&gt;当然，关于日志的这些细节无关紧要，你可以参考你正在使用的框架，文档里论述应该都很全面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &amp;#39;track_log&amp;#39;: {
            &amp;#39;level&amp;#39;: &amp;#39;INFO&amp;#39;,
            &amp;#39;class&amp;#39;: &amp;#39;logging.handlers.RotatingFileHandler&amp;#39;,
            &amp;#39;maxBytes&amp;#39;: 1024 * 1024 * 10,  # 10MB
            &amp;#39;backupCount&amp;#39;: 100,  # 10MB * 100 # 1G
            &amp;#39;filename&amp;#39;: os.path.join(TRACK_LOG_PATH,
                                     &amp;#39;track_log.log&amp;#39;), 
            &amp;#39;formatter&amp;#39;: &amp;#39;track_log&amp;#39;
        },
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至于它的formatter则是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &amp;#39;track_log&amp;#39;: {
            &amp;#39;format&amp;#39;: &amp;#39;%(message)s&amp;#39;
        },
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;track_log formatter只忠实地记录打印message，而message则由python中的类去构建,这些消息类就是对我们前边谈到的AVOB的实践，你需要使用AVOB去具体描述你所关心的事件(通常与业务相关)&lt;/p&gt;
&lt;p&gt;补充一些细节:我们前头说到日志系统主动去sub系统发布的事件，具体的实现利用了Django的signal机制。为了让这些记录不影响用户访问，我们将记录log的task放到了celery里&lt;/p&gt;
&lt;h4&gt;前端事件&lt;/h4&gt;
&lt;p&gt;如果你同时还关心发生在前端的事件，有两个办法解决，其一是使用&lt;a href="https://www.google.com/analytics/"&gt;google analytics&lt;/a&gt;这类前端分析工具，它允许你自定义事件。其二是在后端写一个通用接口，前端构建好事件(json数据)，发送给后台，后台把它当作一般的事件数据，记录到日志中即可，最好加上&lt;code&gt;日志来源&lt;/code&gt;这个属性:&lt;code&gt;event_source&lt;/code&gt;,这点open edx考虑得很周到。&lt;/p&gt;
&lt;h3&gt;服务于其他系统&lt;/h3&gt;
&lt;p&gt;前边提到我们让日志系统服务于推荐系统和数据可视化&lt;/p&gt;
&lt;p&gt;推荐系统会根据用户的行为日志计算出用户的的feed流，实时更新。这部分的实现细节是：我们将日志同步到一台独立的计算机器上，分布式地算出用户feed流之后，回推到网站后端-&amp;gt;用户主页.&lt;/p&gt;
&lt;p&gt;至于数据可视化我们则用了ELK来做，先用Logstash使json平坦化，然后根据业务需要，可视化这些数据。对于日志中不包含的数据，可以通过查询数据库得到，诸如日志中只要记录username，我们就可以还原出user对象(通过查询数据库)。这部分我们也是参考了open edx数据分析这块的的做法，这块的一个建议是，尽量不要再服务器运行高峰期去操作生产服务器。如果你的查询很少，可以直接查询生产服务器，如果查询多且耗性能的话，建议把数据库同步到计算节点上，做本地查询。&lt;/p&gt;
&lt;!--
# 事件

# 事件记录

物是人非

新闻6要素 

如何描述一个事件

存储和分析，相比较而言更为简单

如何描述一个event ， 我们可能想到新闻六要素

功夫在诗外

事件的触发
事件的描述
事件的存储

最难在于事件的描述  使用avob

于是消息系统 也可以用

在paperweekly，我们是这样做的，知乎也是这样做，事件总线

以一个典型的例子  

我们最后，再切到技术的视角下，关心技术实现的问题

### 基于django的实现
你也可以使用其他语言来实现它

我们在django下做的实现


我们将其用于产生feed流，用户的消息通知，以及网站的log


这一块和open edx很像，可以参考我之前的文章

--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97"&gt;维基百科 服务器日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/89674/"&gt;The Log：每个程序员都应该知道有关实时数据的统一抽象（1）概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/notification-system-thinking-concept-and-Implementation.html"&gt;notification system思路、概念与实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-05-18:log-system-event.html</guid><category>architecture</category></item><item><title>Blockly与Scratch3.0的比较分析及选型建议</title><link>/scratch3-blockly.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/thdfebdb2d.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可是时间究竟是什么？没有人问我，我倒清楚，有人问我，我想给他解释，却茫然不解了 --奥古斯丁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Blockly与Scratch3.0的比较分析&lt;/h1&gt;
&lt;p&gt;在我们分析Blockly与Scratch3.0之前，我们需要先阐述一下，Scratch3.0与Blockly分别是什么&lt;/p&gt;
&lt;h3&gt;Blockly是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;blockly将自己定位为一个编辑器。这个描述再精当不过&lt;/p&gt;
&lt;p&gt;我在之前的文章: &lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;里说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户的拖曳（拖曳作为一种输入，可以类比为普通编辑器的键盘输入），输出为生成的代码。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于每个积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，用户自己掌控。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以简单将blockly视为积木化的编辑器，编辑器的输出只有代码。&lt;code&gt;Do one thing&lt;/code&gt;的原则让它成为一个灵活小巧的库，而不是框架，可以轻松与其他工具整合&lt;/p&gt;
&lt;h3&gt;Scratch3.0是什么&lt;/h3&gt;
&lt;p&gt;那么Scratch3.0是什么呢，相比于&lt;code&gt;Blockly是什么&lt;/code&gt;，这个问题要难回答很多，可能的答案有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scratch3.0是Scratch2.0的下一个版本，使用html5构建&lt;/li&gt;
&lt;li&gt;Scratch3.0是个&lt;code&gt;低门槛、宽围墙、高天花板&lt;/code&gt;的playground&lt;/li&gt;
&lt;li&gt;Scratch3.0是一个Blockly APP&lt;/li&gt;
&lt;li&gt;Scratch3.0是scratch-gui + scratch-vm + scratch-render + ...&lt;/li&gt;
&lt;li&gt;Scratch3.0是那种你用过就知道是什么的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几条阐述颇有盲人摸象的味道，我们站在不同侧面去阐述我们看到的Scratch3.0&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其触牙者，即言象形如莱茯根；其触耳者，言象如箕；其触头者，言象如石；其触鼻者，言象如杵；其触脚者，言象如木臼；其触脊者，言象如床；其触腹者，言象如瓮；其触尾者，言象如绳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;盲人摸象的比喻异常深刻，不盲的我们，看到&lt;code&gt;真实的事物&lt;/code&gt;是经过这样一个过程：可见光进入视网膜，经过神经元对光信号的解释和传递，在大脑渲染出一个图景,尽管隔了这么多层，我们坚信看到了所谓的&lt;code&gt;真实&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可能确实看到了&lt;code&gt;真实&lt;/code&gt;，毕竟我们有阐述&lt;code&gt;真实&lt;/code&gt;的权利:)&lt;/p&gt;
&lt;p&gt;下边我们来逐条阐述&lt;code&gt;Scratch3.0是什么&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Scratch3.0是Scratch2.0的下一个版本，使用html5构建&lt;/h5&gt;
&lt;p&gt;这条侧重在解释&lt;code&gt;3.0&lt;/code&gt;，Scratch3.0是对Scratch2.0的升级，3.0基于html5技术构建，可以跨平台运行&lt;/p&gt;
&lt;p&gt;这条回答站在Scratch发展过程的视角来看，如果你是Scratch的老用户，这句话也许足以让你醍醐灌顶。但新认识Scratch3.0的小伙伴对这个阐述应该不会感到满意。&lt;/p&gt;
&lt;p&gt;学习哲学的一种好办法是学习哲学史，溯本求源常常是个不错的方法，对scratch前世今生的追溯，可以参考我之前的这篇文章:&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Scratch3.0是个&lt;code&gt;低门槛、宽围墙、高天花板&lt;/code&gt;的playground&lt;/h5&gt;
&lt;p&gt;这个比喻精彩之极，它阐述了Scratch的设计哲学。&lt;/p&gt;
&lt;p&gt;Scratch被设计为一个playground，一个playground应该尽可能提供丰富的基础设置，供它的使用者们嬉戏玩乐和探索。所以我们在Scratch3.0中看到了丰富的积木块和富有表现力的舞台效果，以及强大的可扩展性&lt;/p&gt;
&lt;p&gt;关于这点，&lt;a href="http://learn.media.mit.edu/lcl/weeks/week5/"&gt;Learning Creative Learning 第五周的课里&lt;/a&gt;里Scratch的创始人做了精彩的阐述&lt;/p&gt;
&lt;h5&gt;Scratch3.0是一个Blockly APP&lt;/h5&gt;
&lt;p&gt;就这篇文章而言，这是个不错的答案，它甚至应该放到下文&lt;code&gt;Blockly与Scratch3.0的比较分析&lt;/code&gt;的部分里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scratch3.0是一个Blockly APP&lt;/code&gt;这句话的意思是，Scratch3.0基于&lt;code&gt;Blockly&lt;/code&gt;构建，就是说Scratch3.0中包含了Blockly。&lt;/p&gt;
&lt;p&gt;那么什么是&lt;code&gt;Blockly APP&lt;/code&gt;呢，按blockly官方说法，你需要做以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scratch之前并不是基于Blockly构建的，3.0的版本里，才这样做，为何之前的Scratch不基于Blockly呢，因为Scratch这个项目比Blockly更早诞生，Scratch前几个版本的积木块都是自己造的轮子。现在Blockly几乎是公认最好的积木化编辑器，所以Scratch在3.0里把轮子换成Blockly&lt;/p&gt;
&lt;p&gt;说&lt;code&gt;Scratch3.0基于Blockly构建&lt;/code&gt;依然显得含糊其辞，Scratch3.0是个庞大的项目，包含了很多组件，只有其中的scratch-blocks基于Blockly，&lt;/p&gt;
&lt;h5&gt;Scratch3.0是scratch-gui + scratch-blocks + scratch-vm + scratch-render + ...&lt;/h5&gt;
&lt;p&gt;这条阐述是程序员视角，站在Scratch3.0的项目结构上解释它&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talk is cheap , show me the code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们直接打开&lt;a href="https://github.com/LLK"&gt;Scratch&lt;/a&gt;在github的主页，就可以看到相关的项目细节，源码一览无余都在其中&lt;/p&gt;
&lt;p&gt;这也是是程序员们理解一个项目最常用的一种方式，这种方式给了你一种安全感，你看到了项目&lt;code&gt;内部&lt;/code&gt;的细节，源代码不会骗人，代码也不会给你看一堆有的没的PPT，或像我一样，扯一些有的没的形而上学&lt;/p&gt;
&lt;p&gt;代码虽然不会骗人，但庞大的代码，在没有架构描述，没有好的文档的时候，对新手而言，跟读天书也差不太多，它不骗你，它只是让你晕头转向，Scratch团队目前要忙的使其实在太多，限于人力，你不能在短期内指望他们提供文档&lt;/p&gt;
&lt;p&gt;尽管没有文档，我们要一窥Scratch3.0的整体组成还是不难的，scratch-gui聚合了其他的组件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scratch-vm&lt;/li&gt;
&lt;li&gt;scratch-blocks&lt;/li&gt;
&lt;li&gt;scratch-render&lt;/li&gt;
&lt;li&gt;scratch-storage&lt;/li&gt;
&lt;li&gt;scratch-audio&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构成了完整的Scratch3.0&lt;/p&gt;
&lt;h5&gt;Scratch3.0是那种你用过就知道是什么的东西&lt;/h5&gt;
&lt;p&gt;这个阐述比较抖机灵，就像说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;诗是那些翻译之后就消失的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;风景是拍进照片就不见的那些东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些阐述有某种禅的味道，或者是对其进行的恶意模仿&lt;/p&gt;
&lt;p&gt;但我相信这个阐述会得到让·皮亚杰、Papert和艾伦.凯的赞同，你可以轻松在使用过程中掌握一个概念或工具，而很难在一种概念的文本化阐述中掌握它。关于这点皮亚杰做了精彩的论述，但是他的书真是太难读了。大家有兴趣可以看看：&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;比较分析&lt;/h3&gt;
&lt;p&gt;一圈阐述下来，我们对Blockly的理解相对清晰: 这是一个积木化代码编辑器&lt;/p&gt;
&lt;p&gt;对于Scratch3.0，我们从很多个侧面试着阐述它。Scratch3.0是复杂的，我觉得没有必要回避这一点，对于复杂事物，相比于下个断言，我更愿意从不同侧面观察它。&lt;/p&gt;
&lt;p&gt;现在我们来比较一下这两者，这些比较的视角，是我临时拍脑袋想到的一些方面，有了前边对二者的分析和阐述，你其实也可以写出一大堆的比较分析。&lt;/p&gt;
&lt;p&gt;我们可以把Blockly视为一个库，而把Scratch3.0视为一个框架。一个库往往遵循&lt;code&gt;Do one thing&lt;/code&gt;的Unix哲则，你可以轻松将它组合到你的项目中，Blockly库只负责从积木中生成代码，怎么去使用这些代码？这些代码是控制虚拟角色还是实际的硬件？它何时被解释运行？是否支持并行？代码运行生命周期是怎样的？解释器在本地还是在另一个硬件上？Blockly通通不关心。Blockly给予你自由，同时你也不得不肩负起自己的责任，你需要去考虑构建一个Blockly APP剩下的部分，当然一个典型的Blockly APP我相信是有最佳实践的，目前我认为这里边存在需要解决的大的问题有且仅有3大类，这个话题与本文关系不大，之后有机会再说。值得提醒的是，你遇到的一些觉得难以绕过困难，可能是一些构建一个解释器会遇到的困难，这个困难和普通的编写程序很不一样，因为大部分时间里，我们都是在使用解释器，而不是构建一个，这可能是让很多开发者不知所措的地方。&lt;/p&gt;
&lt;p&gt;相比于Blockly，Scratch3.0则更像一个框架，Scratch3.0几乎开箱可用，它有各个组件，你可以通过修改这些组件来定制它，当然你需要先理解它。你可以通过插件系统加入自己的扩展，无论是软件还是硬件，你都可以进行拓展。如果是对硬件的扩展，你可以考虑基于我们的工作来做，会轻松很多，参考:&lt;a href="http://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说Scratch3.0是框架，侧重在强调它的结构完整性和灵活性，它不是vue、django那种框架，Scratch3.0介于框架和项目之间，它给予你的自由度要比一般意义上的框架要小&lt;/p&gt;
&lt;p&gt;Scratch3.0的解释器相关部分:scratch-vm 十分强大和灵活，要做到这点很不容易。如果你在做和Scratch3.0类似的事，最后不要重造轮子。已经有大厂试着从Blockly开始，重造一个Scratch3.0，他们确实也造出来了。很难的工作在于重写scratch-vm。在一个典型blockly APP中，大家一般使用官方推荐的interpreter来解释执行代码，但在一个复杂项目中，可能是不够的。如果你准备重写scratch-vm，最好有懂解释器的人。而且最好不要去做这件事，尽管你可能做得到，但它的灵活性很难有scratch-vm那么好。&lt;/p&gt;
&lt;h1&gt;选型建议&lt;/h1&gt;
&lt;p&gt;那么我们究竟什么时候选择Blockly，而在另一些时候选择Scratch3.0？&lt;/p&gt;
&lt;p&gt;这恐怕是不容易说清楚的问题，我试着给出一些建议。大多时候需要你对自己正在做的事情有清晰的阐述之后，才好给具体建议。&lt;code&gt;认识你自己&lt;/code&gt;总是没错的&lt;/p&gt;
&lt;p&gt;简单地说如果你才涉足积木化编程这一块，那么从Blockly开始常常是个好建议，因为Scratch3.0很复杂，除非你想原原本本地使用Scratch3.0,否则对它的任何修改，对早期团队来说都是艰难的；你折腾任何积木化编程项目的时候，可能都会遇到一些共性的问题，如我前头提到的那一大串，Scratch3.0在这块探索了很久，也给出了很多优秀的解决方案，但你一来就读Scratch3.0相关组件的源码，很可能云里雾里，你可能先要从钻木取火开始（从Blockly基础项目开始），等你意识到这个问题域的常见困境之后，才会意识到什么好的解决方案。在困境出现之前，好的解决方案会被看作一种过度复杂的设计&lt;/p&gt;
&lt;p&gt;也许你最终选择使用Scratch3.0，但Scratch3.0基于Blockly构建，对Blockly的早期投入，总是能帮助到你理解Scratch3.0的&lt;/p&gt;
&lt;p&gt;关于如何开始Blockly的旅程的教程目前少的可怜，如果你愿意可以从我之前写得东西入手，源码和文章都有：&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;, 文末附有教程和源码&lt;/p&gt;
&lt;p&gt;前边只是泛泛地建议说你应该从Blockly开始，对于你最终应该选择什么，并没有给出具体建议&lt;/p&gt;
&lt;p&gt;让我们假设你已经对Blockly和Scratch3.0都有了清晰的了解，这时候的选型问题，就取决于你要做的具体事情了，我们来讨论一些典型的场景&lt;/p&gt;
&lt;p&gt;比如你想做一个code.org或者Tynker这类网站，Blockly是个理想的选择，事实上，code.org或者Tynker也确实是这样做的，&lt;code&gt;Blockly+interpreter&lt;/code&gt;是这类网站理想的解决方案，简单灵活。code.org和Tynker中的每个关卡都是一个典型的Blockly APP。当然如果你愿意，你也可以使用scratch-blocks来做，深圳已经有公司这样做，你可以将scratch-blocks视为Blockly的定制版（使用scratch-blocks和使用blockly几乎没有区别，我在教程里也写了这部分），只是改了积木的UI风格，但它们依然可以被当作干净的库使用，而不牵扯太多Scratch3.0的其他东西，至于generate代码的功能也完全一样&lt;/p&gt;
&lt;p&gt;假如你想做一个机器人控制/教学平台，两者都可选，目前市面上的机器人使用scratch2.0控制的居多(部分原因是Blockly出现的比较迟)。新出的机器人使用两者的都有，使用Blockly的优势，如前边说的：轻量，自由，但也意味着你要去操心更多解释和实现上的细节工作，这是个复杂的工作，有机会单独讨论；使用scratch的话，你只要专心写插件部分就好了，如果你的机器人是交互式的，比如Cozmo（我已经把它接入Scratch3中)，关于代码如何被vm解释运行，如何控制生命周期，如何支持事件和并行，scratch-vm都帮你做了！&lt;/p&gt;
&lt;p&gt;关于积木化编程工具与硬件/机器人交互的话题，涉及很多典型问题：代码灌入式的还是服务风格的？通信方式是什么？基于web控制还是基于APP控制？是否支持事件风格编程？值得专门写一片文章谈论&lt;/p&gt;
&lt;h1&gt;尾声&lt;/h1&gt;
&lt;p&gt;这篇文章，拖了好久才写完，写这篇文章的时候，我在碧山，阿朱阿碧的碧，满目山河的山，写完后，我下午该从这儿离开了，昨晚下了一夜的雨&lt;/p&gt;
&lt;p&gt;我晚上撑着伞，走过村头巷尾，路过一户人家的厨房，很旧的房子，门很小，雨很大，我在门口站了一会儿就走了&lt;/p&gt;
&lt;p&gt;上次夜里路过一户人家厨房的时候，你说着彼得潘的故事，我这回在这儿读完了彼得潘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有一个陌生的小男孩，从窗外向里张望。他的乐趣数也数不清，那是别的孩子永远得不到的。但是，只有这一种快乐，他隔窗看到的那种快乐，他却被关在了外面，永远也得不到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- 
当人们问scratch是什么是，他所期待的可能是"scratch"为何有如此的魔力，这个问题在我看来是个形而上问题，我无法回答

诗是什么的时候，你告诉它格律是什么是不够的

那么诗是什么，诗是`诗是翻译之后就消失的哪些东西`这样的俏皮话，让人会心一笑

那么阐述是什么意思，阐述意思是你可以用一件事来解释另一件事，但这是可能的吗？ 这些问题留给该死的哲学家吧

# 选型建议

积木化编程有且仅有几类问题

    *  软件 游戏引擎
    *  硬件 通信
    *  一个平台

用积木表达原语
解释、执行 vm

是不是许多事件和多线程 

硬件应该是 server

协议设计
我的手机  11:01:26
那scratch3.0是什么呢
是个blockly app
但这句话包含的信息很少

就像你问我，keras
是什么的呢，我说是一个Python项目

关于scratch，我只是说了，它包含了blockly而已

如果你是一个开发者，你会觉得我说得太少了

那么你在什么情况下选择blockly

设计出正交而富有表现力的积木 并不容易

block只是scratch的编辑器

怎么并行，把破坏控制在局部

有哪些接口，操作原语
是否需要并行
是否支持事件
交互  
解释器在哪里
是否与外部通信


事实上大多数的读者们，并不知道scratch是什么，要回答scratch是什么，最好的方法之一，是去读一读media lab的《爆裂》一书，scratch也诞生自这个实验室

阐述是一件很有趣的活动，阐述这个要求你用一件事来解释另一件事，如果你是个怀疑论者，你会说，为何我们可以用一件事去解释另一件事，这个问题留给该死的哲学家们，就我们来说，这种解释
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-30:scratch3-blockly.html</guid><category>scratch</category><category>blockly</category></item><item><title>积木化编程与智能家居</title><link>/scratch3-smart-home.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/smart-homeda856b95.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 世界是事实的总和，而非物(das Ding)的总和   -- 维特根斯坦《逻辑哲学论》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在上篇文章: &lt;a href="http://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;里写道:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的兴趣是将Scratch3.0连接到有趣的开源硬件和AI上，甚至也包括接入你童年的那辆玩具四驱车&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但你知道，&lt;code&gt;有趣的硬件&lt;/code&gt;和&lt;code&gt;开源&lt;/code&gt;有时候不是并肩而行的，好在开放似乎正在成为一种趋势和竞争优势，商家们即便不开源他们的硬件,却也为了扩大自己的影响力和市场份额，积极地以各种方式开放自己的一部分，以便与外部连接。为了让事情变得更有趣，我们决定进一步扩大Scratch3.0的连接范围，除了&lt;code&gt;开源硬件&lt;/code&gt;之外，也接入遵循标准协议或提供sdk的硬件&lt;/p&gt;
&lt;p&gt;我们最近接入的一套硬件是米家的智能家居礼品装，它长这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/scratch3-homec5c1f139.png" /&gt;&lt;/p&gt;
&lt;p&gt;套件里包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;米家多功能网关&lt;/li&gt;
&lt;li&gt;米家智能插座&lt;/li&gt;
&lt;li&gt;米家无线开关&lt;/li&gt;
&lt;li&gt;米家人体传感器&lt;/li&gt;
&lt;li&gt;米家门窗传感器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;智能家居&lt;/h1&gt;
&lt;p&gt;在这个被媒体成为&lt;code&gt;人工智能&lt;/code&gt;的时代，每个人对&lt;code&gt;智慧&lt;/code&gt;/&lt;code&gt;智能&lt;/code&gt;都能说出自己的一堆见解、偏见或幻想&lt;/p&gt;
&lt;p&gt;以至于一大堆标着&lt;code&gt;智慧&lt;/code&gt;前缀的酒瓶里，有卖假酒的、有卖碳酸饮料的、有卖来自阿尔卑斯山脉的矿物质水的，以及卖梦想的&lt;/p&gt;
&lt;p&gt;维基百科上与&lt;code&gt;智能家居&lt;/code&gt;最近的一个词条是&lt;a href="https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E5%AE%B6%E5%BA%AD"&gt;智慧家庭&lt;/a&gt;,其中这个阐述，我觉得很清晰:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;家庭自动化 (Home automation) ，是指家庭中的建筑自动化，也被称作智慧家庭 (Smart home)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比于智能，自动化的可操作性要强很多&lt;/p&gt;
&lt;p&gt;在技术视角下，今天的智能家居往往是那些用于实现家庭自动化的家庭设备，他们是一些传感器和执行器。它们与网关进行通信，所以智能家居一般作为物联网的子概念&lt;/p&gt;
&lt;h1&gt;智能家居的痛点&lt;/h1&gt;
&lt;h3&gt;碎片化&lt;/h3&gt;
&lt;p&gt;目前市面上有琳琅满目的智能家居设备，碎片化问题十分严重&lt;/p&gt;
&lt;p&gt;如维基百科所言:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然目前有很多竞争厂商，然而却没有多少世界共通的工业标准，智慧家庭空间严重的被碎片化。[2] 制造商有时会透过扣留文件以及诉讼来阻止独立的实作。[3]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些散落的设备虽然像莱布尼茨的单子一样受到欲求（appetition）的驱动（主要是受到&lt;code&gt;提高销量&lt;/code&gt;的欲求的驱动），但却不像莱布尼茨的单子那样，肯多去和其他单子交流&lt;/p&gt;
&lt;p&gt;如果你买到手的智能家居之间无法协同工作，&lt;STRIKE&gt;那它们和咸鱼有什么区别,&lt;/STRIKE&gt;那它们还怎么用来实现家庭自动化？仅仅是因为你买了A厂家的智慧灯泡，B厂家的智慧开关，你按下开关，得到的却是404，你此刻得到的除了对google的思念之外还有啥。你恨不能拿一瓶涂改液把外包装上的&lt;code&gt;智能&lt;/code&gt;改为&lt;code&gt;智障&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;智能家居目前处在诸侯割据，度量衡没有统一的战国。这个问题该如何是好？&lt;/p&gt;
&lt;h3&gt;要有光&lt;/h3&gt;
&lt;p&gt;让我们抡起技术的锤子，来看看有什么钉子值得敲一敲。&lt;/p&gt;
&lt;p&gt;对一个程序员来说，首先想到的可能是&lt;STRIKE&gt;&lt;a href="https://github.com/nvbn/thefuck"&gt;thefuck&lt;/a&gt;&lt;/STRIKE&gt;代理(proxy),我们只要把各家的硬件放在代理之下，似乎就能在上层抽象地调用它们，你在代理中去实现各个硬件的通信细节，对外都暴露统一的的接口，对于一盏灯，我至少应该能调用两种接口/服务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于功能更强的，还可以控制亮度和颜色。&lt;/p&gt;
&lt;p&gt;至于功能更强的，我还可以让它播放一首歌，购买一个商品，或是让它去兜售我的隐私,哦不对，兜售隐私似乎是个互联网软件都能做，不需要很强的功能；对于更强的，我还可以对他说&lt;code&gt;hi 神灯，我能实现你的三个愿望&lt;/code&gt;， 再做下去，功能冗杂得要像某宝和某信了，我们不需要一个伪装成操作系统的电灯：）&lt;/p&gt;
&lt;p&gt;事实上，如果一件事值得做，很可能已经有人在做它了，你与这些成熟项目的距离只差google和github。一个叫Paulus的程序员实现了上边的这些，他构建了一个叫&lt;a href="https://www.home-assistant.io/"&gt;home-assistant&lt;/a&gt;的Python程序，把各个碎片拼在了一起，home-assistant可以接入所有主流的智能家居设备&lt;/p&gt;
&lt;p&gt;home-assistant的核心是个事件系统，它使用状态机来管理设备，系统代理了设备，对外提供服务，它的架构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="架构图" src="https://d33wubrfki0l68.cloudfront.net/2b58a392636b4cd35eeb4e69c73326479ea44bda/21f5b/images/architecture/component_interaction.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于home-assistant，Paulus的&lt;a href="https://youtu.be/Cfasc9EgbMU"&gt;这个演讲&lt;/a&gt;十分精彩,视频的20:49中，Paulus熄灭hello，world文件被创建的一瞬，Paulus如同表演了一场街头魔术，观众的掌声里，Paulus的反应十分有趣: 从惊喜到羞涩再到得意。演示亲手构建的程序有时候和表演一场魔术带来的喜悦是很相似的：你对精心设计的魔法颇为自得，观众在演出里，被你带入预设的情境下，他们陷入谜团，感受震撼和惊喜&lt;/p&gt;
&lt;p&gt;home-assistant的架构和我为&lt;a href="http://blog.just4fun.site/scratch3-plugin-2.html"&gt;Scratch3插件系统&lt;/a&gt;做的架构设计十分相似&lt;/p&gt;
&lt;p&gt;这两个系统本质上都是事件系统，也都基于Python构建&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生命苦短，我用Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把事件构建在消息之上(zeromq的世界观是&lt;code&gt;everything is message&lt;/code&gt;)，我想让这个插件系统是跨语言的，而zeromq是我觉得最佳的解耦方案。Paulus选择在Python语言层做这件事，当然Paulus也做到了跨语言，通过对外提供服务实现。&lt;/p&gt;
&lt;p&gt;维特根斯坦在《逻辑哲学论》的第一个论题里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 世界就是所发生的一切东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着他阐述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 世界是事实的总和，而非物(das Ding)的总和&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他在论题2中阐述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2 那发生的东西，即事实，就是原子事实的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这或许可以解释为何事件系统和状态机拥有如此强大的表现力&lt;/p&gt;
&lt;h3&gt;自动化规则&lt;/h3&gt;
&lt;p&gt;智能家居允许你自定义规则来实现家庭自动化，你可能会定义出如下的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我到家的时候，把空调打开&lt;/li&gt;
&lt;li&gt;当我离开房间的时候，把灯关了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何为普通用户提供一个友好的的界面，让他们方便地定义规则，这不是件容易的事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;定义规则&lt;/code&gt;，听起来很适合用代码来做这件事，但大众不会编程，这句话没有指责或沾沾自喜的意味，在此我并不是说大众是麻瓜。会编程是一件挺酷的事，它极大地赋予了你创造的可能，但这个和会写作、会钢琴、会滑雪没有本质区别，你通过练习获取一项技能来取悦自己。另有些人把时间花在了博览言情小说或纸飞机制作上。每个人的际遇和兴趣各不相同，并不是所有人都有机会写代码，也不是所有人都觉得这是一件和旅行、看电影一样有趣的事。&lt;/p&gt;
&lt;p&gt;我们这些会编程的人如何为他人提供一个不错的工具，就像他们为我们提供的好看的旅行照片和影评那样，让他们解决家庭自动化的问题同时也领略编程乐趣。&lt;/p&gt;
&lt;p&gt;市面上的解决方案，我觉得都不大理想，如果你用过&lt;code&gt;米家&lt;/code&gt;你就知道我在说什么（事实上它已经是这个行业目前最好的方案之一了），在&lt;code&gt;米家&lt;/code&gt;中你为你的智能家居设备们编写规则，仿佛是在进行中文编程，一个页面只够你表达一个if-else逻辑，为了实现&lt;code&gt;如果开关打开，就把灯打开&lt;/code&gt;这个逻辑，你可能需要来回切换5、6个页面。这里只连接了2设备，只有一个if逻辑！&lt;/p&gt;
&lt;p&gt;如果你有3个房间的设备，为它们编写一天时段里的自动化规则，你可能需要先考虑升级一下大脑&lt;/p&gt;
&lt;p&gt;同样是上边的规则，我把&lt;code&gt;米家的智能家居套件&lt;/code&gt;接入Scratch3之后，可使用如下积木来表达&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/scratch3-home1eb5c560.png" /&gt;&lt;/p&gt;
&lt;p&gt;你在&lt;code&gt;米家&lt;/code&gt;里拖拽来回切换5、6个页面折腾出的东西，和上边拖2个积木表达的语义是完全相同的。但撰写规则的过程要舒服很多。不仅编程规则要直观和舒适很多，你还可以在Scratch中即时对每个不熟悉的积木做实验，而不必等你把规则一次写完才能看效果，这很像程序员使用REPL时的愉快感受。你对每个积木的属性一览无余，之后在一个界面中，去拼搭组合它们，而不必在多个页面中来回切换。撰写规则变成了轻松的堆叠积木&lt;/p&gt;
&lt;p&gt;Scratch社区有许多案例和报告，解释为何积木化是适合普通人编程的方式，关于这点，之后有空细说&lt;/p&gt;
&lt;p&gt;我们把&lt;code&gt;米家的智能家居套件&lt;/code&gt;接入Scratch3之后，它获得了更多的扩展性，诸如下边的视频里，我们演示如何让你徒手隔空为水壶通电并开灯&lt;/p&gt;
&lt;video src="http://olk8jbdzi.bkt.clouddn.com/scratch-smart-home.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;我在Scratch的舞台上中拖拽了两个按钮，当我的手在视频里按下左边的按钮，则开灯并让水壶开始烧水,而我隔空按下右边的按钮，就将它们都断电&lt;/p&gt;
&lt;p&gt;技术层面，通过运动检测来做到这点，而运动监测在scratch3里也只是一个积木块而已&lt;/p&gt;
&lt;p&gt;在Scratch3 Lab中，我们将把各类有趣的开放硬件和AI接入，允许你做各种有趣的事情,目前接入的硬件和AI在陆续增多，&lt;code&gt;米家的智能家居套件&lt;/code&gt;是我门接入智能家居的第一步&lt;/p&gt;
&lt;h1&gt;空间编程&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;空间编程&lt;/code&gt;是一个让我着迷的概念，你的空间会对你的行为做出相应的反应，诸如在你的房间里，当你睡觉的时候，灯光自动熄灭，当你起床时，窗帘自动打开。&lt;/p&gt;
&lt;p&gt;可如何判断你何时是"睡觉模式"呢？&lt;/p&gt;
&lt;p&gt;你当然可以用一些生物传感器来做(事实上我正准备买这些东西)，或者简单地使用机器视觉来做，你可以教会机器什么时睡觉模式，诸如你躺下盖了被子时候，告诉Scratch这是睡觉状态，起床掀开被子后告诉Scratch，这是起床模式，这变成了一个很简单的二值分类问题，你需要的样本数据和计算量都很小，目前在本地网页里很轻松就做到了，如果使用我之前设计的Scratch插件系统，更复杂的机器视觉可以移到另一台机器做也没问题，对用户你只需暴露出Scratch3的积木。这块我在自己的房间里实现了，目前还没有上线了Scratch3 Lab。&lt;/p&gt;
&lt;p&gt;为一个空间编程常常需要AI和物联网的配合&lt;/p&gt;
&lt;p&gt;AI善于提取出模式，对这个模式做出怎样的响应，可以通过调度物联网里的硬件实现。而空间所拥有的智慧，则是这些彼此响应的事件关系网。&lt;/p&gt;
&lt;p&gt;我和几个朋友一起在南京开了家青旅，开业小半个月，还蛮热闹的，我们想在这个空间里做一些好玩的尝试。我们都是二楼南书房的忠实粉丝，我们在青旅里做了很多有意思的小空间，让大家方便看书和讨论，也会定期组织一些周末沙龙和电影放映活动。如果你也喜欢看书或旅行，你有好的想法，都欢迎过来玩&lt;/p&gt;
&lt;p&gt;我准备在青旅里边做一些有意思的空间编程尝试，诸如当你夜里坐下翻开书的瞬间，灯才为你打开，而你合上书思考的时候，灯将熄灭，你将沉浸在自己的世界里 ：）&lt;/p&gt;
&lt;p&gt;Just for fun&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-22:scratch3-smart-home.html</guid><category>scratch</category><category>blockly</category></item><item><title>Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目</title><link>/Scratch3-Lab.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/scratch305c5e1ac.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想走得快，一个人走; 如果你想走得远，一群人走&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;hi 大家好，我们最近在构建一个好玩的项目&lt;/p&gt;
&lt;p&gt;我在前边花了两篇文章在架构上论述了如何为Scratch3.0设计一个通用的插件系统，让Scratch3.0能与物理世界的万物互联，并为它们编程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/scratch3-plugin-1.html"&gt;为Scratch3.0设计的插件系统(上篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/scratch3-plugin-2.html"&gt;为Scratch3.0设计的插件系统(下篇)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个通用的插件系统已基本完成，最近在做一些收尾的工作、重构以及撰写文档，我们之后计划将它开源并围绕它构建社区，如此一来，将你感兴趣的硬件接入Scratch3.0，将成为一件有趣的举手之劳&lt;/p&gt;
&lt;p&gt;利用这个插件系统，我们已将cozmo和microbit接入到scratch3中。你可以让cozmo、microbit与scratch3.0中的所有积木互动，做出令人惊叹的效果，边界是你的想象力！我们正将这两个项目作为插件案例，写入文档，向开发者们描述如何利用插件系统，通过短短的数行代码，将你的新硬件或任何其他好玩的东西接入Scrach3.0&lt;/p&gt;
&lt;p&gt;我们的兴趣是将Scratch3.0连接到有趣的开源硬件和AI上，甚至也包括接入你童年的那辆玩具四驱车&lt;/p&gt;
&lt;h1&gt;Scratch3 Lab&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch3.just4fun.site/"&gt;Scratch3 Lab 香港节点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3_lab"&gt;Scratch3 Lab 托管在github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
以上其实是同一个网站，都是Scratch3 Lab。如果你能打开第一个地址最好不过了，服务器在香港，国内可能不能访问。因为这个原因，我顺便把Scratch3 Lab部署到了github上，国内还算稳定，方便大家访问。

最后一个地址是http的，用于测试http和https的差异，我们希望插件系统能尽可能支持更多的网站。Scratch3 Lab主要用于做各种好玩的实验--&gt;

&lt;p&gt;由于没在国内备案，带来的不便给各位道歉。当然，该道歉的也许不该是我们 ：）&lt;/p&gt;
&lt;p&gt;如果你有什么有趣的东西想接入Scratch3，欢迎与我们联系，如果我们也觉得好玩，可能会和你一起将它接入Scratch3，如果我们兴趣不大，那欢迎你自己亲自动手啦&lt;/p&gt;
&lt;p&gt;我们的口号是: Just for fun&lt;/p&gt;
&lt;h3&gt;技术视角&lt;/h3&gt;
&lt;p&gt;Scratch3 Lab采用Scratch官方最新的源码，使用官方的develop分支，我们尽量做到每个月都跟进官方的开发分支，如果有一些有趣的特性，我们会采用更快的更新频率&lt;/p&gt;
&lt;p&gt;Scratch3 Lab目前已经以extensions的形式整合了2个硬件插件和一个图像识别插件，一个文本情感分析插件，一个语音插件，一个运动检测插件&lt;/p&gt;
&lt;p&gt;AI相关的几个项目来自MIT media lab，我们之后准别采用他们的思路来接入国内好玩的AI平台，此外跑在本地的AI也是我们的关注方向。&lt;/p&gt;
&lt;p&gt;我们想让这个项目在没有互联网的环境也能正常使用，所以我们尽力做出替代云的AI插件，至少不影响概念的讲解和教学，当然趣味性也不能少，关于这一点，AI社区已经有很多有趣的尝试，这部分有空细说。我们这样做的目标是让Scratch3 Lab能完全跑在树莓派上，这样即便没有网络的贫困山区，也能完整得到极具趣味和表现力的Scratch3&lt;/p&gt;
&lt;p&gt;目前我们正在接入IoT(通过mqtt)和BB8(通过web bluetooth)，物联网也是Scratch3的兴趣之一&lt;/p&gt;
&lt;h1&gt;插件系统&lt;/h1&gt;
&lt;p&gt;插件系统的源码还在梳理中，不久会开源出来，别着急啦～ 你可以先体验AI和Scratch3最新的特性&lt;/p&gt;
&lt;p&gt;目前你可以看到插件系统的文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;香港节点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs"&gt;托管在github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Just for you :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-08:Scratch3-Lab.html</guid><category>scratch</category></item><item><title>为Scratch3.0设计的插件系统(下篇)</title><link>/scratch3-plugin-2.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="http://blog.just4fun.site/scratch3-plugin-1.html"&gt;上篇文章&lt;/a&gt;里，关于Scratch3.0如何与外部硬件(设备/玩具)通信，我们梳理了社区里的常见做法&lt;/p&gt;
&lt;p&gt;在这篇文章中，准备写写我的架构设计,文中会给出架构图，解释这样设计的原因，以及不采用目前主流做法的原因。&lt;!--unix哲学--&gt;&lt;/p&gt;
&lt;h1&gt;设计原则与初衷&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;编程是伪装成艺术的科学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近来在编程方面，对我影响最深的一本书是《ROS机器人编程实践》。在这本书里，我们看到通过遵循Unix哲学可以构建出何等强大、灵活而简单的系统(Unix哲学在《Unix编程艺术》中被阐述得很精彩)&lt;/p&gt;
&lt;p&gt;当然，ROS的&lt;code&gt;简单&lt;/code&gt;，是指它在面对所处理的问题时，已尽可能地简单，这个系统本身还是有一定复杂度的。当我们在说《哲学问题》把哲学阐述如此清晰、简单时，其中的简单也是这个意思。你不能指望一本书能把N-S方程的推导过程讲解得和天线宝宝的情节一样简单。如果有作者声称他能，要么他是骗子，要么他是疯子，要么他是伯特兰·罗素&lt;/p&gt;
&lt;p&gt;Unix哲学里鼓励如何构建一个系统呢？&lt;/p&gt;
&lt;p&gt;我很喜欢&lt;a href="https://github.com/booksbyus/zguide"&gt;zguide&lt;/a&gt;（zguide是ZeroMQ的教材，写得几乎和ZeroMQ这个项目一样出色）中的这个阐述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The physics of software is not algorithms, data structures, languages and abstractions. These are just tools we make, use, throw away. The real physics of software is the physics of people--specifically, our limitations when it comes to complexity, and our desire to work together to solve large problems in pieces. This is the science of programming: make building blocks that people can understand and use easily, and people will work together to solve the very largest problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为社会成员的我们，在遇到一个高度复杂的问题时，我们会群策群力，分工合作，将问题拆分为若干个部分，一起解决。这里就体现了编程的科学：创建一组小型的构建模块，让人们易于理解和使用，那么大家就会一起用它来解决问题。&lt;/p&gt;
&lt;p&gt;想想你的Unix工具箱中的grep/find/awk/sed组合起来时何等地强大。当一堆的小工具能彼此沟通时，事情就变得有趣了。&lt;/p&gt;
&lt;p&gt;和ROS一样，我们鼓励社区的参与，我们想设计一个开放的系统，允许更多的插件加入进来，允许你去连接更多有趣的设备，在这个架构中鼓励人们重用社区的经验，在别人的基础上工作，也方便人们将自己的工作分享给社区。&lt;/p&gt;
&lt;p&gt;我们不想构建一个封闭、精致且庞大的系统。&lt;/p&gt;
&lt;h1&gt;插件系统功能描述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;连接scratch3.0与来自物理世界的各种硬件及开放系统&lt;/li&gt;
&lt;li&gt;可以配合scratch3.0官方网站使用。自行架设的scratch3.0网站如果与官方插件系统兼容，那么你也能直接使用这套插件系统。就是说等scratch3.0发布之后，任何采用官方扩展机制的网站，都能使用这套插件系统，而无须hack核心源码&lt;/li&gt;
&lt;li&gt;允许你为系统写扩展插件，将任何你能操控的系统接入Scratch3.0中&lt;/li&gt;
&lt;li&gt;当然如果你有兴趣，甚至可以把这套系统接入Scratch3.0之外的地方，比如你想把它接入Blockly或者node-red中，插件系统虽然最初是为Scratch3.0而做，但Scratch3.0并不特殊，它仅仅是一个消息订阅者和发布者而已&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;项目的架构思路主要来自ROS(Robot Operating System)。ROS是个复杂系统，当今世上有趣和复杂机器人大多都运行着ROS，从国际空间站的R2机器人到一些路上自动驾驶的汽车。我觉得ROS系统中处理的很多问题，在使用Scratch驱动外部设备/机器人时也会遇到，尤其当你不甘于只是简单地灌入代码、想做出交互性更好的机器人时(比如Cozmo)。这些问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传感器的数据发布机制；&lt;/li&gt;
&lt;li&gt;服务(service)与动作(action)的区分，以及各自处理的问题；&lt;/li&gt;
&lt;li&gt;如何重用消息结构，让一套积木块能将相同的语义传递给不同的硬件，只需调整最末端的驱动代码便可控制天上飞的、地上走的、水里游的。&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cozmo显然就是利用这些概念构建了令人惊叹的操作体验&lt;/p&gt;
&lt;p&gt;我最近在构建一个叫ROLS(Robot Operating Lite System)的项目，从名字可以看出，这个项目是想做个轻量级的ROS,目前只开了个坑:&lt;a href="https://github.com/wwj718/ROLS"&gt;ROLS&lt;/a&gt;。在github上创建项目的动机常常是，想到了一个好名字，不知道你们有没有这种情况&lt;/p&gt;
&lt;p&gt;ROS的作者也在重写这个项目，如他自己在ROS2.0的设计文档中说的其实ROS的核心是一个&lt;code&gt;匿名的发布-订阅中间件系统&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本文为Scratch3.0设计的插件系统本质上便是一个匿名的发布-订阅中间件系统，组件之间通过消息彼此沟通。系统中所有的节点都对等，即便是Scratch3.0也不特殊。&lt;/p&gt;
&lt;p&gt;至于为这个系统提供更多好用的小工具(诸如roscore、rosrun、rostopic等)，我会在&lt;a href="https://github.com/wwj718/ROLS"&gt;ROLS&lt;/a&gt;中陆续折腾出来它们的轻量级替代品&lt;/p&gt;
&lt;h1&gt;架构图&lt;/h1&gt;
&lt;p&gt;&lt;img alt="scratch3.0插件系统" src="http://olk8jbdzi.bkt.clouddn.com/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们自上往下看。&lt;/p&gt;
&lt;p&gt;首先看Scratch3.0部分。在Scratch3.0中，我们需要写一个js插件，这个插件就像特洛伊木马，作为我们的&lt;code&gt;内应&lt;/code&gt;，之后它将负责与外部沟通。如果你对这部分不熟悉，应该先去看看官方文档:&lt;a href="https://github.com/LLK/scratch-vm/wiki/Scratch-3.0-Extensions-Specification"&gt;Scratch 3.0 Extensions Specification
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这部分是Scratch3.0的原生扩展机制。目前官方已经完成了好几个扩展，有兴趣的话，可以自行阅读源码。其中wedo2的扩展很值得一读。&lt;/p&gt;
&lt;p&gt;你在Scratch3.0中写js扩展时，除了要定义出积木块的样式之外，还需要定义出opcode(语义)和它的具体实现，这部分将在vm中执行，我们参考了wedo2的机制，采用
socketio来传递消息(当然你也可以直接使用websocket)。&lt;/p&gt;
&lt;p&gt;插件系统中有一个websocket server(这个架构很像jupyter)，与vm进行双向通信。&lt;/p&gt;
&lt;p&gt;websocket server采用zeromq来sub/pub消息&lt;/p&gt;
&lt;p&gt;而每个硬件被程序代理，代理程序也采用zeromq来sub/pub消息&lt;/p&gt;
&lt;p&gt;系统看去有些啰嗦，比如代理程序似乎是不必要的。如果你为scratch3.0写过插件，你可能会想，我们为何不把websocket server视为vm的延伸，如果vm的概念延伸到物理机器上，不就具备了和硬件交互的能力！(已经从浏览器蔓延到了系统进程中)那么为何还需要多一层硬件代理。原因是为了构建一个匿名的发布-订阅系统，以便解耦和重用。&lt;/p&gt;
&lt;h3&gt;具体实现&lt;/h3&gt;
&lt;p&gt;上图是一张语言无关的架构图，你可以用任何你喜欢的语言去实现它，下边说说我们目前自己的实现（这部分由@izuo和我一起实现）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://olk8jbdzi.bkt.clouddn.com/%E6%88%91%E7%9A%84%E5%AE%9E%E7%8E%B0.png" /&gt;&lt;/p&gt;
&lt;p&gt;在少儿编程领域，microbit，scratch，Cozmo是我最喜欢的三个项目，所以我们第一步先做了microbit的scratch插件 ，下一步计划是把cozmo也带入scratch中&lt;/p&gt;
&lt;p&gt;相比于js，我更偏好python，所以在具体实现上，我没有选择electron，而是使用python来构建，之后使用pyinstaller打包分发到各个平台 (目前我们完成了mac系统和win10系统的打包，更多的环境还在陆续添加，因为scratch3.0正式发布还远，所以平台兼容这块，倒也不急，但会考虑服务于国内教育环境(比如对windows 32位系统的兼容))&lt;/p&gt;
&lt;!--
我们要做什么: 为scratch构建插件系统，使其能与物理世界连接
--&gt;

&lt;h1&gt;why and why not&lt;/h1&gt;
&lt;p&gt;原本想回答一些why的问题，这些问题我和@izuo讨论了许多，但一时半会可能也不好说清，天色已晚，今天写几个对why not的思考，就该睡了。&lt;/p&gt;
&lt;h3&gt;why not Web Bluetooth&lt;/h3&gt;
&lt;p&gt;Web Bluetooth个很棒的方案，我们目前正在这块做一些实验，Web Bluetooth让vm可以直接与硬件交互！&lt;/p&gt;
&lt;p&gt;这个方案另一个好处是对移动端友好，安卓中你甚至只需要浏览器，就能控制硬件，ios中，浏览器目前不支持 Web Bluetooth，你需要包装成app。apple正在成为过去的微软&lt;/p&gt;
&lt;p&gt;不过并非所有人都喜欢蓝牙，也不是所有场景都适合蓝牙，如果我们想把cozmo和microbit接入scratch，我们就做不到（microbit通过一些方式可能能做到，不过会有一些其他问题）&lt;/p&gt;
&lt;p&gt;要把bb8接入，倒是做得到的，bb8支持ble(Web Bluetooth需要ble)&lt;/p&gt;
&lt;p&gt;此外值得一提的是，来自国内的mCookie用到了Web Bluetooth的策略.此外有趣的是他们用了NW.js而不是electron&lt;/p&gt;
&lt;h3&gt;why not chrome serial&lt;/h3&gt;
&lt;p&gt;这也是个有趣方案，我们也在关注和实验&lt;/p&gt;
&lt;p&gt;这个方案对chrome的版本要求比Web Bluetooth低，对老机器支持比较好，不过需要安装浏览器插件&lt;/p&gt;
&lt;h3&gt;为何不在websocket server中直接操控硬件&lt;/h3&gt;
&lt;p&gt;除了前头解释过的原因之外，还有一个异步执行的问题，这个问题我在jupyter的架构中讨论过，有兴趣的话可以翻翻那篇文章。jupyter和我们遇到相似的问题，这部分的架构也基本一样&lt;/p&gt;
&lt;h3&gt;采用基于消息的架构，对社区有什么好处&lt;/h3&gt;
&lt;p&gt;最坏情况下(比如大家没有好的协同习惯)，社区依然能够共享大多的经验，因为架构强行使用消息来通信，你可以看到任何组件是如何收发消息的(通过源码或是类似rostopic的工具)。而在最好的情况下，如果大家都共用消息结构，引入一个新的硬件，你通常只需要需要修改最底层驱动的几行代码&lt;/p&gt;
&lt;p&gt;这种架构的灵活性，ROS已经向我们充分显示了。当然设计出色且通用的消息体又是另一个话题了&lt;/p&gt;
&lt;h3&gt;为何要做成一个开放的系统，而不是发布一个针对某个具体产品的软件&lt;/h3&gt;
&lt;p&gt;我不喜欢封闭的系统&lt;/p&gt;
&lt;p&gt;我们处在一个封闭、占地为王、屁股决定脑袋的世界。open source、重用、fork...这些概念在软件行业之外的领域，受到猛烈抨击。如果你在开源社区之外去做这些事，不只是政治不正确，你还可能吃官司。关于这些话题，到处都是屁股决定脑袋的言论&lt;/p&gt;
&lt;p&gt;我们喜欢scratch社区的口号：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--
# todo
思考对移动端的支持: web bluetooth等

如果你对Scratch3.0已有的插件机制不熟悉，恐怕这篇文章无法教会你用Scratch3.0来驱动硬件

why

在这个架构之下 scratch也仅是一个组件而已

raspberry4pi

vm的延迟

就像很多人会怀念忙碌的高中一样
如果你不知道要干嘛

关注是差异的开始

驯服 建立联系
订阅

一些你可能会遇到的坑

如果你的硬件和cozmo一样复杂

mblock的做法  通讯变量
你需要ros

‌你不能指望一本书能把傅立叶讲解得和天线宝宝的情节一样简单
‌如果作者说它能
‌要么他是个骗子 要么他是个疯子  要么他是波特兰罗素
‌
‌
scratch源码是复杂的 

它复杂到 甚至发了izuo不短的一段时间去理解它
‌要么这个作者是罗素
‌要么
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-03-26:scratch3-plugin-2.html</guid><category>scratch</category></item><item><title>为Scratch3.0设计的插件系统(上篇)</title><link>/scratch3-plugin-1.html</link><description>&lt;blockquote&gt;
&lt;p&gt;我们每个人在内心深处都怀有一个梦想: 希望创造出一个鲜活的世界，一个宇宙。处在我们生活的中间、被训练为架构师的那些人，拥有这样的渴望: 在某一天，在某一个地方，因为某种原因，创造出了一个不可思议的、美丽的、摄人心魄的场所，在那里人们可以漫步，可以梦想，历经很多世纪绵延不绝.  --Christopher Alexander&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Scratch是一个游乐场&lt;/h1&gt;
&lt;p&gt;在我心目中，Scratch便是这样的一个美丽的场所，孩子们和保持着童真的成年孩子们在其中漫步、游戏以及梦想。Ta们在Scratch这个游乐场中创造并分享着乐趣&lt;/p&gt;
&lt;p&gt;&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;是一个伟大的项目，无论从它最初的愿景(在&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;A Networked, Media-Rich Programming Environment to Enhance Technological Fluency at After-School Centers in Economically-Disadvantaged Communities&lt;/a&gt;这篇提案中有详述最初的构想和愿景），还是它后来的实现，无论就它的软件设计，还是项目影响力而言，都堪称杰作。&lt;/p&gt;
&lt;p&gt;如果你对Scratch的前世今生感兴趣，可以翻翻我之前的这篇文章:&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;, 当时刚读完《爆裂》，借助《爆裂》一书提供的线索和借助互联网，我沿着理念传承这条线，从雷斯尼克的Scratch追溯到派珀特的Logo语言，之后抵达皮亚杰的认知论（再往前甚至将追溯到洛克的经验论）&lt;/p&gt;
&lt;p&gt;将于今年8月发布的Scratch3.0无疑将延续这个传统，继续做出振奋人心的东西。&lt;/p&gt;
&lt;p&gt;Scratch是个游乐场，而且是一个设施完善的游乐场，你可以在其中发挥天马行空的想象力，创造出属于你的世界。&lt;/p&gt;
&lt;h1&gt;Scratch是个像素世界&lt;/h1&gt;
&lt;p&gt;唯一的遗憾是，这个世界以像素的形式出现。当然你可能觉得这哪是什么遗憾，像素世界比身边这个原子世界广阔多了。去过四维空间的人，回到三维空间，即便漂浮于太空，外面是浩瀚的星空，仍会觉得逼仄得很，一些人的星辰大海只不过是囚禁另一些人的牢笼。这是一种患有幽闭恐惧症的感受。同样，如果你在虚拟世界浪荡久了，回到现实中来，可能也会觉得匮乏，饭居然是要一口一口吃的！我明明都已经完整吃了一口了，这个世界甚至都不提供一个for循环积木块！&lt;/p&gt;
&lt;p&gt;但现在是三月，江南的三月，鸡鸣寺樱花盛开的三月，站在鸡鸣寺下、玄武湖前的樱花树下，无论阴雨还是春风，你都很难不被这个由原子而非像素构成的世界所打动。&lt;/p&gt;
&lt;p&gt;虽然这个原子世界的确可能就是像素构成的...anyway，先抛开你的怀疑论，让我们进入正题。&lt;/p&gt;
&lt;p&gt;我们说了这个多科幻的内容，正题并不是你期待的《三体》，这篇文章准备讨论的是如何为Scratch3.0构建一个通用的插件系统，让Scratch3.0能与来自物理世界的硬件打交道&lt;/p&gt;
&lt;p&gt;我们准备构建一个通道，连接原子和像素世界&lt;/p&gt;
&lt;h1&gt;来自物理世界的硬件&lt;/h1&gt;
&lt;p&gt;物理世界有许多参数，诸如温度、湿度、磁场、速度、光照强度...以及，你喜欢的姑娘身上特有的香味&lt;/p&gt;
&lt;p&gt;这些参数可以被各种各样的传感器所捕获(你身上的绅士风度属于不可知论范畴，不能被物理参数描述)，一旦你能捕捉到现实世界的各种参数，你就能做出许许多多好玩的东西，诸如，通过捕捉楼道的声音，你可以做到: 当楼道里有声响时，把楼道里的灯打开，这样一来你就做出了声控灯。可是你不想白天楼道里也亮着灯，怎么办呢？ 你可以把光照的信息也捕捉了，这样一来你就可以在光线不足且有人经过的时候才开灯,这样一来就节约了电力。注意我说的是光线不足就开灯，而不是晚上，为什么呢，因为我们希望光线昏暗的时候，都能为行人提供照明，而不只是晚上，我们通过获取光线而不是根据昼夜时间来决定是否亮灯。这样系统可以在大白天里黑云压城的时候，也能贴心地为行人亮起灯，这便是所谓的"科技以人为本"&lt;/p&gt;
&lt;p&gt;Scratch是个教育项目，如果它能更多地和现实发生关联，一个孩子在Scratch中创作的作品，能对接到各种硬件，在Ta现实中被使用，这些作品帮助了Ta的父母和邻居解决生活问题，Ta的学习热情将将被噼里啪啦点燃。关于这方面的描述，PC之父Alan Curtis Kay和LOGO语言之父Papert都有过精彩论述&lt;/p&gt;
&lt;p&gt;我们结下来要做的，就是实现这样一种架构，在这个架构之下，各种硬件(小车、四轴飞行器、cozmo、microbit、Circuit Playground Express)都能与Scratch3.0交互，而且这个架构将基于消息，利用pub/sub的机制，降低构件的耦合，提高系统健壮性和可重用性&lt;/p&gt;
&lt;h1&gt;为Scratch3.0设计的插件系统&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Make everything as simple as possible, but not simpler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Scratch3.0&lt;/h3&gt;
&lt;p&gt;Scratch3.0基于html5构建，能轻松支持多平台运行，十分可期，而且带来了多项有趣的改进。目前的开发版可以在&lt;a href="https://llk.github.io/scratch-gui/"&gt;这儿尝鲜&lt;/a&gt;. 对源码有兴趣的小伙伴，想围观或者参与，都可以&lt;a href="https://github.com/LLK"&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;社区里不少公司已经用Scratch3.0作出了许多令人惊叹的东西，Cozmo是其中的佼佼者&lt;/p&gt;
&lt;p&gt;Scratch3.0原计划在今年春季正式发布，春天来了，樱花如期盛开，Scratch3.0却跳票了，推迟到8月份发布&lt;/p&gt;
&lt;p&gt;人面不知何处去，桃花依旧笑春风&lt;/p&gt;
&lt;h3&gt;Scratch3.0的插件机制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;自由有时候是一种负担&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的目标是为Scratch3.0做一个插件系统，准确地说是做一个连接Scratch3.0与外围硬件的插件系统.&lt;/p&gt;
&lt;p&gt;Scratch3.0已经有它自己的插件机制。Scratch3.0的插件机制比较简单，它允许你写一个自己的插件，这个插件在UI层面表现为自定义的积木块，你在积木块中定义好自己的原语(opcode),之后这个积木块和Scratch中默认的积木块一样，可以被用户拿来拼拼搭搭。用户拼搭的过程中，积木块的组合形式也就是&lt;code&gt;程序&lt;/code&gt;将语义以json的形式传到&lt;a href="https://github.com/LLK/scratch-vm"&gt;scratch-vm&lt;/a&gt;,它们在vm中被解释运行，至于你在页面上看到的小猫的运动和声音，则是scratch-vm中程序的output：output的具体实现是&lt;a href="https://github.com/LLK/scratch-audio"&gt;scratch-audio&lt;/a&gt;和&lt;a href="https://github.com/LLK/scratch-render"&gt;scratch-render&lt;/a&gt;的东西.这些属于实现细节，跟着官方的插件走一遍就行。&lt;/p&gt;
&lt;p&gt;如果你熟悉scratch2和&lt;a href="https://github.com/LLK/scratchx"&gt;scratchx&lt;/a&gt;项目，你会发现，scratch3.0的插件机制和之前相似&lt;/p&gt;
&lt;p&gt;从上边的描述中，我们可以发现，Scratch3.0的插件机制对于你应该如何与外部硬件设备交互，啥都没说。&lt;/p&gt;
&lt;p&gt;在官方的插件机制中，你有极大的自由，因为它无为而治。有时候自由是一种负担，自由意味着你自己得作出选择，并承担所有的风险。&lt;/p&gt;
&lt;h3&gt;官方的尝试&lt;/h3&gt;
&lt;p&gt;说官方对Scratch3.0如何与外部硬件设备交互只字未提，可能会遭到官方的反驳，毕竟他们为乐高的wedo2机器人写了一个Scratch3.0插件（目前源码已经基本完成了，只是官方没有启用这个插件），通过这个插件，我们可以在Scratch3.0中操控wedo2机器人。这个插件的源码向你展示了Scratch3.0是如何与硬件交互的，但这个插件也还是缄默多于言说，目前开发文档几乎保持空白，Scratch官方似乎在有一种向维特根斯坦的恶意模仿&lt;/p&gt;
&lt;p&gt;wedo2的源码很好读，写的也漂亮，虽说乐高赞助了mit media lab一个教授席位，但wedo2的源码并没有获得特殊待遇，而是用了标准的插件机制。如前所述，插件提供了wedo2的编程积木块，这些积木块的语义将传递到scratch-vm中执行，其中最关键的一步是通过socketio将语义传递给硬件。当然上边的说法过于笼统，我跟踪了这个过程，websocket管道的那端并不是直接连着wedo2机器人，而是连着一个本地插件，这个本地插件接着通过蓝牙连接wedo2. 这个本地插件本质上是个代理。&lt;/p&gt;
&lt;p&gt;我之前的的blockly4pi和wedo2的设计几乎一样，这个项目之后我应该会开源出来，之前在jupyter的架构分析的文章中提到过，如果你有兴趣可以翻阅我之前的文章&lt;/p&gt;
&lt;h3&gt;社区的尝试&lt;/h3&gt;
&lt;p&gt;在说我的设计之前，我们来看看社区上已有的方案&lt;/p&gt;
&lt;p&gt;目前把Scratch3.0玩得很溜的，国外有Cozmo，而国内有makeblock和kittenbot&lt;/p&gt;
&lt;p&gt;我去年长途旅行经过深圳时，和makeblock和kittenbot在Maker Faire上碰过面，两个团队都非常优秀&lt;/p&gt;
&lt;h4&gt;Cozmo&lt;/h4&gt;
&lt;p&gt;先从Cozmo说起，Cozmo一骑绝尘，从产品、sdk源码到体验都惊艳之极。Cozmo的目前只公开了python SDK源码，从源码中我们可以看出，Cozmo的server里藏有一个ROS（Robot Operating System），这个ROS应该在它的APP里，这也是它为何如此依赖于APP的原因以及APP如此臃肿的原因。而它的Scratch3.0界面与它的ROS通信，我接下来准备提出的插件架构，本质上是我对Cozmo架构的猜想，因为它的源码未开放，我暂时没办法验证，但我们可以断言的是，cozmo的scratch是以消息的方式与硬件交互的（这是ROS系统的核心），这和wedo2很像，实际上在这一类项目目前只有两种架构风格。大分类下，wedo2和cozmo属于一类，下边我们要说的makeblock和kittenbot是另一类&lt;/p&gt;
&lt;p&gt;我最近花了1.5个周末读完《ROS机器人编程实践》才理解了Cozmo的架构设计（至少在逻辑上），这里边的很多问题，并不是Scratch图形化编程的问题，而是ROS的问题，所以至今Cozmo并无对手。毫无疑问，Cozmo对Scratch3.0的应用上也是一骑绝尘的。这让人想起那句称赞约翰·麦卡锡的那句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;巨人随手丢下的鹅软石都是巨石&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;mblock&lt;/h4&gt;
&lt;p&gt;接下来我们说说makeblock对Scratch3.0的应用，这里我们只关心mblock操作程小奔（硬件机器人）相关的部分，AI和DL部分有空再说&lt;/p&gt;
&lt;p&gt;插个题外话，mblock中有许多精彩的工作，其中我最喜欢的一个部分是，他们顺利做到让microbit支持多任务(甚至事件)，这个microbit官方目前都还做不到（在python中），实现机制十分精巧，经过逆向分析，我们可以看到具体的代码实现（实际是用正则做预处理），不过即便不通过逆向分析，我们通过观察积木块生成的python代码，也能猜到预编译的机制，关于这块我们之后有空再说&lt;/p&gt;
&lt;p&gt;mblock对硬件的操作是通过将scratch3.0积木generate出python代码来做的，之后将代码灌入他们的硬件机器人（程小奔）中，也就是说在mblock中，Scratch3.0被当作blockly来使用(典型的blcokly app风格)。此外值得一提的是，mblock中有一个叫做&lt;code&gt;通讯变量&lt;/code&gt;的概念，这个概念很有趣，它能把硬件和scratch连通。限于篇幅和我困了，也之后再说&lt;/p&gt;
&lt;p&gt;程小奔使用micropython构建，可能是目前最大的micropython项目之一，关于硬件这块，这里也没空多说，前头废话说了太多，对不起诸位。我们之后找个时间来说说mblock是如何使用esp32板子做出程小奔的，当然很多部分是我的实验加猜测，毕竟源码mblock还没有开放。&lt;/p&gt;
&lt;p&gt;mblock和程小奔在工程上都是漂亮的作品，给工程团队打call！&lt;/p&gt;
&lt;h4&gt;kittenbot&lt;/h4&gt;
&lt;p&gt;小喵家的公众号我一直是关注的，小喵们做了许多geek且有趣的工作。团队人不多，但做出的东西却很赞！此处星星眼&lt;/p&gt;
&lt;p&gt;kittenbot之前是open source，新的版本似乎没开放，不过mblock和kittenbot对开源社区都很友好，之后会开放也未可知。&lt;/p&gt;
&lt;p&gt;kittenblcok中之前对microbit的操作也是generate成python再灌入的，这点和mblock相似。最近我没怎么用kittenblcok，不知道最近是不是有调整，等我有空试完再补充。&lt;/p&gt;
&lt;h3&gt;我的设计&lt;/h3&gt;
&lt;p&gt;写到这里都半夜了，只好把这篇文章拆分为二了，有空再来补上我的自己的插件架构设计&lt;/p&gt;
&lt;p&gt;在这个设计之上，我们已经作出了一个具体的实现(scratch3.0和microbit的互操作)，准备以软件包的形式发布(正在制作)，可见我们是吃自己的狗粮的&lt;/p&gt;
&lt;p&gt;架构层面主要受ROS和jupyter的影响&lt;/p&gt;
&lt;p&gt;我们下篇里见&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;!--
如果你对Scratch3.0已有的插件机制不熟悉，恐怕这篇文章无法教会你用Scratch3.0来驱动硬件

why

在这个架构之下 scratch也仅是一个组件而已

raspberry4pi

vm的延迟

就像很多人会怀念忙碌的高中一样
如果你不知道要干嘛

关注是差异的开始

驯服 建立联系
订阅

一些你可能会遇到的坑

如果你的硬件和cozmo一样复杂

mblock的做法  通讯变量
你需要ros

‌你不能指望一本书能把傅立叶讲解得和天线宝宝的情节一样简单
‌如果作者说它能
‌要么他是个骗子 要么他是个疯子  要么他是波特兰罗素
‌
‌
scratch源码是复杂的 

它复杂到 甚至发了izuo不短的一段时间去理解它
‌要么这个作者是罗素
‌要么
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-03-20:scratch3-plugin-1.html</guid><category>scratch</category></item><item><title>对jupyter notebook的分析、扩展与hack</title><link>/jupyter-notebook-architecture-hack.html</link><description>&lt;h1&gt;大纲&lt;/h1&gt;
&lt;p&gt;本文关心代码在jupyter notebook里从前端传往后端的过程，并试图获取到钩子，因为我最近项目的缘故(可以参考&lt;a href="http://blog.just4fun.site/jupyter-notebook-architecture.html"&gt;我之前的文章&lt;/a&gt;)，分析完通信过程，我将演示如何扩展和hack jupyter notebook&lt;/p&gt;
&lt;p&gt;在接下来动手实践部分将演示如何将其以iframe嵌入到外部网页网页中(在概念上是嵌入一种资源)&lt;/p&gt;
&lt;h1&gt;实验环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ubuntu 14.04&lt;/li&gt;
&lt;li&gt;python 2.7.6&lt;/li&gt;
&lt;li&gt;jupyter 4.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装jupyter(notebook)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv env
. env/bin/activate
pip install jupyter #  安装完后是4.3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;运行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;jupyter notebook --no-browser --port 5000 --ip=0.0.0.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我将其跑在5000端口，并接收所有ip的请求&lt;/p&gt;
&lt;p&gt;关于启动参数，不熟悉的同学可以参考我之前&lt;a href="http://blog.just4fun.site/jupyter-summary.html"&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是第一次手动登陆，需要输入token，如果你没加入--no-brower，会自动打开&lt;code&gt;http://127.0.0.1:5000/?token=d311b2834ac7337157c54aaba8d9a524ce48f7597c91xxxx&lt;/code&gt;,验证一次之后，浏览器就有cookie了，之后只需要&lt;code&gt;127.0.0.1:5000&lt;/code&gt;就可访问&lt;/p&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;h3&gt;从websocket入手&lt;/h3&gt;
&lt;p&gt;打开一个新的notebook: &lt;code&gt;http://127.0.0.1:5000/notebooks/Untitled1.ipynb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从chrome调试面板的Network可以看到，有个websocket:&lt;code&gt;ws://127.0.0.1:5000/api/kernels/d13a50b0-6baa-4d5e-8564-95f224daxxxx/channels?session_id=F552491A7C0448A2B5567DE1A71Cxxxx&lt;/code&gt;，代码经由它往后端发送，也经由它接收后台返回的信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebool6c197bf1.png" /&gt;&lt;/p&gt;
&lt;p&gt;当我们运行上头的print("hello world")时，往后台发送如下数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;msg_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;29A5EFC0B11848BE97B66D6E947AEB71&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;session&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;7C49DDC342FD43AA8F5624B08CD7BDAB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;msg_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;execute_request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print(\&amp;quot;hello world\&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;silent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;store_history&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;user_expressions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;allow_stdin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;stop_on_error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;buffers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;parent_header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来有5个frames&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebook1122d9a7.png" /&gt;&lt;/p&gt;
&lt;p&gt;其中包含了代码执行的结果&lt;/p&gt;
&lt;p&gt;那么我们只要模拟建立这样的websocket，就拿到所要的钩子了，可以自如地运行代码&lt;/p&gt;
&lt;h3&gt;从页面入手&lt;/h3&gt;
&lt;p&gt;除了建立websocket，我们也可以找找js中钩子&lt;/p&gt;
&lt;p&gt;这个问题在stack overflow里找到解答，方法如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var handle_output = function (data) {console.log(data);}

var callbacks = {
            iopub : {output : handle_output,}
}

var kernel = IPython.notebook.kernel;
kernel.execute(&amp;quot;print(&amp;#39;hello&amp;#39;)&amp;quot;,callbacks)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebookf07db6f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;如此一来我们找到了第二种钩子 &lt;/p&gt;
&lt;p&gt;消息是用websocket传输的，你可以试试实时性:&lt;code&gt;kernel.execute("for i in range(5):import time;time.sleep(1);print('hello')",callbacks)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;嵌入到外部页面中&lt;/h1&gt;
&lt;p&gt;接下来的部分，演示如何将jupyter notebook嵌入到外部页面里，如此一来可以利用jupyter强大的特性做很多好玩的东西，诸如各种语言的线上IDE&lt;/p&gt;
&lt;p&gt;首先建立一个前端页面(my_test.html)，然后以iframe的方式引入jupyter notebook(关于iframe的属性可以参考&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;这里&lt;/a&gt;),接下来在外部网页中与其互操作&lt;/p&gt;
&lt;p&gt;从建立网页开始&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;wwj&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;600&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notebook&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://127.0.0.1:5000/notebooks/Untitled1.ipynb?token=c81b15a38f4fdfebe67cab0400b9feb0e60325f35bafxxxx&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wwjtest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;噢报错了，这个问题这里有描述:&lt;a href="http://stackoverflow.com/questions/26435653/how-do-i-embed-an-ipython-notebook-in-an-iframe-new"&gt;How do I embed an Ipython Notebook in an iframe&lt;/a&gt;,解决方案这个比较靠谱:&lt;a href="https://github.com/jupyter/notebook/issues/284"&gt;Can't use Notebook inside an iframe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决方案是生成配置文件:&lt;code&gt;jupyter notebook --generate-config&lt;/code&gt;，做些配置。往&lt;code&gt;~/.jupyter/jupyter_notebook_config.py&lt;/code&gt;加入&lt;code&gt;c.NotebookApp.tornado_settings = { 'headers': { 'Content-Security-Policy': "frame-ancestors 'self' *" } }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在没有问题啦 (注意不要直接打开my_test.html，使用网络访问它(python -m SimpleHTTPServer))&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/jupyter_notebookb1f5c27a.png" /&gt;&lt;/p&gt;
&lt;h3&gt;采用postMessage来传递消息&lt;/h3&gt;
&lt;p&gt;因为jupyter与外部页面可能存在跨域问题（别怕，最复杂的情况，也就是跨域了），我打算采用HTML5 postMessage来处理这个问题&lt;/p&gt;
&lt;p&gt;postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。&lt;/p&gt;
&lt;h3&gt;往iframe里发送消息&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;notebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print(&amp;#39;hello&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;扩展jupyter notebook&lt;/h3&gt;
&lt;p&gt;为了在jupyter notebook中监听到外部网页发过来的消息，并给予响应，我们需要为其写js扩展，哈哈别紧张，jupyter设计得很漂亮，扩展它很简单(可能需要安装:&lt;code&gt;pip install  widgetsnbextension&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;~/.ipython/nbextensions&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;创建我们的扩展(iframe_extension.js):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_on_load&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iframe extension running!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;the iframe get:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data from  iframe extension&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;load_ipython_extension&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_on_load&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在外部网页等待iframe的消息&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response from notebook:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大功告成！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-03-22:jupyter-notebook-architecture-hack.html</guid><category>architecture</category></item><item><title>jupyter notebook架构分析</title><link>/jupyter-notebook-architecture.html</link><description>&lt;h1&gt;我的痛点&lt;/h1&gt;
&lt;p&gt;最近在折腾blockly4pi(暂未开源)，这是一个很好玩的项目，试图用blockly来控制树莓派，将硬件功能积木化，从而降低硬件编程入门门槛&lt;/p&gt;
&lt;p&gt;在这个项目中，我将blockly用作代码生成器，这和官方的定位相同，虽然你也可以以其他方式使用它，但我认为将其用作代码生成器，并保持积木的灵活与可组合性(do one thing and do well)，能发挥极大的威力&lt;/p&gt;
&lt;p&gt;我把对blockly的理解都写在这里了：&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个项目中，我遇到一个很典型的问题：将浏览器里的代码丢到机器上运行，然后拿到运行结果，最好能即使给出运行过程信息&lt;/p&gt;
&lt;p&gt;大概像这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="架构图" src="" /&gt; &lt;/p&gt;
&lt;p&gt;实际上这是大多web IDE在做的事&lt;/p&gt;
&lt;p&gt;我的第一个版本很粗暴，用户拼接好积木,blockly生成代码后，点击运行，代码(python)被post到树莓派，在那里执行,然后返回运行结果&lt;/p&gt;
&lt;p&gt;这个过程粗暴到无从批评，因为到处都是槽点，灵活性和扩展性都很糟糕。&lt;/p&gt;
&lt;p&gt;第二个版本采用了websocket(flask-socketio)来通信，后台也加入了事件机制，这样一来阻塞的问题得到解决，c/s两边能及时传递运行时信息&lt;/p&gt;
&lt;p&gt;后来意识到我填坑流的泪，都是当初选web框架时脑子进的水,我需要一个异步非阻塞的框架 ，而不是对flask修修补补,一会加上多线程，一会儿加上事件机制，如果最初就选择&lt;a href="https://github.com/tornadoweb/tornado"&gt;tornado&lt;/a&gt;省去多少时间&lt;/p&gt;
&lt;h1&gt;踏破铁鞋&lt;/h1&gt;
&lt;p&gt;再往后我发现，我特么就是在重造一个轮子，这个轮子在jupyter notebook已经实现得非常漂亮了&lt;/p&gt;
&lt;p&gt;jupyter notebook之前叫ipython notebook，我是它的脑残粉，之前对其做过介绍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/use-ipython-notebook.html"&gt;使用IPython Notebook来学习编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/jupyter-summary.html"&gt;jupyter使用小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;jupyter notebook的架构&lt;/h1&gt;
&lt;p&gt;在&lt;a href="http://jupyter.org/"&gt;jupyter主页&lt;/a&gt;上，官方有对其做个简要说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Jupyter Notebook is based on a set of open standards for interactive computing. Think HTML and CSS for interactive computing on the web. These open standards can be leveraged by third party developers to build customized applications with embedded interactive computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jupyter notebook基于若干开放标准，可以将其视为三个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notebook Document Format : 基于JSON的开放文档格式，完整地记录用户的会话(sessions)和代码、说明性的文本、方程以及富文本输出&lt;/li&gt;
&lt;li&gt;Interactive Computing Protocol: 该协议用于连接Notebook和内核，基于JSON数据、ZMQ以及WebSockets&lt;/li&gt;
&lt;li&gt;The Kernel: 使用特定编程语言实际跑代码的地方，并将输出返回给用户。内核也返回tab键补全信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;架构图&lt;/h3&gt;
&lt;p&gt;上边提到的三个部分直接的关系如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://jupyter.readthedocs.io/en/latest/_images/notebook_components.png" /&gt;&lt;/p&gt;
&lt;p&gt;于是我们可以回答&lt;a href="https://github.com/alex/what-happens-when"&gt;what happens when&lt;/a&gt;这类经典问题,当我们点击运行&lt;code&gt;print("hello world")&lt;/code&gt;时发生了什么&lt;/p&gt;
&lt;p&gt;从上图我们可以看出发生了这样一些事：用户在浏览器里写代码，点击运行后，代码从浏览器发送给Web服务器(tornado)，接着从Web服务器发送消息到Kernel(python)执行代码，在Kernel中执行代码产生的输出/错误会被发送给Web服务器，接着发往给浏览器,用户于是看到输出，这个过程说起来很绕，实际执行飞快无比&lt;/p&gt;
&lt;p&gt;如果你对jupyter的生态有兴趣，那么下边这张架构图，能让你看出各个项目直接的关系,如果你只关心jupyter notebook，它也给出了更为细致的信息&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://jupyter.readthedocs.io/en/latest/_images/repos_map.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你对通信过程很感兴趣，这一看下这张图（消息的传输用到了 ZeroMQ）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://jupyter-client.readthedocs.io/en/latest/_images/frontend-kernel.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你对ZeroMQ有兴趣，可以看我之前的笔记&lt;a href="http://blog.just4fun.site/mq-note.html"&gt;消息队列中间件学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从途中我们可以看到主要利用了ZeroMQ的Publisher-Subscriber模式来做通信&lt;/p&gt;
&lt;h1&gt;回到我的项目上&lt;/h1&gt;
&lt;p&gt;对上边&lt;code&gt;what happens when&lt;/code&gt;的回答稍作修改，我们就能得到一个改良版的blocklu4pi的架构，而且这类架构几乎适用于任何的web IDE类型的项目。blockly正在流行，这套架构之后大有用武之地&lt;/p&gt;
&lt;p&gt;修改后的通信流程为: 用户在浏览器里拖拽blockly积木块生成代码,点击运行后，代码从浏览器发送给Web服务器(tornado)，接着从Web服务器发送消息到Kernel(python)执行代码，在Kernel中执行代码产生的输出/错误会被发送给Web服务器，接着发往给浏览器,用户于是看到输出&lt;/p&gt;
&lt;p&gt;上述两个流程的区别仅在于产生代码的方式不同而已，jupyter是用户手写，而blockly是用积木生成，余下过程一!模!一!样！&lt;/p&gt;
&lt;h1&gt;交互式探索&lt;/h1&gt;
&lt;p&gt;为了对通信和调用过程有更细致的了解，我们可以在notebook里进行交互式探索, REPL优雅之处在于让我们方便地做实验与探索未知&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hyry.dip.jp/tech/slice/slice.html/36"&gt;这篇文章&lt;/a&gt;给了我们一个思路来观察Kernel是如何接收、运行和返回消息:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户代码和Kernel在同一进程中执行，因此我们可以通过一些特殊的代码研究Kernel是如何接收、运行并返回消息的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者接下来演示了如何通过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gc, threading, traceback, inspect查看了Kernel是如何接收和发送消息，以及如何运行用户代码的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常有意思的一篇分析,不过因为时间过去较久，架构有些调整，所以我这边给出最新的交互数据&lt;/p&gt;
&lt;p&gt;我的版本为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter 4.3.0
ipython 5.2.2
notebook 4.4.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下边是实验数据&lt;/p&gt;
&lt;h3&gt;Kernel中的Socket对象&lt;/h3&gt;
&lt;p&gt;通过gc模块的get_objects()遍历进程中所有的对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;kapp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IPKernelApp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ipykernel.kernelapp.IPKernelApp at 0x108a22d10&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;kapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell_socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iopub_socket&lt;/span&gt; &lt;span class="c1"&gt;# (&amp;lt;zmq.sugar.socket.Socket at 0x108a8d328&amp;gt;, &amp;lt;ipykernel.iostream.BackgroundSocket at 0x108aa3850&amp;gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;IPKernelApp对象的shell_socket和iopub_socket分别用于接收命令和广播代码执行输出，对应于架构图部分表示通信过程的图中绿色和红色端口&lt;/p&gt;
&lt;p&gt;在Notebook中执行用户输入的&lt;code&gt;print&lt;/code&gt;时，会经由iopub_socket将输出的内容传送给Web服务器，最终在Notebook界面中显示&lt;/p&gt;
&lt;p&gt;我们知道python中，print语句实际上会调用sys.stdout完成输出工作&lt;/p&gt;
&lt;p&gt;那么Kernel中的sys.stdout是什么对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ipykernel.iostream.OutStream object at 0x108a9cfd0&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub_thread&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;ipykernel.iostream.IOPubThread at 0x108aa32d0&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前头说到iopub_socket用于广播代码的输出，可以推测sys.stdout是一个对kapp.iopub_socket进行包装的OutStream对象(sys.stdout经由kapp.iopub_socket广播出来)&lt;/p&gt;
&lt;p&gt;我们可以发现&lt;code&gt;sys.stderr&lt;/code&gt;和&lt;code&gt;sys.stdout&lt;/code&gt;是同个对象(内存地址完全相同)&lt;/p&gt;
&lt;h3&gt;Kernel中的线程&lt;/h3&gt;
&lt;p&gt;通过threading.enumerate()可以获得当前进程中的所有线程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;[&amp;lt;_MainThread(MainThread, started 140736413283264)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;Thread(Thread-2, started daemon 123145475149824)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;HistorySavingThread(IPythonHistorySavingThread, started 123145485709312)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;Heartbeat(Thread-3, started daemon 123145479356416)&amp;gt;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;lt;ParentPollerUnix(Thread-1, started daemon 123145489915904)&amp;gt;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各个线程的功能为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主线程(MainThread)接收来自前端的命令，执行用户代码，并输出代码的执行结果。&lt;/li&gt;
&lt;li&gt;HistorySaving线程用户将用户输入的历史保存到Sqlite数据库中&lt;/li&gt;
&lt;li&gt;Heartbeat线程用于定时向前端发送消息，用于检测心跳&lt;/li&gt;
&lt;li&gt;ParentPollerUnix线程，监视父进程，如果父进程退出，则保证Kernel进程也退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用户代码的执行&lt;/h3&gt;
&lt;p&gt;通过在用户代码中执行traceback.print_stack()输出整个执行堆栈&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_module_as_main&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pkg_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_code&lt;/span&gt;
    &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_globals&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/__main__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch_new_instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/traitlets/config/application.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;658&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;launch_instance&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelapp.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;474&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/ioloop.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZMQIOLoop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/tornado/ioloop.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;887&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="n"&gt;handler_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/tornado/stack_context.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;275&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;null_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_events&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;472&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_recv&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_run_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/zmq/eventloop/zmqstream.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;414&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_callback&lt;/span&gt;
    &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/tornado/stack_context.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;275&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;null_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;276&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatcher&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch_shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;228&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatch_shell&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/kernelbase.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;390&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;execute_request&lt;/span&gt;
    &lt;span class="n"&gt;user_expressions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/ipkernel.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;196&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do_execute&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store_history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;store_history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/ipykernel/zmqshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_cell&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZMQInteractiveShell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2717&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_cell&lt;/span&gt;
    &lt;span class="n"&gt;interactivity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;interactivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2827&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_ast_nodes&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/wwj/env/lib/python2.7/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2881&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_code&lt;/span&gt;
    &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_global_ns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ipython-input-2-2e94e8c65f66&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从中可以看到用户代码是如何被调用的&lt;/p&gt;
&lt;p&gt;在KernelApp对象的start()中，调用ZeroMQ中的ioloop.start()处理来自shell_socket的消息。当从Web服务器接收到execute_request消息时，将调用kernel.execute_request()方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kapp.kernel.execute_request #&amp;lt;bound method IPythonKernel.execute_request of &amp;lt;ipykernel.ipkernel.IPythonKernel object at 0x10c09f910&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在execute_request()中调用shell对象的如下方法最终执行用户代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print kapp.kernel.shell.run_cell #&amp;lt;bound method ZMQInteractiveShell.run_cell of &amp;lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x10c09f950&amp;gt;&amp;gt;
print kapp.kernel.shell.run_ast_nodes #&amp;lt;bound method ZMQInteractiveShell.run_ast_nodes of &amp;lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x10c09f950&amp;gt;&amp;gt;
print kapp.kernel.shell.run_code #&amp;lt;bound method ZMQInteractiveShell.run_code of &amp;lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x10c09f950&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shell对象在其user_global_ns和user_ns属性在执行代码，这两个字典就是用户代码的执行环境，实际上它们是同一个字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print globals() is kapp.kernel.shell.user_global_ns #True
print globals() is kapp.kernel.shell.user_ns #True
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;查看shell_socket的消息&lt;/h3&gt;
&lt;p&gt;可以利用inspect.stack()获得前面的执行堆栈中的各个frame对象，从而查看堆栈中的局域变量的内容，这样可以观察到Kernel经由shell_socket接收的回送的消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dispatch_shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;execute_request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reply&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上代码在kernel里执行的时候，通信过程已经完成，所以我们可以拿到frames["request"]，frames["reply"]在&lt;code&gt;print "hello world"&lt;/code&gt;之前执行，所以frames["reply"]不包含代码运行的结果&lt;/p&gt;
&lt;p&gt;Kernel接收到的消息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;{&amp;#39;buffers&amp;#39;: [],&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;content&amp;#39;: {&amp;#39;allow_stdin&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;code&amp;#39;: &amp;#39;import inspect\nframes = {}\nfor info in inspect.stack():\n    if info[3] == &amp;quot;dispatch_shell&amp;quot;:\n        frames[&amp;quot;request&amp;quot;] = info[0]\n    if info[3] == &amp;quot;execute_request&amp;quot;:\n        frames[&amp;quot;reply&amp;quot;] = info[0]\nprint &amp;quot;hello world&amp;quot;&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;silent&amp;#39;: False,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;stop_on_error&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;store_history&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;user_expressions&amp;#39;: {}},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;header&amp;#39;: {&amp;#39;date&amp;#39;: datetime.datetime(2017, 3, 8, 9, 35, 4, 596768, tzinfo=tzutc()),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_id&amp;#39;: &amp;#39;0616032D8FE8469780CA0A4A89D578AD&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_type&amp;#39;: &amp;#39;execute_request&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;session&amp;#39;: &amp;#39;6DDDE94601B247779637A3F3A0F2F573&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;username&amp;#39;: &amp;#39;username&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;version&amp;#39;: &amp;#39;5.0&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;metadata&amp;#39;: {},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_id&amp;#39;: &amp;#39;0616032D8FE8469780CA0A4A89D578AD&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_type&amp;#39;: &amp;#39;execute_request&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;parent_header&amp;#39;: {}}&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kernel对上述消息的应答&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reply&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reply_msg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;{&amp;#39;content&amp;#39;: {u&amp;#39;execution_count&amp;#39;: 4,&lt;/span&gt;
&lt;span class="sd"&gt;  u&amp;#39;payload&amp;#39;: [],&lt;/span&gt;
&lt;span class="sd"&gt;  u&amp;#39;status&amp;#39;: u&amp;#39;ok&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  u&amp;#39;user_expressions&amp;#39;: {}},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;header&amp;#39;: {&amp;#39;date&amp;#39;: datetime.datetime(2017, 3, 8, 9, 35, 4, 613218, tzinfo=tzutc()),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_id&amp;#39;: u&amp;#39;d4d00f59-d6a3739d12069c2fb8c0a23f&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_type&amp;#39;: u&amp;#39;execute_reply&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;session&amp;#39;: u&amp;#39;337fb80f-b3760e2423717a4de6ff4ba8&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;username&amp;#39;: u&amp;#39;wwj&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;version&amp;#39;: &amp;#39;5.0&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;metadata&amp;#39;: {&amp;#39;dependencies_met&amp;#39;: True,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;engine&amp;#39;: u&amp;#39;7b3fd05a-613d-4c6e-a789-f952660d4edf&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;started&amp;#39;: datetime.datetime(2017, 3, 8, 17, 35, 4, 598015),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;status&amp;#39;: u&amp;#39;ok&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_id&amp;#39;: u&amp;#39;d4d00f59-d6a3739d12069c2fb8c0a23f&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;msg_type&amp;#39;: u&amp;#39;execute_reply&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;parent_header&amp;#39;: {&amp;#39;date&amp;#39;: datetime.datetime(2017, 3, 8, 9, 35, 4, 596768, tzinfo=tzutc()),&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_id&amp;#39;: &amp;#39;0616032D8FE8469780CA0A4A89D578AD&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;msg_type&amp;#39;: &amp;#39;execute_request&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;session&amp;#39;: &amp;#39;6DDDE94601B247779637A3F3A0F2F573&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;username&amp;#39;: &amp;#39;username&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;#39;version&amp;#39;: &amp;#39;5.0&amp;#39;},&lt;/span&gt;
&lt;span class="sd"&gt; &amp;#39;tracker&amp;#39;: &amp;lt;zmq.sugar.tracker.MessageTracker at 0x10b266f50&amp;gt;}&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的应答消息并非代码的执行结果，代码的输出在执行代码时已经经由sys.stdout-&amp;gt;iopub_socket发送给Web服务器了。&lt;/p&gt;
&lt;h1&gt;手写一jupyter&lt;/h1&gt;
&lt;p&gt;jupyter已经演变得非常庞大，许多的代码都在打磨细节，如此一来直接阅读源码，会陷入各种细枝末节里，不大好一眼看到核心逻辑。为了理解原理，溯本求源是一个好方法，一种策略是翻到早起的版本或者commit&lt;/p&gt;
&lt;p&gt;另一种策略是看一些类似的小项目(专注在原理实现)，&lt;a href="https://github.com/fperez/zmq-pykernel"&gt;zmq-pykernel&lt;/a&gt;是一个不错的实验，它基于ZeroMQ来实现，非常小巧&lt;/p&gt;
&lt;h1&gt;写一个自己的kernel&lt;/h1&gt;
&lt;p&gt;尽管官方文档有相应教程,不过直接从&lt;a href="https://github.com/Calysto/metakernel"&gt;metakernel&lt;/a&gt;开始是个不错的选择,metakernel为我们做了许多起步阶段的工作，具体可以参考&lt;a href="https://github.com/Calysto/metakernel#features"&gt;metakernel features&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jupyter.org/"&gt;jupyter.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter.readthedocs.io/en/latest/architecture/content-architecture.html"&gt;doc jupyter Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jupyter-client.readthedocs.io/en/latest/messaging.html"&gt;Messaging in Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hyry.dip.jp/tech/slice/slice.html/36"&gt;IPython Notebook架构之Kernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-03-08:jupyter-notebook-architecture.html</guid><category>architecture</category></item></channel></rss>