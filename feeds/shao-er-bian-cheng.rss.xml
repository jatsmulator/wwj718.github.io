<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Mon, 22 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Hungry Robot - Eat everything</title><link>/Hungry-Robot-Eat-everything.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Stay hungry, Stay foolish&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/hungryrobot_432e1f4d.png" /&gt;&lt;/p&gt;
&lt;video width="400px" src="http://wwj-fig-bed.just4fun.site/hungry_robot.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;带着Hungry Robot参加北京的maker faire，它可能是全场最受欢迎的robot了。&lt;/p&gt;
&lt;h1&gt;关于Hungry Robot&lt;/h1&gt;
&lt;p&gt;Hungry Robot是&lt;a href="https://www.thingiverse.com/EunchanPark/about"&gt;EunchanPark&lt;/a&gt;制作的&lt;a href="https://sites.google.com/view/100happythings/home"&gt;一系列有趣的机器人&lt;/a&gt;中的一个。&lt;/p&gt;
&lt;p&gt;来自丹麦的&lt;a href="https://www.thingiverse.com/EunchanPark/about"&gt;EunchanPark&lt;/a&gt;喜欢做令人快乐之事，也乐于与社区分享创作的过程。[Happy Things Maker]是Ta的使命。&lt;a href="https://www.thingiverse.com/EunchanPark/about"&gt;EunchanPark&lt;/a&gt;想建立“快乐之物博物馆”，在其中尽可能多地放置令人愉悦之物。这是Ta的&lt;a href="https://sites.google.com/view/100happythings/home"&gt;100 HAPPY THINGS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sites.google.com/view/100happythings/18-Hungry-Robot"&gt;Hungry Robot&lt;/a&gt;是&lt;a href="https://sites.google.com/view/100happythings/home"&gt;100 HAPPY THINGS&lt;/a&gt;之一。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.thingiverse.com/EunchanPark/about"&gt;EunchanPark&lt;/a&gt;创作&lt;a href="https://sites.google.com/view/100happythings/18-Hungry-Robot"&gt;Hungry Robot&lt;/a&gt;的动机是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to make a robot for emotional purpose not for functional. This is fun, makes smile and feels good. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://sites.google.com/view/100happythings/18-Hungry-Robot"&gt;Hungry Robot&lt;/a&gt;的外壳采用3D打印制作，控制芯片选用Arduino。这些东西都对社区开放:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thingiverse.com/thing:2824451"&gt;Hungry Robot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/happythingsmaker/TrashEatingRobot"&gt;TrashEatingRobot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;我的制作笔记&lt;/h1&gt;
&lt;p&gt;从&lt;a href="https://github.com/happythingsmaker/TrashEatingRobot"&gt;TrashEatingRobot&lt;/a&gt;源码中可以看出，Hungry Robot的控制逻辑十分简单: 当&lt;code&gt;红外测距传感器&lt;/code&gt;检测到有物体靠近时（如有人放置硬币），便触发舵机转动，把硬币倒入口中。这就是Hungry Robot的所有控制逻辑。&lt;/p&gt;
&lt;p&gt;较之于Arduino，我更喜欢micro:bit,所以决定采用micro:bit来制作Hungry Robot。&lt;/p&gt;
&lt;h1&gt;开始制作&lt;/h1&gt;
&lt;h3&gt;准备工作&lt;/h3&gt;
&lt;p&gt;制作&lt;a href="https://www.thingiverse.com/thing:2824451"&gt;Hungry Robot&lt;/a&gt;，需要以下素材&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;micro:bit&lt;/li&gt;
&lt;li&gt;3D打印的机器人外壳&lt;/li&gt;
&lt;li&gt;红外测距传感器模块(夏普 GP2Y0A21YK0F 10-80cm)&lt;/li&gt;
&lt;li&gt;SG90舵机&lt;/li&gt;
&lt;li&gt;尼龙扎带(细)&lt;/li&gt;
&lt;li&gt;导线若干&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上物资都可以通过淘宝搞定。除了micro:bit，其他材料都在几块钱到十几块钱之间。&lt;/p&gt;
&lt;p&gt;单独说说&lt;code&gt;3D打印的机器人外壳&lt;/code&gt;,如果你有3D打印机，直接从&lt;a href="https://www.thingiverse.com/thing:2824451"&gt;Hungry Robot 3D print files&lt;/a&gt;中下载模型，打印出来即可。如果你没有3D打印机，可以在淘宝上购买3D打印服务，给店家发去3D打印文件即可。&lt;/p&gt;
&lt;p&gt;我采用了光敏树脂,打印出的外壳十分细腻。&lt;/p&gt;
&lt;h3&gt;组装机器人&lt;/h3&gt;
&lt;p&gt;如何从一堆零件中，组装出Hungry Robot呢？&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ipmwis2oPFA"&gt;Hungry Robot (Eat everything) long take without edit (How to make)&lt;/a&gt;给出了细致的引导。&lt;/p&gt;
&lt;p&gt;视频在Youtube上，需要翻墙。我已经把它搬运到本地.你可以在此观看&lt;/p&gt;
&lt;video width="600" src="http://wwj-fig-bed.just4fun.site/Arduino%20Project%20%5D%20Hungry%20Robot%20%28Eat%20everything%29%20long%20take%20without%20edit%20%28How%20to%20make%29-Ipmwis2oPFA.f18.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;开始编程&lt;/h3&gt;
&lt;p&gt;我喜欢把对知识的教学放在制作项目的过程中，之前在&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NzY2OTk4NA==&amp;amp;mid=2247483662&amp;amp;idx=1&amp;amp;sn=fbd7309b42d33eff688c144e8137bb1f&amp;amp;chksm=fde9c981ca9e40972ef5ec89b53ace2e81559853c6baedf833460bf3407607069f510a820557#rd"&gt;基于兴趣的学习面临的诘难&lt;/a&gt;写道:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个孩子有了兴趣和冲动，Ta为了追逐这个兴趣，就需要动手实践。你知道的，魔鬼都在细节里，动手实践的过程总会碰到许多障碍，于是Ta就要熟悉材料，运用独创性、坚持以及机智，这个过程必然包含着各种训练、以及需要教育者提供知识来帮助Ta。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;约翰.杜威说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们有设备和材料的结构，在我们面前就开辟了另一条路径。我们可以指导儿童的活动，使它们沿着一定方向运行，把它们渐渐引导到这条道路逻辑上必然要达到的目标上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来让我们看看制作Hungry Robot，需要熟悉的材料，并在这个过程中学习编程相关的知识。&lt;/p&gt;
&lt;h5&gt;红外测距传感器&lt;/h5&gt;
&lt;p&gt;在Hungry Robot中，红外测距传感器用于测距，当检测到有物体靠近时(有人放置硬币)，则触发舵机转动。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/hungryrobot_707de07f.png" width=350 /&gt;&lt;/p&gt;
&lt;p&gt;图中的三条线中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色接电源线(Vcc)&lt;/li&gt;
&lt;li&gt;黑色接地(GND)&lt;/li&gt;
&lt;li&gt;黄色是数据线(Vo)，我将其接在micro:bit pin1引脚，你可以选择其他引脚&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;红外测距传感器通过黄色数据线，对外输出模拟信号(analog signal),制作Hungry Robot并不需要对&lt;a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E6%93%AC%E4%BF%A1%E8%99%9F"&gt;模拟信号&lt;/a&gt;有深入连接，你只需知道红外测距传感器在测距时，会把距离信息对外输出就行。&lt;/p&gt;
&lt;p&gt;如果你对&lt;a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E6%93%AC%E4%BF%A1%E8%99%9F"&gt;模拟信号&lt;/a&gt;有兴趣，维基百科是很好的学习入口，无论你对什么有兴趣，维基百科常是入门的好伴侣。&lt;/p&gt;
&lt;p&gt;下边我们动手来熟悉一下红外测距传感器。&lt;/p&gt;
&lt;p&gt;使用&lt;a href="https://codewith.mu/"&gt;mu-editor&lt;/a&gt;作为编辑器，来为micro:bit编程。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/mu.gif" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codewith.mu/"&gt;mu-editor&lt;/a&gt;是一款Python编辑器，我们可以使用Python来为micro:bit编程。当然也可以使用图形化编辑器&lt;a href="https://makecode.microbit.org/"&gt;makecode&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;连接好电路之后,使用数据线将microbit连上电脑，打开&lt;a href="https://codewith.mu/"&gt;mu-editor&lt;/a&gt;，只需要4行代码我们就能源源不断获取红外测距传感器测得的信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;microbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_analog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 说明&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;写完代码后，我们需要将代码烧入(flash)到microbit，在编辑器中点击flash即可。microbit背后的信号灯开始闪烁，片刻之后，闪烁停止，代码烧入即已完成。&lt;/p&gt;
&lt;p&gt;此时打开编辑器上的REPL按钮，将看到红外测距传感器输出的模拟信号。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/repl_ba264c23.png" width=600 alt="repl" /&gt;&lt;/p&gt;
&lt;p&gt;这些模拟信号并不是真实的距离。在这个例子中，我们并不需要知道模拟信号如何转化为距离，我们只需要观察模拟信号与距离的关系即可。&lt;/p&gt;
&lt;p&gt;mu-editor可以将打印出来的模拟信号绘制成一条曲线&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/plotter_3788ae3f.png" width=600 alt="plotter" /&gt;&lt;/p&gt;
&lt;p&gt;为了将模拟信号绘制成曲线，需要微调一下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;microbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_analog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt; &lt;span class="c1"&gt;# &lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将distance改为 &lt;code&gt;(distance,)&lt;/code&gt;。&lt;code&gt;(distance,)&lt;/code&gt;是python中的元组。Plotter会将元组中的数据绘制成图像。可以暂时不关心这些，这些只是语法上的约定，对于学习编程没有特别重要。需要时查一下规则就行，不必去记它。&lt;/p&gt;
&lt;p&gt;重新烧入(flash),点击Plotter按钮，即可看到红外测距传感器输出的信号被绘制成了图像。如果你观察仔细，会发现信号中存在噪声。&lt;/p&gt;
&lt;p&gt;将你的手掌从远到近，逐渐靠近红外测距传感器，你将看到曲线的变化。&lt;code&gt;距离越近,数值越大&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/plotter_36a87124.png" width=600 alt="演示" /&gt;&lt;/p&gt;
&lt;p&gt;经过一番实验，我将临界值设为700. 当我的手离机器人大约10多厘米时，图中数值大约是700。我们用这个数值表达:&lt;code&gt;有东西机器人很近&lt;/code&gt;，翻译成你看到的场面就是: 你正把拿着硬币靠近机器人，准备放在它手上。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codewith.mu/"&gt;mu-editor&lt;/a&gt;是个非常好的Python编辑器，它使用简单，对初学者友好，很适合用来做一些探索性的实验。&lt;/p&gt;
&lt;h3&gt;舵机&lt;/h3&gt;
&lt;p&gt;下边来说说舵机。我们采用SG90舵机，这是使用最广的控制舵机，价格低廉。&lt;/p&gt;
&lt;p&gt;如果你对舵机的控制原理有兴趣，可以使用搜索引擎做细致的了解(PWM)。在此我们只需知道，通过编程可以控制舵机转动某个角度就足够了。&lt;/p&gt;
&lt;p&gt;SG90舵机如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/hungryrobot_01452c7b.png" width=400 alt="sg90" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色: VCC&lt;/li&gt;
&lt;li&gt;棕色: GND&lt;/li&gt;
&lt;li&gt;橙黄是信号线（脉冲输入）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将舵机的橙黄是信号线接在microbit的pin0上。&lt;/p&gt;
&lt;p&gt;最初我完全准备采用Python来实现Hungry Robot的控制逻辑，结果发现，使用Python控制SG90舵机并不方便，社区里有人写了一些通用的源码，来精确控制舵机转动角度，但源码似乎有问题&lt;a href="https://github.com/microbit-playground/microbit-servo-class/blob/master/servo.py"&gt;servo.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最终决定采用makecode来编程。&lt;/p&gt;
&lt;h4&gt;最终项目&lt;/h4&gt;
&lt;p&gt;先把最终项目的源码直接放上来,大家可以&lt;a href="https://makecode.microbit.org/_chKXMmXiicPV"&gt;点击查看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/makecode_rob%20ot_c7894c97.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;梳理一下代码逻辑：在一个无限循环中，不断检测红外测距传感器测得的距离，当距离小于临界值时(说明有人给它喂食)，则调用eat函数，eat函数用于驱动舵机：从180度的位置，转动都60度的位置，再转回去，舵机带动手臂，于是完成了进食。这些角度通过实验来获得。&lt;/p&gt;
&lt;h3&gt;tips&lt;/h3&gt;
&lt;p&gt;推荐使用电脑或移动电源为microbit供电，使用5号电池组供电，可能无法驱动电机。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-dapter&lt;/a&gt;版hungry robot&lt;/h1&gt;
&lt;p&gt;使用&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-dapter&lt;/a&gt;将hungry robot的舵机接管到&lt;a href="http://scratch3.codelab.club"&gt;scratch3&lt;/a&gt;中，如此一来，就可以让hungry robot与所有扩展交互，诸如接入物联网或人工智能。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://makecode.microbit.org/_233XzLYydRcK"&gt;makecode固件部分的源码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;scratch部分的源码为：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/hungryrobot_486432b5.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;在我的例子中，我将hungry robot与声音响度积木结合，当我们给hungry robot喂食时，它无动于衷，只有我们敲敲碗，它才张嘴吃东西。我们于是制作了一个&lt;a href="https://zh.wikipedia.org/zh/%E5%B7%B4%E7%94%AB%E6%B4%9B%E5%A4%AB"&gt;巴布洛夫&lt;/a&gt;的robot&lt;/p&gt;
&lt;video width="600px" src="http://wwj-fig-bed.just4fun.site/1540219015667808.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h1&gt;后话: 漫游者计划&lt;/h1&gt;
&lt;p&gt;某天逛树莓派社区，发现NASA(美国国家航空航天局)开放了一个教育项目: &lt;a href="https://github.com/nasa-jpl/open-source-rover"&gt;JPL Open Source Rover Project&lt;/a&gt;。我很喜欢这个项目，但制作这个项目可能得花费我好多个周末的时间。想在青旅(我在南京和朋友一起开了家青旅)中邀请更多的人周末一起来制作这个项目，召集那些对此有热情的人，大家分工协作。如此一来，就不会像大多的个人周末项目，因为遇到困难而放弃。更多的人参与，意味着，更多元的技能，以及更多的碰撞和灵感。好比我极不擅长拼搭的工作，但善于编程。在这个过程里，我就可以观察和学习那些善于拼搭的人，是如何做好这个工作的，同时，我也可以带着那些渴望获得编程技能的小伙伴一起编程。&lt;/p&gt;
&lt;p&gt;那我自己是否应该先拼完下整个项目，有了充分把握，再带着大家一起做呢？&lt;/p&gt;
&lt;p&gt;我很快否定了这个想法，我并不乐意对项目了然于心，之后作为老师/志愿者带着大家玩。这个过程，不只教学者没有获得成长，学习者也无法看到制作项目的真实过程。制作真实的项目，会遇到困难，需要思考来解决问题。如果有个人充当上帝的角色，什么都懂，也设计了路线，那么其他人只是按照固定的流程在做机械性的工作。这没什么价值。我希望让大家参与到真实项目里。这也是我们吸引志愿者以及有专长的人的原因，他们不只是来做贡献，所有人都将面对未知、获得成长。不喜欢课堂上的那种不真实，我喜欢杜威说的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;education as life&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;生活没有彩排，每天都是现场直播，这正是它有趣且令人充满热情的原因。&lt;/p&gt;
&lt;p&gt;漫游者计划希望去实践这些。我这个月底去广州，我们会在天河的中心区域拿下一个办公室，它是可编程的，而且会非常酷。我们在其中创作各种好玩的项目，我们也在其中办公以及交流，我们会开放它，作为漫游者计划的据点之一。&lt;/p&gt;
&lt;p&gt;在漫游者计划中。参与者、志愿者、学习者、教师这些角色融为一体。或者说我们不需要这些角色分类，在这儿，只有&lt;code&gt;协作者&lt;/code&gt;，即便是一对父母带着他们的孩子前来，他们也是平等的协作者。对参与者的年龄没有限制，多元总是好的，它会带来更多的创意。&lt;/p&gt;
&lt;p&gt;我将漫游者计划视为探索&lt;a href="https://codelab.club/"&gt;codelab.club&lt;/a&gt;的一步。它club的一种形式。&lt;/p&gt;
&lt;p&gt;其他的club形式会并行运作。诸如邀请制的club，在这种club中，我们每周末的晚上，会进行线下成员聚会，会邀请一些有趣的hacker/maker做分享和交流，大家分享有趣的信息以及各自正在制作的项目。这种club是邀请制，你可以邀请你周围最聪明的朋友加入，但要求申请者有自己的作品，且能展示自己创作和分享的热情。&lt;/p&gt;
&lt;!--
之前和曾老师应刘院长之邀，到他们学校(高校)做了一次Open edX的技术分享，期间认识了杨老师，杨老师在大学里教计算机，她的孩子(翟同学)是个小maker，对动手制作东西很感兴趣。开朗活泼，有许多有趣的妙点子。

由于杨老师教学使用C++，翟同学从小对C++熟练。同他吃午饭期间，他聊到并不喜欢C++,他问到为了实现一个简单的功能，为什么不能拖一个积木，而要写各种冒号和花括号，写完还不能立刻运行。

翟同学的这个疑惑，让我想到Philip Guo的这篇文章[Why Python is a great language for teaching beginners in introductory programming classes](http://pgbovine.net/python-teaching.htm)。我前些时间给UCSD的Philip Guo发了封邮件，说想把他的这篇文章翻译到国内，他觉得这件事很棒，只要我在博客的译文里附上原文链接就行。Philip Guo在这篇文章里论述了为何Python是一门优秀的语言，用于入门编程课程中教授初学者。

文章里就提到说:

&gt;  大多数入门学习者根本不关心计算机科学或编程语言理论，而只是想让计算机简单运行一下他们的代码，而不必大费周章写一堆样板代码。需要编写的代码越少，可能遇到的bug和错误就越少; 而遇到的bug和错误越少，他们就越不容易在入门之初因为沮丧而放弃编程。

我很喜欢这段论述，这也是我反对C/C++/JavaScript作为编程入门语言的原因。我相信Scratch和Python更为理想。Philip Guo的文章里给出了强有力的论证，我近期会翻译完放到博客上。

翟同学近期想做两个


如约翰.杜威所言`教育的目的就是它本身`。同杨老师在

这个过程中，作品

约了个周末

杨老师 我的计划

周末 项目 兴趣
--&gt;

&lt;!--
### 智能家居
homeassistant 已经 0.77 需要登陆（大特性）

0.72不需要

cat ~/.homeassistant/configuration.yaml


wzxhzdk:2

--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/view/100happythings/18-Hungry-Robot"&gt;HUNGRY ROBOT - EAT EVERYTHING!&lt;/a&gt;: 教程与资料&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KfP_LfUiwdc"&gt;Hungry Robot | Servo,Sensor,3d printer Arm project tutorial example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ipmwis2oPFA"&gt;Hungry Robot (Eat everything) long take without edit (How to make)&lt;/a&gt;: 细致的教程&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.microbit.co.uk/functions/analog-read-pin"&gt;Analog Read Pin&lt;/a&gt;: 读取红外&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kitronik.co.uk/blog/control-a-360-degree-servo-with-a-bbc-microbit/"&gt;Control A 360 Degree Servo With A BBC micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EunchanPark&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thingiverse.com/EunchanPark/about"&gt;about EunchanPark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/EunchanPark"&gt;youtube EunchanPark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/view/100happythings/home"&gt;[ HOW TO MAKE ] 100 HAPPY FUN DIY THINGS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://101.96.10.63/www.sharp-world.com/products/device/lineup/data/pdf/datasheet/gp2y0a21yk_e.pdf"&gt;GP2Y0A21YK0F&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E6%A8%A1%E6%93%AC%E4%BF%A1%E8%99%9F"&gt;模拟信号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E8%84%88%E8%A1%9D%E5%AF%AC%E5%BA%A6%E8%AA%BF%E8%AE%8A"&gt;PWM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-10-22:Hungry-Robot-Eat-everything.html</guid><category>scratch</category></item><item><title>scratch3-adapter接入blender</title><link>/scratch3-adapter-blender.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blender-adapter_2e1cc54a.png" /&gt;&lt;/p&gt;
&lt;p&gt;我在&lt;a href="https://blog.just4fun.site/blockly-3D.html"&gt;积木化编程与3D场景&lt;/a&gt;写道:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我近期会将Scratch3-adapter接入blender中！如此一来就建立了现实世界与虚拟世界的连接，你甚至可以和电影中的角色打交道。很多著名的电影都使用了blender来创作。&lt;br /&gt;
一旦scratch3-adapter与Blender连接完成，你可以徒手创作minecraft中的世界(借助leapmotion，而minecraft的资源包社区里已经有了:&lt;a href="http://theduckcow.com/dev/blender/mcprep/"&gt;BLENDER MINECRAFT ADDON&lt;/a&gt;。你也可以使用micro:bit制作的魔法棒与虚拟世界的哈利波特一决高下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;video width="800" src="http://p6ur0vhyj.bkt.clouddn.com/blender-adapter.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;这部分的工作已经完成。做些笔记&lt;/p&gt;
&lt;h1&gt;开发笔记&lt;/h1&gt;
&lt;h3&gt;debug&lt;/h3&gt;
&lt;p&gt;blender有多种方式可以运行Python脚本，参考&lt;a href="https://docs.blender.org/api/current/info_overview.html#script-loading"&gt;Script Loading&lt;/a&gt;。 运行text editor中的代码，我们无法看到输出，为了调试方便，我们可以这样启动blender:&lt;code&gt;blender --python /tmp/test.py  /tmp/test_bge.blend&lt;/code&gt;,如此一来项目中运行python程序时，输出会显示在命令行。&lt;/p&gt;
&lt;p&gt;上边的blender命令其实是:&lt;code&gt;alias blender=/Applications/Blender/blender.app/Contents/MacOS/blender&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;逻辑积木&lt;/h3&gt;
&lt;p&gt;blender的逻辑积木与&lt;a href="https://github.com/node-red/node-red"&gt;node-red&lt;/a&gt;很像。使用方式也基本一样，&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blender-adapter_14597542.png" /&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是blender运行python的方式。注意程序的生命周期。从上图可以看出，Python程序由传感器触发。每当设置的sensor发现了某个事件(event),python脚本则运行一次，在脚本中可以拿到传感器(sensor)的信息，以此决定如何影响触动器(actuator)。由此可以看出，我们的脚本是被动运行的，它被多次促发。所以你不能在脚本中跑守护进程。我只好将zmq rep socket改为NOBLOCK风格。&lt;/p&gt;
&lt;h3&gt;消息&lt;/h3&gt;
&lt;p&gt;blender有两类逻辑积木:传感器(sensor)和触动器(actuator)都支持消息(message)&lt;/p&gt;
&lt;p&gt;使用消息，可以实现跨场景控制，这个scratch很像。和adapter也很像。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;everything is message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bge&lt;/span&gt;
&lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCurrentController&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;own&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;
&lt;span class="c1"&gt;# send message&lt;/span&gt;
&lt;span class="n"&gt;own&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 会激活messge sensor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;导出游戏&lt;/h3&gt;
&lt;p&gt;使用blender插件可以将制作的游戏导出为独立应用，参考&lt;a href="https://blender.stackexchange.com/questions/95481/how-to-export-correctly-a-standalone-game"&gt;How to Export correctly a standalone Game?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，如果你使用了自己安装的python第三方包，导出为游戏时会出错，错误原因是第三方包没有到打包进应用。我使用pyzmq，就遇到相应问题。&lt;/p&gt;
&lt;p&gt;由于导出的应用没办法看到调试信息，你可以简单打个log&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run_server&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;  &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# export to log&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/error.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;BGE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;blender在暂停BGE引擎之后需要重启，否则zmq端口没有释放&lt;/li&gt;
&lt;li&gt;重启blender, adapter和scratch3.0插件不需要重启&lt;/li&gt;
&lt;li&gt;记得连接逻辑积木，&lt;code&gt;always&lt;/code&gt;作为触发器&lt;/li&gt;
&lt;li&gt;被触发的Python脚本在进程中，当心阻塞blender&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;实际操作&lt;/h1&gt;
&lt;p&gt;我将操作录了个屏&lt;/p&gt;
&lt;p&gt;&lt;img src="http://scratch3-files.just4fun.site/adapter_blender_v1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;简而言之分以下几步:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在scratch3-adapter中下载blender插件:&lt;a href="https://github.com/Scratch3Lab/scratch3_adapter_extensions/raw/master/extension_blender.py"&gt;extension_blender&lt;/a&gt;。点击&lt;code&gt;菜单栏 &amp;gt; 插件 &amp;gt; 下载&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启scratch3-adapter，选择运行extension_blender&lt;/li&gt;
&lt;li&gt;下载&lt;a href="http://scratch3-files.just4fun.site/adapter_bge_v1.blend"&gt;adapter_bge_v1.blend&lt;/a&gt;，在blender中打开。点击&lt;code&gt;菜单栏 &amp;gt; 游戏引擎 &amp;gt; 启动游戏引擎&lt;/code&gt;。需要注意，每次重新启动游戏引擎，都需要重启blender。&lt;/li&gt;
&lt;li&gt;打开&lt;a href="https://scratch3.codelab.club/"&gt;scratch3.codelab.club&lt;/a&gt;，选择EIM插件，发送&lt;code&gt;up&lt;/code&gt;和&lt;code&gt;down&lt;/code&gt;消息，即可控制3D物体移动。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，以上只是一个最小原型，可以随意修改，enjoy yourself：）&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bgepython.tutorialsforblender3d.com/GameLogic/sendMessage"&gt;Game Logic: sendMessage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blender.stackexchange.com/questions/80971/blender-game-controller-using-arduino-not-working-properly"&gt;Blender game controller using arduino not working properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blender.stackexchange.com/questions/95481/how-to-export-correctly-a-standalone-game"&gt;How to Export correctly a standalone Game?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-09-29:scratch3-adapter-blender.html</guid><category>scratch</category></item><item><title>WebUSB与micro:bit</title><link>/webusb-microbit.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/webusb_a5dff4a7.png" /&gt;&lt;/p&gt;
&lt;h1&gt;webusb&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://wicg.github.io/webusb/"&gt;WebUSB API&lt;/a&gt;在简介里说到：&lt;/p&gt;
&lt;p&gt;WebUSB API提供了一种将USB设备服务安全地公开给Web的方法。&lt;/p&gt;
&lt;p&gt;借此API，硬件制造商将能够为其设备构建跨平台JavaScript SDK。web平台成为调度硬件的一等公民。&lt;/p&gt;
&lt;h1&gt;硬件设备的困扰&lt;/h1&gt;
&lt;p&gt;&lt;img width=800 src="http://wwj-fig-bed.just4fun.site/webusb_9a77f466.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们从&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt;说起，&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt;是一个支持绘图的计算器，目标是使学习数学更容易。刷&lt;a href="https://news.ycombinator.com/"&gt;hacker news&lt;/a&gt;时偶然发现了这个项目，十分惊艳，&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt;支持运行python，它甚至写了个自己的操作系统，这些都是开放的:&lt;a href="https://github.com/numworks/epsilon"&gt;epsilon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt; 在&lt;a href="https://www.numworks.com/blog/webusb-firmware-update/"&gt;Writing a device updater? Seriously consider WebUSB!&lt;/a&gt;中描述了它们为更新设备固件所遇到的麻烦，最终发现webusb是理想选择。&lt;/p&gt;
&lt;p&gt;文章里写道&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt;的目标是确保他们的设备固件可以轻松升级，为了达到目标，需要满足以下要求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽可能跨更多的平台&lt;/li&gt;
&lt;li&gt;用户不必为了更新设备而安装特定软件。&lt;/li&gt;
&lt;li&gt;尽可能少编写代码。代码越少，错误越少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;webusb完美地满足这些要求.在跨平台方面,webusb适用于各种设备和操作系统（Android，Windows，macOS和Linux）,而且是开箱即用的&lt;/p&gt;
&lt;p&gt;文章里有不少有趣的部分，诸如作者提到，解决方案之一是使用配有USB-to-HTTP桥接器的Web应用程序(Scratch Link和scratch3-adapter都是这种程序),&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt;也使用了一段时间这个选项，但我们最终决定放弃它，原因是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为无法为localhost提供有效证书&lt;/li&gt;
&lt;li&gt;分发仍然很痛苦，您仍然可能需要更新网桥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个问题其实都有很好的解决方案，问题1，我在已经给出了解决方案:&lt;a href="https://blog.just4fun.site/localhost-https-ssl.html"&gt;本地https/wss服务与SSL安全证书&lt;/a&gt;，问题2的理想解决方案是&lt;a href="https://github.com/mherrmann/fbs"&gt;fbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.numworks.com"&gt;numworks&lt;/a&gt;的案例很好地给出了选择WebUSB更新固件的理由，WebUSB的应用场景当然远不只是更新固件。下边写出一些&lt;a href="https://wicg.github.io/webusb/"&gt;WebUSB API&lt;/a&gt;中提到的使用场景&lt;/p&gt;
&lt;h1&gt;使用场景&lt;/h1&gt;
&lt;h3&gt;教育设备&lt;/h3&gt;
&lt;p&gt;基于Web的软件交付模型适合于教育教育领域，因为它们可以快速加载到任何计算机上，而无需考虑平台兼容性。平台的兼容性在教育领域产生的影响可能远远超出你的预期，尤其是国内。&lt;/p&gt;
&lt;p&gt;基于Web的硬件API，允许将设备的支持直接构建到现有的在线课程材料中，从而提供无缝的连接体验。而不会增加实施成本，诸如在每台电脑安装一个客户端软件。&lt;/p&gt;
&lt;p&gt;学生可利用在线开发人员工具编写和上传他们的代码，老师可以随时查阅，管理和干预。因为数据都在线上，这就提供了AI介入的可能。&lt;/p&gt;
&lt;p&gt;此外学生的作品可以在线分享，可以据此构建在线社区。&lt;/p&gt;
&lt;p&gt;当设备可以被接入web，那么我们就可以将大量的web玩法引入到硬件教育中。诸如远程指导，协同编程等等&lt;/p&gt;
&lt;p&gt;我相信web bluetooth和webusb是教育领域的未来。&lt;/p&gt;
&lt;h3&gt;网络驱动程序&lt;/h3&gt;
&lt;p&gt;Web的可组合性，可能发展出生态系统。&lt;/p&gt;
&lt;p&gt;以3D打印机为例，想象一下托管3D模型的网站希望将打印直接集成到他们的页面中。目前，Web支持2D打印（普通打印机），但3D版本还没有API。如果使用WebUSB API将数据从网站发送到其打印机，则站点可以使用这些页面来集成对硬件的支持，就像将嵌入式地图等功能一样，可以添加到许多现有站点中。成为一种通用积木。&lt;/p&gt;
&lt;h3&gt;设备更新和诊断&lt;/h3&gt;
&lt;p&gt;虽然蓝牙等无线协议通常是消费级设备的更方便选择，但USB端口不断扩散，因为它们是电源传输的简单解决方案，并且可以在设备不工作时作为最后的连接方式。&lt;/p&gt;
&lt;p&gt;设备制造商只要将用户引导到自己的网站上，就可以为用户提供在线诊断。&lt;/p&gt;
&lt;h1&gt;文档&lt;/h1&gt;
&lt;p&gt;Google的这篇文档很赞: &lt;a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web"&gt;Access USB Devices on the Web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档里提到chrome内置的一些调试工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chrome://device-log&lt;/li&gt;
&lt;li&gt;chrome://usb-internals&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用webusb与microbit通信&lt;/h1&gt;
&lt;p&gt;microbit是个为编程教育而生的硬件，对microbit不了解的小伙伴，可以参考我之前的文章:&lt;a href="https://blog.just4fun.site/microbit-notes.html"&gt;micro:bit使用笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;microbit官方推荐的两个编程工具：&lt;a href="https://python.microbit.org/v/beta"&gt;Python Editor&lt;/a&gt;和&lt;a href="https://makecode.microbit.org/beta#editor"&gt;makecode&lt;/a&gt;近期都将支持webusb，这当然是个明智之举，将进一步降低学习者的门槛。&lt;/p&gt;
&lt;p&gt;相关文档在: &lt;a href="https://support.microbit.org/support/solutions/articles/19000084059-beta-testing-web-usb"&gt;Beta testing - Web USB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此，我做个操作纪录.&lt;/p&gt;
&lt;h3&gt;怎么做&lt;/h3&gt;
&lt;p&gt;为了让microbit能使用webusb，我们首先需要将它的固件更新到0250，我这里直接给出固件，大家烧录即可。&lt;/p&gt;
&lt;p&gt;烧入方式为: 按住microbit背后的复位按钮，然后连上电脑，电脑将出现名为&lt;code&gt;MAINTENANCE&lt;/code&gt;的设备，把如下固件:&lt;a href="http://p6ur0vhyj.bkt.clouddn.com/0250_kl26z_microbit_0x8000.hex"&gt;0250_kl26z_microbit_0x8000.hex&lt;/a&gt;拖入&lt;code&gt;MAINTENANCE&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;之后你就可以在线为microbit编程了.&lt;/p&gt;
&lt;p&gt;&lt;img width=800 src="http://wwj-fig-bed.just4fun.site/webusb_de2a5177.png" /&gt;&lt;/p&gt;
&lt;p&gt;有两点值得一提，其一是烧录的过程比较慢，得10s+。原因是每回都得烧录完整的固件(500K左右)&lt;/p&gt;
&lt;p&gt;其二是，你可以在线使用REPL功能，它甚至支持自动补全，REPL的另一个好处是，它提供实时反馈！此外它的速度很快！因为每次只有代码文本在阐述，几个字节而已。&lt;/p&gt;
&lt;p&gt;&lt;img width=800 src="http://wwj-fig-bed.just4fun.site/webusb_ac39183d.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以我目前在进行的工作是，将REPL的管道分离出来。供在线课程使用。我希望提供即时的反馈,关于理由我之前在&lt;a href="https://blog.just4fun.site/Hardware-Programming-style.html"&gt;两种硬件编程风格的比较&lt;/a&gt;论述过。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://firialabs.com/"&gt;firialabs&lt;/a&gt;是一门microbit的课程，它使用webusb来建立网页与microbit的连接。&lt;/p&gt;
&lt;h1&gt;注意⚠️&lt;/h1&gt;
&lt;p&gt;WebUSB已被收录在Chrome 61中，在这之后的版本都可以使用，iOS设备不受支持，由于chrome对XP只支持到49，所以XP无法使用WebUSB。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web"&gt;Access USB Devices on the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.microbit.org/support/solutions/articles/19000084059-beta-testing-web-usb"&gt;Beta testing - Web USB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.microbit.org/support/solutions/articles/19000019131-how-to-upgrade-the-firmware-on-the-micro-bit"&gt;How to upgrade the firmware on the micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python.microbit.org/v/beta"&gt;python.microbit.org/v/beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ARMmbed/DAPLink/releases/tag/v0250"&gt;DAPLink v0250&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://makecode.microbit.org/beta#editor"&gt;makecode webusb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://micropython.top/editor-zh-hans.html"&gt;PythonEditor cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.numworks.com/"&gt;numworks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.numworks.com/blog/webusb-firmware-update/"&gt;Writing a device updater? Seriously consider WebUSB!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://makitosan.github.io/vue-microbit-webusb/"&gt;vue-microbit-webusb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.micropython.org.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=1262"&gt;microbit的webusb功能测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firialabs.com/"&gt;microbit webusb course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WICG/webusb"&gt;WICG/webusb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freebuf.com/sectool/101511.html"&gt;WebUSB API：让你的USB设备安全的接入网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wicg.github.io/webusb/"&gt;WebUSB API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor/tree/webusb-beta"&gt;PythonEditor webusb-beta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-09-27:webusb-microbit.html</guid><category>microbit</category></item><item><title>积木化编程与3D场景</title><link>/blockly-3D.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/verge3d_fc0fd21f.png" /&gt;&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;近期试着把类似code.org的编程项目移植到3D场景中。&lt;/p&gt;
&lt;p&gt;我们最初使用&lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt;实现了原型，后来发现了Blender和Verge3D，十分称心，便切换到这个技术栈里。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Blender名声在外，早有听闻，但一直没去试用。&lt;/p&gt;
&lt;p&gt;近期在树莓派的&lt;a href="https://projects.raspberrypi.org/"&gt;项目页面&lt;/a&gt;看到&lt;a href="https://projects.raspberrypi.org/en/projects?software%5B%5D=blender"&gt;3D modelling projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看了几个学习项目，觉得还不错，这些项目依赖于Blender，便下载试用了Blender，在学习Blender过程中发现许多惊艳的东西，在此做个笔记。&lt;/p&gt;
&lt;p&gt;也是在了解Blender过程中，意外地发现&lt;a href="https://www.soft8soft.com"&gt;Verge3D&lt;/a&gt;，觉得这就是我要找的工具，用来构建3D场景的编程教育项目。&lt;/p&gt;
&lt;p&gt;最近常在浏览开源项目中意外解决了手头的问题。而且事后发现它们往往是最佳解决方案，原本以为要花上几个月的工作量常常变成了几周或几天。甚至几分钟(如昨天发现的&lt;a href="https://github.com/mherrmann/fbs"&gt;fbs&lt;/a&gt;将彻底省下我之后重构scratch3-adapter的时间)&lt;/p&gt;
&lt;h3&gt;Blender是什么&lt;/h3&gt;
&lt;p&gt;Blender主页上的介绍是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open Source 3D creation. Free to use for any purpose, forever&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在阅读介绍之前，我喜欢先把软件下载下来，凭感觉胡乱捣鼓一番，先做个感性的认识，再做知性的了解。&lt;/p&gt;
&lt;p&gt;Blender的下载地址为&lt;a href="https://www.blender.org/download/"&gt;download&lt;/a&gt;, 我目前使用的版本是&lt;code&gt;v2.79b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下内容摘自维基百科词条:&lt;a href="https://zh.wikipedia.org/wiki/Blender"&gt;Blender&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blender是一套专业的，自由及开放源代码的三维计算机图形软件。由荷兰的一个动画工作室NeoGeo创建。&lt;/p&gt;
&lt;p&gt;Blender使用Python语言来创作及制作游戏及工作自动化脚本。这令我们这些python拥趸跃跃欲试，我在还不会使用blender的时候，就先去翻它的python文档。&lt;/p&gt;
&lt;p&gt;Blender有个子计划叫&lt;a href="https://zh.wikipedia.org/wiki/Game_Blender"&gt;Game Blender&lt;/a&gt;,用于制作实时交互内容。该游戏引擎使用 C++ 程序语言编写，并支持 Python 脚本和 OpenAL 3D 音频。&lt;/p&gt;
&lt;p&gt;Blender的先进功能包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Blender中，物体与数据是分离的，这使其可以快速塑模。&lt;/li&gt;
&lt;li&gt;可以将多个场景合并至单一文件（称为".blend"的文件）&lt;/li&gt;
&lt;li&gt;所有Blender所生成的".blend"文件均有完善的向前，向后版本的兼容性，同时亦具有完整的跨平台支持。&lt;/li&gt;
&lt;li&gt;所有场景，对象，材料，材质，声音，图片，后期制作特效均可集成至最后生成的".blend"动画档里。&lt;/li&gt;
&lt;li&gt;可透过".blend"文件来自定义用户界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;案例&lt;/h3&gt;
&lt;p&gt;NASA为火星探测车“好奇”着陆三周年纪念日作出了交互web-软件。探测车的动作、摄影机和机械手的操纵是基于 Blender 和 &lt;a href="https://en.wikipedia.org/wiki/Blend4Web"&gt;Blend4Web&lt;/a&gt; 创造的软件实现的。Blend4Web是用于创建和在网页浏览器中显示交互式三维计算机图形的开源框架。近期NASA将技术栈从Blend4Web迁移到Verge3D。&lt;/p&gt;
&lt;p&gt;这是个非常炫酷的项目:&lt;a href="https://opensourcerover.jpl.nasa.gov/#!/home"&gt;opensourcerover&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Blender与电影&lt;/h3&gt;
&lt;p&gt;第一套使用Blender专业视频是蜘蛛侠2，在该片制作中用来绘制分镜脚本。&lt;/p&gt;
&lt;p&gt;Blender基金会牵头制作了一些开源电影。&lt;/p&gt;
&lt;p&gt;这些通过 Blender 创作出的电影作品，都是根据CC协议（Creative Commons）发表的。因此 DVD 内带有所有电影创作相关 .blend 文件、模型、纹理和其他材料，还有原始剧本、支配表、画面分镜剧本，以及技术细节文档和视频，教你如何使用这些素材，所有人可以下载该作品或其源文件，用于修改后重新发布。&lt;/p&gt;
&lt;p&gt;这些开源电影包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%A4%A7%E8%B1%A1%E4%B9%8B%E6%A2%A6"&gt;大象之梦&lt;/a&gt;（开源视频计划：橙）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/Big_Buck_Bunny"&gt;大雄兔（Big Buck Bunny）&lt;/a&gt; （开源视频计划：桃）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%BE%9B%E7%89%B9%E5%B0%94"&gt;辛特尔（sintel）&lt;/a&gt;（开源视频计划：榴莲）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://movie.douban.com/subject/19965709/"&gt;钢铁之泪 Tears of Steel&lt;/a&gt;（开源视频计划：芒果）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以看其中的一个例子（辛特尔）:&lt;/p&gt;
&lt;video width=800 src="https://upload.wikimedia.org/wikipedia/commons/transcoded/f/f1/Sintel_movie_4K.webm/Sintel_movie_4K.webm.480p.webm" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;这些例子令人震惊之处在于，创作者所使用的工具全都开源，任何人可以轻松获得，他们把作品的所有细节，从剧本到素材也都开源，你可以看到一个人手握屠龙刀，斩落恶龙的所有细节。这就给人一种希望，只要努力，有朝一日，我们也可能创作出如此惊人的作品。事实上极少人最终走到这一步。有时候，令人难过的是，你本来有机会做出一些令人惊叹的事，外部环境已足够友好，也有前辈尽力予以支持，但却因为自身的原因，不够努力或不够聪明，未能达成目标。&lt;/p&gt;
&lt;p&gt;在开源的世界里，无论你想成为一个顶级黑客，还是想建构一个新的虚拟世界，或是用程序操控现实中的万物，屠龙刀都是可以轻易获得的，但屠龙技却得靠自己的努力去习得。&lt;/p&gt;
&lt;h1&gt;Verge3D&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/Verge3D"&gt;Verge3D&lt;/a&gt;是一个用于创建运行于网页的3D交互式体验的实时渲染器和工具套件。&lt;/p&gt;
&lt;p&gt;Verge3D是由以前创建的Blend4Web 框架的核心软件工程师团队创建。 Verge3D使用户能够利用常用的三维设计工具(目前支持 Autodesk 3ds Max 和 Blender )创做3D交互内容，并直接转换到网络浏览器中查看。&lt;/p&gt;
&lt;p&gt;Verge3D基于 WebGL 进行渲染，整合了 Three.js 库，并向程序开发人员公开&lt;a href="https://www.soft8soft.com/docs/"&gt;API接口&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;Puzzles编辑器&lt;/h3&gt;
&lt;p&gt;Puzzles编辑器是基于Blockly编写的可视化编程环境。Verge3D的程序功能可直接编写代码或使用Puzzles编辑器添加 JavaScript 脚本。 Puzzles主要面向非程序员，使其可通过 拖放 操作快速创建交互场景。&lt;/p&gt;
&lt;!--截图有1.9M--&gt;

&lt;p&gt;&lt;img width=800 src="http://wwj-fig-bed.just4fun.site/verge3d_fc0fd21f.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用Puzzles，非技术用户(如艺术家)可以轻松创作出动态的场景或游戏。步骤是在Blender中导入或创建好3D模型，接着在Puzzles中拼搭积木为3D场景/物体编程。强大而友好得令人震惊！&lt;/p&gt;
&lt;p&gt;Verge3D的工作流与主流的WebGL框架有很大的不同，它追求的是一个强大的面向艺术家的方法。开发一个新的Verge3D应用开发通常是从3D对象的建模、纹理和动画开始的，在单一的&lt;em&gt;.max或&lt;/em&gt;.blend文件中组装模型完成3D场景。然后即可在App Manager调用该文件，作为初始化Verge3D项目的基础。&lt;/p&gt;
&lt;p&gt;此外以团队协作的视角来看，通过在程序员和设计师之间分配责任，将提高团队的效率。这个神奇的工具既可用于快速原型制作，也可用于生产。&lt;/p&gt;
&lt;p&gt;需要注意的是，Puzzles项目的底层使用了three.js，物体之间的交互逻辑由js控制。所以一个使用python来控制逻辑的&lt;code&gt;.blend&lt;/code&gt;项目导入Puzzles后，python逻辑不生效。&lt;/p&gt;
&lt;p&gt;Puzzles是对blender内置的&lt;a href="https://docs.blender.org/manual/de/dev/game_engine/logic/sensors/introduction.html"&gt;逻辑编辑器&lt;/a&gt;的替代。&lt;/p&gt;
&lt;!--
# 灵感
佟
minecraft  blender
swift
边缘监测

制作地形
--&gt;

&lt;h1&gt;Blender与Python&lt;/h1&gt;
&lt;p&gt;我们前头提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blender使用Python语言来创作及制作游戏及工作自动化脚本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Blender v2.79b携带的Python版本是3.5.3&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cgmasters.net/free-tutorials/python-scripting/"&gt;这篇教程&lt;/a&gt;介绍了如何使用Python与Blender的内置的游戏引擎打交道，快速做一个游戏。文章里的代码直接可用(2012年的文章，可见其兼容性之好)&lt;/p&gt;
&lt;h3&gt;安装python第三方库&lt;/h3&gt;
&lt;p&gt;由于Blender支持Python，所以我们可以把Blender接入到更广阔的世界中，让外部世界与Blender虚构的3维空间交互。&lt;/p&gt;
&lt;p&gt;在这个过程中我们可能需要安装一些第三方python库，下边是教程，演示如何安装&lt;code&gt;pyserial&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;参考&lt;a href="https://gist.github.com/csaudiodesign/3e243fbe284cc0c02270d4b8c455e3aa"&gt;Install packages for blender bundled python&lt;/a&gt;&lt;/p&gt;
&lt;!--
陀螺仪控制3D场景 microbit，都用python编程。只需要ws client就行，读取数据
--&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Applications/Blender/blender.app/Contents/Resources/2.79/python
wget https://bootstrap.pypa.io/get-pip.py
./bin/python3.5m ./get-pip.py --prefix /Applications/Blender/blender.app/Contents/Resources/2.79/python
./bin/python3.5m bin/pip3 install pyserial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我近期会将Scratch3-adapter接入blender中！如此一来就建立了现实世界与虚拟世界的连接，你甚至可以和电影中的角色打交道。很多著名的电影都使用了blender来创作。&lt;/p&gt;
&lt;p&gt;一旦scratch3-adapter与Blender连接完成，你可以徒手创作minecraft中的世界(借助leapmotion，而minecraft的资源包社区里已经有了:&lt;a href="http://theduckcow.com/dev/blender/mcprep/"&gt;BLENDER MINECRAFT ADDON&lt;/a&gt;)。你也可以使用micro:bit制作的魔法棒与虚拟世界的哈利波特一决高下。&lt;/p&gt;
&lt;p&gt;我们之前的&lt;a href="https://scratch3-adapter-docs.just4fun.site/user_guide/gallery/"&gt;演示案例&lt;/a&gt;很快将延伸到虚拟世界中。&lt;/p&gt;
&lt;h3&gt;python api&lt;/h3&gt;
&lt;p&gt;Blender相关的python API参考&lt;a href="https://docs.blender.org/api/current/"&gt;Python API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而BGE(Blender Game Engine)相关的api则参考:&lt;a href="https://docs.blender.org/manual/de/dev/game_engine/python_api/videotexture.html#first-example"&gt;game_engine&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 移动名为Cube的对象的顶点&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;
&lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个bge例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# car&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bge&lt;/span&gt;
&lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCurrentController&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;own&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;
&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;actuators&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;move&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pressup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pressdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dLoc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pressup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;
    &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dLoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;pressdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deactivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dLoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此外我写了一个简单的完整例子:&lt;a href="http://p6ur0vhyj.bkt.clouddn.com/test_bge.blend"&gt;test_bge.blend&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;如何运行python脚本&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.blender.org/api/current/info_overview.html#script-loading"&gt;Script Loading&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# alias blender=/Applications/Blender/blender.app/Contents/MacOS/blender
blender  --python my_script.py # 会打开新的blender窗口
# blender --python --help
blender --python a.py  test_bge.blend # 这种模式下blend编辑器里的输出会在命令行打印出来！
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;教程&lt;/h1&gt;
&lt;p&gt;在学习Blender的过程中，发现不少很不错的教程，记录如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JYj6e-72RDs"&gt;Blender Beginner Tutorial - Part 1: User Interface&lt;/a&gt;: 主播生动有趣，十分推荐&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mikepan/GameEngineBook"&gt;GameEngineBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://projects.raspberrypi.org/en/projects?software%5B%5D=blender"&gt;raspberrypi 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://projects.raspberrypi.org/en/projects?software%5B%5D=blender"&gt;raspberrypi 3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blender.org/"&gt;www.blender.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Blender"&gt;wikipedia Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mikepan/GameEngineBook"&gt;GameEngineBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCSMOQeBJ2RAnuFungnQOxLg"&gt;youtube Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/csaudiodesign/3e243fbe284cc0c02270d4b8c455e3aa"&gt;Install packages for blender bundled python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blend4Web&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Blend4Web"&gt;wikipedia Blend4Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Blend4Web"&gt;wikipedia zh Blend4Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TriumphLLC/Blend4Web"&gt;github Blend4Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.soft8soft.com"&gt;Verge3D&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/Verge3D"&gt;wikipedia zh Verge3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Verge3D"&gt;wikipedia Verge3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NASA Switches from Blend4Web to Verge3D&lt;/li&gt;
&lt;li&gt;demo: NASA&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.soft8soft.com/blender-to-webgl-in-4-simple-steps/"&gt;BLENDER TO WEBGL IN 4 SIMPLE STEPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2SNQsWSRGsQ"&gt;Verge3D Puzzles Visual Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Soft8Soft"&gt;github.com/Soft8Soft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.soft8soft.com/cn/verge3d/"&gt;Verge3D 中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.soft8soft.com/docs/#manual/introduction/Beginner-Guide"&gt;Beginner's Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Puzzles，使用&lt;code&gt;python3 -m server&lt;/code&gt;在项目目录下可把包含html的项目跑起来&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.soft8soft.com/topic/some-questions-about-verge3d/"&gt;some-questions-about-verge3d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.creativebloq.com/3d-tips/blender-tutorials-1232739"&gt;31 brilliant Blender tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cgmasters.net/free-tutorials/python-scripting/"&gt;Python Scripting for the Blender Game Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bge&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alabd14313/awesome-BGE"&gt;awesome-BGE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymove3d.readthedocs.io/en/latest/stations/blender-game-engine/a_introduction.html"&gt;Starting the Blender Game Engine (BGE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Game_Blender"&gt;Game_Blender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://armory3d.org/"&gt;armory3d&lt;/a&gt;: 3D Game Engine for Blender&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/armory3d/armory"&gt;github armory3d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/a1studmuffin/SpaceshipGenerator"&gt;SpaceshipGenerator&lt;/a&gt;:  A Blender script to procedurally generate 3D spaceships&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ptabriz/FOSS4G_workshop"&gt;FOSS4G_workshop&lt;/a&gt;: Real-time 3D visualization of geospatial data with Blender&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JYj6e-72RDs"&gt;Blender Beginner Tutorial - Part 1: User Interface&lt;/a&gt;: 生动有趣，推荐！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MadMinstrel/blender-sculpt-tools"&gt;blender-sculpt-tools&lt;/a&gt;: Python addon streamlining some Blender tools for sculpting&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/"&gt;sketchfab&lt;/a&gt;:  publish &amp;amp; find 3D models online&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models?date=week&amp;amp;features=downloadable&amp;amp;sort_by=-likeCount&amp;amp;type=models"&gt;sketchfab downloadable&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/578dae149c17402c97010ed848404f4a"&gt;Scacchiera Bosco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/d0157e20709e45089c282b2db9145a4f"&gt;M3-GTS car&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/7ae4966708504f5c9e3cf2fad42476fc"&gt;V The Vbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/66c18ecd7a834d4a99dabc46b5ee6e4a"&gt;Low Poly Beach Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/82b92dbcdb194235b6bfc54cb9b473f6"&gt;Otter T pose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/b275000eacf24b1e96747e940a26a377"&gt;Hatsune Miku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/cbcf188a01f54d63a10f10c227c5a6ff?ref=related"&gt;Tiki Treasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/models/7ae818dc56be44de88cdf5f4845ec0ee"&gt;Elephant Rhino Bear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theduckcow.com/dev/blender/mcprep/"&gt;BLENDER MINECRAFT ADDON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rymdnisse.net/download/blender-rigs/minecraft-blender-rig/"&gt;Minecraft Blender Rig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orange.blender.org/"&gt;orange.blender.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Yo_Frankie!"&gt;鼯鼠弗兰基（Yo Frankie!，代号 Apricot）&lt;/a&gt; : 开源动作游戏,使用 Python作为脚本语言&lt;/li&gt;
&lt;li&gt;&lt;a href="https://durian.blender.org/"&gt;sintel project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.blender.org/manual/de/dev/game_engine/logic/sensors/introduction.html"&gt;game_engine&lt;/a&gt;: game_engine提供很多逻辑砖，它们在逻辑编辑器里，逻辑关联到实体。和node-red很像。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blenderartists.org/t/running-background-jobs-with-asyncio/673805"&gt;Running background jobs with Asyncio&lt;/a&gt;
&lt;!--对软件的学习通过开源图书，项目的学习通过树莓派--&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-09-26:blockly-3D.html</guid><category>工具</category></item><item><title>scratch3-adapter接入优必选Alpha系列机器人</title><link>/scratch3-adapter-ubtrobot.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/ubtrobot_b39dca67.png" /&gt;&lt;/p&gt;
&lt;p&gt;近期在&lt;a href="https://scratch3-adapter-docs.just4fun.site"&gt;scratch3-adapter&lt;/a&gt;中加入了优必选Alpha系列机器人的驱动，于是我们可以在scratch3.0中为优必选Alpha系列机器人编程&lt;/p&gt;
&lt;video width=400px src="http://p6ur0vhyj.bkt.clouddn.com/1537510098140.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;我们近期的另一项工作是在scratch3.0中加入课程模式(类似code.org), 之后使用scratch3-adapter + scratch3.0就可以在web中教学机器人、AI和物联网，不损失web带来的好处(瘦客户端、跨平台、记录学习情况)，又能与身边的硬件互动。&lt;/p&gt;
&lt;p&gt;&lt;img witdh=700 src="http://wwj-fig-bed.just4fun.site/scratch3-course_5a67bb0b.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img witdh=700 src="http://wwj-fig-bed.just4fun.site/scratch-course_8b040b52.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然我更期待官方的microworld，等官方推出microworld，我到时候会将硬件整合进microworld。&lt;/p&gt;
&lt;p&gt;考虑到优必选目前只对合作伙伴公开蓝牙通信协议，所以我们暂不公开这部分的驱动代码。待将来优必选公开蓝牙协议的细节后，这部分的源码也将开放给大家。&lt;/p&gt;
&lt;p&gt;在此记录一些思路和开发笔记。&lt;/p&gt;
&lt;h3&gt;机器人的驱动&lt;/h3&gt;
&lt;p&gt;为了在scratch3.0中使用积木为优必选Alpha系列机器人编程，我们需要先在&lt;a href="https://scratch3-adapter-docs.just4fun.site"&gt;scratch3-adapter&lt;/a&gt;构建插件，与机器人通信。&lt;/p&gt;
&lt;p&gt;我们先来看一下&lt;a href="https://scratch3-adapter-docs.just4fun.site"&gt;scratch3-adapter&lt;/a&gt;的架构图&lt;/p&gt;
&lt;p&gt;&lt;img width=700 src="http://olk8jbdzi.bkt.clouddn.com/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F.png" /&gt;&lt;/p&gt;
&lt;p&gt;优必选Alpha系列机器人对外暴露蓝牙接口。从上边的架构图看出，&lt;a href="https://scratch3-adapter-docs.just4fun.site"&gt;scratch3-adapter&lt;/a&gt;允许开发者自定义任何的通信方式，无论是蓝牙(BT/BLE)、usb还是wifi。&lt;/p&gt;
&lt;p&gt;优必选Alpha系列机器人内置的是蓝牙串口服务，在Mac和windows(win10/win7)上，当电脑与机器人建立蓝牙连接之后，在本地都会虚拟出蓝牙串口。之后在自定义插件中使用pyserial与之交互即可。&lt;/p&gt;
&lt;p&gt;但值得注意的是，树莓派(Linux)上的操作方式并不一样，在linux下，建议先安装blueman来管理蓝牙。连接机器人时，选择serial port模式，之后会虚拟出&lt;code&gt;/dev/rfcomm*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于不同操作系统的蓝牙略有差异，建议使用&lt;code&gt;platform.system()&lt;/code&gt;来区分不同平台(Darwin/Windows/Linux)&lt;/p&gt;
&lt;h3&gt;多个控制端&lt;/h3&gt;
&lt;p&gt;近期我们在做一个实验室解决方案，一个实验桌有多位学生，共同控制一个机器人，这是n-1架构。同时希望学生端可以同时使用ipad和电脑同时控制机器人。&lt;/p&gt;
&lt;p&gt;我们的解决方案是让&lt;a href="https://scratch3-adapter-docs.just4fun.site"&gt;scratch3-adapter&lt;/a&gt;跑在树莓派中，对外提供服务，之后scratch3.0与树莓派交互。而学生在浏览器中与运行在树莓派里的&lt;a href="https://scratch3-adapter-docs.just4fun.site"&gt;scratch3-adapter&lt;/a&gt;交互，如此一来，就实现了n个学生共同控制一台机器人。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-09-20:scratch3-adapter-ubtrobot.html</guid><category>scratch</category></item><item><title>scratch3-adapter重构笔记</title><link>/scratch3-adapter-refactoring-note.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/adapter_47fb79f2.png" /&gt;&lt;/p&gt;
&lt;p&gt;近期在重构&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;,目前的最新版本是0.1.1, 我们计划在10月份发布0.2.0&lt;/p&gt;
&lt;p&gt;这次重构带来的改变包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地SSL安全证书&lt;/li&gt;
&lt;li&gt;引入&lt;a href="https://github.com/pavlov99/json-rpc"&gt;json-rpc&lt;/a&gt;，鼓励开发者使用json-rpc简化插件的开发&lt;/li&gt;
&lt;li&gt;引入&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;模式（目前scratch3-adapter在开发模式下允许切换为Scratch Link模式，与官方Scratch Link保持相同的架构，官方暂未开放Scratch Link，我做了逆向分析。）&lt;/li&gt;
&lt;li&gt;允许在GUI面板上启停插件&lt;/li&gt;
&lt;li&gt;发布不同平台的安装包(exe/dmg/Python package)&lt;ul&gt;
&lt;li&gt;在跨平台软件分发这块，很多地方参考了&lt;a href="https://github.com/mu-editor/mu"&gt;mu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在插件方面，添加了优必选alpha系列机器人的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;近期使用官方七月底发布的&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;，我很喜欢这个软件，对它做了不少分析，&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;有许多聪明的设计，准备把这些好的主意移植到scratch3-adapter上。当然也有一些我们不喜欢的地方，我们准备做些有趣的探索和调整。&lt;/p&gt;
&lt;h1&gt;目标&lt;/h1&gt;
&lt;p&gt;此次重构的主要目标是提升软件易用性，&lt;a href="https://github.com/mu-editor/mu"&gt;mu&lt;/a&gt;和&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;在易用性方面都做得非常好，这两个软件是我们主要的学习对象。&lt;/p&gt;
&lt;h1&gt;重大变更&lt;/h1&gt;
&lt;p&gt;下边记录重构前后，发生的一些大的变更&lt;/p&gt;
&lt;h3&gt;本地SSL安全证书&lt;/h3&gt;
&lt;p&gt;我在&lt;a href="https://blog.just4fun.site/scratch3-plugin-2.html"&gt;为Scratch3.0设计的插件系统(下篇)&lt;/a&gt;中描述了&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;的架构设计，其中提到:scratch3-adapter中包含了一个websocket-server&lt;/p&gt;
&lt;p&gt;逆向分析&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;可以看到，它内部也包含了一个websocket-server，使用的是&lt;a href="https://github.com/Building42/Telegraph"&gt;Telegraph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们从https网站访问本地websocket-server服务时，如果本地websocket-server服务没有采用SSL安全证书，会给用户增加操作步骤(需要用户确认继续访问)，体验不够友好，问题的描述和解决方案我都写在&lt;a href="https://blog.just4fun.site/localhost-https-ssl.html"&gt;本地https/wss服务与SSL安全证书&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;引入&lt;a href="https://github.com/pavlov99/json-rpc"&gt;json-rpc&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;scratch3-adapter受&lt;a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E4%BA%BA%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1"&gt;ROS&lt;/a&gt;影响很深,ROS本质上是一个消息系统。&lt;/p&gt;
&lt;p&gt;我很喜欢Smalltalk的设计原则中的这条:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算应该被视为可通过发送消息来统一调用的对象的内在功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scratch的&lt;a href="https://github.com/LLK/Scratch_1.4"&gt;第一个版本&lt;/a&gt;由Smalltalk的方言Squeak写成，受Smalltalk影响极深。可以看到Scratch3.0依然保持着这条设计原则。&lt;/p&gt;
&lt;p&gt;我希望scratch3-adapter能延续Smalltalk的设计原则。所以消息会一直作为核心要素。&lt;/p&gt;
&lt;p&gt;我相信这条原则是scratch3-adapter达成它的目标&lt;code&gt;将万物积木化&lt;/code&gt;的核心所在。&lt;/p&gt;
&lt;p&gt;但原始的消息对于大多开发者来说，可能过于原始了，所以我们决定学习&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;，在消息之上抽象出RPC，方便开发者写自定义的插件。当然这个特性是可选的，是否使用json-rpc由开发者自行决定。我原本计划在消息之上添加自定义协议，后来发现json-rpc就是我想要的，所以就不重造轮子了。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;模式&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;本身非常简单，我大约使用100代码实现了它的功能。这部分作为&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;模式，开发模式下可以启用，&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;模式很简单，不包含ZeroMQ，它的核心是&lt;code&gt;websocket-server&lt;/code&gt; + &lt;code&gt;json-rpc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们来演示scratch3-adapter的&lt;a href="https://scratch.mit.edu/microbit"&gt;Scratch Link&lt;/a&gt;模式下，如何完美替代官方的Scratch Link。&lt;/p&gt;
&lt;p&gt;我们让scratch3-adapter模拟成Scratch Link，欺骗前端说它已经搜索到了micro:bit。实际上我们连电脑的蓝牙都没打开。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/adapter-link_2aa33dd6.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;接着让我们点击连接，再次成功骗过前端&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/adapter-link_08a8898f.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;我比较坚持引入ZeroMQ，所以scratch3-adapter默认不采用Scratch Link模式,而将ZeroMQ作为架构的核心部分(默认模式)。对于异步任务、分布式组件、协同控制，ZeroMQ都能帮上大忙。ZeroMQ会让scratch3-adapter极为灵活，如果之后要引入复杂的机器人、AI、飞行器矩阵，ZeroMQ会让这些事变得简单。我希望提供一个强大、灵活而开放的架构。&lt;/p&gt;
&lt;p&gt;jupyter架构的核心元素之一便是ZeroMQ，jupyter如此健壮的原因之一便是ZeroMQ。我在&lt;a href="https://blog.just4fun.site/jupyter-notebook-architecture.html"&gt;jupyter notebook架构分析&lt;/a&gt;做了讨论&lt;/p&gt;
&lt;h3&gt;允许在GUI面板上启停插件&lt;/h3&gt;
&lt;p&gt;重写了插件管理系统，支持线程管理。于是可以在GUI面板上随意启停插件。而不必反复重启软件&lt;/p&gt;
&lt;h3&gt;软件安装包&lt;/h3&gt;
&lt;p&gt;为了让软件更加易于使用，我们决定提供各个平台的安装包,windows下为exe，macOS下为dmg，linux下可以选择python package或者打包好的软件。&lt;/p&gt;
&lt;p&gt;这部分主要学习了&lt;a href="https://github.com/mu-editor/mu"&gt;mu-editor&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/localhost-https-ssl.html"&gt;本地https/wss服务与SSL安全证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-microbit-analysis.html"&gt;分析scratch3.0与micro:bit的通信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mu-editor/mu"&gt;mu&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mu-editor/mu/blob/43bb9f8bb5af177fb5fac05e25bade16c14c758a/docs/packaging.rst"&gt;Packaging Mu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-09-16:scratch3-adapter-refactoring-note.html</guid><category>scratch3</category></item><item><title>本地https/wss服务与SSL安全证书</title><link>/localhost-https-ssl.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;我之前在&lt;a href="https://blog.just4fun.site/scratch3-microbit-analysis.html"&gt;分析scratch3.0与micro:bit的通信&lt;/a&gt;提到&lt;code&gt;https校验问题&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于网站都逐渐过渡到https，而Scratch Link是个本地websocker server，要让Scratch Link与浏览器通信，需要使用wss协议。而本地websocker server采用openssl本地自生成的证书的话，浏览器要让用户在一个新页面里点击高级设置才行，体验很不友好.&lt;br /&gt;
scratch团队的解决方案十分聪明, 让&lt;code&gt;device-manager.scratch.mit.edu&lt;/code&gt;这个域名指向&lt;code&gt;127.0.0.1&lt;/code&gt;，websocker server就可以使用这个域名的证书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得这个机制对大多数在本地提供https/wss服务的软件都有用，于是写篇文章将讨论如何实现Scratch Link的本地证书机制&lt;/p&gt;
&lt;h1&gt;问题的一般形式&lt;/h1&gt;
&lt;p&gt;这个问题极具一般性，我们先抛开Scratch Link，来描述下它的一般形式。&lt;/p&gt;
&lt;p&gt;你在本地写了一个软件(native application)，软件内跑了一个本地的https/wss服务。https要求ssl证书，于是你使用openssl生成了本地证书。当你在浏览器中访问https/wss服务时，浏览器会阻止你访问https/wss服务，并提醒你存在安全问题，直到你点击下图的所示的地方，才能继续访问https/wss服务。&lt;/p&gt;
&lt;p&gt;&lt;img width="600px" src="http://wwj-fig-bed.just4fun.site/https_1c8478da.png"&gt;&lt;/p&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;p&gt;这个问题相信大多数开发者都遇见过。社区里也出了一些解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FiloSottile/mkcert"&gt;mkcert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsencrypt.org/docs/certificates-for-localhost/"&gt;certificates-for-localhost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前头的两个解决方案最具代表性，但面向的都是开发者，本质上是修改了本地的系统配置。对于普通用户并不理想。&lt;/p&gt;
&lt;p&gt;所以我们将给出一个面向普通用户的解决方案。&lt;/p&gt;
&lt;p&gt;思路其实很简单:  使用你的域名申请到安全证书，申请到证书后，将证书放在本地软件里，用于本地的https/wss服务，将证书对应的域名指向&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;操作步骤&lt;/h1&gt;
&lt;p&gt;我们接着来详细描述操作细节。&lt;/p&gt;
&lt;p&gt;我选择从&lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;获得证书&lt;/p&gt;
&lt;p&gt;Let's Encrypt的使用方法可以参考:&lt;a href="https://blog.just4fun.site/https-note.html"&gt;使用Let’s Encrypt(certbot)为你的网站生成免费的 SSL 证书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成上文的操作我们就获得了Let’s Encrypt为我们网站颁发的证书，证书位置在形如&lt;code&gt;/etc/letsencrypt/live/xxx.example.com/&lt;/code&gt;的目录里。接着我们将证书从服务器拷贝出来，放到本地软件里，用于本地的https/wss服务。举例来说，我使用python-socketio提供https/wss服务，我的配置为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_startup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_background_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;use_ssl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ssl_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROTOCOL_SSLv23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_default_verify_paths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_cert_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./cert.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;resource_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./privkey.pem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SOCKET_SERVER_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SOCKET_SERVER_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SOCKET_SERVER_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SOCKET_SERVER_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置好后重启本地软件，可以看到Chrome已经信任本地的https/wss服务了！&lt;/p&gt;
&lt;p&gt;&lt;img width="600px" src="http://wwj-fig-bed.just4fun.site/https_231c8629.png"&gt;&lt;/p&gt;
&lt;p&gt;接下来我们来讨论一些细节问题。&lt;/p&gt;
&lt;h3&gt;安全提醒&lt;/h3&gt;
&lt;p&gt;我不建议不要将通配符证书打包在本地软件中，万一加密过程没做好，证书泄漏，容易造成安全问题，具体可能造成的风险参考:&lt;a href="https://www.zhihu.com/question/50486404"&gt;域名的SSL证书泄漏对网站的安全性影响大吗？&lt;/a&gt;，主要的风险是攻击者可以利用受信任的证书发起中间人攻击，获取到用户的数据。&lt;/p&gt;
&lt;p&gt;所以我单独为一个二级域名申请证书，只用于&lt;code&gt;127.0.0.1&lt;/code&gt;,如此一来，即便不加密证书，也不会造成大问题。但加密总归是好的。&lt;/p&gt;
&lt;h3&gt;证书更新&lt;/h3&gt;
&lt;p&gt;由&lt;code&gt;Let's Encrypt&lt;/code&gt;颁发的证书，有效期是3个月，离过期还有30天以内可以renew证书。我们每三个月在服务器上更新证书自然不成问题，但如何同步更新用户机器上的证书呢，我的建议是在软件上做自动更新功能，定期去同步服务器上的证书。&lt;/p&gt;
&lt;p&gt;当然也可以定期更新软件本身, 我目前使用Pyinstaller来跨平台打包应用程序。所以可以选择&lt;a href="https://github.com/JMSwag/PyUpdater"&gt;PyUpdater&lt;/a&gt;来自动更新软件。&lt;/p&gt;
&lt;p&gt;如果你觉得太麻烦，可以考虑购买一个长期的安全证书。&lt;/p&gt;
&lt;h3&gt;如何调试&lt;/h3&gt;
&lt;p&gt;如果我们在Chrome中已经同意继续前往&lt;code&gt;127.0.0.1&lt;/code&gt;,短期内刷新，Chrome就不会再做安全提醒，我们要确定新的安全证书是否生效，需要&lt;code&gt;重新启用警告功能&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width="600px" src="http://wwj-fig-bed.just4fun.site/https_0fe5e391.png"&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-microbit-analysis.html"&gt;分析scratch3.0与micro:bit的通信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FiloSottile/mkcert"&gt;mkcert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsencrypt.org/docs/certificates-for-localhost/"&gt;certificates-for-localhost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/50486404"&gt;域名的SSL证书泄漏对网站的安全性影响大吗？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-09-03:localhost-https-ssl.html</guid><category>scratch</category></item><item><title>Scratch3.0自定义插件注意事项之令牌桶算法</title><link>/scratch-extension-token-bucket.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/bucket_df323db8.png" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;我们之前在&lt;a href="https://blog.just4fun.site/Hardware-Programming-style.html"&gt;两种硬件编程风格的比较&lt;/a&gt;中提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在少儿编程/硬件编程教育领域，硬件编程有两种风格，我将这两种风格分别称为灌入式和交互式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上述文章里，我试图论述了,对少儿编程教育而言，为何交互式编程优于灌入式编程。&lt;/p&gt;
&lt;p&gt;如果我们按照Scratch的设计风格，那么拓展Scratch，使其与硬件交互的插件一定是交互式的。Scratch大量采用了Smalltalk的设计原则，这些原则包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个系统要服务于创造精神，那么对于一个人来说，它必须是完全可以理解的。&lt;/li&gt;
&lt;li&gt;系统应该用最少的且不可更改的部件构建; 这些部分应尽可能一般化; 系统的所有部分都应保持在统一的框架内。&lt;/li&gt;
&lt;li&gt;计算应该被视为可通过发送消息来统一调用的对象的内在功能。&lt;/li&gt;
&lt;li&gt;语言应围绕一个强大的隐喻设计，这样就可以统一应用于所有领域。&lt;/li&gt;
&lt;li&gt;用户可以访问的每个组件都应该能够以有意义的方式呈现自己，以便于用户进行观察和操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些原则，我们之后有时间再细说，单独提一下第三点:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算应该被视为可通过发送消息来统一调用的对象的内在功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一点指出了消息通信在Scratch所占据的核心位置，我之前构建&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;就主要围绕这条原则。我相信这点是Smalltalk留给Scratch的重要遗产，是Scratch如此灵活强大的原因，也是理解和写出复杂的Scratch程序的核心所在&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/LLK/Scratch_1.4"&gt;第一代的Scratch&lt;/a&gt;就是用Smalltalk的方言Squeak写的，尽管Scratch经过2次的重写，最新的一代已经从Squeak迁移到了JavaScript，但设计原则上并没有发生变化。&lt;/p&gt;
&lt;p&gt;所以我坚持Scratch的插件都应该遵循这些原则。如果Scratch3.0的硬件插件是灌入式的（目前国内不少公司确实在这样做），系统的所有部分将无法保持在统一的框架内。&lt;/p&gt;
&lt;h1&gt;交互式存在的问题&lt;/h1&gt;
&lt;p&gt;如果我们同意了Scratch插件应该采用交互式风格来写，并且以message为中心（官方团队目前都是这么做的，但他们在消息之上很聪明地抽象出了一层:远程调用）&lt;/p&gt;
&lt;p&gt;那么我们就需要解决消息通信类系统固有的一些问题，典型的问题之一就是消息发送速率&lt;/p&gt;
&lt;p&gt;在通信系统中，我们需要控制发送数据的速率，如果速率太高，可能带来许多问题，诸如带宽不足，或者服务端无法应对意料之外的高频消息，诸如社区里在使用官方的wedo插件时就遇到了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/LLK/scratch-vm/issues/1531"&gt;Wedo2 sometimes drops commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LLK/scratch-vm/issues/1523"&gt;WeDo2 motor blocks do not work correctly with two motors plugged in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息发送速率问题当然有很多解决方案，在ZeroMQ中，框架内可以帮我们处理这个问题，诸如让消息在接受者一端排队，当消息高于设置水位之后，自动丢弃。&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;采用了ZeroMQ，所以这个问题可以通过简单配置来解决。&lt;/p&gt;
&lt;p&gt;但scratch团队的&lt;a href="https://scratch.mit.edu/wedo"&gt;Scratch Link&lt;/a&gt;并未采用ZeroMQ，所以他们选择手写&lt;code&gt;令牌桶算法&lt;/code&gt;(token bucket)来实现&lt;code&gt;速率限制（Rate Limiting）&lt;/code&gt;。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://en.wikipedia.org/wiki/Token_bucket"&gt;令牌桶算法(token bucket)&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;令牌桶算法是速率限制（Rate Limiting）中最常使用的一种算法。&lt;/p&gt;
&lt;p&gt;令牌桶算法基于令牌桶中是否存在令牌来指示什么时候可以发送数据。如果桶中存在令牌，则允许发送数据；反之，则不允许。&lt;/p&gt;
&lt;p&gt;图示如下:&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src="http://wwj-fig-bed.just4fun.site/tokenbucket_b8e36c38.png" /&gt;&lt;/p&gt;
&lt;h3&gt;算法&lt;/h3&gt;
&lt;p&gt;令牌桶算法在概念上表述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果设置的平均发送速率为r，那么令牌以1/r秒的速率添加到桶中。&lt;/li&gt;
&lt;li&gt;假设桶最多可存b个令牌。如果令牌在桶已满时到达，则将其丢弃。&lt;/li&gt;
&lt;li&gt;当n个数据包到达时，从令牌桶中取出(删除)n个令牌，同时将数据包被发送出去。如果令牌不够，则数据不发送。&lt;ul&gt;
&lt;li&gt;它们可以被丢弃；也可以排放在队列中以便当桶中累积了足够多的令牌时再发送；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于在此我们主要关心数据包数量，而不考虑不讨论具体数据大小，所以我们暂不讨论流量问题。&lt;/p&gt;
&lt;h1&gt;算法实现&lt;/h1&gt;
&lt;h3&gt;Python实现&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TokenBucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;An implementation of the token bucket algorithm.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; bucket = TokenBucket(80, 0.5)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; print bucket.consume(10)&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; print bucket.consume(90)&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill_rate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;tokens is the total tokens in the bucket. fill_rate is the&lt;/span&gt;
&lt;span class="sd"&gt;        rate in tokens/second that the bucket will be refilled.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Consume tokens from the bucket. Returns True if there were&lt;/span&gt;
&lt;span class="sd"&gt;        sufficient tokens otherwise False.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来对它进行测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenBucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(10) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(10) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(90) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(90) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  /tmp python token_bucket.py
tokens = 80.0
consume(10) = True
consume(10) = True
tokens = 61.0040922165
tokens = 62.0080561638
consume(90) = False
tokens = 62.0081322193
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;scratch3_wedo2 extension的实现&lt;/h3&gt;
&lt;p&gt;我们来看看scratch官方的实现（包含在&lt;a href="https://github.com/LLK/scratch-vm/pull/1540"&gt;这次提交&lt;/a&gt;中）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../util/timer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * A utility for limiting the rate of repetitive send operations, such as&lt;/span&gt;
&lt;span class="cm"&gt;     * bluetooth messages being sent to hardware devices. It uses the token bucket&lt;/span&gt;
&lt;span class="cm"&gt;     * strategy: a counter accumulates tokens at a steady rate, and each send costs&lt;/span&gt;
&lt;span class="cm"&gt;     * a token. If no tokens remain, it&amp;#39;s not okay to send.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param {number} maxRate the maximum number of sends allowed per second&lt;/span&gt;
&lt;span class="cm"&gt;     * @constructor&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The maximum number of tokens.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maxTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The interval in milliseconds for refilling one token. It is calculated&lt;/span&gt;
&lt;span class="cm"&gt;         * so that the tokens will be filled to maximum in one second.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_refillInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;maxRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The current number of tokens in the bucket.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maxTokens&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The last time in milliseconds when the token count was updated.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_lastUpdateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeElapsed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Check if it is okay to send a message, by updating the token count,&lt;/span&gt;
&lt;span class="cm"&gt;     * taking a token and then checking if we are still under the rate limit.&lt;/span&gt;
&lt;span class="cm"&gt;     * @return {boolean} true if we are under the rate limit&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;okayToSend&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Calculate the number of tokens to refill the bucket with, based on the&lt;/span&gt;
        &lt;span class="c1"&gt;// amount of time since the last refill.&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeElapsed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeSinceRefill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_lastUpdateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refillCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeSinceRefill&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_refillInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// If we&amp;#39;re adding at least one token, reset _lastUpdateTime to now.&lt;/span&gt;
        &lt;span class="c1"&gt;// Otherwise, don&amp;#39;t reset it so that we can continue measuring time until&lt;/span&gt;
        &lt;span class="c1"&gt;// the next refill.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refillCount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_lastUpdateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Refill the tokens up to the maximum&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maxTokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;refillCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// If we have at least one token, use one, and it&amp;#39;s okay to send.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/test/unit/util_rateLimiter.js"&gt;测试用例&lt;/a&gt;为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../../src/util/rateLimiter.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rate limiter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// The rate limiter starts with a number of tokens equal to the max rate&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// Running okayToSend rate times uses up all of the tokens&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
     &lt;span class="c1"&gt;// After a delay of one second divided by the max rate, we should have exactly&lt;/span&gt;
    &lt;span class="c1"&gt;// one more token to use.&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用scratch官方的RateLimiter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// const RateLimiter = require(&amp;#39;../../util/rateLimiter.js&amp;#39;);&lt;/span&gt;
&lt;span class="c1"&gt;// this._rateLimiter = new RateLimiter(30);&lt;/span&gt;

    &lt;span class="nx"&gt;_send&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPeripheralIsConnected&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_rateLimiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ble&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IO_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;a href="https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/src/extensions/scratch3_wedo2/index.js"&gt;wedo插件&lt;/a&gt;中，我们可以看到RateLimiter暴露出的接口:&lt;code&gt;this._rateLimiter.okayToSend()&lt;/code&gt;清晰易用&lt;/p&gt;
&lt;p&gt;值得一提的是，scratch官方实现的令牌桶算法和Python的实现略有不同。scratch官方实现没有n条消息同时涌入的情况，而是逐条处理:&lt;code&gt;this._count--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大家之后在Scratch3.0中自定义插件，需要处理速率问题时，可以直接使用官方的&lt;code&gt;RateLimiter&lt;/code&gt;,我的建议是所有与消息相关的插件都该加上&lt;code&gt;RateLimiter&lt;/code&gt;, 否则系统的健壮性是堪忧的，也很难做到&lt;code&gt;宽围墙&lt;/code&gt;，可能一不小心就塌了&lt;/p&gt;
&lt;!--
[Rate-limiting with a token bucket for the WeDo extension](https://github.com/LLK/scratch-vm/pull/1540)
    算法:[rateLimiter.js](https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/src/util/rateLimiter.js)
    应用: [scratch3_wedo2/index.js](https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/src/extensions/scratch3_wedo2/index.js#L541)
    解决的问题:[Wedo2 sometimes drops commands](https://github.com/LLK/scratch-vm/issues/1531)

交互式中的核心问题,我之前写交互式设计

为了实现宽围墙

设施的牢固性

蹦蹦床的时候

那是疫苗

# todo
*  算法的图示
*  算法的伪代码
*  Python实现
*  Scratch实现
--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/Hardware-Programming-style.html"&gt;两种硬件编程风格的比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LLK/scratch-vm/pull/1540"&gt;Rate-limiting with a token bucket for the WeDo extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Token_bucket"&gt;wikipedia Token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://baike.baidu.com/item/token%20bucket/4315253?noadapt=1"&gt;百度 token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/YEYUANGEN/article/details/20529793"&gt;qos令牌桶（Token Bucket）算法解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/falconry/token-bucket/blob/master/token_bucket/limiter.py"&gt;Python token-bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/drocco007/6155452"&gt;Python generator rate limiter using token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ActiveState/code/blob/master/recipes/Python/511490_Implementatitoken_bucket/recipe-511490.py"&gt;Implementatitoken_bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jiajunhuang.com/articles/2016_11_05-token_bucket.rst.html"&gt;Token Bucket 算法 celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/smyte/rate-limiter-df3408325846"&gt;High-performance rate limiting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://liuliqiang.info/post/214/"&gt;速率限制的一些思考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-29:scratch-extension-token-bucket.html</guid><category>scratch</category></item><item><title>彩虹🌈的旋律</title><link>/scratch3-rainbow.html</link><description>&lt;blockquote&gt;
&lt;p&gt;阳光总在风雨后, 请相信有彩虹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/rainrow_324b7eb0.png" /&gt;&lt;/p&gt;
&lt;p&gt;我喜欢这个粉色少女心的题目&lt;/p&gt;
&lt;h1&gt;演示&lt;/h1&gt;
&lt;p&gt;我们先来看看演示效果：在桌子上一字排开彩虹糖，按照你喜欢的颜色去摆放，这些彩虹糖将被演奏为一首音乐&lt;/p&gt;
&lt;video width=600px src="http://p6ur0vhyj.bkt.clouddn.com/scratch_rainrow.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;我非常喜欢Scratch团队成员&lt;a href="https://github.com/ericrosenbaum"&gt;Eric Rosenbaum&lt;/a&gt;发起的&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;颜色编程&lt;/a&gt;项目。&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;颜色编程&lt;/a&gt;的基本想法是使用日常物体表面的颜色与计算机中的虚拟事物进行互动&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;颜色编程&lt;/a&gt;由一系列的实验构成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twinkle&lt;/li&gt;
&lt;li&gt;Color Code&lt;/li&gt;
&lt;li&gt;Scratch Color Code&lt;/li&gt;
&lt;li&gt;Programming with Color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们下边将逐一做个简单介绍&lt;/p&gt;
&lt;!--
写给普通用户
在scratch社区去推广
--&gt;

&lt;!--腾讯视频--&gt;

&lt;h3&gt;Twinkle&lt;/h3&gt;
&lt;p&gt;Twinkle 使用一个颜色传感器将颜色序列转化为一首旋律，于是你可以将一幅画、一个乐高建筑以及你身上衬衫上的条纹演奏为一首歌&lt;/p&gt;
&lt;video width=500px src="http://os54tv4fc.bkt.clouddn.com/10697723.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;Color Code&lt;/h3&gt;
&lt;p&gt;Color Code 的想法是: 物体的颜色可以控制屏幕里的运动，于是你可以利用这个概念创造从乒乓球游戏、音序器以及人工生命模拟。&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/Color%20Code.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;Scratch Color Code&lt;/h3&gt;
&lt;p&gt;Scratch Color Code则将Color Code的想法带入到Scratch中，如此一来，人们可以使用友好的scratch图形化编程环境来创建项目，与外部世界的彩色物体交互&lt;/p&gt;
&lt;p&gt;视频里展示的例子包括一个cookie怪物游戏、一个叶子平台游戏，以及一个糖果鼓机(candy drum machine)&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/Scratch%20Color%20Code.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;Programming with Color&lt;/h3&gt;
&lt;p&gt;Programming with Color将前头的概念延伸到最远处:使用颜色来编程，用Scratch Color Code来创造一个微型编程语言，在这门语言里颜色代表着指令。&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/Programming%20with%20color.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;这是个极为有趣的想法，我们来看看这个想法的细节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个小角色在屏幕移动，画出一条线；&lt;/li&gt;
&lt;li&gt;一个黑色箭头在屏幕的底部，从左向右滑动，读取由彩色物体组成的“程序”。&lt;/li&gt;
&lt;li&gt;当黑色箭头碰到红色时，小角色向右转。&lt;/li&gt;
&lt;li&gt;当黑色箭头碰到绿色时，小角色正在绘制的线条会改变颜色。&lt;/li&gt;
&lt;li&gt;箭头碰到黄色时小角色向左转，碰到蓝色时小角色回到初始位置重新开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一种有形的编程语言，指令由对象表示，即便在程序运行时也可以重新排列程序(如果你是一名职业程序员，可能想到了热重载或者LISP)。&lt;/p&gt;
&lt;p&gt;与其他有形编程语言不同的是，指令块可以由任何对象来表示，不必是特定的指令块，只要颜色对了就行。对比&lt;a href="https://4ok.jp/pets/en/"&gt;PETS&lt;/a&gt;和&lt;a href="https://www.primotoys.com/zh/"&gt;Cubetto&lt;/a&gt;，我们可以看到它们的目标上的相似，以及策略上的差别&lt;/p&gt;
&lt;p&gt;与其他编程语言不同，Programming with Color的指令具有连续的效应，举例来说明：红色物体越宽，角色右转的时间越长。&lt;/p&gt;
&lt;p&gt;这些属性为创造新的编程语言提供了一些有趣的探索。&lt;/p&gt;
&lt;h1&gt;Scratch颜色编程&lt;/h1&gt;
&lt;p&gt;本文主要受&lt;code&gt;Scratch Color Code&lt;/code&gt;的启发，准备在最新发布的Scratch3.0，使用彩虹糖来演奏乐曲，这便是少女心题目&lt;code&gt;彩虹的旋律&lt;/code&gt;之来由&lt;/p&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Programming with Color&lt;/code&gt;部分其实已经将原理说清楚了，在此我们将原理与当前项目:&lt;code&gt;彩虹🌈的旋律&lt;/code&gt;结合起来说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;彩虹糖在桌子上排成一列，使用摄像头对着它们, 彩虹糖被投影到scratch舞台&lt;/li&gt;
&lt;li&gt;一个粉色箭头在屏幕中间，从左向右滑动&lt;/li&gt;
&lt;li&gt;当粉色箭头碰到不同颜色的彩虹糖时，演奏不同旋律的音符&lt;/li&gt;
&lt;/ol&gt;
&lt;!--

学习音乐 note

音符
    https://en.scratch-wiki.info/wiki/MIDI_Notes
    c 60 62 64 65 67 69 71  

颜色编程 .sb3 

,你也可以将彩虹糖视为指令颗粒，用它来编程
--&gt;

&lt;p&gt;接着，让我们一起动起手来&lt;/p&gt;
&lt;h3&gt;需要的材料&lt;/h3&gt;
&lt;p&gt;&lt;img width=500px src="http://wwj-fig-bed.just4fun.site/candy_410c19cf.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些彩虹糖&lt;/li&gt;
&lt;li&gt;一个usb摄像头&lt;/li&gt;
&lt;li&gt;一台笔记本电脑(安装chrome浏览器)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Do-Re-Mi&lt;/h3&gt;
&lt;p&gt;让我们从音乐届的&lt;code&gt;hello world&lt;/code&gt;开始： 演奏:&lt;code&gt;Do Re Mi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回顾下原理，看看我们都需要做些什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;彩虹糖在桌子上排成一列，使用摄像头对着它们, 彩虹糖被投影到scratch舞台&lt;/li&gt;
&lt;li&gt;一个粉色箭头在屏幕中间，从左向右滑动&lt;/li&gt;
&lt;li&gt;当粉色箭头碰到不同颜色的彩虹糖时，演奏不同旋律的音符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;动起手来，首先取出三种颜色的彩虹糖，在桌子上摆开，使用摄像头对着它们，我原先准备使用乐高积木搭建一个摄像头支架，由于心急想快些看到效果，于是我给了我同事一颗彩虹糖，让他帮我拿着USB摄像头&lt;/p&gt;
&lt;p&gt;摆好彩虹糖和摄像头后，就可以开始在&lt;a href="https://beta.scratch.mit.edu/"&gt;scratch&lt;/a&gt;里开始编写程序了&lt;/p&gt;
&lt;p&gt;接下来需要在scratch的角色库里选择一个粉色箭头精灵，只所以把他们称为精灵，是因为游戏里的角色在传统上都被称为精灵。&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://wwj-fig-bed.just4fun.site/scratch_rainrow_91b32f58.png"/&gt;&lt;/p&gt;
&lt;p&gt;聪明的你可能要打破沙锅，问为何它们在传统上会被称为精灵呢？我想，可能是因为这些角色和童话里的精灵一样，它们会运动，会生气，会砰地一声消失不见。你通过编程来操控这些精灵，就这点来说，编程和魔法是很相似的，这是个很好的隐喻。你写出一串咒语，然后故事里的精灵就动了起来、远处的灯亮了、而手中的飞行器嗖地飞上了天，这是今天利用程序能做到的事，在&lt;code&gt;很久很久以前的&lt;/code&gt;这种开头的故事里，这种事情往往是魔法师的专属权力。我相信今天程序做到的事情，会让历史上每一位伟大的巫师/魔法师大为震惊，这些魔法师不只是大卫·科波菲尔，也包括哈利.波特&lt;/p&gt;
&lt;p&gt;选择好精灵之后，我们就开始来为精灵编程了，在开始编写程序之前，我们先想想我们希望精灵做什么事呢&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;一个粉色箭头在屏幕中间，从左向右滑动，读取由彩虹糖组成的“程序”。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们希望粉色箭头在屏幕中间从左向右滑动，目标明确之后，我们就开始动手写程序&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://wwj-fig-bed.just4fun.site/scratch_rainrow_17ae4f7d.png"/&gt;&lt;/p&gt;
&lt;p&gt;上边这段程序表达的意思是:&lt;code&gt;箭头&lt;/code&gt;不断往右边移动，如果到了舞台边缘就回到初始位置。怎么知道哪儿是舞台边缘呢？这就是程序里看起来奇怪的数字&lt;code&gt;212&lt;/code&gt;出现的原因。212是&lt;code&gt;坐标&lt;/code&gt;值，如果你不知道坐标的概念也没关系，知道212表示&lt;code&gt;舞台上右边缘的位置&lt;/code&gt;就行。写出有趣的程序和数学好不好并没什么太大关系，别听信大家恐吓你数学不好就学不好编程。如果你喜欢编程，你的数学很可能会得到提高，但你目前的数学不好却不意味着你不适合编程，它可能更多意味着你的数学老师上课太无聊。数学课大多情况下总是那么无聊，这也是我们喜欢在编程中学习的原因&lt;/p&gt;
&lt;p&gt;运行程序，我们就看到箭头完成了我们期望它做的事情：不断从左往右滑动&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://os54tv4fc.bkt.clouddn.com/%E5%BD%A9%E8%99%B9%E7%B3%96_arrow2.gif"/&gt;&lt;/p&gt;
&lt;p&gt;下边来实现最后一步&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当粉色箭头碰到不同颜色的彩虹糖时演奏不同旋律的音符&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了实现这一步，我们需要先启用摄像头，让糖果投影到屏幕上, 首先选择scratch扩展里的&lt;code&gt;视频侦测&lt;/code&gt;插件&lt;/p&gt;
&lt;p&gt;&lt;img width=600px src="http://wwj-fig-bed.just4fun.site/scratch_rainrow_11d35b9d.png"/&gt;&lt;/p&gt;
&lt;p&gt;接着编写碰到不同颜色时演奏不同旋律的代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黄色对应"Do"&lt;/li&gt;
&lt;li&gt;橙色对应"Re"&lt;/li&gt;
&lt;li&gt;褐色对应"Mi"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=600px src="http://wwj-fig-bed.just4fun.site/scratch_rainwor_e87b2bf8.png"/&gt;&lt;/p&gt;
&lt;p&gt;现在就可以开始&lt;code&gt;Do Re Mi&lt;/code&gt;的演奏啦：&lt;/p&gt;
&lt;video width=600px src="http://os54tv4fc.bkt.clouddn.com/%E5%BD%A9%E8%99%B9%E7%B3%96123.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;欢乐颂&lt;/h3&gt;
&lt;p&gt;我们来演奏贝多芬《欢乐颂》的开头: &lt;code&gt;33455432&lt;/code&gt;&lt;/p&gt;
&lt;video width=600px src="http://p6ur0vhyj.bkt.clouddn.com/scratch_rainrow.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;挑一首你自己喜欢的乐曲，试着用彩虹糖演奏它&lt;/p&gt;
&lt;h1&gt;想象空间&lt;/h1&gt;
&lt;p&gt;程序是一种指令序列，上边的教程里，我们已经学会了将彩虹糖映射为一个指令(演奏旋律)，我们当然也可以将彩虹糖映射为其他指令，诸如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射为画笔移动&lt;/li&gt;
&lt;li&gt;映射为机器人的移动&lt;/li&gt;
&lt;li&gt;映射为智能家居的设备行为&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此一来我们就可以在桌子上摆放彩虹糖，去探索绘画、音乐和改造你的家庭&lt;/p&gt;
&lt;p&gt;我们甚至可以用彩虹糖去制作了一门新的编程语言： &lt;code&gt;Candy Language&lt;/code&gt;&lt;/p&gt;
&lt;!--
### cozmo
[PETS](https://4ok.jp/pets/en/)

我之前实验python写过一个简单的[pets模拟器](https://gist.github.com/wwj718/3ade708bc6e7f3cf669dc38a998000cd)

控制cozmo 移动  前后左右（四种颜色） 实验adapter

我们


整个游戏过程都鼓励小朋友多尝试。移动方块，按按按钮，看看会发生什么？

Cubetto 和 Geppetto（制造匹诺曹的老爷爷）押韵。

Cubetto 套件抛弃了屏幕

### 增强现实
[COLOR CODE](https://www.ericrosenbaum.com/color-code/)
--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ericrosenbaum.com/color-code/"&gt;COLOR CODE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://musiclab.chromeexperiments.com/About"&gt;musiclab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.primotoys.com/zh/"&gt;primotoys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech2ipo.com/10020774"&gt;如何教 3 岁小孩学编程，不用电脑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sonic-pi.net/"&gt;sonic-pi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-08:scratch3-rainbow.html</guid><category>scratch</category></item><item><title>分析scratch3.0与micro:bit的通信</title><link>/scratch3-microbit-analysis.html</link><description>&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/scratch_microbit_0f5be12b.png" width=600 /&gt; &lt;/p&gt;
&lt;p&gt;Scratch在七月底举行了一个大会:&lt;a href="https://scratch.mit.edu/conference"&gt;conference&lt;/a&gt;, 大会上, scratch团队向大家介绍了即将推出的Scratch 3.0, 赶在会议开始之前，scratch团队完成了对micro:bit的官方支持，项目页连同使用说明也正式上线:&lt;a href="[scratch.mit.edu/microbit](https://scratch.mit.edu/microbit)"&gt;microbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;scratch与micro:bit作为全球最有名的两个少儿编程项目（分别是软件和硬件），能够结合在一起，太振奋人心。之前社区里大家就围绕这块在做许多探索，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;的&lt;a href="https://blog.just4fun.site/scratch3-microbit.html"&gt;scratch3.0 + micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/user_guide/usage/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;尝鲜&lt;/h1&gt;
&lt;p&gt;只要你手边有micro:bit就可以开始体验了.&lt;/p&gt;
&lt;p&gt;按照&lt;a href="https://scratch.mit.edu/microbit"&gt;使用说明&lt;/a&gt;，将micro:bit接入scratch3.0毫无障碍:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/scratch_microbit_0f5be12b.png" width=600 /&gt; &lt;/p&gt;
&lt;p&gt;完成连接后就可以开始你的创作了，&lt;a href="https://scratch.mit.edu/microbit"&gt;使用说明&lt;/a&gt;页面里给出了几个例子,大家可以从这儿入手&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/scratch_heart_a30a52b1.png" width=600 /&gt; &lt;/p&gt;
&lt;h1&gt;原理&lt;/h1&gt;
&lt;p&gt;体验完scratch与micro:bit的互动，我们来分析一下官方是如何做到的。&lt;/p&gt;
&lt;p&gt;回顾&lt;a href="https://scratch.mit.edu/microbit"&gt;使用说明&lt;/a&gt;和体验过程，容易猜到Scratch Link起代理的作用，Scratch Link在内部跑了一个websocket服务，允许网页与其交互，同时在启动时扫描周围的BLE设备&lt;/p&gt;
&lt;p&gt;思路和&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;几乎完全一致&lt;/p&gt;
&lt;p&gt;Scratch Link与&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;的不同之处有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scratch Link目前不支持扩展，似乎也没计划开源，原因可能我猜测是Scratch Link将支持乐高机器人，而乐高机器人是闭源商业项目。&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;允许你自行扩展&lt;/li&gt;
&lt;li&gt;Scratch Link在使用上更为简易&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;兼容更多的系统环境以及支持所有的开源硬件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scratch Link在易用性上做得非常好，这也&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;准备向它学习的地方。&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;的目标之一是完全兼容Scratch Link的功能&lt;/p&gt;
&lt;p&gt;这篇文章就来分析一下官方在这块的巧思。以便于我们可以将其用到其他地方。&lt;/p&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;h3&gt;推断&lt;/h3&gt;
&lt;p&gt;从scratch的&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;来看，Scratch Link仅仅只是一个代理，scratch与micro:bit的交互逻辑都在&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;所以我们暂时不必使用&lt;a href="https://www.wireshark.org/download.html"&gt;wireshark&lt;/a&gt;抓包分析，而仅仅通过阅读&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;，应该就能知道通信的细节，之后我们使用gatttool来验证。&lt;/p&gt;
&lt;p&gt;如果你对BLE/GATT相关的概念不熟悉，可以看看我之前的文章:&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;!--adapter与硬件直接是不是只是代理  建立连接，转发消息--&gt;

&lt;h3&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L35"&gt;BLEUUID&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension源码&lt;/a&gt;里我们可以找到micro:bit里跑的服务和属性的uuid，也正是这个证据，让我们猜测Scratch Link只是个透明代理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const BLEUUID = {
    service: 0xf005,
    rxChar: &amp;#39;5261da01-fa7e-42ab-850b-7c80220097cc&amp;#39;,
    txChar: &amp;#39;5261da02-fa7e-42ab-850b-7c80220097cc&amp;#39;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对比lancaster大学的&lt;a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html"&gt;Bluetooth Developer Studio Level 3 Profile Report&lt;/a&gt;,可知scratch自己重写了很多东西，而没有使用现成的UART service，这点我颇为不解。&lt;/p&gt;
&lt;h3&gt;展开追踪&lt;/h3&gt;
&lt;p&gt;我们接着来跟踪一下&lt;code&gt;A button pressed？&lt;/code&gt;这个积木涉及的通信过程，从一个具体例子里突破。经过这个例子，我们对整个通信流程应该会有一个整体的了解，之后我们再对不同类型的积木逐类探索。&lt;/p&gt;
&lt;p&gt;GATT 通信的双方是 C/S 关系, 为了知道micr:bit上A按钮的状态，一般采用两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其一是利用GATT的通知机制，每当按钮状态变化时，通知给电脑(Scratch Link会把消息代理给scratch)&lt;/li&gt;
&lt;li&gt;其二是每当&lt;code&gt;A button pressed？&lt;/code&gt;积木被触发时，主动去read相应的属性值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit"&gt;scratch-gui/microbit&lt;/a&gt;应该是用这两种方式中的一种&lt;/p&gt;
&lt;p&gt;但&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;有些特殊，它构建了UART service，之后的的数据都走UART service，逻辑上这更像经典的串口通信。只是实现在GATT上而已。&lt;/p&gt;
&lt;p&gt;从源码中可以看到buttonA是否按下取决于 &lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L491"&gt;this._device.buttonA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L323"&gt;this._device = new MicroBit(this.runtime, Scratch3MicroBitBlocks.EXTENSION_ID);&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺藤摸瓜，可以跟踪到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Process the sensor data from the incoming BLE characteristic.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param {object} base64 - the incoming BLE data.&lt;/span&gt;
&lt;span class="cm"&gt;     * @private&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;_processSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse data&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Base64Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base64ToUint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gestureState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// cancel disconnect timeout and start a new one&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnectSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;BLETimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释里说得很清楚:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     * Process the sensor data from the incoming BLE characteristic.
     * @param {object} base64 - the incoming BLE data.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从逻辑和语义上，可以看出&lt;code&gt;_processSessionData&lt;/code&gt;是个回调函数，micro:bit会通过串口源源不断把它自身的状态数据(sensor data)不断发给&lt;code&gt;_processSessionData&lt;/code&gt;,  如此一来，scratch就能得知microbit的A按钮是否按下，为了验证我们的想法，我们得继续跟踪:&lt;code&gt;this._ble.read(BLEUUID.service, BLEUUID.rxChar, true, callback);&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Starts reading data from device after BLE has connected to it.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;_onSessionConnect&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_processSessionData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ble&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rxChar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnectSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;BLETimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_ble看去是个通用的抽象io(BLESession)，&lt;code&gt;_ble.read&lt;/code&gt;在语义上类似UART read，只是实现上是基于GATT的，如果你熟悉GATT，至此应该基本都猜到了。当然我们会继续剖析。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    /**
     * Called by the runtime when user wants to scan for a device.
     */
    startDeviceScan () {
        this._ble = new BLESession(this._runtime, {
            filters: [
                {services: [BLEUUID.service]}
            ]
        }, this._onSessionConnect.bind(this));
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跟踪到BLESession类里， &lt;code&gt;BLESession&lt;/code&gt;继承自&lt;code&gt;JSONRPCWebSocket&lt;/code&gt;, 这里提示我们scratch与Scratch Link是如何通信的，基于WebSocket，同时使用远程调用的概念, RPC使用起来要比流简单很多。这是scratch官方很聪明的举措之一，我们在文末的tips里还将列出官方其他的聪明做法&lt;/p&gt;
&lt;p&gt;如果你不打算自己实现类似Scratch Link的东西，JSONRPCWebSocket不必太关注。我实现了类似Scratch Link的&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;，但使用的是消息通信，策略上和scratch团队不大一样。这块我们先不细说&lt;/p&gt;
&lt;p&gt;回到BLESession上边，我们前头关注&lt;code&gt;_ble.read&lt;/code&gt;,在此将看到它的实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characteristicId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;optStartNotifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onCharacteristicChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;characteristicId&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optStartNotifications&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startNotifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_characteristicDidChangeCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;onCharacteristicChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendRemoteRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sendError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;对它的调用是:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this._ble.read(BLEUUID.service, BLEUUID.rxChar, true, callback);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至此，我们就搞懂了&lt;code&gt;A button pressed？&lt;/code&gt;是如何实现的，optStartNotifications被设置为True，语义上是接受通知，当micro:bit上数据变化时，及时通知给scratch。技术层面使用了GATT的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端可以请求服务器通知一项特征&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于这点，我们在&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;有提到&lt;/p&gt;
&lt;p&gt;因为弄懂了&lt;code&gt;A button pressed？&lt;/code&gt;，所以&lt;code&gt;When A button pressed&lt;/code&gt;积木也不难理解，当然这需要你熟悉：scatch的HAT类型的积木(事件风格)。源码一目了然&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;whenButtonPressed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;any&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;关于write&lt;/h3&gt;
&lt;p&gt;既然我们分析完read，顺手看一下write的实现,直接上源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characteristicId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characteristicId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendRemoteRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sendError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没什么需要特别说的&lt;/p&gt;
&lt;p&gt;我们以一个使用write的积木为例，来看看具体的细节,以display text为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_writeSessionData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLECommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;_writeSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPeripheralIsConnected&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// attach command to beginning of message&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Base64Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uint8ArrayToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ble&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txChar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用display text打印&lt;code&gt;hello&lt;/code&gt;字符串，观察websocket传输的数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serviceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;61445&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characteristicId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5261da02-fa7e-42ab-850b-7c80220097cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gWhlbGxv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里值得一提的是编码方式:&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"&gt;Uint8Array&lt;/a&gt;:  Uint8Array 数组类型表示一个8位无符号整型数组，创建时内容被初始化为0&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.w3school.com.cn/js/jsref_charCodeAt.asp"&gt;charCodeAt&lt;/a&gt;: 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。&lt;/p&gt;
&lt;p&gt;硬件的通信使用的编码可能部位web开发者熟悉，我对底层编码也不熟，多是现学现用，基本也够用.说到编码，想起一本书特别赞:&lt;a href="https://book.douban.com/subject/4822685/"&gt;编码&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用gatttool做些实验&lt;/h3&gt;
&lt;p&gt;我在&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;有演示gatttool的使用&lt;/p&gt;
&lt;p&gt;我们在分析了Scratch/Scratch Link与micro:bit的通信之后，使用ble工具来做些分析，我在树莓派里使用gatttool，你可可以选择其他工具&lt;/p&gt;
&lt;p&gt;首先扫描micro:bit的地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@cozmo1:~ $ sudo hcitool lescan
DF:48:87:86:93:20 BBC micro:bit [zuzop]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接它并进入交互模式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@cozmo1:~ $ gatttool -I -b DF:48:87:86:93:20 -t random
[DF:48:87:86:93:20][LE]&amp;gt; connect
Attempting to connect to DF:48:87:86:93:20
Connection successful
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接成功！&lt;/p&gt;
&lt;p&gt;接着我们来看一下UART service的相关信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; primary 0xf005 # 输入0xf005和f005相同，都被处理为16进制
Starting handle: 0x0013 Ending handle: 0xffff
[DF:48:87:86:93:20][LE]&amp;gt; char-desc 0x0013 0xffff
handle: 0x0013, uuid: 00002800-0000-1000-8000-00805f9b34fb
handle: 0x0014, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0015, uuid: 5261da01-fa7e-42ab-850b-7c80220097cc
handle: 0x0016, uuid: 00002902-0000-1000-8000-00805f9b34fb
handle: 0x0017, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0018, uuid: 5261da02-fa7e-42ab-850b-7c80220097cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前头我们从源码里读到:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BLEUUID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xf005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;rxChar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5261da01-fa7e-42ab-850b-7c80220097cc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;txChar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5261da02-fa7e-42ab-850b-7c80220097cc&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可知我们的猜测完全正确！Scratch Link是个透明代理。&lt;/p&gt;
&lt;p&gt;接着让我们来读取micro:bit的sensor数据,&lt;code&gt;rxChar: '5261da01-fa7e-42ab-850b-7c80220097cc'&lt;/code&gt;对应的handle为&lt;code&gt;0x0015&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-read-hnd 0x0015
Characteristic value/descriptor: 00 5f ff f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们按住按钮A时读到的数据为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-read-hnd 0x0015
Characteristic value/descriptor: 00 44 fe 57 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多次按下和松开，并观察，我们猜测按钮存储在&lt;code&gt;00 44 fe 57 01&lt;/code&gt;中的&lt;code&gt;1&lt;/code&gt;这个位置上&lt;/p&gt;
&lt;p&gt;回忆一下前头的&lt;code&gt;_processSessionData&lt;/code&gt;函数，据此我们就弄懂了数据的编解码方式，我们可以还原出从rxChar读到的经base64编码的数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;_processSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse data&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Base64Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base64ToUint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gestureState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// cancel disconnect timeout and start a new one&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnectSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;BLETimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们也可以开启通知 &lt;!--0100还是0200完全是猜的，有依据吗--&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-write-req 0x0016 0100
Characteristic value was written successfully
Notification handle = 0x0015 value: 00 29 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 85 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 85 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2c 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2a 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2c 00 89 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/pre&gt;&lt;/div&gt;


&lt;!--使用pygatt读取数据，使用BLED112 跨平台， 使用scratch3-adapter
mac下使用BLED112 https://github.com/peplin/pygatt/issues/159
 vim /usr/local/lib/python3.6/site-packages/pygatt/backends/bgapi/bgapi.py
adapter.scan() ok
但connect有问题
python  Byte Array to Hex String

https://stackoverflow.com/questions/19210414/byte-array-to-hex-string
--&gt;

&lt;p&gt;接着试试使用pygatt+BLED112在macOS下与micro:bit通信，使用BLED112，我们可以在mac/windows/linux下与ble设备通信&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygatt&lt;/span&gt;
&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygatt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BGAPIBackend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 使用BLED112&lt;/span&gt;
&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# pygatt在macOS下有bug需要hack start函数: https://github.com/peplin/pygatt/issues/159， 也可以参考：https://github.com/jannopet/LEGO-WeDo-2.0-Python-SDK/blob/master/wedo2/smarthub.py#L20&lt;/span&gt;

&lt;span class="n"&gt;DEVICE_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DF:48:87:86:93:20&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ADDRESS_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygatt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BLEAddressType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;
&lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEVICE_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ADDRESS_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#value = device.char_read(&amp;quot;5261da01-fa7e-42ab-850b-7c80220097cc&amp;quot;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hexlify&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    handle -- integer, characteristic read handle the data was received on&lt;/span&gt;
&lt;span class="sd"&gt;    value -- bytearray, the data returned in the notification&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Received data: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;hexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# todo 模仿前头js源码，对数据进行解包&lt;/span&gt;

&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5261da01-fa7e-42ab-850b-7c80220097cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;handle_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行后，输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Received data: b&amp;#39;00ab003600000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003200000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003000000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003700000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003700000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003c00000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003700000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003c00000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00a9003d00000000000000000000000000000000&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此一来我们就可以自己写Scratch Link了，而不必使用官方的！例如在scratch3-adapter中将microbit作为一个extension. 我最近正在将这部分写为一个python库。感兴趣的同学可以一起参与:&lt;a href="https://github.com/wwj718/scratch-microbit-python-sdk"&gt;scratch-microbit-python-sdk&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接着我们来实验往microbit中写数据，我们前头提道display text积木，我们对其稍作调整,使其可在console运行，观察编码后的内容是什么:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Enum for micro:bit BLE command protocol.&lt;/span&gt;
&lt;span class="cm"&gt; * https://github.com/LLK/scratch-microbit-firmware/blob/master/protocol.md&lt;/span&gt;
&lt;span class="cm"&gt; * @readonly&lt;/span&gt;
&lt;span class="cm"&gt; * @enum {number}&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x81&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Uint8ToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u8Arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CHUNK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//arbitrary number&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u8Arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u8Arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;btoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_writeSessionData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;_writeSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// attach command to beginning of message&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// const data = Base64Util.uint8ArrayToBase64(output);&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Uint8ToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// return this._ble.write(BLEUUID.service, BLEUUID.txChar, data, &amp;#39;base64&amp;#39;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;hello&lt;/code&gt;被编码后的为&lt;code&gt;gWhlbGxv&lt;/code&gt;，发现和前头websocket捕获的一致:&lt;code&gt;gWhlbGxv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但base64应该是Scratch Link与scratch通信时的编解码方式，为了使用gatttool与micro:bit通信，我们需要猜测Scratch Linkmicro:bit里的固件是如何如何约定编解码的，关于这点，官方采取了闭源的策略，估计是有意为之，我们稍后来hack它&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hello&lt;/code&gt; 被编码后分别为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gWhlbGxv //base64
Uint8Array(6) [129, 104, 101, 108, 108, 111]  //Uint8Array
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试着以几种方式将他们转为16进制，都没有成功在micro:bit中显示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;char-write-cmd 0x0018  xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;!--
const resetEnergyExpended = new Uint8Array([1]);
    // resetEnergyExpended 的值是'1'，表示重置
    return characteristic.writeValue(resetEnergyExpended);

    是啥 会变为16进制吗

function buf2hex(buffer) { // buffer is an ArrayBuffer
  return Array.prototype.map.call(new Uint8Array(buffer), x =&gt; ('00' + x.toString(16)).slice(-2)).join('');
}

// EXAMPLE:
const buffer = new Uint8Array([129, 97]).buffer;
console.log(buf2hex(buffer)); // = 8161
--&gt;

&lt;p&gt;这导致我们需要使用一些嗅探工具抓包(BLE Sniffer)，之后用&lt;a href="https://www.wireshark.org/download.html"&gt;wireshark&lt;/a&gt;来分析，不过我手边暂时没有相应硬件，准备淘宝上买一个&lt;/p&gt;
&lt;p&gt;破解纯粹出于好玩，我们理解了官方的思路之后，自己重写一个micro:bit固件和是适配器也许比破解来得简单.使用makecode可以很轻松把gatt服务都搭了出来, 参考:&lt;a href="https://github.com/jaafreitas/scratch-microbit-extension/tree/master/firmware"&gt;scratch-microbit-extension&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;---2018年8月2号更新---&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我昨晚回去路上一致在想如何在没买到嗅探工具之前，进行破解，网购到货得几天，路上想到几个策略，洗澡的时候又想到几个策略，兴奋不易，可惜晚上没带电脑和树莓派回去，没法做实验&lt;/p&gt;
&lt;p&gt;我想到的策略有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察micro:bit ble 的extension是如何将Uint8Array数据write到txChar，这个extension不包含Scratch Link，源码都在js中，所以即便加密，策略也可以被看出，而micro:bit固件不太可能重写，如果弄清楚micro:bit ble 的extension的机制，估计就能hack官方的机制&lt;/li&gt;
&lt;li&gt;使用树莓派伪装成micro:bit，从js可以可以看出，只要能自定义service uuid就可以骗过官方插件，于是引诱它将数据写入树莓派中，如果有加密，有了加密前后的数据，就可以猜测加密的规则。但这样做的一个风险是Scratch Link可能会检验sensor数据的合法性（我在scratch3-adapter中就考虑了这个机制），如果不合法，可能会断开连接。当然这些需要做实验才知道&lt;/li&gt;
&lt;li&gt;等待官方完成wedo2的插件，由于它们共用Scratch Link，如果有加密，加密的机制很可能被抽象得一样，而wedo2已经被破解了，所以可以逆向分析出micro:bit部分的加密方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今早一来试了下第一条猜想就成功了，事实证明我想多了，官方并没有做加密&lt;/p&gt;
&lt;p&gt;我们来看看在micro:bit ble extension中，官方是如何发送display text数据的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BLECommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;txChar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;connected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gui.menuBar.bluetoothIndicator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greenIndicatorIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;disconnected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gui.menuBar.bluetoothIndicator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orangeIndicatorIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出官方啥也没做: &lt;code&gt;txChar.writeValue(event.data.buffer);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们从简单的字符串分析入手，先试试&lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;websocket显示从前端发往Scratch Link的是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serviceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;61445&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characteristicId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5261da02-fa7e-42ab-850b-7c80220097cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gWE=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在前端被编码后结果分别为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gWE= //base64
Uint8Array(2) [129, 97]  //Uint8Array
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们只需要把buffer转为hex就行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;buf2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// buffer is an ArrayBuffer&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// EXAMPLE:&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;129&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// display a -&amp;gt; [129, 97]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buf2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// = 8161&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在树莓派的gatttool中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-write-cmd 0x0018 8161
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbit_scratch_2de5e6c9.png" width=500 /&gt;&lt;/p&gt;
&lt;p&gt;大功告成！&lt;/p&gt;
&lt;!--
read和write都是sendRemoteRequest 到 scratch link，关注语义，所以在scratch link中只需要关注read write！使用jsonrpc确实更合适，比消息简单--&gt;

&lt;h1&gt;tips&lt;/h1&gt;
&lt;p&gt;记录一些scratch团队的机智做法&lt;/p&gt;
&lt;h3&gt;连接设备&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L116"&gt;startDeviceScan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户选中extesion之后开始连接，只扫描出extension对应的设备，而不是把周围的BLE都扫描出来，体验十分友好&lt;/p&gt;
&lt;h3&gt;https校验问题&lt;/h3&gt;
&lt;p&gt;由于网站都逐渐过渡到https，而Scratch Link是个本地websocker server，要让Scratch Link与浏览器通信，需要使用wss协议。而本地websocker server采用openssl本地自生成的证书的话，浏览器要让用户在一个新页面里点击高级设置才行，体验很不友好&lt;/p&gt;
&lt;p&gt;scratch团队的解决方案十分聪明, 让&lt;code&gt;device-manager.scratch.mit.edu&lt;/code&gt;这个域名指向&lt;code&gt;127.0.0.1&lt;/code&gt;，websocker server就可以使用这个域名的证书。&lt;/p&gt;
&lt;h4&gt;Scratch Link的内部服务怎么写&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/io/bleSession.js#L3"&gt;ScratchLinkWebSocket&lt;/a&gt;对应的server为&lt;code&gt;'wss://device-manager.scratch.mit.edu:20110/scratch/ble'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;BLESession的定位是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A BLE device session object.  It handles connecting, over web sockets, to BLE devices, and reading and writing data to them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看去是透明代理&lt;/p&gt;
&lt;p&gt;所以根据js的接口，要独立实现Scratch Link应该不难&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/microbit"&gt;scratch.mit.edu/microbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/conference"&gt;conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html"&gt;Bluetooth Developer Studio Level 3 Profile Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cn0xroot.com/2016/06/12/ble-hacking%EF%BC%9Able-scan-and-sniffer-withubertooth-one/"&gt;BLE Hacking：使用Ubertooth one扫描嗅探低功耗蓝牙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://draapho.github.io/2016/11/15/1616-python-ble/"&gt;使用python实现BLE通讯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/peplin/pygatt"&gt;pygatt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-01:scratch3-microbit-analysis.html</guid><category>scratch</category></item><item><title>scratch社区一览</title><link>/scratch-community-analyze.html</link><description>&lt;p&gt;&lt;img alt="主页" src="http://wwj-fig-bed.just4fun.site/scratch_c_4915ab49.png" width=600 /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;维基百科的&lt;code&gt;scratch&lt;/code&gt;词条里提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scratch 设立了一个线上社群，其口号为“想像･程序･分享”，分享和创意是 Scratch 最重要的理念...线上社群中有不同类型的项目，范围包括游戏、动画、演示稿和聊天机器人。所有项目都以知识共享的特许方式发布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;scratch社区是目前编程领域最庞大也最为活跃的社区之一，在少儿编程领域，更是一骑绝尘&lt;/p&gt;
&lt;p&gt;本文将对scratch社区做一番介绍，带领大家一览社区风采；同时我们也关心scratch社区的一些量化数据，并据此做一些解读和分析&lt;/p&gt;
&lt;p&gt;本文不是一篇scratch入门教程，入门引导可以参考&lt;a href="https://scratch.mit.edu/projects/236614170/#editor"&gt;开始使用 Scratch&lt;/a&gt;。 如果你对scratch的诞生和背后故事感兴趣，可以参考:&lt;a href="https://blog.just4fun.site/scratch.html"&gt; Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;!--作为《少儿编程指北》的第一篇文章--&gt;

&lt;h1&gt;走进scratch社区&lt;/h1&gt;
&lt;p&gt;MIT媒体实验室(&lt;a href="https://www.media.mit.edu/"&gt;Media Lab&lt;/a&gt;)主任&lt;a href="https://zh.wikipedia.org/zh-hans/%E4%BC%8A%E8%97%A4%E7%A9%B0%E4%B8%80"&gt;伊藤穰一&lt;/a&gt;在《爆裂》一书里提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个软件大受欢迎背后的真正原因是：一个全球范围的孩子社区，他们在其中分享建议、评论，同时支持Scratch的一项特殊功能——合成（Remix），即他们作品背后的源代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;scratch社区准则&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;scratch社区的繁荣离不开&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;scratch社区准则&lt;/a&gt;，正如一个国家的繁荣离不开它的法律保障，也正是如此，&lt;a href="https://zh.wikipedia.org/zh/%E6%A2%AD%E4%BC%A6"&gt;梭伦&lt;/a&gt;作为立法者，为雅典人民所铭记&lt;/p&gt;
&lt;p&gt;我们来看看scratch社区有哪些&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;准则&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我们需要彼此协助，才能让 Scratch 成为一个友善与富创造力的社区，我们欢迎不同背景与兴趣的人加入。

要有礼貌。
在分享项目或是发表评论时，请考虑到观看的人们遍布各个年龄层、来自不同生活背景。

我们富有建设性。
在别人的项目上发表时，说说你喜欢这个项目的原因，也给予一些建议。

共享
您可以自由的改编，像是构想、图案…任何 Scratch 项目中找到的东西都可以。不过，要记得尊重并感谢别人，你分享的项目也有可能会有被改编的时候。

将个人信息设为不公开。
基于安全性，请不要提供任何可用于私人通信的信息，例如真实姓名、电话、住址、信箱、社交媒体账号、或是聊天网站。

要有诚信。
不要冒充其他 Scratcher，或是随意散播谣言，甚至做欺骗整个社区的事情。

我们帮助维护站点的友好性。
如果你认为项目或评论的内容不恰当，像是过于血腥、暴力、色情，你可以点击「检举」按钮让我们处理。

任何人都可使用 Scratch，不分性别、年龄、种族、信仰和能力。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些准则写得十分富有智慧，保障了社区活跃而友好的气氛&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/"&gt;社区主页&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;scratch&lt;a href="https://scratch.mit.edu/"&gt;社区主页&lt;/a&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="主页" src="http://wwj-fig-bed.just4fun.site/scratch_c_4915ab49.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;以下是我登陆之后，所看到的内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正在发生的事？ : 显示了Scratchers最近的活动&lt;/li&gt;
&lt;li&gt;Scratch新闻 : Scratch团队在这里发布短消息&lt;/li&gt;
&lt;li&gt;精选项目:  Scratch团队所喜欢的项目&lt;/li&gt;
&lt;li&gt;特色工作室: 由Scratch团队挑选出的工作室&lt;/li&gt;
&lt;li&gt;PillowySleep挑选的项目:  由&lt;a href="https://en.scratch-wiki.info/wiki/Curator_(front_page)"&gt;策展人&lt;/a&gt;整理的项目，策展人有期任期&lt;/li&gt;
&lt;li&gt;Scratch设计室 - From Dusk 'Till Dawn:  随机显示当前Scratch Design Studio中的一些项目&lt;/li&gt;
&lt;li&gt;关注的工作室的项目:  与当前登录用户有关&lt;/li&gt;
&lt;li&gt;大家在改编的项目:  显示过去十天内被改编(Remix)最多的项目&lt;/li&gt;
&lt;li&gt;大家在赞的项目:  显示了过去十天中最受欢迎的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://scratch.mit.edu/explore/projects/all"&gt;发现页&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;主页给用户推可送Ta可能感兴趣的项目(有点feed流的意味)，如果用户意犹未尽，可以进入&lt;a href="https://scratch.mit.edu/explore/projects/all"&gt;发现页&lt;/a&gt;去探索海量的社区作品，截止到今天(2018.07.18)，scratch社区里一共有&lt;code&gt;2930万&lt;/code&gt;用户分享了&lt;code&gt;3275万&lt;/code&gt;个项目。稍后我们将结合scratch的后台运营数据，做一些有趣的分析。&lt;/p&gt;
&lt;p&gt;发现页包含七个标签:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部&lt;/li&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;li&gt;艺术&lt;/li&gt;
&lt;li&gt;游戏&lt;/li&gt;
&lt;li&gt;音乐&lt;/li&gt;
&lt;li&gt;故事&lt;/li&gt;
&lt;li&gt;教程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以选择标签查看对应分类的项目。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://scratch.mit.edu/explore/projects/all"&gt;发现页&lt;/a&gt;鼓励你去发现有趣的&lt;a href="https://scratch.mit.edu/explore/projects/all/"&gt;项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="projects" src="http://wwj-fig-bed.just4fun.site/scratch_c_c4943467.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;我们之前用Python写了个&lt;a href="https://zh.wikipedia.org/zh-hans/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2"&gt;爬虫&lt;/a&gt;，爬取了&lt;a href="https://scratch.mit.edu/explore/projects/all/"&gt;项目&lt;/a&gt;每个标签下前9000个最流行的项目，共计5万余个。之后使用python对这些数据做了简单的分析和数据可视化，发现不少有趣的东西，这部分之后有机会单独写一篇文章来讨论&lt;/p&gt;
&lt;p&gt;发现页也鼓励你去寻找有趣的&lt;a href="https://scratch.mit.edu/explore/studios/all/"&gt;工作室&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_c_1d42cc6d.png " width=600 /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Studio"&gt;工作室&lt;/a&gt;可以将多个项目汇集在一起(可以视为一个收藏夹)。在Scratch 2.0之前，被称为galleries。大多数工作室都有一个特定的项目主题，诸如&lt;a href="https://scratch.mit.edu/studios/5047558/"&gt;Scratch Day Celebrations!&lt;/a&gt;汇集了Scratch Day庆祝活动相关的项目；而&lt;a href="https://scratch.mit.edu/studios/4982024/"&gt;Earth Day 2018&lt;/a&gt;汇集了2018地球日相关的项目:&lt;/p&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_studio_21efe52b.png" width=600 /&gt;&lt;/p&gt;
&lt;!--
主题
    介绍以及如何使用这个社区
    不讨论如何使用scratch

内举不避亲 adapter

scratch社区是目前，少儿编程社区

--&gt;

&lt;h1&gt;社区的运营数据&lt;/h1&gt;
&lt;p&gt;简单介绍完社区，接着让我们根据scratch的&lt;a href="https://scratch.mit.edu/statistics/"&gt;后台运营数据&lt;/a&gt;，来对社区做个定量的了解。scratch团队公开了他们十多年来的运营数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:  数据采集的时间为本文写作时间: 2018.07.18&lt;/p&gt;
&lt;!--

https://scratch.mit.edu/statistics/data/monthly/
    age_distribution_data
    使用jupyter做些分析
        requests拿到json
--&gt;

&lt;h3&gt;统计概览&lt;/h3&gt;
&lt;p&gt;scratch社区包含:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3275万 个分享项目&lt;/li&gt;
&lt;li&gt;2931万 名注册用户&lt;/li&gt;
&lt;li&gt;1亿6259万 条评论&lt;/li&gt;
&lt;li&gt;467万 个工作室&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2018年6月份网站流量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2亿5410万 页面浏览次数&lt;/li&gt;
&lt;li&gt;4652万 网站访问次数&lt;/li&gt;
&lt;li&gt;2343万 访客人数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scratch社区不愧是曾拖垮MIT学校内网的项目 :）&lt;/p&gt;
&lt;h3&gt;月活动趋势&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_data_08b8c476.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，2018年5月份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增项目 115万&lt;/li&gt;
&lt;li&gt;新增用户 113万&lt;/li&gt;
&lt;li&gt;新增评论 378万&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从新增评论数可以看出，社区非常活跃&lt;/p&gt;
&lt;p&gt;新增项目、新增用户、新增评论三条曲线几乎保持同步，这也在情理之中&lt;/p&gt;
&lt;p&gt;从图中我们还可看出，2013.05对社区来说是个关键节点，从这个时间节点之后，社区用户迅速增长。我暂时还不清楚2013年的夏天scratch团队如何如此有力地推动社区的发展，了解这段历史的小伙伴欢迎来补充。&lt;/p&gt;
&lt;h3&gt;月活跃用户&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_data_a256ba33.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从图中发现有个现象很有趣，每年的5-8月份，社区活跃度开始下降，8月份之后才开始回升&lt;/p&gt;
&lt;p&gt;我们综合社区发布的所有数据来推测一下原因: 从scratch社区用户空间分布我们得知，社区用户主体在美国(46.14%),接近总体用户的一半;  从用户年龄分布我们得知，80%以上的用户处于k12阶段(下文有详细数字)，接着查阅美国的中小学学期表，我们发现，美国中小学从5月下旬开始陆续放假，到9月份开学(和中国类似)。由此我猜测，美国学生多数在假期里放下了学习。想来是没什么scratch暑期补习班的&lt;/p&gt;
&lt;p&gt;这个现象可能给美国面向K12的编程教育公司的启示是:  暑假期间不宜做活动和宣传，用户参与度不高&lt;/p&gt;
&lt;h3&gt;用户年龄分布&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_data_997edfe4.png" width=600 /&gt;&lt;/p&gt;
&lt;!--写个server 查询区间人数--&gt;

&lt;p&gt;用户数随年龄的分布呈钟形曲线&lt;/p&gt;
&lt;p&gt;我在jupyter中用Python拿到原始数据之后，做了些简单的数据分析，发现不少有趣的信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社区里，12岁用户人群最大，有301.8万，占总用户数的11.1%&lt;/li&gt;
&lt;li&gt;K–12(从幼儿园（Kindergarten，通常5-6岁）到十二年级（grade 12，通常17-18岁）)用户人群是scratch社区的主体，人数为2220.8万，占总人数的81.7%&lt;/li&gt;
&lt;li&gt;scratch宣称主要为8-16的孩子设计。从数据中我们看到，这个人群的数量为1841万,比例占全体的67.7%&lt;/li&gt;
&lt;li&gt;8岁以下的低龄用户达124万。随着为低龄化用户设计的scratchjr的流行，低龄用户比例应该还会降低。&lt;/li&gt;
&lt;li&gt;从图中，我们看到18岁用户人数很突兀，按照钟形曲线的趋势，18岁用户人群数，应该在90万左右，但实际人数竟达到了204万,2倍不只于预期人数。我对美国的教育不大了解，此中原因我还猜不出&lt;/li&gt;
&lt;li&gt;18岁以上的成年用户，有695万，超过总人数的四分之一，由此可见，scratch远不只是少儿编程社区&lt;/li&gt;
&lt;li&gt;社区用户年龄的中位数为14岁。社区用户的平均年龄为16.3岁&lt;/li&gt;
&lt;li&gt;令人震惊的是，年龄60岁以上的用户竟也有16万！不禁令人想到scratch之父在&lt;a href="blob:https://embed.ted.com/607e7bc6-7a0d-4a69-8463-dc45bcfa8462"&gt;Learn to Code, Code to Learn&lt;/a&gt;中提到，他年迈的老母亲在他生日的时候，用scratch制作了一张电子贺卡送给他&lt;/li&gt;
&lt;li&gt;80岁用户有2473人！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用户空间分布&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_data_014a18d3.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，社区用户主体在美国(46.14%),接近总体用户的一半。&lt;/p&gt;
&lt;p&gt;中国用户数为31.6万，占社区用户的1.09%&lt;/p&gt;
&lt;p&gt;根据我所了解的一些信息，我猜测国内使用scratch的用户不只十倍于这个数量，他们没有进入scratch社区可能的原因有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国内网络访问社区不流畅&lt;/li&gt;
&lt;li&gt;使用scratch的离线版本&lt;/li&gt;
&lt;li&gt;用户被分流到国内不同平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;每月项目分享情况&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_data_b58c596d.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从图中我们可以看出，新增的改编(Remix)项目 略多于 新增白板项目 的1/3，社区成员积极地利用社区已有项目来开展自己的工作，我觉得这是个很好的现象。&lt;/p&gt;
&lt;p&gt;但这个比例不算太高，远低于github社区里的代码重用率，github社区成员重用了社区里80%以上的代码（2017年数据）。其中的原因有很多，它向我们揭示了scratch社区的一些不足，也给我们指明了改进scratch社区的一些方向: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何让用户更容易找到与它们目标相关的项目，以便于他们能在他人工作的基础上开始新的编程。&lt;/li&gt;
&lt;li&gt;如何更方便地重用代码，目前只有Remix一条策略，积木化代码难以片段式地复制和重用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我想到一些改进的思路和策略，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入自然语言分析、图像识别以及增强推荐系统来解决第一个问题&lt;/li&gt;
&lt;li&gt;引入代码片段的收藏机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们之后会构建一个面向国内用户的scratch社区，会在那儿实践这些想法&lt;/p&gt;
&lt;h3&gt;每月评论&lt;/h3&gt;
&lt;p&gt;&lt;img alt="studio" src="http://wwj-fig-bed.just4fun.site/scratch_data_aba5d56e.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;从数据我们可以看出，社区成员之间的交流十分广泛，远不止限于讨论项目，而是深度参与其中。&lt;/p&gt;
&lt;!--
### all
https://api.scratch.mit.edu/explore/projects?limit=16&amp;offset=0&amp;language=en&amp;mode=trending&amp;q=*

### games
https://api.scratch.mit.edu/explore/projects?limit=16&amp;offset=0&amp;language=en&amp;mode=trending&amp;q=games

### popular and games
https://api.scratch.mit.edu/explore/projects?limit=16&amp;offset=0&amp;language=en&amp;mode=popular&amp;q=games

词云

---

看一下对github的分析  可视化

看不同的图表

看一个典型数据
--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/K%E2%80%9312"&gt;K–12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/Scratch"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/"&gt;scratch.mit.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.scratch.mit.edu/"&gt;Scratch Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/community_guidelines"&gt;Scratch Community Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/whiplash.html"&gt;读书摘记 爆裂&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Front_Page"&gt;scratch-wiki Front Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Studio"&gt;scratch-wiki Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/Explore"&gt;scratch-wiki Explore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20690652"&gt;什么叫feed流？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2"&gt;网络爬虫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/statistics/"&gt;scratch statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/studios/4982024/"&gt;Earth Day 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/studios/5047558/"&gt;Scratch Day Celebrations!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--    
爆裂中关于社区的讨论：
    *  由权威向“涌现”的转变中，另外一个重要因素便是免费和便宜的在线教育和社区教育的普及。这不仅包括edX等正式课程，也包括可汗学院（Khan Academy）等教育网站、创客空间（hackerspaces）的实践课、通过网络开展的或面对面的非正式同伴辅导等。人们学习新技能的机会越多，创新能力就越强
    *  弱连接——连接点头之交和朋友的朋友——在连接社区和创造陌生人之间的信任和联系方面有巨大的潜力。因此，具有广泛弱连接的人有更多机会从他们的人际关系网络中获取资源。正如马尔康姆·格拉德维尔（Malcolm Gladwell）指出的，我们的点头之交是我们获取新想法和资讯的最大来源。
    *  扎克发现了这个软件大受欢迎背后的真正原因：一个全球范围的孩子社区，他们在其中分享建议、评论，同时支持Scratch的一项特殊功能——合成（Remix），即他们作品背后的源代码。
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-18:scratch-community-analyze.html</guid><category>scratch</category></item><item><title>两种硬件编程风格的比较</title><link>/Hardware-Programming-style.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/message_a34afc78.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人的心智活动透过简单的概念而发挥它的力量，方法主要可分为三种：第一，把数个简单的概念组合成一个复合的概念，于是所有复杂的概念成焉。第二，将两个概念，不论简单或复杂，不将它们结合，而是同时并列在一起观察，如此就能得知何为相互关联。第三，把某些概念，与伴随它们其他真实存在的概念区隔出来，称为这抽象艺术化，所有一般化，概化的概念皆是由此而生  - 约翰·洛克《人类理解论》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="https://blog.just4fun.site/scratch3-microbit.html"&gt;scratch3.0 + micro:bit&lt;/a&gt;中，我们提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在少儿编程/硬件编程教育领域，硬件编程有两种风格，我将这两种风格分别称为&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我相信就编程教育而言，&lt;code&gt;交互式&lt;/code&gt;优于&lt;code&gt;灌入式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这篇文章我们将讨论这两种编程风格给学习者的编程体验 以及心理状态所带来的影响。所谈论的很多内容，在编程语言的发展历史中都被反复讨论过。&lt;/p&gt;
&lt;p&gt;本文中，我们只讨论图形化硬件编程，但得出的结论并不局限于此&lt;/p&gt;
&lt;h3&gt;灌入式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;灌入式&lt;/code&gt;阵营有名的图形化项目包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/makecode"&gt;makecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;PythonEditor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mixly.org/"&gt;mixly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以及国内大多数项目(makeblock、mcookie...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，几乎所有传统的硬件编程都是灌入式的&lt;/p&gt;
&lt;h5&gt;编程方式&lt;/h5&gt;
&lt;p&gt;我们以&lt;a href="https://pxt.microbit.org/"&gt;makecode microbit&lt;/a&gt;为例，来展示灌入式编程的编程方式.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbit_gr_de9399e6.png" width=500 /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://pxt.microbit.org/"&gt;makecode microbit&lt;/a&gt;中，通过拖拽积木，拼搭出我们的程序，接着将程序下载到本地（程序在线上完成编译），最后将下载的文件拖入micro:bit，即可运行。&lt;/p&gt;
&lt;p&gt;将代码/固件灌入硬件中，代码(代码编译出的固件)将在硬件运行。我将这种编程风格称为&lt;code&gt;灌入式&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你熟悉blockly,你会发现这是一种典型的blockly风格(当然，blockly也可以写出交互式风格的blockly app)&lt;/p&gt;
&lt;h3&gt;交互式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;阵营的图形化编程项目有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;Cozmo code lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/PicoBoard"&gt;scratch Picoboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s4a.cat/"&gt;S4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit/"&gt;scratch microbit extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;编程方式&lt;/h5&gt;
&lt;p&gt;我们以&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;为例，来展示&lt;code&gt;交互式&lt;/code&gt;编程的编程方式.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmof70f49bd.png" /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;中，你同样身处积木化的编程界面里，通过拖拽积木，拼搭出所需的程序，点击运行，cozmo即可按照程序的逻辑运行。&lt;/p&gt;
&lt;p&gt;程序运行在ipad/手机上，每个积木在实际执行的时候，将消息发给cozmo，从而控制cozmo，这是我将这种风格程序成为&lt;code&gt;交互式&lt;/code&gt;的原因&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;中一个非常惊艳的编程体验是:如果你不知道一个积木有什么作用，你不必去翻说明书，你只需要点击一下这个积木，cozmo立马执行这个积木的逻辑，你可以直观地理解陌生的积木。交互式编程所具有的及时反馈特性，鼓励学习者去探索。这是交互式编程给学习者心理上带来的影响之一。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%BB%BA%E6%A7%8B%E4%B8%BB%E7%BE%A9_(%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96)"&gt;建构主义&lt;/a&gt;者(如皮亚杰、艾伦凯、派普特)应该会喜欢这种风格&lt;/p&gt;
&lt;p&gt;如果你熟悉scratch，你会发现这是一种典型的&lt;code&gt;scratch&lt;/code&gt;风格（对象响应消息，很&lt;a href="https://zh.wikipedia.org/zh-hans/Smalltalk"&gt;Smalltalk&lt;/a&gt;）。关于scratch风格和blockly风格的比较可以参考我之前的文章:&lt;a href="https://blog.just4fun.site/scratch3-blockly.html"&gt;Blockly与Scratch3.0的比较分析及选型建议&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;对比分析&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;真理越辩越明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--
我很喜欢柏拉图《对话录》里苏格拉底对战普罗塔戈拉那一卷

工程师小普和小苏分别拥护`灌入式`和`交互式`，他们决定cosplay苏格拉底对战普罗塔戈拉来一场辩论

小苏:  好久不见啊小普，近来忙些什么

小普:  
--&gt;

&lt;p&gt;在此我们来对比分析一下&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;各自的优势&lt;/p&gt;
&lt;p&gt;灌入式阵营可能列出的优势有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灌入式可以离线运行，只需要将代码烧入进去，即可脱离编程工具&lt;/li&gt;
&lt;li&gt;灌入式将带来优于交互式的实时性&lt;/li&gt;
&lt;li&gt;灌入式因为需要generate代码，学生可以查看代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果有遗漏，欢迎拥护&lt;code&gt;灌入式&lt;/code&gt;编程的小伙伴来信(wuwenjie718@gmail.com)补充&lt;/p&gt;
&lt;p&gt;由于我拥护&lt;code&gt;交互式&lt;/code&gt;编程，所以我准备在下文里，反驳&lt;code&gt;灌入式&lt;/code&gt;的优势，并指出&lt;code&gt;交互式&lt;/code&gt;所具有的优势。如果你不赞同，欢迎来信反驳，观点合理的话，我会及时更新到本文，如有必要，我们也可以使用&lt;a href="https://www.kialo.com/"&gt;理性辩论的平台 Kialo&lt;/a&gt;来进行辩论&lt;/p&gt;
&lt;h3&gt;反驳灌入式的优势&lt;/h3&gt;
&lt;p&gt;我们针对上边&lt;code&gt;灌入式&lt;/code&gt;阵营提出的三条优势，逐条反驳&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灌入式可以离线运行，只需要将代码烧入进去，即可脱离编程工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个论述本身并没有需要反驳的地方，它只是陈述了一个事实，在此我想提出的是，对于教育而言，&lt;code&gt;离线运行&lt;/code&gt;不是很重要的特性，如果是工业级的项目或者解决具体问题的硬件产品，离线运行可能是重要的，但对于教育项目而言，我认为这个特性并不重要，如果你实在不愿意一直开着电脑，你可以把上位机运行在树莓派里，若嫌贵，可以使用荔枝派(只要9块9哦)。但需要提醒的是，为了得到&lt;code&gt;离线运行&lt;/code&gt;的特性，我们很可能会失去交互性(这个问题不是很好讨论，如果需要,我们之后专门来说说这两个特性在什么情况可能冲突，而不可兼得)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灌入式将带来优于交互式的实时性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和上一条观点一样，我认为&lt;code&gt;实时性&lt;/code&gt;在编程教育中并不重要。我将&lt;code&gt;离线运行&lt;/code&gt;和&lt;code&gt;实时性&lt;/code&gt;视为一种对机器性能的优化，前者节约资源、后者节约时间，但这种节约下来的时间，短得也许人类不能感知。我承认在一些竞技类的比赛中，&lt;code&gt;实时性&lt;/code&gt;是至关重要的，但在教育中，尤其是低龄化编程教育中，被教育者是这件事的核心，我认为这些特性并不重要，尤其是考虑到这些特性可能和交互性冲突&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灌入式因为需要generate代码，学生可以查看代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给用户呈现积木所对应的代码，是个帮助用户从图形化过度到文本编程的好办法. 但generate代码这件事并不限于&lt;code&gt;灌入式&lt;/code&gt;,&lt;code&gt;交互式&lt;/code&gt;的编程界面里，虽然你并不需要generate代码，但如果愿意，完全可以为每个积木生成对应的代码，而且可以是&lt;code&gt;任何语言，任何抽象粒度&lt;/code&gt;。&lt;code&gt;灌入式&lt;/code&gt;阵营的小伙伴可能会反驳说，你们generate的代码并不是真正用于运行的。我会回答说: 对，我恰恰认为，不该把真正执行的代码generate出来给用户看。积木之所以是个好工具，正是因为它能自如地隐藏复杂度，暴露出合适粒度的概念颗粒，积木并不只是帮助我们省去记忆语法规则，更重要的是，它允许我们根据学生所处的阶段，给予他不同抽象程度的积木。我很喜欢来自lisp社区的忠告:&lt;code&gt;表达你的意图，而不是操作过程，这样有助于我们能站在更高的抽象层面上&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于这一点，&lt;a href="code.org"&gt;code.org&lt;/a&gt;给了我们很好的示范，一个学习者，在&lt;a href="code.org"&gt;code.org&lt;/a&gt;里在拖拽了两个积木之后，他看到页面里愤怒的小鸟往东飞一步，接着又往北飞一步，最后成功击中了小猪。&lt;/p&gt;
&lt;p&gt;如果学习者愿意，他可以看看与积木等价的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/codeorg_9b3de524.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;我们看到，这些代码隐藏了很多实现的细节，你也许要抱怨说code.org在欺骗学习者，这并不是真正运行的代码，&lt;code&gt;真正的代码&lt;/code&gt;是由js在操控svg的元素，但你确定你要给出这个粒度的东西吗？&lt;code&gt;真正的代码&lt;/code&gt;也许是一串&lt;code&gt;001101101...&lt;/code&gt;. 我认为平台给出合适抽象粒度的积木在编程教育里是至关重要的&lt;/p&gt;
&lt;p&gt;就这点而言，目前很多灌入式的图形化编程并不适合编程教育，尤其不适合少儿编程，他们直接把驱动硬件代码包装到积木下就了事了，积木颗粒在抽象程度上与硬件文本编程无异。如何设计出合适抽象粒度的积木块，不是个简单的问题，我认为这块的从业者都该多看看cozmo和makecode&lt;/p&gt;
&lt;h3&gt;交互式的优势&lt;/h3&gt;
&lt;p&gt;反驳完灌入式的优势，接着我们来谈谈&lt;code&gt;交互式&lt;/code&gt;的优势何在，我先简单列出，之后逐条陈述&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;及时的反馈&lt;/li&gt;
&lt;li&gt;允许单步调试&lt;/li&gt;
&lt;li&gt;软件编程和硬件编程，不必区分，虚拟人物与现实硬件能彼此联动&lt;/li&gt;
&lt;li&gt;强大的可扩展性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;罗列完&lt;code&gt;交互式&lt;/code&gt;的优势后，我们来逐条陈述它们.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;及时的反馈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为这一条，对编程教育是至关重要的。&lt;/p&gt;
&lt;p&gt;我们从&lt;code&gt;REPL&lt;/code&gt;（Read-Eval-Print-Loop）说起，&lt;a href="https://zh.wikipedia.org/wiki/LISP"&gt;LISP&lt;/a&gt;最早为我们带来&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF"&gt;REPL&lt;/a&gt;。REPL是个交互式的编程环境，用户输入的表达式及时被求值运行，并输出，这对于学习一门新的编程语言有很大的帮助，因为它能立刻对初学者做出回应，所以这个概念被移植到很多编程语言环境里（Python, Scala , Java(since jdk-9)...）。这种交互式的编程环境使得探索性的编程和调试更加便捷，因为“读取-求值-输出”循环通常会比经典的“编辑-编译-运行-调试”模式要更快，这两者的差异很像&lt;code&gt;交互式&lt;/code&gt;和&lt;code&gt;灌入式&lt;/code&gt;的差异。我自己使用REPL的一个强烈感受是，在REPL环境中（如ipython），我更乐于探索，对于不懂的api，我会直接做个实验，看看效果，获得直观感受。REPL鼓励每个人在探索中成为自己知识的构建者。而这点正式是早期致力于推广少儿编程的先驱们(艾伦凯、派普特)所追求的&lt;/p&gt;
&lt;p&gt;我将硬件编程里的&lt;code&gt;交互式&lt;/code&gt;编程方式，视为一种硬件编程的&lt;code&gt;REPL&lt;/code&gt;。如同我在前头举例说的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;中一个非常惊艳的编程体验是:如果你不知道一个积木有什么作用，你不必去翻说明书，你只需要点击一下这个积木，cozmo立马执行这个积木的逻辑，你可以直观地理解陌生的积木。交互式编程所具有的及时反馈特性，鼓励学习者去探索系统。这是交互式编程给学习者心理上带来的影响之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对教学和平台而言，及时的反馈也能带来诸多好处，有了来自硬件的反馈信息，我们可以在平台中给出更多的提示信息，来指导学生修正错误，或者引导他抵达目标，目前国外社区已经有这块的试水者，我正在关注，之后有机会专门写一篇文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;允许单步调试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果学习者写了一段较为复杂的代码，运行时没有达到预期效果，人们往往无法通过阅读代码找出问题（错误往往揭示了知识或思维盲区），它需要逐行运行代码，看看效果，然后判断究竟是哪一步出了问题，这就是单步调试之所以如此重要的原因，即便对于专业程序员，也是如此。在&lt;code&gt;灌入式&lt;/code&gt;中我们无法做到单步调试，因为代码是一股脑灌入硬件的。但&lt;code&gt;交互式&lt;/code&gt;允许我们这样做，因为每次都是消息通信，所以编程界面可以逐步地给硬件发送控制指令。如果你观察过学生在code.org中通过单步调试找到问题，并顺利前行，你就知道这个特性有多棒&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件编程和硬件编程，不必区分，虚拟角色与现实硬件能彼此联动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在图形化编程这块，学习者很可能是先学了软件编程，通过闯关式的学习，利用积木控制虚拟角色来达到目标，在这个过程中掌握编程概念。&lt;code&gt;交互式&lt;/code&gt;硬件编程允许你把硬件也接入到这些web平台里。如此一来，无论是教学软件还是硬件，平台架构上将毫无差别，学生的编程体验也几乎没有差别。它们学习软件编程所积累的知识完全可以用于硬件部分。&lt;/p&gt;
&lt;p&gt;而在创作类平台中(比如scratch)，&lt;code&gt;交互式&lt;/code&gt;编程允许虚拟角色与物理硬件彼此沟通，你可以自由联通虚拟与现实世界，制作体感游戏和富有表现力的故事。这将为我们带来更高的&lt;code&gt;高天花板&lt;/code&gt;和更多的趣味性，从而点燃大家的热情&lt;/p&gt;
&lt;p&gt;关于这块的有趣例子可以参考:&lt;a href="https://scratch3-adapter-docs.just4fun.site/user_guide/gallery/"&gt;scratch3-adapter-docs gallery&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;强大的可扩展性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;还将为我们带来强大的可扩展性，&lt;a href="https://zh.wikipedia.org/zh-hans/ROS"&gt;ROS(Robot Operating System)&lt;/a&gt;和&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;是很好的两个例子。因为基于消息通信，各个部分彼此解耦，这些系统本质上是分布式的，你可以接入任何东西，在&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;中，硬件方面,我们已经接入了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/"&gt;micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.anki.com/en-us/cozmo"&gt;Cozmo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.sphero.com/products/bb-8-by-sphero"&gt;BB8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raspberrypi.org/"&gt;树莓派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-smart-home.html"&gt;智能家居&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI方面，我们接入了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/zh-cn/services/cognitive-services/"&gt;微软认知服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://js.tensorflow.org/"&gt;本地化的机器视觉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opencv.org/"&gt;opencv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pjreddie.com/darknet/yolo/"&gt;实时物体检测&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些简单的本地自然语言处理(移植了mit media lab的实验项目)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你愿意，你可以将小时候的玩具四驱车接入进来。&lt;/p&gt;
&lt;h1&gt;如何实现&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;everything is message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;天色已晚，明天要早起，这部分就不多写了，之后单独讨论&lt;/p&gt;
&lt;p&gt;如果你熟悉LISP,为了实现一个 LISP REPL，只需要实现read、eval、print三个函数和一个不停轮询的函数(loop)即可,一个基本的REPL可以用如下的简单形式表达：(loop (print (eval (read))))&lt;/p&gt;
&lt;p&gt;一旦你理解了这个概念，就可以自己动手去硬件上实现了。&lt;/p&gt;
&lt;p&gt;事实上，社区里的交互式项目(如S4A、snap4arduino、s4m)思路基本都是一样的&lt;/p&gt;
&lt;p&gt;我们自己动手实现了&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我把思考和构建&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;的过程都记录在博客里，如果你有兴趣，也可以根据我的架构设计，自己实现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-plugin-1.html"&gt;为Scratch3.0设计的插件系统(上篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-plugin-2.html"&gt;为Scratch3.0设计的插件系统(下篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter-docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然我更鼓励你加入我们，我们已经为开发者准备好了&lt;a href="https://scratch3-adapter-docs.just4fun.site/dev_guide/helloworld/"&gt;开发手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我私下认为&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;基于zeromq的实现也许是目前扩展性最好的，欢迎入坑 ：）&lt;/p&gt;
&lt;!--
### 可扩展性
ROS和adapter是个很好的例子，可以做出任意复杂的东西，

这背后的想法是，硬件只是更大系统的一部分  观察传感器的状态

你可以把利用云端的AI，利用本地的摄像头 来自不同的硬件 当温度30度时  人物说很热


这是一种，ROS的策略，adapter在架构上，很多地方模仿了ROS，关于这点，参考:[]()

在体验式，引导你尝试，而这是少儿编程的开创者们所鼓励的 在实践中去把我概念

当温度25度时 打开空调

# 为何交互式是更好的模式
学习硬件本身 还是利用硬件做出其他应用

我为何要知道串口式什么

就像我们教学python的时候，不会教学它的C实现  操作系统原理

adapter致力于将万物积木化，在adapter你可以让google的AI与小米的智能家居互动，这是scratch的思路

mixly则是一个blockly app，致力于映射，你可以将硬件抽象为积木

# microbit
用键盘控制micro:bit

使用消息  可以控制粒度

使用烧录，必须控制串口

总是能写出server代码的，但设计上 这块应该被抽象

--&gt;

&lt;h1&gt;补遗&lt;/h1&gt;
&lt;h3&gt;通讯补丁&lt;/h3&gt;
&lt;p&gt;灌入式编程在一定程度上，也可以实现&lt;code&gt;交互&lt;/code&gt;特性，一种策略是采用&lt;code&gt;通讯变量&lt;/code&gt;的概念, makeblock的mblock很好地利用了这点&lt;/p&gt;
&lt;p&gt;利用通讯变量，你可以让上下位机实现彼此沟通&lt;/p&gt;
&lt;p&gt;技术实现的话，也不会太难，在硬件里跑一个独立的通信进程就行，之后通过uart或其他通道与上位机沟通就行&lt;/p&gt;
&lt;p&gt;你最好将这种方式视为一种补丁，&lt;code&gt;通讯变量&lt;/code&gt;是一种补充策略，通过这种补丁，你无法做到&lt;code&gt;交互式&lt;/code&gt;的所有特性，但这依然不失为一种很聪明的做法&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Protocol"&gt;Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hintjens.com/blog:_unprotocols"&gt;unprotocols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/PicoBoard"&gt;PicoBoard&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sparkfun/PicoBoard"&gt;sparkfun/PicoBoard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raspberrypi.org/blog/scratch-2-raspberry-pi/"&gt;scratch-2-raspberry-pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s4a.cat/"&gt;S4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/24770930"&gt;Mixly，初学Arduino的最佳图形化编程工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/firmata/protocol"&gt;Firmata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://snap4arduino.rocks/"&gt;snap4arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nick.zoic.org/art/micropython-webusb/"&gt;MicroPython with WebUSB!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/software-development-at-1-hz-5530bb58fc0e"&gt;Software development at 1 Hz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web"&gt;Access USB Devices on the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wicg.github.io/webusb/"&gt;WebUSB API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF"&gt;读取﹣求值﹣输出循环(REPL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/LISP"&gt;LISP&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%BB%BA%E6%A7%8B%E4%B8%BB%E7%BE%A9_(%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96)"&gt;建构主义 (学习理论)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.feld.com/archives/2018/07/the-repl-for-hardware.html"&gt;The REPL For Hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-10:Hardware-Programming-style.html</guid><category>scratch</category></item><item><title>使用micro:bit自制PPT翻页笔</title><link>/microbit-ppt.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/ppt_f5a212e3.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Word的成功是形式对内容的胜利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近期偶尔到高校做些技术分享。我不喜欢写PPT，Word/PowerPoint是我最厌恶的几个软件，对Keynote也没有好感，没什么耐心在这些软件里点来点去&lt;/p&gt;
&lt;p&gt;但我并不排斥为讨论和演讲做些书面上的准备。如果可以专注在内容，以Markdown来写作，而不必分心到排版和样式这些事情上，写完演讲所需要的内容之后，PPT能自动从markdown文本中生成，那该多怯意&lt;/p&gt;
&lt;h1&gt;要有光&lt;/h1&gt;
&lt;p&gt;幸运的是，&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;允许我们这样做。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;是个令人振奋的项目，如果要挑选出我最喜欢的几个工具，&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;应该会排在前三&lt;/p&gt;
&lt;p&gt;如果你来自 生物科学/物理学/人工智能/数据分析/量化 社区，&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;可能已经在你的工具箱里了，如果你平时喜欢探索性的编码工作，那么你值得花一些时间上手&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;用jupyter写PPT&lt;/h3&gt;
&lt;p&gt;首先安装jupyterlab: &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;，jupyterLab是jupyter的下一代用户界面。安装完成之后，即可运行:&lt;code&gt;jupyter lab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitslide_3f5f1127.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;接着创建一个notebook，你就可以开始用Markdown写作PPT了&lt;/p&gt;
&lt;p&gt;你可以把每个cell视为一页PPT，使用markdown在其中写作或代码，就像写博客，写完之后，点击右边栏的&lt;code&gt;Cell Tools&lt;/code&gt;, 来设置cell&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitslides_47c7c5c3.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;每个cell可以设置为以下多种类型：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitslide_2dcbd1f4.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;写作完毕，选择导出为Slides:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitslide_18fe0a6e.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;导出文件为html，依赖于&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt;（没有使用CDN），所以你需要在导出文件的同级别目录放置&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt;（下载后解压即可）。&lt;/p&gt;
&lt;p&gt;之后打开下载的html文件，你就可以在浏览器里看到使用jupyter写的PPT了，你可以把它们称为web PPT，演示的时候将浏览器全屏即可。&lt;/p&gt;
&lt;h1&gt;翻页笔&lt;/h1&gt;
&lt;p&gt;PPT翻页笔大约长这样:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/ppt_c7c6b349.png" width=400 /&gt;&lt;/p&gt;
&lt;p&gt;你在台上演讲时，手握翻页笔，可以无线切换PPT，从而使PPT内容与你的演讲进度同步。&lt;/p&gt;
&lt;h3&gt;micro:bit PPT翻页笔&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://tech.microbit.org/docs/hardware/assets/microbit-overview.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;因为micro:bit中有蓝牙模块，所以我们可以利用micro:bit的蓝牙功能，来实现无线通讯；它还自带两个按钮，很适合用于制作翻页笔（前后翻页）&lt;/p&gt;
&lt;p&gt;制作过程十分简单:&lt;/p&gt;
&lt;p&gt;首先下载&lt;a href="https://raw.githubusercontent.com/wwj718/slide_microbit/master/FD18_NRF51_MICROBIT.hex"&gt;microbit固件&lt;/a&gt;到本地，然后拖拽到micro:bit中&lt;/p&gt;
&lt;p&gt;完成之后，micro:bit将对外提供&lt;a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy"&gt;ble&lt;/a&gt;按钮服务，之后我们利用&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;可以将浏览器，连上micro:bit，从而让micro:bit与js交互，而&lt;a href="https://revealjs.com/"&gt;reveal.js&lt;/a&gt;有js api， 这就是micro:bit PPT翻页笔的原理.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:注意: &lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;目前只支持macOS、chrome OS、安卓三个平台下的 Chrome浏览器,暂不支持Windows系统 &lt;/p&gt;
&lt;p&gt;这块所需的js代码，我已经写好的。在你写作PPT时，只需在jupyter lab的第一个cell里贴上如下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 连接micro:bit
*  打开电脑的蓝牙
*  点击右边的连接按钮

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ble_button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:blue&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;连接&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;microbit_ble.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后把&lt;a href="https://raw.githubusercontent.com/wwj718/slide_microbit/master/microbit_ble.js"&gt;microbit_ble.js&lt;/a&gt;下载到jupyter lab导出的slide同级目录即可&lt;/p&gt;
&lt;p&gt;听起来很绕的话，直接看&lt;a href="https://github.com/wwj718/slide_microbit"&gt;源代码&lt;/a&gt;可能更清楚&lt;/p&gt;
&lt;h3&gt;开始使用&lt;/h3&gt;
&lt;p&gt;打开导出的slide，点击连接，选择micro:bit&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitslide_0c59526e.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;至此，你就可以手握micro:bit开始你的演讲啦，使用电池供电，你就可以带着micro:bit在台上四处走啦&lt;/p&gt;
&lt;video width=300 src="http://p6ur0vhyj.bkt.clouddn.com/microbitslide.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;想象空间&lt;/h3&gt;
&lt;p&gt;如果你和我一样，是scratch和micro:bit的粉丝。你可以将microbit当作PPT翻页笔，而用scratch演示PPT。&lt;/p&gt;
&lt;p&gt;具体策略有很多，最有趣的一种是直接用scratch创作动态内容，而将micro:bit作为一种体感设备，如此一来，你可以与你的PPT进行富有表现里的互动。如果你愿意，你可以选择跳一跳切屏或摇一摇抽奖&lt;/p&gt;
&lt;p&gt;另一种策略，要简单一些，表现力也更弱，和传统PPT无异:将你的PPT转为&lt;code&gt;480x360&lt;/code&gt;的图片，之后将图片作为背景导入scratch即可。然后使用我在&lt;a href="https://blog.just4fun.site/scratch3-microbit.html"&gt;scratch3.0 + micro:bit&lt;/a&gt;所介绍的方法，将micro:bit与scratch3.0连起来&lt;/p&gt;
&lt;!--
形式与内容的分离

Word是内容与形式同时处理

Word是所见即所得


# 使用

日本的文章
官方接口

--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sspai.com/post/37340"&gt;反思Markdown：Markdown的长与短&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/slide_microbit"&gt;slide_microbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/document-factory-pandoc.html"&gt;文档格式转化神器pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://revealjs.com/"&gt;reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/microbit-notes.html"&gt;micro:bit使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-10:microbit-ppt.html</guid><category>microbit</category></item><item><title>scratch3.0 + micro:bit</title><link>/scratch3-microbit.html</link><description>&lt;p&gt;scratch官方称，在scratch3.0发布的时候会携带&lt;a href="https://medium.com/scratchteam-blog/3-things-to-know-about-scratch-3-0-18ee2f564278"&gt;micro:bit插件&lt;/a&gt;，这意味这你可以轻松将scratch延伸到物理世界。&lt;/p&gt;
&lt;h1&gt;两种硬件编程风格&lt;/h1&gt;
&lt;p&gt;在少儿编程/硬件编程教育领域，硬件编程有两种风格，我将这两种风格分别称为&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;scratch3.0为我们带来的micro:bit硬件编程，采用&lt;code&gt;交互式&lt;/code&gt;风格。&lt;/p&gt;
&lt;p&gt;我相信就少儿编程教育而言，&lt;code&gt;交互式&lt;/code&gt;远远优于&lt;code&gt;灌入式&lt;/code&gt;，我最近正在写一篇文章谈论这个话题(《两种硬件编程风格的比较》)&lt;/p&gt;
&lt;p&gt;我准备讨论这两种编程风格给学习者的编程体验 以及心理状态状态所带来的影响。所谈论的很多内容，在编程语言的发展历史中都被反复讨论过。&lt;/p&gt;
&lt;p&gt;下边我们来简单看看两个阵营都有哪些代表性项目。&lt;/p&gt;
&lt;p&gt;在硬件图形化编程项目中，&lt;code&gt;灌入式&lt;/code&gt;阵营有名的项目包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/makecode"&gt;makecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;PythonEditor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mixly.org/"&gt;mixly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以及国内大多数的其他项目(makeblock、mcookie...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，所有传统的硬件编程都是灌入式的，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;阵营的项目有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;Cozmo code lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/PicoBoard"&gt;scratch Picoboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s4a.cat/"&gt;S4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;阵营近期还将迎来下边两个项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit/"&gt;scratch microbit extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.media.mit.edu/projects/scratch-pad/overview/"&gt;ScratchBit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你尝试过&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;Cozmo code lab&lt;/a&gt;的编程体验，你就知道&lt;code&gt;交互式&lt;/code&gt;可以做到何等优秀。Cozmo几乎在任何方面都一骑绝尘。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;带来截然不同的编程体验，对此有兴趣的同学，可以等我&lt;a href=""&gt;近期的文章&lt;/a&gt;，我对这个话题十分感兴趣，也欢迎你来信讨论&lt;/p&gt;
&lt;h1&gt;scratch3.0 + micro:bit尝鲜&lt;/h1&gt;
&lt;p&gt;尽管scratch3的micro:bit插件还没有正式发布，但目前我们以及可以尝鲜了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 目前只支持macOS、chrome OS、安卓三个平台下的 Chrome浏览器,暂不支持Windows系统 （因为用到&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;下载并烧入固件&lt;/h3&gt;
&lt;p&gt;下载&lt;a href="http://p6ur0vhyj.bkt.clouddn.com/scratch-microbit-firmware-combined.hex"&gt;scratch-microbit-firmware-combined.hex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将scratch-microbit-firmware-combined.hex拖到microbit里&lt;/p&gt;
&lt;h3&gt;连接&lt;/h3&gt;
&lt;p&gt;打开系统蓝牙&lt;/p&gt;
&lt;p&gt;打开&lt;a href="https://llk.github.io/scratch-gui/microbit"&gt;llk microbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击连接蓝牙:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitble_42d40f81.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;连接完成之后，我们就可以开始在scratch3.0中为microbit编程了&lt;/p&gt;
&lt;p&gt;由于是&lt;code&gt;交互式&lt;/code&gt;风格，我们可以轻松做出互动式的体感游戏之类富有想象里的东西。&lt;/p&gt;
&lt;h3&gt;开始编程&lt;/h3&gt;
&lt;p&gt;首先在extensions中选择micro:bit扩展:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/microbitble_209445f2.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;下边让我们写个简单的程序，用micro:bit来控制scratch3.0中的人物左右移动:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/microbitble_e7747878.png" /&gt;&lt;/p&gt;
&lt;p&gt;让我们来看看实际效果:&lt;/p&gt;
&lt;video src="http://p6ur0vhyj.bkt.clouddn.com/microbitble.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;技术视角&lt;/h3&gt;
&lt;p&gt;scratch3.0的micro:bit采用&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web-bluetooth&lt;/a&gt;。这是一种激进的策略，&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web-bluetooth&lt;/a&gt;目前的跨平台兼容并不好，各个平台的进展可以参考&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;这儿&lt;/a&gt;，目前只在macOS、chrome OS以及安卓上可以正常使用，最终scratch3.0稳定版中micro:bit extension是否会采用web-bluetooth的连接策略还不得而知（但他们显然偏好这种方式，他们自己准备推出的硬件：&lt;a href="https://www.media.mit.edu/projects/scratch-pad/overview/"&gt;ScratchBit&lt;/a&gt;也采用这种策略）。官方可能采用的另一个策略是&lt;a href="https://llk.github.io/microbit-extension/"&gt;microbit-extension&lt;/a&gt;,这种方式的跨平台兼容性好，原理上和&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;相同&lt;/p&gt;
&lt;p&gt;和scratch官方一样，我也相信web-bluetooth是硬件编程教育的未来，采用这种方式，只需要你有一个chrome浏览器，就可以直接操控硬件！&lt;/p&gt;
&lt;p&gt;我的&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;采用了比较折中的策略，没有强行要求使用web-bluetooth，而是把连接的策略推迟给开发者，让他们自行选择。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/asondemita/items/b8e7f3ad63ccb0baec3a"&gt;Scratch3.0+micro:bit の接続手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit"&gt;llk microbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://khanning.github.io/scratch-gui/microbit-pro/"&gt;khanning microbit-pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://khanning.github.io/scratch-gui/scratchbit/"&gt;khanning scratchbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.media.mit.edu/projects/scratch-pad/overview/"&gt;ScratchBit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.microbit.org/support/solutions/articles/19000026080-can-i-use-the-micro-bit-with-scratch-"&gt;Can I use the micro:bit with Scratch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;WebBluetoothCG/web-bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/scratch/"&gt;Scratch cards for micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/scratchteam-blog/3-things-to-know-about-scratch-3-0-18ee2f564278"&gt;3 Things To Know About Scratch 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-01:scratch3-microbit.html</guid><category>scratch3</category></item><item><title>micro:bit与事件驱动</title><link>/microbit-event-driven.html</link><description>&lt;p&gt;在微软的&lt;a href="https://makecode.microbit.org/"&gt;makecode&lt;/a&gt;编辑器中，我们可以轻松为micro:bit写出这种事件驱动风格的代码:&lt;code&gt;当按钮A被按下的时候打印字符A，当按钮B被按下的时候打印字符B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="makecode" src="http://wwj-fig-bed.just4fun.site/microbit_30bab0ff.png" /&gt;&lt;/p&gt;
&lt;p&gt;生成的代码(javascript)十分简单:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onButtonPressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onButtonPressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们使用Python来为micro:bit编程时，却很难写出这种事件驱动风格的代码，如果我们要做到上边类似的事，一般的教程里会让你用&lt;code&gt;while+if/else&lt;/code&gt;来做。尽管可以做到类似的事，但思维方式/语义其实并不相同。&lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;p&gt;makecode将积木映射为JavaScript代码，JavaScript是一个事件驱动型语言，所以在makecode可以很轻松进行事件驱动风格的编程。而Python对事件驱动的关注主要集中在网络编程方面，在Python中做事件驱动风格的编程，并不是那么常见。&lt;/p&gt;
&lt;p&gt;要在图形化中，自动生成事件驱动风格的代码，自然就更不易了&lt;/p&gt;
&lt;p&gt;我们看到micro:bit官方的&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;bbcmicrobit/PythonEditor&lt;/a&gt;中积木化界面(blockly)就不支持:&lt;code&gt;当按钮A被按下的时候打印字符A，当按钮B被按下的时候打印字符B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="microbit site" src="http://wwj-fig-bed.just4fun.site/microbit_4110fba9.png" /&gt;&lt;/p&gt;
&lt;h1&gt;how&lt;/h1&gt;
&lt;p&gt;由于目前micro:bit的&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;micropython固件&lt;/a&gt;并不支持多线程(pyboard倒是有个固件支持&lt;code&gt;_thread&lt;/code&gt;)，要实现事件驱动，可能只有协程供你选择了。&lt;/p&gt;
&lt;p&gt;micro:bit官方对此并没有很好的解决方案&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mblock.cc/zh-home/"&gt;mblock/makeblock&lt;/a&gt;的方案倒是十分漂亮，值得我们好好学习（ps:mblock在工程上十分出色，有许多聪明的做法值得学习）&lt;/p&gt;
&lt;p&gt;我们先在mblock中来为micro:bit编写事件驱动风格的程序&lt;/p&gt;
&lt;p&gt;&lt;img alt="mblock 积木" src="http://wwj-fig-bed.just4fun.site/mblock_05c523d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;接着我们来看看积木generate出的Python代码:&lt;/p&gt;
&lt;p&gt;&lt;img alt="mblock 代码" src="http://wwj-fig-bed.just4fun.site/mblock_fdfa7d4f.png" /&gt;&lt;/p&gt;
&lt;p&gt;代码十分规整，规整的好处是从积木到代码的转化将很简单。这种从积木generate出代码的方式，是典型的blockly app风格，尽管长着scratch3.0的样子，关于两者的差异可以参考我此前的文章:&lt;a href="https://blog.just4fun.site/scratch3-blockly.html"&gt;Blockly与Scratch3.0的比较分析及选型建议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察这个代码（注意&lt;code&gt;yeild&lt;/code&gt;），如果你熟悉python的协程，应该可以轻松猜到，mblock很聪明地使用协程来做事件驱动风格的编程&lt;/p&gt;
&lt;p&gt;至于为何不用async/await，是因为MicroPython是Python 3.4的一个实现，在python3.4中，你不能使用async/await关键字，直到Python在3.5版本才引入关于协程的语法糖async和await&lt;/p&gt;
&lt;p&gt;这段代码尽管十分工整，但它并不能运行，它需要一个调度器来调度它们。&lt;/p&gt;
&lt;p&gt;经过预处理之后，可运行代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;microbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;music&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_callback_button_a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_coroutine_button_a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_pressed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;on_callback_button_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_callback_button_b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_coroutine_button_b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_pressed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;on_callback_button_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coroutine_start_go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coroutine_v0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;coroutine_v1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;coroutine_v0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;coroutine_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;coroutine_v0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;coroutine_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;coroutine_init0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on_coroutine_button_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;coroutine_init1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on_coroutine_button_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;coroutine_start_go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coroutine_init0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;coroutine_init1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然，在进入micro:bit之前，它要连同内核一同被编译为hex文件。&lt;/p&gt;
&lt;p&gt;可以看出，mblock在generate出代码之后，还有一个预处理的过程（实际上webduino也干过类似的事，我之前的分析有分析过，他们的做法如出一辙）。&lt;/p&gt;
&lt;p&gt;尽管我们可以用一些hack的手段拿到这部分的源码，但我们不打算在此讨论细节（mblock这部分并未开源，出于尊重和规避法律风险的考虑，我们不准备公开他们这部分的代码。大家自己动手去实现吧，按照以上分析，这部分实现起来十分简单，mblock是个很酷的团队，也许之后会开放）&lt;/p&gt;
&lt;p&gt;mblock对程序进行预处理的部分使用js来做，如下图，大家把这个转化器当黑盒来看吧&lt;/p&gt;
&lt;p&gt;&lt;img alt="预处理" src="http://wwj-fig-bed.just4fun.site/makecode_21978b84.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过简单的正则，你很快可以写出来:)&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/microbit-notes.html"&gt;micro:bit使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/micropython-notes.html"&gt;MicroPython使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micropython/micropython"&gt;micropython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;bbcmicrobit/micropython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;bbcmicrobit/PythonEditor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-06-19:microbit-event-driven.html</guid><category>microbit</category></item><item><title>scratch3-adapter的移动端解决方案</title><link>/scratch3-adapter-mobile.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/ipad_4b1c9636.png" /&gt;&lt;/p&gt;
&lt;p&gt;今天花了半天功夫，解决scratch3-adapter在移动端使用的问题，我在roadmap里有提到过这个计划:&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/about/roadmap/"&gt;Roadmap 移动端&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中途陷到几个坑里边，花了不少时间，做个笔记&lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;p&gt;对于初学者而言(尤其是初次接触计算机的孩子而言)，平板电脑是比电脑更为友好的工具。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;平板 + 积木 + 图标&lt;/code&gt;，可以让一个不识字的孩子直接动手编程，孩子使用手指拖拽带有图标的积木，即可通过一个个的关卡，在操作中掌握所需的概念&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wwj-fig-bed.just4fun.site/codeorg_91677138.png" width=800 /&gt;&lt;/p&gt;
&lt;p&gt;目前大多数的家庭里，儿童的学习工具并不是PC，可能主要是ipad，至少我周围是这样（对于培训和课堂我强烈推荐树莓派）&lt;/p&gt;
&lt;p&gt;scratch3目前正在做跨平台的一些工作，平板电脑将得到良好的支持。尽管目前的计划里，手机端暂时还不会成为操作界面(但官方会将其作为play界面)，但在未来，也可能会作为创作平台(目前编程猫已经先行探路)&lt;/p&gt;
&lt;p&gt;scratch3-adapter的兴趣是将scratch3.0连接到更广阔的区域，目前我们已经发布了几大主流平台的客户端，详情见:&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/user_guide/install/"&gt;scratch3-adapter-docs 安装(install)&lt;/a&gt;。对移动端的支持，当然也是我们的目标。&lt;/p&gt;
&lt;h1&gt;移动端和PC的差异&lt;/h1&gt;
&lt;p&gt;移动端和PC在学习体验上的差异，前人述备矣，在此不多讨论&lt;/p&gt;
&lt;p&gt;这里只谈谈，对于scratch3-adapter而言，这类设备在技术层面有什么差异&lt;/p&gt;
&lt;p&gt;scratch3-adapter基于python，通过插件系统，我们允许scratch3-adapter与任何开放的设备相连，连接的方式也很自由：wifi、usb、bluetooth都行&lt;/p&gt;
&lt;p&gt;在PC上，scratch3-adapter几乎可以干任何事，操控wifi、usb、bluetooth都没问题，主流的硬件无非这几种连接方法。但在移动端则不同&lt;/p&gt;
&lt;p&gt;让我们以cozmo为例，说明这种不同。在PC端，可我们以使用usb连接控制cozmo的手机，进而使用&lt;a href="https://github.com/anki/cozmo-python-sdk"&gt;cozmo-python-sdk&lt;/a&gt;控制cozmo&lt;/p&gt;
&lt;p&gt;但在移动端，我们无法这样做，因为连接cozmo需要一个usb接口，cozmo作为案例向我们揭示了：我们无法预估来自现实世界的硬件采用怎样的连接方式&lt;/p&gt;
&lt;p&gt;尽管我已经让scratch3-adapter运行在安卓上。但如果你要操控移动端的硬件(wifi、bluetooth）（usb目前无法使用)，你需要写一个app，抛开工作量不谈，scratch3-adapter根本也不想这样做，scratch3-adapter希望学习平台是在web上，而不是包装为app，scratch3-adapter只是将web延伸出来。我们热爱开放的互联网&lt;/p&gt;
&lt;p&gt;我们最终决定学习home assistant的策略（scratch3-adapter在很多层面和home assistant都很相似），让scratch3-adapter跑在树莓派上，而移动端只需要使用树莓派的web服务即可，硬件都被暴露在这些服务中&lt;/p&gt;
&lt;p&gt;因为树莓派可以连接wifi、usb、bluetooth，以及更多的其他设备(树莓派有引脚！)，所以你在移动端的浏览器上也能操控所有这些设备！&lt;/p&gt;
&lt;p&gt;我相信，就学习编程而言，树莓派是个十分理想的环境。我们已经基于树莓派，利用&lt;a href="https://github.com/PiNet/PiNet"&gt;PiNet&lt;/a&gt;完成了编程教室解决方案，这部分工作由@suli完成.这部分的文章，我之后有时间也梳理一下&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;确定了方向之后，我们再来把思路理一下。&lt;/p&gt;
&lt;p&gt;在此我们以cozmo为例，解释我们如何让scratch3-adapter支持移动端。最后我们会给一个演示视频，视频里，一个类似code.org这样的平台，可以直接将cozmo设计在教学关卡中！在这个视频我相信是会同时让code.org和cozmo社区震惊（cozmo英文社区已经期待很久了），我近期也准备写一篇英文文章发到cozmo社区里，英文比较渣，挤牙膏似的还蛮辛苦的&lt;/p&gt;
&lt;p&gt;首先我们按照cozmo官方的&lt;a href="http://cozmosdk.anki.com/docs/"&gt;http://cozmosdk.anki.com/docs/install-linux.html&lt;/a&gt;，在树莓派里配置&lt;a href="https://github.com/anki/cozmo-python-sdk"&gt;cozmo-python-sdk&lt;/a&gt;。树莓派官方的最新镜像，默认带有python3.5，我们直接使用这个版本就够了.&lt;/p&gt;
&lt;p&gt;安装依赖十分简单:&lt;code&gt;pip3 install --user 'cozmo[camera]'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于我使用安卓手机连接cozmo（社区里很多人用亚马逊$35的那款），所以需要安装一下adb:&lt;code&gt;sudo apt-get install android-tools-adb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至此，我们就可以使用树莓派操作cozmo了&lt;/p&gt;
&lt;p&gt;我们在树莓派里让cozmo_server开机启动，cozmo_server是一个代理了cozmo的python进程&lt;/p&gt;
&lt;p&gt;scratch3-adapter以cli模式开机启动，启动时默认加载cozmo插件。&lt;/p&gt;
&lt;p&gt;之后我们打开网站，点击页面按钮连接树莓派，就可以在ipad中使用浏览器打开网站，直接操控cozmo了，&lt;/p&gt;
&lt;p&gt;我们来看看演示效果:&lt;/p&gt;
&lt;video src="http://p6ur0vhyj.bkt.clouddn.com/blockly_cozmo.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;ps: 因为是web控制cozmo，所以我就不必要使用ipad演示了（毕竟原理没差别）&lt;/p&gt;
&lt;p&gt;演示视频里，学生在网页中的编程关卡里，拖好积木块，点击运行，就可以同时控制虚拟角色和cozmo执行任务，这个过程是实时双向通信！所以我们能将评分之类的机制都加进来，我在之前的文章: &lt;a href="https://blog.just4fun.site/scratch3_adapter-blockly.html"&gt;使用scratch3_adapter连接blockly与硬件&lt;/a&gt;里说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这部分值得玩味的地方是，你可以在网页上做所有的教学，无论是结合某一款开源硬件还是某一个AI系统。而scratch3_adapter将允许你用积木来驱动它们，你也能拿到积木/代码在外部系统的执行结果，判断学生是否掌握该知识点，而这对教学可能是很重要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;一些坑和需要解决的问题&lt;/h1&gt;
&lt;p&gt;思路和原理都很简单，但在实际使用中，有几个问题需要我们解决。这些问题主要是提升易用性和用户体验，毕竟树莓派运行着linux（raspbian），我们总不能把操作流程用bash来写，让孩子ssh进树莓派操作，尽管我们鼓励他们能力提高之后大胆去尝试。&lt;/p&gt;
&lt;p&gt;所以我们做到了&lt;code&gt;all in web&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这篇文章以cozmo为例，来展示scratch3-adapter的移动端的解决方案。我们有意选择了cozmo，因为这个例子代表了&lt;code&gt;最为复杂的情况&lt;/code&gt;，如果cozmo的连接都顺利，那么其他情况将变得十分简单(诸如micro:bit).所以如果你觉得这篇文章有些复杂是正常的，因为cozmo本身的连接方式很复杂，还会牵扯一些adb的问题&lt;/p&gt;
&lt;h3&gt;adb的坑&lt;/h3&gt;
&lt;p&gt;当你把手机连上树莓派之后，&lt;code&gt;adb devices&lt;/code&gt;会跟你说没有认证(unauthorized)，社区给出了解决方案：&lt;code&gt;kill and restart&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adb kill-server  
adb start-server  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你需要在开机启动时把这个加上启动项上&lt;/p&gt;
&lt;h3&gt;接入wifi&lt;/h3&gt;
&lt;p&gt;如何将树莓派接入局域网，此前是个困难的问题。&lt;/p&gt;
&lt;p&gt;如果你把树莓派用作一个网关，分发给普通用户，那么你就需要让这个过程变得简单易用。这一块目前的最佳实践是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以某种方式连接网关&lt;ul&gt;
&lt;li&gt;智能家居设备一般会让你使用蓝牙连接设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将密码传入设备&lt;/li&gt;
&lt;li&gt;重启设备，接入wifi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/resin-io/resin-wifi-connect"&gt;resin-wifi-connect&lt;/a&gt;完美得解决了这个问题。不过这个项目目前有些bug，还在改进中&lt;/p&gt;
&lt;h3&gt;开机自启 &amp;amp; 掉线重连&lt;/h3&gt;
&lt;p&gt;开启自启，我们统一使用supervisor来做，并且暴露出9001端口来管理进程，即便中途出现了意外，我们也可以轻松在web页面重启进程，而无需进入树莓派&lt;/p&gt;
&lt;h3&gt;https&lt;/h3&gt;
&lt;p&gt;scratch3-adapter的https模式在PC上使用正常，但在ipad上会报一个错误: &lt;code&gt;WebSocket OSStatus error -9807&lt;/code&gt;,ipad对https证书有要求，尽管我们可以使用nginx代理scratch3-adapter来解决这个问题(tls v1.2)。但使用http可能更为简易&lt;/p&gt;
&lt;h3&gt;mDNS &amp;amp; hostname&lt;/h3&gt;
&lt;p&gt;mDNS允许你在局域网内，通过机器名找到它的ip地址，在智能家居中使用广泛。&lt;/p&gt;
&lt;p&gt;对于课堂和机构的教学，我们可能希望，每个树莓派都有唯一标识，可以区分彼此，最好这个名字可以自定义，便于记忆。&lt;code&gt;mDNS &amp;amp; hostname&lt;/code&gt;是这个问题的绝佳的解决方案。直接使用&lt;code&gt;sudo raspi-config&lt;/code&gt;设置好hostname，重启即可&lt;/p&gt;
&lt;p&gt;尽管大多时候你无需注意&lt;code&gt;mDNS&lt;/code&gt;,因为大多数系统和路由器都支持，但值得注意的是一些老旧的安卓系统和windows并不支持，如果你使用windows，先安装一些这个软件:&lt;a href="https://support.apple.com/kb/DL999?viewlocale=zh_CN&amp;amp;locale=en_US"&gt;Bonjour Print Services (Windows)&lt;/a&gt;. 安装之后，重启电脑即可&lt;/p&gt;
&lt;p&gt;此外补充一些tips: 你可以把hostname和wifi热点名贴在树莓派外壳上，便于使用。如果你在做一个课堂解决方案，这块可能出现的问题和to c很不一样,值得注意&lt;/p&gt;
&lt;h1&gt;后话&lt;/h1&gt;
&lt;p&gt;前边这些配置看去比较繁琐，我之后会把这些东西做成镜像，大家直接往树莓派烧录我制作的镜像即可&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-06-08:scratch3-adapter-mobile.html</guid><category>scratch3</category></item><item><title>使用scratch3_adapter连接blockly与硬件</title><link>/scratch3_adapter-blockly.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly_698b1f0a.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;everything is message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3_adapter的项目介绍&lt;/a&gt;中说 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们不想针对某个硬件产品发布一个客户端，我们相信创意来自广泛的连接，我们致力于做一个&lt;code&gt;中立&lt;/code&gt;的东西，将Scratch3.0连接到更广阔的领域，我们想做到&lt;a href="http://learn.media.mit.edu/lcl/weeks/week5/"&gt;宽围墙&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，scratch3_adapter比我们所描述的还有更中立一些。它中立起来，连自己的名字(&lt;code&gt;scratch3&lt;/code&gt;_adapter)都忘了，scratch3_adapter不止可以将Scratch3.0接入各种有趣的硬件和AI中(如它的名字所暗示的)，也可以连接Blockly和各种有趣的硬件/AI&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将介绍如何使用&lt;code&gt;scratch3_adapter&lt;/code&gt;连接blockly与micro:bit。利用文章演示的方法，你可以将blockly接入到其他有趣的系统中，远不止是micro:bit&lt;/p&gt;
&lt;p&gt;也许在此我们应该叫它:&lt;code&gt;blockly_adapter&lt;/code&gt; :)&lt;/p&gt;
&lt;h1&gt;初心&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;模仿是最大的致敬&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建&lt;code&gt;scratch3_adapter&lt;/code&gt;之前的一段时间，我有两个周末沉迷于《ROS机器人编程实践》，为这套系统的架构所折服，看到作者设计得正交且清晰的API时，叹服之余，也暗自坐在书店地上设想: API的背后是怎样的？如果我来做，我会怎么实现它？而后带着自己的设想，和作者源码做对照。&lt;/p&gt;
&lt;p&gt;看这本书之前我正巧看完Pieter Hintjens的《ZeroMQ：云时代极速消息通信库》,zeromq是个极其灵活、强大的工具，健壮有力而优美。有了zeromq这把称心的斧头，那段时间里我倾向于把一切都视为钉子(everything is message)，于是我决定把整个ROS视为一个消息系统。&lt;/p&gt;
&lt;p&gt;开始重造轮子时，从sub和pub入手，觉得无碍; 到了重构rescore命令行工具时，我将其视为一个服务发现组件，挑选工具时，在python原生的dict和redis中犹豫，最终决定选择redis。&lt;/p&gt;
&lt;p&gt;后来在翻阅ROS的资料时，发现作者也正在重构ROS(ROS2),他说ROS本质上时一个匿名的消息系统，早年他在构建ROS时，由于社区里工具的匮乏，他造了很多轮子，如果ROS写于今天，他会选择zeromq和redis（为了实时性，他最终选了DDS）。看到这儿我颇为振奋，觉得方向猜的还挺准&lt;/p&gt;
&lt;p&gt;我把早先的尝试放在&lt;a href="https://github.com/wwj718/ROLS"&gt;ROLS&lt;/a&gt;(Robot Operating Lite System),往后折腾的时候发现，重造一个ROS比我想象的要复杂得多。那段时间，我正好在考虑为Scratch3.0写一个插件系统，发现可以模仿ROS的局部设计来做这个插件系统。于是决定先放下ROLS，在插件系统这个更有实际价值的场景里，去实践从ROS学来的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ROS本质上是一个匿名的消息系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ROS作者阐述的ROS消息的匿名性以及由此带来的回报，令我着迷。以至于我一直试图将scratch3_adapter设计为一个匿名的消息系统，就像你刚看完一本精彩的小说，恨不得说话的语气都模仿喜欢的角色。在设计scratch3_adapter时，我有一天跟@izuo说，也许我们不该叫它&lt;code&gt;scratch3_adapter&lt;/code&gt;，因为Scratch3.0仅仅是它的一个client，并不占主体地位，&lt;code&gt;scratch3_adapter&lt;/code&gt;可以对接到blockly或者任何其他的地方，没有任何差异。&lt;/p&gt;
&lt;p&gt;但我后来意识到(在实际使用extension时)，匿名性对我们价值并不大，在scratch3_adapter的使用场景里，各个节点并不是对等的，它其实不是一个分布式的系统(ROS本质却是一个分布式的系统)。scratch3_adapter有它的中心，积木化界面就是它的中心。于是我们着手开始削弱匿名性，如果你看到代码的变迁过程，就会看到想法的变迁过程&lt;/p&gt;
&lt;p&gt;尽管我们已经削弱了它的匿名性，也继续沿用&lt;code&gt;scratch3_adapter&lt;/code&gt;这个名字，但它依然有很强的适应性，本质的原因我想源自它是一个消息系统。&lt;/p&gt;
&lt;p&gt;在使用scratch3_adapter的时候，你可以很轻松将scratch3替换为blockly，使用scratch3_adapter连接你的blockly和其他系统(硬件或AI)，而几乎不会有任何损失。&lt;/p&gt;
&lt;h1&gt;why blockly&lt;/h1&gt;
&lt;p&gt;谈论怎么做之前，我们先来谈谈为何要这么做。&lt;/p&gt;
&lt;p&gt;那么，我们为何要连接blockly和硬件/AI？&lt;/p&gt;
&lt;p&gt;我认为最重要的一个原因是，blockly是少儿编程领域，大多数教学平台的基础。而教学平台除了教学软件相关的课程，也希望教学硬件和AI。&lt;/p&gt;
&lt;p&gt;ps:值得一提的是，scratch-blocks本质上是blockly，而不是Scratch3.0，关于这一点，常常会引起一些混乱&lt;/p&gt;
&lt;p&gt;如果你问blockly为何是少儿编程领域内，大多数教学平台的基础？&lt;/p&gt;
&lt;p&gt;这个问题会逼着我们思考讨论的特性和差异，我之前做过这个讨论: &lt;a href="https://blog.just4fun.site/scratch3-blockly.html"&gt;Blockly与Scratch3.0的比较分析及选型建议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;尽管原因很多（如我前边谈的），但重要的原因，简而言之，是因为blockly和Scratch3.0的定位不同，Scratch3.0定位为playground，而blockly只是个轻巧的编辑器。所以blockly可以承载更多个性化的定制部分，教育很难千篇一律，大家倾向一个轻巧灵活的工具以适应课程。&lt;/p&gt;
&lt;p&gt;不过，目前的少儿编程教育蛮千篇一律的 :) &lt;/p&gt;
&lt;p&gt;你会看到少儿编程这个领域，目前似乎只有两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是playground式的，国外如scratch，国内如编程猫&lt;ul&gt;
&lt;li&gt;我认为playground的价值在于"低门槛、高天花板、宽围墙"，而开放和社区是核心，所以我正在写一篇文章:《为何你应该选择Scratch3.0作为playground》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一种是关卡式的，如code.org、Tynker&lt;ul&gt;
&lt;li&gt;关卡式的平台其实很套路，架构一个这样的平台基本可以分三步走完成，这部分我们之后有机会再细说&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scratch3_adapter是个中立的系统，以上两种模式的平台我们都支持&lt;/p&gt;
&lt;h1&gt;连接blockly与micro:bit&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;构建一个blockly积木块，用来在micro:bit上打印任意字符串&lt;/p&gt;
&lt;h2&gt;动起手来&lt;/h2&gt;
&lt;p&gt;下边跟着我一起动起手来，脖子扭扭屁股扭扭&lt;/p&gt;
&lt;h4&gt;步骤1:  编写blockly源码&lt;/h4&gt;
&lt;p&gt;在此假设你对blockly开发有基本的了解，如果你blockly开发并不了解，可以看我的系列教程:&lt;a href="https://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt; (教程链接在文末）&lt;/p&gt;
&lt;p&gt;我们先直接上源码，稍后讲解:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_2.2_custom_block_run_js_with_interpreter/index.html#L92"&gt;blockly_2.2_custom_block_run_js_with_interpreter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除去html和无关紧要的部分，将scratch3_adapter接入blockly的核心源码就几行：&lt;/p&gt;
&lt;p&gt;首先是建立连接:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;io&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws://127.0.0.1:12358&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;websocket&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这一行代码，将blockly课程或创作平台与scratch3_adapter进行连接。&lt;/p&gt;
&lt;p&gt;ps: scratch3_adapter用到好几个端口，12358是其中一个，scratch3_adapter中端口的选择藏着彩蛋 :) 有兴趣的小伙伴可以自己去解读&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;actuator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;microbit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;actuators/say&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;interpreter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;interpreter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createNativeFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我们使用blockly积木控制micro:bit（硬件）的关键所在，如果你是个有经验的程序员，我已不必多说什么了，你已经可以使用scratch3_adapter将blockly接入任何硬件/AI &lt;/p&gt;
&lt;p&gt;enjoy it ~&lt;/p&gt;
&lt;h4&gt;步骤2: 打开scratch3_adapter,选择内置的micro:bit插件&lt;/h4&gt;
&lt;p&gt;&lt;img width="300px" src="http://wwj-fig-bed.just4fun.site/microbit_bb63ac6b.png"/&gt;&lt;/p&gt;
&lt;p&gt;此刻你应该看到micro:bit背后的信号灯在高频闪烁，如果它没有高频闪烁，则按一下micro:bit背部的复位按钮&lt;/p&gt;
&lt;h4&gt;步骤3: 运行!&lt;/h4&gt;
&lt;p&gt;点击运行blockly积木块，你将看到blockly已经能成功驱动micro:bit了&lt;/p&gt;
&lt;video src="http://p6ur0vhyj.bkt.clouddn.com/microbit_blockly.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;你可以把blockly接入更多的硬件，包括控制你的蓝牙硬件、你的ROS机器人、你那跑着opencv的树莓派或者你童年那辆心爱的玩具四驱车，可以参考我们的:&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/dev_guide/helloworld/"&gt;开发手册&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;想象空间&lt;/h3&gt;
&lt;p&gt;我们把scratch3_adapter设计为一个独立的小工具(10M左右)，而不是连同Scratch3.0一起用electron打包在一起，个中原因除了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生苦短、我用Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更重要的是，我们想让它成为一个通用的工具，无论你的网站是什么，无论你使用scratch3.0、blockly还是某种自主研发的其他什么东西，你都无需做什么伤筋动骨的事，只需要在网站中写一些js代码，你就能将网站接入scratch3_adapter，进而与各类开源硬件/AI相连。&lt;/p&gt;
&lt;p&gt;这部分值得玩味的地方是，你可以在网页上做所有的教学，无论是结合某一款开源硬件还是某一个AI系统。而scratch3_adapter将允许你用积木来驱动它们，你也能拿到积木/代码在外部系统的执行结果，判断学生是否掌握该知识点，而这对教学可能是很重要的。&lt;/p&gt;
&lt;p&gt;scratch3_adapter在向ROS学习，我们之后将引入action，如此一来你甚至可以设置开放性的课程，诸如某个关卡是要求学生用积木写一个智能体，让它走出现实世界的迷宫，里边可能涉及到各种复杂的策略和不可预期的情况，这种系统必须是异步的，最好带有状态机，ROS在这块做得十分惊艳。ROS的的action适合这种任务。尽管scratch3_adapter目前也能支持，但可能需要你写比较多的代码。对智能的关注是我的兴趣之一，我之后会来增强这块。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-05-29:scratch3_adapter-blockly.html</guid><category>scratch</category></item><item><title>发布scratch3_adapter</title><link>/scratch3_adapter.html</link><description>&lt;p&gt;项目从构思到发布，一路写了好几篇文章:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-plugin-1.html"&gt;为Scratch3.0设计的插件系统(上篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-plugin-2.html"&gt;为Scratch3.0设计的插件系统(下篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几篇文章基本回答了why、what、how的问题&lt;/p&gt;
&lt;p&gt;废话不说，直接上项目地址，欢迎使用和吐槽 ：）&lt;/p&gt;
&lt;h1&gt;项目地址&lt;/h1&gt;
&lt;p&gt;托管了相同的两份，一份放在github上，一份放在香港的服务器上,大家任选一个访问即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter-docs(香港服务器)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter-docs(Github)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-05-26:scratch3_adapter.html</guid><category>scratch</category></item><item><title>Blockly与Scratch3.0的比较分析及选型建议</title><link>/scratch3-blockly.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/thdfebdb2d.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可是时间究竟是什么？没有人问我，我倒清楚，有人问我，我想给他解释，却茫然不解了 --奥古斯丁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Blockly与Scratch3.0的比较分析&lt;/h1&gt;
&lt;p&gt;在我们分析Blockly与Scratch3.0之前，我们需要先阐述一下，Scratch3.0与Blockly分别是什么&lt;/p&gt;
&lt;h3&gt;Blockly是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;blockly将自己定位为一个编辑器。这个描述再精当不过&lt;/p&gt;
&lt;p&gt;我在之前的文章: &lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;里说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户的拖曳（拖曳作为一种输入，可以类比为普通编辑器的键盘输入），输出为生成的代码。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于每个积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，用户自己掌控。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以简单将blockly视为积木化的编辑器，编辑器的输出只有代码。&lt;code&gt;Do one thing&lt;/code&gt;的原则让它成为一个灵活小巧的库，而不是框架，可以轻松与其他工具整合&lt;/p&gt;
&lt;h3&gt;Scratch3.0是什么&lt;/h3&gt;
&lt;p&gt;那么Scratch3.0是什么呢，相比于&lt;code&gt;Blockly是什么&lt;/code&gt;，这个问题要难回答很多，可能的答案有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scratch3.0是Scratch2.0的下一个版本，使用html5构建&lt;/li&gt;
&lt;li&gt;Scratch3.0是个&lt;code&gt;低门槛、宽围墙、高天花板&lt;/code&gt;的playground&lt;/li&gt;
&lt;li&gt;Scratch3.0是一个Blockly APP&lt;/li&gt;
&lt;li&gt;Scratch3.0是scratch-gui + scratch-vm + scratch-render + ...&lt;/li&gt;
&lt;li&gt;Scratch3.0是那种你用过就知道是什么的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几条阐述颇有盲人摸象的味道，我们站在不同侧面去阐述我们看到的Scratch3.0&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其触牙者，即言象形如莱茯根；其触耳者，言象如箕；其触头者，言象如石；其触鼻者，言象如杵；其触脚者，言象如木臼；其触脊者，言象如床；其触腹者，言象如瓮；其触尾者，言象如绳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;盲人摸象的比喻异常深刻，不盲的我们，看到&lt;code&gt;真实的事物&lt;/code&gt;是经过这样一个过程：可见光进入视网膜，经过神经元对光信号的解释和传递，在大脑渲染出一个图景,尽管隔了这么多层，我们坚信看到了所谓的&lt;code&gt;真实&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可能确实看到了&lt;code&gt;真实&lt;/code&gt;，毕竟我们有阐述&lt;code&gt;真实&lt;/code&gt;的权利:)&lt;/p&gt;
&lt;p&gt;下边我们来逐条阐述&lt;code&gt;Scratch3.0是什么&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Scratch3.0是Scratch2.0的下一个版本，使用html5构建&lt;/h5&gt;
&lt;p&gt;这条侧重在解释&lt;code&gt;3.0&lt;/code&gt;，Scratch3.0是对Scratch2.0的升级，3.0基于html5技术构建，可以跨平台运行&lt;/p&gt;
&lt;p&gt;这条回答站在Scratch发展过程的视角来看，如果你是Scratch的老用户，这句话也许足以让你醍醐灌顶。但新认识Scratch3.0的小伙伴对这个阐述应该不会感到满意。&lt;/p&gt;
&lt;p&gt;学习哲学的一种好办法是学习哲学史，溯本求源常常是个不错的方法，对scratch前世今生的追溯，可以参考我之前的这篇文章:&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Scratch3.0是个&lt;code&gt;低门槛、宽围墙、高天花板&lt;/code&gt;的playground&lt;/h5&gt;
&lt;p&gt;这个比喻精彩之极，它阐述了Scratch的设计哲学。&lt;/p&gt;
&lt;p&gt;Scratch被设计为一个playground，一个playground应该尽可能提供丰富的基础设施，供它的使用者们嬉戏玩乐和探索。所以我们在Scratch3.0中看到了丰富的积木块和富有表现力的舞台效果，以及强大的可扩展性&lt;/p&gt;
&lt;p&gt;关于这点，&lt;a href="http://learn.media.mit.edu/lcl/weeks/week5/"&gt;Learning Creative Learning 第五周的课里&lt;/a&gt;里Scratch的创始人做了精彩的阐述&lt;/p&gt;
&lt;h5&gt;Scratch3.0是一个Blockly APP&lt;/h5&gt;
&lt;p&gt;就这篇文章而言，这是个不错的答案，它甚至应该放到下文&lt;code&gt;Blockly与Scratch3.0的比较分析&lt;/code&gt;的部分里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scratch3.0是一个Blockly APP&lt;/code&gt;这句话的意思是，Scratch3.0基于&lt;code&gt;Blockly&lt;/code&gt;构建，就是说Scratch3.0中包含了Blockly。&lt;/p&gt;
&lt;p&gt;那么什么是&lt;code&gt;Blockly APP&lt;/code&gt;呢，按blockly官方说法，你需要做以下三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scratch之前并不是基于Blockly构建的，3.0的版本里，才这样做，为何之前的Scratch不基于Blockly呢，因为Scratch这个项目比Blockly更早诞生，Scratch前几个版本的积木块都是自己造的轮子。现在Blockly几乎是公认最好的积木化编辑器，所以Scratch在3.0里把轮子换成Blockly&lt;/p&gt;
&lt;p&gt;说&lt;code&gt;Scratch3.0基于Blockly构建&lt;/code&gt;依然显得含糊其辞，Scratch3.0是个庞大的项目，包含了很多组件，只有其中的scratch-blocks基于Blockly，&lt;/p&gt;
&lt;h5&gt;Scratch3.0是scratch-gui + scratch-blocks + scratch-vm + scratch-render + ...&lt;/h5&gt;
&lt;p&gt;这条阐述是程序员视角，站在Scratch3.0的项目结构上解释它&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Talk is cheap , show me the code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们直接打开&lt;a href="https://github.com/LLK"&gt;Scratch在github的主页&lt;/a&gt;，就可以看到相关的项目细节，源码一览无余都在其中, scratch wiki中对此也有&lt;a href="https://en.scratch-wiki.info/wiki/Scratch_Source_Code"&gt;介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这也是程序员们理解一个项目最常用的一种方式，这种方式给了你一种安全感，你看到了项目&lt;code&gt;内部&lt;/code&gt;的细节，源代码不会骗人，代码也不会给你看一堆有的没的PPT，或像我一样，扯一些有的没的形而上学&lt;/p&gt;
&lt;p&gt;代码虽然不会骗人，但庞大的代码，在没有架构描述，没有好的文档的时候，对新手而言，跟读天书也差不太多，它不骗你，它只是让你晕头转向，Scratch团队目前要忙的使其实在太多，限于人力，你不能在短期内指望他们提供文档&lt;/p&gt;
&lt;p&gt;尽管没有文档，我们要一窥Scratch3.0的整体组成还是不难的，scratch-gui聚合了其他的组件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scratch-vm&lt;/li&gt;
&lt;li&gt;scratch-blocks&lt;/li&gt;
&lt;li&gt;scratch-render&lt;/li&gt;
&lt;li&gt;scratch-storage&lt;/li&gt;
&lt;li&gt;scratch-audio&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构成了完整的Scratch3.0&lt;/p&gt;
&lt;h5&gt;Scratch3.0是那种你用过就知道是什么的东西&lt;/h5&gt;
&lt;p&gt;这个阐述比较抖机灵，就像说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;诗是那些翻译之后就消失的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;风景是拍进照片就不见的那些东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些阐述有某种禅的味道，或者是对其进行的恶意模仿&lt;/p&gt;
&lt;p&gt;但我相信这个阐述会得到让·皮亚杰、Papert和艾伦.凯的赞同，你可以轻松在使用过程中掌握一个概念或工具，而很难在一种概念的文本化阐述中掌握它。关于这点皮亚杰做了精彩的论述，但是他的书真是太难读了。大家有兴趣可以看看：&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;比较分析&lt;/h3&gt;
&lt;p&gt;一圈阐述下来，我们对Blockly的理解相对清晰: 这是一个积木化代码编辑器&lt;/p&gt;
&lt;p&gt;对于Scratch3.0，我们从很多个侧面试着阐述它。Scratch3.0是复杂的，我觉得没有必要回避这一点，对于复杂事物，相比于下个断言，我更愿意从不同侧面观察它。&lt;/p&gt;
&lt;p&gt;现在我们来比较一下这两者，这些比较的视角，是我临时拍脑袋想到的一些方面，有了前边对二者的分析和阐述，你其实也可以写出一大堆的比较分析。&lt;/p&gt;
&lt;p&gt;我们可以把Blockly视为一个库，而把Scratch3.0视为一个框架。一个库往往遵循&lt;code&gt;Do one thing&lt;/code&gt;的Unix哲则，你可以轻松将它组合到你的项目中，Blockly库只负责从积木中生成代码，怎么去使用这些代码？这些代码是控制虚拟角色还是实际的硬件？它何时被解释运行？是否支持并行？代码运行生命周期是怎样的？解释器在本地还是在另一个硬件上？Blockly通通不关心。Blockly给予你自由，同时你也不得不肩负起自己的责任，你需要去考虑构建一个Blockly APP剩下的部分，当然一个典型的Blockly APP我相信是有最佳实践的，目前我认为这里边存在需要解决的大的问题有且仅有3大类，这个话题与本文关系不大，之后有机会再说。值得提醒的是，你遇到的一些觉得难以绕过困难，可能是一些构建一个解释器会遇到的困难，这个困难和普通的编写程序很不一样，因为大部分时间里，我们都是在使用解释器，而不是构建一个，这可能是让很多开发者不知所措的地方。&lt;/p&gt;
&lt;p&gt;相比于Blockly，Scratch3.0则更像一个框架，Scratch3.0几乎开箱可用，它有各个组件，你可以通过修改这些组件来定制它，当然你需要先理解它。你可以通过插件系统加入自己的扩展，无论是软件还是硬件，你都可以进行拓展。如果是对硬件的扩展，你可以考虑基于我们的工作来做，会轻松很多，参考:&lt;a href="http://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说Scratch3.0是框架，侧重在强调它的结构完整性和灵活性，它不是vue、django那种框架，Scratch3.0介于框架和项目之间，它给予你的自由度要比一般意义上的框架要小&lt;/p&gt;
&lt;p&gt;Scratch3.0的解释器相关部分:scratch-vm 十分强大和灵活，要做到这点很不容易。如果你在做和Scratch3.0类似的事，最后不要重造轮子。已经有大厂试着从Blockly开始，重造一个Scratch3.0，他们确实也造出来了。很难的工作在于重写scratch-vm。在一个典型blockly APP中，大家一般使用官方推荐的interpreter来解释执行代码，但在一个复杂项目中，可能是不够的。如果你准备重写scratch-vm，最好有懂解释器的人。而且最好不要去做这件事，尽管你可能做得到，但它的灵活性很难有scratch-vm那么好。&lt;/p&gt;
&lt;h1&gt;选型建议&lt;/h1&gt;
&lt;p&gt;那么我们究竟什么时候选择Blockly，而在另一些时候选择Scratch3.0？&lt;/p&gt;
&lt;p&gt;这恐怕是不容易说清楚的问题，我试着给出一些建议。大多时候需要你对自己正在做的事情有清晰的阐述之后，才好给具体建议。&lt;code&gt;认识你自己&lt;/code&gt;总是没错的&lt;/p&gt;
&lt;p&gt;简单地说如果你才涉足积木化编程这一块，那么从Blockly开始常常是个好建议，因为Scratch3.0很复杂，除非你想原原本本地使用Scratch3.0,否则对它的任何修改，对早期团队来说都是艰难的；你折腾任何积木化编程项目的时候，可能都会遇到一些共性的问题，如我前头提到的那一大串，Scratch3.0在这块探索了很久，也给出了很多优秀的解决方案，但你一来就读Scratch3.0相关组件的源码，很可能云里雾里，你可能先要从钻木取火开始（从Blockly基础项目开始），等你意识到这个问题域的常见困境之后，才会意识到什么好的解决方案。在困境出现之前，好的解决方案会被看作一种过度复杂的设计&lt;/p&gt;
&lt;p&gt;也许你最终选择使用Scratch3.0，但Scratch3.0基于Blockly构建，对Blockly的早期投入，总是能帮助到你理解Scratch3.0的&lt;/p&gt;
&lt;p&gt;关于如何开始Blockly的旅程的教程目前少的可怜，如果你愿意可以从我之前写得东西入手，源码和文章都有：&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;, 文末附有教程和源码&lt;/p&gt;
&lt;p&gt;前边只是泛泛地建议说你应该从Blockly开始，对于你最终应该选择什么，并没有给出具体建议&lt;/p&gt;
&lt;p&gt;让我们假设你已经对Blockly和Scratch3.0都有了清晰的了解，这时候的选型问题，就取决于你要做的具体事情了，我们来讨论一些典型的场景&lt;/p&gt;
&lt;p&gt;比如你想做一个code.org或者Tynker这类网站，Blockly是个理想的选择，事实上，code.org或者Tynker也确实是这样做的，&lt;code&gt;Blockly+interpreter&lt;/code&gt;是这类网站理想的解决方案，简单灵活。code.org和Tynker中的每个关卡都是一个典型的Blockly APP。当然如果你愿意，你也可以使用scratch-blocks来做，深圳已经有公司这样做，你可以将scratch-blocks视为Blockly的定制版（使用scratch-blocks和使用blockly几乎没有区别，我在教程里也写了这部分），只是改了积木的UI风格，但它们依然可以被当作干净的库使用，而不牵扯太多Scratch3.0的其他东西，至于generate代码的功能也完全一样&lt;/p&gt;
&lt;p&gt;假如你想做一个机器人控制/教学平台，两者都可选，目前市面上的机器人使用scratch2.0控制的居多(部分原因是Blockly出现的比较迟)。新出的机器人使用两者的都有，使用Blockly的优势，如前边说的：轻量，自由，但也意味着你要去操心更多解释和实现上的细节工作，这是个复杂的工作，有机会单独讨论；使用scratch的话，你只要专心写插件部分就好了，如果你的机器人是交互式的，比如Cozmo（我已经把它接入Scratch3中)，关于代码如何被vm解释运行，如何控制生命周期，如何支持事件和并行，scratch-vm都帮你做了！&lt;/p&gt;
&lt;p&gt;关于积木化编程工具与硬件/机器人交互的话题，涉及很多典型问题：代码灌入式的还是服务风格的？通信方式是什么？基于web控制还是基于APP控制？是否支持事件风格编程？值得专门写一片文章谈论&lt;/p&gt;
&lt;h1&gt;尾声&lt;/h1&gt;
&lt;p&gt;这篇文章，拖了好久才写完，写这篇文章的时候，我在碧山，阿朱阿碧的碧，满目山河的山，写完后，我下午该从这儿离开了，昨晚下了一夜的雨&lt;/p&gt;
&lt;p&gt;我晚上撑着伞，走过村头巷尾，路过一户人家的厨房，很旧的房子，门很小，雨很大，我在门口站了一会儿就走了&lt;/p&gt;
&lt;p&gt;上次夜里路过一户人家厨房的时候，你说着彼得潘的故事，我这回在这儿读完了彼得潘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有一个陌生的小男孩，从窗外向里张望。他的乐趣数也数不清，那是别的孩子永远得不到的。但是，只有这一种快乐，他隔窗看到的那种快乐，他却被关在了外面，永远也得不到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- 
当人们问scratch是什么是，他所期待的可能是"scratch"为何有如此的魔力，这个问题在我看来是个形而上问题，我无法回答

诗是什么的时候，你告诉它格律是什么是不够的

那么诗是什么，诗是`诗是翻译之后就消失的哪些东西`这样的俏皮话，让人会心一笑

那么阐述是什么意思，阐述意思是你可以用一件事来解释另一件事，但这是可能的吗？ 这些问题留给该死的哲学家吧

# 选型建议

积木化编程有且仅有几类问题

    *  软件 游戏引擎
    *  硬件 通信
    *  一个平台

用积木表达原语
解释、执行 vm

是不是许多事件和多线程 

硬件应该是 server

协议设计
我的手机  11:01:26
那scratch3.0是什么呢
是个blockly app
但这句话包含的信息很少

就像你问我，keras
是什么的呢，我说是一个Python项目

关于scratch，我只是说了，它包含了blockly而已

如果你是一个开发者，你会觉得我说得太少了

那么你在什么情况下选择blockly

设计出正交而富有表现力的积木 并不容易

block只是scratch的编辑器

怎么并行，把破坏控制在局部

有哪些接口，操作原语
是否需要并行
是否支持事件
交互  
解释器在哪里
是否与外部通信


事实上大多数的读者们，并不知道scratch是什么，要回答scratch是什么，最好的方法之一，是去读一读media lab的《爆裂》一书，scratch也诞生自这个实验室

阐述是一件很有趣的活动，阐述这个要求你用一件事来解释另一件事，如果你是个怀疑论者，你会说，为何我们可以用一件事去解释另一件事，这个问题留给该死的哲学家们，就我们来说，这种解释
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-30:scratch3-blockly.html</guid><category>scratch</category><category>blockly</category></item><item><title>积木化编程与智能家居</title><link>/scratch3-smart-home.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/smart-homeda856b95.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 世界是事实的总和，而非物(das Ding)的总和   -- 维特根斯坦《逻辑哲学论》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在上篇文章: &lt;a href="http://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;里写道:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的兴趣是将Scratch3.0连接到有趣的开源硬件和AI上，甚至也包括接入你童年的那辆玩具四驱车&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但你知道，&lt;code&gt;有趣的硬件&lt;/code&gt;和&lt;code&gt;开源&lt;/code&gt;有时候不是并肩而行的，好在开放似乎正在成为一种趋势和竞争优势，商家们即便不开源他们的硬件,却也为了扩大自己的影响力和市场份额，积极地以各种方式开放自己的一部分，以便与外部连接。为了让事情变得更有趣，我们决定进一步扩大Scratch3.0的连接范围，除了&lt;code&gt;开源硬件&lt;/code&gt;之外，也接入遵循标准协议或提供sdk的硬件&lt;/p&gt;
&lt;p&gt;我们最近接入的一套硬件是米家的智能家居礼品装，它长这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/scratch3-homec5c1f139.png" /&gt;&lt;/p&gt;
&lt;p&gt;套件里包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;米家多功能网关&lt;/li&gt;
&lt;li&gt;米家智能插座&lt;/li&gt;
&lt;li&gt;米家无线开关&lt;/li&gt;
&lt;li&gt;米家人体传感器&lt;/li&gt;
&lt;li&gt;米家门窗传感器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;智能家居&lt;/h1&gt;
&lt;p&gt;在这个被媒体称为&lt;code&gt;人工智能&lt;/code&gt;的时代，每个人对&lt;code&gt;智慧&lt;/code&gt;/&lt;code&gt;智能&lt;/code&gt;都能说出自己的一堆见解、偏见或幻想&lt;/p&gt;
&lt;p&gt;以至于一大堆标着&lt;code&gt;智慧&lt;/code&gt;前缀的酒瓶里，有卖假酒的、有卖碳酸饮料的、有卖来自阿尔卑斯山脉的矿物质水的，以及卖梦想的&lt;/p&gt;
&lt;p&gt;维基百科上与&lt;code&gt;智能家居&lt;/code&gt;最近的一个词条是&lt;a href="https://zh.wikipedia.org/wiki/%E6%99%BA%E6%85%A7%E5%AE%B6%E5%BA%AD"&gt;智慧家庭&lt;/a&gt;,其中这个阐述，我觉得很清晰:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;家庭自动化 (Home automation) ，是指家庭中的建筑自动化，也被称作智慧家庭 (Smart home)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比于智能，自动化的可操作性要强很多&lt;/p&gt;
&lt;p&gt;在技术视角下，今天的智能家居往往是那些用于实现家庭自动化的家庭设备，他们是一些传感器和执行器。它们与网关进行通信，所以智能家居一般作为物联网的子概念&lt;/p&gt;
&lt;h1&gt;智能家居的痛点&lt;/h1&gt;
&lt;h3&gt;碎片化&lt;/h3&gt;
&lt;p&gt;目前市面上有琳琅满目的智能家居设备，碎片化问题十分严重&lt;/p&gt;
&lt;p&gt;如维基百科所言:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然目前有很多竞争厂商，然而却没有多少世界共通的工业标准，智慧家庭空间严重的被碎片化。[2] 制造商有时会透过扣留文件以及诉讼来阻止独立的实作。[3]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些散落的设备虽然像莱布尼茨的单子一样受到欲求（appetition）的驱动（主要是受到&lt;code&gt;提高销量&lt;/code&gt;的欲求的驱动），但却不像莱布尼茨的单子那样，肯多去和其他单子交流&lt;/p&gt;
&lt;p&gt;如果你买到手的智能家居之间无法协同工作，&lt;STRIKE&gt;那它们和咸鱼有什么区别,&lt;/STRIKE&gt;那它们还怎么用来实现家庭自动化？仅仅是因为你买了A厂家的智慧灯泡，B厂家的智慧开关，你按下开关，得到的却是404，你此刻得到的除了对google的思念之外还有啥。你恨不能拿一瓶涂改液把外包装上的&lt;code&gt;智能&lt;/code&gt;改为&lt;code&gt;智障&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;智能家居目前处在诸侯割据，度量衡没有统一的战国。这个问题该如何是好？&lt;/p&gt;
&lt;h3&gt;要有光&lt;/h3&gt;
&lt;p&gt;让我们抡起技术的锤子，来看看有什么钉子值得敲一敲。&lt;/p&gt;
&lt;p&gt;对一个程序员来说，首先想到的可能是&lt;STRIKE&gt;&lt;a href="https://github.com/nvbn/thefuck"&gt;thefuck&lt;/a&gt;&lt;/STRIKE&gt;代理(proxy),我们只要把各家的硬件放在代理之下，似乎就能在上层抽象地调用它们，你在代理中去实现各个硬件的通信细节，对外都暴露统一的的接口，对于一盏灯，我至少应该能调用两种接口/服务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于功能更强的，还可以控制亮度和颜色。&lt;/p&gt;
&lt;p&gt;至于功能更强的，我还可以让它播放一首歌，购买一个商品，或是让它去兜售我的隐私,哦不对，兜售隐私似乎是个互联网软件都能做，不需要很强的功能；对于更强的，我还可以对他说&lt;code&gt;hi 神灯，我能实现你的三个愿望&lt;/code&gt;， 再做下去，功能冗杂得要像某宝和某信了，我们不需要一个伪装成操作系统的电灯：）&lt;/p&gt;
&lt;p&gt;事实上，如果一件事值得做，很可能已经有人在做它了，你与这些成熟项目的距离只差google和github。一个叫Paulus的程序员实现了上边的这些，他构建了一个叫&lt;a href="https://www.home-assistant.io/"&gt;home-assistant&lt;/a&gt;的Python程序，把各个碎片拼在了一起，home-assistant可以接入所有主流的智能家居设备&lt;/p&gt;
&lt;p&gt;home-assistant的核心是个事件系统，它使用状态机来管理设备，系统代理了设备，对外提供服务，它的架构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="架构图" src="https://d33wubrfki0l68.cloudfront.net/2b58a392636b4cd35eeb4e69c73326479ea44bda/21f5b/images/architecture/component_interaction.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于home-assistant，Paulus的&lt;a href="https://youtu.be/Cfasc9EgbMU"&gt;这个演讲&lt;/a&gt;十分精彩,视频的20:49中，Paulus熄灭hello，world文件被创建的一瞬，Paulus如同表演了一场街头魔术，观众的掌声里，Paulus的反应十分有趣: 从惊喜到羞涩再到得意。演示亲手构建的程序有时候和表演一场魔术带来的喜悦是很相似的：你对精心设计的魔法颇为自得，观众在演出里，被你带入预设的情境下，他们陷入谜团，感受震撼和惊喜&lt;/p&gt;
&lt;p&gt;home-assistant的架构和我为&lt;a href="http://blog.just4fun.site/scratch3-plugin-2.html"&gt;Scratch3插件系统&lt;/a&gt;做的架构设计十分相似&lt;/p&gt;
&lt;p&gt;这两个系统本质上都是事件系统，也都基于Python构建&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生命苦短，我用Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把事件构建在消息之上(zeromq的世界观是&lt;code&gt;everything is message&lt;/code&gt;)，我想让这个插件系统是跨语言的，而zeromq是我觉得最佳的解耦方案。Paulus选择在Python语言层做这件事，当然Paulus也做到了跨语言，通过对外提供服务实现。&lt;/p&gt;
&lt;p&gt;维特根斯坦在《逻辑哲学论》的第一个论题里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 世界就是所发生的一切东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着他阐述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 世界是事实的总和，而非物(das Ding)的总和&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他在论题2中阐述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2 那发生的东西，即事实，就是原子事实的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这或许可以解释为何事件系统和状态机拥有如此强大的表现力&lt;/p&gt;
&lt;h3&gt;自动化规则&lt;/h3&gt;
&lt;p&gt;智能家居允许你自定义规则来实现家庭自动化，你可能会定义出如下的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我到家的时候，把空调打开&lt;/li&gt;
&lt;li&gt;当我离开房间的时候，把灯关了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何为普通用户提供一个友好的的界面，让他们方便地定义规则，这不是件容易的事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;定义规则&lt;/code&gt;，听起来很适合用代码来做这件事，但大众不会编程，这句话没有指责或沾沾自喜的意味，在此我并不是说大众是麻瓜。会编程是一件挺酷的事，它极大地赋予了你创造的可能，但这个和会写作、会钢琴、会滑雪没有本质区别，你通过练习获取一项技能来取悦自己。另有些人把时间花在了博览言情小说或纸飞机制作上。每个人的际遇和兴趣各不相同，并不是所有人都有机会写代码，也不是所有人都觉得这是一件和旅行、看电影一样有趣的事。&lt;/p&gt;
&lt;p&gt;我们这些会编程的人如何为他人提供一个不错的工具，就像他们为我们提供的好看的旅行照片和影评那样，让他们解决家庭自动化的问题同时也领略编程乐趣。&lt;/p&gt;
&lt;p&gt;市面上的解决方案，我觉得都不大理想，如果你用过&lt;code&gt;米家&lt;/code&gt;你就知道我在说什么（事实上它已经是这个行业目前最好的方案之一了），在&lt;code&gt;米家&lt;/code&gt;中你为你的智能家居设备们编写规则，仿佛是在进行中文编程，一个页面只够你表达一个if-else逻辑，为了实现&lt;code&gt;如果开关打开，就把灯打开&lt;/code&gt;这个逻辑，你可能需要来回切换5、6个页面。这里只连接了2设备，只有一个if逻辑！&lt;/p&gt;
&lt;p&gt;如果你有3个房间的设备，为它们编写一天时段里的自动化规则，你可能需要先考虑升级一下大脑&lt;/p&gt;
&lt;p&gt;同样是上边的规则，我把&lt;code&gt;米家的智能家居套件&lt;/code&gt;接入Scratch3之后，可使用如下积木来表达&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/scratch3-home1eb5c560.png" /&gt;&lt;/p&gt;
&lt;p&gt;你在&lt;code&gt;米家&lt;/code&gt;里拖拽来回切换5、6个页面折腾出的东西，和上边拖2个积木表达的语义是完全相同的。但撰写规则的过程要舒服很多。不仅编程规则要直观和舒适很多，你还可以在Scratch中即时对每个不熟悉的积木做实验，而不必等你把规则一次写完才能看效果，这很像程序员使用REPL时的愉快感受。你对每个积木的属性一览无余，之后在一个界面中，去拼搭组合它们，而不必在多个页面中来回切换。撰写规则变成了轻松的堆叠积木&lt;/p&gt;
&lt;p&gt;Scratch社区有许多案例和报告，解释为何积木化是适合普通人编程的方式，关于这点，之后有空细说&lt;/p&gt;
&lt;p&gt;我们把&lt;code&gt;米家的智能家居套件&lt;/code&gt;接入Scratch3之后，它获得了更多的扩展性，诸如下边的视频里，我们演示如何让你徒手隔空为水壶通电并开灯&lt;/p&gt;
&lt;video src="http://olk8jbdzi.bkt.clouddn.com/scratch-smart-home.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;我在Scratch的舞台上中拖拽了两个按钮，当我的手在视频里按下左边的按钮，则开灯并让水壶开始烧水,而我隔空按下右边的按钮，就将它们都断电&lt;/p&gt;
&lt;p&gt;技术层面，通过运动检测来做到这点，而运动监测在scratch3里也只是一个积木块而已&lt;/p&gt;
&lt;p&gt;在Scratch3 Lab中，我们将把各类有趣的开放硬件和AI接入，允许你做各种有趣的事情,目前接入的硬件和AI在陆续增多，&lt;code&gt;米家的智能家居套件&lt;/code&gt;是我门接入智能家居的第一步&lt;/p&gt;
&lt;h1&gt;空间编程&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;空间编程&lt;/code&gt;是一个让我着迷的概念，你的空间会对你的行为做出相应的反应，诸如在你的房间里，当你睡觉的时候，灯光自动熄灭，当你起床时，窗帘自动打开。&lt;/p&gt;
&lt;p&gt;可如何判断你何时是"睡觉模式"呢？&lt;/p&gt;
&lt;p&gt;你当然可以用一些生物传感器来做(事实上我正准备买这些东西)，或者简单地使用机器视觉来做，你可以教会机器什么时睡觉模式，诸如你躺下盖了被子时候，告诉Scratch这是睡觉状态，起床掀开被子后告诉Scratch，这是起床模式，这变成了一个很简单的二值分类问题，你需要的样本数据和计算量都很小，目前在本地网页里很轻松就做到了，如果使用我之前设计的Scratch插件系统，更复杂的机器视觉可以移到另一台机器做也没问题，对用户你只需暴露出Scratch3的积木。这块我在自己的房间里实现了，目前还没有上线到Scratch3 Lab。&lt;/p&gt;
&lt;p&gt;为一个空间编程常常需要AI和物联网的配合&lt;/p&gt;
&lt;p&gt;AI善于提取出模式，对这个模式做出怎样的响应，可以通过调度物联网里的硬件实现。而空间所拥有的智慧，则是这些彼此响应的事件关系网。&lt;/p&gt;
&lt;p&gt;我和几个朋友一起在南京开了家青旅，开业小半个月，还蛮热闹的，我们想在这个空间里做一些好玩的尝试。我们都是二楼南书房的忠实粉丝，我们在青旅里做了很多有意思的小空间，让大家方便看书和讨论，也会定期组织一些周末沙龙和电影放映活动。如果你也喜欢看书或旅行，你有好的想法，都欢迎过来玩&lt;/p&gt;
&lt;p&gt;我准备在青旅里边做一些有意思的空间编程尝试，诸如当你夜里坐下翻开书的瞬间，灯才为你打开，而你合上书思考的时候，灯将熄灭，你将沉浸在自己的世界里 ：）&lt;/p&gt;
&lt;p&gt;Just for fun&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-22:scratch3-smart-home.html</guid><category>scratch</category><category>blockly</category></item><item><title>Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目</title><link>/Scratch3-Lab.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/scratch305c5e1ac.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想走得快，一个人走; 如果你想走得远，一群人走&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;hi 大家好，我们最近在构建一个好玩的项目&lt;/p&gt;
&lt;p&gt;我在前边花了两篇文章在架构上论述了如何为Scratch3.0设计一个通用的插件系统，让Scratch3.0能与物理世界的万物互联，并为它们编程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/scratch3-plugin-1.html"&gt;为Scratch3.0设计的插件系统(上篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/scratch3-plugin-2.html"&gt;为Scratch3.0设计的插件系统(下篇)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个通用的插件系统已基本完成，最近在做一些收尾的工作、重构以及撰写文档，我们之后计划将它开源并围绕它构建社区，如此一来，将你感兴趣的硬件接入Scratch3.0，将成为一件有趣的举手之劳&lt;/p&gt;
&lt;p&gt;利用这个插件系统，我们已将cozmo和microbit接入到scratch3中。你可以让cozmo、microbit与scratch3.0中的所有积木互动，做出令人惊叹的效果，边界是你的想象力！我们正将这两个项目作为插件案例，写入文档，向开发者们描述如何利用插件系统，通过短短的数行代码，将你的新硬件或任何其他好玩的东西接入Scrach3.0&lt;/p&gt;
&lt;p&gt;我们的兴趣是将Scratch3.0连接到有趣的开源硬件和AI上，甚至也包括接入你童年的那辆玩具四驱车&lt;/p&gt;
&lt;h1&gt;Scratch3 Lab&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch3.just4fun.site/"&gt;Scratch3 Lab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
以上其实是同一个网站，都是Scratch3 Lab。如果你能打开第一个地址最好不过了，服务器在香港，国内可能不能访问。因为这个原因，我顺便把Scratch3 Lab部署到了github上，国内还算稳定，方便大家访问。

最后一个地址是http的，用于测试http和https的差异，我们希望插件系统能尽可能支持更多的网站。Scratch3 Lab主要用于做各种好玩的实验--&gt;

&lt;p&gt;由于没在国内备案，带来的不便给各位道歉。当然，该道歉的也许不该是我们 ：）&lt;/p&gt;
&lt;p&gt;如果你有什么有趣的东西想接入Scratch3，欢迎与我们联系，如果我们也觉得好玩，可能会和你一起将它接入Scratch3，如果我们兴趣不大，那欢迎你自己亲自动手啦&lt;/p&gt;
&lt;p&gt;我们的口号是: Just for fun&lt;/p&gt;
&lt;h3&gt;技术视角&lt;/h3&gt;
&lt;p&gt;Scratch3 Lab采用Scratch官方最新的源码，使用官方的develop分支，我们尽量做到每个月都跟进官方的开发分支，如果有一些有趣的特性，我们会采用更快的更新频率&lt;/p&gt;
&lt;p&gt;Scratch3 Lab目前已经以extensions的形式整合了2个硬件插件和一个图像识别插件，一个文本情感分析插件，一个语音插件，一个运动检测插件&lt;/p&gt;
&lt;p&gt;AI相关的几个项目来自MIT media lab，我们之后准别采用他们的思路来接入国内好玩的AI平台，此外跑在本地的AI也是我们的关注方向。&lt;/p&gt;
&lt;p&gt;我们想让这个项目在没有互联网的环境也能正常使用，所以我们尽力做出替代云的AI插件，至少不影响概念的讲解和教学，当然趣味性也不能少，关于这一点，AI社区已经有很多有趣的尝试，这部分有空细说。我们这样做的目标是让Scratch3 Lab能完全跑在树莓派上，这样即便没有网络的贫困山区，也能完整得到极具趣味和表现力的Scratch3&lt;/p&gt;
&lt;p&gt;目前我们正在接入IoT(通过mqtt)和BB8(通过web bluetooth)，物联网也是Scratch3的兴趣之一&lt;/p&gt;
&lt;h1&gt;插件系统&lt;/h1&gt;
&lt;p&gt;目前你可以看到插件系统的文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;更新&lt;/h1&gt;
&lt;p&gt;Scratch3 Lab目前是&lt;a href="https://www.codelab.club/"&gt;codelab&lt;/a&gt;的一部分&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Just for you :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-04-08:Scratch3-Lab.html</guid><category>scratch</category></item><item><title>为Scratch3.0设计的插件系统(下篇)</title><link>/scratch3-plugin-2.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="http://blog.just4fun.site/scratch3-plugin-1.html"&gt;上篇文章&lt;/a&gt;里，关于Scratch3.0如何与外部硬件(设备/玩具)通信，我们梳理了社区里的常见做法&lt;/p&gt;
&lt;p&gt;在这篇文章中，准备写写我的架构设计,文中会给出架构图，解释这样设计的原因，以及不采用目前主流做法的原因。&lt;!--unix哲学--&gt;&lt;/p&gt;
&lt;h1&gt;设计原则与初衷&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;编程是伪装成艺术的科学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近来在编程方面，对我影响最深的一本书是《ROS机器人编程实践》。在这本书里，我们看到通过遵循Unix哲学可以构建出何等强大、灵活而简单的系统(Unix哲学在《Unix编程艺术》中被阐述得很精彩)&lt;/p&gt;
&lt;p&gt;当然，ROS的&lt;code&gt;简单&lt;/code&gt;，是指它在面对所处理的问题时，已尽可能地简单，这个系统本身还是有一定复杂度的。当我们在说《哲学问题》把哲学阐述如此清晰、简单时，其中的简单也是这个意思。你不能指望一本书能把N-S方程的推导过程讲解得和天线宝宝的情节一样简单。如果有作者声称他能，要么他是骗子，要么他是疯子，要么他是伯特兰·罗素&lt;/p&gt;
&lt;p&gt;Unix哲学里鼓励如何构建一个系统呢？&lt;/p&gt;
&lt;p&gt;我很喜欢&lt;a href="https://github.com/booksbyus/zguide"&gt;zguide&lt;/a&gt;（zguide是ZeroMQ的教材，写得几乎和ZeroMQ这个项目一样出色）中的这个阐述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The physics of software is not algorithms, data structures, languages and abstractions. These are just tools we make, use, throw away. The real physics of software is the physics of people--specifically, our limitations when it comes to complexity, and our desire to work together to solve large problems in pieces. This is the science of programming: make building blocks that people can understand and use easily, and people will work together to solve the very largest problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为社会成员的我们，在遇到一个高度复杂的问题时，我们会群策群力，分工合作，将问题拆分为若干个部分，一起解决。这里就体现了编程的科学：创建一组小型的构建模块，让人们易于理解和使用，那么大家就会一起用它来解决问题。&lt;/p&gt;
&lt;p&gt;想想你的Unix工具箱中的grep/find/awk/sed组合起来时何等地强大。当一堆的小工具能彼此沟通时，事情就变得有趣了。&lt;/p&gt;
&lt;p&gt;和ROS一样，我们鼓励社区的参与，我们想设计一个开放的系统，允许更多的插件加入进来，允许你去连接更多有趣的设备，在这个架构中鼓励人们重用社区的经验，在别人的基础上工作，也方便人们将自己的工作分享给社区。&lt;/p&gt;
&lt;p&gt;我们不想构建一个封闭、精致且庞大的系统。&lt;/p&gt;
&lt;h1&gt;插件系统功能描述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;连接scratch3.0与来自物理世界的各种硬件及开放系统&lt;/li&gt;
&lt;li&gt;可以配合scratch3.0官方网站使用。自行架设的scratch3.0网站如果与官方插件系统兼容，那么你也能直接使用这套插件系统。就是说等scratch3.0发布之后，任何采用官方扩展机制的网站，都能使用这套插件系统，而无须hack核心源码&lt;/li&gt;
&lt;li&gt;允许你为系统写扩展插件，将任何你能操控的系统接入Scratch3.0中&lt;/li&gt;
&lt;li&gt;当然如果你有兴趣，甚至可以把这套系统接入Scratch3.0之外的地方，比如你想把它接入Blockly或者node-red中，插件系统虽然最初是为Scratch3.0而做，但Scratch3.0并不特殊，它仅仅是一个消息订阅者和发布者而已&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;项目的架构思路主要来自ROS(Robot Operating System)。ROS是个复杂系统，当今世上有趣和复杂机器人大多都运行着ROS，从国际空间站的R2机器人到一些路上自动驾驶的汽车。我觉得ROS系统中处理的很多问题，在使用Scratch驱动外部设备/机器人时也会遇到，尤其当你不甘于只是简单地灌入代码、想做出交互性更好的机器人时(比如Cozmo)。这些问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传感器的数据发布机制；&lt;/li&gt;
&lt;li&gt;服务(service)与动作(action)的区分，以及各自处理的问题；&lt;/li&gt;
&lt;li&gt;如何重用消息结构，让一套积木块能将相同的语义传递给不同的硬件，只需调整最末端的驱动代码便可控制天上飞的、地上走的、水里游的。&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cozmo显然就是利用这些概念构建了令人惊叹的操作体验&lt;/p&gt;
&lt;p&gt;我最近在构建一个叫ROLS(Robot Operating Lite System)的项目，从名字可以看出，这个项目是想做个轻量级的ROS,目前只开了个坑:&lt;a href="https://github.com/wwj718/ROLS"&gt;ROLS&lt;/a&gt;。在github上创建项目的动机常常是，想到了一个好名字，不知道你们有没有这种情况&lt;/p&gt;
&lt;p&gt;ROS的作者也在重写这个项目，如他自己在ROS2.0的设计文档中说的其实ROS的核心是一个&lt;code&gt;匿名的发布-订阅中间件系统&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本文为Scratch3.0设计的插件系统本质上便是一个匿名的发布-订阅中间件系统，组件之间通过消息彼此沟通。系统中所有的节点都对等，即便是Scratch3.0也不特殊。&lt;/p&gt;
&lt;p&gt;至于为这个系统提供更多好用的小工具(诸如roscore、rosrun、rostopic等)，我会在&lt;a href="https://github.com/wwj718/ROLS"&gt;ROLS&lt;/a&gt;中陆续折腾出来它们的轻量级替代品&lt;/p&gt;
&lt;h1&gt;架构图&lt;/h1&gt;
&lt;p&gt;&lt;img alt="scratch3.0插件系统" src="http://olk8jbdzi.bkt.clouddn.com/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们自上往下看。&lt;/p&gt;
&lt;p&gt;首先看Scratch3.0部分。在Scratch3.0中，我们需要写一个js插件，这个插件就像特洛伊木马，作为我们的&lt;code&gt;内应&lt;/code&gt;，之后它将负责与外部沟通。如果你对这部分不熟悉，应该先去看看官方文档:&lt;a href="https://github.com/LLK/scratch-vm/wiki/Scratch-3.0-Extensions-Specification"&gt;Scratch 3.0 Extensions Specification
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这部分是Scratch3.0的原生扩展机制。目前官方已经完成了好几个扩展，有兴趣的话，可以自行阅读源码。其中wedo2的扩展很值得一读。&lt;/p&gt;
&lt;p&gt;你在Scratch3.0中写js扩展时，除了要定义出积木块的样式之外，还需要定义出opcode(语义)和它的具体实现，这部分将在vm中执行，我们参考了wedo2的机制，采用
socketio来传递消息(当然你也可以直接使用websocket)。&lt;/p&gt;
&lt;p&gt;插件系统中有一个websocket server(这个架构很像jupyter)，与vm进行双向通信。&lt;/p&gt;
&lt;p&gt;websocket server采用zeromq来sub/pub消息&lt;/p&gt;
&lt;p&gt;而每个硬件被程序代理，代理程序也采用zeromq来sub/pub消息&lt;/p&gt;
&lt;p&gt;系统看去有些啰嗦，比如代理程序似乎是不必要的。如果你为scratch3.0写过插件，你可能会想，我们为何不把websocket server视为vm的延伸，如果vm的概念延伸到物理机器上，不就具备了和硬件交互的能力！(已经从浏览器蔓延到了系统进程中)那么为何还需要多一层硬件代理。原因是为了构建一个匿名的发布-订阅系统，以便解耦和重用。&lt;/p&gt;
&lt;h3&gt;具体实现&lt;/h3&gt;
&lt;p&gt;上图是一张语言无关的架构图，你可以用任何你喜欢的语言去实现它，下边说说我们目前自己的实现（这部分由@izuo和我一起实现）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://olk8jbdzi.bkt.clouddn.com/%E6%88%91%E7%9A%84%E5%AE%9E%E7%8E%B0.png" /&gt;&lt;/p&gt;
&lt;p&gt;在少儿编程领域，microbit，scratch，Cozmo是我最喜欢的三个项目，所以我们第一步先做了microbit的scratch插件 ，下一步计划是把cozmo也带入scratch中&lt;/p&gt;
&lt;p&gt;相比于js，我更偏好python，所以在具体实现上，我没有选择electron，而是使用python来构建，之后使用pyinstaller打包分发到各个平台 (目前我们完成了mac系统和win10系统的打包，更多的环境还在陆续添加，因为scratch3.0正式发布还远，所以平台兼容这块，倒也不急，但会考虑服务于国内教育环境(比如对windows 32位系统的兼容))&lt;/p&gt;
&lt;!--
我们要做什么: 为scratch构建插件系统，使其能与物理世界连接
--&gt;

&lt;h1&gt;why and why not&lt;/h1&gt;
&lt;p&gt;原本想回答一些why的问题，这些问题我和@izuo讨论了许多，但一时半会可能也不好说清，天色已晚，今天写几个对why not的思考，就该睡了。&lt;/p&gt;
&lt;h3&gt;why not Web Bluetooth&lt;/h3&gt;
&lt;p&gt;Web Bluetooth个很棒的方案，我们目前正在这块做一些实验，Web Bluetooth让vm可以直接与硬件交互！&lt;/p&gt;
&lt;p&gt;这个方案另一个好处是对移动端友好，安卓中你甚至只需要浏览器，就能控制硬件，ios中，浏览器目前不支持 Web Bluetooth，你需要包装成app。apple正在成为过去的微软&lt;/p&gt;
&lt;p&gt;不过并非所有人都喜欢蓝牙，也不是所有场景都适合蓝牙，如果我们想把cozmo和microbit接入scratch，我们就做不到（microbit通过一些方式可能能做到，不过会有一些其他问题）&lt;/p&gt;
&lt;p&gt;要把bb8接入，倒是做得到的，bb8支持ble(Web Bluetooth需要ble)&lt;/p&gt;
&lt;p&gt;此外值得一提的是，来自国内的mCookie用到了Web Bluetooth的策略.此外有趣的是他们用了NW.js而不是electron&lt;/p&gt;
&lt;h3&gt;why not chrome serial&lt;/h3&gt;
&lt;p&gt;这也是个有趣方案，我们也在关注和实验&lt;/p&gt;
&lt;p&gt;这个方案对chrome的版本要求比Web Bluetooth低，对老机器支持比较好，不过需要安装浏览器插件&lt;/p&gt;
&lt;h3&gt;为何不在websocket server中直接操控硬件&lt;/h3&gt;
&lt;p&gt;除了前头解释过的原因之外，还有一个异步执行的问题，这个问题我在jupyter的架构中讨论过，有兴趣的话可以翻翻那篇文章。jupyter和我们遇到相似的问题，这部分的架构也基本一样&lt;/p&gt;
&lt;h3&gt;采用基于消息的架构，对社区有什么好处&lt;/h3&gt;
&lt;p&gt;最坏情况下(比如大家没有好的协同习惯)，社区依然能够共享大多的经验，因为架构强行使用消息来通信，你可以看到任何组件是如何收发消息的(通过源码或是类似rostopic的工具)。而在最好的情况下，如果大家都共用消息结构，引入一个新的硬件，你通常只需要需要修改最底层驱动的几行代码&lt;/p&gt;
&lt;p&gt;这种架构的灵活性，ROS已经向我们充分显示了。当然设计出色且通用的消息体又是另一个话题了&lt;/p&gt;
&lt;h3&gt;为何要做成一个开放的系统，而不是发布一个针对某个具体产品的软件&lt;/h3&gt;
&lt;p&gt;我不喜欢封闭的系统&lt;/p&gt;
&lt;p&gt;我们处在一个封闭、占地为王、屁股决定脑袋的世界。open source、重用、fork...这些概念在软件行业之外的领域，受到猛烈抨击。如果你在开源社区之外去做这些事，不只是政治不正确，你还可能吃官司。关于这些话题，到处都是屁股决定脑袋的言论&lt;/p&gt;
&lt;p&gt;我们喜欢scratch社区的口号：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--
# todo
思考对移动端的支持: web bluetooth等

如果你对Scratch3.0已有的插件机制不熟悉，恐怕这篇文章无法教会你用Scratch3.0来驱动硬件

why

在这个架构之下 scratch也仅是一个组件而已

raspberry4pi

vm的延迟

就像很多人会怀念忙碌的高中一样
如果你不知道要干嘛

关注是差异的开始

驯服 建立联系
订阅

一些你可能会遇到的坑

如果你的硬件和cozmo一样复杂

mblock的做法  通讯变量
你需要ros

‌你不能指望一本书能把傅立叶讲解得和天线宝宝的情节一样简单
‌如果作者说它能
‌要么他是个骗子 要么他是个疯子  要么他是波特兰罗素
‌
‌
scratch源码是复杂的 

它复杂到 甚至发了izuo不短的一段时间去理解它
‌要么这个作者是罗素
‌要么
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-03-26:scratch3-plugin-2.html</guid><category>scratch</category></item><item><title>为Scratch3.0设计的插件系统(上篇)</title><link>/scratch3-plugin-1.html</link><description>&lt;blockquote&gt;
&lt;p&gt;我们每个人在内心深处都怀有一个梦想: 希望创造出一个鲜活的世界，一个宇宙。处在我们生活的中间、被训练为架构师的那些人，拥有这样的渴望: 在某一天，在某一个地方，因为某种原因，创造出了一个不可思议的、美丽的、摄人心魄的场所，在那里人们可以漫步，可以梦想，历经很多世纪绵延不绝.  --Christopher Alexander&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Scratch是一个游乐场&lt;/h1&gt;
&lt;p&gt;在我心目中，Scratch便是这样的一个美丽的场所，孩子们和保持着童真的成年孩子们在其中漫步、游戏以及梦想。Ta们在Scratch这个游乐场中创造并分享着乐趣&lt;/p&gt;
&lt;p&gt;&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;是一个伟大的项目，无论从它最初的愿景(在&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;A Networked, Media-Rich Programming Environment to Enhance Technological Fluency at After-School Centers in Economically-Disadvantaged Communities&lt;/a&gt;这篇提案中有详述最初的构想和愿景），还是它后来的实现，无论就它的软件设计，还是项目影响力而言，都堪称杰作。&lt;/p&gt;
&lt;p&gt;如果你对Scratch的前世今生感兴趣，可以翻翻我之前的这篇文章:&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;, 当时刚读完《爆裂》，借助《爆裂》一书提供的线索和借助互联网，我沿着理念传承这条线，从雷斯尼克的Scratch追溯到派珀特的Logo语言，之后抵达皮亚杰的认知论（再往前甚至将追溯到洛克的经验论）&lt;/p&gt;
&lt;p&gt;将于今年8月发布的Scratch3.0无疑将延续这个传统，继续做出振奋人心的东西。&lt;/p&gt;
&lt;p&gt;Scratch是个游乐场，而且是一个设施完善的游乐场，你可以在其中发挥天马行空的想象力，创造出属于你的世界。&lt;/p&gt;
&lt;h1&gt;Scratch是个像素世界&lt;/h1&gt;
&lt;p&gt;唯一的遗憾是，这个世界以像素的形式出现。当然你可能觉得这哪是什么遗憾，像素世界比身边这个原子世界广阔多了。去过四维空间的人，回到三维空间，即便漂浮于太空，外面是浩瀚的星空，仍会觉得逼仄得很，一些人的星辰大海只不过是囚禁另一些人的牢笼。这是一种患有幽闭恐惧症的感受。同样，如果你在虚拟世界浪荡久了，回到现实中来，可能也会觉得匮乏，饭居然是要一口一口吃的！我明明都已经完整吃了一口了，这个世界甚至都不提供一个for循环积木块！&lt;/p&gt;
&lt;p&gt;但现在是三月，江南的三月，鸡鸣寺樱花盛开的三月，站在鸡鸣寺下、玄武湖前的樱花树下，无论阴雨还是春风，你都很难不被这个由原子而非像素构成的世界所打动。&lt;/p&gt;
&lt;p&gt;虽然这个原子世界的确可能就是像素构成的...anyway，先抛开你的怀疑论，让我们进入正题。&lt;/p&gt;
&lt;p&gt;我们说了这个多科幻的内容，正题并不是你期待的《三体》，这篇文章准备讨论的是如何为Scratch3.0构建一个通用的插件系统，让Scratch3.0能与来自物理世界的硬件打交道&lt;/p&gt;
&lt;p&gt;我们准备构建一个通道，连接原子和像素世界&lt;/p&gt;
&lt;h1&gt;来自物理世界的硬件&lt;/h1&gt;
&lt;p&gt;物理世界有许多参数，诸如温度、湿度、磁场、速度、光照强度...以及，你喜欢的姑娘身上特有的香味&lt;/p&gt;
&lt;p&gt;这些参数可以被各种各样的传感器所捕获(你身上的绅士风度属于不可知论范畴，不能被物理参数描述)，一旦你能捕捉到现实世界的各种参数，你就能做出许许多多好玩的东西，诸如，通过捕捉楼道的声音，你可以做到: 当楼道里有声响时，把楼道里的灯打开，这样一来你就做出了声控灯。可是你不想白天楼道里也亮着灯，怎么办呢？ 你可以把光照的信息也捕捉了，这样一来你就可以在光线不足且有人经过的时候才开灯,这样一来就节约了电力。注意我说的是光线不足就开灯，而不是晚上，为什么呢，因为我们希望光线昏暗的时候，都能为行人提供照明，而不只是晚上，我们通过获取光线而不是根据昼夜时间来决定是否亮灯。这样系统可以在大白天里黑云压城的时候，也能贴心地为行人亮起灯，这便是所谓的"科技以人为本"&lt;/p&gt;
&lt;p&gt;Scratch是个教育项目，如果它能更多地和现实发生关联，一个孩子在Scratch中创作的作品，能对接到各种硬件，在Ta现实中被使用，这些作品帮助了Ta的父母和邻居解决生活问题，Ta的学习热情将将被噼里啪啦点燃。关于这方面的描述，PC之父Alan Curtis Kay和LOGO语言之父Papert都有过精彩论述&lt;/p&gt;
&lt;p&gt;我们结下来要做的，就是实现这样一种架构，在这个架构之下，各种硬件(小车、四轴飞行器、cozmo、microbit、Circuit Playground Express)都能与Scratch3.0交互，而且这个架构将基于消息，利用pub/sub的机制，降低构件的耦合，提高系统健壮性和可重用性&lt;/p&gt;
&lt;h1&gt;为Scratch3.0设计的插件系统&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Make everything as simple as possible, but not simpler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Scratch3.0&lt;/h3&gt;
&lt;p&gt;Scratch3.0基于html5构建，能轻松支持多平台运行，十分可期，而且带来了多项有趣的改进。目前的开发版可以在&lt;a href="https://llk.github.io/scratch-gui/"&gt;这儿尝鲜&lt;/a&gt;. 对源码有兴趣的小伙伴，想围观或者参与，都可以&lt;a href="https://github.com/LLK"&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;社区里不少公司已经用Scratch3.0作出了许多令人惊叹的东西，Cozmo是其中的佼佼者&lt;/p&gt;
&lt;p&gt;Scratch3.0原计划在今年春季正式发布，春天来了，樱花如期盛开，Scratch3.0却跳票了，推迟到8月份发布&lt;/p&gt;
&lt;p&gt;人面不知何处去，桃花依旧笑春风&lt;/p&gt;
&lt;h3&gt;Scratch3.0的插件机制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;自由有时候是一种负担&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的目标是为Scratch3.0做一个插件系统，准确地说是做一个连接Scratch3.0与外围硬件的插件系统.&lt;/p&gt;
&lt;p&gt;Scratch3.0已经有它自己的插件机制。Scratch3.0的插件机制比较简单，它允许你写一个自己的插件，这个插件在UI层面表现为自定义的积木块，你在积木块中定义好自己的原语(opcode),之后这个积木块和Scratch中默认的积木块一样，可以被用户拿来拼拼搭搭。用户拼搭的过程中，积木块的组合形式也就是&lt;code&gt;程序&lt;/code&gt;将语义以json的形式传到&lt;a href="https://github.com/LLK/scratch-vm"&gt;scratch-vm&lt;/a&gt;,它们在vm中被解释运行，至于你在页面上看到的小猫的运动和声音，则是scratch-vm中程序的output：output的具体实现是&lt;a href="https://github.com/LLK/scratch-audio"&gt;scratch-audio&lt;/a&gt;和&lt;a href="https://github.com/LLK/scratch-render"&gt;scratch-render&lt;/a&gt;的东西.这些属于实现细节，跟着官方的插件走一遍就行。&lt;/p&gt;
&lt;p&gt;如果你熟悉scratch2和&lt;a href="https://github.com/LLK/scratchx"&gt;scratchx&lt;/a&gt;项目，你会发现，scratch3.0的插件机制和之前相似&lt;/p&gt;
&lt;p&gt;从上边的描述中，我们可以发现，Scratch3.0的插件机制对于你应该如何与外部硬件设备交互，啥都没说。&lt;/p&gt;
&lt;p&gt;在官方的插件机制中，你有极大的自由，因为它无为而治。有时候自由是一种负担，自由意味着你自己得作出选择，并承担所有的风险。&lt;/p&gt;
&lt;h3&gt;官方的尝试&lt;/h3&gt;
&lt;p&gt;说官方对Scratch3.0如何与外部硬件设备交互只字未提，可能会遭到官方的反驳，毕竟他们为乐高的wedo2机器人写了一个Scratch3.0插件（目前源码已经基本完成了，只是官方没有启用这个插件），通过这个插件，我们可以在Scratch3.0中操控wedo2机器人。这个插件的源码向你展示了Scratch3.0是如何与硬件交互的，但这个插件也还是缄默多于言说，目前开发文档几乎保持空白，Scratch官方似乎在有一种向维特根斯坦的恶意模仿&lt;/p&gt;
&lt;p&gt;wedo2的源码很好读，写的也漂亮，虽说乐高赞助了mit media lab一个教授席位，但wedo2的源码并没有获得特殊待遇，而是用了标准的插件机制。如前所述，插件提供了wedo2的编程积木块，这些积木块的语义将传递到scratch-vm中执行，其中最关键的一步是通过socketio将语义传递给硬件。当然上边的说法过于笼统，我跟踪了这个过程，websocket管道的那端并不是直接连着wedo2机器人，而是连着一个本地插件，这个本地插件接着通过蓝牙连接wedo2. 这个本地插件本质上是个代理。&lt;/p&gt;
&lt;p&gt;我之前的的blockly4pi和wedo2的设计几乎一样，这个项目之后我应该会开源出来，之前在jupyter的架构分析的文章中提到过，如果你有兴趣可以翻阅我之前的文章&lt;/p&gt;
&lt;h3&gt;社区的尝试&lt;/h3&gt;
&lt;p&gt;在说我的设计之前，我们来看看社区上已有的方案&lt;/p&gt;
&lt;p&gt;目前把Scratch3.0玩得很溜的，国外有Cozmo，而国内有makeblock和kittenbot&lt;/p&gt;
&lt;p&gt;我去年长途旅行经过深圳时，和makeblock和kittenbot在Maker Faire上碰过面，两个团队都非常优秀&lt;/p&gt;
&lt;h4&gt;Cozmo&lt;/h4&gt;
&lt;p&gt;先从Cozmo说起，Cozmo一骑绝尘，从产品、sdk源码到体验都惊艳之极。Cozmo的目前只公开了python SDK源码，从源码中我们可以看出，Cozmo的server里藏有一个ROS（Robot Operating System），这个ROS应该在它的APP里，这也是它为何如此依赖于APP的原因以及APP如此臃肿的原因。而它的Scratch3.0界面与它的ROS通信，我接下来准备提出的插件架构，本质上是我对Cozmo架构的猜想，因为它的源码未开放，我暂时没办法验证，但我们可以断言的是，cozmo的scratch是以消息的方式与硬件交互的（这是ROS系统的核心），这和wedo2很像，实际上在这一类项目目前只有两种架构风格。大分类下，wedo2和cozmo属于一类，下边我们要说的makeblock和kittenbot是另一类&lt;/p&gt;
&lt;p&gt;我最近花了1.5个周末读完《ROS机器人编程实践》才理解了Cozmo的架构设计（至少在逻辑上），这里边的很多问题，并不是Scratch图形化编程的问题，而是ROS的问题，所以至今Cozmo并无对手。毫无疑问，Cozmo对Scratch3.0的应用上也是一骑绝尘的。这让人想起那句称赞约翰·麦卡锡的那句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;巨人随手丢下的鹅软石都是巨石&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;mblock&lt;/h4&gt;
&lt;p&gt;接下来我们说说makeblock对Scratch3.0的应用，这里我们只关心mblock操作程小奔（硬件机器人）相关的部分，AI和DL部分有空再说&lt;/p&gt;
&lt;p&gt;插个题外话，mblock中有许多精彩的工作，其中我最喜欢的一个部分是，他们顺利做到让microbit支持多任务(甚至事件)，这个microbit官方目前都还做不到（在python中），实现机制十分精巧，经过逆向分析，我们可以看到具体的代码实现（实际是用正则做预处理），不过即便不通过逆向分析，我们通过观察积木块生成的python代码，也能猜到预编译的机制，关于这块我们之后有空再说&lt;/p&gt;
&lt;p&gt;mblock对硬件的操作是通过将scratch3.0积木generate出python代码来做的，之后将代码灌入他们的硬件机器人（程小奔）中，也就是说在mblock中，Scratch3.0被当作blockly来使用(典型的blcokly app风格)。此外值得一提的是，mblock中有一个叫做&lt;code&gt;通讯变量&lt;/code&gt;的概念，这个概念很有趣，它能把硬件和scratch连通。限于篇幅和我困了，也之后再说&lt;/p&gt;
&lt;p&gt;程小奔使用micropython构建，可能是目前最大的micropython项目之一，关于硬件这块，这里也没空多说，前头废话说了太多，对不起诸位。我们之后找个时间来说说mblock是如何使用esp32板子做出程小奔的，当然很多部分是我的实验加猜测，毕竟源码mblock还没有开放。&lt;/p&gt;
&lt;p&gt;mblock和程小奔在工程上都是漂亮的作品，给工程团队打call！&lt;/p&gt;
&lt;h4&gt;kittenbot&lt;/h4&gt;
&lt;p&gt;小喵家的公众号我一直是关注的，小喵们做了许多geek且有趣的工作。团队人不多，但做出的东西却很赞！此处星星眼&lt;/p&gt;
&lt;p&gt;kittenbot之前是open source，新的版本似乎没开放，不过mblock和kittenbot对开源社区都很友好，之后会开放也未可知。&lt;/p&gt;
&lt;p&gt;kittenblcok中之前对microbit的操作也是generate成python再灌入的，这点和mblock相似。最近我没怎么用kittenblcok，不知道最近是不是有调整，等我有空试完再补充。&lt;/p&gt;
&lt;h3&gt;我的设计&lt;/h3&gt;
&lt;p&gt;写到这里都半夜了，只好把这篇文章拆分为二了，有空再来补上我的自己的插件架构设计&lt;/p&gt;
&lt;p&gt;在这个设计之上，我们已经作出了一个具体的实现(scratch3.0和microbit的互操作)，准备以软件包的形式发布(正在制作)，可见我们是吃自己的狗粮的&lt;/p&gt;
&lt;p&gt;架构层面主要受ROS和jupyter的影响&lt;/p&gt;
&lt;p&gt;我们下篇里见&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;!--
如果你对Scratch3.0已有的插件机制不熟悉，恐怕这篇文章无法教会你用Scratch3.0来驱动硬件

why

在这个架构之下 scratch也仅是一个组件而已

raspberry4pi

vm的延迟

就像很多人会怀念忙碌的高中一样
如果你不知道要干嘛

关注是差异的开始

驯服 建立联系
订阅

一些你可能会遇到的坑

如果你的硬件和cozmo一样复杂

mblock的做法  通讯变量
你需要ros

‌你不能指望一本书能把傅立叶讲解得和天线宝宝的情节一样简单
‌如果作者说它能
‌要么他是个骗子 要么他是个疯子  要么他是波特兰罗素
‌
‌
scratch源码是复杂的 

它复杂到 甚至发了izuo不短的一段时间去理解它
‌要么这个作者是罗素
‌要么
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-03-20:scratch3-plugin-1.html</guid><category>scratch</category></item><item><title>blockly开发之使用python驱动浏览器中的turtle(2)</title><link>/blockly-dev-python-browser-turtle.html</link><description>&lt;p&gt;这篇文章我们将使用blockly来做一个完整的项目。&lt;/p&gt;
&lt;p&gt;这篇教程涵盖以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从拼搭好的积木块中，生成(generate)python代码&lt;/li&gt;
&lt;li&gt;自定义自己的积木块, 并生成对应python代码&lt;/li&gt;
&lt;li&gt;在浏览器中运行python代码&lt;/li&gt;
&lt;li&gt;整合以上部分，使用积木块驱动turtle&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;效果展示&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://olk8jbdzi.bkt.clouddn.com/blockly_turtle.gif" /&gt;&lt;/p&gt;
&lt;p&gt;生成的代码为:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly7f8f7d33.png" /&gt;&lt;/p&gt;
&lt;h1&gt;关于turtle&lt;/h1&gt;
&lt;p&gt;turtle是编程教学中的一个经典概念(另一个经典概念是&lt;code&gt;猫&lt;/code&gt;(来自Scratch))，turtle最初由Papert在他的&lt;a href="https://zh.wikipedia.org/zh-hans/Logo%E8%AF%AD%E8%A8%80"&gt;Logo语言&lt;/a&gt;引入，Logo内置一套海龟绘图（Turtle Graphics）系统，通过向海龟发送命令，用户可以直观地学习程序的运行过程，关于这块的历史沿革，可以参考我之前的文章&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;利用blockly generate python代码&lt;/h1&gt;
&lt;p&gt;如何使用blockly generate代码，我们已经在&lt;a href="http://blog.just4fun.site/blockly-dev-run-code.html"&gt;blockly开发之生成并运行js代码(1)&lt;/a&gt;做了手把手教学。&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://blog.just4fun.site/blockly-dev-run-code.html"&gt;blockly开发之生成并运行js代码(1)&lt;/a&gt;中，我们将积木块generate成js代码。blockly默认支持将积木块generate成以下6种代码:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在&lt;a href="https://blockly-demo.appspot.com/static/demos/code/index.html"&gt;Code Editor&lt;/a&gt;中体验&lt;/p&gt;
&lt;p&gt;本章的目标是generate出python代码，过程十分简洁，你只需要做2件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入&lt;code&gt;python_compressed.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;generate出python代码:&lt;code&gt;var code = Blockly.Python.workspaceToCode(demoWorkspace);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完整的代码参考:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_3_1_generate_python/index.html"&gt;blockly_3_1_generate_python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你要做的只有这些&lt;/p&gt;
&lt;h1&gt;自定义自己的积木块&lt;/h1&gt;
&lt;p&gt;blockly只提供了基础的积木块（基本的语言结构），你常常需要定义自己的积木块。&lt;/p&gt;
&lt;p&gt;自定义积木块时你实际在做两件事:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义积木的外观&lt;/li&gt;
&lt;li&gt;定义出当前积木对应的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;判断一袋狗粮好不好吃的一种方法是看制造者自己吃不吃，我们知道Python社区用Python实现了Python(pypi)。blockly社区中自定义积木外观的工具也是用blockly实现的: &lt;a href="https://blockly-demo.appspot.com/static/demos/blockfactory/index.html"&gt;Blockly Developer Tools&lt;/a&gt;，文档参考:&lt;a href="https://developers.google.com/blockly/guides/create-custom-blocks/blockly-developer-tools"&gt;Blockly Developer Tools docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly2c0249f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过拖拽积木，你就能轻松定义出积木的外观。&lt;/p&gt;
&lt;p&gt;截图中有两处值得注意：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wwj-fig-bed.just4fun.site/blockly2af54b72.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;红色框中是你自定义积木外观的代码描述，有两种风格你可以选择（js/json），使用json风格你会得到一个好处:可以随时将json贴回Blockly Developer Tools，从而得到对应的积木。在你生成自定义积木的时候，建议取得分享链接，以便于日后对积木做调整。&lt;/p&gt;
&lt;p&gt;而绿色框中则是该积木generate出的代码，你可以选择目标语言,在此我选择Python&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_3_2_custom_block_generate_python/index.html"&gt;blockly_3_2_custom_block_generate_python&lt;/a&gt;中展示了一个完整的自定义积木，如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//外观 使用js风格的描述&lt;/span&gt;
&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw_stamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendDummyInput&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;appendField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPreviousStatement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNextStatement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c1"&gt;//generate Python&lt;/span&gt;
&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw_stamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;definitions_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;import_turtle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import turtle\nturtle=turtle.Turtle()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;turtle.stamp()\n&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于自定义积木的话题很大，我们找机会专门讨论，在此就不展开&lt;/p&gt;
&lt;h1&gt;浏览器中运行python&lt;/h1&gt;
&lt;p&gt;目前有好几个项目允许你在浏览器中运行python，其中最流行的解决方案是:&lt;a href="https://github.com/skulpt/skulpt"&gt;skulpt&lt;/a&gt;，也许也是目前最成熟的解决方案,好些大型项目都在用它,诸如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tynker.com/"&gt;tynker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/interactive-python-1"&gt;coursera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trinket.io/"&gt;trinket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览器无处不在，如果能在浏览器中直接运行python，不仅免去了新用户安装环境的麻烦，教学者还可以利用js的动态性，灵活地设计课程并与用户交互，很方便对用户做引导。skulpt的主要使用场景是教学，以上便是原因。&lt;/p&gt;
&lt;p&gt;skulpt使用js实现了python解释器(python2.x)，让python能运行在所有主流浏览器中，如此一来，你就可以轻松在pc/手机/ipad的浏览器中学习python&lt;/p&gt;
&lt;p&gt;skulpt是一个强大而灵活的项目，自带很多电池，且有很好的可扩展性(自定义模块)，如果你有兴趣，可以参考:&lt;a href="http://www.skulpt.org/"&gt;skulpt官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;turtle是skulpt自带的模块，你可以在&lt;a href="http://interactivepython.org/runestone/static/thinkcspy/PythonTurtle/OurFirstTurtleProgram.html"&gt;Our First Turtle Program&lt;/a&gt;体验它&lt;/p&gt;
&lt;p&gt;在浏览器中使用python驱动turtle，官方给出了示例源码:&lt;a href="https://gist.githubusercontent.com/bnmnetp/4650616/raw/cea29122971db097c9ccb9fdfccd3c0c9bf81edf/simpleskulpt.html"&gt;simpleskulpt&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;整合&lt;/h1&gt;
&lt;p&gt;经过上边的一圈探索，来看看我们现在能够做到哪些事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从拼搭好的积木块中，生成(generate)python代码&lt;/li&gt;
&lt;li&gt;自定义自己的积木块, 并生成对应python代码&lt;/li&gt;
&lt;li&gt;在浏览器中运行python代码&lt;/li&gt;
&lt;li&gt;使用python控制浏览器中turtle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，整合以上部分，使用blockly积木块来驱动turtle，最小原型参考:&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_4_run_python_in_browser_simple"&gt;blockly_4_run_python_in_browser_simple&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;上边的最小原型修改自&lt;a href="https://gist.githubusercontent.com/bnmnetp/4650616/raw/cea29122971db097c9ccb9fdfccd3c0c9bf81edf/simpleskulpt.html"&gt;simpleskulpt&lt;/a&gt;。修改之处仅有: 把&lt;code&gt;var prog = document.getElementById("yourcode").value;&lt;/code&gt;改为blockly生成的代码:&lt;code&gt;var prog = Blockly.Python.workspaceToCode(demoWorkspace);&lt;/code&gt; , 如此干净整洁!&lt;/p&gt;
&lt;p&gt;这个例子中，我们可以看出blockly的灵活性，如我们在&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;中所言，blockly是个编辑器，只负责生成代码，至于代码之后用与干吗，它通通不关心。如此一来，就不产生耦合了。&lt;/p&gt;
&lt;p&gt;要了让blockly能做出丰富的东西，我们需要把turtle的所有操作原语全都暴露为积木块，这个工作我偷了个懒，直接抠了&lt;a href="https://hourofpython.trinket.io/from-blocks-to-code-with-trinket#/blocks/dragging-and-dropping"&gt;trinket&lt;/a&gt;的源码。完整的代码参考:&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_5_run_python_in_browser_turtle_finish"&gt;blockly_5_run_python_in_browser_turtle_finish&lt;/a&gt;。积木部分参考:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_5_run_python_in_browser_turtle_finish/my_blocks.js"&gt;my_blocks.js&lt;/a&gt;（js代码中变量被压缩过，可读性不大好）&lt;/p&gt;
&lt;p&gt;如此一来我们就完成了整个项目. &lt;/p&gt;
&lt;p&gt;这个项目很有代表性，使用blockly制作一个application的步骤，我们在以上过程中都经历了&lt;/p&gt;
&lt;p&gt;这些步骤官方描述为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于最后一点，blockly官方说的很笼统，针对少儿编程这一领域，第三点往往可以拆解为几类典型问题。这方面我们之后有空再谈&lt;/p&gt;
&lt;!--
# 总结

phaser/snap

Blockly/Scratch 在少儿编程中的应用: 积累问题
--&gt;

&lt;h1&gt;相关源码&lt;/h1&gt;
&lt;p&gt;以下源码展示了渐进的学习过程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_3_1_generate_python"&gt;blockly_3_1_generate_python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_3_2_custom_block_generate_python"&gt;blockly_3_2_custom_block_generate_python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_4_run_python_in_browser_simple"&gt;blockly_4_run_python_in_browser_simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_5_run_python_in_browser_turtle_finish"&gt;blockly_5_run_python_in_browser_turtle_finish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-02-25:blockly-dev-python-browser-turtle.html</guid><category>blockly</category></item><item><title>blockly开发之生成并运行js代码(1)</title><link>/blockly-dev-run-code.html</link><description>&lt;p&gt;如blockly文档的&lt;a href="https://developers.google.com/blockly/guides/configure/web/code-generators"&gt;Code Generators&lt;/a&gt;章节里所说，用户在blockly编辑器中写好了程序之后(积木组合)，程序往往需要被转化为某一门编程语言（JavaScript, Python, PHP, Lua, Dart等），以便于执行它&lt;/p&gt;
&lt;p&gt;比如我们在&lt;a href="http://blog.just4fun.site/blockly-dev-hello-world.html"&gt;blockly开发之hello world(0)&lt;/a&gt;中写的这个程序&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly4b406de9.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们想运行它，以便检验你的数学能力&lt;/p&gt;
&lt;h1&gt;运行代码&lt;/h1&gt;
&lt;p&gt;分几个步骤&lt;/p&gt;
&lt;h2&gt;generate (从积木中生成代码)&lt;/h2&gt;
&lt;h3&gt;原始版本&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly Demo: Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt; Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a simple demo of injecting Blockly into a fixed-sized &amp;#39;div&amp;#39; element.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;rarr;&lt;/span&gt; More info on &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/guides/configure-blockly/web/fixed-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;injecting fixed-sized Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blocklyDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height: 480px; width: 600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;增加的部分&lt;/h3&gt;
&lt;p&gt;参考: &lt;code&gt;blockly/demos/generator/index.html&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;引入依赖&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script src="../../javascript_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个js文件的功能是用于生成&lt;code&gt;&amp;lt;script src="../../blocks_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;预定义的积木对应的js代码&lt;/p&gt;
&lt;p&gt;此外通过引入其他语言模块，我们还可以将&lt;code&gt;blocks_compressed.js&lt;/code&gt;预知的积木块生成python、Python, PHP, Lua, Dart等待&lt;/p&gt;
&lt;p&gt;&lt;code&gt;javascript_compressed.js&lt;/code&gt;需要在&lt;code&gt;blockly_compressed.js&lt;/code&gt;之后被引用&lt;/p&gt;
&lt;h4&gt;生成代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and display it.&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly44c459cd.png" /&gt;&lt;/p&gt;
&lt;h4&gt;运行代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and run it.&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LoopTrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;if (--window.LoopTrap == 0) throw &amp;quot;Infinite loop.&amp;quot;;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;添加按钮&lt;/h4&gt;
&lt;p&gt;添加两个按钮把事件关联起来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;showCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Show JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;runCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Run JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;完整版本&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly Demo: Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../javascript_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt; Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a simple demo of injecting Blockly into a fixed-sized &amp;#39;div&amp;#39; element.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;rarr;&lt;/span&gt; More info on &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/guides/configure-blockly/web/fixed-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;injecting fixed-sized Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;showCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Show JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;runCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Run JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blocklyDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height: 480px; width: 600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;



    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and display it.&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and run it.&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LoopTrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;if (--window.LoopTrap == 0) throw &amp;quot;Infinite loop.&amp;quot;;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;run&lt;/h2&gt;
&lt;p&gt;以js运行&lt;/p&gt;
&lt;p&gt;如果你回答对了:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly2d377f4e.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你答错了: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly3e120875.png" /&gt;&lt;/p&gt;
&lt;h1&gt;延伸&lt;/h1&gt;
&lt;p&gt;我最近在写一份blockly的入门和进阶教程，这个官方教程也被我纳入其中，在教程的第二节&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_2_generate_and_run_js"&gt;blockly_2_generate_and_run_js&lt;/a&gt;，目前教程以源码的形式出现:&lt;a href="https://github.com/wwj718/blockly_dev"&gt;wwj718/blockly_dev&lt;/a&gt;，还没写成博客。大家能阅读js的话，可以自行阅读。或者等我有空补上文章。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/configure/web/code-generators"&gt;Code Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-01-21:blockly-dev-run-code.html</guid><category>blockly</category></item><item><title>blockly开发之hello world(0)</title><link>/blockly-dev-hello-world.html</link><description>&lt;!--公司内部分享: file:///Users/wwj/workplace/code_org/presentation-blockly/blockly.slides.html#/--&gt;

&lt;p&gt;之前在&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;中，对blockly做了一番介绍，讨论了在技术视角之下，blockly是什么、可以做哪些有趣的事&lt;/p&gt;
&lt;p&gt;在这篇文章里，我们将以一个开发者的视角，开始blockly之旅&lt;/p&gt;
&lt;h1&gt;开始之前&lt;/h1&gt;
&lt;p&gt;关于blockly是什么，上边的文章里提到过，在此重申一下（敲黑板）: blockly是一个编辑器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户对积木的拖曳操作（用户拖曳积木作为一种输入，可以类比为用户在普通编辑器的键盘输入），输出为积木的组合方式(可转化为对应代码)。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，由用户自己掌控。&lt;/p&gt;
&lt;h1&gt;quickstart&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/google/blockly --depth=1
cd blockly/demos
# open index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开&lt;code&gt;index.html&lt;/code&gt;之后，将看到&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly3e33e71a.png" /&gt;&lt;/p&gt;
&lt;p&gt;这儿给出了一些很棒的案例，供开发者入门&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fixed Blockly&lt;/code&gt;是最简单的例子，可以视为blockly的hello world (把blockly编辑器注入到html中的div标签中:&lt;code&gt;id="blocklyDiv"&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly3ff212dd.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们用这个编辑器来写一个简单的程序: &lt;code&gt;如果5+6等于11就输出"恭喜你, 蒙对啦"，否则输出"小学数学是语文老师教的吗"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly4b406de9.png" /&gt;&lt;/p&gt;
&lt;p&gt;目前这段程序还不能运行，在之后的章节里，之后我们会让它run起来&lt;/p&gt;
&lt;p&gt;查看源码也只短短的一屏:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly Demo: Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt; Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a simple demo of injecting Blockly into a fixed-sized &amp;#39;div&amp;#39; element.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;rarr;&lt;/span&gt; More info on &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/guides/configure-blockly/web/fixed-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;injecting fixed-sized Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blocklyDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height: 480px; width: 600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些代码里，真正有用的只有一半，分以下几块说明:&lt;/p&gt;
&lt;h3&gt;依赖文件&lt;/h3&gt;
&lt;p&gt;head中只有这几个依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分别说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="../../blockly_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 是Blockly内核文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="../../blocks_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 是基础积木集(blocks_compressed中定义了一些基础积木: 类似print、if、list等，我们可以在自己的js脚本中自定义更多的积木)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="../../msg/js/en.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;是英语语言包。目前40多门语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;js脚本名称中的&lt;code&gt;compressed&lt;/code&gt;表示它们都被压缩过，可读性差。如果你想看积木积木是怎么定义的，可以使用chrome开发者面板的pretty print功能查看源码&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/blockly61f553fb.png" /&gt;&lt;/p&gt;
&lt;h3&gt;积木箱(toolbox)&lt;/h3&gt;
&lt;p&gt;在积木面板中引入我们需要的积木&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;xml&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xml&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些积木都预定义在&lt;code&gt;&amp;lt;script src="../../blocks_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至于如何自定一自己的积木，我们也放到之后的章节中说明. 诚信写作:)，说好写hello world，就绝不不引入太多概念&lt;/p&gt;
&lt;h3&gt;往页面注入编辑器&lt;/h3&gt;
&lt;p&gt;页面中准备好注入点: &lt;code&gt;&amp;lt;div id="blocklyDiv" style="height: 480px; width: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后将编辑器注入页面即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段js代码的语意是：往blocklyDiv中注入Blockly编辑器，积木箱的id为toolbox，media文件目录为&lt;code&gt;../../media/&lt;/code&gt;（包括一些图标文件和声音文件）&lt;/p&gt;
&lt;!--

# 定一个小目标



# 进阶

# 添砖加瓦
Python表达

js运行

跟踪过程



# 探索更多
下载`https://github.com/google/closure-library` zip文件，与blockly目录同级(参考[blockly: Closure Library](https://developers.google.com/blockly/guides/modify/web/closure),不要使用`ln -s`)


wzxhzdk:5


![](http://wwj-fig-bed.just4fun.site/blockly078869e4.png)

--&gt;

&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;在这篇文章我们看到了一个blockly的最小案例。&lt;/p&gt;
&lt;p&gt;在下一篇系列文章中，我们准备让上边写的那么程序run起来，使用这个程序来看看你的小学数学是不是语文老师教的&lt;/p&gt;
&lt;!-- 下篇文章中我们将定义一个自己的积木块，并生成python代码 --&gt;

&lt;!-- 选择是否，生成python代码 实际意义 import time;time.sleep(5) --&gt;

&lt;h1&gt;延伸&lt;/h1&gt;
&lt;p&gt;我最近在写一份blockly的入门和进阶教程，这个官方例子都被我纳入教程中，作为blockly hello world:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_1_hello_world/index.html"&gt;blockly_1_hello_world&lt;/a&gt;，目前教程以源码的形式出现:&lt;a href="https://github.com/wwj718/blockly_dev"&gt;wwj718/blockly_dev&lt;/a&gt;，还没写成博客。大家能阅读js的话，可以自行阅读。或者等我有空补上文章&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/blockly"&gt;github blockly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;Google for Education : Blockly&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/configure/web/fixed-size"&gt;Fixed-sized Workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/configure/web/toolbox"&gt;Toolbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/blockly"&gt;blockly 开发者论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-01-03:blockly-dev-hello-world.html</guid><category>blockly</category></item><item><title>micro:bit使用笔记</title><link>/microbit-notes.html</link><description>&lt;p&gt;折腾micro:bit过程中记录的笔记。涉及资源、工具、文档等。&lt;/p&gt;
&lt;p&gt;如果你想获取更多micro:bit相关资源，可以到&lt;a href="https://github.com/wwj718/awesome-microbit-zh"&gt;awesome-microbit-zh&lt;/a&gt;里淘金&lt;/p&gt;
&lt;h1&gt;micro:bit概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;micro:bit是一个小型的可编程计算机，旨在使学习与教学变得轻松有趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;micro:bit是一款由BBC（英国广播电视公司）推出的为青少年编程教育设计的微型电脑开发板(43 mm × 52 mm), 集成了ARM Cortex-M0处理器、低功耗蓝牙，加速度计，磁力计，三个按钮，5 x 5 LED点阵以及GPIO。&lt;/p&gt;
&lt;p&gt;使用micro:bit可以快速地把你脑子中好玩的想法付诸实践，做出酷炫的小发明。&lt;/p&gt;
&lt;p&gt;microbit官网有许多统计数据表明这个板子取得的教育成就和受欢迎程度:&lt;a href="http://microbit.org/teach/"&gt;Research Findings&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;技术参数&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://tech.microbit.org/docs/hardware/assets/microbit-overview.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5x5 LED点阵&lt;/li&gt;
&lt;li&gt;3个按钮（2个用于用户操作，1个用于复位）&lt;/li&gt;
&lt;li&gt;23个GPIO引脚&lt;/li&gt;
&lt;li&gt;Nordic nRF51822 - 16 MHz 32位ARM Cortex-M0 微控制器，256 KB 闪存，16 KB RAM，2.4 GHz 蓝牙低功耗无线网络。ARM内核可以在16 MHz或32.768 kHz之间切换. 实际运行代码的地方&lt;/li&gt;
&lt;li&gt;NXP/Freescale KL26Z - 接口芯片／接口MCU. 48MHz 的ARM Cortex-M0+ 内核微控制器，其中有全速USB 2.0 OTG控制器，用作USB和Nordic nRF51822控制器之间的通信接口&lt;/li&gt;
&lt;li&gt;NXP/Freescale MMA8652 - 3轴加速度传感器(I²C总线)&lt;/li&gt;
&lt;li&gt;NXP/Freescale MAG3110 - 3轴磁力仪传感器I²C总线（用作指南针和金属探测器）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;microbit有两个两个MCU(nRF51822/KL26Z)，可能一开始会让人有点疑惑，它们的关系如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     PC
      ^                                                    +----------------------------+
      |        +---------------------+                     |       TARGET MCU           |
      |        |   INTERFACE MCU     |                     | +------------------------+ |
      |        |                     |                     | |      Application       | |
      |        | +-----------------+ |     SWD             | +------------------------+ |
      |  USB   | |                 | +---------------------+ | micro:bit runtime DAL  | |
      +--------+ |    DAPLink      | &amp;lt;----------+          | +------------------------+ |
        * Mass | +-----------------+ |     UART |          | |          | |           | |
        Storage| +-----------------+ |          |          | |   mbed   | | SoftDevice| |
               | |   Bootloader    | |          +------------&amp;gt;          | |           | |
        * UART | +-----------------+ |                     | +----------+ +-----------+ |
               +---------------------+                     +----------------------------+
        * CMSIS-DAP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多细节参考:&lt;a href="http://tech.microbit.org/software/daplink-interface/"&gt;DAPlink and the USB interface&lt;/a&gt;&lt;/p&gt;
&lt;!--
### 历史
micro:bit旨在鼓励孩子开始编程和构建新事物，而不是成为软件/媒体消费者.它可以与树莓派协同工作。
--&gt;

&lt;h3&gt;开放性&lt;/h3&gt;
&lt;h4&gt;硬件开源&lt;/h4&gt;
&lt;p&gt;关于硬件部分，两部分关键信息可以一窥Microbit 的内部设计:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/hardware/schematic/"&gt;线路图(schematics)&lt;/a&gt;, 可以看到主要零件的链接方式及设计.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/hardware/reference-design/"&gt;reference design&lt;/a&gt;, 这部分的数据可以帮助进一步了解Microbit 的设计及变更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于硬件部分更多的描述参考:&lt;a href="http://tech.microbit.org/hardware/"&gt;Hardware Description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;兰卡斯特大学（Lancaster University）构建了完整的microbit的硬件抽象（C/C++），包括一个事件调度器和消息总线，这对个人用户和更高级的语言都是有用的（比如Python），这儿有完整的&lt;a href="https://lancaster-university.github.io/microbit-docs/ubit/"&gt;API文档&lt;/a&gt;和&lt;a href="http://lancaster-university.github.io/microbit-docs/online-toolchains/"&gt;入门指南&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;软件开源&lt;/h4&gt;
&lt;p&gt;而为micro:bit编程的软件/web平台，目前基本都开源&lt;/p&gt;
&lt;h1&gt;开始编程&lt;/h1&gt;
&lt;h3&gt;可选编程工具&lt;/h3&gt;
&lt;p&gt;有多种工具可以为microbit编程，包括图形化界面(makecode等)、Python、C++等。我们先在架构层面关注一下microbit的运行时，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://tech.microbit.org/docs/software/assets/dal-4032c.png" /&gt;&lt;/p&gt;
&lt;p&gt;代码的执行过程为(如果你对更多细节感兴趣，可以参考&lt;a href="http://tech.microbit.org/software/"&gt;the micro:bit Software Ecosystem&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://tech.microbit.org/docs/software/assets/overview.png" /&gt;&lt;/p&gt;
&lt;p&gt;尽管有许多可选工具，官方推荐我们使用两种工具来为microbit编程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由微软打造的&lt;a href="https://makecode.microbit.org/#"&gt;JavaScript Blocks Editor(makecode)&lt;/a&gt;: makecode是一个图形化工具，对新手友好&lt;/li&gt;
&lt;li&gt;来自python社区的&lt;a href="http://python.microbit.org/v/1"&gt;Python Editor&lt;/a&gt;: 使用python代码驱动microbit，适合进阶的孩子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你偏好使用离线的编辑器,推荐&lt;a href="https://codewith.mu/"&gt;Mu&lt;/a&gt;和&lt;a href="http://kittenbot.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=156&amp;amp;highlight=makecode"&gt;Makecode离线版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多可选择的编程工具，你可以参考这里:&lt;a href="https://github.com/wwj718/awesome-microbit-zh#%E7%BC%96%E7%A8%8B"&gt;awesome-microbit-zh 编程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;图形化编程&lt;/h3&gt;
&lt;p&gt;如果你选择图形化编程,目前的可选方案有几个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://makecode.microbit.org/"&gt;makecode&lt;/a&gt;： 提供一个基于浏览器的模拟器和积木编程环境，堆叠好的积木块最终将生成JavaScript (TypeScript)代码。PXT支持代码的双向转换！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.microbit.co.uk/app/#create:tomwku"&gt;Code Kingdoms&lt;/a&gt; - 基于图形界面的编程工具，帮助用户从拖曳式编程到文本编程(JavaScript)的过渡.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.open-roberta.org/"&gt;Open Roberta Lab&lt;/a&gt; - 为机器人编程设计的积木时编程环境, 通过将堆叠好的积木生成MicroPython代码来支持microbit.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.site/editor-zh-hans.html"&gt;microbit zh&lt;/a&gt;: 国内社区提供的在线工具,堆叠好的积木块生成python代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在浏览器中的编程环境内置了编译器（可离线使用，十分适合在教室或公共计算机上使用）,代码块转换为hex文件的过程如下&lt;/p&gt;
&lt;p&gt;更多细节,参考这里:&lt;a href="http://tech.microbit.org/docs/software/assets/browser-build-pipeline.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Python 编程&lt;/h3&gt;
&lt;p&gt;microbit上跑了一个MicroPython解释器(一个移植版本):&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;bbcmicrobit/micropython&lt;/a&gt;.这一点可以通过上边那张关于运行时的图种看出&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;bbcmicrobit/micropython&lt;/a&gt;源码中包含了很多使用python驱动microbit的&lt;a href="https://github.com/bbcmicrobit/micropython/blob/master/examples/"&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既然microbit上跑了MicroPython，那我们就可以用为MicroPython打造的工具来为microbit编程(诸如picocom),关于MicroPython相关的工具和资源，我之前写了这篇文章:&lt;a href="http://blog.just4fun.site/micropython-notes.html"&gt;MicroPython使用笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这儿有一些工具方便在python脚本和hex文件中转化:&lt;a href="https://github.com/bbcmicrobit/micropython/tree/master/tools"&gt;tools&lt;/a&gt;、&lt;a href="https://github.com/ntoll/uflash"&gt;uflash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;microbit所有可用的python模块:&lt;a href="http://microbit-micropython.readthedocs.io/en/latest/microbit.html"&gt;Microbit Module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果需要传输复杂的数据，你无法使用json，可以试试&lt;code&gt;str/eval&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;一些有趣项目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/bitio"&gt;bitio&lt;/a&gt;: 把bitio当成一个IO设备。可以用这库很方便地与电脑脚本，把bitio当成可编程的外设，强烈推荐！&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/bluetooth/apps-and-examples/"&gt;Bluetooth Apps and Examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bittysoftware.com/"&gt;bitty software apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/scratch2-microbit"&gt;scratch2-microbit&lt;/a&gt;: 使用microbit来控制scratch2中的角色&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/en/2017-06-01-will-txting/"&gt;MicroPython Txting Package for micro:bit&lt;/a&gt;: 用radio收发信息&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/en/2017-05-17-joseph-post/"&gt;Joseph's Micro:bit Python Utilities Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;课程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/teach/"&gt;microbit teach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/teach/code-org-fundamentals/"&gt;Micro:bit Lessons Aligned to Code.org's CS Fundamentals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/2017-12-04-code_org_loops_2/"&gt;Course E - Loops 2 - Nested Loops and Scoreboards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/2017-12-04-code_org_conditionals-1/"&gt;Course F - Conditionals 1 - Conditionals with the Weather Predictor&lt;/a&gt;:有配套的教师资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbit-playground.co.uk/"&gt;python游乐场&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microbit-playground.co.uk/components/PIR-sensor"&gt;PIR Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groklearning.com/learn/microbit-starter-blockly/w1p2/1/"&gt;BBC micro:bit Starter (Blockly)&lt;/a&gt;: 模拟器、作业、slides&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groklearning.com/learn/hoc-virtual-pet/intro/3/"&gt;Hour of Code: Virtual Pet&lt;/a&gt;： 虚拟宠物&lt;/li&gt;
&lt;li&gt;&lt;a href="https://makecode.microbit.org/projects"&gt;Microsoft 14 Week Curriculum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.microbit.co.uk/STEM"&gt;STEM Centre Lessons&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microbit0.blob.core.windows.net/pub/hohwmegr/STEM-Learning-Acceleration-lesson-plan.pdf"&gt;Acceleration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/assets/documents/us_stem_curriculum/stem-acceleration-teacher-notes.pdf"&gt;Acceleration STEM Experiment 教师笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h3&gt;与Arduino对比&lt;/h3&gt;
&lt;p&gt;相比与Arduino，micro:bit具有免装驱动,易上手，电子模块集成度高，支持时下热门的多种编程语言等优势，节省了教学资源成本的同时也大大增加了可玩性和拓展空间。关于这方面的讨论可以参考:&lt;a href="http://kittenbot.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=81"&gt;Microbit和arduino有什么关系？&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;microbit在拖入hex文件后将自动弹出并自动运行程序&lt;/h3&gt;
&lt;p&gt;microbit的flash文件系统完全是虚拟，这就是为什么在写入新文件之后驱动器会自动弹出，当你把hex文件拖到MICROBIT上，它并没有被写入到闪存里，而是直接流到nRF51822(target MCU)中&lt;/p&gt;
&lt;p&gt;这方便的讨论参考:&lt;a href="http://tech.microbit.org/software/daplink-interface/"&gt;DAPlink and the USB interface|Files on the MICROBIT Drive&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Micro_Bit"&gt;wikipedia Micro Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/"&gt;microbit developer community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/software/"&gt;he micro:bit Software Ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/hardware/"&gt;Hardware Description&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/software/runtime-mbed/"&gt;The micro:bit runtime and mbed programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/TWmicrobit/p/6984285.html"&gt;Microbit 硬件架构介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/awesome-microbit-zh"&gt;awesome-microbit-zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbit.hackster.io/"&gt;microbit.hackster.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mc.dfrobot.com.cn/forum.php?mod=viewthread&amp;amp;tid=23903"&gt;BBC Micro:bit是什么和microbit怎么玩起来 中文教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kittenbot.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=81"&gt;Microbit和arduino有什么关系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/software/daplink-interface/"&gt;DAPlink and the USB interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lancaster-university.github.io/microbit-docs/online-toolchains/"&gt;Web-based C/C++ environments supporting the runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
https://github.com/bbcmicrobit/micropython/blob/master/tools/pyboard.py  是一个分支

http://mc.dfrobot.com.cn/forum.php?mod=viewthread&amp;tid=30029  电子琴


http://mc.dfrobot.com.cn/forum.php?mod=viewthread&amp;tid=30010  计步器


https://sites.google.com/site/hardwaremonkey/home/handshake  实际使用 实验


https://github.com/lancaster-university/quiz-bit  投票程序


https://github.com/ubirch/pxt-ubirch 发送数据到云端

http://warksjammy.blogspot.kr/2017/07/bitio-blogs-in-one-place.html?view=timeslide  例子 用于控制minecrft  树莓派

图形化

http://www.micropython.org.cn/bbs/forum.php?mod=viewthread&amp;tid=273&amp;extra=

microbit和scratch连接

https://github.com/vecsei/Scratchbit

https://www.youtube.com/watch?v=nJengUwURdE&amp;feature=youtu.be

https://github.com/wwj718/scratch2-microbit  成功！！！ 非常酷

https://mryslab.github.io/s2m/
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-24:microbit-notes.html</guid><category>microbit</category></item><item><title>Cozmo what is this</title><link>/cozmo_what_is_this.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;Cozmo官方在11月15号发&lt;a href="https://developer.anki.com/blog/news/cozmo-code-lab/"&gt;博文&lt;/a&gt;称2017.12.05号这天将会发布一个大版本，在这个版本中Code Lab将会得到极大的增强，最大的更新是界面中将增加Constructor Mode。&lt;/p&gt;
&lt;p&gt;它长这样:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i0.wp.com/developer.anki.com/app/uploads/2017/11/Codelab-Vert_TinyOrchestra_UI_Zoom-IN.jpg?resize=1024%2C768&amp;amp;ssl=1" /&gt;&lt;/p&gt;
&lt;p&gt;Constructor Mode增加了更多的编程积木，包括条件语句、数学操作符、变量函数等等，高阶用户将能做出更具表现力的东西。&lt;/p&gt;
&lt;p&gt;而原先基于图标的编程界面也将保留，对于低龄用户和新手，它更为友好和直观。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i2.wp.com/developer.anki.com/app/uploads/2017/11/code-lab.png?resize=1024%2C768&amp;amp;ssl=1" /&gt;&lt;/p&gt;
&lt;p&gt;顺便一提，如此惊艳而流畅的操作界面基于scratch3.0。&lt;/p&gt;
&lt;p&gt;我数着日子等呀等，到了12.04号，一早跑到二楼南书房，打开Google Play，心想官方说不定想给大家一个惊喜，提前一天发布了更新。于是我有些手抖地在Google Play输入Cozmo，等待进度条加载的时候，就像等待期末考试突击科目的成绩，真是坐立难安，恨不能找个插件以刮奖的方式查看结果。&lt;/p&gt;
&lt;p&gt;哈，还好没更新，不然我都没有做好心理准备，要怎么来表现我的开心。这就像表白的时候，心理有个声音说拒绝我吧拒绝我吧，不然我开心得不知道下一步该干嘛。&lt;/p&gt;
&lt;p&gt;这样一来我就有足足一天的时间迎接cozmo的大版本更新！我打开之前用Cozmo Python SDK写过的项目，突然想到大版本更新之后，对我之前的作品不兼容怎么办？&lt;/p&gt;
&lt;p&gt;我赶紧整理了一下做过的好玩项目，趁它更新之前，发布到&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;github&lt;/a&gt;和&lt;a href="https://forums.anki.com/t/cozmo-what-is-this-use-inception-v3-model-to-identify-objects/11059"&gt;官方论坛&lt;/a&gt;里。&lt;/p&gt;
&lt;h1&gt;Cozmo what is this&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmodc8e1dad.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- Cozmo, what is this ?
- Let me see! Oh, it is the coffee mug.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来看看实际效果。（只录了cozmo回答的部分，声音可能有点小，记得调大你的音量呢。）&lt;/p&gt;
&lt;video src="http://os54tv4fc.bkt.clouddn.com/1512735476179.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;我来简单介绍一下这个项目。一开始，Cozmo安静地呆在桌子上，你可以向它发号施令，Cozmo虽然脾气有点坏，不过目前还不会像吴克群那样抱怨说:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;我是个小兵
我绷紧了神经
在战场上拼命
听谁在发号施令
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以你可以放心命令它左走右走，前进后退。如果你愿意你还可以问它:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能不能为我再跳一支舞，你记否千百年前借伞的西湖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我很恶俗地改了歌词。为了让它跳舞，你只要说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cozmo dances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ps: 我为它增加了中文支持，目前的语义处理很弱，所以你说出我上边那段恶俗的歌词，它可能还真会为你跳一支舞 :)&lt;/p&gt;
&lt;p&gt;我们可以发号施令，让cozmo在桌子上四处游荡，当它来到一个咖啡杯面前时，你可以问它:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cozmo, what is this?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它会站在咖啡杯面前，若有所思说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me see... Oh, it is the coffee mug.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如此一来你可以让Cozmo在屋子里来回走动，询问它都看到些什么。&lt;/p&gt;
&lt;p&gt;目前我已经把项目源码放在了github上:&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;,同时也发到了Cozmo官方社区里:&lt;a href="https://forums.anki.com/t/cozmo-what-is-this-use-inception-v3-model-to-identify-objects/11059"&gt;Cozmo What Is This: use Inception-v3 model to identify objects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;社区里有个国外小哥，run了这个项目，还录了视频发到了YouTube:&lt;a href="https://www.youtube.com/watch?v=L1GTnhmoxXA"&gt;cozmo AI voice command and image recognition&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你访问不了YouTube也没关系，因为这个小哥拍的实在有点烂，我原本想跟他说你在视频下放上我的源码库链接吧，这样其他感兴趣的小伙伴可以自己run起来。后来看了视频后，觉得还是不要让大家知道这个视频与我的项目有关为好。&lt;/p&gt;
&lt;h3&gt;灵感来自组合&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;实际组合了社区里的两个项目。&lt;/p&gt;
&lt;p&gt;其一是CrowdFlower的创始人Lukas之前做过的一个爆款项目: &lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt;，这个项目让树莓派机器人在屋子里游荡，每当看到什么东西在面前，它就会说 "I am thinking... it is xxx", 这个机器人好像一个吟游诗人，在它所行之处，赋予所见之物以名字。&lt;/p&gt;
&lt;p&gt;这个机器人在说"I am thinking..."的时候，我简直被为作者的机智所折服。该项目用到了inception-v3 model，树莓派上跑神经网络很慢，于是作者在让机器人先说出"I am thinking...",这段时间树莓派实际是在缓慢地跑神经网络模型来识别拍摄的图片，而观众会以为机器人真的在思考（因为它就是那样说的啊，而且还真的低头沉思），尽管时间有点久，大家的好奇心反而加重，不会表现出不耐烦，等它终于说出正确的结果，观众会觉得刚才果真是在深思呢！（《银河系漫游指南》里deepThought在回答&lt;code&gt;The answer to life, universe and everything is 42&lt;/code&gt;可是用了750万年 : ）&lt;/p&gt;
&lt;p&gt;"I am thinking..."这个心理学小技巧也被我纳入到&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;项目里。&lt;/p&gt;
&lt;p&gt;由于Lukas没有开放源代码，我自己复现了这个项目的核心部分,有兴趣的同学可以戳这里:&lt;a href="http://blog.just4fun.site/raspberrypi-tensowflow-robot.html"&gt;基于树莓派和Tensowflow的物体识别-brain&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;灵感来源的第二个项目是&lt;a href="https://github.com/rizal72/Cozmo-Voice-Commands"&gt;Cozmo-Voice-Commands&lt;/a&gt;
,这个项目写的很棒，让Cozmo能接收语音指令。&lt;/p&gt;
&lt;p&gt;这个项目也是&lt;a href="https://github.com/wwj718/Cozmo-What-Is-This"&gt;Cozmo-What-Is-This&lt;/a&gt;的基础骨架，我fork了它，整个控制流程用的是该项目，在原本的基础上我做了两个工作:其一是加入中文支持(目前加上中文之后，一共支持5门语言)；其二是加入了&lt;code&gt;cozmo what is this&lt;/code&gt;这条语音指令。&lt;/p&gt;
&lt;p&gt;这种组合已有的社区项目，在它们基础上去实现自己的想法，是开源社区常见的做法。有人统计过，github上代码重复率很高，对这个研究有兴趣的朋友可以戳这篇论文:&lt;a href="http://link.zhihu.com/?target=http%3A//janvitek.org/pubs/oopsla17b.pdf"&gt;A Map of Code Duplicates on GitHub&lt;/a&gt;，研究称&lt;code&gt;GitHub 上 82% 的代码是重复代码&lt;/code&gt;，我觉得是一件好事，说明大家都在高效地复用代码，而不是闭上门来钻木取火。&lt;/p&gt;
&lt;h1&gt;run it&lt;/h1&gt;
&lt;p&gt;接下来假设你也是一个Cozmo玩家，我来教你如何把这个项目跑起来。&lt;/p&gt;
&lt;p&gt;首先你当然得有一台Cozmo ， 没有的同学可以关上电脑洗洗睡了 ：）&lt;/p&gt;
&lt;h3&gt;1.安装Cozmo Python SDK&lt;/h3&gt;
&lt;p&gt;Cozmo Python SDK的安装方法&lt;a href="http://cozmosdk.anki.com/docs/"&gt;官方文档&lt;/a&gt;里写的很详细,结合你的操作系统和移动设备,跟着教程来即可。如果你在安装的过程有遇到什么困难，可以到社区里求助，当然也可以给我发邮件，我会尽量为你提供帮助。&lt;/p&gt;
&lt;h3&gt;2.安装portaudio&lt;/h3&gt;
&lt;p&gt;安装方式根据你的操作系统不同而不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacOS:  &lt;code&gt;brew install portaudio&lt;/code&gt; (当然你首先需要安装了&lt;a href="http://brew.sh/index_it.html"&gt;Homebrew&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linux:  &lt;code&gt;sudo apt-get install flac portaudio19-dev python-all-dev python3-all-dev &amp;amp;&amp;amp; pip3 install --user PyAudio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows: 你需要安装一下&lt;a href="https://git-scm.com/download/win"&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.克隆项目&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/wwj718/Cozmo-What-Is-This&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;4.安装依赖&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd Cozmo-What-Is-This
pip install -r requirements.txt (python3.5 virtual env)
python classify_image.py --model_dir tf/imagenset/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;就绪&lt;/h2&gt;
&lt;p&gt;一切就绪，就可以运行这个项目啦: &lt;code&gt;python cvc.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后程序让你选择使用一门语言来控制Cozmo。（我一般用英文或中文）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmoec2ddcfe.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在你可以问Cozmo：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cozmo, what is this?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小不点，这是什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉&lt;code&gt;小不点&lt;/code&gt;不大好听，起名果然是最难的事情之一，岂止是为变量起名。&lt;/p&gt;
&lt;p&gt;Enjoy yourself :)&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;p&gt;我准备把唤醒词和判断语音终止的功能加入这个项目里，如此一来交互过程将更为自然。这块的功能去扒智能音响类项目的代码就好了,&lt;a href="https://github.com/wzpan/dingdang-robot"&gt;dingdang-robot&lt;/a&gt;是个不错的选择，代码清晰明了。我最近比较忙，如果你提前做好了，到时候给我提个PR呢 : )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-08:cozmo_what_is_this.html</guid><category>cozmo</category></item><item><title>Scratch的前世今生</title><link>/scratch.html</link><description>&lt;blockquote&gt;
&lt;p&gt;学习编程能帮你组织、表达和分享你的想法，就像学习写作一样。这对于所有人来说都很重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="https://wiki.scratch.mit.edu/w/images/Scratch_3.0_Prototype.png" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;h3&gt;人海擦肩&lt;/h3&gt;
&lt;p&gt;说起Scratch，很早就有注意到它，它时常以不同方式出现在视野里，从知乎编程入门类问题的回答，到树莓派里自带的教育软件，以及各种玩具的操作界面，都有它的身影。&lt;/p&gt;
&lt;p&gt;Scratch的反复刷脸成功引起了我的注意，曾经试着用过一段时间，对其的理解却一致停留在"图形化编程，拖拖拽拽，可以做游戏和动画，更像玩具，而不是严肃的编程"。（从编程语言的历史来看，每当有新的编程语言／范式出现，"更像玩具，而不是严肃的编程"这句话以各种表述形式伴随着出现:）&lt;/p&gt;
&lt;p&gt;当你谈及Scratch，我脑子里浮现出基于Scratch的学生作品，如果要对它们做个贴便签式的群嘲，我大概会选"画风简陋而随意"&lt;/p&gt;
&lt;p&gt;于是对于它的流行(已翻译成 40 种以上的语言，在超过 150 个国家上被使用，在过去的一年里，平均每月新增人数为 53 万，平台已经发布的共享程序超过 2233 万个)，我更多抱着一种"时无英雄使竖子成名“的态度&lt;/p&gt;
&lt;h3&gt;路转粉&lt;/h3&gt;
&lt;p&gt;我从路人转为Scratch粉丝，主要因为&lt;a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E8%97%A4%E7%A9%B0%E4%B8%80"&gt;伊藤穰一&lt;/a&gt;(Joi Ito)的《爆裂》(Whiplash：How to Survive Our Faster Future) 一书（ps：近期在Cozmo Code Lab中的编程体验也让我对Scratch好感倍增）&lt;/p&gt;
&lt;p&gt;伊藤穰一现任MIT Media Lab（麻省理工媒体实验室）主管，而Scratch诞生自MIT Media Lab "终生幼儿园"（Lifelong Kindergarten）小组，《爆裂》一书以一种内部视角，向我们揭示了Scratch的诞生过程、初心和设计原则。&lt;/p&gt;
&lt;p&gt;从4P(Projects, Passion, Peers, and Play)到"低门槛，高天花板，宽围墙"的设计理念，以及Scratch对这些理念的实践，无不令我震惊和心动. &lt;/p&gt;
&lt;h1&gt;历史沿革&lt;/h1&gt;
&lt;h3&gt;台上台下&lt;/h3&gt;
&lt;p&gt;1982年春天，偶然的机会，有一位青年记者听了Logo编程语言发明者&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert"&gt;西摩·派珀特(Seymour Papert)&lt;/a&gt;的一次主题演讲。这次演讲完全改变了他对计算机的认知。&lt;/p&gt;
&lt;p&gt;大部分人谈论计算机的方式都是将计算机当成工具，一种完成任务的方法，但在派珀特眼中，计算机能帮助我们用全新的方式认识世界，它将成为儿童表达想法的媒介&lt;/p&gt;
&lt;p&gt;故事听起来颇有武侠小说开篇的味道。台上道骨仙风的开山鼻祖，台下骨骼清秀的求知青年，一段演讲中完成了衣钵传承&lt;/p&gt;
&lt;p&gt;次年，这位青年拿到MIT一年期的奖学金，于是他报名参加了派珀特的研讨班，并被深深吸引。在这里一待就是三十寒暑。&lt;/p&gt;
&lt;p&gt;当时台下的那个青年记者，便是后来的"Scratch之父" -- &lt;a href="https://en.wikipedia.org/wiki/Mitchel_Resnick"&gt;米奇·雷斯尼克(Mitchel Resnick)&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;派珀特与Logo语言&lt;/h3&gt;
&lt;p&gt;雷斯尼克创造的Scratch受派珀特和他的Logo语言影响至深，派珀特对计算机的看法对他的影响则更为深刻。这些我们放在后边再说，现在来说说派珀特和他的传承。&lt;/p&gt;
&lt;p&gt;派珀特是近代人工智能领域的先驱者之一，20世纪60年代初，他与&lt;a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E6%96%87%C2%B7%E9%97%B5%E6%96%AF%E5%9F%BA"&gt;马文·明斯基&lt;/a&gt;在MIT创办了人工智能实验室(Artificial Intelligence Laboratory)，他们还合著过 Perceptrons 一书，，当今深度学习三大权威之一Yann LeCun在读大学的时候因为听说了「perceptron」的概念，激发了对学习型机器的热情，派珀特可算他的启蒙老师。&lt;/p&gt;
&lt;p&gt;派珀特也是前边提到的MIT Media Lab创建者之一，且一直在该实验室工作&lt;/p&gt;
&lt;p&gt;他曾师从瑞士哲学家、心理学家&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;，皮亚杰曾说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从来没有人能够象西摩·派珀特那样理解我的思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1958——1963年，派珀特和皮亚杰在日内瓦大学共事。皮亚杰将84年人生中的大部分时间和精力都花在了研究儿童或者进一步说成年人是如何形成对世界的认识上面。人类从幼年开始构建不同的心智模式（mental model）解释自己周围的现象，比如加速的汽车、猫粗糙的舌头。随着逐渐长大，我们的经验和这些模式产生碰撞，迫使我们调整模式以适应不断变化的现实。如此说来，儿童玩耍就是不断创建和再创建自己心智模式的行为，以此更好地认识世界&lt;/p&gt;
&lt;p&gt;对于派珀特来说，计算机可以对照这些模式和经验，是兼顾玩耍和学习的完美载体。派珀特将皮亚杰的这些理念融入Logo语言（他在1968年从LISP语言的基础里创立Logo编程语言）：比如，孩子认识到通过几行简单的代码可以让屏幕上的光标画出一个正方形，甚至是一朵花。如果这样做，就会出现那样的画面。最有价值的是，他们也会认识到，有时这样做可能不会出现那样的画面，这时他便主动寻求身旁的程序员的帮助。这个过程就是提出一种假设，然后去验证，再去修正得到新的假设。通过Logo语言，每个孩子都可以变成经验主义者。&lt;/p&gt;
&lt;p&gt;他在其著作《头脑风暴：儿童、计算机及充满活力的创意》（Mindstorms:Children, Computers, and PowerfulIdeas）中，系统阐述了自己的建构主义观: "在制作中学习"（Learning by making），在他看来，好的教育不是如何让老师教得更好，而是如何提供充分的空间和机会让学习者去构建自己的知识体系(伊藤穰一也提到: 学习而不是教育)。当孩子们在制作一些对自己有意义的作品时，如编故事、编程序、或是音乐创作时，孩子们正处于学习知识的最佳状态。他被自己的热情所驱动，主动地去获取知识而不是痛苦地被填鸭。关于这点雷斯尼克在他的一个TED演讲中有动人的例子: &lt;a href="https://www.ted.com/talks/mitch_resnick_let_s_teach_kids_to_code"&gt;Let's teach kids to code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;米奇·雷斯尼克后来成了派珀特的学生，他评价说:"派珀特是第一个预见计算机可以用来帮助孩子们学习的人,他相信计算机可以让孩子们主动构建知识"&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;与儿童心理学&lt;/h3&gt;
&lt;p&gt;前头说到Scratch之父雷斯尼克 对计算机和编程教育的理解 受派珀特和他的Logo语言的影响很深，而派珀特在创造Logo语言的时候，则主要是受皮亚杰的启发，并将他的思想融入到Logo语言中。那么我们自然追溯到&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;让·皮亚杰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;让·皮亚杰自1921年开始从事儿童心理学的研究，从智能的早期形态入手，目的在于由此探讨认知论的问题。&lt;/p&gt;
&lt;p&gt;我最近在读他的《发生认识论原理》，这本书论述了认识是怎样形成的，智力是怎么发展、构建的。于我而言，这本书内容十分新颖（不过阅读体验并不好，作者对一些哲学内容的表述，远没有罗素式的清晰和友好），在认识论方面，我之前受洛克、休谟（经验论者）影响较多，而皮亚杰在这本书的英译本序言里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不是经验论者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但他认同洛克、休谟、斯宾诺莎这些经验论者创立的"伟大传统"，即把对认识的分析放在研究认识的心理发展这个基础之上。令皮亚杰遗憾的是经验论者竟然没有进行详细的实验，而这个正是皮亚杰的前进的方向。&lt;/p&gt;
&lt;p&gt;之后皮亚杰在丰富的实验基础上，阐释他的认识论，他把结构主义与建构主义紧密地结合起来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;认知的结构既不是在客体中预先形成了的，因为这些客体总是被同化到那些超越了客体之上的逻辑数学框架中去，也不是在必须不断地进行重新组织的主体中预先形成了的。因此，认识的获得必须用一个将结构主义和建构主义紧密的结合起来的理论来说明，也就是说，每一个结构都是心理发生的结果，而心理发生就是从一个较初级的结构过渡到一个较复杂的结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;皮亚杰把适应看作智力的本质，他把儿童看成建造自己的个人知识理论的小哲学家和科学家。他认为活动即是感知的源泉，又是思维发展的基础。&lt;/p&gt;
&lt;p&gt;从皮亚杰的理论里，我们可以看到Logo和Scratch的世界观和灵魂所在：对活动/交互的重视、让孩子在玩耍中不断创建和调整心智模式。&lt;/p&gt;
&lt;p&gt;尽管Logo有各种分支和方言，尽管Scratch经历了几次技术变革(即将迎来3.0版本)，也许在将来，从外表上你甚至不能一眼认出他们。但他们内核的东西一直如初：对皮亚杰认知理论的实践，将计算机作为一种理想的媒介，让孩子们在活动中去构建和调整心智模型。以理解和适应外部环境&lt;/p&gt;
&lt;p&gt;皮亚杰对计算机的影响远不只在编程教育这个领域。除了派普特根据皮亚杰的理论开发了Logo编程语言之外。Alan Kay以皮亚杰的理论为基础，开发了Dynabook编程概念。以上这两项技术，都是现今我们日常使用的图形使用者界面（GUI）的基础技术，使电脑从文字界面过渡至图形界面，改写了电脑技术的发展路向。&lt;/p&gt;
&lt;h1&gt;青出于蓝&lt;/h1&gt;
&lt;p&gt;前边我们沿着理念传承这条线，一路从雷斯尼克的Scratch追溯到派珀特的Logo语言，之后抵达皮亚杰的认知论（再往前甚至将追溯到洛克的经验论）&lt;/p&gt;
&lt;p&gt;接着我们横向来看看Scratch对他同一谱系的前辈LOGO语言做了那些改进&lt;/p&gt;
&lt;p&gt;雷斯尼克认为Scratch从Logo语言止步的地方继续前进，将Logo语言带入未来，他们的传承关系可想而知，相似之处且多于不同。&lt;/p&gt;
&lt;h3&gt;Scratch对Logo的改进&lt;/h3&gt;
&lt;h4&gt;更加直观&lt;/h4&gt;
&lt;p&gt;Scratch基于图形化的编程方式，通过拖拽、拼搭积木的方式，让整个编程过程十分直观，很像在玩乐高积木。这并不是偶然，雷斯尼克一直与乐高公司保持密切合作，乐高机器人便是他与导师派珀特密切合作研发的。乐高积木对Scratch的影响很深，或者说它们彼此影响很深&lt;/p&gt;
&lt;p&gt;关于这一点在Scratch诞生之前给国家科学基金会提交了一份&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;提案&lt;/a&gt;里可以看出。其中提到他们在乐高机器人这块的研究工作将帮助他们构建Scratch&lt;/p&gt;
&lt;p&gt;这份提案里还指出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This approach eliminates the possibility of syntax errors (which have proven to be a major obstacle for learning text-based languages)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基于文本的编程可能带来的语法错误正是孩子们入门编程的主要困难所在。基于图形化的Scratch能避开这点&lt;/p&gt;
&lt;p&gt;这份提案有许多有趣的地方，诸如为了让Scratch卓有成效，需要做到的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个工具得与孩子们的感兴趣和有热情的事情产生关联，他们才会认为这个工具很酷&lt;/li&gt;
&lt;li&gt;孩子们要能一眼就看到工具的价值和潜力(不必费劲地琢磨)&lt;/li&gt;
&lt;li&gt;可以很方便地用它创建第一个项目（低门槛）&lt;/li&gt;
&lt;li&gt;可以创建出向他人炫耀的作品&lt;/li&gt;
&lt;li&gt;能支持不同类型的活动（宽围墙）&lt;/li&gt;
&lt;li&gt;能吸引不同背景、文化的孩子&lt;/li&gt;
&lt;li&gt;可以逐步(渐进式)学习工具的特性（不必一次学完）&lt;/li&gt;
&lt;li&gt;随着时间的推移，可以越来越复杂地使用这个工具（高天花板）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这份提案在2003年提到的这些理念和设计思路在今天看来很是很有启发性，十分值得一读！&lt;/p&gt;
&lt;h4&gt;更宽的围墙&lt;/h4&gt;
&lt;p&gt;Logo语言的特色是派珀特所说的“低门槛”（易于学习）和雷斯尼克所称的“宽围墙”（不束缚儿童的想象）&lt;/p&gt;
&lt;p&gt;相比于Logo，Scratch的围墙则更宽，你可以在其中做更多你想做的事&lt;/p&gt;
&lt;p&gt;除了控制角色移动、画画之外，你还可以创作你自己的音乐、故事、电影、动画或者游戏&lt;/p&gt;
&lt;p&gt;并不是每个孩子的兴趣都一样，作为一个优秀的工具，应该把“围墙”做宽，而不应该把孩子围在一个狭小的区域里，你应该给他整个游乐场，而不是一间活动室&lt;/p&gt;
&lt;p&gt;关于"宽围墙"的意义，&lt;a href="http://learn.media.mit.edu/lcl/"&gt;Learning Creative Learning&lt;/a&gt; &lt;a href="http://learn.media.mit.edu/lcl/weeks/week5/"&gt;第五周的课里&lt;/a&gt;讲的很清楚&lt;/p&gt;
&lt;h4&gt;更丰富的媒介和更强的表现力&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Taking advantage of the extraordinary processing power of current computers, Scratch will support new programming paradigms and activities that were previously infeasible, making it much better positioned to succeed than previous initiatives to introduce programming to youth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机技术日新月异，Logo并没有跟上时代，Scratch试图将更多的多媒体元素吸收进来，以便孩子们能轻易地创作更具表现力的作品，"可以向他人炫耀的作品"&lt;/p&gt;
&lt;p&gt;在Scratch你能够轻松地导入或绘制人物、录制并调制声音、调用摄像头或是现实中的各种传感器！&lt;/p&gt;
&lt;h4&gt;社区: 分享与合作&lt;/h4&gt;
&lt;p&gt;雷斯尼克和同事在编写和设计Scratch软件的4年里，波士顿众多计算机俱乐部的孩子们经常在他们的办公室穿梭，带给他们很多灵感，Scratch是很多人共同努力的结晶，他们在Scratch中将社群功能融入软件的核心&lt;/p&gt;
&lt;p&gt;Scratch的口号是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine, Program, Share&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对"Share"的重视可以追溯到开源运动和黑客文化。Scratch诞生自MIT，而MIT有着悠久的黑客文化&lt;/p&gt;
&lt;p&gt;60年代初，第一批"MIT黑客"将他们写的程序存储在磁带上，随意的放在实验室的抽屉里，任何人都可以自由地使用磁带，将其放到自己的计算机里，学习代码、更新和改进，然后再将传给磁带留给下一个人，大家在这个过程中互相学习，共同改进程序，他们认为这是学习编程最佳的方法。在《大教堂与集市》中，作者从经济学角度论证了，这也是构建高质量软件的最佳方法&lt;/p&gt;
&lt;p&gt;弗莱德·摩尔曾明确地将家酿计算机俱乐部定位成一个信息交换中心。信息应该在俱乐部成员之间自由传递，就像在一台精心设计的计算机内无拘无束流动着的二进制位一样。黑客们都奉行与计算机本身雅致的逻辑相一致的理念——共享、开放、分权，以及亲自动手改进机器并改善整个世界&lt;/p&gt;
&lt;p&gt;这种分享与合作的的精神一直在黑客社区流传，之后的开源运动、今天的github都是它的产物。对这段历史有兴趣的同学可以参看《黑客:计算机革命的英雄》。&lt;/p&gt;
&lt;p&gt;人工智能的开拓者马文·明斯基曾说："Logo语言的问题是它只有语法而没有文本。" 他的意思是，Logo语言缺少被认可、推崇和复制的可能性，这样一来Share变的艰难。而Scratch改进了这点,它继承了这种合作、开放、分享的黑客文化，在Scratch中你可以从0开始一个自己的项目，也可以看看是不是有其他人做过你想做的事，尝试在Ta的基础上做些调整以符合自己的需要。如果遇到问题，便在社区中和作者交流。当然反馈你更好的解决方法，他将因为作品被改进而感激你。如此一来，社区成为了淘金、合作、激发热情和学习技巧的绝佳场所。&lt;/p&gt;
&lt;p&gt;关于合作与分享，雷斯尼克在&lt;a href="http://learn.media.mit.edu/lcl/weeks/week4/"&gt;LCL peers&lt;/a&gt;中有做深入探讨&lt;/p&gt;
&lt;h1&gt;未来 : Scratch3.0&lt;/h1&gt;
&lt;p&gt;Scratch经历了基于Squeak编写的1.x版本；基于ActionScript编写的2.0版本(依赖flash)，如今即将迈向3.0（明年春发布）&lt;/p&gt;
&lt;p&gt;Scratch将基于html5技术，能够轻松跨平台运行，十分可期。目前的开发版可以在&lt;a href="https://llk.github.io/scratch-gui/"&gt;这儿尝鲜&lt;/a&gt;. 对源码有兴趣的小伙伴，想围观或者参与，都可以&lt;a href="https://github.com/LLK"&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google与MIT Media Lab将共同开发Scratch Blocks，Scratch Blocks使用谷歌的可视化编程语言Blockly(关于Blockly可以看我之前的这篇文章: &lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;使用Blockly积木块之后，Scratch将变的更加灵活、美观和易拓展，拼搭好的积木块可以直接转译为6门语言，而这些语言将直接运行在合适的地方（目前许多硬件都能直接运行Python和JavaScript）。Scratch将出现在更多的现实场景中，也许某一天你可以通过拖拽积木来自定义你的新家或是为你的机器管家编程，而目前你已经可以用它控制Cozmo、四轴飞行器。目前也有一些AI公司尝试用积木来封装他们的AI接口，让用户可以更方便地搭建出他们的AI项目。&lt;/p&gt;
&lt;p&gt;所有试图将复杂度隐藏、给用户暴露出直观易用接口、同时还想保留足够灵活度的项目，都可能受益于Scratch/Blockly&lt;/p&gt;
&lt;p&gt;积木化的编程方式是领域无关的，这种封装/抽象的思想，能恰当地屏蔽复杂度，仅将用户需要的东西暴露为可组合的积木块（很符合Unix设计哲学），如果我们使用得当，我们可以将大多数的事物封装为Scratch积木，任何对创造有热情的人都可以去自定义和改写他的生活，这大概是maker们梦想的天堂。&lt;/p&gt;
&lt;h1&gt;尾声&lt;/h1&gt;
&lt;p&gt;我们以雷斯尼克的一次演讲来结束本文&lt;/p&gt;
&lt;p&gt;雷斯尼克在一次演讲中，一位听众起身问了一个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;西蒙·派珀特20年前不也在做同样的事情吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话当然不是恭维，而是暗示雷斯尼克的想法已经过时了。&lt;/p&gt;
&lt;p&gt;雷斯尼克回答说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对，我做的正是西蒙·派珀特20年前做的事情。我认为这是值得继续做的事。我们正在取得一些进展。如果我的余生一直做这些事，我会感到快乐和自豪，因为它们重要到我非做不可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E8%97%A4%E7%A9%B0%E4%B8%80"&gt;wikipedia 伊藤穰一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A5%E5%AA%92%E4%BD%93%E5%AE%9E%E9%AA%8C%E5%AE%A4"&gt;wikipedia 麻省理工媒体实验室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/Scratch"&gt;wikipedia Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ted.com/talks/mitch_resnick_let_s_teach_kids_to_code"&gt;Let's teach kids to code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Mitchel_Resnick"&gt;Mitchel Resnick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.scratch.mit.edu/wiki/Scratch_3.0"&gt;Scratch 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Seymour_Papert"&gt;Seymour Papert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/Logo%E8%AF%AD%E8%A8%80"&gt;Logo语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%AE%93%C2%B7%E7%9A%AE%E4%BA%9E%E5%82%91"&gt;wikipedia 让·皮亚杰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B1%95%E5%BF%83%E7%90%86%E5%AD%A6发展心理学"&gt;wikipedia 发展心理学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E8%AA%8D%E7%9F%A5%E7%99%BC%E5%B1%95%E8%AB%96"&gt;wikipedia 认知发展论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%BB%BA%E6%A7%8B%E4%B8%BB%E7%BE%A9_(%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96)"&gt;wikipedia 建构主义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yangfenzi.com/news/64397.html"&gt;人工智能先驱、LOGO语言创始人西蒙·派珀特(Papert)去世&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://web.media.mit.edu/~mres/papers/scratch-proposal.pdf"&gt;A Networked, Media-Rich Programming Environment to Enhance Technological Fluency at After-School Centers  in Economically-Disadvantaged Communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learn.media.mit.edu/lcl/"&gt;Learning Creative Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-07:scratch.html</guid><category>scratch-history</category></item><item><title>cozmo系列之入门 - 有性格且可编程的机器人</title><link>/cozmo-hello-world.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo92f55c7b.png" /&gt;&lt;/p&gt;
&lt;p&gt;可编程的机器人不少，灵活而友好的却不多&lt;/p&gt;
&lt;p&gt;不智障的机器人不多，有性格的就更少&lt;/p&gt;
&lt;p&gt;可爱的机器人中我最中意2款: BB8和cozmo&lt;/p&gt;
&lt;p&gt;BB8可爱且呆，cozmo可爱又任性&lt;/p&gt;
&lt;p&gt;来个它们的合影&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo1a05d914.png" /&gt;&lt;/p&gt;
&lt;h1&gt;你的电子宠物&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmoba993abb.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个憨态可掬的机器人，有些像微缩版的瓦力，不过它可没瓦力乖巧&lt;/p&gt;
&lt;p&gt;它从睡眼惺忪中醒来，伸伸懒腰，便下床(充电座)自顾自地玩耍，它有自个儿的玩具(发光方块)，如果你有时间，愿意陪它做游戏，它会很开心，赢了得意忘形，输了就捶胸顿足，得失心这么重，恐怕不适合炒股&lt;/p&gt;
&lt;p&gt;如果你没空陪它，也无妨，它闲庭信步，吹吹口哨、哼哼小曲儿;闲着无聊，便来回搬运自己的玩具，堆叠起来或是一把推翻，自得其乐。除了不尿裤子，其他方面都像极了你六岁时的样子&lt;/p&gt;
&lt;p&gt;想找你玩，而你又没空的时候，它会来一出苦情戏，走到桌子边缘，假装要掉下去，真站到边缘，又会被自己吓一跳，忙往回缩，这样的演技恐怕只适合拍偶像剧了&lt;/p&gt;
&lt;h2&gt;唤醒&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo15948ba5.png" /&gt;&lt;/p&gt;
&lt;p&gt;将cozmo放在通电的基座上，手机连上cozmo发射出来的wifi热点(形如Cozmo_542CA8),打开app(Cozmo)选择连接，cozmo将被唤醒：睡眼惺忪，伸伸懒腰，懒洋洋地下床&lt;/p&gt;
&lt;p&gt;你家里从此多了一个调皮的小伙伴&lt;/p&gt;
&lt;h2&gt;下床(自主模式）&lt;/h2&gt;
&lt;p&gt;Cozmo下床之后，默认的模式是自顾自的玩耍（自主模式），它四处打量着新家，充满了好奇，遇到新奇之物，忍不住要发出"哇"的赞叹，尾音拖的老长，赞叹之情想来发自肺腑。&lt;/p&gt;
&lt;p&gt;你可以将家庭成员录入它的视觉系统，这样在它玩耍之余，看到熟人，会有礼貌地打个招呼，只是在它喊出名字的时候，略带一点外星口音。你会慢慢习惯的，如果你在银河系漫游久了就知道，带点自己母星的口音再正常不过了。不过Cozmo的一些自言自语我还不大能听懂，《银河系漫游指南》里也没做记载。&lt;/p&gt;
&lt;h2&gt;交互&lt;/h2&gt;
&lt;p&gt;新版的app(我的当前版本是2.0.2)相比1.0有明显调整，显著的变化是更强调陪伴和共同成长。它就像你的宠物一样，你得注意它是不是生病了(需要修复)，是不是饿了(给它喂食)，如果它饥寒交加，身体不适，它是拒绝同你一起做游戏的.&lt;/p&gt;
&lt;h3&gt;被驯服的小狐狸&lt;/h3&gt;
&lt;p&gt;Cozmo有时候像一只被驯服的小狐狸&lt;/p&gt;
&lt;p&gt;有一回小狐狸对小王子解释&lt;code&gt;驯服&lt;/code&gt;二字的含义(《小王子》)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是已经早就被人遗忘了的事情……它的意思就是'建立联系'……对我来说，你还只是一个小男孩，就像其他千万个小男孩一样。我不需要你,你也同样用不着我。对你来说，我也不过是一只狐狸，和其他千万只狐狸一样。但是，如果你驯服了我，我们就互相不可缺少了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你们相处愉快，每天一起玩耍，它虽时而捣蛋，在你忧愁的时候也是很乐意取悦你的，你可以要求它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cozmo给我表演一下叠罗汉&lt;/li&gt;
&lt;li&gt;Cozmo我要看你鲤鱼打挺&lt;/li&gt;
&lt;li&gt;Cozmo过来我们击个拳&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cozmo的技能树十分丰富，需要你和它共同点亮&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo12cebfe0.png" /&gt;&lt;/p&gt;
&lt;h3&gt;一起做游戏&lt;/h3&gt;
&lt;p&gt;Cozmo自娱自乐玩腻了，会主动邀请你跟它一起玩游戏，就像你儿时玩伴那样。cozmo随身携带的三个积木，将成为你们的游戏道具，你们将狭路相逢，比拼记忆力或反应速度，调动你的肌肉和大脑，记得当心Cozmo的小心思！它可是会耍诈的&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo8de54d8a.png" /&gt;&lt;/p&gt;
&lt;p&gt;做游戏时，你会注意到Cozmo的表情变化非常微妙，在游戏中聚精会神，不时皱起眉头思考。小胜一局，虽不至手舞足蹈，却也是难掩喜悦之情，眼睛弯成了月牙，若大获全胜，便开心得非原地大转三圈不可。如果你技高一筹，Cozmo极是不甘，愁眉苦脸也只是一时之态，一会儿便重振旗鼓，立马拉着你再战一局，像不像被你带着打排位赛却铩羽而归的徒弟&lt;/p&gt;
&lt;h3&gt;听我指挥&lt;/h3&gt;
&lt;p&gt;Cozmo想不想当将军我不清楚，但据我所知，它目前是一个好士兵(听从指挥)&lt;/p&gt;
&lt;p&gt;你可以用三种方式指挥cozmo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在app中拖拽积木来指挥cozmo(用到blockly)&lt;/li&gt;
&lt;li&gt;在Explorer模式下驾驶cozmo&lt;/li&gt;
&lt;li&gt;使用SDK为Cozmo编程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们先来说说第一种，在app中拖拽积木来指挥cozmo&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo63e5b91e.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这个被称为&lt;code&gt;Code Lab&lt;/code&gt;的界面里，包含了许多用来控制cozmo的积木。你可以让Cozmo前进两步，然后左拐避开前方的障碍物(一袋咖啡)，再前进，像这样&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmof70f49bd.png" /&gt;&lt;/p&gt;
&lt;p&gt;你也可以把它放在餐桌上，环顾四周，清点下用餐人数，然后告诉服务员要几份米饭。 这个任务稍微复杂些，会用到视觉、语音和移动模块，但即便是一个不识字的小孩，操作起来也无碍。所有的编程积木都带有形象化的图案，一目了然&lt;/p&gt;
&lt;h3&gt;小鬼当家&lt;/h3&gt;
&lt;p&gt;我大约9岁那年看了小鬼当家，对其中带有摄像头的遥控车念念不忘。&lt;/p&gt;
&lt;p&gt;9岁的时候不是那种能做到&lt;code&gt;想要的都拥有，得不到的都释怀&lt;/code&gt;的小孩，这件事一直放在心上，后来看到&lt;code&gt;带有摄像头的遥控车&lt;/code&gt;总忍不住要多看几眼，但都不是心里想要的，要么太过笨重，要么不够好看，机身如此不够灵巧，摄像头如此昭然若揭，这可怎么和坏人斗智斗勇&lt;/p&gt;
&lt;p&gt;直到在Cozmo中发现它的Explorer模式，才有&lt;code&gt;终于等到你&lt;/code&gt;的感觉。&lt;/p&gt;
&lt;p&gt;在Explorer模式中，你可以驾驶着Cozmo在自家的庭院或房间里冒险。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo858d7212.png" /&gt;&lt;/p&gt;
&lt;p&gt;你拉上窗帘，手握ipad，如坐在星际战舰的指挥室里，窗外的星光稀疏极了，毕竟身处银河系荒凉偏僻的旋臂上。屏幕里展示着Cozmo从前线发来的视频信号。屏幕上光线晦暗，你手握方向盘，指挥着cozmo继续探索这片应许之地,突然，屏幕中一闪而过一个庞然大物，距离近时，身躯之大，足足占了屏幕的1/3。而动作敏捷，倏忽之间，跃出屏幕之外，来去无影，着实吓了你一跳。气势真如沈复说的"忽有庞然大物，拔山倒树而来"。待你定下神来，操控Cozmo追踪不明生物，竟破解了一个惊天谜团&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;妈，你早上买的鱼被我们家的猫偷藏在床底下了，人赃俱获，我已经用Cozmo拍到它躲在床底下吃鱼的照片了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刘瑜在《送你一颗子弹》中感慨:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;15岁的时候再得到那个5岁的时候热爱的洋娃娃，65岁的时候终于有钱买25岁的时候热爱的那条裙子，又有什么意义呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话对我不大适用，我终于遇到9岁的时热爱的遥控车之后，恨不能像Cozmo一样原地大转三圈&lt;/p&gt;
&lt;h3&gt;code!&lt;/h3&gt;
&lt;p&gt;如果cozmo预设的所有功能都不足以填满你的脑洞，那么你就应该撸起袖子开始编程了。代码可能是这个星球上可玩性最高的玩具。&lt;/p&gt;
&lt;p&gt;cozmo为你准备好了&lt;a href="https://github.com/anki/cozmo-python-sdk"&gt;cozmo-python-sdk&lt;/a&gt;，有了它，你就可以使用Python来驱动Cozmo，如果你愿意，可以接入OpenCV或是TensorFlow，社区已经有人用Tensorflow CNN 训练出来的模型自动驾驶cozmo了。&lt;/p&gt;
&lt;p&gt;下边我们来看看怎么用代码驱动Cozmo&lt;/p&gt;
&lt;p&gt;首先在你的app中启动SDK模式&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo6f84d476.png" /&gt;&lt;/p&gt;
&lt;p&gt;接着就可以在你的电脑上用python来为Cozmo编程。关于这块的原理我们今后再聊，Cozmo在易用性和灵活性上花了很多功夫，编程体验很惊艳&lt;/p&gt;
&lt;p&gt;下边这个例子是官方源码里包含的示例，源码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cozmo&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;light_when_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Robot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;The core of the light_when_face program&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# Move lift down and tilt the head up&lt;/span&gt;
    &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_lift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_head_angle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MAX_HEAD_ANGLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_completed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Press CTRL-C to quit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_all_backpack_lights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lights&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue_light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_backpack_lights_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;# Wait until we we can see another face&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_observed_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Didn&amp;#39;t find a face.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;cozmo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_program&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;light_when_face&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_viewer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_viewer_on_top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码实现了这样一个功能: 当cozmo的视觉系统识别到人脸时(对应代码&lt;code&gt;if face and face.is_visible:&lt;/code&gt;)，将背部的灯设置为蓝色(对应代码&lt;code&gt;robot.set_all_backpack_lights(cozmo.lights.blue_light)&lt;/code&gt;)。即使你没有编程经验，也能大致看懂上边这段代码在干嘛，这也是Cozmo的作者选择Python的原因，这门编程语音以接近自然语言(英语)的方式来书写，让你轻松上手。&lt;/p&gt;
&lt;p&gt;就这点而言，Cozmo也是入门编程的理想工具(这是一种反馈强烈的编程体验，让你乐在其中，而不至于被语法和逻辑吓跑)&lt;/p&gt;
&lt;p&gt;我们来看看代码实现的效果:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/cozmo00576e90.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然你可以发挥想象，将代码改造为：当Cozmo识别到人脸时，主动给你发一封邮件,如此一来在你们一家人出旅行时，它就负责看家&lt;/p&gt;
&lt;p&gt;又或者，你可以驱动它走到门口迎接找你玩的小伙伴，看到小伙伴时(&lt;code&gt;if face and face.is_visible&lt;/code&gt;)打个招呼，接着让Cozmo带他到你的卧室&lt;/p&gt;
&lt;h2&gt;后续&lt;/h2&gt;
&lt;p&gt;接下来的一段时间，我准备做一次长途路行，途中会继续写Cozmo系列文章&lt;/p&gt;
&lt;p&gt;选材原则是有趣，具体内容待定，大概会和机器视觉、语音识别、积木化编程(blockly)、编程教育相关&lt;/p&gt;
&lt;p&gt;如果你有好的想法，关于想用Cozmo做好玩的东西，欢迎给我邮件(wuwenjie718@gmail.com)，我在途中所经之处，只要有网络，每晚都会查阅邮件 : )&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-10-18:cozmo-hello-world.html</guid><category>cozmo</category></item><item><title>对webduino运行流程的分析</title><link>/webduino-analysis.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/webduinoee40c06e.png" /&gt;&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;在前一篇关于blockly的文章中，我参考了webduino对Web Speech的包装，并将其移植到blockly4pi中。&lt;/p&gt;
&lt;p&gt;webduino对blockly的使用，有许多出彩的地方。这篇文章将简要对其核心部分做个分析，为了更深入地借鉴它的设计&lt;/p&gt;
&lt;h1&gt;入手&lt;/h1&gt;
&lt;p&gt;我买了webduino的smart模块，所以我们从最简单的案例入手：将smart的led灯设为红色&lt;/p&gt;
&lt;p&gt;首先当然是将smart连上wifi，完成后它分配到网址:&lt;code&gt;192.168.0.119&lt;/code&gt;（显示在wifi名称中）&lt;/p&gt;
&lt;p&gt;接着我们拼搭出积木块&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/webduino5a6e33a8.png" /&gt;&lt;/p&gt;
&lt;p&gt;运行后，成功点亮红灯&lt;/p&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;p&gt;首先查看上边的积木生成的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;192.168.0.119&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;systemReset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;samplingInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRGBLedCathode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到webduino通过积木生成js代码, 然后运行js代码来控制start.(我的blockly4pi同时生成js和python)&lt;/p&gt;
&lt;p&gt;容易看出,boardReady是浏览器与start通信的代理,接着我们进入&lt;a href="https://github.com/webduinoio/webduino-blockly"&gt;源码&lt;/a&gt;,去跟踪&lt;code&gt;boardReaety&lt;/code&gt;,它定义在&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/webduino-blockly.js#L21"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;terminate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoReconnect&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;autoReconnect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoardEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isConnected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoardEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DISCONNECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoardEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;READY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中board定义在&lt;a href="https://github.com/webduinoio/webduino-js/blob/master/src/core/Board.js#L63"&gt;Board&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/core/EventEmitter.js#L14"&gt;EventEmitter&lt;/a&gt;传递全局消息&lt;/p&gt;
&lt;h3&gt;休眠一秒&lt;/h3&gt;
&lt;p&gt;在js中休眠是个有趣的话题，我们知道js是非阻塞的,webduino使用await来实现(很新的特性，之后会通过babel来在浏览器里编译，后文再说)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/webduinoee40c06e.png" /&gt;&lt;/p&gt;
&lt;p&gt;对应的代码是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="nx"&gt;boardReady&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;192.168.0.119&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;systemReset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;samplingInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRGBLedCathode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这部分很有意思，我们仅仅添加一个等待一秒的模块，生成的代码结构整体变了，新添加的模块并不特殊，它生成的代码为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value_secs_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secs_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ORDER_NONE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;await delay(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value_secs_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;);\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以推测，代码在generate之前有个预处理,大概是根据generate出来的代码里是够包含&lt;code&gt;await&lt;/code&gt;关键字来处理，我们可以搜索源码来验证我们的想法:&lt;a href="https://github.com/webduinoio/webduino-blockly/search?utf8=%E2%9C%93&amp;amp;q=await&amp;amp;type="&gt;search await&lt;/a&gt;,果不其然&lt;/p&gt;
&lt;h1&gt;代码执行&lt;/h1&gt;
&lt;h3&gt;早期&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/0b52eb33696834137630aaf9bcbb2547982f7be9/components/blockly-src/demos/code/code.js#L503"&gt;blockly-src/demos/code/code.js Code.runJS&lt;/a&gt;这个好理解,早期的做法，目前被废弃&lt;/p&gt;
&lt;p&gt;早期的执行机制如注释中说的&lt;code&gt;Just a quick and dirty eval&lt;/code&gt;，简单粗暴&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MSG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;badCode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后来的机制颇为费解&lt;/p&gt;
&lt;h3&gt;后来的机制&lt;/h3&gt;
&lt;p&gt;我们可以从&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L876"&gt;bindClick runButton&lt;/a&gt;追踪起、经过&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1019"&gt;Code.reloadSandbox()&lt;/a&gt;,在这个函数中将模块generate为代码:&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1165"&gt;Code.getContext&lt;/a&gt;,generate的过程会判断是否需要使用babel编译，如果需要会做好编辑，在之后的程序中用babel编译它:&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1183"&gt;Code.transform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如此一来我们就得到了可在普通浏览器里运行的js代码,如果是早期的做法，至此丢到eval里就结束了，目前的做法要复杂些，把代码丢到一个iframe中跑,用到了&lt;a href="https://github.com/bahmutov/iframe-api"&gt;iframe-api&lt;/a&gt; (本质上是window.postMessage)&lt;/p&gt;
&lt;p&gt;一些核心步骤如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/code.js#L1102"&gt;launcher.sandbox(frame, data);&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/launcher.js#L132"&gt;sandbox: function (frame, data) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;通信过程&lt;/h1&gt;
&lt;h3&gt;websocket&lt;/h3&gt;
&lt;p&gt;我们先关注采用websocket的通信过程(本地运行)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/transport/WebSocketTransport.js#L43"&gt;onmessage handle&lt;/a&gt;定义了收到smart数据的回调&lt;/p&gt;
&lt;p&gt;值得注意的是，数据的传输使用了二进制数据&lt;/p&gt;
&lt;p&gt;之后通过事件系统发布消息,emit的定义之处在&lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/core/EventEmitter.js#L36"&gt;EventEmitter emit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps:使用mqtt与云端通信的部分在这 &lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/transport/MqttTransport.js"&gt;MqttTransport.js&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;控制流&lt;/h1&gt;
&lt;p&gt;有了上边这些探索，我们可以挑战最后一个问题了，控制指令是如何抵达smart的，拿最初的例子来说，把点亮红灯积木块跑起来的时候发生了什么？&lt;/p&gt;
&lt;p&gt;首先是积木生成对应的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;rgbled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRGBLedCathode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rgbled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#ff0000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;board我们在前头说过，检索源码发现&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/webduino-blockly.js#L207"&gt;getRGBLedCathode&lt;/a&gt;不过是对&lt;code&gt;webduino.module.RGBLed&lt;/code&gt;的包装&lt;/p&gt;
&lt;p&gt;于是我们到&lt;a href="https://github.com/webduinoio/webduino-js"&gt;webduino-js&lt;/a&gt;继续探索.我们沿着&lt;code&gt;rgbled.setColor('#ff0000');&lt;/code&gt;一路追踪下去，看到&lt;a href="https://github.com/webduinoio/webduino-js/blob/master/src/module/DataTransfer.js"&gt;DataTransfer.js&lt;/a&gt;  , webduino采用二进制来通信，发送数据的地方定义在&lt;a href="https://github.com/webduinoio/webduino-js/blob/master/src/core/Board.js#L819"&gt;send&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/webduinoio/webduino-js/blob/44023cf71ef3fcf3a618f7abab6d69ee17de9000/src/transport/WebSocketTransport.js#L56"&gt;sendOut&lt;/a&gt; 在此我们可以看到数据的发送也是用的二进制（收发都是)&lt;/p&gt;
&lt;h1&gt;其他感兴趣的地方&lt;/h1&gt;
&lt;h3&gt;与页面元素交互&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/generators/webduino.js#L54"&gt;demo_light_click generator&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascript.ruanyifeng.com/stdlib/arraybuffer.html"&gt;JavaScript 标准参考教程 二进制数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.villainhr.com/page/2017/04/16/Web%20%E7%9B%B4%E6%92%AD%E6%B5%81%E7%9A%84%E8%A7%A3%E6%9E%90"&gt;Web 直播流的解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-21:webduino-analysis.html</guid><category>rpi</category></item><item><title>在blockly中构建语音识别/合成 积木块</title><link>/blockly-sound_recognition.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/speech_block9f7d476a.png" /&gt;&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;近期在完善blockly4pi中AI的相关部分，语音和图像/视频流是常见的输入，语音的输入之前计划在硬件积木那边采集，之后流向树莓派，交由树莓派来处理，不过协议因此变得复杂许多，一番权衡之下，我们决定在浏览器里来处理多媒体输入&lt;/p&gt;
&lt;p&gt;我一直在关注浏览器中的webRTC和Web Speech，之前在几个项目中也接触过它们,这些接口现在越发强大了，而且浏览器的支持也在变好&lt;/p&gt;
&lt;h1&gt;Web Speech&lt;/h1&gt;
&lt;p&gt;HTML5中和Web Speech相关的API有两类, 一类是"语音合成(Speech Synthesis)"，一类是"语音识别(Speech Recognition)",无论哪种,使用起来都非常简单. &lt;/p&gt;
&lt;h3&gt;语音合成&lt;/h3&gt;
&lt;p&gt;之前语音合成我一直用百度语音来做，效果还不错，不过多了一层网络请求.&lt;/p&gt;
&lt;p&gt;Chrome 浏览器在版本25之后开始支持这一特性，效果非常棒.你可以调出你的控制台,让浏览器说: '你好,世界',像下边这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;utterThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;你好，世界！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterThis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;神奇的是，竟然没有用到云服务，完全在本地完成!&lt;/p&gt;
&lt;h3&gt;语音识别&lt;/h3&gt;
&lt;p&gt;相比于语音合成，语音识别还有些坑。&lt;/p&gt;
&lt;p&gt;我们先来说下它的简单用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newRecognition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上边短短的几行，你就完成了浏览器调用麦克风，等待语音输入到结果输出的完成流程&lt;/p&gt;
&lt;p&gt;如果你只是想拿到输出结果的内容，可以这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newRecognition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//newRecognition.continuous = false;&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//console.log(event);&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;transcript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;识别结果比较理想&lt;/p&gt;
&lt;h4&gt;坑&lt;/h4&gt;
&lt;p&gt;有个恼人的坑是，识别开始后，浏览器有时候一直在等待输入，而无法返回识别结果（可能是墙的原因），这种情况时常发生，而且在各个平台下(mac/windows)下都是如此&lt;/p&gt;
&lt;p&gt;不过在chrome的开发版(canary)中一切正常,我的当前版本号是:&lt;code&gt;60.0.3099.0（正式版本）canary （64 位&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;包装成blockly积木块&lt;/h1&gt;
&lt;p&gt;为了将其纳入到blockly4pi体系中，我们需要将Web Speech包装为blockly积木块&lt;/p&gt;
&lt;p&gt;语音合成部分比较简单,在积木中接受用户输入，传到api中即可，@dsl已经完成了这个工作&lt;/p&gt;
&lt;p&gt;语音识别部分会比较麻烦，在上边的语音识别示例代码里，我们看到对语音的识别结果出现在&lt;code&gt;onresult&lt;/code&gt;事件回调的函数里，这样一来控制流就不是线性的了(哈哈 在js中这才是常态)，如何在blockly中表达变达这种控制流，是个值得思考的问题&lt;/p&gt;
&lt;p&gt;熟悉js的同学会觉得思路上不难，可要在blockly中表达也没有很容易，首先得熟悉blockly的表达习惯和api,有些部分涉及比较高级的api&lt;/p&gt;
&lt;p&gt;这个问题webduino团队给出了漂亮的解答，我们稍后对其&lt;a href="https://github.com/webduinoio/webduino-blockly"&gt;源码&lt;/a&gt;做个分析&lt;/p&gt;
&lt;h3&gt;源码分析&lt;/h3&gt;
&lt;p&gt;熟悉blockly的小伙伴，很轻松能定位到目标积木块的源码(我们只关注sound_recognition块，其他块相对简单)&lt;/p&gt;
&lt;p&gt;在注释中我们找到了积木块的生成方式：&lt;a href="https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#shuqaz"&gt;sound_recognition blockfactory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/sound_blockfccbdea4.png" /&gt;&lt;/p&gt;
&lt;p&gt;积木外观由以下代码定义:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Blockly.Blocks[&amp;#39;sound_recognition&amp;#39;] = {
  init: function() {
    this.appendDummyInput()
        .appendField(&amp;quot;開始語音辨識 ( Chrome 限定，不支援 iOS )&amp;quot;);
    this.appendDummyInput()
        .appendField(&amp;quot;辨識語言：&amp;quot;)
        .appendField(new Blockly.FieldDropdown([[&amp;quot;中文&amp;quot;,&amp;quot;cmn-Hant-TW&amp;quot;], [&amp;quot;English&amp;quot;,&amp;quot;en-US&amp;quot;]]), &amp;quot;lang_&amp;quot;)
        .appendField(&amp;quot;    即時辨識：&amp;quot;)
        .appendField(new Blockly.FieldDropdown([[&amp;quot;on&amp;quot;,&amp;quot;on&amp;quot;], [&amp;quot;off&amp;quot;,&amp;quot;off&amp;quot;]]), &amp;quot;interimResults_&amp;quot;)
        .appendField(&amp;quot;( 行動裝置勾選 off )&amp;quot;);
    this.appendStatementInput(&amp;quot;recognition_&amp;quot;);
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setTooltip(&amp;#39;&amp;#39;);
    this.setHelpUrl(&amp;#39;&amp;#39;);
  }
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(以js为例)拿到积木中的用户的输入很简单:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Blockly.JavaScript[&amp;#39;sound_recognition&amp;#39;] = function(block) {
  var dropdown_lang_ = block.getFieldValue(&amp;#39;lang_&amp;#39;);
  var dropdown_interimresults_ = block.getFieldValue(&amp;#39;interimResults_&amp;#39;);
  var statements_recognition_ = Blockly.JavaScript.statementToCode(block, &amp;#39;recognition_&amp;#39;);
  // TODO: Assemble JavaScript into code variable.
  var code = &amp;#39;...;\n&amp;#39;;
  return code;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;statements_recognition_&lt;/code&gt;值得留意&lt;/p&gt;
&lt;p&gt;至此整个积木块已经完成，只剩下最后也最核心的问题了，sound_recognition是如何来generate出代码的，上边提到的回调的问题也是在这里处理&lt;/p&gt;
&lt;p&gt;直接上代码更直观些: &lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/generators/webduino.js#L1727"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;抛开辅助性的代码，我们看到最核心的部分是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;#39;    window._recognition.onresult = async function(event,result) {\n&amp;#39; +
    &amp;#39;      result = {};\n&amp;#39; +
    &amp;#39;      result.resultLength = event.results.length-1;\n&amp;#39; +
    &amp;#39;      result.resultTranscript = event.results[result.resultLength][0].transcript;\n&amp;#39; +
    &amp;#39;      if(event.results[result.resultLength].isFinal===&amp;#39; + inter1 + &amp;#39;){\n&amp;#39; +
    &amp;#39;        console.log(result.resultTranscript);\n&amp;#39; +
    &amp;#39;        &amp;#39; + statements_recognition_ +
    &amp;#39;        &amp;#39; + consoleFinal1 +
    &amp;#39;      }else if(event.results[result.resultLength].isFinal===&amp;#39; + inter2 + &amp;#39;){\n&amp;#39; +
    &amp;#39;        &amp;#39; + consoleFinal2 +
    &amp;#39;      }\n&amp;#39; +
    &amp;#39;    };\n&amp;#39; +
    &amp;#39;    window._recognition.start();\n&amp;#39; +
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特别注意&lt;code&gt;statements_recognition_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;顺便吐个槽，尽管code的拼接极尽排版的工整，但读起来还是不舒服，用es6的模版字符串来写会好看很多&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascript.ruanyifeng.com/htmlapi/webspeech.html"&gt;Web Speech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly"&gt;webduino-blockly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-12:blockly-sound_recognition.html</guid><category>rpi</category></item><item><title>嘿 Siri 关灯</title><link>/rpi-siri-close-light.html</link><description>&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/siri17469bd4.png" /&gt;&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;你在南方的艳阳里大雪纷飞,我在北方的寒夜里四季如春&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;马頔的这句歌词，道尽南方人过冬的艰辛。在没有暖气的南方，过冬基本靠抖腿和一身正气&lt;/p&gt;
&lt;p&gt;我们以高中诗词鉴赏的套路来剖析下词作，"你在南方的艳阳里大雪纷飞"当然不是直白地描述一场太阳雪,艺术要有含蓄美。这句话实际上说的是"你"在南方灯如暖阳的房间里，忘穿秋裤，冻得像雪地里呆呆的兔子（由此可见这个灯是白炽灯而不是节能灯，节能灯如白月光而不似暖阳）&lt;/p&gt;
&lt;p&gt;如果你有兴趣深挖，会进一步坚定艳阳指的就是灯。小如洞穴的房间、灯与影子，不由让人想到柏拉图的洞穴理论，作者进而感慨现实世界的不真实性，于是有后边的"穷极一生做不完一场梦"&lt;/p&gt;
&lt;p&gt;至于如果题目问"你"指的是谁，你最好不要答前女友，其他随意，以免勾起阅卷老师伤感的回忆，给你个悲伤的分数&lt;/p&gt;
&lt;p&gt;在灯如暖阳床如霜的南方夜晚，你刚看完《汇编语言从入门到放弃》，准备起床关灯睡觉，却对被子依依不舍。这时你想：要是对着Siri说一声&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嘿siri，宝宝困了帮我关灯么么哒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;便可睡觉该是多美的场景&lt;/p&gt;
&lt;p&gt;又或者 圣诞夜你和你的小女朋友在被窝里讨论拉普拉斯变换或是傅里叶变换，可窗帘没拉，灯太亮影响发挥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嘿Siri关灯并闭上眼睛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们撸起袖子来实现它&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;我不建议你给房间换一个智能灯泡，也不打算向你推销一套年底特价智能家居解决方案，我们延续之前的思路(&lt;a href="http://blog.just4fun.site/raspberrypi-lirc.html"&gt;用树莓派给家用电器加上智能&lt;/a&gt;)，尽量用非入侵的方式来解决问题，不去破坏和替换现有的设备&lt;/p&gt;
&lt;p&gt;于是我们就提出这样一个问题：如何在不改变现有灯泡特性、电路结构和开关特性的情况下，来关灯？&lt;/p&gt;
&lt;p&gt;能想到的方案似乎只有模拟人手的动作，以机械的方式来按下开关&lt;/p&gt;
&lt;p&gt;"舵机"就是我们的首选了&lt;/p&gt;
&lt;p&gt;剩下的就是如何躺在床上控制舵机来关灯，与硬件世界打交道，树莓派是我偏好的工具。树莓派控制舵机不成问题，至于如何用手机控制树莓派，我也在此前的文章中论述过&lt;/p&gt;
&lt;p&gt;不过本文将采用更酷的方式，你将无需编程，通过拖曳积木化的模块，就可以搭建出关灯机器人，然后通过siri控制这个机器人,如此一来你可以用自然语言的方式给siri发送关灯命令&lt;/p&gt;
&lt;p&gt;这个方案拓展开，我们几乎可以控制所有的按键式开关&lt;/p&gt;
&lt;p&gt;自然语言处理这部分Siri帮我们做了，之后有机会我们自己来实现，听起来有点像最近怒刷各种技术社区的&lt;a href="https://m.toutiao.com/i6366879371965235714/?tt_from=weixin_moments&amp;amp;utm_campaign=client_share&amp;amp;app=news_article&amp;amp;utm_source=weixin_moments&amp;amp;iid=6814510930&amp;amp;utm_medium=toutiao_android&amp;amp;wxshare_count=2&amp;amp;pbid=31547628651&amp;amp;from=timeline&amp;amp;isappinstalled=0"&gt;Jarvis&lt;/a&gt; --扎尔伯格用人工智能控制家居的项目&lt;/p&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;h3&gt;硬件部分&lt;/h3&gt;
&lt;p&gt;硬件部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树莓派&lt;/li&gt;
&lt;li&gt;舵机&lt;/li&gt;
&lt;li&gt;长导线&lt;/li&gt;
&lt;li&gt;移动电源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/siri56e654b0.png" /&gt;&lt;/p&gt;
&lt;p&gt;组件不多，考虑到电灯开关的位置一般齐胸，而树莓派和移动电源(供电)放在地上，所以你需要三根长导线，而不是普通的杜邦线，和往常一样，长导线这种东西都是从万能的@李老师的万能的实验室里要来的,感谢@李老师一直以来的助攻&lt;/p&gt;
&lt;p&gt;下边我们对各个部分做个简单介绍：&lt;/p&gt;
&lt;h4&gt;树莓派&lt;/h4&gt;
&lt;p&gt;关于树莓派，可以参考我此前的文章:&lt;a href="http://blog.just4fun.site/raspberrypi-install-and-config.html"&gt;树莓派折腾笔记之系统安装与配置&lt;/a&gt;.入门新手会遇到的问题我基本都列出了&lt;/p&gt;
&lt;p&gt;我也翻译了一份&lt;a href="https://github.com/wwj718/awesome-raspberry-pi-zh"&gt;树莓派(Raspberry Pi)资源大全中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;供大家玩耍时参考&lt;/p&gt;
&lt;h4&gt;舵机&lt;/h4&gt;
&lt;p&gt;我买的是淘宝上的SG90 9g舵机，价格6块多,关于舵机的控制原理比较麻烦，李老师跟我描述过，我听个大概，不过不影响，去网上抄段程序修修改改，封装为黑盒函数基本能用，有空在细看这块&lt;/p&gt;
&lt;p&gt;简单介绍下舵机上的几根线:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色：电压&lt;/li&gt;
&lt;li&gt;粽色：地线&lt;/li&gt;
&lt;li&gt;橙色：信号线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我把信号线接到18号引脚(BCM) ，查看gpio图：&lt;code&gt;gpio readall&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;李老师&lt;/h4&gt;
&lt;p&gt;顺便也介绍些李老师.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;李老师其实不是我的老师,我毕业后才认识他，我从李老师这边学到很多硬件知识，从传道解惑的角度来说，李老师确是我的老师&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师南大博士毕业后，在大学执教，他博士阶段读的是图像识别，但他是个彻头彻尾的硬件黑客&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师的实验室黑科技齐全，哆啦A梦口袋一般，有求必应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师常说的话有这样一种模式："没事没事，xx功能的电子设备买不到也没事，我们自己画，等印刷完，你过来取". 我们有个有趣的项目，硬件部分都是李老师画的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迄今 只有一次例外: 有一回李老师在论述分布式节点的连接策略时，我有点开小差，状态类似"一人虽听之 一心以为有鸿鹄将至 思援弓缴而射之". 我突然想要一个无线开关来控制我那不够智能的油汀，以便于用树莓派控制它。而李老师也和往常一样，一边论述一边离题，岔到其他他感兴趣的话题:这回是关于如何把无线模块画得更小，当他兴致勃勃地分享这个灵光一现时，我不合时宜地提出说我想要一个无线开关，能不能用继电器、开关外壳和无线模块，外加画个板子集成它们，李老师以一种给你糖吃别打岔的样子，说这个淘宝上有卖的，app都自带的，你去买一个，抓包hack它就能编程了。于是李老师继续谈论他画板子的布线方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师实验室的四轴飞行器，除了飞行器是自己做的，遥控手柄也是自己画的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大家感受一下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/lilaoshi397d1e4f.png" /&gt;&lt;/p&gt;
&lt;p&gt;让我们想到那句感人的话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;情之所钟，虽丑不嫌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉哪里不对 ……&lt;/p&gt;
&lt;h3&gt;组装硬件&lt;/h3&gt;
&lt;p&gt;硬件部分的组装很容易，直接上效果图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/siri4cc6a938.png" /&gt;&lt;/p&gt;
&lt;p&gt;接下来让我们用双面胶把舵机贴到开关边上，舵机转动即可关灯&lt;/p&gt;
&lt;h1&gt;软件部分&lt;/h1&gt;
&lt;p&gt;按照一般的套路，此处应该从舵机的驱动程序写起，加上通讯模块，接着写一些胶水程序黏合它们，组成实现完整的功能&lt;/p&gt;
&lt;p&gt;软件部分如开篇所说，这次我想试试不通过编程的方式来完成这个工作. 仅仅通过拖拽功能模块，我们就能拼出功能的机器人,这样可以让更多的人参与进来(当然包括哪些在玩王者荣耀的小学生)&lt;/p&gt;
&lt;p&gt;我已经完成了积木式的控制平台,硬件驱动全部封装为积木块(让每个人实现一次硬件驱动未免无聊)，拖曳即可，支持几乎完备的编程要素，可以实现丰富的功能&lt;/p&gt;
&lt;p&gt;我们来拖曳模块完成任务，Siri的请求本身被我封装为模块&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/siri.gif" /&gt;&lt;/p&gt;
&lt;p&gt;完成后，程序为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/siri15bab0b4.png" /&gt;&lt;/p&gt;
&lt;p&gt;至于对原理有兴趣的geek小伙伴，在之后的文章里，我们再来讲解细节实现,实际hack了Siri&lt;/p&gt;
&lt;h1&gt;效果演示&lt;/h1&gt;
&lt;p&gt;点击"运行程序"，程序就会在树莓派中运行（开机自启）,我们做个演示&lt;/p&gt;
&lt;video src="http://ocfy0072v.bkt.clouddn.com/siri-%E5%85%B3%E7%81%AF-1.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h1&gt;自然语言&lt;/h1&gt;
&lt;p&gt;因为Siri本身具有处理自然语言的能力，我们可以用许多说法来关灯&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://wwj-fig-bed.just4fun.site/siri05dcb491.png" /&gt;&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;当前的自然语言处理(NLU)用得到了Siri，下一个版本想试试&lt;a href="http://www.yige.ai/"&gt;yige.ai&lt;/a&gt;,然后把它植入到微信中，这样可以跨平台使用它&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-12-24:rpi-siri-close-light.html</guid><category>rpi</category></item></channel></rss>