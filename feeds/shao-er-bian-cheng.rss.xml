<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Wed, 29 Aug 2018 00:00:00 +0000</lastBuildDate><item><title>Scratch3.0自定义插件注意事项之令牌桶算法</title><link>/scratch-extension-token-bucket.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/bucket_df323db8.png" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;我们之前在&lt;a href="https://blog.just4fun.site/Hardware-Programming-style.html"&gt;两种硬件编程风格的比较&lt;/a&gt;中提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在少儿编程/硬件编程教育领域，硬件编程有两种风格，我将这两种风格分别称为灌入式和交互式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上述文章里，我试图论述了,对少儿编程教育而言，为何交互式编程优于灌入式编程。&lt;/p&gt;
&lt;p&gt;如果我们按照Scratch的设计风格，那么拓展Scratch，使其与硬件交互的插件一定是交互式的。Scratch大量采用了Smalltalk的设计原则，这些原则包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个系统要服务于创造精神，那么对于一个人来说，它必须是完全可以理解的。&lt;/li&gt;
&lt;li&gt;系统应该用最少的且不可更改的部件构建; 这些部分应尽可能一般化; 系统的所有部分都应保持在统一的框架内。&lt;/li&gt;
&lt;li&gt;计算应该被视为可通过发送消息来统一调用的对象的内在功能。&lt;/li&gt;
&lt;li&gt;语言应围绕一个强大的隐喻设计，这样就可以统一应用于所有领域。&lt;/li&gt;
&lt;li&gt;用户可以访问的每个组件都应该能够以有意义的方式呈现自己，以便于用户进行观察和操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些原则，我们之后有时间再细说，单独提一下第三点:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算应该被视为可通过发送消息来统一调用的对象的内在功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一点指出了消息通信在Scratch所占据的核心位置，我之前构建&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;就主要围绕这条原则。我相信这点是Smalltalk留给Scratch的重要遗产，是Scratch如此灵活强大的原因，也是理解和写出复杂的Scratch程序的核心所在&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/LLK/Scratch_1.4"&gt;第一代的Scratch&lt;/a&gt;就是用Smalltalk的方言Squeak写的，尽管Scratch经过2次的重写，最新的一代已经从Squeak迁移到了JavaScript，但设计原则上并没有发生变化。&lt;/p&gt;
&lt;p&gt;所以我坚持Scratch的插件都应该遵循这些原则。如果Scratch3.0的硬件插件是灌入式的（目前国内不少公司确实在这样做），系统的所有部分将无法保持在统一的框架内。&lt;/p&gt;
&lt;h1&gt;交互式存在的问题&lt;/h1&gt;
&lt;p&gt;如果我们同意了Scratch插件应该采用交互式风格来写，并且以message为中心（官方团队目前都是这么做的，但他们在消息之上很聪明地抽象出了一层:远程调用）&lt;/p&gt;
&lt;p&gt;那么我们就需要解决消息通信类系统固有的一些问题，典型的问题之一就是消息发送速率&lt;/p&gt;
&lt;p&gt;在通信系统中，我们需要控制发送数据的速率，如果速率太高，可能带来许多问题，诸如带宽不足，或者服务端无法应对意料之外的高频消息，诸如社区里在使用官方的wedo插件时就遇到了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/LLK/scratch-vm/issues/1531"&gt;Wedo2 sometimes drops commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LLK/scratch-vm/issues/1523"&gt;WeDo2 motor blocks do not work correctly with two motors plugged in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息发送速率问题当然有很多解决方案，在ZeroMQ中，框架内可以帮我们处理这个问题，诸如让消息在接受者一端排队，当消息高于设置水位之后，自动丢弃。&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;采用了ZeroMQ，所以这个问题可以通过简单配置来解决。&lt;/p&gt;
&lt;p&gt;但scratch团队的&lt;a href="https://scratch.mit.edu/wedo"&gt;Scratch Link&lt;/a&gt;并未采用ZeroMQ，所以他们选择手写&lt;code&gt;令牌桶算法&lt;/code&gt;(token bucket)来实现&lt;code&gt;速率限制（Rate Limiting）&lt;/code&gt;。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://en.wikipedia.org/wiki/Token_bucket"&gt;令牌桶算法(token bucket)&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;令牌桶算法是速率限制（Rate Limiting）中最常使用的一种算法。&lt;/p&gt;
&lt;p&gt;令牌桶算法基于令牌桶中是否存在令牌来指示什么时候可以发送数据。如果桶中存在令牌，则允许发送数据；反之，则不允许。&lt;/p&gt;
&lt;p&gt;图示如下:&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src="http://oav6fgfj1.bkt.clouddn.com/tokenbucket_b8e36c38.png" /&gt;&lt;/p&gt;
&lt;h3&gt;算法&lt;/h3&gt;
&lt;p&gt;令牌桶算法在概念上表述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果设置的平均发送速率为r，那么令牌以1/r秒的速率添加到桶中。&lt;/li&gt;
&lt;li&gt;假设桶最多可存b个令牌。如果令牌在桶已满时到达，则将其丢弃。&lt;/li&gt;
&lt;li&gt;当n个数据包到达时，从令牌桶中取出(删除)n个令牌，同时将数据包被发送出去。如果令牌不够，则数据不发送。&lt;ul&gt;
&lt;li&gt;它们可以被丢弃；也可以排放在队列中以便当桶中累积了足够多的令牌时再发送；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于在此我们主要关心数据包数量，而不考虑不讨论具体数据大小，所以我们暂不讨论流量问题。&lt;/p&gt;
&lt;h1&gt;算法实现&lt;/h1&gt;
&lt;h3&gt;Python实现&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TokenBucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;An implementation of the token bucket algorithm.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; bucket = TokenBucket(80, 0.5)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; print bucket.consume(10)&lt;/span&gt;
&lt;span class="sd"&gt;    True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; print bucket.consume(90)&lt;/span&gt;
&lt;span class="sd"&gt;    False&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill_rate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;tokens is the total tokens in the bucket. fill_rate is the&lt;/span&gt;
&lt;span class="sd"&gt;        rate in tokens/second that the bucket will be refilled.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Consume tokens from the bucket. Returns True if there were&lt;/span&gt;
&lt;span class="sd"&gt;        sufficient tokens otherwise False.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_rate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来对它进行测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenBucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(10) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(10) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(90) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;consume(90) = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tokens = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  /tmp python token_bucket.py
tokens = 80.0
consume(10) = True
consume(10) = True
tokens = 61.0040922165
tokens = 62.0080561638
consume(90) = False
tokens = 62.0081322193
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;scratch3_wedo2 extension的实现&lt;/h3&gt;
&lt;p&gt;我们来看看scratch官方的实现（包含在&lt;a href="https://github.com/LLK/scratch-vm/pull/1540"&gt;这次提交&lt;/a&gt;中）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../util/timer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * A utility for limiting the rate of repetitive send operations, such as&lt;/span&gt;
&lt;span class="cm"&gt;     * bluetooth messages being sent to hardware devices. It uses the token bucket&lt;/span&gt;
&lt;span class="cm"&gt;     * strategy: a counter accumulates tokens at a steady rate, and each send costs&lt;/span&gt;
&lt;span class="cm"&gt;     * a token. If no tokens remain, it&amp;#39;s not okay to send.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param {number} maxRate the maximum number of sends allowed per second&lt;/span&gt;
&lt;span class="cm"&gt;     * @constructor&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The maximum number of tokens.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maxTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The interval in milliseconds for refilling one token. It is calculated&lt;/span&gt;
&lt;span class="cm"&gt;         * so that the tokens will be filled to maximum in one second.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_refillInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;maxRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The current number of tokens in the bucket.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maxTokens&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * The last time in milliseconds when the token count was updated.&lt;/span&gt;
&lt;span class="cm"&gt;         * @type {number}&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_lastUpdateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeElapsed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Check if it is okay to send a message, by updating the token count,&lt;/span&gt;
&lt;span class="cm"&gt;     * taking a token and then checking if we are still under the rate limit.&lt;/span&gt;
&lt;span class="cm"&gt;     * @return {boolean} true if we are under the rate limit&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;okayToSend&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Calculate the number of tokens to refill the bucket with, based on the&lt;/span&gt;
        &lt;span class="c1"&gt;// amount of time since the last refill.&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeElapsed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeSinceRefill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_lastUpdateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refillCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeSinceRefill&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_refillInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// If we&amp;#39;re adding at least one token, reset _lastUpdateTime to now.&lt;/span&gt;
        &lt;span class="c1"&gt;// Otherwise, don&amp;#39;t reset it so that we can continue measuring time until&lt;/span&gt;
        &lt;span class="c1"&gt;// the next refill.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refillCount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_lastUpdateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Refill the tokens up to the maximum&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maxTokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;refillCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// If we have at least one token, use one, and it&amp;#39;s okay to send.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/test/unit/util_rateLimiter.js"&gt;测试用例&lt;/a&gt;为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../../src/util/rateLimiter.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rate limiter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// The rate limiter starts with a number of tokens equal to the max rate&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// Running okayToSend rate times uses up all of the tokens&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
     &lt;span class="c1"&gt;// After a delay of one second divided by the max rate, we should have exactly&lt;/span&gt;
    &lt;span class="c1"&gt;// one more token to use.&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用scratch官方的RateLimiter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// const RateLimiter = require(&amp;#39;../../util/rateLimiter.js&amp;#39;);&lt;/span&gt;
&lt;span class="c1"&gt;// this._rateLimiter = new RateLimiter(30);&lt;/span&gt;

    &lt;span class="nx"&gt;_send&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPeripheralIsConnected&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_rateLimiter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;okayToSend&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ble&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IO_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;a href="https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/src/extensions/scratch3_wedo2/index.js"&gt;wedo插件&lt;/a&gt;中，我们可以看到RateLimiter暴露出的接口:&lt;code&gt;this._rateLimiter.okayToSend()&lt;/code&gt;清晰易用&lt;/p&gt;
&lt;p&gt;值得一提的是，scratch官方实现的令牌桶算法和Python的实现略有不同。scratch官方实现没有n条消息同时涌入的情况，而是逐条处理:&lt;code&gt;this._count--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大家之后在Scratch3.0中自定义插件，需要处理速率问题时，可以直接使用官方的&lt;code&gt;RateLimiter&lt;/code&gt;,我的建议是所有与消息相关的插件都该加上&lt;code&gt;RateLimiter&lt;/code&gt;, 否则系统的健壮性是堪忧的，也很难做到&lt;code&gt;宽围墙&lt;/code&gt;，可能一不小心就塌了&lt;/p&gt;
&lt;!--
[Rate-limiting with a token bucket for the WeDo extension](https://github.com/LLK/scratch-vm/pull/1540)
    算法:[rateLimiter.js](https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/src/util/rateLimiter.js)
    应用: [scratch3_wedo2/index.js](https://github.com/LLK/scratch-vm/blob/769156c9af416430c5e0cc20621471d2b99fde43/src/extensions/scratch3_wedo2/index.js#L541)
    解决的问题:[Wedo2 sometimes drops commands](https://github.com/LLK/scratch-vm/issues/1531)

交互式中的核心问题,我之前写交互式设计

为了实现宽围墙

设施的牢固性

蹦蹦床的时候

那是疫苗

# todo
*  算法的图示
*  算法的伪代码
*  Python实现
*  Scratch实现
--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/Hardware-Programming-style.html"&gt;两种硬件编程风格的比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LLK/scratch-vm/pull/1540"&gt;Rate-limiting with a token bucket for the WeDo extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Token_bucket"&gt;wikipedia Token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://baike.baidu.com/item/token%20bucket/4315253?noadapt=1"&gt;百度 token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/YEYUANGEN/article/details/20529793"&gt;qos令牌桶（Token Bucket）算法解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/falconry/token-bucket/blob/master/token_bucket/limiter.py"&gt;Python token-bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/drocco007/6155452"&gt;Python generator rate limiter using token bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ActiveState/code/blob/master/recipes/Python/511490_Implementatitoken_bucket/recipe-511490.py"&gt;Implementatitoken_bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jiajunhuang.com/articles/2016_11_05-token_bucket.rst.html"&gt;Token Bucket 算法 celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/smyte/rate-limiter-df3408325846"&gt;High-performance rate limiting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://liuliqiang.info/post/214/"&gt;速率限制的一些思考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-29:scratch-extension-token-bucket.html</guid><category>scratch</category></item><item><title>分析scratch3.0与micro:bit的通信</title><link>/scratch3-microbit-analysis.html</link><description>&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/scratch_microbit_0f5be12b.png" width=600 /&gt; &lt;/p&gt;
&lt;p&gt;Scratch在七月底举行了一个大会:&lt;a href="https://scratch.mit.edu/conference"&gt;conference&lt;/a&gt;, 大会上, scratch团队向大家介绍了即将推出的Scratch 3.0, 赶在会议开始之前，scratch团队完成了对micro:bit的官方支持，项目页连同使用说明也正式上线:&lt;a href="[scratch.mit.edu/microbit](https://scratch.mit.edu/microbit)"&gt;microbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;scratch与micro:bit作为全球最有名的两个少儿编程项目（分别是软件和硬件），能够结合在一起，太振奋人心。之前社区里大家就围绕这块在做许多探索，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;的&lt;a href="https://blog.just4fun.site/scratch3-microbit.html"&gt;scratch3.0 + micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/user_guide/usage/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;尝鲜&lt;/h1&gt;
&lt;p&gt;只要你手边有micro:bit就可以开始体验了.&lt;/p&gt;
&lt;p&gt;按照&lt;a href="https://scratch.mit.edu/microbit"&gt;使用说明&lt;/a&gt;，将micro:bit接入scratch3.0毫无障碍:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/scratch_microbit_0f5be12b.png" width=600 /&gt; &lt;/p&gt;
&lt;p&gt;完成连接后就可以开始你的创作了，&lt;a href="https://scratch.mit.edu/microbit"&gt;使用说明&lt;/a&gt;页面里给出了几个例子,大家可以从这儿入手&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/scratch_heart_a30a52b1.png" width=600 /&gt; &lt;/p&gt;
&lt;h1&gt;原理&lt;/h1&gt;
&lt;p&gt;体验完scratch与micro:bit的互动，我们来分析一下官方是如何做到的。&lt;/p&gt;
&lt;p&gt;回顾&lt;a href="https://scratch.mit.edu/microbit"&gt;使用说明&lt;/a&gt;和体验过程，容易猜到Scratch Link起代理的作用，Scratch Link在内部跑了一个websocket服务，允许网页与其交互，同时在启动时扫描周围的BLE设备&lt;/p&gt;
&lt;p&gt;思路和&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;几乎完全一致&lt;/p&gt;
&lt;p&gt;Scratch Link与&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;的不同之处有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scratch Link目前不支持扩展，似乎也没计划开源，原因可能我猜测是Scratch Link将支持乐高机器人，而乐高机器人是闭源商业项目。&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;允许你自行扩展&lt;/li&gt;
&lt;li&gt;Scratch Link在使用上更为简易&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;兼容更多的系统环境以及支持所有的开源硬件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scratch Link在易用性上做得非常好，这也&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;准备向它学习的地方。&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;的目标之一是完全兼容Scratch Link的功能&lt;/p&gt;
&lt;p&gt;这篇文章就来分析一下官方在这块的巧思。以便于我们可以将其用到其他地方。&lt;/p&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;h3&gt;推断&lt;/h3&gt;
&lt;p&gt;从scratch的&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;来看，Scratch Link仅仅只是一个代理，scratch与micro:bit的交互逻辑都在&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;所以我们暂时不必使用&lt;a href="https://www.wireshark.org/download.html"&gt;wireshark&lt;/a&gt;抓包分析，而仅仅通过阅读&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;，应该就能知道通信的细节，之后我们使用gatttool来验证。&lt;/p&gt;
&lt;p&gt;如果你对BLE/GATT相关的概念不熟悉，可以看看我之前的文章:&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;!--adapter与硬件直接是不是只是代理  建立连接，转发消息--&gt;

&lt;h3&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L35"&gt;BLEUUID&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension源码&lt;/a&gt;里我们可以找到micro:bit里跑的服务和属性的uuid，也正是这个证据，让我们猜测Scratch Link只是个透明代理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const BLEUUID = {
    service: 0xf005,
    rxChar: &amp;#39;5261da01-fa7e-42ab-850b-7c80220097cc&amp;#39;,
    txChar: &amp;#39;5261da02-fa7e-42ab-850b-7c80220097cc&amp;#39;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对比lancaster大学的&lt;a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html"&gt;Bluetooth Developer Studio Level 3 Profile Report&lt;/a&gt;,可知scratch自己重写了很多东西，而没有使用现成的UART service，这点我颇为不解。&lt;/p&gt;
&lt;h3&gt;展开追踪&lt;/h3&gt;
&lt;p&gt;我们接着来跟踪一下&lt;code&gt;A button pressed？&lt;/code&gt;这个积木涉及的通信过程，从一个具体例子里突破。经过这个例子，我们对整个通信流程应该会有一个整体的了解，之后我们再对不同类型的积木逐类探索。&lt;/p&gt;
&lt;p&gt;GATT 通信的双方是 C/S 关系, 为了知道micr:bit上A按钮的状态，一般采用两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其一是利用GATT的通知机制，每当按钮状态变化时，通知给电脑(Scratch Link会把消息代理给scratch)&lt;/li&gt;
&lt;li&gt;其二是每当&lt;code&gt;A button pressed？&lt;/code&gt;积木被触发时，主动去read相应的属性值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit"&gt;scratch-gui/microbit&lt;/a&gt;应该是用这两种方式中的一种&lt;/p&gt;
&lt;p&gt;但&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;有些特殊，它构建了UART service，之后的的数据都走UART service，逻辑上这更像经典的串口通信。只是实现在GATT上而已。&lt;/p&gt;
&lt;p&gt;从源码中可以看到buttonA是否按下取决于 &lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L491"&gt;this._device.buttonA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L323"&gt;this._device = new MicroBit(this.runtime, Scratch3MicroBitBlocks.EXTENSION_ID);&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺藤摸瓜，可以跟踪到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Process the sensor data from the incoming BLE characteristic.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param {object} base64 - the incoming BLE data.&lt;/span&gt;
&lt;span class="cm"&gt;     * @private&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;_processSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse data&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Base64Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base64ToUint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gestureState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// cancel disconnect timeout and start a new one&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnectSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;BLETimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释里说得很清楚:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     * Process the sensor data from the incoming BLE characteristic.
     * @param {object} base64 - the incoming BLE data.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从逻辑和语义上，可以看出&lt;code&gt;_processSessionData&lt;/code&gt;是个回调函数，micro:bit会通过串口源源不断把它自身的状态数据(sensor data)不断发给&lt;code&gt;_processSessionData&lt;/code&gt;,  如此一来，scratch就能得知microbit的A按钮是否按下，为了验证我们的想法，我们得继续跟踪:&lt;code&gt;this._ble.read(BLEUUID.service, BLEUUID.rxChar, true, callback);&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Starts reading data from device after BLE has connected to it.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="nx"&gt;_onSessionConnect&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_processSessionData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ble&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rxChar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnectSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;BLETimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_ble看去是个通用的抽象io(BLESession)，&lt;code&gt;_ble.read&lt;/code&gt;在语义上类似UART read，只是实现上是基于GATT的，如果你熟悉GATT，至此应该基本都猜到了。当然我们会继续剖析。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    /**
     * Called by the runtime when user wants to scan for a device.
     */
    startDeviceScan () {
        this._ble = new BLESession(this._runtime, {
            filters: [
                {services: [BLEUUID.service]}
            ]
        }, this._onSessionConnect.bind(this));
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跟踪到BLESession类里， &lt;code&gt;BLESession&lt;/code&gt;继承自&lt;code&gt;JSONRPCWebSocket&lt;/code&gt;, 这里提示我们scratch与Scratch Link是如何通信的，基于WebSocket，同时使用远程调用的概念, RPC使用起来要比流简单很多。这是scratch官方很聪明的举措之一，我们在文末的tips里还将列出官方其他的聪明做法&lt;/p&gt;
&lt;p&gt;如果你不打算自己实现类似Scratch Link的东西，JSONRPCWebSocket不必太关注。我实现了类似Scratch Link的&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter&lt;/a&gt;，但使用的是消息通信，策略上和scratch团队不大一样。这块我们先不细说&lt;/p&gt;
&lt;p&gt;回到BLESession上边，我们前头关注&lt;code&gt;_ble.read&lt;/code&gt;,在此将看到它的实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characteristicId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;optStartNotifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onCharacteristicChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;characteristicId&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optStartNotifications&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startNotifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_characteristicDidChangeCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;onCharacteristicChanged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendRemoteRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sendError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js"&gt;micro:bit extension&lt;/a&gt;对它的调用是:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this._ble.read(BLEUUID.service, BLEUUID.rxChar, true, callback);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至此，我们就搞懂了&lt;code&gt;A button pressed？&lt;/code&gt;是如何实现的，optStartNotifications被设置为True，语义上是接受通知，当micro:bit上数据变化时，及时通知给scratch。技术层面使用了GATT的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端可以请求服务器通知一项特征&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于这点，我们在&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;有提到&lt;/p&gt;
&lt;p&gt;因为弄懂了&lt;code&gt;A button pressed？&lt;/code&gt;，所以&lt;code&gt;When A button pressed&lt;/code&gt;积木也不难理解，当然这需要你熟悉：scatch的HAT类型的积木(事件风格)。源码一目了然&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;whenButtonPressed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;any&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BTN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;关于write&lt;/h3&gt;
&lt;p&gt;既然我们分析完read，顺手看一下write的实现,直接上源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characteristicId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;serviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characteristicId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendRemoteRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sendError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没什么需要特别说的&lt;/p&gt;
&lt;p&gt;我们以一个使用write的积木为例，来看看具体的细节,以display text为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_writeSessionData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLECommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;_writeSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPeripheralIsConnected&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// attach command to beginning of message&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Base64Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uint8ArrayToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ble&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BLEUUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txChar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用display text打印&lt;code&gt;hello&lt;/code&gt;字符串，观察websocket传输的数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serviceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;61445&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characteristicId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5261da02-fa7e-42ab-850b-7c80220097cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gWhlbGxv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里值得一提的是编码方式:&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"&gt;Uint8Array&lt;/a&gt;:  Uint8Array 数组类型表示一个8位无符号整型数组，创建时内容被初始化为0&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.w3school.com.cn/js/jsref_charCodeAt.asp"&gt;charCodeAt&lt;/a&gt;: 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。&lt;/p&gt;
&lt;p&gt;硬件的通信使用的编码可能部位web开发者熟悉，我对底层编码也不熟，多是现学现用，基本也够用.说到编码，想起一本书特别赞:&lt;a href="https://book.douban.com/subject/4822685/"&gt;编码&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用gatttool做些实验&lt;/h3&gt;
&lt;p&gt;我在&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;有演示gatttool的使用&lt;/p&gt;
&lt;p&gt;我们在分析了Scratch/Scratch Link与micro:bit的通信之后，使用ble工具来做些分析，我在树莓派里使用gatttool，你可可以选择其他工具&lt;/p&gt;
&lt;p&gt;首先扫描micro:bit的地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@cozmo1:~ $ sudo hcitool lescan
DF:48:87:86:93:20 BBC micro:bit [zuzop]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接它并进入交互模式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@cozmo1:~ $ gatttool -I -b DF:48:87:86:93:20 -t random
[DF:48:87:86:93:20][LE]&amp;gt; connect
Attempting to connect to DF:48:87:86:93:20
Connection successful
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接成功！&lt;/p&gt;
&lt;p&gt;接着我们来看一下UART service的相关信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; primary 0xf005 # 输入0xf005和f005相同，都被处理为16进制
Starting handle: 0x0013 Ending handle: 0xffff
[DF:48:87:86:93:20][LE]&amp;gt; char-desc 0x0013 0xffff
handle: 0x0013, uuid: 00002800-0000-1000-8000-00805f9b34fb
handle: 0x0014, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0015, uuid: 5261da01-fa7e-42ab-850b-7c80220097cc
handle: 0x0016, uuid: 00002902-0000-1000-8000-00805f9b34fb
handle: 0x0017, uuid: 00002803-0000-1000-8000-00805f9b34fb
handle: 0x0018, uuid: 5261da02-fa7e-42ab-850b-7c80220097cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前头我们从源码里读到:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BLEUUID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xf005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;rxChar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5261da01-fa7e-42ab-850b-7c80220097cc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;txChar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5261da02-fa7e-42ab-850b-7c80220097cc&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可知我们的猜测完全正确！Scratch Link是个透明代理。&lt;/p&gt;
&lt;p&gt;接着让我们来读取micro:bit的sensor数据,&lt;code&gt;rxChar: '5261da01-fa7e-42ab-850b-7c80220097cc'&lt;/code&gt;对应的handle为&lt;code&gt;0x0015&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-read-hnd 0x0015
Characteristic value/descriptor: 00 5f ff f3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们按住按钮A时读到的数据为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-read-hnd 0x0015
Characteristic value/descriptor: 00 44 fe 57 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多次按下和松开，并观察，我们猜测按钮存储在&lt;code&gt;00 44 fe 57 01&lt;/code&gt;中的&lt;code&gt;1&lt;/code&gt;这个位置上&lt;/p&gt;
&lt;p&gt;回忆一下前头的&lt;code&gt;_processSessionData&lt;/code&gt;函数，据此我们就弄懂了数据的编解码方式，我们可以还原出从rxChar读到的经base64编码的数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;_processSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse data&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Base64Util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base64ToUint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltX&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tiltY&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touchPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gestureState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// cancel disconnect timeout and start a new one&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_timeoutID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnectSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;BLETimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们也可以开启通知 &lt;!--0100还是0200完全是猜的，有依据吗--&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-write-req 0x0016 0100
Characteristic value was written successfully
Notification handle = 0x0015 value: 00 29 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 85 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 85 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2d 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2c 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2a 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Notification handle = 0x0015 value: 00 2c 00 89 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
&lt;/pre&gt;&lt;/div&gt;


&lt;!--使用pygatt读取数据，使用BLED112 跨平台， 使用scratch3-adapter
mac下使用BLED112 https://github.com/peplin/pygatt/issues/159
 vim /usr/local/lib/python3.6/site-packages/pygatt/backends/bgapi/bgapi.py
adapter.scan() ok
但connect有问题
python  Byte Array to Hex String

https://stackoverflow.com/questions/19210414/byte-array-to-hex-string
--&gt;

&lt;p&gt;接着试试使用pygatt+BLED112在macOS下与micro:bit通信，使用BLED112，我们可以在mac/windows/linux下与ble设备通信&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygatt&lt;/span&gt;
&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygatt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BGAPIBackend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 使用BLED112&lt;/span&gt;
&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# pygatt在macOS下有bug需要hack start函数: https://github.com/peplin/pygatt/issues/159， 也可以参考：https://github.com/jannopet/LEGO-WeDo-2.0-Python-SDK/blob/master/wedo2/smarthub.py#L20&lt;/span&gt;

&lt;span class="n"&gt;DEVICE_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DF:48:87:86:93:20&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ADDRESS_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygatt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BLEAddressType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;
&lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEVICE_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ADDRESS_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#value = device.char_read(&amp;quot;5261da01-fa7e-42ab-850b-7c80220097cc&amp;quot;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hexlify&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    handle -- integer, characteristic read handle the data was received on&lt;/span&gt;
&lt;span class="sd"&gt;    value -- bytearray, the data returned in the notification&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Received data: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;hexlify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# todo 模仿前头js源码，对数据进行解包&lt;/span&gt;

&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5261da01-fa7e-42ab-850b-7c80220097cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;handle_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行后，输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Received data: b&amp;#39;00ab003600000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003200000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003000000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003700000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003700000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003c00000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003700000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003900000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00ad003c00000000000000000000000000000000&amp;#39;
Received data: b&amp;#39;00a9003d00000000000000000000000000000000&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此一来我们就可以自己写Scratch Link了，而不必使用官方的！例如在scratch3-adapter中将microbit作为一个extension. 我最近正在将这部分写为一个python库。感兴趣的同学可以一起参与:&lt;a href="https://github.com/wwj718/scratch-microbit-python-sdk"&gt;scratch-microbit-python-sdk&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接着我们来实验往microbit中写数据，我们前头提道display text积木，我们对其稍作调整,使其可在console运行，观察编码后的内容是什么:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Enum for micro:bit BLE command protocol.&lt;/span&gt;
&lt;span class="cm"&gt; * https://github.com/LLK/scratch-microbit-firmware/blob/master/protocol.md&lt;/span&gt;
&lt;span class="cm"&gt; * @readonly&lt;/span&gt;
&lt;span class="cm"&gt; * @enum {number}&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x81&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Uint8ToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u8Arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CHUNK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//arbitrary number&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u8Arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u8Arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;btoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_writeSessionData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;_writeSessionData&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// attach command to beginning of message&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// const data = Base64Util.uint8ArrayToBase64(output);&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Uint8ToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// return this._ble.write(BLEUUID.service, BLEUUID.txChar, data, &amp;#39;base64&amp;#39;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;hello&lt;/code&gt;被编码后的为&lt;code&gt;gWhlbGxv&lt;/code&gt;，发现和前头websocket捕获的一致:&lt;code&gt;gWhlbGxv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但base64应该是Scratch Link与scratch通信时的编解码方式，为了使用gatttool与micro:bit通信，我们需要猜测Scratch Linkmicro:bit里的固件是如何如何约定编解码的，关于这点，官方采取了闭源的策略，估计是有意为之，我们稍后来hack它&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hello&lt;/code&gt; 被编码后分别为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gWhlbGxv //base64
Uint8Array(6) [129, 104, 101, 108, 108, 111]  //Uint8Array
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试着以几种方式将他们转为16进制，都没有成功在micro:bit中显示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;char-write-cmd 0x0018  xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;!--
const resetEnergyExpended = new Uint8Array([1]);
    // resetEnergyExpended 的值是'1'，表示重置
    return characteristic.writeValue(resetEnergyExpended);

    是啥 会变为16进制吗

function buf2hex(buffer) { // buffer is an ArrayBuffer
  return Array.prototype.map.call(new Uint8Array(buffer), x =&gt; ('00' + x.toString(16)).slice(-2)).join('');
}

// EXAMPLE:
const buffer = new Uint8Array([129, 97]).buffer;
console.log(buf2hex(buffer)); // = 8161
--&gt;

&lt;p&gt;这导致我们需要使用一些嗅探工具抓包(BLE Sniffer)，之后用&lt;a href="https://www.wireshark.org/download.html"&gt;wireshark&lt;/a&gt;来分析，不过我手边暂时没有相应硬件，准备淘宝上买一个&lt;/p&gt;
&lt;p&gt;破解纯粹出于好玩，我们理解了官方的思路之后，自己重写一个micro:bit固件和是适配器也许比破解来得简单.使用makecode可以很轻松把gatt服务都搭了出来, 参考:&lt;a href="https://github.com/jaafreitas/scratch-microbit-extension/tree/master/firmware"&gt;scratch-microbit-extension&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;---2018年8月2号更新---&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我昨晚回去路上一致在想如何在没买到嗅探工具之前，进行破解，网购到货得几天，路上想到几个策略，洗澡的时候又想到几个策略，兴奋不易，可惜晚上没带电脑和树莓派回去，没法做实验&lt;/p&gt;
&lt;p&gt;我想到的策略有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察micro:bit ble 的extension是如何将Uint8Array数据write到txChar，这个extension不包含Scratch Link，源码都在js中，所以即便加密，策略也可以被看出，而micro:bit固件不太可能重写，如果弄清楚micro:bit ble 的extension的机制，估计就能hack官方的机制&lt;/li&gt;
&lt;li&gt;使用树莓派伪装成micro:bit，从js可以可以看出，只要能自定义service uuid就可以骗过官方插件，于是引诱它将数据写入树莓派中，如果有加密，有了加密前后的数据，就可以猜测加密的规则。但这样做的一个风险是Scratch Link可能会检验sensor数据的合法性（我在scratch3-adapter中就考虑了这个机制），如果不合法，可能会断开连接。当然这些需要做实验才知道&lt;/li&gt;
&lt;li&gt;等待官方完成wedo2的插件，由于它们共用Scratch Link，如果有加密，加密的机制很可能被抽象得一样，而wedo2已经被破解了，所以可以逆向分析出micro:bit部分的加密方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今早一来试了下第一条猜想就成功了，事实证明我想多了，官方并没有做加密&lt;/p&gt;
&lt;p&gt;我们来看看在micro:bit ble extension中，官方是如何发送display text数据的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;displayText&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BLECommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CMD_DISPLAY_TEXT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;txChar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;connected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gui.menuBar.bluetoothIndicator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greenIndicatorIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;disconnected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gui.menuBar.bluetoothIndicator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orangeIndicatorIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出官方啥也没做: &lt;code&gt;txChar.writeValue(event.data.buffer);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们从简单的字符串分析入手，先试试&lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;websocket显示从前端发往Scratch Link的是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;serviceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;61445&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characteristicId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5261da02-fa7e-42ab-850b-7c80220097cc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gWE=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在前端被编码后结果分别为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gWE= //base64
Uint8Array(2) [129, 97]  //Uint8Array
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们只需要把buffer转为hex就行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;buf2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// buffer is an ArrayBuffer&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// EXAMPLE:&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;129&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// display a -&amp;gt; [129, 97]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buf2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// = 8161&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在树莓派的gatttool中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[DF:48:87:86:93:20][LE]&amp;gt; char-write-cmd 0x0018 8161
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbit_scratch_2de5e6c9.png" width=500 /&gt;&lt;/p&gt;
&lt;p&gt;大功告成！&lt;/p&gt;
&lt;!--
read和write都是sendRemoteRequest 到 scratch link，关注语义，所以在scratch link中只需要关注read write！使用jsonrpc确实更合适，比消息简单--&gt;

&lt;h1&gt;tips&lt;/h1&gt;
&lt;p&gt;记录一些scratch团队的机智做法&lt;/p&gt;
&lt;h3&gt;连接设备&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/extensions/scratch3_microbit/index.js#L116"&gt;startDeviceScan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户选中extesion之后开始连接，只扫描出extension对应的设备，而不是把周围的BLE都扫描出来，体验十分友好&lt;/p&gt;
&lt;h3&gt;https校验问题&lt;/h3&gt;
&lt;p&gt;由于网站都逐渐过滤到https，而Scratch Link是个本地websocker server，要让Scratch Link与浏览器通信，需要使用wss协议。而本地websocker server采用wss加密协议的话，浏览器要让用户在一个新页面里点击高级设置才行，体验很不友好&lt;/p&gt;
&lt;p&gt;scratch团队的解决方案十分聪明让&lt;code&gt;device-manager.scratch.mit.edu&lt;/code&gt;这个域名&lt;code&gt;127.0.0.1&lt;/code&gt;，而websocker server就可以使用这个域名的证书&lt;/p&gt;
&lt;h4&gt;Scratch Link的内部服务怎么写&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/LLK/scratch-vm/blob/develop/src/io/bleSession.js#L3"&gt;ScratchLinkWebSocket&lt;/a&gt;对应的server为&lt;code&gt;'wss://device-manager.scratch.mit.edu:20110/scratch/ble'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;BLESession的定位是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A BLE device session object.  It handles connecting, over web sockets, to BLE devices, and reading and writing data to them.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看去是透明代理&lt;/p&gt;
&lt;p&gt;所以根据js的接口，要独立实现Scratch Link应该不难&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/microbit"&gt;scratch.mit.edu/microbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/conference"&gt;conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html"&gt;Bluetooth Developer Studio Level 3 Profile Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/ble-notes.html"&gt;BLE学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cn0xroot.com/2016/06/12/ble-hacking%EF%BC%9Able-scan-and-sniffer-withubertooth-one/"&gt;BLE Hacking：使用Ubertooth one扫描嗅探低功耗蓝牙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://draapho.github.io/2016/11/15/1616-python-ble/"&gt;使用python实现BLE通讯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/peplin/pygatt"&gt;pygatt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-08-01:scratch3-microbit-analysis.html</guid><category>scratch</category></item><item><title>两种硬件编程风格的比较</title><link>/Hardware-Programming-style.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/message_a34afc78.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人的心智活动透过简单的概念而发挥它的力量，方法主要可分为三种：第一，把数个简单的概念组合成一个复合的概念，于是所有复杂的概念成焉。第二，将两个概念，不论简单或复杂，不将它们结合，而是同时并列在一起观察，如此就能得知何为相互关联。第三，把某些概念，与伴随它们其他真实存在的概念区隔出来，称为这抽象艺术化，所有一般化，概化的概念皆是由此而生  - 约翰·洛克《人类理解论》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href="https://blog.just4fun.site/scratch3-microbit.html"&gt;scratch3.0 + micro:bit&lt;/a&gt;中，我们提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在少儿编程/硬件编程教育领域，硬件编程有两种风格，我将这两种风格分别称为&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我相信就编程教育而言，&lt;code&gt;交互式&lt;/code&gt;优于&lt;code&gt;灌入式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这篇文章我们将讨论这两种编程风格给学习者的编程体验 以及心理状态所带来的影响。所谈论的很多内容，在编程语言的发展历史中都被反复讨论过。&lt;/p&gt;
&lt;p&gt;本文中，我们只讨论图形化硬件编程，但得出的结论并不局限于此&lt;/p&gt;
&lt;h3&gt;灌入式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;灌入式&lt;/code&gt;阵营有名的图形化项目包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/makecode"&gt;makecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;PythonEditor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mixly.org/"&gt;mixly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以及国内大多数项目(makeblock、mcookie...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，几乎所有传统的硬件编程都是灌入式的&lt;/p&gt;
&lt;h5&gt;编程方式&lt;/h5&gt;
&lt;p&gt;我们以&lt;a href="https://pxt.microbit.org/"&gt;makecode microbit&lt;/a&gt;为例，来展示灌入式编程的编程方式.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbit_gr_de9399e6.png" width=500 /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://pxt.microbit.org/"&gt;makecode microbit&lt;/a&gt;中，通过拖拽积木，拼搭出我们的程序，接着将程序下载到本地（程序在线上完成编译），最后将下载的文件拖入micro:bit，即可运行。&lt;/p&gt;
&lt;p&gt;将代码/固件灌入硬件中，代码(代码编译出的固件)将在硬件运行。我将这种编程风格称为&lt;code&gt;灌入式&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你熟悉blockly,你会发现这是一种典型的blockly风格(当然，blockly也可以写出交互式风格的blockly app)&lt;/p&gt;
&lt;h3&gt;交互式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;阵营的图形化编程项目有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;Cozmo code lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/PicoBoard"&gt;scratch Picoboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s4a.cat/"&gt;S4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit/"&gt;scratch microbit extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;编程方式&lt;/h5&gt;
&lt;p&gt;我们以&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;为例，来展示&lt;code&gt;交互式&lt;/code&gt;编程的编程方式.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/cozmof70f49bd.png" /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;中，你同样身处积木化的编程界面里，通过拖拽积木，拼搭出所需的程序，点击运行，cozmo即可按照程序的逻辑运行。&lt;/p&gt;
&lt;p&gt;程序运行在ipad/手机上，每个积木在实际执行的时候，将消息发给cozmo，从而控制cozmo，这是我将这种风格程序成为&lt;code&gt;交互式&lt;/code&gt;的原因&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;中一个非常惊艳的编程体验是:如果你不知道一个积木有什么作用，你不必去翻说明书，你只需要点击一下这个积木，cozmo立马执行这个积木的逻辑，你可以直观地理解陌生的积木。交互式编程所具有的及时反馈特性，鼓励学习者去探索。这是交互式编程给学习者心理上带来的影响之一。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%BB%BA%E6%A7%8B%E4%B8%BB%E7%BE%A9_(%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96)"&gt;建构主义&lt;/a&gt;者(如皮亚杰、艾伦凯、派普特)应该会喜欢这种风格&lt;/p&gt;
&lt;p&gt;如果你熟悉scratch，你会发现这是一种典型的&lt;code&gt;scratch&lt;/code&gt;风格（对象响应消息，很&lt;a href="https://zh.wikipedia.org/zh-hans/Smalltalk"&gt;Smalltalk&lt;/a&gt;）。关于scratch风格和blockly风格的比较可以参考我之前的文章:&lt;a href="https://blog.just4fun.site/scratch3-blockly.html"&gt;Blockly与Scratch3.0的比较分析及选型建议&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;对比分析&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;真理越辩越明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--
我很喜欢柏拉图《对话录》里苏格拉底对战普罗塔戈拉那一卷

工程师小普和小苏分别拥护`灌入式`和`交互式`，他们决定cosplay苏格拉底对战普罗塔戈拉来一场辩论

小苏:  好久不见啊小普，近来忙些什么

小普:  
--&gt;

&lt;p&gt;在此我们来对比分析一下&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;各自的优势&lt;/p&gt;
&lt;p&gt;灌入式阵营可能列出的优势有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灌入式可以离线运行，只需要将代码烧入进去，即可脱离编程工具&lt;/li&gt;
&lt;li&gt;灌入式将带来优于交互式的实时性&lt;/li&gt;
&lt;li&gt;灌入式因为需要generate代码，学生可以查看代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果有遗漏，欢迎拥护&lt;code&gt;灌入式&lt;/code&gt;编程的小伙伴来信(wuwenjie718@gmail.com)补充&lt;/p&gt;
&lt;p&gt;由于我拥护&lt;code&gt;交互式&lt;/code&gt;编程，所以我准备在下文里，反驳&lt;code&gt;灌入式&lt;/code&gt;的优势，并指出&lt;code&gt;交互式&lt;/code&gt;所具有的优势。如果你不赞同，欢迎来信反驳，观点合理的话，我会及时更新到本文，如有必要，我们也可以使用&lt;a href="https://www.kialo.com/"&gt;理性辩论的平台 Kialo&lt;/a&gt;来进行辩论&lt;/p&gt;
&lt;h3&gt;反驳灌入式的优势&lt;/h3&gt;
&lt;p&gt;我们针对上边&lt;code&gt;灌入式&lt;/code&gt;阵营提出的三条优势，逐条反驳&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灌入式可以离线运行，只需要将代码烧入进去，即可脱离编程工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个论述本身并没有需要反驳的地方，它只是陈述了一个事实，在此我想提出的是，对于教育而言，&lt;code&gt;离线运行&lt;/code&gt;不是很重要的特性，如果是工业级的项目或者解决具体问题的硬件产品，离线运行可能是重要的，但对于教育项目而言，我认为这个特性并不重要，如果你实在不愿意一直开着电脑，你可以把上位机运行在树莓派里，若嫌贵，可以使用荔枝派(只要9块9哦)。但需要提醒的是，为了得到&lt;code&gt;离线运行&lt;/code&gt;的特性，我们很可能会失去交互性(这个问题不是很好谈论，如果需要,我们之后专门来说说这两个特性在什么情况可能冲突，而不可兼得)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灌入式将带来优于交互式的实时性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和上一条观点一样，我认为&lt;code&gt;实时性&lt;/code&gt;在编程教育中并不重要。我将&lt;code&gt;离线运行&lt;/code&gt;和&lt;code&gt;实时性&lt;/code&gt;视为一种对机器性能的优化，前者节约资源、后者节约时间，但这种节约下来的时间，短得也许人类不能感知。我承认在一些竞技类的比赛中，&lt;code&gt;实时性&lt;/code&gt;是至关重要的，但在教育中，尤其是低龄化编程教育中，被教育者是这件事的核心，我认为这些特性并不重要，尤其是考虑到这些特性可能和交互性冲突&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灌入式因为需要generate代码，学生可以查看代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给用户呈现积木所对应的代码，是个帮助用户从图形化过度到文本编程的好办法. 但generate代码这件事并不限于&lt;code&gt;灌入式&lt;/code&gt;,&lt;code&gt;交互式&lt;/code&gt;的编程界面里，虽然你并不需要generate代码，但如果愿意，完全可以为每个积木生成对应的代码，而且可以是&lt;code&gt;任何语言，任何抽象粒度&lt;/code&gt;。&lt;code&gt;灌入式&lt;/code&gt;阵营的小伙伴可能会反驳说，你们generate的代码并不是真正用于运行的。我会回答说: 对，我恰恰认为，不该把真正执行的代码generate出来给用户看。积木之所以是个好工具，正是因为它能自如地隐藏复杂度，暴露出合适粒度的概念颗粒，积木并不只是帮助我们省去记忆语法规则，更重要的是，它允许我们根据学生所处的阶段，给予他不同抽象程度的积木。我很喜欢来自lisp社区的忠告:&lt;code&gt;表达你的意图，而不是操作过程，这样有助于我们能站在更高的抽象层面上&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于这一点，&lt;a href="code.org"&gt;code.org&lt;/a&gt;给了我们很好的示范，一个学习者，在&lt;a href="code.org"&gt;code.org&lt;/a&gt;里在拖拽了两个积木之后，他看到页面里愤怒的小鸟往东飞一步，接着又往北飞一步，最后成功击中了小猪。&lt;/p&gt;
&lt;p&gt;如果学习者愿意，他可以看看与积木等价的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/codeorg_9b3de524.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;我们看到，这些代码隐藏了很多实现的细节，你也许要抱怨说code.org在欺骗学习者，这并不是真正运行的代码，&lt;code&gt;真正的代码&lt;/code&gt;是由js在操控svg的元素，但你确定你要给出这个粒度的东西吗？&lt;code&gt;真正的代码&lt;/code&gt;也许是一串&lt;code&gt;001101101...&lt;/code&gt;. 我认为平台给出合适抽象粒度的积木在编程教育里是至关重要的&lt;/p&gt;
&lt;p&gt;就这点而言，目前很多灌入式的图形化编程并不适合编程教育，尤其不适合少儿编程，他们直接把驱动硬件代码包装到积木下就了事了，积木颗粒在抽象程度上与硬件文本编程无异。如何设计出合适抽象粒度的积木块，不是个简单的问题，我认为这块的从业者都该多看看cozmo和makecode&lt;/p&gt;
&lt;h3&gt;交互式的优势&lt;/h3&gt;
&lt;p&gt;反驳完灌入式的优势，接着我们来谈谈&lt;code&gt;交互式&lt;/code&gt;的优势何在，我先简单列出，之后逐条陈述&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;及时的反馈&lt;/li&gt;
&lt;li&gt;允许单步调试&lt;/li&gt;
&lt;li&gt;软件编程和硬件编程，不必区分，虚拟人物与现实硬件能彼此联动&lt;/li&gt;
&lt;li&gt;强大的可扩展性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;罗列完&lt;code&gt;交互式&lt;/code&gt;的优势后，我们来逐条陈述它们.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;及时的反馈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为这一条，对编程教育是至关重要的。&lt;/p&gt;
&lt;p&gt;我们从&lt;code&gt;REPL&lt;/code&gt;（Read-Eval-Print-Loop）说起，&lt;a href="https://zh.wikipedia.org/wiki/LISP"&gt;LISP&lt;/a&gt;最早为我们带来&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF"&gt;REPL&lt;/a&gt;。REPL是个交互式的编程环境，用户输入的表达式及时被求值运行，并输出，这对于学习一门新的编程语言有很大的帮助，因为它能立刻对初学者做出回应，所以这个概念被移植到很多编程语言环境里（Python, Scala , Java(since jdk-9)...）。这种交互式的编程环境使得探索性的编程和调试更加便捷，因为“读取-求值-输出”循环通常会比经典的“编辑-编译-运行-调试”模式要更快，这两者的差异很像&lt;code&gt;交互式&lt;/code&gt;和&lt;code&gt;灌入式&lt;/code&gt;的差异。我自己使用REPL的一个强烈感受是，在REPL环境中（如ipython），我更乐于探索，对于不懂的api，我会直接做个实验，看看效果，获得直观感受。REPL鼓励每个人在探索中成为自己知识的构建者。而这点正式是早期致力于推广少儿编程的先驱们(艾伦凯、派普特)所追求的&lt;/p&gt;
&lt;p&gt;我将硬件编程里的&lt;code&gt;交互式&lt;/code&gt;编程方式，视为一种硬件编程的&lt;code&gt;REPL&lt;/code&gt;。如同我在前头举例说的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;cozmo code lab&lt;/a&gt;中一个非常惊艳的编程体验是:如果你不知道一个积木有什么作用，你不必去翻说明书，你只需要点击一下这个积木，cozmo立马执行这个积木的逻辑，你可以直观地理解陌生的积木。交互式编程所具有的及时反馈特性，鼓励学习者去探索系统。这是交互式编程给学习者心理上带来的影响之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对教学和平台而言，及时的反馈也能带来诸多好处，有了来自硬件的反馈信息，我们可以在平台中给出更多的提示信息，来指导学生修正错误，或者引导他抵达目标，目前国外社区已经有这块的试水者，我正在关注，之后有机会专门写一篇文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;允许单步调试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果学习者写了一段较为复杂的代码，运行时没有达到预期效果，人们往往无法通过阅读代码找出问题（错误往往揭示了知识或思维盲区），它需要逐行运行代码，看看效果，然后判断究竟是哪一步出了问题，这就是单步调试之所以如此重要的原因，即便对于专业程序员，也是如此。在&lt;code&gt;灌入式&lt;/code&gt;中我们无法做到单步调试，因为代码是一股脑灌入硬件的。但&lt;code&gt;交互式&lt;/code&gt;允许我们这样做，因为每次都是消息通信，所以编程界面可以逐步地给硬件发送控制指令。如果你观察过学生在code.org中通过单步调试找到问题，并顺利前行，你就知道这个特性有多棒&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件编程和硬件编程，不必区分，虚拟角色与现实硬件能彼此联动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在图形化编程这块，学习者很可能是先学了软件编程，通过闯关式的学习，利用积木控制虚拟角色来达到目标，在这个过程中掌握编程概念。&lt;code&gt;交互式&lt;/code&gt;硬件编程允许你把硬件也接入到这些web平台里。如此一来，无论是教学软件还是硬件，平台架构上将毫无差别，学生的编程体验也几乎没有差别。它们学习软件编程所积累的知识完全可以用于硬件部分。&lt;/p&gt;
&lt;p&gt;而在创作类平台中(比如scratch)，&lt;code&gt;交互式&lt;/code&gt;编程允许虚拟角色与物理硬件彼此沟通，你可以自由联通虚拟与现实世界，制作体感游戏和富有表现力的故事。这将为我们带来更高的&lt;code&gt;高天花板&lt;/code&gt;和更多的趣味性，从而点燃大家的热情&lt;/p&gt;
&lt;p&gt;关于这块的有趣例子可以参考:&lt;a href="https://scratch3-adapter-docs.just4fun.site/user_guide/gallery/"&gt;scratch3-adapter-docs gallery&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;强大的可扩展性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;还将为我们带来强大的可扩展性，&lt;a href="https://zh.wikipedia.org/zh-hans/ROS"&gt;ROS(Robot Operating System)&lt;/a&gt;和&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;是很好的两个例子。因为基于消息通信，各个部分彼此解耦，这些系统本质上是分布式的，你可以接入任何东西，在&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;中，硬件方面,我们已经接入了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/"&gt;micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.anki.com/en-us/cozmo"&gt;Cozmo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.sphero.com/products/bb-8-by-sphero"&gt;BB8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raspberrypi.org/"&gt;树莓派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-smart-home.html"&gt;智能家居&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI方面，我们接入了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/zh-cn/services/cognitive-services/"&gt;微软认知服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://js.tensorflow.org/"&gt;本地化的机器视觉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opencv.org/"&gt;opencv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pjreddie.com/darknet/yolo/"&gt;实时物体检测&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些简单的本地自然语言处理(移植了mit media lab的实验项目)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你愿意，你可以将小时候的玩具四驱车接入进来。&lt;/p&gt;
&lt;h1&gt;如何实现&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;everything is message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;天色已晚，明天要早起，这部分就不多写了，之后单独讨论&lt;/p&gt;
&lt;p&gt;如果你熟悉LISP,为了实现一个 LISP REPL，只需要实现read、eval、print三个函数和一个不停轮询的函数(loop)即可,一个基本的REPL就可以用如下的简单形式表达：(loop (print (eval (read))))&lt;/p&gt;
&lt;p&gt;一旦你理解了这个概念，就可以自己动手去硬件上实现了。&lt;/p&gt;
&lt;p&gt;事实上，社区里的交互式项目(如S4A、snap4arduino、s4m)思路基本都是一样的&lt;/p&gt;
&lt;p&gt;我们自己动手实现了&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我把写作&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;的过程都记录在博客里，如果你有兴趣，也可以根据最初的架构，自己实现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-plugin-1.html"&gt;为Scratch3.0设计的插件系统(上篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-plugin-2.html"&gt;为Scratch3.0设计的插件系统(下篇)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/Scratch3-Lab.html"&gt;Scratch3 Lab: 将Scratch3接入开源硬件及AI的实验项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3-adapter-docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我私下认为&lt;a href="https://scratch3-adapter-docs.just4fun.site/"&gt;scratch3_adapter&lt;/a&gt;基于zeromq的实现也许是目前扩展性最好的，欢迎入坑 ：）&lt;/p&gt;
&lt;!--
### 可扩展性
ROS和adapter是个很好的例子，可以做出任意复杂的东西，

这背后的想法是，硬件只是更大系统的一部分  观察传感器的状态

你可以把利用云端的AI，利用本地的摄像头 来自不同的硬件 当温度30度时  人物说很热


这是一种，ROS的策略，adapter在架构上，很多地方模仿了ROS，关于这点，参考:[]()

在体验式，引导你尝试，而这是少儿编程的开创者们所鼓励的 在实践中去把我概念

当温度25度时 打开空调

# 为何交互式是更好的模式
学习硬件本身 还是利用硬件做出其他应用

我为何要知道串口式什么

就像我们教学python的时候，不会教学它的C实现  操作系统原理

adapter致力于将万物积木化，在adapter你可以让google的AI与小米的智能家居互动，这是scratch的思路

mixly则是一个blockly app，致力于映射，你可以将硬件抽象为积木

# microbit
用键盘控制micro:bit

使用消息  可以控制粒度

使用烧录，必须控制串口

总是能写出server代码的，但设计上 这块应该被抽象

--&gt;

&lt;h1&gt;补遗&lt;/h1&gt;
&lt;h3&gt;通讯补丁&lt;/h3&gt;
&lt;p&gt;灌入式编程可以在一定程度上，也可以实现&lt;code&gt;交互&lt;/code&gt;特性，一种策略是采用&lt;code&gt;通讯变量&lt;/code&gt;的概念, makeblock的mblock很好地利用了这点&lt;/p&gt;
&lt;p&gt;利用通讯变量，你可以让上下位机实现彼此沟通&lt;/p&gt;
&lt;p&gt;技术实现的话，也不会太难，在硬件里跑一个独立的通信进程就行，之后通过uart或其他通道与上位机沟通就行&lt;/p&gt;
&lt;p&gt;你最好将这种方式视为一种补丁，&lt;code&gt;通讯变量&lt;/code&gt;是一种补充策略，通过这种补丁，你无法做到&lt;code&gt;交互式&lt;/code&gt;的所有特性，但这依然不失为一种很聪明的做法&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Protocol"&gt;Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hintjens.com/blog:_unprotocols"&gt;unprotocols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/PicoBoard"&gt;PicoBoard&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sparkfun/PicoBoard"&gt;sparkfun/PicoBoard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raspberrypi.org/blog/scratch-2-raspberry-pi/"&gt;scratch-2-raspberry-pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s4a.cat/"&gt;S4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/24770930"&gt;Mixly，初学Arduino的最佳图形化编程工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/firmata/protocol"&gt;Firmata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://snap4arduino.rocks/"&gt;snap4arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nick.zoic.org/art/micropython-webusb/"&gt;MicroPython with WebUSB!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/software-development-at-1-hz-5530bb58fc0e"&gt;Software development at 1 Hz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web"&gt;Access USB Devices on the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wicg.github.io/webusb/"&gt;WebUSB API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF"&gt;读取﹣求值﹣输出循环(REPL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/LISP"&gt;LISP&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%BB%BA%E6%A7%8B%E4%B8%BB%E7%BE%A9_(%E5%AD%B8%E7%BF%92%E7%90%86%E8%AB%96)"&gt;建构主义 (学习理论)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.feld.com/archives/2018/07/the-repl-for-hardware.html"&gt;The REPL For Hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-10:Hardware-Programming-style.html</guid><category>scratch</category></item><item><title>使用micro:bit自制PPT翻页笔</title><link>/microbit-ppt.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ppt_f5a212e3.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Word的成功是形式对内容的胜利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近期偶尔到高校做些技术分享。我不喜欢写PPT，Word/PowerPoint是我最厌恶的几个软件，对Keynote也没有好感，没什么耐心在这些软件里点来点去&lt;/p&gt;
&lt;p&gt;但我并不排斥为讨论和演讲做些书面上的准备。如果可以专注在内容，以Markdown来写作，而不必分心到排版和样式这些事情上，写完演讲所需要的内容之后，PPT能自动从markdown文本中生成，那该多怯意&lt;/p&gt;
&lt;h1&gt;要有光&lt;/h1&gt;
&lt;p&gt;幸运的是，&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;允许我们这样做。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;是个令人振奋的项目，如果要挑选出我最喜欢的几个工具，&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;应该会排在前三&lt;/p&gt;
&lt;p&gt;如果你来自 生物科学/物理学/人工智能/数据分析/量化 社区，&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;可能已经在你的工具箱里了，如果你平时喜欢探索性的编码工作，那么你值得花一些时间上手&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;用jupyter写PPT&lt;/h3&gt;
&lt;p&gt;首先安装jupyterlab: &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;，jupyterLab是jupyter的下一代用户界面。安装完成之后，即可运行:&lt;code&gt;jupyter lab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitslide_3f5f1127.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;接着创建一个notebook，你就可以开始用Markdown写作PPT了&lt;/p&gt;
&lt;p&gt;你可以把每个cell视为一页PPT，使用markdown在其中写作或代码，就像写博客，写完之后，点击右边栏的&lt;code&gt;Cell Tools&lt;/code&gt;, 来设置cell&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitslides_47c7c5c3.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;每个cell可以设置为以下多种类型：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitslide_2dcbd1f4.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;写作完毕，选择导出为Slides:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitslide_18fe0a6e.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;导出文件为html，依赖于&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt;（没有使用CDN），所以你需要在导出文件的同级别目录放置&lt;a href="https://github.com/hakimel/reveal.js/"&gt;reveal.js&lt;/a&gt;（下载后解压即可）。&lt;/p&gt;
&lt;p&gt;之后打开下载的html文件，你就可以在浏览器里看到使用jupyter写的PPT了，你可以把它们称为web PPT，演示的时候将浏览器全屏即可。&lt;/p&gt;
&lt;h1&gt;翻页笔&lt;/h1&gt;
&lt;p&gt;PPT翻页笔大约长这样:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/ppt_c7c6b349.png" width=400 /&gt;&lt;/p&gt;
&lt;p&gt;你在台上演讲时，手握翻页笔，可以无线切换PPT，从而使PPT内容与你的演讲进度同步。&lt;/p&gt;
&lt;h3&gt;micro:bit PPT翻页笔&lt;/h3&gt;
&lt;p&gt;&lt;img src="http://tech.microbit.org/docs/hardware/assets/microbit-overview.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;因为micro:bit中有蓝牙模块，所以我们可以利用micro:bit的蓝牙功能，来实现无线通讯；它还自带两个按钮，很适合用于制作翻页笔（前后翻页）&lt;/p&gt;
&lt;p&gt;制作过程十分简单:&lt;/p&gt;
&lt;p&gt;首先下载&lt;a href="https://raw.githubusercontent.com/wwj718/slide_microbit/master/FD18_NRF51_MICROBIT.hex"&gt;microbit固件&lt;/a&gt;到本地，然后拖拽到micro:bit中&lt;/p&gt;
&lt;p&gt;完成之后，micro:bit将对外提供&lt;a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy"&gt;ble&lt;/a&gt;按钮服务，之后我们利用&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;可以将浏览器，连上micro:bit，从而让micro:bit与js交互，而&lt;a href="https://revealjs.com/"&gt;reveal.js&lt;/a&gt;有js api， 这就是micro:bit PPT翻页笔的原理.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:注意: &lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;目前只支持macOS、chrome OS、安卓三个平台下的 Chrome浏览器,暂不支持Windows系统 &lt;/p&gt;
&lt;p&gt;这块所需的js代码，我已经写好的。在你写作PPT时，只需在jupyter lab的第一个cell里贴上如下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 连接micro:bit
*  打开电脑的蓝牙
*  点击右边的连接按钮

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ble_button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color:blue&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;连接&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;microbit_ble.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后把&lt;a href="https://raw.githubusercontent.com/wwj718/slide_microbit/master/microbit_ble.js"&gt;microbit_ble.js&lt;/a&gt;下载到jupyter lab导出的slide同级目录即可&lt;/p&gt;
&lt;p&gt;听起来很绕的话，直接看&lt;a href="https://github.com/wwj718/slide_microbit"&gt;源代码&lt;/a&gt;可能更清楚&lt;/p&gt;
&lt;h3&gt;开始使用&lt;/h3&gt;
&lt;p&gt;打开导出的slide，点击连接，选择micro:bit&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitslide_0c59526e.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;至此，你就可以手握micro:bit开始你的演讲啦，使用电池供电，你就可以带着micro:bit在台上四处走啦&lt;/p&gt;
&lt;video width=300 src="http://p6ur0vhyj.bkt.clouddn.com/microbitslide.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;想象空间&lt;/h3&gt;
&lt;p&gt;如果你和我一样，是scratch和micro:bit的粉丝。你可以将microbit当作PPT翻页笔，而用scratch演示PPT。&lt;/p&gt;
&lt;p&gt;具体策略有很多，最有趣的一种是直接用scratch创作动态内容，而将micro:bit作为一种体感设备，如此一来，你可以与你的PPT进行富有表现里的互动。如果你愿意，你可以选择跳一跳切屏或摇一摇抽奖&lt;/p&gt;
&lt;p&gt;另一种策略，要简单一些，表现力也更弱，和传统PPT无异:将你的PPT转为&lt;code&gt;480x360&lt;/code&gt;的图片，之后将图片作为背景导入scratch即可。然后使用我在&lt;a href="https://blog.just4fun.site/scratch3-microbit.html"&gt;scratch3.0 + micro:bit&lt;/a&gt;所介绍的方法，将micro:bit与scratch3.0连起来&lt;/p&gt;
&lt;!--
形式与内容的分离

Word是内容与形式同时处理

Word是所见即所得


# 使用

日本的文章
官方接口

--&gt;

&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sspai.com/post/37340"&gt;反思Markdown：Markdown的长与短&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/slide_microbit"&gt;slide_microbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/document-factory-pandoc.html"&gt;文档格式转化神器pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jupyter.org/"&gt;jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://revealjs.com/"&gt;reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/microbit-notes.html"&gt;micro:bit使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-10:microbit-ppt.html</guid><category>microbit</category></item><item><title>scratch3.0 + micro:bit</title><link>/scratch3-microbit.html</link><description>&lt;p&gt;scratch官方称，在scratch3.0发布的时候会携带&lt;a href="https://medium.com/scratchteam-blog/3-things-to-know-about-scratch-3-0-18ee2f564278"&gt;micro:bit插件&lt;/a&gt;，这意味这你可以轻松将scratch延伸到物理世界。&lt;/p&gt;
&lt;h1&gt;两种硬件编程风格&lt;/h1&gt;
&lt;p&gt;在少儿编程/硬件编程教育领域，硬件编程有两种风格，我将这两种风格分别称为&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;scratch3.0为我们带来的micro:bit硬件编程，采用&lt;code&gt;交互式&lt;/code&gt;风格。&lt;/p&gt;
&lt;p&gt;我相信就少儿编程教育而言，&lt;code&gt;交互式&lt;/code&gt;远远优于&lt;code&gt;灌入式&lt;/code&gt;，我最近正在写一篇文章谈论这个话题(《两种硬件编程风格的比较》)&lt;/p&gt;
&lt;p&gt;我准备讨论这两种编程风格给学习者的编程体验 以及心理状态状态所带来的影响。所谈论的很多内容，在编程语言的发展历史中都被反复讨论过。&lt;/p&gt;
&lt;p&gt;下边我们来简单看看两个阵营都有哪些代表性项目。&lt;/p&gt;
&lt;p&gt;在硬件图形化编程项目中，&lt;code&gt;灌入式&lt;/code&gt;阵营有名的项目包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/makecode"&gt;makecode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;PythonEditor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mixly.org/"&gt;mixly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以及国内大多数的其他项目(makeblock、mcookie...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，所有传统的硬件编程都是灌入式的，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;阵营的项目有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;Cozmo code lab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.scratch-wiki.info/wiki/PicoBoard"&gt;scratch Picoboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s4a.cat/"&gt;S4A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;交互式&lt;/code&gt;阵营近期还将迎来下边两个项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit/"&gt;scratch microbit extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.media.mit.edu/projects/scratch-pad/overview/"&gt;ScratchBit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你尝试过&lt;a href="https://www.anki.com/en-us/cozmo/code-lab"&gt;Cozmo code lab&lt;/a&gt;的编程体验，你就知道&lt;code&gt;交互式&lt;/code&gt;可以做到何等优秀。Cozmo几乎在任何方面都一骑绝尘。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;灌入式&lt;/code&gt;和&lt;code&gt;交互式&lt;/code&gt;带来截然不同的编程体验，对此有兴趣的同学，可以等我&lt;a href=""&gt;近期的文章&lt;/a&gt;，我对这个话题十分感兴趣，也欢迎你来信讨论&lt;/p&gt;
&lt;h1&gt;scratch3.0 + micro:bit尝鲜&lt;/h1&gt;
&lt;p&gt;尽管scratch3的micro:bit插件还没有正式发布，但目前我们以及可以尝鲜了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 目前只支持macOS、chrome OS、安卓三个平台下的 Chrome浏览器,暂不支持Windows系统 （因为用到&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web bluetooth&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;下载并烧入固件&lt;/h3&gt;
&lt;p&gt;下载&lt;a href="http://p6ur0vhyj.bkt.clouddn.com/scratch-microbit-firmware-combined.hex"&gt;scratch-microbit-firmware-combined.hex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将scratch-microbit-firmware-combined.hex拖到microbit里&lt;/p&gt;
&lt;h3&gt;连接&lt;/h3&gt;
&lt;p&gt;打开系统蓝牙&lt;/p&gt;
&lt;p&gt;打开&lt;a href="https://llk.github.io/scratch-gui/microbit"&gt;llk microbit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击连接蓝牙:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitble_42d40f81.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;连接完成之后，我们就可以开始在scratch3.0中为microbit编程了&lt;/p&gt;
&lt;p&gt;由于是&lt;code&gt;交互式&lt;/code&gt;风格，我们可以轻松做出互动式的体感游戏之类富有想象里的东西。&lt;/p&gt;
&lt;h3&gt;开始编程&lt;/h3&gt;
&lt;p&gt;首先在extensions中选择micro:bit扩展:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://oav6fgfj1.bkt.clouddn.com/microbitble_209445f2.png" width=600 /&gt;&lt;/p&gt;
&lt;p&gt;下边让我们写个简单的程序，用micro:bit来控制scratch3.0中的人物左右移动:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/microbitble_e7747878.png" /&gt;&lt;/p&gt;
&lt;p&gt;让我们来看看实际效果:&lt;/p&gt;
&lt;video src="http://p6ur0vhyj.bkt.clouddn.com/microbitble.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h3&gt;技术视角&lt;/h3&gt;
&lt;p&gt;scratch3.0的micro:bit采用&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web-bluetooth&lt;/a&gt;。这是一种激进的策略，&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;web-bluetooth&lt;/a&gt;目前的跨平台兼容并不好，各个平台的进展可以参考&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;这儿&lt;/a&gt;，目前只在macOS、chrome OS以及安卓上可以正常使用，最终scratch3.0稳定版中micro:bit extension是否会采用web-bluetooth的连接策略还不得而知（但他们显然偏好这种方式，他们自己准备推出的硬件：&lt;a href="https://www.media.mit.edu/projects/scratch-pad/overview/"&gt;ScratchBit&lt;/a&gt;也采用这种策略）。官方可能采用的另一个策略是&lt;a href="https://llk.github.io/microbit-extension/"&gt;microbit-extension&lt;/a&gt;,这种方式的跨平台兼容性好，原理上和&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;相同&lt;/p&gt;
&lt;p&gt;和scratch官方一样，我也相信web-bluetooth是硬件编程教育的未来，采用这种方式，只需要你有一个chrome浏览器，就可以直接操控硬件！&lt;/p&gt;
&lt;p&gt;我的&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;采用了比较折中的策略，没有强行要求使用web-bluetooth，而是把连接的策略推迟给开发者，让他们自行选择。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/asondemita/items/b8e7f3ad63ccb0baec3a"&gt;Scratch3.0+micro:bit の接続手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llk.github.io/scratch-gui/microbit"&gt;llk microbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://khanning.github.io/scratch-gui/microbit-pro/"&gt;khanning microbit-pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://khanning.github.io/scratch-gui/scratchbit/"&gt;khanning scratchbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.media.mit.edu/projects/scratch-pad/overview/"&gt;ScratchBit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.microbit.org/support/solutions/articles/19000026080-can-i-use-the-micro-bit-with-scratch-"&gt;Can I use the micro:bit with Scratch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WebBluetoothCG/web-bluetooth/blob/gh-pages/implementation-status.md#chrome"&gt;WebBluetoothCG/web-bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/scratch/"&gt;Scratch cards for micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/scratchteam-blog/3-things-to-know-about-scratch-3-0-18ee2f564278"&gt;3 Things To Know About Scratch 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/"&gt;scratch3-adapter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-07-01:scratch3-microbit.html</guid><category>scratch3</category></item><item><title>micro:bit与事件驱动</title><link>/microbit-event-driven.html</link><description>&lt;p&gt;在微软的&lt;a href="https://makecode.microbit.org/"&gt;makecode&lt;/a&gt;编辑器中，我们可以轻松为micro:bit写出这种事件驱动风格的代码:&lt;code&gt;当按钮A被按下的时候打印字符A，当按钮B被按下的时候打印字符B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="makecode" src="http://oav6fgfj1.bkt.clouddn.com/microbit_30bab0ff.png" /&gt;&lt;/p&gt;
&lt;p&gt;生成的代码(javascript)十分简单:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onButtonPressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onButtonPressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们使用Python来为micro:bit编程时，却很难写出这种事件驱动风格的代码，如果我们要做到上边类似的事，一般的教程里会让你用&lt;code&gt;while+if/else&lt;/code&gt;来做。尽管可以做到类似的事，但思维方式/语义其实并不相同。&lt;/p&gt;
&lt;h1&gt;Why&lt;/h1&gt;
&lt;p&gt;makecode将积木映射为JavaScript代码，JavaScript是一个事件驱动型语言，所以在makecode可以很轻松进行事件驱动风格的编程。而Python对事件驱动的关注主要集中在网络编程方面，在Python中做事件驱动风格的编程，并不是那么常见。&lt;/p&gt;
&lt;p&gt;要在图形化中，自动生成事件驱动风格的代码，自然就更不易了&lt;/p&gt;
&lt;p&gt;我们看到micro:bit官方的&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;bbcmicrobit/PythonEditor&lt;/a&gt;中积木化界面(blockly)就不支持:&lt;code&gt;当按钮A被按下的时候打印字符A，当按钮B被按下的时候打印字符B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="microbit site" src="http://oav6fgfj1.bkt.clouddn.com/microbit_4110fba9.png" /&gt;&lt;/p&gt;
&lt;h1&gt;how&lt;/h1&gt;
&lt;p&gt;由于目前micro:bit的&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;micropython固件&lt;/a&gt;并不支持多线程(pyboard倒是有个固件支持&lt;code&gt;_thread&lt;/code&gt;)，要实现事件驱动，可能只有协程供你选择了。&lt;/p&gt;
&lt;p&gt;micro:bit官方对此并没有很好的解决方案&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mblock.cc/zh-home/"&gt;mblock/makeblock&lt;/a&gt;的方案倒是十分漂亮，值得我们好好学习（ps:mblock在工程上十分出色，有许多聪明的做法值得学习）&lt;/p&gt;
&lt;p&gt;我们先在mblock中来为micro:bit编写事件驱动风格的程序&lt;/p&gt;
&lt;p&gt;&lt;img alt="mblock 积木" src="http://oav6fgfj1.bkt.clouddn.com/mblock_05c523d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;接着我们来看看积木generate出的Python代码:&lt;/p&gt;
&lt;p&gt;&lt;img alt="mblock 代码" src="http://oav6fgfj1.bkt.clouddn.com/mblock_fdfa7d4f.png" /&gt;&lt;/p&gt;
&lt;p&gt;代码十分规整，规整的好处是从积木到代码的转化将很简单。这种从积木generate出代码的方式，是典型的blockly app风格，尽管长着scratch3.0的样子，关于两者的差异可以参考我此前的文章:&lt;a href="https://blog.just4fun.site/scratch3-blockly.html"&gt;Blockly与Scratch3.0的比较分析及选型建议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察这个代码（注意&lt;code&gt;yeild&lt;/code&gt;），如果你熟悉python的协程，应该可以轻松猜到，mblock很聪明地使用协程来做事件驱动风格的编程&lt;/p&gt;
&lt;p&gt;至于为何不用async/await，是因为MicroPython是Python 3.4的一个实现，在python3.4中，你不能使用async/await关键字，直到Python在3.5版本才引入关于协程的语法糖async和await&lt;/p&gt;
&lt;p&gt;这段代码尽管十分工整，但它并不能运行，它需要一个调度器来调度它们。&lt;/p&gt;
&lt;p&gt;经过预处理之后，可运行代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;microbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;music&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_callback_button_a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_coroutine_button_a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_pressed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;on_callback_button_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_callback_button_b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_coroutine_button_b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_pressed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;on_callback_button_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coroutine_start_go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coroutine_v0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;coroutine_v1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;coroutine_v0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;coroutine_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;coroutine_v0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;coroutine_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;coroutine_init0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on_coroutine_button_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;coroutine_init1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on_coroutine_button_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;coroutine_start_go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coroutine_init0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;coroutine_init1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然，在进入micro:bit之前，它要连同内核一同被编译为hex文件。&lt;/p&gt;
&lt;p&gt;可以看出，mblock在generate出代码之后，还有一个预处理的过程（实际上webduino也干过类似的事，我之前的分析有分析过，他们的做法如出一辙）。&lt;/p&gt;
&lt;p&gt;尽管我们可以用一些hack的手段拿到这部分的源码，但我们不打算在此讨论细节（mblock这部分并未开源，出于尊重和规避法律风险的考虑，我们不准备公开他们这部分的代码。大家自己动手去实现吧，按照以上分析，这部分实现起来十分简单，mblock是个很酷的团队，也许之后会开放）&lt;/p&gt;
&lt;p&gt;mblock对程序进行预处理的部分使用js来做，如下图，大家把这个转化器当黑盒来看吧&lt;/p&gt;
&lt;p&gt;&lt;img alt="预处理" src="http://oav6fgfj1.bkt.clouddn.com/makecode_21978b84.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过简单的正则，你很快可以写出来:)&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/microbit-notes.html"&gt;micro:bit使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/micropython-notes.html"&gt;MicroPython使用笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micropython/micropython"&gt;micropython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;bbcmicrobit/micropython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbcmicrobit/PythonEditor"&gt;bbcmicrobit/PythonEditor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-06-19:microbit-event-driven.html</guid><category>microbit</category></item><item><title>blockly开发之使用python驱动浏览器中的turtle(2)</title><link>/blockly-dev-python-browser-turtle.html</link><description>&lt;p&gt;这篇文章我们将使用blockly来做一个完整的项目。&lt;/p&gt;
&lt;p&gt;这篇教程涵盖以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从拼搭好的积木块中，生成(generate)python代码&lt;/li&gt;
&lt;li&gt;自定义自己的积木块, 并生成对应python代码&lt;/li&gt;
&lt;li&gt;在浏览器中运行python代码&lt;/li&gt;
&lt;li&gt;整合以上部分，使用积木块驱动turtle&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;效果展示&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://olk8jbdzi.bkt.clouddn.com/blockly_turtle.gif" /&gt;&lt;/p&gt;
&lt;p&gt;生成的代码为:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly7f8f7d33.png" /&gt;&lt;/p&gt;
&lt;h1&gt;关于turtle&lt;/h1&gt;
&lt;p&gt;turtle是编程教学中的一个经典概念(另一个经典概念是&lt;code&gt;猫&lt;/code&gt;(来自Scratch))，turtle最初由Papert在他的&lt;a href="https://zh.wikipedia.org/zh-hans/Logo%E8%AF%AD%E8%A8%80"&gt;Logo语言&lt;/a&gt;引入，Logo内置一套海龟绘图（Turtle Graphics）系统，通过向海龟发送命令，用户可以直观地学习程序的运行过程，关于这块的历史沿革，可以参考我之前的文章&lt;a href="http://blog.just4fun.site/scratch.html"&gt;Scratch的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;利用blockly generate python代码&lt;/h1&gt;
&lt;p&gt;如何使用blockly generate代码，我们已经在&lt;a href="http://blog.just4fun.site/blockly-dev-run-code.html"&gt;blockly开发之生成并运行js代码(1)&lt;/a&gt;做了手把手教学。&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://blog.just4fun.site/blockly-dev-run-code.html"&gt;blockly开发之生成并运行js代码(1)&lt;/a&gt;中，我们将积木块generate成js代码。blockly默认支持将积木块generate成以下6种代码:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;Dart&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在&lt;a href="https://blockly-demo.appspot.com/static/demos/code/index.html"&gt;Code Editor&lt;/a&gt;中体验&lt;/p&gt;
&lt;p&gt;本章的目标是generate出python代码，过程十分简洁，你只需要做2件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入&lt;code&gt;python_compressed.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;generate出python代码:&lt;code&gt;var code = Blockly.Python.workspaceToCode(demoWorkspace);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完整的代码参考:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_3_1_generate_python/index.html"&gt;blockly_3_1_generate_python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你要做的只有这些&lt;/p&gt;
&lt;h1&gt;自定义自己的积木块&lt;/h1&gt;
&lt;p&gt;blockly只提供了基础的积木块（基本的语言结构），你常常需要定义自己的积木块。&lt;/p&gt;
&lt;p&gt;自定义积木块时你实际在做两件事:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义积木的外观&lt;/li&gt;
&lt;li&gt;定义出当前积木对应的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;判断一袋狗粮好不好吃的一种方法是看制造者自己吃不吃，我们知道Python社区用Python实现了Python(pypi)。blockly社区中自定义积木外观的工具也是用blockly实现的: &lt;a href="https://blockly-demo.appspot.com/static/demos/blockfactory/index.html"&gt;Blockly Developer Tools&lt;/a&gt;，文档参考:&lt;a href="https://developers.google.com/blockly/guides/create-custom-blocks/blockly-developer-tools"&gt;Blockly Developer Tools docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly2c0249f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过拖拽积木，你就能轻松定义出积木的外观。&lt;/p&gt;
&lt;p&gt;截图中有两处值得注意：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://oav6fgfj1.bkt.clouddn.com/blockly2af54b72.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;红色框中是你自定义积木外观的代码描述，有两种风格你可以选择（js/json），使用json风格你会得到一个好处:可以随时将json贴回Blockly Developer Tools，从而得到对应的积木。在你生成自定义积木的时候，建议取得分享链接，以便于日后对积木做调整。&lt;/p&gt;
&lt;p&gt;而绿色框中则是该积木generate出的代码，你可以选择目标语言,在此我选择Python&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_3_2_custom_block_generate_python/index.html"&gt;blockly_3_2_custom_block_generate_python&lt;/a&gt;中展示了一个完整的自定义积木，如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//外观 使用js风格的描述&lt;/span&gt;
&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw_stamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendDummyInput&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;appendField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPreviousStatement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNextStatement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c1"&gt;//generate Python&lt;/span&gt;
&lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw_stamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;definitions_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;import_turtle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import turtle\nturtle=turtle.Turtle()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;turtle.stamp()\n&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于自定义积木的话题很大，我们找机会专门讨论，在此就不展开&lt;/p&gt;
&lt;h1&gt;浏览器中运行python&lt;/h1&gt;
&lt;p&gt;目前有好几个项目允许你在浏览器中运行python，其中最流行的解决方案是:&lt;a href="https://github.com/skulpt/skulpt"&gt;skulpt&lt;/a&gt;，也许也是目前最成熟的解决方案,好些大型项目都在用它,诸如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tynker.com/"&gt;tynker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/interactive-python-1"&gt;coursera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trinket.io/"&gt;trinket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览器无处不在，如果能在浏览器中直接运行python，不仅免去了新用户安装环境的麻烦，教学者还可以利用js的动态性，灵活地设计课程并与用户交互，很方便对用户做引导。skulpt的主要使用场景是教学，以上便是原因。&lt;/p&gt;
&lt;p&gt;skulpt使用js实现了python解释器(python2.x)，让python能运行在所有主流浏览器中，如此一来，你就可以轻松在pc/手机/ipad的浏览器中学习python&lt;/p&gt;
&lt;p&gt;skulpt是一个强大而灵活的项目，自带很多电池，且有很好的可扩展性(自定义模块)，如果你有兴趣，可以参考:&lt;a href="http://www.skulpt.org/"&gt;skulpt官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;turtle是skulpt自带的模块，你可以在&lt;a href="http://interactivepython.org/runestone/static/thinkcspy/PythonTurtle/OurFirstTurtleProgram.html"&gt;Our First Turtle Program&lt;/a&gt;体验它&lt;/p&gt;
&lt;p&gt;在浏览器中使用python驱动turtle，官方给出了示例源码:&lt;a href="https://gist.githubusercontent.com/bnmnetp/4650616/raw/cea29122971db097c9ccb9fdfccd3c0c9bf81edf/simpleskulpt.html"&gt;simpleskulpt&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;整合&lt;/h1&gt;
&lt;p&gt;经过上边的一圈探索，来看看我们现在能够做到哪些事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从拼搭好的积木块中，生成(generate)python代码&lt;/li&gt;
&lt;li&gt;自定义自己的积木块, 并生成对应python代码&lt;/li&gt;
&lt;li&gt;在浏览器中运行python代码&lt;/li&gt;
&lt;li&gt;使用python控制浏览器中turtle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，整合以上部分，使用blockly积木块来驱动turtle，最小原型参考:&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_4_run_python_in_browser_simple"&gt;blockly_4_run_python_in_browser_simple&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;上边的最小原型修改自&lt;a href="https://gist.githubusercontent.com/bnmnetp/4650616/raw/cea29122971db097c9ccb9fdfccd3c0c9bf81edf/simpleskulpt.html"&gt;simpleskulpt&lt;/a&gt;。修改之处仅有: 把&lt;code&gt;var prog = document.getElementById("yourcode").value;&lt;/code&gt;改为blockly生成的代码:&lt;code&gt;var prog = Blockly.Python.workspaceToCode(demoWorkspace);&lt;/code&gt; , 如此干净整洁!&lt;/p&gt;
&lt;p&gt;这个例子中，我们可以看出blockly的灵活性，如我们在&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;中所言，blockly是个编辑器，只负责生成代码，至于代码之后用与干吗，它通通不关心。如此一来，就不产生耦合了。&lt;/p&gt;
&lt;p&gt;要了让blockly能做出丰富的东西，我们需要把turtle的所有操作原语全都暴露为积木块，这个工作我偷了个懒，直接抠了&lt;a href="https://hourofpython.trinket.io/from-blocks-to-code-with-trinket#/blocks/dragging-and-dropping"&gt;trinket&lt;/a&gt;的源码。完整的代码参考:&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_5_run_python_in_browser_turtle_finish"&gt;blockly_5_run_python_in_browser_turtle_finish&lt;/a&gt;。积木部分参考:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_5_run_python_in_browser_turtle_finish/my_blocks.js"&gt;my_blocks.js&lt;/a&gt;（js代码中变量被压缩过，可读性不大好）&lt;/p&gt;
&lt;p&gt;如此一来我们就完成了整个项目. &lt;/p&gt;
&lt;p&gt;这个项目很有代表性，使用blockly制作一个application的步骤，我们在以上过程中都经历了&lt;/p&gt;
&lt;p&gt;这些步骤官方描述为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成blockly编辑器&lt;/li&gt;
&lt;li&gt;定义你的app里的功能块（block）&lt;/li&gt;
&lt;li&gt;构建app的其余部分，blockly仅充当代码生成器，你需要决定这些用户生成的代码用于做什么，这也是你的app的核心功能所在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于最后一点，blockly官方说的很笼统，针对少儿编程这一领域，第三点往往可以拆解为几类典型问题。这方面我们之后有空再谈&lt;/p&gt;
&lt;!--
# 总结

phaser/snap

Blockly/Scratch 在少儿编程中的应用: 积累问题
--&gt;

&lt;h1&gt;相关源码&lt;/h1&gt;
&lt;p&gt;以下源码展示了渐进的学习过程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_3_1_generate_python"&gt;blockly_3_1_generate_python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_3_2_custom_block_generate_python"&gt;blockly_3_2_custom_block_generate_python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_4_run_python_in_browser_simple"&gt;blockly_4_run_python_in_browser_simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_5_run_python_in_browser_turtle_finish"&gt;blockly_5_run_python_in_browser_turtle_finish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-02-25:blockly-dev-python-browser-turtle.html</guid><category>blockly</category></item><item><title>blockly开发之生成并运行js代码(1)</title><link>/blockly-dev-run-code.html</link><description>&lt;p&gt;如blockly文档的&lt;a href="https://developers.google.com/blockly/guides/configure/web/code-generators"&gt;Code Generators&lt;/a&gt;章节里所说，用户在blockly编辑器中写好了程序之后(积木组合)，程序往往需要被转化为某一门编程语言（JavaScript, Python, PHP, Lua, Dart等），以便于执行它&lt;/p&gt;
&lt;p&gt;比如我们在&lt;a href="http://blog.just4fun.site/blockly-dev-hello-world.html"&gt;blockly开发之hello world(0)&lt;/a&gt;中写的这个程序&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly4b406de9.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们想运行它，以便检验你的数学能力&lt;/p&gt;
&lt;h1&gt;运行代码&lt;/h1&gt;
&lt;p&gt;分几个步骤&lt;/p&gt;
&lt;h2&gt;generate (从积木中生成代码)&lt;/h2&gt;
&lt;h3&gt;原始版本&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly Demo: Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt; Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a simple demo of injecting Blockly into a fixed-sized &amp;#39;div&amp;#39; element.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;rarr;&lt;/span&gt; More info on &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/guides/configure-blockly/web/fixed-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;injecting fixed-sized Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blocklyDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height: 480px; width: 600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;增加的部分&lt;/h3&gt;
&lt;p&gt;参考: &lt;code&gt;blockly/demos/generator/index.html&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;引入依赖&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script src="../../javascript_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个js文件的功能是用于生成&lt;code&gt;&amp;lt;script src="../../blocks_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;预定义的积木对应的js代码&lt;/p&gt;
&lt;p&gt;此外通过引入其他语言模块，我们还可以将&lt;code&gt;blocks_compressed.js&lt;/code&gt;预知的积木块生成python、Python, PHP, Lua, Dart等待&lt;/p&gt;
&lt;p&gt;&lt;code&gt;javascript_compressed.js&lt;/code&gt;需要在&lt;code&gt;blockly_compressed.js&lt;/code&gt;之后被引用&lt;/p&gt;
&lt;h4&gt;生成代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and display it.&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly44c459cd.png" /&gt;&lt;/p&gt;
&lt;h4&gt;运行代码&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and run it.&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LoopTrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;if (--window.LoopTrap == 0) throw &amp;quot;Infinite loop.&amp;quot;;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;添加按钮&lt;/h4&gt;
&lt;p&gt;添加两个按钮把事件关联起来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;showCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Show JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;runCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Run JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;完整版本&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly Demo: Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../javascript_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt; Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a simple demo of injecting Blockly into a fixed-sized &amp;#39;div&amp;#39; element.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;rarr;&lt;/span&gt; More info on &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/guides/configure-blockly/web/fixed-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;injecting fixed-sized Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;showCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Show JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;runCode()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Run JavaScript&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blocklyDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height: 480px; width: 600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;



    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and display it.&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Generate JavaScript code and run it.&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LoopTrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;if (--window.LoopTrap == 0) throw &amp;quot;Infinite loop.&amp;quot;;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workspaceToCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;demoWorkspace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INFINITE_LOOP_TRAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;run&lt;/h2&gt;
&lt;p&gt;以js运行&lt;/p&gt;
&lt;p&gt;如果你回答对了:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly2d377f4e.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你答错了: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly3e120875.png" /&gt;&lt;/p&gt;
&lt;h1&gt;延伸&lt;/h1&gt;
&lt;p&gt;我最近在写一份blockly的入门和进阶教程，这个官方教程也被我纳入其中，在教程的第二节&lt;a href="https://github.com/wwj718/blockly_dev/tree/master/src/blockly_2_generate_and_run_js"&gt;blockly_2_generate_and_run_js&lt;/a&gt;，目前教程以源码的形式出现:&lt;a href="https://github.com/wwj718/blockly_dev"&gt;wwj718/blockly_dev&lt;/a&gt;，还没写成博客。大家能阅读js的话，可以自行阅读。或者等我有空补上文章。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/configure/web/code-generators"&gt;Code Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-01-21:blockly-dev-run-code.html</guid><category>blockly</category></item><item><title>blockly开发之hello world(0)</title><link>/blockly-dev-hello-world.html</link><description>&lt;!--公司内部分享: file:///Users/wwj/workplace/code_org/presentation-blockly/blockly.slides.html#/--&gt;

&lt;p&gt;之前在&lt;a href="http://blog.just4fun.site/blockly-overview.html"&gt;blockly入门与介绍&lt;/a&gt;中，对blockly做了一番介绍，讨论了在技术视角之下，blockly是什么、可以做哪些有趣的事&lt;/p&gt;
&lt;p&gt;在这篇文章里，我们将以一个开发者的视角，开始blockly之旅&lt;/p&gt;
&lt;h1&gt;开始之前&lt;/h1&gt;
&lt;p&gt;关于blockly是什么，上边的文章里提到过，在此重申一下（敲黑板）: blockly是一个编辑器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web-based visual programming editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;blockly作为编辑器，它的输入为用户对积木的拖曳操作（用户拖曳积木作为一种输入，可以类比为用户在普通编辑器的键盘输入），输出为积木的组合方式(可转化为对应代码)。使用blockly可以快速打造一个特定领域的可视化 块编程 编辑器&lt;/p&gt;
&lt;p&gt;至于积木（block）如何生成代码，代码用于什么用途，blockly则通通不关心，由用户自己掌控。&lt;/p&gt;
&lt;h1&gt;quickstart&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/google/blockly --depth=1
cd blockly/demos
# open index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开&lt;code&gt;index.html&lt;/code&gt;之后，将看到&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly3e33e71a.png" /&gt;&lt;/p&gt;
&lt;p&gt;这儿给出了一些很棒的案例，供开发者入门&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fixed Blockly&lt;/code&gt;是最简单的例子，可以视为blockly的hello world (把blockly编辑器注入到html中的div标签中:&lt;code&gt;id="blocklyDiv"&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly3ff212dd.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们用这个编辑器来写一个简单的程序: &lt;code&gt;如果5+6等于11就输出"恭喜你, 蒙对啦"，否则输出"小学数学是语文老师教的吗"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly4b406de9.png" /&gt;&lt;/p&gt;
&lt;p&gt;目前这段程序还不能运行，在之后的章节里，之后我们会让它run起来&lt;/p&gt;
&lt;p&gt;查看源码也只短短的一屏:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly Demo: Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Demos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt; Fixed Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a simple demo of injecting Blockly into a fixed-sized &amp;#39;div&amp;#39; element.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;rarr;&lt;/span&gt; More info on &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://developers.google.com/blockly/guides/configure-blockly/web/fixed-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;injecting fixed-sized Blockly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blocklyDiv&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height: 480px; width: 600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些代码里，真正有用的只有一半，分以下几块说明:&lt;/p&gt;
&lt;h3&gt;依赖文件&lt;/h3&gt;
&lt;p&gt;head中只有这几个依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blockly_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../blocks_compressed.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../../msg/js/en.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分别说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="../../blockly_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 是Blockly内核文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="../../blocks_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 是基础积木集(blocks_compressed中定义了一些基础积木: 类似print、if、list等，我们可以在自己的js脚本中自定义更多的积木)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="../../msg/js/en.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;是英语语言包。目前40多门语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;js脚本名称中的&lt;code&gt;compressed&lt;/code&gt;表示它们都被压缩过，可读性差。如果你想看积木积木是怎么定义的，可以使用chrome开发者面板的pretty print功能查看源码&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/blockly61f553fb.png" /&gt;&lt;/p&gt;
&lt;h3&gt;积木箱(toolbox)&lt;/h3&gt;
&lt;p&gt;在积木面板中引入我们需要的积木&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;xml&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toolbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_if&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logic_compare&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;controls_repeat_ext&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_number&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math_arithmetic&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;block&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text_print&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/block&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xml&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些积木都预定义在&lt;code&gt;&amp;lt;script src="../../blocks_compressed.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至于如何自定一自己的积木，我们也放到之后的章节中说明. 诚信写作:)，说好写hello world，就绝不不引入太多概念&lt;/p&gt;
&lt;h3&gt;往页面注入编辑器&lt;/h3&gt;
&lt;p&gt;页面中准备好注入点: &lt;code&gt;&amp;lt;div id="blocklyDiv" style="height: 480px; width: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后将编辑器注入页面即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;demoWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Blockly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocklyDiv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../media/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;toolbox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toolbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段js代码的语意是：往blocklyDiv中注入Blockly编辑器，积木箱的id为toolbox，media文件目录为&lt;code&gt;../../media/&lt;/code&gt;（包括一些图标文件和声音文件）&lt;/p&gt;
&lt;!--

# 定一个小目标



# 进阶

# 添砖加瓦
Python表达

js运行

跟踪过程



# 探索更多
下载`https://github.com/google/closure-library` zip文件，与blockly目录同级(参考[blockly: Closure Library](https://developers.google.com/blockly/guides/modify/web/closure),不要使用`ln -s`)


wzxhzdk:5


![](http://oav6fgfj1.bkt.clouddn.com/blockly078869e4.png)

--&gt;

&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;在这篇文章我们看到了一个blockly的最小案例。&lt;/p&gt;
&lt;p&gt;在下一篇系列文章中，我们准备让上边写的那么程序run起来，使用这个程序来看看你的小学数学是不是语文老师教的&lt;/p&gt;
&lt;!-- 下篇文章中我们将定义一个自己的积木块，并生成python代码 --&gt;

&lt;!-- 选择是否，生成python代码 实际意义 import time;time.sleep(5) --&gt;

&lt;h1&gt;延伸&lt;/h1&gt;
&lt;p&gt;我最近在写一份blockly的入门和进阶教程，这个官方例子都被我纳入教程中，作为blockly hello world:&lt;a href="https://github.com/wwj718/blockly_dev/blob/master/src/blockly_1_hello_world/index.html"&gt;blockly_1_hello_world&lt;/a&gt;，目前教程以源码的形式出现:&lt;a href="https://github.com/wwj718/blockly_dev"&gt;wwj718/blockly_dev&lt;/a&gt;，还没写成博客。大家能阅读js的话，可以自行阅读。或者等我有空补上文章&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/google/blockly"&gt;github blockly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/overview"&gt;Google for Education : Blockly&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/configure/web/fixed-size"&gt;Fixed-sized Workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/blockly/guides/configure/web/toolbox"&gt;Toolbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/blockly"&gt;blockly 开发者论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-01-03:blockly-dev-hello-world.html</guid><category>blockly</category></item><item><title>micro:bit使用笔记</title><link>/microbit-notes.html</link><description>&lt;p&gt;折腾micro:bit过程中记录的笔记。涉及资源、工具、文档等。&lt;/p&gt;
&lt;p&gt;如果你想获取更多micro:bit相关资源，可以到&lt;a href="https://github.com/wwj718/awesome-microbit-zh"&gt;awesome-microbit-zh&lt;/a&gt;里淘金&lt;/p&gt;
&lt;h1&gt;micro:bit概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;micro:bit是一个小型的可编程计算机，旨在使学习与教学变得轻松有趣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;micro:bit是一款由BBC（英国广播电视公司）推出的为青少年编程教育设计的微型电脑开发板(43 mm × 52 mm), 集成了ARM Cortex-M0处理器、低功耗蓝牙，加速度计，磁力计，三个按钮，5 x 5 LED点阵以及GPIO。&lt;/p&gt;
&lt;p&gt;使用micro:bit可以快速地把你脑子中好玩的想法付诸实践，做出酷炫的小发明。&lt;/p&gt;
&lt;p&gt;microbit官网有许多统计数据表明这个板子取得的教育成就和受欢迎程度:&lt;a href="http://microbit.org/teach/"&gt;Research Findings&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;技术参数&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://tech.microbit.org/docs/hardware/assets/microbit-overview.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5x5 LED点阵&lt;/li&gt;
&lt;li&gt;3个按钮（2个用于用户操作，1个用于复位）&lt;/li&gt;
&lt;li&gt;23个GPIO引脚&lt;/li&gt;
&lt;li&gt;Nordic nRF51822 - 16 MHz 32位ARM Cortex-M0 微控制器，256 KB 闪存，16 KB RAM，2.4 GHz 蓝牙低功耗无线网络。ARM内核可以在16 MHz或32.768 kHz之间切换. 实际运行代码的地方&lt;/li&gt;
&lt;li&gt;NXP/Freescale KL26Z - 接口芯片／接口MCU. 48MHz 的ARM Cortex-M0+ 内核微控制器，其中有全速USB 2.0 OTG控制器，用作USB和Nordic nRF51822控制器之间的通信接口&lt;/li&gt;
&lt;li&gt;NXP/Freescale MMA8652 - 3轴加速度传感器(I²C总线)&lt;/li&gt;
&lt;li&gt;NXP/Freescale MAG3110 - 3轴磁力仪传感器I²C总线（用作指南针和金属探测器）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;microbit有两个两个MCU(nRF51822/KL26Z)，可能一开始会让人有点疑惑，它们的关系如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     PC
      ^                                                    +----------------------------+
      |        +---------------------+                     |       TARGET MCU           |
      |        |   INTERFACE MCU     |                     | +------------------------+ |
      |        |                     |                     | |      Application       | |
      |        | +-----------------+ |     SWD             | +------------------------+ |
      |  USB   | |                 | +---------------------+ | micro:bit runtime DAL  | |
      +--------+ |    DAPLink      | &amp;lt;----------+          | +------------------------+ |
        * Mass | +-----------------+ |     UART |          | |          | |           | |
        Storage| +-----------------+ |          |          | |   mbed   | | SoftDevice| |
               | |   Bootloader    | |          +------------&amp;gt;          | |           | |
        * UART | +-----------------+ |                     | +----------+ +-----------+ |
               +---------------------+                     +----------------------------+
        * CMSIS-DAP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多细节参考:&lt;a href="http://tech.microbit.org/software/daplink-interface/"&gt;DAPlink and the USB interface&lt;/a&gt;&lt;/p&gt;
&lt;!--
### 历史
micro:bit旨在鼓励孩子开始编程和构建新事物，而不是成为软件/媒体消费者.它可以与树莓派协同工作。
--&gt;

&lt;h3&gt;开放性&lt;/h3&gt;
&lt;h4&gt;硬件开源&lt;/h4&gt;
&lt;p&gt;关于硬件部分，两部分关键信息可以一窥Microbit 的内部设计:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/hardware/schematic/"&gt;线路图(schematics)&lt;/a&gt;, 可以看到主要零件的链接方式及设计.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/hardware/reference-design/"&gt;reference design&lt;/a&gt;, 这部分的数据可以帮助进一步了解Microbit 的设计及变更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于硬件部分更多的描述参考:&lt;a href="http://tech.microbit.org/hardware/"&gt;Hardware Description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;兰卡斯特大学（Lancaster University）构建了完整的microbit的硬件抽象（C/C++），包括一个事件调度器和消息总线，这对个人用户和更高级的语言都是有用的（比如Python），这儿有完整的&lt;a href="https://lancaster-university.github.io/microbit-docs/ubit/"&gt;API文档&lt;/a&gt;和&lt;a href="http://lancaster-university.github.io/microbit-docs/online-toolchains/"&gt;入门指南&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;软件开源&lt;/h4&gt;
&lt;p&gt;而为micro:bit编程的软件/web平台，目前基本都开源&lt;/p&gt;
&lt;h1&gt;开始编程&lt;/h1&gt;
&lt;h3&gt;可选编程工具&lt;/h3&gt;
&lt;p&gt;有多种工具可以为microbit编程，包括图形化界面(makecode等)、Python、C++等。我们先在架构层面关注一下microbit的运行时，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://tech.microbit.org/docs/software/assets/dal-4032c.png" /&gt;&lt;/p&gt;
&lt;p&gt;代码的执行过程为(如果你对更多细节感兴趣，可以参考&lt;a href="http://tech.microbit.org/software/"&gt;the micro:bit Software Ecosystem&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://tech.microbit.org/docs/software/assets/overview.png" /&gt;&lt;/p&gt;
&lt;p&gt;尽管有许多可选工具，官方推荐我们使用两种工具来为microbit编程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由微软打造的&lt;a href="https://makecode.microbit.org/#"&gt;JavaScript Blocks Editor(makecode)&lt;/a&gt;: makecode是一个图形化工具，对新手友好&lt;/li&gt;
&lt;li&gt;来自python社区的&lt;a href="http://python.microbit.org/v/1"&gt;Python Editor&lt;/a&gt;: 使用python代码驱动microbit，适合进阶的孩子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你偏好使用离线的编辑器,推荐&lt;a href="https://codewith.mu/"&gt;Mu&lt;/a&gt;和&lt;a href="http://kittenbot.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=156&amp;amp;highlight=makecode"&gt;Makecode离线版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多可选择的编程工具，你可以参考这里:&lt;a href="https://github.com/wwj718/awesome-microbit-zh#%E7%BC%96%E7%A8%8B"&gt;awesome-microbit-zh 编程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;图形化编程&lt;/h3&gt;
&lt;p&gt;如果你选择图形化编程,目前的可选方案有几个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://makecode.microbit.org/"&gt;makecode&lt;/a&gt;： 提供一个基于浏览器的模拟器和积木编程环境，堆叠好的积木块最终将生成JavaScript (TypeScript)代码。PXT支持代码的双向转换！&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.microbit.co.uk/app/#create:tomwku"&gt;Code Kingdoms&lt;/a&gt; - 基于图形界面的编程工具，帮助用户从拖曳式编程到文本编程(JavaScript)的过渡.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lab.open-roberta.org/"&gt;Open Roberta Lab&lt;/a&gt; - 为机器人编程设计的积木时编程环境, 通过将堆叠好的积木生成MicroPython代码来支持microbit.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.site/editor-zh-hans.html"&gt;microbit zh&lt;/a&gt;: 国内社区提供的在线工具,堆叠好的积木块生成python代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在浏览器中的编程环境内置了编译器（可离线使用，十分适合在教室或公共计算机上使用）,代码块转换为hex文件的过程如下&lt;/p&gt;
&lt;p&gt;更多细节,参考这里:&lt;a href="http://tech.microbit.org/docs/software/assets/browser-build-pipeline.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Python 编程&lt;/h3&gt;
&lt;p&gt;microbit上跑了一个MicroPython解释器(一个移植版本):&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;bbcmicrobit/micropython&lt;/a&gt;.这一点可以通过上边那张关于运行时的图种看出&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bbcmicrobit/micropython"&gt;bbcmicrobit/micropython&lt;/a&gt;源码中包含了很多使用python驱动microbit的&lt;a href="https://github.com/bbcmicrobit/micropython/blob/master/examples/"&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既然microbit上跑了MicroPython，那我们就可以用为MicroPython打造的工具来为microbit编程(诸如picocom),关于MicroPython相关的工具和资源，我之前写了这篇文章:&lt;a href="http://blog.just4fun.site/micropython-notes.html"&gt;MicroPython使用笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这儿有一些工具方便在python脚本和hex文件中转化:&lt;a href="https://github.com/bbcmicrobit/micropython/tree/master/tools"&gt;tools&lt;/a&gt;、&lt;a href="https://github.com/ntoll/uflash"&gt;uflash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;microbit所有可用的python模块:&lt;a href="http://microbit-micropython.readthedocs.io/en/latest/microbit.html"&gt;Microbit Module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果需要传输复杂的数据，你无法使用json，可以试试&lt;code&gt;str/eval&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;一些有趣项目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/bitio"&gt;bitio&lt;/a&gt;: 把bitio当成一个IO设备。可以用这库很方便地与电脑脚本，把bitio当成可编程的外设，强烈推荐！&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/bluetooth/apps-and-examples/"&gt;Bluetooth Apps and Examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.bittysoftware.com/"&gt;bitty software apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/scratch2-microbit"&gt;scratch2-microbit&lt;/a&gt;: 使用microbit来控制scratch2中的角色&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/en/2017-06-01-will-txting/"&gt;MicroPython Txting Package for micro:bit&lt;/a&gt;: 用radio收发信息&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/en/2017-05-17-joseph-post/"&gt;Joseph's Micro:bit Python Utilities Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;课程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/teach/"&gt;microbit teach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/teach/code-org-fundamentals/"&gt;Micro:bit Lessons Aligned to Code.org's CS Fundamentals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/2017-12-04-code_org_loops_2/"&gt;Course E - Loops 2 - Nested Loops and Scoreboards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit.org/zh-CN/2017-12-04-code_org_conditionals-1/"&gt;Course F - Conditionals 1 - Conditionals with the Weather Predictor&lt;/a&gt;:有配套的教师资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbit-playground.co.uk/"&gt;python游乐场&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microbit-playground.co.uk/components/PIR-sensor"&gt;PIR Sensor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groklearning.com/learn/microbit-starter-blockly/w1p2/1/"&gt;BBC micro:bit Starter (Blockly)&lt;/a&gt;: 模拟器、作业、slides&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groklearning.com/learn/hoc-virtual-pet/intro/3/"&gt;Hour of Code: Virtual Pet&lt;/a&gt;： 虚拟宠物&lt;/li&gt;
&lt;li&gt;&lt;a href="https://makecode.microbit.org/projects"&gt;Microsoft 14 Week Curriculum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.microbit.co.uk/STEM"&gt;STEM Centre Lessons&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microbit0.blob.core.windows.net/pub/hohwmegr/STEM-Learning-Acceleration-lesson-plan.pdf"&gt;Acceleration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://microbit.org/assets/documents/us_stem_curriculum/stem-acceleration-teacher-notes.pdf"&gt;Acceleration STEM Experiment 教师笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h3&gt;与Arduino对比&lt;/h3&gt;
&lt;p&gt;相比与Arduino，micro:bit具有免装驱动,易上手，电子模块集成度高，支持时下热门的多种编程语言等优势，节省了教学资源成本的同时也大大增加了可玩性和拓展空间。关于这方面的讨论可以参考:&lt;a href="http://kittenbot.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=81"&gt;Microbit和arduino有什么关系？&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;microbit在拖入hex文件后将自动弹出并自动运行程序&lt;/h3&gt;
&lt;p&gt;microbit的flash文件系统完全是虚拟，这就是为什么在写入新文件之后驱动器会自动弹出，当你把hex文件拖到MICROBIT上，它并没有被写入到闪存里，而是直接流到nRF51822(target MCU)中&lt;/p&gt;
&lt;p&gt;这方便的讨论参考:&lt;a href="http://tech.microbit.org/software/daplink-interface/"&gt;DAPlink and the USB interface|Files on the MICROBIT Drive&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Micro_Bit"&gt;wikipedia Micro Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/"&gt;microbit developer community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/software/"&gt;he micro:bit Software Ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/hardware/"&gt;Hardware Description&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/software/runtime-mbed/"&gt;The micro:bit runtime and mbed programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/TWmicrobit/p/6984285.html"&gt;Microbit 硬件架构介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/awesome-microbit-zh"&gt;awesome-microbit-zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbit.hackster.io/"&gt;microbit.hackster.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mc.dfrobot.com.cn/forum.php?mod=viewthread&amp;amp;tid=23903"&gt;BBC Micro:bit是什么和microbit怎么玩起来 中文教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kittenbot.cn/bbs/forum.php?mod=viewthread&amp;amp;tid=81"&gt;Microbit和arduino有什么关系？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.microbit.org/software/daplink-interface/"&gt;DAPlink and the USB interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lancaster-university.github.io/microbit-docs/online-toolchains/"&gt;Web-based C/C++ environments supporting the runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
https://github.com/bbcmicrobit/micropython/blob/master/tools/pyboard.py  是一个分支

http://mc.dfrobot.com.cn/forum.php?mod=viewthread&amp;tid=30029  电子琴


http://mc.dfrobot.com.cn/forum.php?mod=viewthread&amp;tid=30010  计步器


https://sites.google.com/site/hardwaremonkey/home/handshake  实际使用 实验


https://github.com/lancaster-university/quiz-bit  投票程序


https://github.com/ubirch/pxt-ubirch 发送数据到云端

http://warksjammy.blogspot.kr/2017/07/bitio-blogs-in-one-place.html?view=timeslide  例子 用于控制minecrft  树莓派

图形化

http://www.micropython.org.cn/bbs/forum.php?mod=viewthread&amp;tid=273&amp;extra=

microbit和scratch连接

https://github.com/vecsei/Scratchbit

https://www.youtube.com/watch?v=nJengUwURdE&amp;feature=youtu.be

https://github.com/wwj718/scratch2-microbit  成功！！！ 非常酷

https://mryslab.github.io/s2m/
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-24:microbit-notes.html</guid><category>microbit</category></item><item><title>在blockly中构建语音识别/合成 积木块</title><link>/blockly-sound_recognition.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/speech_block9f7d476a.png" /&gt;&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;近期在完善blockly4pi中AI的相关部分，语音和图像/视频流是常见的输入，语音的输入之前计划在硬件积木那边采集，之后流向树莓派，交由树莓派来处理，不过协议因此变得复杂许多，一番权衡之下，我们决定在浏览器里来处理多媒体输入&lt;/p&gt;
&lt;p&gt;我一直在关注浏览器中的webRTC和Web Speech，之前在几个项目中也接触过它们,这些接口现在越发强大了，而且浏览器的支持也在变好&lt;/p&gt;
&lt;h1&gt;Web Speech&lt;/h1&gt;
&lt;p&gt;HTML5中和Web Speech相关的API有两类, 一类是"语音合成(Speech Synthesis)"，一类是"语音识别(Speech Recognition)",无论哪种,使用起来都非常简单. &lt;/p&gt;
&lt;h3&gt;语音合成&lt;/h3&gt;
&lt;p&gt;之前语音合成我一直用百度语音来做，效果还不错，不过多了一层网络请求.&lt;/p&gt;
&lt;p&gt;Chrome 浏览器在版本25之后开始支持这一特性，效果非常棒.你可以调出你的控制台,让浏览器说: '你好,世界',像下边这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;utterThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;你好，世界！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterThis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;神奇的是，竟然没有用到云服务，完全在本地完成!&lt;/p&gt;
&lt;h3&gt;语音识别&lt;/h3&gt;
&lt;p&gt;相比于语音合成，语音识别还有些坑。&lt;/p&gt;
&lt;p&gt;我们先来说下它的简单用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newRecognition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上边短短的几行，你就完成了浏览器调用麦克风，等待语音输入到结果输出的完成流程&lt;/p&gt;
&lt;p&gt;如果你只是想拿到输出结果的内容，可以这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newRecognition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//newRecognition.continuous = false;&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//console.log(event);&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;transcript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;newRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;识别结果比较理想&lt;/p&gt;
&lt;h4&gt;坑&lt;/h4&gt;
&lt;p&gt;有个恼人的坑是，识别开始后，浏览器有时候一直在等待输入，而无法返回识别结果（可能是墙的原因），这种情况时常发生，而且在各个平台下(mac/windows)下都是如此&lt;/p&gt;
&lt;p&gt;不过在chrome的开发版(canary)中一切正常,我的当前版本号是:&lt;code&gt;60.0.3099.0（正式版本）canary （64 位&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;包装成blockly积木块&lt;/h1&gt;
&lt;p&gt;为了将其纳入到blockly4pi体系中，我们需要将Web Speech包装为blockly积木块&lt;/p&gt;
&lt;p&gt;语音合成部分比较简单,在积木中接受用户输入，传到api中即可，@dsl已经完成了这个工作&lt;/p&gt;
&lt;p&gt;语音识别部分会比较麻烦，在上边的语音识别示例代码里，我们看到对语音的识别结果出现在&lt;code&gt;onresult&lt;/code&gt;事件回调的函数里，这样一来控制流就不是线性的了(哈哈 在js中这才是常态)，如何在blockly中表达变达这种控制流，是个值得思考的问题&lt;/p&gt;
&lt;p&gt;熟悉js的同学会觉得思路上不难，可要在blockly中表达也没有很容易，首先得熟悉blockly的表达习惯和api,有些部分涉及比较高级的api&lt;/p&gt;
&lt;p&gt;这个问题webduino团队给出了漂亮的解答，我们稍后对其&lt;a href="https://github.com/webduinoio/webduino-blockly"&gt;源码&lt;/a&gt;做个分析&lt;/p&gt;
&lt;h3&gt;源码分析&lt;/h3&gt;
&lt;p&gt;熟悉blockly的小伙伴，很轻松能定位到目标积木块的源码(我们只关注sound_recognition块，其他块相对简单)&lt;/p&gt;
&lt;p&gt;在注释中我们找到了积木块的生成方式：&lt;a href="https://blockly-demo.appspot.com/static/demos/blockfactory/index.html#shuqaz"&gt;sound_recognition blockfactory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/sound_blockfccbdea4.png" /&gt;&lt;/p&gt;
&lt;p&gt;积木外观由以下代码定义:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Blockly.Blocks[&amp;#39;sound_recognition&amp;#39;] = {
  init: function() {
    this.appendDummyInput()
        .appendField(&amp;quot;開始語音辨識 ( Chrome 限定，不支援 iOS )&amp;quot;);
    this.appendDummyInput()
        .appendField(&amp;quot;辨識語言：&amp;quot;)
        .appendField(new Blockly.FieldDropdown([[&amp;quot;中文&amp;quot;,&amp;quot;cmn-Hant-TW&amp;quot;], [&amp;quot;English&amp;quot;,&amp;quot;en-US&amp;quot;]]), &amp;quot;lang_&amp;quot;)
        .appendField(&amp;quot;    即時辨識：&amp;quot;)
        .appendField(new Blockly.FieldDropdown([[&amp;quot;on&amp;quot;,&amp;quot;on&amp;quot;], [&amp;quot;off&amp;quot;,&amp;quot;off&amp;quot;]]), &amp;quot;interimResults_&amp;quot;)
        .appendField(&amp;quot;( 行動裝置勾選 off )&amp;quot;);
    this.appendStatementInput(&amp;quot;recognition_&amp;quot;);
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setTooltip(&amp;#39;&amp;#39;);
    this.setHelpUrl(&amp;#39;&amp;#39;);
  }
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(以js为例)拿到积木中的用户的输入很简单:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Blockly.JavaScript[&amp;#39;sound_recognition&amp;#39;] = function(block) {
  var dropdown_lang_ = block.getFieldValue(&amp;#39;lang_&amp;#39;);
  var dropdown_interimresults_ = block.getFieldValue(&amp;#39;interimResults_&amp;#39;);
  var statements_recognition_ = Blockly.JavaScript.statementToCode(block, &amp;#39;recognition_&amp;#39;);
  // TODO: Assemble JavaScript into code variable.
  var code = &amp;#39;...;\n&amp;#39;;
  return code;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;statements_recognition_&lt;/code&gt;值得留意&lt;/p&gt;
&lt;p&gt;至此整个积木块已经完成，只剩下最后也最核心的问题了，sound_recognition是如何来generate出代码的，上边提到的回调的问题也是在这里处理&lt;/p&gt;
&lt;p&gt;直接上代码更直观些: &lt;a href="https://github.com/webduinoio/webduino-blockly/blob/19e40f0108e72dbd08628705a1e4fad9c3ccab7e/generators/webduino.js#L1727"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;抛开辅助性的代码，我们看到最核心的部分是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;#39;    window._recognition.onresult = async function(event,result) {\n&amp;#39; +
    &amp;#39;      result = {};\n&amp;#39; +
    &amp;#39;      result.resultLength = event.results.length-1;\n&amp;#39; +
    &amp;#39;      result.resultTranscript = event.results[result.resultLength][0].transcript;\n&amp;#39; +
    &amp;#39;      if(event.results[result.resultLength].isFinal===&amp;#39; + inter1 + &amp;#39;){\n&amp;#39; +
    &amp;#39;        console.log(result.resultTranscript);\n&amp;#39; +
    &amp;#39;        &amp;#39; + statements_recognition_ +
    &amp;#39;        &amp;#39; + consoleFinal1 +
    &amp;#39;      }else if(event.results[result.resultLength].isFinal===&amp;#39; + inter2 + &amp;#39;){\n&amp;#39; +
    &amp;#39;        &amp;#39; + consoleFinal2 +
    &amp;#39;      }\n&amp;#39; +
    &amp;#39;    };\n&amp;#39; +
    &amp;#39;    window._recognition.start();\n&amp;#39; +
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特别注意&lt;code&gt;statements_recognition_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;顺便吐个槽，尽管code的拼接极尽排版的工整，但读起来还是不舒服，用es6的模版字符串来写会好看很多&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascript.ruanyifeng.com/htmlapi/webspeech.html"&gt;Web Speech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webduinoio/webduino-blockly"&gt;webduino-blockly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-12:blockly-sound_recognition.html</guid><category>rpi</category></item><item><title>嘿 Siri 关灯</title><link>/rpi-siri-close-light.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri17469bd4.png" /&gt;&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;你在南方的艳阳里大雪纷飞,我在北方的寒夜里四季如春&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;马頔的这句歌词，道尽南方人过冬的艰辛。在没有暖气的南方，过冬基本靠抖腿和一身正气&lt;/p&gt;
&lt;p&gt;我们以高中诗词鉴赏的套路来剖析下词作，"你在南方的艳阳里大雪纷飞"当然不是直白地描述一场太阳雪,艺术要有含蓄美。这句话实际上说的是"你"在南方灯如暖阳的房间里，忘穿秋裤，冻得像雪地里呆呆的兔子（由此可见这个灯是白炽灯而不是节能灯，节能灯如白月光而不似暖阳）&lt;/p&gt;
&lt;p&gt;如果你有兴趣深挖，会进一步坚定艳阳指的就是灯。小如洞穴的房间、灯与影子，不由让人想到柏拉图的洞穴理论，作者进而感慨现实世界的不真实性，于是有后边的"穷极一生做不完一场梦"&lt;/p&gt;
&lt;p&gt;至于如果题目问"你"指的是谁，你最好不要答前女友，其他随意，以免勾起阅卷老师伤感的回忆，给你个悲伤的分数&lt;/p&gt;
&lt;p&gt;在灯如暖阳床如霜的南方夜晚，你刚看完《汇编语言从入门到放弃》，准备起床关灯睡觉，却对被子依依不舍。这时你想：要是对着Siri说一声&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嘿siri，宝宝困了帮我关灯么么哒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;便可睡觉该是多美的场景&lt;/p&gt;
&lt;p&gt;又或者 圣诞夜你和你的小女朋友在被窝里讨论拉普拉斯变换或是傅里叶变换，可窗帘没拉，灯太亮影响发挥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嘿Siri关灯并闭上眼睛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们撸起袖子来实现它&lt;/p&gt;
&lt;h1&gt;思路&lt;/h1&gt;
&lt;p&gt;我不建议你给房间换一个智能灯泡，也不打算向你推销一套年底特价智能家居解决方案，我们延续之前的思路(&lt;a href="http://blog.just4fun.site/raspberrypi-lirc.html"&gt;用树莓派给家用电器加上智能&lt;/a&gt;)，尽量用非入侵的方式来解决问题，不去破坏和替换现有的设备&lt;/p&gt;
&lt;p&gt;于是我们就提出这样一个问题：如何在不改变现有灯泡特性、电路结构和开关特性的情况下，来关灯？&lt;/p&gt;
&lt;p&gt;能想到的方案似乎只有模拟人手的动作，以机械的方式来按下开关&lt;/p&gt;
&lt;p&gt;"舵机"就是我们的首选了&lt;/p&gt;
&lt;p&gt;剩下的就是如何躺在床上控制舵机来关灯，与硬件世界打交道，树莓派是我偏好的工具。树莓派控制舵机不成问题，至于如何用手机控制树莓派，我也在此前的文章中论述过&lt;/p&gt;
&lt;p&gt;不过本文将采用更酷的方式，你将无需编程，通过拖曳积木化的模块，就可以搭建出关灯机器人，然后通过siri控制这个机器人,如此一来你可以用自然语言的方式给siri发送关灯命令&lt;/p&gt;
&lt;p&gt;这个方案拓展开，我们几乎可以控制所有的按键式开关&lt;/p&gt;
&lt;p&gt;自然语言处理这部分Siri帮我们做了，之后有机会我们自己来实现，听起来有点像最近怒刷各种技术社区的&lt;a href="https://m.toutiao.com/i6366879371965235714/?tt_from=weixin_moments&amp;amp;utm_campaign=client_share&amp;amp;app=news_article&amp;amp;utm_source=weixin_moments&amp;amp;iid=6814510930&amp;amp;utm_medium=toutiao_android&amp;amp;wxshare_count=2&amp;amp;pbid=31547628651&amp;amp;from=timeline&amp;amp;isappinstalled=0"&gt;Jarvis&lt;/a&gt; --扎尔伯格用人工智能控制家居的项目&lt;/p&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;h3&gt;硬件部分&lt;/h3&gt;
&lt;p&gt;硬件部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树莓派&lt;/li&gt;
&lt;li&gt;舵机&lt;/li&gt;
&lt;li&gt;长导线&lt;/li&gt;
&lt;li&gt;移动电源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri56e654b0.png" /&gt;&lt;/p&gt;
&lt;p&gt;组件不多，考虑到电灯开关的位置一般齐胸，而树莓派和移动电源(供电)放在地上，所以你需要三根长导线，而不是普通的杜邦线，和往常一样，长导线这种东西都是从万能的@李老师的万能的实验室里要来的,感谢@李老师一直以来的助攻&lt;/p&gt;
&lt;p&gt;下边我们对各个部分做个简单介绍：&lt;/p&gt;
&lt;h4&gt;树莓派&lt;/h4&gt;
&lt;p&gt;关于树莓派，可以参考我此前的文章:&lt;a href="http://blog.just4fun.site/raspberrypi-install-and-config.html"&gt;树莓派折腾笔记之系统安装与配置&lt;/a&gt;.入门新手会遇到的问题我基本都列出了&lt;/p&gt;
&lt;p&gt;我也翻译了一份&lt;a href="https://github.com/wwj718/awesome-raspberry-pi-zh"&gt;树莓派(Raspberry Pi)资源大全中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;供大家玩耍时参考&lt;/p&gt;
&lt;h4&gt;舵机&lt;/h4&gt;
&lt;p&gt;我买的是淘宝上的SG90 9g舵机，价格6块多,关于舵机的控制原理比较麻烦，李老师跟我描述过，我听个大概，不过不影响，去网上抄段程序修修改改，封装为黑盒函数基本能用，有空在细看这块&lt;/p&gt;
&lt;p&gt;简单介绍下舵机上的几根线:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色：电压&lt;/li&gt;
&lt;li&gt;粽色：地线&lt;/li&gt;
&lt;li&gt;橙色：信号线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我把信号线接到18号引脚(BCM) ，查看gpio图：&lt;code&gt;gpio readall&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;李老师&lt;/h4&gt;
&lt;p&gt;顺便也介绍些李老师.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;李老师其实不是我的老师,我毕业后才认识他，我从李老师这边学到很多硬件知识，从传道解惑的角度来说，李老师确是我的老师&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师南大博士毕业后，在大学执教，他博士阶段读的是图像识别，但他是个彻头彻尾的硬件黑客&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师的实验室黑科技齐全，哆啦A梦口袋一般，有求必应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师常说的话有这样一种模式："没事没事，xx功能的电子设备买不到也没事，我们自己画，等印刷完，你过来取". 我们有个有趣的项目，硬件部分都是李老师画的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迄今 只有一次例外: 有一回李老师在论述分布式节点的连接策略时，我有点开小差，状态类似"一人虽听之 一心以为有鸿鹄将至 思援弓缴而射之". 我突然想要一个无线开关来控制我那不够智能的油汀，以便于用树莓派控制它。而李老师也和往常一样，一边论述一边离题，岔到其他他感兴趣的话题:这回是关于如何把无线模块画得更小，当他兴致勃勃地分享这个灵光一现时，我不合时宜地提出说我想要一个无线开关，能不能用继电器、开关外壳和无线模块，外加画个板子集成它们，李老师以一种给你糖吃别打岔的样子，说这个淘宝上有卖的，app都自带的，你去买一个，抓包hack它就能编程了。于是李老师继续谈论他画板子的布线方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;李老师实验室的四轴飞行器，除了飞行器是自己做的，遥控手柄也是自己画的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大家感受一下&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/lilaoshi397d1e4f.png" /&gt;&lt;/p&gt;
&lt;p&gt;让我们想到那句感人的话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;情之所钟，虽丑不嫌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉哪里不对 ……&lt;/p&gt;
&lt;h3&gt;组装硬件&lt;/h3&gt;
&lt;p&gt;硬件部分的组装很容易，直接上效果图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri4cc6a938.png" /&gt;&lt;/p&gt;
&lt;p&gt;接下来让我们用双面胶把舵机贴到开关边上，舵机转动即可关灯&lt;/p&gt;
&lt;h1&gt;软件部分&lt;/h1&gt;
&lt;p&gt;按照一般的套路，此处应该从舵机的驱动程序写起，加上通讯模块，接着写一些胶水程序黏合它们，组成实现完整的功能&lt;/p&gt;
&lt;p&gt;软件部分如开篇所说，这次我想试试不通过编程的方式来完成这个工作. 仅仅通过拖拽功能模块，我们就能拼出功能的机器人,这样可以让更多的人参与进来(当然包括哪些在玩王者荣耀的小学生)&lt;/p&gt;
&lt;p&gt;我已经完成了积木式的控制平台,硬件驱动全部封装为积木块(让每个人实现一次硬件驱动未免无聊)，拖曳即可，支持几乎完备的编程要素，可以实现丰富的功能&lt;/p&gt;
&lt;p&gt;我们来拖曳模块完成任务，Siri的请求本身被我封装为模块&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri.gif" /&gt;&lt;/p&gt;
&lt;p&gt;完成后，程序为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri15bab0b4.png" /&gt;&lt;/p&gt;
&lt;p&gt;至于对原理有兴趣的geek小伙伴，在之后的文章里，我们再来讲解细节实现,实际hack了Siri&lt;/p&gt;
&lt;h1&gt;效果演示&lt;/h1&gt;
&lt;p&gt;点击"运行程序"，程序就会在树莓派中运行（开机自启）,我们做个演示&lt;/p&gt;
&lt;video src="http://ocfy0072v.bkt.clouddn.com/siri-%E5%85%B3%E7%81%AF-1.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;h1&gt;自然语言&lt;/h1&gt;
&lt;p&gt;因为Siri本身具有处理自然语言的能力，我们可以用许多说法来关灯&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/siri05dcb491.png" /&gt;&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;p&gt;当前的自然语言处理(NLU)用得到了Siri，下一个版本想试试&lt;a href="http://www.yige.ai/"&gt;yige.ai&lt;/a&gt;,然后把它植入到微信中，这样可以跨平台使用它&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-12-24:rpi-siri-close-light.html</guid><category>rpi</category></item></channel></rss>