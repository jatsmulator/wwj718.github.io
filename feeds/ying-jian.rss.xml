<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>writing for time</title><link>/</link><description></description><atom:link href="/feeds/ying-jian.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 25 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>基于树莓派和Tensowflow的物体识别-speaker</title><link>/raspberrypi-tensowflow-robot-speaker.html</link><description>&lt;p&gt;接上篇文章:&lt;a href="http://blog.just4fun.site/raspberrypi-tensowflow-robot.html"&gt;基于树莓派和Tensowflow的物体识别-brain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上篇文章里我们用tensorflow的inception模型为树莓派探险者添加智能（它的大脑（brain））。这篇文章里我们给他添加外设，使其"说"出物体的名称，我们将使其成为speaker&lt;/p&gt;
&lt;p&gt;ps：之所以叫树莓派探险者是它的行为很像一个初入地球的外星机器人，对周遭事物充满好奇，试图弄清看到的每个物体是什么（代码的实现是超声波测距+拍照+tensorflow图像识别）&lt;/p&gt;
&lt;h1&gt;目标&lt;/h1&gt;
&lt;p&gt;我们将使树莓派探险者用中文说出看到的物体的名字，诸如&lt;code&gt;这是一个橘子&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;任务&lt;/h1&gt;
&lt;p&gt;为了实现这个目标我们有几件事要做。&lt;/p&gt;
&lt;p&gt;tensorflow的inception模型识别完物体，将输出5个最为贴近的物体的英文名称。我们选取得分最高的物体，将其名称翻译为中文，之后用蓝牙音箱输出：&lt;code&gt;这是一个xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上是以下两项任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英汉翻译&lt;/li&gt;
&lt;li&gt;中文文字转语音&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;解决方案&lt;/h1&gt;
&lt;p&gt;完成以上任务，有两种典型的方案，一种使用云服务，一种使用本地软件&lt;/p&gt;
&lt;h3&gt;云服务&lt;/h3&gt;
&lt;p&gt;使用云服务，我们可以轻松完成以上两项任务，英汉翻译使用：&lt;a href="https://github.com/translate/translate"&gt;translate&lt;/a&gt;, 这是一个python库，直接pip安装就行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pip install translate&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;translate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;
&lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;to_lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;umbrella&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="c1"&gt;#雨伞&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;中文文字转语音可以使用&lt;a href="http://yuyin.baidu.com/tts/"&gt;百度语音合成&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;本地软件&lt;/h3&gt;
&lt;p&gt;为了提高响应速度和可控性，使其减少对网络的依赖（有些环境并没有网络），也许我们更倾向使用本地软件&lt;/p&gt;
&lt;p&gt;下面分别论述如何在不依赖网络的情况下使用本地软件来完成翻译和文字转语音的任务&lt;/p&gt;
&lt;p&gt;英汉翻译我们选择: &lt;code&gt;sdcv&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo  apt-get install sdcv
mkdir -p ~/.stardict/dic # 之后把字典下载解压到这个目录里
sdcv orange #查询单词 orange
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后我们用正则提取出其中的名词选项，选择最靠前的（这个策略没有认真考虑过）&lt;/p&gt;
&lt;p&gt;至于字典的下载可以到这里：&lt;a href="http://abloz.com/huzheng/stardict-dic/zh_CN/"&gt;zh_CN 简体中文词典&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我下了三个字典：朗道英汉字典5.0、KDic11万英汉词典、牛津简明英汉袖珍辞典&lt;/p&gt;
&lt;p&gt;朗道英汉字典5.0内容详尽，牛津简明英汉袖珍辞典简单清晰&lt;/p&gt;
&lt;p&gt;我偏好后者&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下一个任务是中文文字转语音，树莓派机器人原作者Lukas使用&lt;a href="http://www.festvox.org/flite/"&gt;Flite&lt;/a&gt;来做文字转语音。Flite是一个小型、快速的TTS系统，是著名的语音合成系统festival的C版本，可用于嵌入式系统&lt;/p&gt;
&lt;p&gt;可以这个工具不支持中文，我决定采用:&lt;a href="https://github.com/hgneng/ekho"&gt;ekho&lt;/a&gt;来做文字转语音的工作，项目介绍在:&lt;a href="http://www.eguidedog.net/cn/ekho_cn.php"&gt;Ekho(余音) - 中文语音合成软件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他可选的工具还有eSpeak,安装和使用都简单。&lt;code&gt;espeak -vzh "你好"&lt;/code&gt;，发音比较机械&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;增加看图说话功能（Show and Tell: image captioning open sourced in TensorFlow）&lt;/li&gt;
&lt;li&gt;语音识别（pocketsphinx）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/zouxy09/article/details/7942784"&gt;PocketSphinx语音识别系统的编译、安装和使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jlinux/blog/blob/master/posts/voice-control.md"&gt;voice-control&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-25:raspberrypi-tensowflow-robot-speaker.html</guid><category>tools</category></item><item><title>基于树莓派和Tensowflow的物体识别-brain</title><link>/raspberrypi-tensowflow-robot.html</link><description>&lt;p&gt;近来这篇文章很火：&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt; （作者是Lukas，CrowdFlower创始人）
，中文译本为《如何用100美金和Tensowflow来造一个能"看"东西的机器人》，公众号们纷纷转载&lt;/p&gt;
&lt;p&gt;文章读来饶有趣味，里边涉及的技术大多接触过，都不难，遂决定动手实现它&lt;/p&gt;
&lt;p&gt;要实现整个项目，我手头还缺小车底盘，我们先来实现这个项目的核心部分：用树莓派和Tensowflow的识别现实世界的物体。日后有空再加上小车&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orange94aa0771.png" /&gt;&lt;/p&gt;
&lt;p&gt;随手把桌子上同事给的橘子拍下来，之后我们试着让树莓派认出它&lt;/p&gt;
&lt;h1&gt;任务描述&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt; 已经把要做的是事说清楚了&lt;/p&gt;
&lt;p&gt;物体识别是近来机器学习领域的热点之一。对于识别人脸或是区分猫狗这件事上，计算机已经胸有成竹，而在更大的图片集中识别一个指定的物体还是人工智能领域的“圣杯”，不过近年也有很大进展&lt;/p&gt;
&lt;p&gt;我们将造一个能自己识别物体的机器人（不需要云服务）&lt;/p&gt;
&lt;h1&gt;工具介绍&lt;/h1&gt;
&lt;h3&gt;树莓派&lt;/h3&gt;
&lt;p&gt;树莓派（Raspberry Pi）是一款基于Linux的单板机电脑，它只有巴掌大小，却有惊人的计算能力，你可以把它当做一台普通电脑。&lt;/p&gt;
&lt;p&gt;树莓派的使命是制作一套启发孩子的电脑，降低孩子们试错的成本&lt;/p&gt;
&lt;p&gt;树莓派最新的版本是树莓派3,较前一代树莓派2，树莓派3的处理器升级为了64位的博通BCM2837，并首次加入了Wi-Fi无线网络及蓝牙功能。加量不加价&lt;/p&gt;
&lt;h3&gt;TensorFlow&lt;/h3&gt;
&lt;p&gt;TensorFlow是一个由"Google大脑"团队的研究人员开发的机器学习库，Google遵循Apache License 2.0将其开源。该系统可以被用于语音识别、图片识别等多个领域&lt;/p&gt;
&lt;p&gt;在这个项目中我们主要用到一个叫做&lt;a href="https://github.com/tensorflow/models/tree/master/inception"&gt;inception&lt;/a&gt;的模型（基于ImageNet数据集）。它可以完成物体识别，我们直接使用预训练好的模型。训练模型可是个费时费力的工作&lt;/p&gt;
&lt;p&gt;你把智能当黑盒使用的时候，并不需要有那么多偷懒的负罪感啦（哈哈  我还是有一点）&lt;/p&gt;
&lt;p&gt;电气时代来临的时候，变革社会的除了那些发电的人，那些懂得使用电力去改造传统行业，创造新的行业的人，也许对社会的变革更为深刻。尽管他们可能连卡诺循环都不知道，甚至不知如何将水蒸汽中的动能转换为功，进而驱动电机发电&lt;/p&gt;
&lt;h4&gt;ImageNet数据集&lt;/h4&gt;
&lt;p&gt;这个数据集包含约120万张训练图像、5万张验证图像和10万张测试图像，分为1000个不同的类别，用于机器学习中训练图像识别系统&lt;/p&gt;
&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;p&gt;我们先准备好树莓派,我用的是安装了&lt;a href="https://downloads.raspberrypi.org/raspbian/images/raspbian-2016-05-31/"&gt;raspbian-2016-05-31&lt;/a&gt;版本的树莓派3代（使用其他版本应该也没问题），关于树莓派的相关配置可以参考我之前的文章：&lt;a href="http://blog.just4fun.site/raspberrypi-install-and-config.html"&gt;树莓派折腾笔记之系统安装与配置&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;安装Tensowflow&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt; 这篇文章里，作者采用的是TensorFlow提供的makefile命令，在树莓派中本地编译，这一步骤花费了作者几个小时。不过好处是一步到位。安装完后可以直接运行：&lt;code&gt;tensorflow/contrib/pi_examples/label_image/gen/bin/label_image&lt;/code&gt;来识别物体&lt;/p&gt;
&lt;p&gt;我不打算编译安装，除了过程费事，还需要在安装的几个小时里提心吊胆，深怕某个依赖问题导致前功尽弃，重新编译。 我在手动编译opencv的时候就曾备受折磨&lt;/p&gt;
&lt;h3&gt;我的安装过程&lt;/h3&gt;
&lt;p&gt;我们先安装已经适合树莓派的Tensowflow，这种工作，肯定有人做过，github一搜果不其然：&lt;a href="https://github.com/samjabrahams/tensorflow-on-raspberry-pi"&gt;tensorflow-on-raspberry-pi&lt;/a&gt;。我们开始安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/raw/master/bin/tensorflow-0.9.0-cp27-none-linux_armv7l.whl
sudo pip install tensorflow-0.9.0-cp27-none-linux_armv7l.whl  #这一步会安装其他依赖，如果太慢，可以用-i参数，使用豆瓣源
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装过程很快，也就喝杯茶时间，过程十分流畅&lt;/p&gt;
&lt;p&gt;Tensowflow安装完成，我们开始加载模型,安装过程参考这里:&lt;a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/pi_examples"&gt;pi_examples&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir  ~/tf
cd /usr/local/lib/python2.7/dist-packages/tensorflow/models/image/imagenet
python classify_image.py --model_dir ~/tf/imagenet #--model_dir 指定模型数据存放的目录
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成后我们来测试下是否正常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python /usr/local/lib/python2.7/dist-packages/tensorflow/models/image/imagenet/classify_image.py  --model_dir ~/tf/imagenet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是如下输出则一切就绪：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca (score = 0.89233)
indri, indris, Indri indri, Indri brevicaudatus (score = 0.00859)
lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens (score = 0.00264)
custard apple (score = 0.00141)
earthstar (score = 0.00107)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;我们来试一下我的伞（拍于办公室）：&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/sandfa6b51c.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python /usr/local/lib/python2.7/dist-packages/tensorflow/models/image/imagenet/classify_image.py  --model_dir ~/tf/imagenet --image_file /tmp/test.jpg  # 图片需是jpg格式
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/san47120afa.png" /&gt;&lt;/p&gt;
&lt;p&gt;程序会给出5个可能的物体，得分最高的是雨伞，识别的很准确&lt;/p&gt;
&lt;p&gt;我们接着给它看一张橘子的图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/orange94aa0771.png" /&gt;&lt;/p&gt;
&lt;p&gt;输出为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lemon (score = 0.72036)
orange (score = 0.16516)
spaghetti squash (score = 0.01571)
butternut squash (score = 0.00304)
ocarina, sweet potato (score = 0.00298)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它认为最大的可能是柠檬，橘子和柠檬确实很相似&lt;/p&gt;
&lt;p&gt;如果你想自己来训练你的模型，可以参考googleblog上的这篇文章:&lt;a href="https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html"&gt;Train your own image classifier with Inception in TensorFlow&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;优化&lt;/h1&gt;
&lt;p&gt;目前物体识别的性能不高，需要等一会儿，Lukas的机器人很有趣，它每次拍下照片，开始计算的时候会说&lt;code&gt;I'm thinking&lt;/code&gt;。延时得很自然，机器也确实是在“思考”&lt;/p&gt;
&lt;p&gt;关于如何提高运算速度，以下是几个可能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用GPU来计算。树莓派支持GPU运算，不过&lt;a href="https://github.com/samjabrahams/tensorflow-on-raspberry-pi"&gt;tensorflow-on-raspberry-pi&lt;/a&gt;目前没有GPU版本的whl，linux/mac都有GPU版本的whl. 此问题详细谈论可以参考:&lt;a href="https://github.com/samjabrahams/tensorflow-on-raspberry-pi/issues/15"&gt;Question on GPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使树莓派超频可以加快运算速度&lt;/li&gt;
&lt;li&gt;把tensorflow部署到小车控制器坐在的电脑上（本地电脑），实际计算在本地进行（这样可以把tensorflow用到任何client里，不过需要联网运行）&lt;/li&gt;
&lt;li&gt;把tensorflow部署到云上，提供网络服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个优化是，缩小图片尺寸，可以使用ImageMagick提供的convert指令：&lt;code&gt;convert -resize 100x100 test.png dest.jpg&lt;/code&gt;。 如此一来就把图片转化为小尺寸（100x100），能有效提高运算速度&lt;/p&gt;
&lt;h1&gt;todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;中文语音输出&lt;ul&gt;
&lt;li&gt;蓝牙音箱&lt;/li&gt;
&lt;li&gt;英-&amp;gt;中翻译&lt;/li&gt;
&lt;li&gt;语音输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加载到汽车模型上&lt;ul&gt;
&lt;li&gt;L298N驱动板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE"&gt;维基百科 树莓派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/learning/how-to-build-a-robot-that-sees-with-100-and-tensorflow"&gt;How to build a robot that “sees” with $100 and TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/pi_examples"&gt;pi_examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-23:raspberrypi-tensowflow-robot.html</guid><category>tools</category></item><item><title>用树莓派给家用电器加上智能（红外篇）</title><link>/raspberrypi-lirc.html</link><description>&lt;h1&gt;ideas&lt;/h1&gt;
&lt;p&gt;许多家电是红外控制的，与外界的交互通过一个红外遥控器,我们能否通过编程使其变成智能家居呢，好比我们想做这样一件事：&lt;code&gt;夏天傍晚下班前，检查室内温度，如果室温高于30摄氏度，则打开空调&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要做到上边这件事，我们未必需要购买最新的带app控制的智能空调，利用旧式空调也可以。空调由红外遥控器控制，如果我们能控制红外的收发,模拟发射这些控制信号，我们就可以hack这些旧家电，使其可编程，变成&lt;code&gt;智能家电&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;红外线控制&lt;/li&gt;
&lt;li&gt;微信控制&lt;/li&gt;
&lt;li&gt;自然语言控制（chatbot）&lt;/li&gt;
&lt;li&gt;blockly编程控制&lt;/li&gt;
&lt;li&gt;与其他传感器组合（温湿度）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;硬件环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;树莓派(我的当前环境是树莓派3,其他版本也可以)&lt;/li&gt;
&lt;li&gt;红外接收器/红外发射器（我用的是这款&lt;a href="http://ukonline2000.com/?p=296"&gt;红外线扩展板&lt;/a&gt;,能同时支持红外收发）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/LIRC"&gt;LIRC&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;LIRC是我们需要的软件.&lt;/p&gt;
&lt;p&gt;LIRC 是 Linux Infrared remote control的缩写，是linux系统下开源的软件包。从名字中可知，这个软件让你的Linux系统能够控制红外线信号。&lt;/p&gt;
&lt;p&gt;LIRC有个具有图形用户界面的前端，叫做KDELirc&lt;/p&gt;
&lt;p&gt;在使用LIRC之前建议了解一下&lt;a href="http://www.cnblogs.com/yulongchen/archive/2013/04/12/3017409.html"&gt;红外协议&lt;/a&gt;，这样有助于你理解交互过程和debug&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;sudo apt-get install lirc&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#sudo vim /boot/config.txt #在文件结尾添加
dtoverlay=lirc-rpi
gpio_in_pin=18
gpio_out_pin=17

#sudo vim /etc/lirc/hardware.conf  #编辑LRIC的配置文件
LIRCD_ARGS=&amp;quot;--uinput --listen&amp;quot;
DRIVER=&amp;quot;default&amp;quot;
DEVICE=&amp;quot;/dev/lirc0&amp;quot;
MODULES=&amp;quot;lirc_rpi&amp;quot;

# 重启生效
sudo /etc/init.d/lirc restart

# irrecord --list-namespace
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;录制电风扇&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 开始录制
irrecord -d /dev/lirc0 ~/lircd.conf #按照提示操作即可,录制完后会让你输入按键名

sudo cp ~/lircd.conf /etc/lirc/lircd.conf

#查看录制好可以使用的按键名
irsend LIST /home/pi/lircd.conf &amp;quot;&amp;quot;
irsend SEND_ONCE /home/pi/lircd.conf KEY_POWER
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;录制空调红外&lt;/h3&gt;
&lt;p&gt;空调遥控器这种带逻辑控制的比较麻烦.每次发射的都是含有温度、模式、制冷制热等一连串的指令，按照之前irrecord指令生成conf文件，行不通&lt;/p&gt;
&lt;p&gt;只能使用raw的原始码，记录也是通过mode2 命令实现&lt;/p&gt;
&lt;p&gt;先制作模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/lirc restart
irrecord  -f -d /dev/lirc0 ~/lircd.conf #制作模板
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;begin remote

  name  /home/pi/lircd.conf
  flags RAW_CODES
  eps            30
  aeps          100

  gap          19886

      begin raw_codes

          name KEY_OPEN
               90     102     331

      end raw_codes

end remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来开始录制&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mode2  -d /dev/lirc0 &amp;gt; /tmp/temp.code  &lt;span class="c1"&gt;# space 10969878 &lt;/span&gt;
cat /tmp/temp.code &lt;span class="p"&gt;|&lt;/span&gt; sed -n &lt;span class="s1"&gt;&amp;#39;2,$p&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -o  -E &lt;span class="s2"&gt;&amp;quot;[0-9]+&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;echo&lt;/span&gt;  &lt;span class="c1"&gt;# 移除第一行,之后把所有数字取出&lt;/span&gt;
&lt;span class="c1"&gt;# 把上述指令写入 ~/lircd.conf 的 KEY_OPEN里&lt;/span&gt;
&lt;span class="c1"&gt;# 值得注意的是 ~/lircd.conf文件里的空格十分重要&lt;/span&gt;

sudo cp ~/lircd.conf /etc/lirc/lircd.conf
sudo /etc/init.d/lirc restart
&lt;span class="c1"&gt;# irsend LIST /home/pi/lircd.conf &amp;quot;&amp;quot; #列出指令&lt;/span&gt;
irsend SEND_ONCE /home/pi/lircd.conf KEY_OPEN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我最后的~/lircd.conf内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;begin remote

  name  /home/pi/lircd.conf
  flags RAW_CODES
  eps            30
  aeps          100

  gap          19886

      begin raw_codes

          name KEY_CLOSE
               9075 4411 731 453 751 1580 730 476 729 477 731 1576 729 478 729 1579 729 460 747 477 729 477 729 476 730 1578 729 477 730 476 731 477 733 472 730 476 731 475 730 477 728 480 728 477 729 1578 731 477 727 477 731 475 730 478 728 477 730 476 730 1578 754 430 753 1577 735 471 730 477 752 1553 756 453 753 19884 756 1551 758 451 754 450 756 451 756 451 754 449 756 451 757 429 777 449 758 449 758 449 756 451 755 450 756 1550 757 428 779 451 755 451 755 450 757 450 755 450 757 428 779 449 757 448 760 447 758 449 757 449 756 451 756 450 756 449 756 1551 757 1550 757 451 756
          name KEY_OPEN
               9112 4390 724 459 747 1584 725 459 746 1582 727 1582 726 481 724 1583 726 482 729 478 745 459 726 481 745 1564 724 480 725 481 746 459 725 488 741 438 770 457 748 457 749 459 747 459 748 1559 748 436 773 455 750 457 748 459 748 457 750 458 747 1559 749 459 746 1558 750 457 749 458 748 1558 751 455 749 19889 748 1559 750 457 748 458 749 458 750 457 747 458 748 458 749 435 771 458 749 457 748 459 745 461 745 460 747 1561 726 481 729 455 769 458 725 482 725 481 724 483 724 481 726 482 745 460 725 482 725 482 722 482 726 482 725 481 724 480 724 1583 725 1582 727 1583 726


      end raw_codes

end remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我把开关机命名为KEY_OPEN/KEY_CLOSE(可以完全自定义)&lt;/p&gt;
&lt;p&gt;之后开关机的指令分别为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#开机
irsend SEND_ONCE /home/pi/lircd.conf KEY_OPEN
#关机
irsend SEND_ONCE /home/pi/lircd.conf KEY_CLOSE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试有效！搞定&lt;/p&gt;
&lt;p&gt;之后结合温度传感器或者微信之类的其他功能模块就可以完成丰富的智能控制了&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;配置文件中，KEY的名字有限制，BLOCKLY_KEY会报错 KEY_BLOCKLY就行&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/LIRC"&gt;LIRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mageelen.blog.163.com/blog/static/1769430102014382346166/"&gt;使用树莓派遥控空调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/yulongchen/archive/2013/04/12/3017409.html"&gt;红外协议之NEC协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/article-3782-1.html"&gt;使用树莓派红外控制空调和风扇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ukonline2000.com/?p=296"&gt;发布树莓派专用红外线扩展板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-17:raspberrypi-lirc.html</guid><category>tools</category></item><item><title>树莓派折腾笔记之系统安装与配置</title><link>/raspberrypi-install-and-config.html</link><description>&lt;p&gt;最近我的树莓派被用于作原型机了&lt;/p&gt;
&lt;p&gt;只好重新用新的板子重新配置&lt;/p&gt;
&lt;h1&gt;下载系统镜像&lt;/h1&gt;
&lt;p&gt;镜像&lt;a href="https://www.raspberrypi.org/downloads/"&gt;下载地址&lt;/a&gt;,这里有许多可选镜像,我用的是&lt;a href="https://www.raspberrypi.org/downloads/raspbian/"&gt;raspbian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前是在windows下用win32diskimager往sd卡里刷系统的&lt;/p&gt;
&lt;p&gt;这次准备用dd(方便批量操作)，在mac下.参考这篇文章：&lt;a href="https://github.com/ccforward/cc/issues/25"&gt;Mac下给SD卡安装树莓派Raspbian系统&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;安装系统&lt;/h1&gt;
&lt;p&gt;这里我们讨论两种情况，新买的sd卡和已经安装过系统的sd卡（重刷）&lt;/p&gt;
&lt;h3&gt;新的sd卡&lt;/h3&gt;
&lt;p&gt;一般新买的卡都已经格式化好了，这是最简单的情况,  按照&lt;a href="https://github.com/ccforward/cc/issues/25"&gt;Mac下给SD卡安装树莓派Raspbian系统&lt;/a&gt;的做法就行&lt;/p&gt;
&lt;p&gt;这里复述一下核心内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df &lt;span class="c1"&gt;# 查看当前已经挂载的卷&lt;/span&gt;
&lt;span class="c1"&gt;# 假设设备文件为：/dev/disk1s1 ,（ 通过查看设备名判断）&lt;/span&gt;
diskutil unmount /dev/disk1s1 &lt;span class="c1"&gt;#卸载&lt;/span&gt;
diskutil list &lt;span class="c1"&gt;# 确认设备  (通过存储大小)&lt;/span&gt;
&lt;span class="c1"&gt;# 安装系统&lt;/span&gt;
dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4m &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pi.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/rdisk1 &lt;span class="c1"&gt;#我的速度大概是17m/s&lt;/span&gt;
diskutil unmountDisk /dev/disk1  &lt;span class="c1"&gt;#卸载设备&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此，系统就刷好了&lt;/p&gt;
&lt;h3&gt;重刷装有系统的sd卡&lt;/h3&gt;
&lt;p&gt;如果是重刷装有系统的sd卡,我们需要先把SD卡还原成初始状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载&lt;a href="http://www.alexpage.de/download/usbit/bootsector.img"&gt;bootsector.img&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dd bs=4m if=./bootsector.img of=/dev/rdisk1 # 假设设备为disk1 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后格式化sd卡(我把它格式化为MS-DOS(FAT))，至此你就可以把它当做新卡，用处理新卡的方式安装系统了&lt;/p&gt;
&lt;h1&gt;登录系统&lt;/h1&gt;
&lt;p&gt;我只买了树莓派，没有买高清转接头之类的东西，没打算把树莓派连到屏幕。那么我们如何登录系统，进行操作呢&lt;/p&gt;
&lt;p&gt;首先使用网络连接树莓派网口，然后找个扫描ip的软件,我用的是fing（mac和iphone都有），手机/电脑只要和树莓派在同个网络里，就可以找到它（通过设备名） （ps: brew cask install fing）&lt;/p&gt;
&lt;p&gt;然后ssh登录即可，用户名和密码分别是：pi/raspberry&lt;/p&gt;
&lt;p&gt;树莓派3代自带无线网卡，我们把无线网卡连上wifi，之后就不需要，细节下文再说&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;p&gt;输入&lt;code&gt;sudo raspi-config&lt;/code&gt;开始设置，相关设置可以看说明&lt;/p&gt;
&lt;h2&gt;#Expand Filesystem&lt;/h2&gt;
&lt;p&gt;扩展 SD 卡上可用的空间, 否则你会觉得怎么可用空间这么小&lt;/p&gt;
&lt;h3&gt;配置&lt;a href="https://zh.wikipedia.org/zh/VNC"&gt;VNC&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;VNC借由网络，可发送键盘与鼠标的动作及即时的屏幕画面&lt;/p&gt;
&lt;p&gt;VNC与操作系统无关，因此可跨平台使用&lt;/p&gt;
&lt;p&gt;我在mac下使用RealVNC&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install tightvncserver &lt;span class="c1"&gt;# 安装&lt;/span&gt;
vncserver :1 &lt;span class="c1"&gt;# 启用 ，之后在 vnc client里输入 ip:1即可进入图形界面&lt;/span&gt;
&lt;span class="c1"&gt;# vncpasswd # 修改密码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;换国内源&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#sudo vi /etc/apt/sources.list ,使内容变为&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.aliyun.com/raspbian/raspbian/&lt;/span&gt; &lt;span class="kp"&gt;jessie&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt;
&lt;span class="k"&gt;deb-src&lt;/span&gt; &lt;span class="s"&gt;http://mirrors.aliyun.com/raspbian/raspbian/&lt;/span&gt; &lt;span class="kp"&gt;jessie&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改hostname&lt;/h3&gt;
&lt;p&gt;sudo vim /etc/hostname&lt;/p&gt;
&lt;h3&gt;无线网络&lt;/h3&gt;
&lt;p&gt;如果你直接在命令行里配置可以参考:&lt;a href="http://www.jianshu.com/p/b42e8d3df449"&gt;树莓派 Raspberry Pi 设置无线上网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改配置文件:&lt;code&gt;/etc/network/interfaces&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto wlan0
iface wlan0 inet dhcp
wpa-conf /etc/wpa.conf
iface default inet dhcp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后在&lt;code&gt;/etc/wpa.conf&lt;/code&gt;里加上你的无线热点(可以添加多个)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network={
        ssid=&amp;quot;xxx&amp;quot;
        key_mgmt=WPA-PSK
        psk=&amp;quot;xxx&amp;quot;
        id_str=&amp;quot;myiphone&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;无线网卡的控制命令为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ifup wlan0 &lt;span class="c1"&gt;#启用&lt;/span&gt;
sudo ufdown wlan0 &lt;span class="c1"&gt;#关闭&lt;/span&gt;
sudo service network-manager restart &lt;span class="c1"&gt;#重启&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更直观的配置方式可以使用VNC client进入图形环境里&lt;/p&gt;
&lt;h3&gt;树莓派作为无线AP&lt;/h3&gt;
&lt;p&gt;使用&lt;a href="https://github.com/oblique/create_ap"&gt;create_ap&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/oblique/create_ap
cd create_ap
sudo make install
#安装依赖
sudo apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq  #dnsmasq 是dns服务器
sudo create_ap wlan0 eth0 wwjpi3 wwjpipass --no-virt # https://github.com/oblique/create_ap/issues/185
# 加到supervisor里 #/usr/bin/create_ap  wlan0 eth0 wwjpi3 wwjpipass --no-virt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输煤派的地址为：&lt;code&gt;192.168.12.1&lt;/code&gt; , 路由器的地址为 &lt;code&gt;192.168.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进一步的发挥空间，我们可以把它当做一个钓鱼热点(已经运行了53端口DNS服务器)&lt;/p&gt;
&lt;h4&gt;DHCP服务&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dnsmasq
# vim /etc/dnsmasq.conf
interface=wlan0
bind-interfaces
address=/#/192.168.12.1  #将对所有网站的访问重定向到本机

sudo service dnsmasq restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;蓝牙&lt;/h3&gt;
&lt;p&gt;树莓派3自带蓝牙&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/bluetooth status &lt;span class="c1"&gt;# 查看蓝牙状态&lt;/span&gt;
sudo bluetoothctl &lt;span class="c1"&gt;#进入蓝牙程序,替代了原来的bluez-simple-agent&lt;/span&gt;
&lt;span class="c1"&gt;# 之后按照步骤连接 &lt;/span&gt;
&lt;span class="c1"&gt;# 试一首歌&lt;/span&gt;
apt-get install mpg123
mpg123 mp3_uri
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/20713396"&gt;树莓派3 model:B 连接蓝牙设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embbnux.com/2016/04/10/raspberry_pi_3_wifi_and_bluetooth_setting_on_console/"&gt;树莓派3命令行配置wifi无线连接和蓝牙连接&lt;/a&gt;：rpi3蓝牙连音箱比较麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;音频相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;play&lt;/li&gt;
&lt;li&gt;mplayer/mpg123&lt;/li&gt;
&lt;li&gt;sox 录音&lt;/li&gt;
&lt;li&gt;alsamixer 调节音量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sox -d /tmp/recording.wav
play /tmp/recording.wav
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;其它&lt;/h3&gt;
&lt;h4&gt;我的编程环境&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install vim git tmux ack-grep lynx

&lt;span class="c1"&gt;# 我的vim配置文件 &lt;/span&gt;
wget https://raw.githubusercontent.com/wwj718/wwj718-vim/master/wwj718_vim_vimrc -O ~/.vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;jupyter lab （开发环境）&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pip --upgrade -i http://pypi.douban.com/simple
sudo apt-get install python-dev

&lt;span class="c1"&gt;# jupyter&lt;/span&gt;
sudo pip install jupyter  -i http://pypi.douban.com/simple --trusted-host pypi.douban.com
sudo pip install jupyterlab  -i http://pypi.douban.com/simple --trusted-host pypi.douban.com

sudo jupyter serverextension &lt;span class="nb"&gt;enable&lt;/span&gt; --py jupyterlab --sys-prefix
&lt;span class="c1"&gt;# jupyter lab --notebook-dir=&amp;quot;.&amp;quot; --no-browser --port 5000 --ip=0.0.0.0 &lt;/span&gt;
&lt;span class="c1"&gt;# vim ~/.bashrc&lt;/span&gt;
&lt;span class="c1"&gt;# alias jupyterlab=&amp;quot;jupyter lab --notebook-dir=&amp;quot;.&amp;quot; --no-browser --port 8888 --ip=0.0.0.0&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# jupyter notebook --no-browser --port 5000 --ip=0.0.0.0 &lt;/span&gt;
&lt;span class="c1"&gt;# 属于jupyter作为开发环境&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="https://github.com/rupa/z"&gt;z&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/rupa/z/master/z.sh -O ~/z.sh
&lt;span class="c1"&gt;# 在.bashrc添加 ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; . ~/z.sh &amp;gt; ~/.bashrc
&lt;span class="c1"&gt;# souce ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;GPIO相关&lt;/h1&gt;
&lt;h3&gt;I2C&lt;/h3&gt;
&lt;p&gt;如果要用Adafruit_LED_Backpack,需要开启I2C&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-smbus
sudo apt-get install i2c-tools
sudo raspi-config &lt;span class="c1"&gt;#advanced options&lt;/span&gt;
sudo vim  /etc/modules &lt;span class="c1"&gt;# add i2c-bcm2708 and i2c-dev &lt;/span&gt;
&lt;span class="c1"&gt;# reboot&lt;/span&gt;
&lt;span class="c1"&gt;# test&lt;/span&gt;
sudo i2cdetect -y 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;系统管理与监控&lt;/h1&gt;
&lt;h3&gt;Linux Dash&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A beautiful web dashboard for Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/afaqurk/linux-dash
&lt;span class="nb"&gt;cd&lt;/span&gt; linux-dash
sudo python https://github.com/afaqurk/linux-dash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认80端口&lt;/p&gt;
&lt;h3&gt;supervisor&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Supervisor process control system for UNIX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#切换到sudo用户&lt;/span&gt;
pip install supervisor
&lt;span class="c1"&gt;#echo_supervisord_conf &amp;gt; /etc/supervisord.conf&lt;/span&gt;
mkdir  /etc/supervisor
echo_supervisord_conf &amp;gt; /etc/supervisor/supervisord.conf &lt;span class="c1"&gt;#这个配置Ajenti才能管理&lt;/span&gt;
mkdir /etc/supervisord.conf.d
&lt;span class="c1"&gt;# 修改配置文件,include区段修改为 files = /etc/supervisord.conf.d/*.conf&lt;/span&gt;
&lt;span class="c1"&gt;# 开机自启 . 往/etc/rc.local加入/usr/local/bin/supervisord&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;supervisor的web管理端口为9001，需要开启&lt;/p&gt;
&lt;p&gt;添加新的进程配置，可以使用下边介绍的Ajenti来做, 配置信息会被直接写入：/etc/supervisor/supervisord.conf&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/yudai/gotty"&gt;gotty&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;gotty可以把terminal分享到web,默认端口是8080&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 下载https://github.com/yudai/gotty/releases&lt;/span&gt;
gotty -w vim &lt;span class="c1"&gt;#把vim已编辑方式分享出来,分享vim就够了，vim可以切换到bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们把8080端口用ngrok分享出来（ngrok用supervisor管理），实际就是一个后门，用作开发调试十分方便&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ajenti/ajenti"&gt;Ajenti&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ajenti可以让你很简单地配置不同的常规服务程序，如Apache/nginx、Samba、BIND、Squid、MySQL、cron、防火墙等等&lt;/p&gt;
&lt;p&gt;十分适合非技术用户配置系统应用，可以看做服务器管理面板&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://repo.ajenti.org/debian/key -O- &lt;span class="p"&gt;|&lt;/span&gt; apt-key add -
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://repo.ajenti.org/debian main main debian&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/sources.list
sudo apt-get install ajenti
sudo apt-get install build-essential python-pip python-dev python-lxml libffi-dev libssl-dev libjpeg-dev libpng-dev uuid-dev python-dbus
sudo pip install ajenti-panel ajenti.plugin.dashboard ajenti.plugin.settings ajenti.plugin.plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认端口8000，默认登录信息为：&lt;code&gt;root:admin&lt;/code&gt;，之后修改密码之类的都在控制面板里边做&lt;/p&gt;
&lt;p&gt;配置文件为:&lt;code&gt;/etc/ajenti/config.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认开机自启&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ajenti69406213.png" /&gt;&lt;/p&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;p&gt;09-23的版本坑多&lt;/p&gt;
&lt;h3&gt;zip包mac下无法解压&lt;/h3&gt;
&lt;p&gt;在linux和window下都行&lt;/p&gt;
&lt;h3&gt;ssh端口拒绝&lt;/h3&gt;
&lt;p&gt;ip能ping通，ssh端口关闭，怀疑是ssh server没有开启&lt;/p&gt;
&lt;p&gt;nmap -p 22 xxx 测试关闭，fuck&lt;/p&gt;
&lt;p&gt;建议下载&lt;a href="https://downloads.raspberrypi.org/raspbian/images/raspbian-2016-05-31/2016-05-27-raspbian-jessie.zip"&gt;5-27版本&lt;/a&gt;,所有版本在这里：&lt;a href="https://downloads.raspberrypi.org/"&gt;downloads.raspberrypi.org&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.shumeipai.net/thread-1263-1-1.html?_dsign=55be35fa"&gt;用镜像写入工具将安装过树莓派系统的SD卡还原卡&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-11:raspberrypi-install-and-config.html</guid><category>tools</category></item><item><title>树莓派守护者!</title><link>/pi-guardian.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_swzbe54be0b.png" /&gt;&lt;/p&gt;
&lt;h1&gt;老虎机与行窃少年&lt;/h1&gt;
&lt;p&gt;那年我大概十岁。&lt;/p&gt;
&lt;p&gt;家门口小店入驻了一台老虎机,每天放学回家路过小店，机器周围，围观者众。&lt;/p&gt;
&lt;p&gt;晚饭后喜欢跑到小店，看人们下注、击键、大笑、咒骂、跺脚，我喜欢老虎机侧边的位置，从这里透过机器的缝隙，看得到里边的电路板，上边数字闪烁，毫无规律&lt;/p&gt;
&lt;p&gt;此后许久，我对老虎机的兴趣一直很浓厚，多年之后，在大学图书馆的一角，饶有兴致地读到老虎机算法作者的书籍，他谈到你不可能赢过机器，唯一的获胜机会就是赢取你的同伴：你将机器视为中介，根据前边参与者的胜负，决定你的策略，这是你唯一获胜的可能&lt;/p&gt;
&lt;p&gt;某天一早，小店门口停着警车，热闹非凡，凑热闹这种事十岁小孩再感兴趣不过了。挤入小店，看到4个少年垂首丧气，双手被扣,十五六岁年纪. 是店里老虎机坐上常客。&lt;/p&gt;
&lt;p&gt;好事者纷纷问缘由，老板春风满面, 说起这群少年，如何三番五次，入室盗窃，手法精巧，行事谨慎. &lt;/p&gt;
&lt;p&gt;人们又问，你既说他们机智，你又如何逮到他们。&lt;/p&gt;
&lt;p&gt;老板等的便是这句，登时状如登上领奖台做获奖感言. 老板说自己早便发现他们入室盗窃，为了证据确凿，设计了一套精巧的陷阱：在柜台入口，近地面处系一根绳子，绳子一直连到老板睡觉的卧室，在卧室里系上易拉罐。少年们再次登门，触发开关，弄倒老板卧室的易拉罐，老板醒后，有备而来，少年们毫无知觉，来个瓮中捉鳖&lt;/p&gt;
&lt;p&gt;末了老板感叹一句这等聪明，用到学习上得多出色&lt;/p&gt;
&lt;p&gt;人们纷纷赞叹&lt;/p&gt;
&lt;h1&gt;基于树莓派的报警器&lt;/h1&gt;
&lt;p&gt;故事里，有一处不够优美:报警器竟是绳子做的！如果少年们更警觉些，看到绳子，或是踩到之后便逃离，老板恐怕要竹篮打水一场空。&lt;/p&gt;
&lt;p&gt;我们可以基于树莓派来重构报警器&lt;/p&gt;
&lt;h3&gt;思路&lt;/h3&gt;
&lt;p&gt;将超声波传感器（或者红外线）放在柜台下边，当有人路过时，树莓派给老板手机发送一条短信（或邮件），这个隐形的卫士几乎没有破绽&lt;/p&gt;
&lt;h3&gt;实现（硬件）&lt;/h3&gt;
&lt;p&gt;硬件部分，我们使用移动电源为树莓派供电，便于藏匿（移动电源可用大约一周）&lt;/p&gt;
&lt;p&gt;接线图如下(只需要关注超声波传感器)：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/pi_fritzing.png" /&gt;&lt;/p&gt;
&lt;h3&gt;实现（软件）&lt;/h3&gt;
&lt;p&gt;软件部分，我已经把源码放到这里了：&lt;a href="https://github.com/wwj718/raspberrypi_lab"&gt;raspberrypi_lab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个项目的核心是，利用超声波传感器测距，当传感器前边有物体时，距离将发生变化，于是触发其他函数（发邮件）即可,核心源码为:&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/echo_main.py"&gt;echo_main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想发送邮件，使用python的smtp库即可，如果你想发送短信，可以使用Twilio的api:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+86137xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+166xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wake up!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码跑起来后，把它放柜台下，有人路过时，即可悄无声息地发送短信报警!&lt;/p&gt;
&lt;h1&gt;守护你的私密空间&lt;/h1&gt;
&lt;p&gt;我们来继续发挥&lt;code&gt;守护者&lt;/code&gt;这个概念，这次的目的是为了保护在房间里不好好学习，爱瞎折腾的你&lt;/p&gt;
&lt;p&gt;想想你在自己房间里看哆啦A梦(当然你也可以看些别的(羞射脸))&lt;/p&gt;
&lt;p&gt;班主任正在你家客厅家访。搞得你看动画片都不踏实,深怕有人破门而入&lt;/p&gt;
&lt;p&gt;让我们发挥geek精神，把树莓派打造为私密空间守护者。这个守护者的职责是：当有人进入房间时，在led矩阵上亮起笑脸以示欢迎，同时用蜂鸣器演奏一首歌吸引注意(我用了葫芦娃，你可以用老师窗前之类的 ^_^)&lt;/p&gt;
&lt;p&gt;led矩阵的源码如下：&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/smile.py"&gt;smile.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蜂鸣器部分的源码为:&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/beep.py"&gt;beep.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当门被打开时，超声波传感器将感觉到障碍物的出现，这是触发笑脸和音乐，最有意思的是下一步&lt;/p&gt;
&lt;h3&gt;切换电脑屏幕&lt;/h3&gt;
&lt;p&gt;你要知道你这个时候正看哆啦A梦看得兴起,你可能沉迷其中，听到音乐也来不及切换电脑屏幕，上班这段动作是典型的&lt;code&gt;触发&lt;/code&gt;模式，适合让机器来做，把它自动化！&lt;/p&gt;
&lt;p&gt;我们在电脑上跑起来一个进程，这个进程是个web服务，可以被调用，当被调用时（来自树莓派的http请求），我们的电脑屏幕将自动切换到iBook阅读界面，切换速度在毫秒级别，老师/家长一进门，便看到你在津津有味地看书，因为你还没从动画片里缓过神，肯定盯住屏幕的书。老师欣然离去&lt;/p&gt;
&lt;p&gt;这是打开之前你的屏幕：
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_guardian083cd92b.png" /&gt;&lt;/p&gt;
&lt;p&gt;哦不对，拿错图片了：
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_guardiancea87d3d.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是房门打开之后你的屏幕：
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi_guardian3aae2aad.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个web服务的源码在这里：&lt;a href="https://github.com/wwj718/raspberrypi_lab/blob/master/pc_server.py"&gt;pc_server&lt;/a&gt;, 这个功能涉及代码很短，只有几行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/study&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;study&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to study&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Applications/iBooks.app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;study&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有了树莓派守护者，你就可以不必反锁房门，在你的电脑上做任何事儿, 不用担心被察觉啦&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid>tag:,2016-10-07:pi-guardian.html</guid><category>技术</category></item><item><title>在树莓派上搭建代码托管服务器</title><link>/pi-gogs-install.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi3e0c84b0.png" /&gt;&lt;/p&gt;
&lt;p&gt;最近公司有个好玩的项目，准备采用树莓派/arduino作为原型机，恰好我的玩具箱里两者都有&lt;/p&gt;
&lt;p&gt;擦擦尘土，把树莓派带到公司&lt;/p&gt;
&lt;p&gt;上周把arduino借给老板了，各种传感器也在其中，他出差没回，我的树莓派没有传感器可用，只要先折腾些软件应用&lt;/p&gt;
&lt;p&gt;公司的代码托管服务器是我之前搭建的（用了&lt;a href="https://github.com/gogits/gogs"&gt;gogs&lt;/a&gt;），我们部门搬到楼下，连接代码托管服务器需要vpn（网络的坑），速度不快，索性决定，在下边也搭建一个代码托管服务器。&lt;/p&gt;
&lt;p&gt;（考虑到安全，我还是决定自己折腾着玩好了，不过这个场景确实是挺实际的场景）&lt;/p&gt;
&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;这篇文章主要是想在树莓派上练习一下进程管理和开机自启&lt;/p&gt;
&lt;h1&gt;树莓派的入门&lt;/h1&gt;
&lt;p&gt;这类文章网上好多，我自己也有笔记，等有空再整理好了。&lt;/p&gt;
&lt;p&gt;对于装好系统的树莓派（我用的是Raspbian），你就把它当做一个普通的linux便可，没有太多特别的地方（习惯使用Debian/Ubuntu的话，用起来很轻松）&lt;/p&gt;
&lt;h1&gt;安装gogs&lt;/h1&gt;
&lt;h3&gt;目录结构&lt;/h3&gt;
&lt;p&gt;我在HOME目录下建了个文件夹&lt;code&gt;mylab&lt;/code&gt;，用以做实验，gogs也放在这里&lt;/p&gt;
&lt;p&gt;下载二进制安装包：&lt;code&gt;https://dl.gogs.io/gogs_v0.9.60_raspi2.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解压：&lt;code&gt;unzip gogs_v0.9.60_raspi2.zip&lt;/code&gt;,于是获得gogs的解压目录：&lt;code&gt;/home/pi/mylab/gogs&lt;/code&gt; （我的操作用户是默认的pi）&lt;/p&gt;
&lt;h3&gt;初始化&lt;/h3&gt;
&lt;p&gt;进入&lt;code&gt;/home/pi/mylab/gogs&lt;/code&gt;目录，将gogs跑起来:&lt;code&gt;./gogs web&lt;/code&gt;,默认跑在3000端口，打开你的&lt;code&gt;ip:3000&lt;/code&gt;,填好内容，就可以初始化了，如果使用sqlite就不需要安装数据库&lt;/p&gt;
&lt;p&gt;初始化完毕我们把&lt;code&gt;./gogs web&lt;/code&gt;断掉（ctrl-c），下边演示使用使用Supervisor来管理进程&lt;/p&gt;
&lt;p&gt;关于gogs的更多细节可以参考我之前的笔记&lt;a href="http://blog.just4fun.site/gogs-install.html"&gt;搭建 gogs 代码托管服务器&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;使用Supervisor来管理gogs进程&lt;/h1&gt;
&lt;p&gt;关于supervisor的介绍和细节何以参考我此前的笔记：&lt;a href="http://blog.just4fun.site/process-control-system-supervisor.html"&gt;使用Supervisor来管理进程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;sudo pip install supervisor #安装supervisor&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;切换到root：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo_supervisord_conf &amp;gt; /etc/supervisord.conf
mkdir /etc/supervisord.conf.d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;code&gt;/etc/supervisord.conf&lt;/code&gt;中的include部分修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[include]&lt;/span&gt;
&lt;span class="na"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/etc/supervisord.conf.d/*.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建&lt;code&gt;/etc/supervisord.conf.d/gogs.conf&lt;/code&gt;,内容如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:gogs]&lt;/span&gt;

&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pi&lt;/span&gt;
&lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/pi/mylab/gogs&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/pi/mylab/gogs/gogs web&lt;/span&gt;
&lt;span class="na"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;HOME=&amp;quot;/home/pi&amp;quot;, USER=&amp;quot;pi&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;startsecs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/gogs/stdout.log&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile_backups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stdout_capture_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/gogs/stderr.log&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile_backups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stderr_capture_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1MB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以使用supervisor来管理gogs了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/local/bin/supervisord 
supervisorctl restart gogs
supervisorctl status
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;开机自启&lt;/h1&gt;
&lt;p&gt;简单的方法是往/etc/rc.local加入/usr/local/bin/supervisord&lt;/p&gt;
&lt;p&gt;重启机器，一切完备！&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/pi79409598.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-29:pi-gogs-install.html</guid><category>技术</category></item><item><title>用微信控制树莓派</title><link>/pi-wechat.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/wechat_pid9f17e53.png" /&gt;&lt;/p&gt;
&lt;h1&gt;源码&lt;/h1&gt;
&lt;p&gt;老习惯，先抛源码，老司机可以直接读&lt;a href="https://github.com/wwj718/raspberrypi_api"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;动机&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;近期公司有一个有趣的项目，希望用乐高玩具式的可视化编程工具来操控硬件(在网页中)&lt;ul&gt;
&lt;li&gt;所以想把硬件的响应包装为服务&lt;ul&gt;
&lt;li&gt;于是得到可以用微信操作树莓派这个副产品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;树莓派操控硬件需要有root权限，作为服务之后则没有限制&lt;/li&gt;
&lt;li&gt;解耦&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;想法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;将微信视为控制界面（interface）, 获得联网能力（远程操作）&lt;/li&gt;
&lt;li&gt;将树莓派视为连接代码和物理世界的介质&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;架构设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;初期效用flask作为web框架&lt;ul&gt;
&lt;li&gt;使用flask-sockets提供websocket服务:&lt;a href="https://github.com/wwj718/raspberrypi_api/blob/master/led_websocket.py"&gt;led_websocket.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把led_server视为下位机，api视为指令集&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;树莓派与GPIO&lt;/h1&gt;
&lt;p&gt;关于如何使用树莓派的引脚操作外部设备，推荐阅读mango同学的&lt;a href="http://blog.mangolovecarrot.net/2015/04/20/raspi-study01/"&gt;树莓派GPIO入门01-使用GPIO接口控制发光二极管闪烁&lt;/a&gt;，写得十分清楚&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;RPi.GPIO&lt;/code&gt;库，我们几乎不需要硬件的知识，就能轻易地用python代码操控硬件&lt;/p&gt;
&lt;h1&gt;接口定义&lt;/h1&gt;
&lt;p&gt;我们接下来led为例,演示如何将硬件功能暴露为api,可通过http请求，操控硬件（暂不考虑操作权限/安全问题，如果你愿意可以简单定义一个秘钥：&lt;code&gt;?key=xx&lt;/code&gt;），对细节感情兴趣的小伙伴可以跟进我的&lt;a href="https://github.com/wwj718/raspberrypi_api/"&gt;源码库&lt;/a&gt;，我有计划把它做得完备。&lt;/p&gt;
&lt;p&gt;目前我们定义三个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点亮led灯&lt;/li&gt;
&lt;li&gt;熄灭led灯&lt;/li&gt;
&lt;li&gt;使led灯闪烁几次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来使用flask将其暴露出去，成为web api&lt;/p&gt;
&lt;p&gt;代码读起来很容易:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 点亮led灯&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/led_up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led_up&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 让GPIO14输出高电平（LED灯亮）&lt;/span&gt;
    &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 熄灭led灯&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/led_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led_down&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 让GPIO14输出低电平（LED灯灭）&lt;/span&gt;
    &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 使led灯闪烁几次&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/led_up_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led_up_down&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 持续一段时间&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完整的源码参考&lt;a href="https://github.com/wwj718/raspberrypi_api/edit/master/led_server.py"&gt;led_server.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在我们可以把服务跑起来了：&lt;code&gt;sudo python led_server.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ps： websocket版本参考这里：&lt;a href="https://github.com/wwj718/raspberrypi_api/blob/master/led_websocket.py"&gt;led_websocket.py&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;测试接口&lt;/h1&gt;
&lt;p&gt;我的树莓派当前ip为：192.168.0.106&lt;/p&gt;
&lt;p&gt;我们对这些api进行测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点亮红灯： curl 192.168.0.106/led_up&lt;/li&gt;
&lt;li&gt;熄灭红灯： curl 192.168.0.106/led_down&lt;/li&gt;
&lt;li&gt;闪啊闪 ： curl 192.168.0.106/led_up_down&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你也可以在浏览器里控制这些灯（使用js）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;xmlhttp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;xmlhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://192.168.0.106/led_up_down&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//闪烁&lt;/span&gt;
&lt;span class="nx"&gt;xmlhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此一来我们可以在浏览器里操控硬件了&lt;/p&gt;
&lt;h1&gt;对接微信&lt;/h1&gt;
&lt;p&gt;对接微信这步很简单,如果你读过我之前的文章：&lt;a href="http://blog.just4fun.site/create-wechat-bot.html"&gt;把聊天机器人接入微信&lt;/a&gt;，直接看源码就好了。没读过前文也没关系，代码很好理解，我把核心部分列下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wxbot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WXBot&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;led_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:5000/&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWXBot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WXBot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;正在{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg_by_uid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led_server&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;
        &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;完成{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg_by_uid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_msg_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;msg_type_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#payload={&amp;quot;user_input&amp;quot;:user_input}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;关&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;led_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;开&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;led_up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;闪&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;led_up_down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;源码在这里：&lt;a href="https://github.com/wwj718/raspberrypi_api/blob/master/wechat_pi.py"&gt;wechat_pi.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跑起来就好：&lt;code&gt;python wechat_pi.py&lt;/code&gt;,由于需要微信扫码，所以先把你的树莓派连到屏幕上（使用图形界面），我使用VNC，之后有空把二维码弄到命令行里&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wwj718/gif_bed/master/ledf96a0f7d.png" /&gt;&lt;/p&gt;
&lt;h1&gt;脑洞&lt;/h1&gt;
&lt;p&gt;因为微信能在广域网中使用，所以你可以在任何能联网的地方控制树莓派了，进行远程控制，我最近的一个脑洞是在下班路上用微信给树莓派发一个&lt;code&gt;打开空调&lt;/code&gt;的消息，就可以提前打开空调啦&lt;/p&gt;
&lt;p&gt;原理也很简单使用红外接收器学习空调遥控器的指令集（目前只要开关机的指令），然后使用红外发射器伪造成遥控器控制空调。最后对接到微信即可&lt;/p&gt;
&lt;p&gt;目前采集红外信号部分已经完成了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid>tag:,2016-08-29:pi-wechat.html</guid><category>技术</category></item><item><title>搭建 gogs 代码托管服务器</title><link>/gogs-install.html</link><description>&lt;p&gt;前头写到搭建好了gitlab，不过没有找到汉化的方法，而且看去界面蛮繁琐的（针对没有使用github的同学而言）。为了降低大家入门门槛，决定使用gogs来搭建代码托管服务器。&lt;/p&gt;
&lt;h1&gt;gogs&lt;/h1&gt;
&lt;p&gt;github上的star截止至15.08.03，已经超过8k。自助安装极其方便，有各个平台的二进制文件，甚至可以轻易搭建在树莓派上&lt;/p&gt;
&lt;h1&gt;install&lt;/h1&gt;
&lt;h2&gt;安装mysql&lt;/h2&gt;
&lt;p&gt;你也可以不安装任何数据库，默认会使用sqlite&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入mysql，创建好数据库：&lt;code&gt;CREATE DATABASE gogs;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;安装gogs&lt;/h2&gt;
&lt;p&gt;采用二进制安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://gogs.dn.qbox.me/gogs_v0.6.3_linux_amd64.zip
unzip gogs_v0.6.3_linux_amd64.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;run it&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x gogs
./gogs web
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跑起来后进入到一个安装配置页面,邮件服务器的配置需要注意一下端口号，举个栗子：&lt;code&gt;smtp.qq.com:25&lt;/code&gt;.此外注意一下当出现&lt;code&gt;运行系统用户非当前用户&lt;/code&gt;错误是，在配置里填上你运行&lt;code&gt;./gogs web&lt;/code&gt;对应的用户&lt;/p&gt;
&lt;p&gt;如果需要修改配置文件，只要编辑gogs目录下的:&lt;code&gt;custom/conf/app.ini&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;整个过程极其建议&lt;/p&gt;
&lt;p&gt;ps:管理员可以不设置，第一个注册的用户将被认为是管理员&lt;/p&gt;
&lt;p&gt;如果要reinstall，只要把data和custom目录删除即可&lt;/p&gt;
&lt;h2&gt;备份&lt;/h2&gt;
&lt;p&gt;默认情况下，代码仓库在&lt;code&gt;~/gogs-repositories&lt;/code&gt;下，备份的话除了备份数据库(gogs/data)，也注意备份这个目录，推荐使用backup，我在此前的一篇博客里有提到:&lt;a href="http://wwj718.github.io/use-backup-for-edx.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;backup的安装非常蛋疼，在ruby1.9中各种出错，还是使用rsync好了&lt;/p&gt;
&lt;h3&gt;使用rsync同步数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;配置好ssh免登陆&lt;ul&gt;
&lt;li&gt;ssh-keygen -t dsa&lt;/li&gt;
&lt;li&gt;sudo cp -R .ssh /root/&lt;/li&gt;
&lt;li&gt;ssh-copy-id -i .ssh/id_dsa.pub xx@backup_host&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本地推送到远程：&lt;code&gt;/usr/bin/rsync -avH  /home/xx/gogs-repositories xx@backup_host:~/backup/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;备份mysql数据    &lt;ul&gt;
&lt;li&gt;/usr/bin/mysqldump -uroot -pxxx gogs &amp;gt; /tmp/gogs.sql  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用cron写定时任务&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00 01 * * * /usr/bin/rsync xxx&lt;/code&gt; （每天凌晨1点同步数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用Supervisor管理进程&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="http://blog.just4fun.site/process-control-system-supervisor.html"&gt;使用Supervisor来管理进程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/etc/supervisord.conf.d/&lt;/code&gt;创建&lt;code&gt;gogs.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[program:gogs]

user=wwj
directory=/home/wwj/gogs/gogs
command=/home/wwj/gogs/gogs/gogs web
environment = HOME=&amp;quot;/home/wwj&amp;quot;, USER=&amp;quot;wwj&amp;quot;
autostart=true
autorestart=true
startsecs=10
stdout_logfile=/var/log/gogs/stdout.log
stdout_logfile_maxbytes=1MB
stdout_logfile_backups=10
stdout_capture_maxbytes=1MB
stderr_logfile=/var/log/gogs/stderr.log
stderr_logfile_maxbytes=1MB
stderr_logfile_backups=10
stderr_capture_maxbytes=1MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;supervisorctl  restart gogs&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>tag:,2015-08-03:gogs-install.html</guid><category>技术</category></item></channel></rss>