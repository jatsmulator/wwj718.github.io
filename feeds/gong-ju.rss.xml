<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>writing for time</title><link>/</link><description></description><lastBuildDate>Sat, 30 Jun 2018 00:00:00 +0000</lastBuildDate><item><title>Screenly--用树莓派让任何屏幕变为可编程的数字标牌</title><link>/screenly-rpi.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/screenly_6bf7ab10.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对计算机的访问应该是完全不受限制的。任何人都有动手尝试的权利. 黑客们相信，通过将东西拆开，了解它们的工作原理，并根据这种理解创造新奇的甚至更有趣的东西，可以学习到关于系统的重要知识。他们痛恨一切试图阻止他们这么做的人、物理障碍或者法律。  --《黑客: 计算机革命的英雄》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;关于screenly&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.screenly.io/"&gt;screenly&lt;/a&gt;是个很酷的项目，它让制作数字标牌（&lt;a href="https://en.wikipedia.org/wiki/Digital_signage"&gt;Digital signage&lt;/a&gt;）变得简单，并且它推出了开源版本！在我们开始介绍screenly之前，我们先来了解一下数字标牌（&lt;a href="https://en.wikipedia.org/wiki/Digital_signage"&gt;Digital signage&lt;/a&gt;）是什么。&lt;/p&gt;
&lt;p&gt;如果你对数字标牌行业兴趣不大，只对动手用树莓派构建它感兴趣，那你只需要知道数字标牌就是&lt;code&gt;可以播放内容的屏幕&lt;/code&gt;就行了，然后直接跳到screenly部分.&lt;/p&gt;
&lt;h1&gt;数字标牌（&lt;a href="https://en.wikipedia.org/wiki/Digital_signage"&gt;Digital signage&lt;/a&gt;）&lt;/h1&gt;
&lt;p&gt;当你在肯德基里点了一对辣翅、一份土豆泥、一杯玉米饮，拿到2099编号的小票，等待柜台前的屏幕告知你领餐;&lt;br /&gt;
当你在招商银行取号排队办理挂失，看着柜台前的红色数字从20慢慢变到30;&lt;br /&gt;
当你在盛夏的午后，站在奶茶店门口，看着屏幕上琳琅满目的新品，犯了选择困难症;&lt;br /&gt;
当你拉着漂亮小姐姐，在电影开始前最后1分钟，奔往5号厅，在影院长廊里，身边飞过一个个播着不通预告片的屏幕; &lt;/p&gt;
&lt;p&gt;上边出现的这些屏幕，都是数字标牌&lt;/p&gt;
&lt;p&gt;数字标牌有些像一个小电脑，店家将它们希望呈现给用户的内容投射到屏幕上。&lt;/p&gt;
&lt;p&gt;我们来看看维基百科上更为专业的介绍（这个词条写得十分精彩，我对数字标牌行业的理解，主要也是基于这个词条，目前这个词条还没有中文版本，在阅读的时候，顺便也翻译一下，做了些微调，引述如下）：&lt;/p&gt;
&lt;p&gt;数字标牌是&lt;a href="https://en.wikipedia.org/wiki/Electronic_signage"&gt;电子标牌&lt;/a&gt;的一个子概念。数字显示器使用诸如LCD，LED，投影和电子纸等技术来显示数字图像、视频、网页、天气数据、或文本。它们可以在交通系统、博物馆、体育场馆、零售店、酒店、餐馆等地方找到，以提供路标、展览、营销和户外广告。&lt;/p&gt;
&lt;p&gt;数字标牌被定义为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常与销售、广告和营销紧密相关的数字显示器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;角色和功能&lt;/h3&gt;
&lt;p&gt;数字标牌有许多功能与目标，最常见的包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公共信息 - 新闻、天气、交通和本地（特定位置）信息，如地图、火警出口和旅客信息等。&lt;/li&gt;
&lt;li&gt;内部信息 - 公司信息，如健康和安全项目、新闻等。&lt;/li&gt;
&lt;li&gt;产品信息 - 定价、产品照片、原材料或配料等 - 特别适用于食品营销，其中标牌可能包括营养成分或建议的用途、配方。&lt;/li&gt;
&lt;li&gt;提高客户服务体验的信息 - 博物馆、画廊、动物园、公园和花园，展览，旅游和文化景点的解说标牌。&lt;/li&gt;
&lt;li&gt;广告和促销 - 宣传产品或服务&lt;/li&gt;
&lt;li&gt;品牌建设 - 店内数字标牌，以促进品牌和建立品牌标识。&lt;/li&gt;
&lt;li&gt;影响顾客的行为 - 导航，指导顾客到不同的地方，增加店面的“停留时间”，以及为这种影响服务的其他用途。&lt;/li&gt;
&lt;li&gt;影响产品或品牌决策 - 在销售点设计影响选择的标牌，例如标牌，以帮助购物者选择时装店内的服装或帮助顾客找到产品、查看价格、访问产品信息&lt;/li&gt;
&lt;li&gt;增强客户体验 - 应用包括餐厅、银行等候区提示客户等待时间&lt;/li&gt;
&lt;li&gt;导航 - 交互式屏幕的屏幕&lt;/li&gt;
&lt;li&gt;预约 - 墙壁或桌面上的小型互动屏幕，与资源调度平台相集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;行业概览&lt;/h3&gt;
&lt;p&gt;全球有200多家不同的公司销售数字标牌解决方案，数字标牌市场预计到2020年将增长到219.2亿美元。美国占据市场份额的大部分。亚太和欧洲地区已经显示出前景，欧洲的德国和英国，亚太地区的日本和韩国。预计这四个国家到2020年的增长率最高&lt;/p&gt;
&lt;p&gt;数字标牌的主要目标客户是餐馆、零售商、办公楼、地方规划机构、公共交通服务等。这些行业对数字标牌的具体应用，就不一一引述了，参考:&lt;a href="https://en.wikipedia.org/wiki/Digital_signage"&gt;Digital signage&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;数字内容&lt;/h3&gt;
&lt;p&gt;数字内容通过显示控制软件进行管理。控制软件可以是独立的专用程序，也可以与硬件集成。程序可以从音频、视频、图像、文本清单中创建新消息，这些消息以不同的组合和排列组合以实时产生新消息。&lt;/p&gt;
&lt;p&gt;数字标牌上显示的数字内容往往属于以下形式之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本 - 滚动文本。滚动固定的文本或动态更新的文本。&lt;/li&gt;
&lt;li&gt;图像 - 滚动图像，通常是广告海报&lt;/li&gt;
&lt;li&gt;视频 - 可自定义视频&lt;/li&gt;
&lt;li&gt;交互式界面 - 将标牌与触摸屏、传感器、RFID技术集成，以便与用户进行双向通信。交互式数字标牌有助于吸引用户，也可以帮助广告商了解客户行为。&lt;/li&gt;
&lt;li&gt;上下文感知接口 - 将标牌与摄像头、传感器集成，以监控周围环境，根据观众信息、天气状况或其他外部因素更新标牌内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;显示内容控制软件&lt;/h3&gt;
&lt;p&gt;对于小面积区域内使用的设备，可以采用U盘和SD来更新内容。对于分布在不同区域的大型网络，往往使用DAN（数字广告网络）播放器，它们直接连到监视器和互联网，允许最终用户从任何位置管理多个DAN播放器&lt;/p&gt;
&lt;h3&gt;技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;互动&lt;/code&gt;层面，交互式数字标牌允许用户通过触摸屏，体感设备或手机扫码与数字内容交互&lt;/li&gt;
&lt;li&gt;上下文感知数字标牌利用传感器、摄像头、RFID技术、物联网（IoT）等硬件设施来观察周围环境，处理信息并根据环境决定展示的内容。许多数字标牌产品携带摄像头，通过估算路人的年龄、性别和经济状况来收集购物者的统计数据，并使用这些信息更新标牌内容或进行数据分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;标准&lt;/h3&gt;
&lt;p&gt;JPEG图像和MPEG4视频仍然是数字标牌行业的主流数字内容格式。对于交互式内容，HTML5和Unity3D由于其在Web开发人员和多媒体设计人员中的流行而广泛使用。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.screenly.io/"&gt;screenly&lt;/a&gt;提供的解决方案&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Digital signage made easy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前边的部分里，维基百科对数字标牌进行了多视角的介绍和分析，我们对这个行业也有了整体的了解。这是一个非常有趣的行业，计算机技术是数字标牌的基础(从名字我们就可以看出)，借助技术和想象力，有很多有趣的事情可以做。&lt;/p&gt;
&lt;p&gt;但如何介入这个领域呢？毕竟我们不可能从硬件开始制作一个数字标牌。即便我们购买了一个数字标牌的解决方案，在应用它的时候，某天灵机一动，想对其它做些改进，也基本是不可能的。除非它们开放源代码。我们才可能改进它，把创意融入其中。&lt;/p&gt;
&lt;p&gt;我喜欢《黑客: 计算机革命的英雄》中的这段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对计算机的访问应该是不受限制的、完全的。任何人都有动手尝试的权利. 黑客们相信，通过将东西拆开，了解它们的工作原理，并根据这种理解创造新奇的甚至更有趣的东西，可以学习到关于系统的重要知识。他们痛恨一切试图阻止他们这么做的人、物理障碍或者法律。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.screenly.io/"&gt;screenly&lt;/a&gt;给了我们这种机会，&lt;a href="https://www.screenly.io/"&gt;screenly&lt;/a&gt;是数字标牌的解决方案，他们除了推出商业版本之外，也推出了&lt;a href="https://www.screenly.io/ose/"&gt;社区版&lt;/a&gt;，将&lt;a href="https://github.com/screenly/screenly-ose/"&gt;源代码&lt;/a&gt;开放了出来。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.screenly.io/"&gt;screenly&lt;/a&gt;提供的商业版本在此不多介绍，感兴趣的小伙伴可以到他们主页去看，下边重点说说开源的&lt;a href="https://www.screenly.io/ose/"&gt;社区版&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.screenly.io/ose/"&gt;screenly社区版&lt;/a&gt;介绍&lt;/h3&gt;
&lt;p&gt;Screenly OSE/Open Source Edition是由社区支持并由Screenly维护的免费数字标牌软件。&lt;/p&gt;
&lt;p&gt;介绍视频在这里:&lt;a href="https://youtu.be/FQte5yP0azE"&gt;这里&lt;/a&gt;,你也可以直观地体验&lt;a href="http://ose.demo.screenlyapp.com/"&gt;线上demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="线上demo" src="http://oav6fgfj1.bkt.clouddn.com/screenly_bc612fca.png" /&gt;&lt;/p&gt;
&lt;p&gt;Screenly OSE使用树莓派作为它们的载体，由于树莓派有HDMI接口，所以你可以将任何支持HDMI接口的屏幕变为可编程的数字标牌！成本低到令人震惊！以至于我觉得Screenly是来搅局的哈哈&lt;/p&gt;
&lt;p&gt;技术上，Screenly OSE在树莓派中只是作为一个普通的软件存在，你依然可以在操作系统中做任何你想做的事。诸如你可以让Screenly OSE与opencv结合，做出一些令人惊叹的交互式数字标牌，诸如我在&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/user_guide/gallery/"&gt;scratch3-adapter文档&lt;/a&gt;中写的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当穿着裙子的姑娘走近屏幕，屏幕立马给她安利新款纪梵希，而穿着格子衬衫的大叔靠近时，屏幕则以机械键盘蛊惑他&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上&lt;a href="https://blog.just4fun.site/lab/scratch3-adapter-docs/user_guide/gallery/"&gt;scratch3-adapter文档&lt;/a&gt;中屏幕与门的互动例子，就是用Screenly OSE + &lt;a href="https://github.com/home-assistant/home-assistant"&gt;home assistant&lt;/a&gt;+ scratch3.0实现的&lt;/p&gt;
&lt;p&gt;Screenly OSE中有很多有趣的技术工作。诸如它集成了&lt;a href="https://github.com/resin-io/resin-wifi-connect"&gt;resin-wifi-connect&lt;/a&gt;, 如此一来Screenly OSE的无线连接将变得极其简易。对于面向非技术的用户的产品，简单的初始化无线连接至关重要&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;Screenly OSE的安装十分简单，与安装普通树莓派镜像几乎无差别。我们在此假设你对树莓派并不熟悉，你需要以下清单里的东西:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个树莓派，推荐3B&lt;/li&gt;
&lt;li&gt;一个大于4GB的SD卡&lt;/li&gt;
&lt;li&gt;一根HDMI高清线&lt;/li&gt;
&lt;li&gt;一个无线网络(不是必须的，你也可以离线使用它)&lt;/li&gt;
&lt;li&gt;一个支持HDMI的屏幕(可以直接用电视)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结下来我们有两种方式使用Screenly OSE，一种方法是直接烧录官方提供的&lt;a href="https://github.com/screenly/screenly-ose/releases"&gt;镜像&lt;/a&gt;，这种方式最为简单，如何烧录镜像我就不赘述了，可以google一下。&lt;/p&gt;
&lt;p&gt;另一种方式需要你有技术背景，由于Screenly OSE只是一个软件，所以你可以在raspbian中手动安装它，安装已经一键化了,切换到root用户(&lt;code&gt;sudo -i&lt;/code&gt;),然后在tmux里运行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash &amp;lt;(curl -sL https://www.screenly.io/install-ose.sh)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果中途失败(国内网络你懂的)，重新执行就行&lt;/p&gt;
&lt;p&gt;安装完成之后，配置好wifi，将树莓派用高清线连接屏幕，重启，连上Screenly OSE发射的热点(名字里包含Screenly)，屏幕会显示web控制平台的入口地址(默认是:http://raspberrypi.local/)&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;登陆web控制平台，你就进入了前头&lt;a href="http://ose.demo.screenlyapp.com/"&gt;线上demo&lt;/a&gt;展示的页面，你可以上传需要展示的内容啦！&lt;/p&gt;
&lt;p&gt;&lt;img alt="线上demo" src="http://oav6fgfj1.bkt.clouddn.com/screenly_bc612fca.png" /&gt;&lt;/p&gt;
&lt;p&gt;在web控制平台里，你可以设置内容的展示时间和可见性等属性，使用简单，页面基本是自说明的。&lt;/p&gt;
&lt;p&gt;enjoy it！&lt;/p&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;Screenly OSE提供了RESTful风格的API，文档参考:&lt;a href="http://ose.demo.screenlyapp.com/api/docs/"&gt;api/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有了API，你可以轻松做出交互式的数字标牌，大多数时候不需要入侵 Screenly OSE的源码。如果你想对Screenly OSE做二次开发，建议使用docker，具体参考&lt;a href="https://github.com/Screenly/screenly-ose#dockerized-development-environment"&gt;项目主页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于源码是开放的，所以&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/zh-hans/WTFPL"&gt;Do What The Fuck You Want To&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;互动实例&lt;/h3&gt;
&lt;p&gt;我们前段时间布置了一个展厅，展厅内使用了很多智能设备，整个空间可以使用scratch3.0来编程，关于这个想法参考我之前的文章:&lt;a href="https://blog.just4fun.site/scratch3-smart-home.html"&gt;积木化编程与智能家居&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个展厅里，我们准备实践空间编程的概念,通过拖拽积木，我们可以赋予一个空间以智能 &lt;/p&gt;
&lt;p&gt;其中有一个场景是: 使用scratch3.0 + Screenly OSE制作一个互动的数字标牌，当门被打开，有人进入房间的时候，标牌上由休眠背景图片切到宣传片播放；当人们离开，门被关上的时候,屏幕切换到休眠状态.演示如下&lt;/p&gt;
&lt;video src="http://p6ur0vhyj.bkt.clouddn.com/door_tv.mp4" controls="controls"&gt;&lt;/video&gt;

&lt;p&gt;技术上的实现十分简单，我们使用门窗感应器来感知门的开闭，根据门的开闭状态来决定屏幕播放的内容。&lt;/p&gt;
&lt;p&gt;具体而言用到如下三个api接口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s &amp;quot;http://localhost:8080/api/v1/assets&amp;quot;  # 列出所有资源
curl -s &amp;quot;http://localhost:8080/api/v1/assets/control/asset&amp;amp;fddd611fc45844788d9cbad32d761f82&amp;quot;  # 切换到背景图片
curl -s &amp;quot;http://localhost:8080/api/v1/assets/control/asset&amp;amp;e19c9e1525cd4e968c5433199dcf24ac&amp;quot;  # 切换到视频
# 注意: 目前接口只能在树莓派内部访问(安全性)，如果你要把它暴露出来，需要修改源码
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;《三体》有句名言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给岁月以文明，而不是给文明以岁月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们模仿这句作为文章的结尾&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给空间以智能 ，而不是给智能以空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Digital_signage"&gt;Digital signage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.screenly.io/"&gt;screenly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/screenly/screenly-ose/"&gt;screenly-ose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.just4fun.site/scratch3-smart-home.html"&gt;积木化编程与智能家居&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
# 提供服务
营销

增长黑客

本地化

制作镜像



# 学习
看人家是怎么商业化的 学习

# todo
树莓派镜像的制作

https://www.jianshu.com/p/c6055f9545fd

https://codebeta.com/creating-a-raspberry-pi-image-81d5768b8a5d

https://www.raspberrypi.org/forums/viewtopic.php?t=201517  How to create personal custom image

https://www.linux.org/threads/create-your-own-pi-distro.4486/

raspbian custom image


https://github.com/Drewsif/PiShrink/  解决方案！ 备份出来之后压缩一下
pishrnk将与任何img文件一起工作，retropie，recalbox，linux，raspbian等
https://www.reddit.com/r/raspberry_pi/comments/4giomh/pishrink_make_your_pi_images_as_small_as_possible/ 说明


Q：img怎么来的，备份镜像来的

# 结论
pishrink： 使用dd得到 MyImage.img ， 需要在linux下操作

pishrink resize 
有两种方法pishrink和pi-gen

# ip



# 切换资源api
curl -s http://localhost:8080/api/v1/assets/control/next 需要在树莓派内部切换

### 获取资源id
curl -s http://localhost:8080/api/v1/assets | python -m json.tool

e19c9e1525cd4e968c5433199dcf24ac 视频

fddd611fc45844788d9cbad32d761f82 图片

curl -s http://localhost:8080/api/v1/assets/control/e19c9e1525cd4e968c5433199dcf24ac


# 切换到资源 

curl -s "http://localhost:8080/api/v1/assets/control/asset&amp;fddd611fc45844788d9cbad32d761f82"  切换到图片

curl -s "http://localhost:8080/api/v1/assets/control/asset&amp;e19c9e1525cd4e968c5433199dcf24ac" 切换到视频

需要用引号！ 否则bash会处理 &amp;

# 配置和数据库
/home/pi/.screenly


wifi的设置也十分完美！

音箱的控制也是

--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2018-06-30:screenly-rpi.html</guid><category>tools</category></item><item><title>神器之Termux</title><link>/Termux-hello-world.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;自从丢了iphone，换了安卓之后，手机的可玩性瞬间提升了一大截&lt;/p&gt;
&lt;p&gt;之前在手机里跑Python，用的是QPython3，有诸多不便。一直想要在手机里跑linux环境，能使用linux工具箱的同时，又能以编程的方式与手机交互（发短信，拍照，打电话什么的），而且最好不要影响手机正常的使用。&lt;/p&gt;
&lt;p&gt;busybox当然是个不错选择，但我更偏好Termux&lt;/p&gt;
&lt;p&gt;Termux（一个Android App,仅支持Android 5.0及以上版本 ，可以在Google Play和F-Droid上下载）是一款&lt;a href="https://github.com/termux/termux-app"&gt;开源&lt;/a&gt;且不需要root，运行在Android上极其强大的linux模拟器，支持apt管理软件包，支持python,ruby,go,nodejs...甚至可以手机作为反向代理、或Web服务器&lt;/p&gt;
&lt;p&gt;安装好打开之后，你将看到这样的界面&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termuxce0b2f13.png" /&gt;&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;h3&gt;提高输入效率&lt;/h3&gt;
&lt;p&gt;打开Termux之后，我们面对的是一个命令行界面，常用的手机输入工具，搜狗之类的，并没有功能键，无法输入esc、ctrl、alt、tab... &lt;/p&gt;
&lt;p&gt;Termux提供了一些解决方案:&lt;/p&gt;
&lt;p&gt;音量键(-)模拟Ctrl，所以你要中止输入到一半的命令，只好按下&lt;code&gt;音量键(-)+c&lt;/code&gt;即可（等效于Ctrl+c）&lt;/p&gt;
&lt;p&gt;你也可以使用&lt;code&gt;音量键(+)+q&lt;/code&gt;显示扩展键：&lt;code&gt;ESC、CTR、ALT、TAB、-、/、|&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你有多种方式提高输入效率:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用蓝牙键盘&lt;/li&gt;
&lt;li&gt;Hacker's Keyboard: 一个输入法App,提供一切你需要的按键，方便地在Android上输入快捷键组合、特殊符号，提高Coding和CLI的效率&lt;/li&gt;
&lt;li&gt;在电脑中使用ssh接入Termux&lt;/li&gt;
&lt;li&gt;安装Jupyter Notebook，在电脑中使用浏览器连接Termux(可以在网页中使用terminal)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在以上多种方式中，我最喜欢Jupyter Notebook&lt;/p&gt;
&lt;h3&gt;安装Jupyter Notebook&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install clang python python-dev fftw libzmq libzmq-dev freetype freetype-dev libpng libpng-dev pkg-config&lt;/code&gt; （目前(2017.12.24)默认安装的Python版本是&lt;code&gt;3.6.4&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install jupyter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jupyter notebook --ip=0.0.0.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termux0c714cdf.png" /&gt;&lt;/p&gt;
&lt;p&gt;假设你的手机在局域网里的ip为:&lt;code&gt;192.168.0.100&lt;/code&gt;,那么访问你在局域网中的浏览器里输入&lt;code&gt;192.168.0.100:8888&lt;/code&gt;即可，接下来会要求你输入token，如此一来远程访问便没有安全问题。token在&lt;code&gt;jupyter notebook&lt;/code&gt;运行起来之后手机界面中会有，如截图中所示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termuxaa95c1ad.png" /&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中输入token之后，即可使用浏览器来访问termux。选择Terminal:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termuxb43f54dc.png" /&gt;&lt;/p&gt;
&lt;p&gt;之后你便可以在浏览器中进入termux的terminal，和ssh进入几乎相同&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termux4b7a5c1f.png" /&gt;&lt;/p&gt;
&lt;h3&gt;安装依赖&lt;/h3&gt;
&lt;p&gt;进入linux，我做的第一件事一般是把我日常使用的工具装好。Termux支持apt管理软件包，所以这一切来的很轻松:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt install tmux fish vim git&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;公网访问&lt;/h3&gt;
&lt;p&gt;我们如何把手机中的端口暴露到公网呢，有两种方式都很方便:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用ssh反向代理(使用autossh解决隧道的稳定性问题)&lt;/li&gt;
&lt;li&gt;使用ngrok（使用ngrok arm版本）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此一来手机中运行的网站你就可以在公网访问它，当然你也可以把ssh端口暴露到外网，这样你可以在任何有网络连接的地方连接到你的手机里。前提是Termux处于运行状态&lt;/p&gt;
&lt;h3&gt;使用Python驱动手机&lt;/h3&gt;
&lt;p&gt;结下来才是精彩之处&lt;/p&gt;
&lt;p&gt;我们先安装termux的插件Termux:API，用于访问手机硬件。安装完Termux:API App之后，还需要在terminal里安装termux-api:&lt;code&gt;apt install termux-api&lt;/code&gt;，之后就可以在terminal中操控手机硬件，这样一来我们可以以编程的方式来控制手机，&lt;/p&gt;
&lt;p&gt;什么 "亲爱的每天早上6点钟准时电话喊你起床",还不是从不晚点！什么“短信一定秒回哦” 还不是毫秒级的速度！什么“今天是你的生日，我准时在12点给你发了这条祝福短信” 还不是差一秒绝对是网络延迟！ &lt;/p&gt;
&lt;p&gt;巧伤诚 :(&lt;/p&gt;
&lt;p&gt;展示一些好用的api&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取手机剪贴板内容: &lt;code&gt;termux-clipboard-get&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termux5489cc59.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置剪贴板内容: &lt;code&gt;termux-clipboard-set 你好啊&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termux-clipboard-settermux05d9c34a.png" /&gt;&lt;/p&gt;
&lt;p&gt;之后你在手机中粘贴内容时，便会把&lt;code&gt;你好啊&lt;/code&gt;粘贴出来。利用剪切板接口，你可以方便地在电脑和手机间传输内容，而不必通过微信、QQ之类的东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取联系人列表: &lt;code&gt;termux-contact-list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termuxf0795611.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送短信:&lt;code&gt;termux-sms-send -n 10010 hello&lt;/code&gt;
&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termuxd867860c.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上指令我们成功给10010发了&lt;code&gt;hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更多有趣的连接可以参考: &lt;a href="https://wiki.termux.com/wiki/Termux:API"&gt;Termux:API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有了这些接口，我们可以在Python中使用subprocess来操控手机。已经有人做了简单包装，以供python调用termux-api: &lt;a href="https://github.com/mguillau42/termux_python"&gt;termux_python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/termuxd33ab5b3.png" /&gt;&lt;/p&gt;
&lt;h3&gt;邪恶一下&lt;/h3&gt;
&lt;p&gt;使用Termux你可以轻松把手机打造为一个渗透工具&lt;/p&gt;
&lt;p&gt;日常使用的nmap当然没有问题（当然你可以以轻松使用routersploit、slowloris、Hydra），惊人的是竟然连Metasploit Framework都可以使用！&lt;/p&gt;
&lt;p&gt;如果你对使用termux来做渗透感兴趣，参考&lt;a href="https://wiki.termux.com/wiki/Hacking"&gt;termux Hacking&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2018.06.03更新&lt;/h1&gt;
&lt;p&gt;最近看到这篇文章访问的人比较多，做个更新&lt;/p&gt;
&lt;p&gt;termux和termux:api今年做了一个更新,增加了好几个有趣的api，其中我最喜欢termux-sensors,这个api能帮我们拿到几乎所有的手机传感器数据！&lt;/p&gt;
&lt;p&gt;此外我之前fork了一个项目，简单用python包装了一下termux:api: &lt;a href="https://github.com/wwj718/termux_python"&gt;termux_python&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.termux.com/wiki/Main_Page"&gt;The Termux Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.termux.com/wiki/Termux:API"&gt;Termux:API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.leouieda.com/blog/scipy-on-android.html"&gt;Running Jupyter and the Scipy stack on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000002718360"&gt;从外网 SSH 进局域网，反向代理+正向代理解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.coding.net/u/infun/62a3b054f6104f729588a9ef9a2d43aa"&gt;在安卓上用termux和python自动转发短信到微信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blackwolfsec.cc/2016/12/10/termux/"&gt;基于Termux打造Android手机渗透神器（2017-7-22更新）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/27923481"&gt;黑客破解工具Hydra在线爆破密码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-12-24:Termux-hello-world.html</guid><category>dev-tools</category></item><item><title>Swagger使用笔记</title><link>/swagger-note.html</link><description>&lt;blockquote&gt;
&lt;p&gt;He who has a "why" to live for can bear almost any "how"  --尼采&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/swaggerffbceb7f.png" /&gt;&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;此前一直在关注swagger,不过也一直处于看看案例，读读文档的状态。关于写api接口文档和mock的事，多次头疼，看了许多工具都不甚满意,最近在使用&lt;a href="https://github.com/nuysoft/Mock"&gt;Mock&lt;/a&gt;(&lt;a href="https://www.easy-mock.com"&gt;在线体验&lt;/a&gt;)的时候&lt;/p&gt;
&lt;p&gt;发现它在文档里写道:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;支持同步 Swagger 文档，1秒便能生成 Mock 数据。之后接口文档更新也能通过更新操作重新生成 Mock 数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这太强大了，心动不已。&lt;/p&gt;
&lt;p&gt;我自己很喜欢&lt;a href="https://www.easy-mock.com"&gt;easy-mock&lt;/a&gt;这个工具，但写REST api的时候，感觉重复数据声明太多,很不爽，我们知道post/put的大部分属性是相同的，而get/post也有大量重复的属性。如何能以一种更加方便的方式在easy-mock(其他的mock工具也一样)定义接口，以便于更好地做到&lt;code&gt;DRY&lt;/code&gt;, Swagger是绝佳的解决方案，而且它能带给你的远不止于此&lt;/p&gt;
&lt;p&gt;why的问题一解决，how to do 只是细节问题了&lt;/p&gt;
&lt;p&gt;于是重新花了2个晚上的时间，集中地读了文档，也动手写了几个demo，很符合预期&lt;/p&gt;
&lt;p&gt;接下来以经典的3w问题为线索来记录下我的学习过程&lt;/p&gt;
&lt;h1&gt;Swagger是什么&lt;/h1&gt;
&lt;p&gt;关于swagger是什么的问题，swagger的首页说的再清楚不过:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Swagger is the world’s largest framework of API developer tools for the OpenAPI Specification(OAS), enabling development across the entire API lifecycle, from design and documentation, to test and deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为swagger庞大的生态系统，我们在api的整个生命周期中都能从中受益: &lt;code&gt;from design and  documentation, to test and deployment&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前头我的easy-mock属于test部分，同时它也有效地帮助前后端分离&lt;/p&gt;
&lt;p&gt;如果你想对Swagger有更深的了解，可以看下对Tony Tam的这段采访(Tony Tam影响了Swagger的诞生):&lt;a href="http://www.infoq.com/cn/articles/swagger-interview-tony-tam"&gt;通过Swagger进行API设计，与Tony Tam的一次对话&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;OpenAPI Specification&lt;/h3&gt;
&lt;p&gt;上述这段引用中有一个名词值得一提:&lt;code&gt;OpenAPI Specification(OAS)&lt;/code&gt;，它本身开放在&lt;a href="https://github.com/OAI/OpenAPI-Specification"&gt;OpenAPI-Specification&lt;/a&gt;,它的目的是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;为何需要用它&lt;/h1&gt;
&lt;p&gt;如果你在为一个系统设计API，你希望更好的管理你的API，你希望有一个工具能一站式地解决API相关的所有事情，从设计到文档再到mock，甚至能直接从设计文档中生成代码(声明式编程)，这确实是可能的，如果你的描述信息是完备的，自动化生成mock接口,同时也可生成各种语言与api交互的SDK&lt;/p&gt;
&lt;p&gt;这些便是你选择Swagger的理由&lt;/p&gt;
&lt;h1&gt;how to do...&lt;/h1&gt;
&lt;p&gt;最后便是怎么做的问题，这反而不太难，在互联网高度发达的今天，海量的资料遍布网络&lt;/p&gt;
&lt;p&gt;我接下来把我的学习过程和资料做个笔记，希望对你有用&lt;/p&gt;
&lt;h3&gt;起步&lt;/h3&gt;
&lt;p&gt;尽管Swagger本身是开源的，你可以自行搭建整个工具链，但从在线工具开始尝试，会让你更快接触核心的东西，而不是在搭建工具上忙活半天&lt;/p&gt;
&lt;p&gt;我们从&lt;a href="https://app.swaggerhub.com/"&gt;swaggerhub&lt;/a&gt;开始&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/swaggerffbceb7f.png" /&gt;&lt;/p&gt;
&lt;p&gt;swaggerhub是个非常棒的项目，你在这里可以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线编辑你的API文档(用的是&lt;a href="https://github.com/swagger-api/swagger-editor"&gt;swagger-editor&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;可使用使用json或yaml来书写(设计)你的API,推荐yaml，对人类更友好（无论是书写、阅读还是添加注释)&lt;/li&gt;
&lt;li&gt;可导出为json或是yaml，easy-mock中要求json文档的url，所以你可以把导出的json放到&lt;a href="https://gist.github.com/"&gt;github gist&lt;/a&gt;,然后贴到easy-mock里，之后就自动生成mock接口了&lt;/li&gt;
&lt;li&gt;可直接生成可运行20几种server代码（诸如flask）,当然也能自动生成client可执行代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;swaggerhub自带了mock插件，可以直接在线测试，UI页里有curl的请求例子&lt;/li&gt;
&lt;li&gt;和github相似，你可以分享以及fork别人的API项目:&lt;a href="https://app.swaggerhub.com/search"&gt;search&lt;/a&gt;，这样对学习很有帮助&lt;/li&gt;
&lt;li&gt;你可以邀请你的团队成员一起来编辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上边的截图是官方的demo：&lt;code&gt;Swagger Petstore&lt;/code&gt;，这是一个很完整的API项目(同时也比较复杂)，我们可以一边试运行，一边做些修改看看每个参数的作用，如果你想对swagger的语法有个整体的认识，推荐这篇文档&lt;a href="https://www.gitbook.com/book/huangwenchao/swagger/details"&gt;Swagger从入门到精通&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的做法是先通读一遍(粗读)上边的文档，之后对着别人的API项目学习，遇到不懂的去查阅这个文档&lt;/p&gt;
&lt;p&gt;另外文档结尾处有个彩蛋:&lt;a href="http://openapi-specification-visual-documentation.apihandyman.io/"&gt;OpenAPI Specification Visual Documentation&lt;/a&gt;,这是查阅swagger写作语法的神器&lt;/p&gt;
&lt;h3&gt;如何把握Swagger&lt;/h3&gt;
&lt;p&gt;Swagger生态极其庞大，各种工具层出不穷，如何确定一个清晰工作流。而不会在庞大的生态链里迷失&lt;/p&gt;
&lt;p&gt;我觉得核心是理解：Swagger的生态系统是围绕Swagger文档(json/yaml)构建的,就是说我们书写的纯文本(json/yaml)便是我们输出的所有东西，它是全息的，我们手里只需有这个纯文本，就能做所有事情，此外的工具都是围绕它构建的，把这个纯文本导入到响应的工具里，就可获得其他功能，诸如漂亮的UI，自动化的mock等等&lt;/p&gt;
&lt;p&gt;你熟悉markdown的话，你会发现他们在设计思路上有不少相似点&lt;/p&gt;
&lt;p&gt;编写API文档，其实我们只是在写一个简单的纯文本文件。你可以用任何你喜欢的文本编辑器来写(vim/emacs/atom/vscode/sublime)。但是为了提高效率，建议选择Swagger Editor(swaggerhub默认是它)，诸如语法检查之类的功能能帮你省下大量排错的时间 &lt;/p&gt;
&lt;h3&gt;一个小案例&lt;/h3&gt;
&lt;p&gt;学习一个新技术，我喜欢用它写一个简单的blog，我们接下来试试用swagger来写博客文章的API，我们假设Article有四个属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;userid&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;li&gt;tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;API是RESTful风格(可以参考我此前的文章&lt;a href="http://blog.just4fun.site/RESTful-Api.html"&gt;RESTful-Api&lt;/a&gt;)，支持:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get /articles&lt;/code&gt; : 获取文章列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post /articles&lt;/code&gt; : 新建一篇文章(登录用户)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get /articles/&amp;lt;id&amp;gt;&lt;/code&gt; : 获取文章详情（指定文章id）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put /articles/&amp;lt;id&amp;gt;&lt;/code&gt; : 更新某篇的文章&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete /articles/&amp;lt;id&amp;gt;&lt;/code&gt; : 删除某篇的文章&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get /articles/search?title=python&lt;/code&gt; : 搜索文章&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下边是它的api描述&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;swagger&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;info&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;version&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.0.0&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;title&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;blog&lt;/span&gt;
  &lt;span class="c1"&gt;# description支持markdown&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;# blog API documentation&lt;/span&gt;

    &lt;span class="no"&gt;这篇文档描述了的blog(article)的api接口&lt;/span&gt;

&lt;span class="c1"&gt;# host: localhost:8000 #localhost blog &lt;/span&gt;
&lt;span class="c1"&gt;# basePath: /api&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;schemes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;consumes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;application/json&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;produces&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;application/json&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;get&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service root&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;列出所有api的描述信息.&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Success&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;security&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/articles&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;get&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; 
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;list all articles&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;list_all_articles&lt;/span&gt; &lt;span class="c1"&gt;#后端函数&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;#todo&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Annotation successfully created&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/ArticleList&amp;#39;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;400&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Could not create article from your request&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Error&amp;#39;&lt;/span&gt;

    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create a new Article&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;createArticle&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Article&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;body&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;article to be created&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/NewArticle&amp;#39;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;article successfully created&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Article&amp;#39;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;400&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Could not create article from your request&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Error&amp;#39;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/articles/{id}&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;get&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fetch an Article&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fetchArticle&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ID of article to return&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Success&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Article&amp;#39;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;article not found or no permission to view&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Error&amp;#39;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;patch&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Update an Article&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;This endpoint is available under both the `PATCH` and `PUT`&lt;/span&gt;
        &lt;span class="no"&gt;request methods. Both endpoints have PATCH-characteristics&lt;/span&gt;
        &lt;span class="no"&gt;as defined in [RFC5789](https://tools.ietf.org/html/rfc5789#section-1),&lt;/span&gt;
        &lt;span class="no"&gt;meaning the request body does not have to include the whole Article&lt;/span&gt;
        &lt;span class="no"&gt;object.&lt;/span&gt;

        &lt;span class="no"&gt;New implementations should use the `PATCH` request method, and existing&lt;/span&gt;
        &lt;span class="no"&gt;implementations continue to work under `PUT` but should switch to `PATCH`.&lt;/span&gt;

      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;updateArticle&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ID of article to return&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Article&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;body&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Updated article body&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/NewArticle&amp;#39;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Success&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Article&amp;#39;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;400&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Could not create article from your request&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Error&amp;#39;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;article not found or no permission to update&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Error&amp;#39;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;delete&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Delete an Article&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deleteArticle&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ID of article to return&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Success&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deleted&lt;/span&gt;
              &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deleted&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;boolean&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;enum&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;article not found or no permission to delete&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Error&amp;#39;&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/search&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;get&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;summary&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Search for annotations&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;operationId&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;search&lt;/span&gt; &lt;span class="c1"&gt;#后台对应的函数名&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;limit&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;query&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;The maximum number of annotations to return.&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;minimum&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;maximum&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;200&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;20&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;offset&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;query&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="no"&gt;The minimum number of initial annotations to skip. This is&lt;/span&gt;
            &lt;span class="no"&gt;used for pagination.&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;minimum&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sort&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;query&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;The field by which annotations should be sorted.&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;updated&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;responses&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Search results&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/SearchResults&amp;#39;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;definitions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;NewArticle&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# todo json 2 yaml: https://www.json2yaml.com/&lt;/span&gt;
    &lt;span class="c1"&gt;# 也可以是在线的&lt;/span&gt;
    &lt;span class="c1"&gt;#$ref: &amp;#39;./schemas/annotation-schema.json&amp;#39; #https://h.readthedocs.io/en/latest/api/schemas/annotation-schema.json &lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;userid&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="c1"&gt;#&amp;quot;pattern&amp;quot;: &amp;quot;^acct:.+$&amp;quot;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;title&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;content&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tags&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;array&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;items&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Article&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;allOf&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/NewArticle&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# NewArticle属性展开在这里&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Error&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;status&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;status&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;enum&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;failure&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;reason&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A human-readable description of the reason(s) for failure.&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;SearchResults&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#用作list&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rows&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;total&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rows&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;array&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;items&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Article&amp;#39;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;total&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Total number of results matching query.&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ArticleList&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#用作list&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rows&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;total&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rows&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;array&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;items&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$ref&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/definitions/Article&amp;#39;&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;total&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Total number of results matching query.&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
&lt;span class="c1"&gt;# Added by API Auto Mocking Plugin&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;virtserver.swaggerhub.com&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;basePath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/pwnote/blog/1.0.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你对其中的语法有所不解可以查阅: &lt;a href="https://www.gitbook.com/book/huangwenchao/swagger/details"&gt;Swagger从入门到精通&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我同时做了以下工作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以在我的gist上看到&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/b5d1c1a2b6129c11051e22b6b42f12cf"&gt;swagger_blog.yaml&lt;/a&gt;,&lt;a href="https://gist.githubusercontent.com/wwj718/b5d1c1a2b6129c11051e22b6b42f12cf/raw/431e42efbca287226ab23d3556a5203f83b447d3/swagger_blog.yaml"&gt;下载链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;json版本是:&lt;a href="https://gist.github.com/wwj718/d2d017b9f27b1e241b1c7a2b7b6f2f7f"&gt;swagger_blog.json&lt;/a&gt;), &lt;a href="https://gist.githubusercontent.com/wwj718/d2d017b9f27b1e241b1c7a2b7b6f2f7f/raw/0290a8635acea38ebfb4e029757142a4ecafa2a2/swagger_blog.json"&gt;下载链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;同时将它发布在swaggerhub上了:&lt;a href="https://app.swaggerhub.com/apis/pwnote/blog/1.0.0"&gt;swaggerhub blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在esay-mock上生成了mock接口:&lt;a href="https://www.easy-mock.com/mock/5923b15291470c0ac1f85bfe/blog/pwnote/blog/1.0.0/articles"&gt;mock list articles&lt;/a&gt; (用的是&lt;a href="https://gist.githubusercontent.com/wwj718/d2d017b9f27b1e241b1c7a2b7b6f2f7f/raw/b919b891ee08cc9f229cd58fc2c3a5c9500c26da/swagger_blog.json"&gt;swagger_blog.json&lt;/a&gt;作为swagger url&lt;/li&gt;
&lt;li&gt;在ReDoc上浏览:&lt;a href="https://rebilly.github.io/ReDoc/?url=https://gist.githubusercontent.com/wwj718/b5d1c1a2b6129c11051e22b6b42f12cf/raw/431e42efbca287226ab23d3556a5203f83b447d3/swagger_blog.yaml"&gt;ReDoc blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;围绕Swagger的生态&lt;/h3&gt;
&lt;p&gt;可以在github上搜swagger,会发现有许多相关项目，我列出几个我恰好看到或关注的&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;django-rest-swagger&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/encode/django-rest-framework"&gt;Django REST Framework&lt;/a&gt;是写api的神器&lt;/p&gt;
&lt;p&gt;配合&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;django-rest-swagger&lt;/a&gt;更是如虎添翼&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/zalando/connexion"&gt;connexion&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;swagger可自动生成的20多种server代码，其中包括flask版本的，在flask的版本代码里，主要用到的就是connexion&lt;/p&gt;
&lt;p&gt;connexion是一个漂亮的框架，用于在Python中实现API First方法,如果你对此有兴趣可以参考&lt;a href="https://caricio.com/2016/09/16/crafting-effective-microservices-in-python/"&gt;Crafting effective Microservices in Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想看一个带有数据库和真实后端的例子，可以参考:&lt;a href="https://github.com/zalando/connexion/tree/master/examples/sqlalchemy"&gt;connexion/examples/sqlalchemy&lt;/a&gt;,这个例子让我们看到一个完整的项目:api的文档以及后端实现&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/Rebilly/ReDoc"&gt;ReDoc&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我最近在使用的一个是&lt;a href="https://github.com/Rebilly/ReDoc"&gt;ReDoc&lt;/a&gt;，有不少有名的项目在用它作为api文档的展示工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/api/v1.25/"&gt;Docker Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.discourse.org/"&gt;discourse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nuysoft/Mock"&gt;Mock&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.easy-mock.com"&gt;easy-mock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/huangwenchao/swagger/details"&gt;Swagger从入门到精通&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://openapi-specification-visual-documentation.apihandyman.io/"&gt;OpenAPI Specification Visual Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;django-rest-swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-editor"&gt;swagger-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui"&gt;swagger-ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/21353795"&gt;Swagger：Rest API的描述语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-05-22:swagger-note.html</guid><category>dev-tools</category></item><item><title>websocketd:一个小而美的管道工具</title><link>/websocketd.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/websocketdef12b5f8.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;do one thing and do it well&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以*nix哲学来看，websocketd是个优雅的工具,小而美，作为管道，有强大的可组合性&lt;/p&gt;
&lt;h1&gt;简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Turn any program that uses STDIN/STDOUT into a WebSocket server. Like inetd, but for WebSockets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://websocketd.com/"&gt;websocketd&lt;/a&gt;是个命令行工具，他能轻易地包装其他命令行，使其能够通过websocket来访问&lt;/p&gt;
&lt;p&gt;以上就是它做的所有事情了，简单的几乎不需要学习成本，就像&lt;code&gt;ls/cat/netcat&lt;/code&gt;这些你熟悉的工具一样&lt;/p&gt;
&lt;h1&gt;上手&lt;/h1&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;如果你是mac用户，直接使用brew安装就行:&lt;code&gt;brew install websocketd&lt;/code&gt;,如果你是其他操作系统用户，点击&lt;a href="https://github.com/joewalnes/websocketd/wiki/Download-and-install"&gt;Download and install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;官方给出了一个非常简单的例子&lt;/p&gt;
&lt;p&gt;创建一个count.sh文件，内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; COUNT &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; COUNT++&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$COUNT&lt;/span&gt;
    sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使其可执行:&lt;code&gt;chmod +x count.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们先在本地运行试试:&lt;code&gt;./count.sh&lt;/code&gt;，输出结果为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来我们将其转为一个websocket服务: &lt;code&gt;websocketd --port=8080 ./count.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在我们就可以在网页上看结果了&lt;/p&gt;
&lt;p&gt;count.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;websocketd test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;// helper function: log message to screen&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// setup websocket with callbacks&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws://localhost:8080/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onopen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CONNECT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DISCONNECT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MESSAGE: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接用浏览器打开这个本地页面就行！(wesocket可以跨域)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/websocketdd04a2560.png" /&gt;&lt;/p&gt;
&lt;p&gt;非常简单！&lt;/p&gt;
&lt;h1&gt;与特定编程语言结合&lt;/h1&gt;
&lt;p&gt;websocketd可以与各种语言编写的程序结合,官方源码库的&lt;a href="https://github.com/joewalnes/websocketd/tree/master/examples"&gt;example&lt;/a&gt;里就给出了很多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;c# &lt;/li&gt;
&lt;li&gt;cgi-bin&lt;/li&gt;
&lt;li&gt;f# &lt;/li&gt;
&lt;li&gt;haskell&lt;/li&gt;
&lt;li&gt;html&lt;/li&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;li&gt;perl&lt;/li&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;ruby&lt;/li&gt;
&lt;li&gt;swift&lt;/li&gt;
&lt;li&gt;windows-jscript&lt;/li&gt;
&lt;li&gt;windows-vbscript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总有一款适合你&lt;/p&gt;
&lt;p&gt;如果你的语言笔记小众,只要你的程序和shell脚本的输入/输出模式一样，就没问题&lt;/p&gt;
&lt;h2&gt;与python结合&lt;/h2&gt;
&lt;p&gt;我日常主要用python，所以列出与python的整合例子&lt;/p&gt;
&lt;p&gt;同样来自官方的例子:&lt;a href="https://github.com/joewalnes/websocketd/blob/master/examples/python/count.py"&gt;count.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
  &lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使其可执行：&lt;code&gt;chmod +x count.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行:&lt;code&gt;websocketd --port=8080 ./count.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你讲看到和上边一样的结果&lt;/p&gt;
&lt;p&gt;上边的源码有一处值得留意:&lt;code&gt;stdout.flush()&lt;/code&gt;,有兴趣的同学可以参考&lt;a href="http://stackoverflow.com/questions/10019456/usage-of-sys-stdout-flush-method"&gt;Usage of sys.stdout.flush() method&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;一个可交互的例子&lt;/h3&gt;
&lt;p&gt;前头的例子都是单向的数据流，我们来看看一个交互性更强的例子(&lt;a href="https://github.com/joewalnes/websocketd/blob/master/examples/python/greeter.py"&gt;greeter.py&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;

&lt;span class="c1"&gt;# For each line FOO received on STDIN, respond with &amp;quot;Hello FOO!&amp;quot;.&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Remember to flush&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行它:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x count.py
websocketd --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt; ./greeter.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的前端为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;websocketd test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;// helper function: log message to screen&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// setup websocket with callbacks&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws://localhost:8080/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onopen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CONNECT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="c1"&gt;// input&lt;/span&gt;
          &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DISCONNECT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MESSAGE: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开页面，我们看到:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/websocketde0ec4001.png" /&gt;&lt;/p&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;h4&gt;交互调试&lt;/h4&gt;
&lt;p&gt;调试带有交互功能的程序，手写js比较不方便，官方也给出了&lt;a href="https://github.com/joewalnes/websocketd/wiki/Developer-console"&gt;调试模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上边的例子为例:&lt;code&gt;websocketd --port=8000 --dir=./ --devconsole&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开：&lt;code&gt;http://localhost:8000/greeter.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/websocketdef12b5f8.png" /&gt;&lt;/p&gt;
&lt;h1&gt;一些特性&lt;/h1&gt;
&lt;p&gt;关于websocketd的特性介绍你可以看它的&lt;a href="http://websocketd.com/"&gt;主页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我这里对我发现的特性做个笔记:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多client连接，每个client连接后，都将看到&lt;code&gt;count.sh&lt;/code&gt;从头开始运行的过程数据(应该是独立的,每来一个请求，被包装的脚本从头运行?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;与其他工具组合&lt;/h1&gt;
&lt;p&gt;同*nix的其他管道工具一样，组合的可能性取决于你的想象力，在此列出我觉得有用的组合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与&lt;a href="https://github.com/inconshreveable/ngrok"&gt;ngrok&lt;/a&gt;组合，将websocket服务暴露到公网(当然你也可以用nginx反向代理)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rowanthorpe/ws-repl"&gt;ws-repl&lt;/a&gt;,这个项目将websocketd与各种REPL对接(ps，这类需求我更推荐&lt;a href="https://github.com/yudai/gotty"&gt;gotty&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/joewalnes/websocketd"&gt;websocketd&lt;/a&gt;源码&lt;/li&gt;
&lt;li&gt;&lt;a href="http://websocketd.com/"&gt;websocketd主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joewalnes/websocketd/wiki"&gt;websocket wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2017-03-31:websocketd.html</guid><category>dev-tools</category></item><item><title>从Finder迁往ranger</title><link>/from-finder-to-ranger.html</link><description>&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/ranger49251562.png" /&gt;&lt;/p&gt;
&lt;p&gt;Mac下有许多好用的生产力工具，从iTerm到Moom,细节打磨的很细腻，常有令人意外的惊喜。而另一些工具让人用着仿佛置身于远古时代，Finder是其一&lt;/p&gt;
&lt;p&gt;对Finder积怨已久。我在mac每做10件蠢事，大约有8件发生在Finder里&lt;/p&gt;
&lt;h1&gt;与Finder结怨&lt;/h1&gt;
&lt;h3&gt;复制文件&lt;/h3&gt;
&lt;p&gt;当我在notebooks目录下写文章（这篇博客也是），突然想把临时文件夹里的截图放到文章里，我要先把它复制到当前目录（以便和文章一同纳入版本管理），然后引用它。&lt;/p&gt;
&lt;p&gt;此前，我先把当前目录切割文左右窗口布局（利用XtraFinder）,接着在一个窗口里沿着目录一层层找到需要的文件，再拖拽过来（由于没有剪切/复制/粘贴这种选项，只能用拖），如果一次拖多个文件，得更小心翼翼一些，放准位置。&lt;/p&gt;
&lt;p&gt;如果只是这样也还勉强凑合&lt;/p&gt;
&lt;p&gt;上上周我把系统升级到10.12（macOS Sierra）。郁闷的一点是XtraFinder暂不支持这个版本，于是我的复制过程变成了:手动打开两个窗口,调整好左右布局，傻乎乎地拖拽。&lt;/p&gt;
&lt;p&gt;ps :  之所以不直接使用cp是因为写文章时，Finder一般处于open状态,用它拖拉文件感觉也直观,使用cp除非对文件所在位置确信无疑，否则在目录树里穿梭很累&lt;/p&gt;
&lt;h3&gt;文件路径&lt;/h3&gt;
&lt;p&gt;你在目录里游荡，找到想进入的目录，你如何在当前目录打开shell呢，XtraFinder能用的时候，右键就有这个选项。如今XtraFinder不能用，我只好打开iTerm，把目标目录拖进iTerm&lt;/p&gt;
&lt;p&gt;我挺讨厌拖曳操作，每次我都得重新调整窗口布局（Moom），拖完再用Moom把shell最大化&lt;/p&gt;
&lt;p&gt;和文件路径相关的另一个操作是:在编辑器里打开项目目录。听完最近一期的内核恐慌，试了下vscode，觉得顺手。当我在目录树里穿梭，想用vscode打开当前项目，依然需要在vscode里重新在Finder的目录树中找目录，十分烦人（这个问题在ranger有完美解决方案）&lt;/p&gt;
&lt;h3&gt;速度!&lt;/h3&gt;
&lt;p&gt;关于速度吐两个槽&lt;/p&gt;
&lt;p&gt;其一是启动Finder，默认打开&lt;code&gt;我的所有文件&lt;/code&gt;,我大概需要给它一首歌的时间才能加载出来（稍微一点点夸张）&lt;/p&gt;
&lt;p&gt;其二是升级到10.12后，Finder似乎不稳定，时常会占用大量资源，导致电脑发热卡顿，在网上也看到不少这个现象&lt;/p&gt;
&lt;h2&gt;对Finder总结&lt;/h2&gt;
&lt;p&gt;如果你是一名开发者，对目录操作频繁，又十分不想离开GUI，使用Finder时请搭配XtraFinder（暂时不要升级到10.12，否则用不了XtraFinder），或者直接购买Path Finder，这款软件更像为开发者准备的文件管理器，售价好像是$37.5&lt;/p&gt;
&lt;p&gt;如果你喜欢CLI风格的界面，那么快上车&lt;/p&gt;
&lt;h1&gt;ranger带来的福音&lt;/h1&gt;
&lt;p&gt;如果你习惯在命令行下工作，还是vim党，那么ranger简直就是你的福音&lt;/p&gt;
&lt;p&gt;自从用了ranger，腰不酸，腿不痛，一口气爬五楼都不累了&lt;/p&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ranger is a  VIM-inspired filemanager for the console&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与ranger的结识是因为是实在受不了Finder。于是google搜了一番，偶然看到ranger，耳目一新。几乎完美解决我所有的问题，所有！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与君初相识,犹如故人归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ranger/ranger"&gt;ranger&lt;/a&gt; 是一个由python写成的文件管理器，使用 vi 键绑定,不同层级的目录分别在一个面板的三列中进行展示. 可以通过快捷键, 书签, 鼠标以及历史命令在它们之间移动. 当选中文件或目录时, 会自动显示文件或目录的内容.&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mac: brew install ranger&lt;/li&gt;
&lt;li&gt;ubuntu: sudo apt-get install ranger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主要特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vi 风格的快捷键&lt;/li&gt;
&lt;li&gt;书签&lt;/li&gt;
&lt;li&gt;选择&lt;/li&gt;
&lt;li&gt;标签&lt;/li&gt;
&lt;li&gt;选项卡&lt;/li&gt;
&lt;li&gt;命令历史&lt;/li&gt;
&lt;li&gt;创建符号链接的能力&lt;/li&gt;
&lt;li&gt;多种终端模式&lt;/li&gt;
&lt;li&gt;任务视图&lt;/li&gt;
&lt;li&gt;可定制命令和快捷键，包括绑定到外部脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你熟悉vim，想当然地使用就行，遇到问题输入&lt;code&gt;?&lt;/code&gt;查看帮助，如果你觉得对着详细的操作文档比较踏实，可以参考这篇文章:&lt;a href="http://www.mikewootc.com/wiki/linux/usage/ranger_file_manager.html"&gt;linux终端文件管理器ranger使用详解&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;以思维的速度操作目录&lt;/h3&gt;
&lt;p&gt;vim允许你"以思维的速度操控文本"&lt;/p&gt;
&lt;p&gt;ranger允许你借用vim的快捷键，以思维的速度操控目录&lt;/p&gt;
&lt;p&gt;我在没读文档时，想当然地用vim的search功能，居然可以在当前目录搜索文件名，惊艳不已&lt;/p&gt;
&lt;p&gt;至于前头在Finder中遇到文件复制问题，只需要用&lt;code&gt;yy&lt;/code&gt;复制文件，&lt;code&gt;pp&lt;/code&gt;粘贴到目标目录下即可。和在vim下赋值文本完全相同&lt;/p&gt;
&lt;h3&gt;调用编辑器打开项目&lt;/h3&gt;
&lt;p&gt;前头我们说到一个场景：当浏览目录是，突然想用编辑器打开一个目录来编写项目。在ranger里使用&lt;code&gt;:open_with xxx&lt;/code&gt;就行，诸如我想用vscode，我只要输入&lt;code&gt;:open_with code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你和我一样大多时间使用vim，那么移动到文件直接回车就行&lt;/p&gt;
&lt;p&gt;如果你偏好sublime你可以：&lt;code&gt;open_with subl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;至于可以接入哪个编辑器，由你决定，只要你的编辑器能在命令行里打开就行（不知如何在命令行打开vscode/sublime/macvim，可以自行google）&lt;/p&gt;
&lt;h3&gt;速度&lt;/h3&gt;
&lt;p&gt;在速度方面，ranger与Finder的差别，约同Chrome与IE的区别&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.vaikan.com/wordpress/wp-content/uploads/2013/08/ie3.jpg" /&gt; &lt;/p&gt;
&lt;h1&gt;搭配&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查找大文件: ncdu&lt;/li&gt;
&lt;li&gt;快速移动位置 : z&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ranger/ranger"&gt;ranger/ranger)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/ranger_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"&gt;Ranger (简体中文)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/article-1995-1.html"&gt;Ranger – 给命令行用户一个基于文本的文件管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mikewootc.com/wiki/linux/usage/ranger_file_manager.html"&gt;linux终端文件管理器ranger使用详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-11-29:from-finder-to-ranger.html</guid><category>tools</category></item><item><title>web服务器压力测试一例</title><link>/stress-testing.html</link><description>&lt;p&gt;近期部门新上线一个服务，我们使用ab和locust分别测试&lt;/p&gt;
&lt;p&gt;目前项目属于demo阶段，对访问量的支持不要求太高，我们暂且设定在500请求，20并发&lt;/p&gt;
&lt;h1&gt;工具介绍&lt;/h1&gt;
&lt;h3&gt;ab&lt;/h3&gt;
&lt;p&gt;ab全称为：Apache HTTP server benchmarking tool&lt;/p&gt;
&lt;p&gt;ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/locustio/locust/"&gt;locust&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;locust是一个开源负载测试工具，支持python脚本。可仿真百万个用户&lt;/p&gt;
&lt;p&gt;locust提供web ui界面，能够方便用户实时监控脚本运行状态。&lt;/p&gt;
&lt;h1&gt;开始测试&lt;/h1&gt;
&lt;h3&gt;使用ab测试&lt;/h3&gt;
&lt;p&gt;假设我们的网站域名为：www.example.com&lt;/p&gt;
&lt;p&gt;我们需要测试的页面为：&lt;code&gt;/index&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ab -n &lt;span class="m"&gt;500&lt;/span&gt; -c &lt;span class="m"&gt;20&lt;/span&gt; https://www.example.com/index/  &lt;span class="c1"&gt;#500 访问，20 并发,－n表示请求数，－c表示并发数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后会生成报表，如何阅读ab的报表，可以参考：&lt;a href="http://www.ha97.com/4617.html"&gt;Web性能压力测试工具之ApacheBench（ab）详解&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用locust测试&lt;/h3&gt;
&lt;p&gt;locust是一个python库，我们可以使用pip安装：&lt;code&gt;pip install locustio&lt;/code&gt;,查看帮助：&lt;code&gt;locust --help&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们根据&lt;a href="http://docs.locust.io/en/latest/"&gt;官方教程&lt;/a&gt;来写一个简单的测试&lt;/p&gt;
&lt;p&gt;vim locustfile.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;locust&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Locust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTaskSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;min_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
    &lt;span class="n"&gt;max_wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;

    &lt;span class="nd"&gt;@task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    @task&lt;/span&gt;
&lt;span class="sd"&gt;    def task2(self):&lt;/span&gt;
&lt;span class="sd"&gt;        self.client.get(&amp;quot;/page2&amp;quot;)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyLocust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Locust&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyTaskSet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;locust  -f locustfile.py --host=http://www.example.com&lt;/p&gt;
&lt;p&gt;之后打开：127.0.0.1:8089,即可开始测试&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/stress-testinge8fe2273.png" /&gt;&lt;/p&gt;
&lt;p&gt;模拟登录的测试，下回有空再做.在locust中处理session很容易:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HttpSession instance will preserve cookies between requests so that it can be used to log in to websites and keep a session between requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ha97.com/4617.html"&gt;Web性能压力测试工具之ApacheBench（ab）详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weibo.com/ttarticle/p/show?id=230940395887204907232"&gt;基于Locust、Tsung的百万并发秒杀压测案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xuh.me/post/testing/locust-intro"&gt;Locust负载测试框架初探&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zhuhangyu.github.io/python/locust-for-login/"&gt;用locust+selenium压力测试登录后的页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-10-08:stress-testing.html</guid><category>tools</category></item><item><title>一些好用的工具</title><link>/awesome-tools.html</link><description>&lt;h1&gt;周末大淘金&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/unp"&gt;unp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;python包（pip install unp），能解压主流的压缩包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*.7z&lt;/li&gt;
&lt;li&gt;*.bz2v&lt;/li&gt;
&lt;li&gt;*.tar.gz&lt;/li&gt;
&lt;li&gt;*.rar&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.zip; &lt;/em&gt;.egg; &lt;em&gt;.whl; &lt;/em&gt;.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用: &lt;code&gt;unp myarchive.rar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mac下解压工具很难用，可以试试unp&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;强大的交互式命令行构建框架&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/ronnix/fabtools"&gt;fabtools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;方便地写fabric脚本&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/pluginbase"&gt;pluginbase&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个灵活的python插件系统&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/sloria/doitlive"&gt;doitlive&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现场的命令行演示，可以预先输入脚本，然后像放ppt一样运行他们，每个指令都会现场真是执行&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Zulko/moviepy/"&gt;moviepy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用python做视频编辑&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jmcarp/robobrowser"&gt;robobrowser&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基于python的无壳浏览器&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/gak/pycallgraph"&gt;pycallgraph&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将python代码的调用栈可视化&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Kozea/wdb"&gt;wdb&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可看做web版的pdb&lt;/p&gt;
&lt;p&gt;mac不可用&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/pipsi"&gt;pipsi&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使一般用户能安装系统级别的pip依赖&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/mitsuhiko/python-regex-scanner"&gt;python-regex-scanner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;正则提取，scanner&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jflesch/paperwork/wiki#for-developers"&gt;paperwork&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文档查询 ocr （linux only）&lt;/p&gt;
&lt;p&gt;docker安装：https://github.com/jflesch/paperwork/blob/unstable/doc/install.docker.markdown&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/amperser/proselint"&gt;proselint&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A linter is a computer program that, like a spell checker, scans through a document and analyzes it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是个非常酷的项目，对你的文章进行检查，并给出建议，就像对你的代码做静态分析&lt;/p&gt;
&lt;h3&gt;&lt;a href=""&gt;ncdu&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;找出系统大文件&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-31:awesome-tools.html</guid><category>tools</category></item><item><title>为mpv写一个简单的图形界面</title><link>/mpv_gui.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;几个月前给朋友推荐过mpv，朋友非技术人员，而mpv只提供命令行工具，没有图形界面，周末下午逛github看到&lt;a href="https://github.com/chriskiehl/Gooey"&gt;Gooey&lt;/a&gt;，觉得简单有趣，决定用它给mpv写一个简单的图形界面&lt;/p&gt;
&lt;h1&gt;需求&lt;/h1&gt;
&lt;p&gt;需求很简单，通过点击桌面图标，之后选择电影文件，就能播放，而不需要使用图形界面，这应该是大多非技术用户习惯的操作。&lt;/p&gt;
&lt;h1&gt;一些介绍&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/mpv-player/mpv"&gt;mpv&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;mac下常见播放器有QuickTime，MplayerX，VLC。我之前用MplayerX居多，mpv 是 Mplayer 和 Mplayer2 项目的分支，目前活跃的开发者都转向开发 mpv。mpv基本可以满足一般用户的需要&lt;/p&gt;
&lt;p&gt;mac下不同播放器的比较参考&lt;a href="https://www.zhihu.com/question/19552878"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/chriskiehl/Gooey"&gt;Gooey&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Turn (almost) any Python command line program into a full GUI application with one line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gooey能轻易地把python命令行工具变为GUI应用，通过极少的代码&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;h3&gt;mpv&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew tap mpv-player/mpv
brew install mpv
which mpv &lt;span class="c1"&gt;# /usr/local/bin/mpv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用:&lt;code&gt;mpv /your/folder/yourfile.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mpv在mac目前没有图形界面&lt;/p&gt;
&lt;h3&gt;Gooey&lt;/h3&gt;
&lt;p&gt;pip install Gooey  //需要在sudo pip下安装，wxpython要求比较多,virtuanenv下比较麻烦，具体可以参考&lt;a href="https://wiki.wxpython.org/wxPythonVirtualenvOnMac"&gt;wxPythonVirtualenvOnMac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;依赖&lt;code&gt;wxpython&lt;/code&gt;，安装&lt;code&gt;wxpython&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install wxpython
&lt;span class="nb"&gt;cd&lt;/span&gt; /Library/Python/2.7/site-packages    
ln -s /usr/local/Cellar/wxpython/3.0.2.0/lib/python2.7/site-packages/wx-3.0-osx_cocoa/wx/ wx
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;上源码&lt;/h1&gt;
&lt;p&gt;cat mpv_gui.py&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class="c1"&gt;#import argparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gooey&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gooey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GooeyParser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;
    &lt;span class="c1"&gt;# 播放，调用系统服务（mpv）&lt;/span&gt;
    &lt;span class="n"&gt;mpv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/mpv&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# todo:变为独立进程&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;mpv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nd"&gt;@Gooey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chinese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GooeyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mpv_gui&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;请选择电影文件&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FileChooser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;点击执行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv mpv_gui.py mpv_gui
chmod +x mpv_gui
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后点击mpv_gui文件即可选择播放电影&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/mpv_guif12d19d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/mpv_gui28719e66a.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你想把这个工具打包成无依赖的系统软件，可以试试pyinstaller&lt;/p&gt;
&lt;h3&gt;todo&lt;/h3&gt;
&lt;p&gt;Gooey安装不方便，文件选择用tkinter的tkFileDialog就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkFileDialog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;askopenfilename&lt;/span&gt;

&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# we don&amp;#39;t want a full GUI, so keep the root window from appearing&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;askopenfilename&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# show an &amp;quot;Open&amp;quot; dialog box and return the path to the selected file , 在命令行下层？&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;后来发现可以直接安装mpv.app，之后绑定格式和播放工具 （参考 &lt;a href="http://songchenwen.com/tech/2015/05/09/mpv-player/"&gt;全能高效的播放器 mpv&lt;/a&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install mpv --with-bundle
brew linkapps mpv
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-31:mpv_gui.html</guid><category>tools</category></item><item><title>[译]使用Python Prompt Toolkit构建强大的REPL</title><link>/python-prompt-toolkit.html</link><description>&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/6.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;原文参考&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit/tree/master/examples/tutorial"&gt;Build a REPL With Python Prompt Toolkit&lt;/a&gt;,很喜欢这篇教程，清晰简单，读起来十分舒服，翻译过来分析给大家&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;正式开始翻译之前，我们先了解一些背景知识&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;python-prompt-toolkit是一个用于构建强大交互式命令行的 Python 工具库,许多好用而智能的命令行工具都构建在它上边&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ipython&lt;/li&gt;
&lt;li&gt;ptpython&lt;/li&gt;
&lt;li&gt;mycli&lt;/li&gt;
&lt;li&gt;pgcli&lt;/li&gt;
&lt;li&gt;xonsh&lt;/li&gt;
&lt;li&gt;gitsome&lt;/li&gt;
&lt;li&gt;http-prompt&lt;/li&gt;
&lt;li&gt;aws-shell&lt;/li&gt;
&lt;li&gt;haxor-news&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你用过其中的一些，你会惊叹于他们的智能和良好的交互式体验（就像fish）, 这些工具的背后便是我们今天的主角:&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;REPL&lt;/h3&gt;
&lt;p&gt;全称Read-Eval-Print Loop("读取-求值-输出"循环)，是一个简单的，交互式的编程环境.&lt;/p&gt;
&lt;p&gt;REPL使得探索性的编程和调试更加便捷，因为“读取-求值-输出”循环通常会比经典的“编辑-编译-运行-调试”模式要更快&lt;/p&gt;
&lt;h1&gt;译文&lt;/h1&gt;
&lt;p&gt;本文教你使用&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;prompt_toolkit&lt;/a&gt;来构建SQLite数据库的命令行工具&lt;/p&gt;
&lt;p&gt;prompt_toolkit是一个用于构建强大交互式命令行的 Python 工具库&lt;/p&gt;
&lt;p&gt;首先让我们用pip安装它：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install prompt_toolkit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;搞起!&lt;/p&gt;
&lt;h3&gt;读取用户输入&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;prompt&lt;/code&gt;方法接收用户输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/1.png?raw=true" /&gt;&lt;/p&gt;
&lt;h3&gt;REPL循环&lt;/h3&gt;
&lt;p&gt;现在让我们在一个while循环里调用&lt;code&gt;prompt&lt;/code&gt;方法，同时将输入历史保存在&lt;code&gt;InMemoryHistory&lt;/code&gt;对象里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/2.png?raw=true" /&gt;&lt;/p&gt;
&lt;h3&gt;语法高亮&lt;/h3&gt;
&lt;p&gt;我们已经做了一些基础工作，现在让我们将语法高亮加入到用户的输入中。我们知道用户将会输入sql语句，我们可以使用&lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;来高亮用户的输入.&lt;code&gt;lexer&lt;/code&gt;参数允许你设置词法分析器(译者注：lexical analyzer，简称lexer)，我们将使用Pygments 库的&lt;code&gt;SqlLexer&lt;/code&gt;来对输入做高亮处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/3.png?raw=true" /&gt;&lt;/p&gt;
&lt;h3&gt;自动补全&lt;/h3&gt;
&lt;p&gt;语法高亮屌爆啦！你造什么更牛一些吗？自动补全！开干！&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;WordCompleter&lt;/code&gt;类创建一个叫做&lt;code&gt;sql_completer&lt;/code&gt;的实例，初始化的时候，定义一组关键字集合，它们将用于自动补全&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sql_completer&lt;/code&gt;实例将被传递到&lt;code&gt;prompt&lt;/code&gt;函数里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.contrib.completers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;

&lt;span class="n"&gt;sql_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sql_completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/4.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;大约用了30行代码我们就得到了一个拥有自动补全和语法高亮的REPL。 再接再厉！&lt;/p&gt;
&lt;h3&gt;修改菜单样式&lt;/h3&gt;
&lt;p&gt;自动补全菜单忒丑，让我们给它点"颜色"看看！创建&lt;code&gt;DocumentStyle&lt;/code&gt;，使它成为pygments.style的子类. 定制自动补全菜单的颜色，并把样式作为参数传到&lt;code&gt;prompt&lt;/code&gt;函数里：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.contrib.completers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.style&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Style&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.styles.default&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultStyle&lt;/span&gt;

&lt;span class="n"&gt;sql_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa #000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#008888 #ffffff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#003333&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sql_completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You entered:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/5.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;剩下的工作就是如何对接到sqlite后端，作为读者的家庭作业好了。哈哈开玩笑啦...我们继续&lt;/p&gt;
&lt;h3&gt;对接到Sqlite&lt;/h3&gt;
&lt;p&gt;这一步是可选的 ;)  之前我们一直在关注如何构建REPL. 现在是时候将输入传给SQLite&lt;/p&gt;
&lt;p&gt;显然我没有考虑错误处理，但它或许可以作为你们的起步参考&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbortAction&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.history&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prompt_toolkit.contrib.completers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.lexers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SqlLexer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.style&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Style&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.token&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pygments.styles.default&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultStyle&lt;/span&gt;

&lt;span class="n"&gt;sql_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa #000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#008888 #ffffff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#003333&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Completions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProgressBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bg:#00aaaa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InMemoryHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SqlLexer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sql_completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DocumentStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;on_abort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AbortAction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETRY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;EOFError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;  &lt;span class="c1"&gt;# Control-D pressed.&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GoodBye!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:memory:&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/tutorial/screenshots/6.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;希望这篇文章能给你一些启发去构建命令行工具&lt;/p&gt;
&lt;p&gt;以上&lt;/p&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;h3&gt;unicode&lt;/h3&gt;
&lt;p&gt;在python2中使用&lt;code&gt;from __future__ import unicode_literals&lt;/code&gt;，这样一来所有字符串将被解释为unicode,无论是否有&lt;code&gt;u''&lt;/code&gt;,这样一来和python3保持了一致&lt;/p&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;p&gt;python-prompt-toolkit的教程写得极好，通过&lt;a href="https://github.com/jonathanslenders/python-prompt-toolkit/tree/master/examples"&gt;examples&lt;/a&gt;，花很短的时间，我们就能学会如何使用python-prompt-toolkit的丰富特性&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-31:python-prompt-toolkit.html</guid><category>tools</category></item><item><title>用python写一个命令行下的图床(更爽地用markdown写作)</title><link>/blog-and-fig-bed.html</link><description>&lt;h1&gt;一图胜千言&lt;/h1&gt;
&lt;p&gt;&lt;img alt="figbed" src="http://oav6fgfj1.bkt.clouddn.com/figbed.gif" /&gt;&lt;/p&gt;
&lt;h1&gt;安装与使用&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：目前只支持mac系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brew install pngpaste&lt;/li&gt;
&lt;li&gt;pip install figbed&lt;/li&gt;
&lt;li&gt;注册七牛账号，获得配置参数，更多细节参考&lt;a href="https://github.com/wwj718/figbed"&gt;wwj718/figbedi&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在账号设置页面，找到密钥标签，获取到AK和SK&lt;/li&gt;
&lt;li&gt;新建一个空间，在空间设置页面，获取到您的域名,和空间对于的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="http://oav6fgfj1.bkt.clouddn.com/figbed_md1.png" /&gt;，上边这张截图就是采用figbed处理的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建配置文件&lt;code&gt;~/.qiniu.yml&lt;/code&gt;，形如&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AK&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="n"&gt;SK&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="n"&gt;YOUR_DOAMIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bkt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clouddn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;YOUR_BUCKET&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bed&lt;/span&gt;
&lt;span class="n"&gt;PATH_SAVEAS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/BLOG/&lt;/span&gt;&lt;span class="n"&gt;IMAGE&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中AK,SK,YOUR_DOAMIN,YOUR_BUCKET已在上边介绍过了，PATH_SAVEAS是图片将要保存的本地路径（默认为/tmp），建议保存到文章同属的git库里，做个备份&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动图床服务：figbed&lt;/li&gt;
&lt;li&gt;截图完成后，使用command+v即可以获取到url&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;开发动机&lt;/h1&gt;
&lt;p&gt;我的博客采用pelican构建，托管在github上。&lt;/p&gt;
&lt;p&gt;采用markdown写作，博客托管在github上，可能已是技术圈的主流做法了。一般而言，图片可以一并存放在github中，静态博客生成器会有一套路径规则，把图片放到相应目录，之后在markdown里引用就行&lt;/p&gt;
&lt;h3&gt;我的写作场景&lt;/h3&gt;
&lt;p&gt;大多时候，我喜欢一边写作，一边准备图片，时常是顺手截图（使用QQ截图，近期换成&lt;code&gt;jietu&lt;/code&gt;）。截下的图片，保留在剪切板里，之后粘贴到印象笔记里，然后右键保存图片到对于目录里，这样就可以在文章里引用了&lt;/p&gt;
&lt;h3&gt;不爽的地方&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过程冗长，印象笔记在此只是中转站的作用&lt;/li&gt;
&lt;li&gt;图片是相对路径，不是url，所以无法即时在预览里呈现&lt;/li&gt;
&lt;li&gt;图片的尺寸需要调整（我一般使用美图秀秀在线版）&lt;/li&gt;
&lt;li&gt;github网速慢，图片加载很卡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;改进过程&lt;/h3&gt;
&lt;p&gt;我试图去优化这个过程，从截图到获得url。我期待的流程是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;截图&lt;/li&gt;
&lt;li&gt;保存到七牛云（良心推荐），生产url&lt;/li&gt;
&lt;li&gt;图片同时保存到本地指定目录，同文章原文（content）一样被git管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在改进过程中，找到过一些工具，但都不理想，于是到github搜寻一番，找到xiaochao同学的&lt;a href="https://github.com/xiaochao/cut"&gt;cut&lt;/a&gt;, readme里提到&lt;code&gt;pngpaste&lt;/code&gt;，醍醐灌顶，我需要的正是这个东西，能在命令行将剪切板的图片保存到本地&lt;/p&gt;
&lt;h1&gt;注意&lt;/h1&gt;
&lt;p&gt;目前只支持mac，使用七牛云，其他平台可以参考&lt;a href="https://github.com/wwj718/figbed"&gt;figbed&lt;/a&gt;文末&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-26:blog-and-fig-bed.html</guid><category>tools</category></item><item><title>bigbluebutton测试一例</title><link>/bigbluebutton-test.html</link><description>&lt;h1&gt;环境参数&lt;/h1&gt;
&lt;h3&gt;服务器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阿里云&lt;/li&gt;
&lt;li&gt;ubuntu14.04 64bit &lt;/li&gt;
&lt;li&gt;4核16G &lt;/li&gt;
&lt;li&gt;带宽按流量计，100M&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;软件&lt;/h3&gt;
&lt;p&gt;bigbluebutton 1.0版&lt;/p&gt;
&lt;h1&gt;压力情况&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;29人同时加入一个会议室&lt;/li&gt;
&lt;li&gt;24人同时开启麦克风和摄像头&lt;/li&gt;
&lt;li&gt;持续时间1.5小时（19:00-20:30）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参数监控&lt;/h1&gt;
&lt;p&gt;首先我们给出正常运行时，服务器的压力情况&lt;/p&gt;
&lt;p&gt;首先我们来看下cpu和内存使用情况:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu1" src="img/bbbtest/cpu1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu2" src="img/bbbtest/cpu2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu3" src="img/bbbtest/cpu3.png" /&gt;&lt;/p&gt;
&lt;p&gt;从中可以看到cpu使用率在1/3左右，内存用了一半（8G，内存随人数的增加不明显）&lt;/p&gt;
&lt;p&gt;这是人员退出后的cpu/内存情况，可以看到内存变化不大：&lt;/p&gt;
&lt;p&gt;&lt;img alt="cpu4" src="img/bbbtest/cpu4.png" /&gt;&lt;/p&gt;
&lt;p&gt;m/mMISmi
接着我们看下网络使用情况：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iftop" src="img/bbbtest/iftop.png" /&gt;&lt;/p&gt;
&lt;p&gt;从中可以看出，输出流量稳定在5-6 m/s,输入保持在500k/s (24人同时在线,无卡顿)&lt;/p&gt;
&lt;h1&gt;遇到的问题与解决方案&lt;/h1&gt;
&lt;h3&gt;问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;safari会出现卡顿或退出，声音断续&lt;/li&gt;
&lt;li&gt;无法将桌面布局同步到所有客户端(应该是软件问题,0.9版本正常)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览器卡顿与退出问题,通过采用chrome内核的浏览器可以解决（firefox和高版本ie也表现良好）&lt;/li&gt;
&lt;li&gt;无法同步所有客户端的问题，可以通过自建会议解决,详情请看后文&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;软件表现&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在大多客户端下，视频和语音都正常&lt;/li&gt;
&lt;li&gt;ppt和即时消息都正常&lt;/li&gt;
&lt;li&gt;投票功能正常&lt;/li&gt;
&lt;li&gt;视频流畅，整体延迟在2秒以内，无卡顿&lt;/li&gt;
&lt;li&gt;语音清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;结论&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;bigbluebutton在此次测试中表现优秀,可以完美支持小型会议&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些经验&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;浏览器需要支持flash，建议采用chrome内核的浏览器&lt;/li&gt;
&lt;li&gt;会议开始，应该向简单介绍bigbluebutton的使用方法，包括如何打开麦克风和摄像头以及举手发言之类的规则&lt;/li&gt;
&lt;li&gt;建议有个人负责给大家答疑，会议过程中与会者遇到使用问题应该即使给与解答，不影响会议主进程（可以建个qq群）&lt;/li&gt;
&lt;li&gt;当有人发言时，应当选择&lt;code&gt;演讲者外全部话筒静音&lt;/code&gt;，否则可能有杂音&lt;/li&gt;
&lt;li&gt;会议应该有个主控者，其他发言者通过举手发言,主控者可以在名字中标识,如&lt;code&gt;张三(主持人)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;软件定制相关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可以根据会议情况，定制入口页面，文件地址为&lt;code&gt;/var/www/bigbluebutton-default&lt;/code&gt;，其中index.html修改即生效，而&lt;code&gt;defautl.pdf&lt;/code&gt;是默认ppt，替换后需要&lt;code&gt;sudo bbb-conf --clean&lt;/code&gt;生效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/tomcat7/webapps/demo/demo1.jsp&lt;/code&gt;，修改即生效（修改api页面）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/tomcat7/webapps/demo/demo_header.jsp&lt;/code&gt;,修改banner&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/var/lib/tomcat7/webapps/demo/create.jsp&lt;/code&gt;，修改自建会议的入口页&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技巧：在&lt;code&gt;/var&lt;/code&gt;下使用&lt;code&gt;grep  "xxx" ./* -R&lt;/code&gt;搜索&lt;/p&gt;
&lt;h1&gt;自建会议&lt;/h1&gt;
&lt;p&gt;访问&lt;code&gt;http://YOUR_HOST/demo/demo1.jsp&lt;/code&gt;，点击create，然后建立你自己的会议,诸如我们将会议起名为wwj_meeting&lt;/p&gt;
&lt;p&gt;之后分享这个链接，其他人就能加入：&lt;code&gt;http://YOUR_HOST/demo/create.jsp?action=invite&amp;amp;meetingID=wwj_meeting%27s+meeting&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;自动加入的方式（可用js）为&lt;code&gt;http://YOUR_HOST/demo/create.jsp?username=小明&amp;amp;meetingID=wwj_meeting%27s+meeting&amp;amp;action=enter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在自建会议中，创建者默认设为主持人，话筒不会出现被抢夺情况&lt;/p&gt;
&lt;p&gt;此外创建者可以同步页面给其他用户&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-06:bigbluebutton-test.html</guid><category>技术</category></item><item><title>为你的服务构建即时通讯和客服系统</title><link>/build-im.html</link><description>&lt;p&gt;这部分会作为下周去北京参加&lt;a href="http://www.meetup.com/Beijing-Open-edX-Meetup/"&gt;Beijing Open edX Meetup&lt;/a&gt;的分享之一，有兴趣的小伙伴可以到现场围观&lt;/p&gt;
&lt;p&gt;我将分享的另一个topic是《Open edX Architecture》&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;由于斯坦福跳票的缘故，edx迟迟没有内置的chat功能,几年前斯坦福大学团队准备实现这个功能，也加入到feature里了，最终没有实现，今年年初整个特性移除了。&lt;/p&gt;
&lt;p&gt;所以同学们只能自食其力了，所幸IM是个常用的功能，github里与许多很好的实现&lt;/p&gt;
&lt;p&gt;选型时权衡的因素主要包括社区热度，项目成熟程度，技术架构,拓展性&lt;/p&gt;
&lt;p&gt;对比了一番，我决定使用&lt;a href="https://github.com/RocketChat/Rocket.Chat"&gt;Rocket.Chat&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Rocket.Chat&lt;/h1&gt;
&lt;p&gt;Rocket.Chat是自托管的chat服务,采用Meteor构建，具有许多优秀的特性&lt;/p&gt;
&lt;h3&gt;特性&lt;/h3&gt;
&lt;p&gt;主要吸引我的特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自托管，支持docker&lt;/li&gt;
&lt;li&gt;跨平台（web/mobile/desktop）&lt;/li&gt;
&lt;li&gt;私有群组&lt;/li&gt;
&lt;li&gt;桌面通知&lt;/li&gt;
&lt;li&gt;@某人&lt;/li&gt;
&lt;li&gt;Markdown支持&lt;/li&gt;
&lt;li&gt;Emojis&lt;/li&gt;
&lt;li&gt;内嵌多媒体&lt;/li&gt;
&lt;li&gt;超链智能解析预览&lt;/li&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;li&gt;全文搜索&lt;/li&gt;
&lt;li&gt;消息收藏&lt;/li&gt;
&lt;li&gt;客服系统&lt;/li&gt;
&lt;li&gt;I18N&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;支持webhook&lt;/li&gt;
&lt;li&gt;支持聊天机器人&lt;/li&gt;
&lt;li&gt;cas/oauth2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们发现这是slack的绝佳替代。你可以通过cas/oauth2轻易地与你的系统整合，通过webhook和聊天机器人，你可以多系统做极大的拓展&lt;/p&gt;
&lt;p&gt;所有的特性如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BYOS (bring your own server)&lt;/li&gt;
&lt;li&gt;Multiple Rooms&lt;/li&gt;
&lt;li&gt;Direct Messages&lt;/li&gt;
&lt;li&gt;Private Groups&lt;/li&gt;
&lt;li&gt;Public Channels&lt;/li&gt;
&lt;li&gt;Desktop Notifications&lt;/li&gt;
&lt;li&gt;Mentions&lt;/li&gt;
&lt;li&gt;Avatars&lt;/li&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;Emojis&lt;/li&gt;
&lt;li&gt;Reactions&lt;/li&gt;
&lt;li&gt;TeX Math Rendering - inline math typesetting&lt;/li&gt;
&lt;li&gt;Media Embeds&lt;/li&gt;
&lt;li&gt;Link Previews&lt;/li&gt;
&lt;li&gt;Sent Message Edit and Deletion&lt;/li&gt;
&lt;li&gt;Transcripts / History&lt;/li&gt;
&lt;li&gt;File Upload / Sharing&lt;/li&gt;
&lt;li&gt;Scalable file sharing - S3 uploads with CDN downloads&lt;/li&gt;
&lt;li&gt;Full text search&lt;/li&gt;
&lt;li&gt;Live chat / Messaging call center&lt;/li&gt;
&lt;li&gt;LDAP Authentication&lt;/li&gt;
&lt;li&gt;CAS 1.0 support for education institutions and hosting providers worldwide&lt;/li&gt;
&lt;li&gt;Support for Okta SSO through SAML v2&lt;/li&gt;
&lt;li&gt;I18n - Supports 22 Languages&lt;/li&gt;
&lt;li&gt;Hubot Friendly&lt;/li&gt;
&lt;li&gt;(Beta) Face to Face Video Conferencing (aka WebRTC )&lt;/li&gt;
&lt;li&gt;(Beta) Multi-users Video Group Chat&lt;/li&gt;
&lt;li&gt;(Beta) Jitsi integration&lt;/li&gt;
&lt;li&gt;Audio calls&lt;/li&gt;
&lt;li&gt;Multi-users Audio Conference&lt;/li&gt;
&lt;li&gt;Screensharing&lt;/li&gt;
&lt;li&gt;XMPP bridge (try it)&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;Remote Locations Video Monitoring&lt;/li&gt;
&lt;li&gt;Native real-time APIs for Microsoft C#, Visual Basic, F# and other .NET supported languages (Get it!)&lt;/li&gt;
&lt;li&gt;API access from Perl and Java (community contributions)&lt;/li&gt;
&lt;li&gt;Chat-ops powered by Hubot: scalable horizontal app integration (early access)&lt;/li&gt;
&lt;li&gt;Massively scalable hosting and provisioning (beta testing now)&lt;/li&gt;
&lt;li&gt;Native Cross-Platform Desktop Application Windows, Mac OSX, or Linux&lt;/li&gt;
&lt;li&gt;Mobile app for iPhone, iPad, and iPod touch Download on AppStore!&lt;/li&gt;
&lt;li&gt;Mobile app for Android phone, tablet, and TV stick Available now on Google Play!&lt;/li&gt;
&lt;li&gt;Native Firefox OS Application (also for Desktop Firefox and Firefox for Android!) - Check the docs page for install instructions&lt;/li&gt;
&lt;li&gt;Sandstorm.io instant Rocket.Chat server Now on Sandstorm App Store&lt;/li&gt;
&lt;li&gt;Available on Cloudron Store&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一图胜千言&lt;/h3&gt;
&lt;p&gt;&lt;img alt="chat" src="http://7xrc4h.com1.z0.glb.clouddn.com/chat.png" /&gt;&lt;/p&gt;
&lt;h3&gt;live demo&lt;/h3&gt;
&lt;p&gt;https://demo.rocket.chat/&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;为了简化安装过程，我们采用docker(之后可以使用bitnami的发行版)，首先保证你装好了docker，关于docker的使用可以参考我的&lt;a href="http://blog.just4fun.site/docker-summary.html"&gt;docker使用小结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们采用docker-compose编排服务来编排容器，你可以采用pip来安装docker-compose：&lt;code&gt;pip install docker-compose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建文件docker-compose.yml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;db&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mongo&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;volumes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$PWD/data:/data/db&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$PWD/dump:/dump&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mongod --smallfiles&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;web&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rocketchat/rocket.chat&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;MONGO_URL=mongodb://db:27017/meteor&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ROOT_URL=http://119.254.98.58:8818&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;db:db&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8818:3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行服务：&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用跑在本地8818端口,如果你端口对外打开，你已经可以正常访问了&lt;/p&gt;
&lt;p&gt;一般而言我们采用nginx来做反向代理，如果你想用webrtc功能（语音和视频），那么你需要采用https，关于https的配置，可以参考&lt;a href="http://blog.just4fun.site/https-note.html"&gt;使用Let’s Encrypt(certbot)为你的网站生成免费的 SSL 证书&lt;/a&gt;,当然也可以参考&lt;a href="https://rocket.chat/docs/installation/manual-installation/configuring-ssl-reverse-proxy-with-nginx-md"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nginx配置形如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;upstream chat_server {
            server 127.0.0.1:8818  fail_timeout=0;
    }

server {
  listen 19818;
  ssl on;
  ssl_certificate /etc/nginx/conf/server.crt;
  ssl_certificate_key /etc/nginx/conf/server.key;
  server_name chat.example.com;

  location / {
        try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it


location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://chat_server;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首位注册用户将成为管理员&lt;/li&gt;
&lt;li&gt;rocket chat中的配置十分便捷合理,贴心极了,绝大多数功能级别的配置都只需要在用户界面做就行，这点很像discourse. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;与你的应用整合&lt;/h1&gt;
&lt;p&gt;下边我们将以Open edX为例，将即时通信和客户系统整合到其中。当然你可以模仿着将它整合到你自己的任何系统里&lt;/p&gt;
&lt;h3&gt;思路&lt;/h3&gt;
&lt;p&gt;Rocket.Chat与你的应用的整合主要是用户系统的整合，我们采用oauth2来整合两者。两个系统的其他功能的整合（诸如同步分组）可以通过REST apis来做，这是后话&lt;/p&gt;
&lt;p&gt;在我们的案例中，LMS作为oauth2 prividor , 而 RocketChat作为oauth2 consumer,这部分的知识可以参考oauth2文档。如果你做过insights/edxnote和LMS的对接，你大约已经熟悉了其中的流程&lt;/p&gt;
&lt;h3&gt;oauth2配置&lt;/h3&gt;
&lt;p&gt;这部分留待meetup上分享~/&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;update 2018.4.24&lt;/h3&gt;
&lt;p&gt;oauth 这块坑比较多&lt;/p&gt;
&lt;p&gt;比如user info中需要有id字段&lt;/p&gt;
&lt;p&gt;否则会报如下错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;web_1  | Exception while invoking method &amp;#39;login&amp;#39; Error: Service data for service test must include id
web_1  |     at AccountsServer.Ap.updateOrCreateUserFromExternalService (/app/bundle/programs/server/packages/accounts-base.js:1820:40)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;https 认证的问题可以在docker通过添加环境变量: &lt;code&gt;NODE_TLS_REJECT_UNAUTHORIZED=0&lt;/code&gt;&lt;/p&gt;
&lt;!--

#### 在RocketChat中
*  点击头像
*  打开管理选项
*  选择页面最下边的oauth（页面提示回调url为：https://chat.example.com/_oauth/openedx）

配置参数为


wzxhzdk:3



#### 在Open edX中
sudo /edx/bin/python.edxapp /edx/bin/manage.edxapp lms --setting=aws create_oauth2_client ：https://chat.example.com https://chat.example.com/_oauth/openedx confidential --client_name chat --client_id chat --client_secret secret --trusted

--&gt;

&lt;h3&gt;启用客服功能&lt;/h3&gt;
&lt;p&gt;使用者在使用的过程中有任何问题，可以即时向课程团队/网站管理人员求助&lt;/p&gt;
&lt;p&gt;只要你在rocketchat中开启livechat功能,之后一串js代码集成到你的页面里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!-- Start of Rocket.Chat Livechat Script --&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function(w, d, s, u) {
    w.RocketChat = function(c) { w.RocketChat._.push(c) }; w.RocketChat._ = []; w.RocketChat.url = u;
    var h = d.getElementsByTagName(s)[0], j = d.createElement(s);
    j.async = true; j.src = &amp;#39;https://chat.example.com/packages/rocketchat_livechat/assets/rocket-livechat.js&amp;#39;;
    h.parentNode.insertBefore(j, h);
})(window, document, &amp;#39;script&amp;#39;, &amp;#39;https://chat.example.com/livechat&amp;#39;);
&amp;lt;/script&amp;gt;
&amp;lt;!-- End of Rocket.Chat Livechat Script --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;一些有意思的想法&lt;/h1&gt;
&lt;p&gt;将RocketChat作为client,利用它的outgoing webhook将其作为一个输入工具来用&lt;/p&gt;
&lt;p&gt;这有点像微信公众号对微信的利用&lt;/p&gt;
&lt;p&gt;我之前做了一个留言墙，就是这样实现的&lt;/p&gt;
&lt;p&gt;你可以猜猜它怎么实现的&lt;/p&gt;
&lt;p&gt;如果是早先，我会这样做:跑一个server，等待请求。如果请求合法就使用websocket post到展示页面（墙）上&lt;/p&gt;
&lt;p&gt;为了好玩，我采用了无后端的设计，对此有兴趣的同学可以看看我的&lt;a href="http://blog.just4fun.site/kinto-note-05-31.html"&gt;如何架空经常500的后端程序员&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大体的想法就是讲RocketChat作为前端，后端采用kinto（你可以理解为firebase），当有新消息到来时，采用pusher服务，将消息pusher到消息强上，历史消息存留在kinto里，不必担心遗失&lt;/p&gt;
&lt;p&gt;这样一来我们既没有写前端，也没有写后端，也没有写客户端，但却做到了可以在任何终端往消息墙里发消息。&lt;/p&gt;
&lt;p&gt;这种做法是不是感觉十分unix，所有东西都是管道，我们只要关注input/output就行，组合这些积木就能得到我们想要的东西&lt;/p&gt;
&lt;h1&gt;其他的想象空间&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过REST API深度整合,构建点对点指导，私有群组，收费群组&lt;/li&gt;
&lt;li&gt;想象一下可能的场景&lt;ul&gt;
&lt;li&gt;一对一在线辅导，线上家教，线上英语辅导(技术层面是点对点的webRTC，服务器基本没有压力)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对接ai,重新打造个微信是不大可能的,而你几乎无法定制微信。而即时通信是个强需求，如何得到定制化的即时通信,诸如与现有系统整合,局域网的通信&lt;/li&gt;
&lt;li&gt;作为入口,利用incoming webhook，可以接受任何信息的输入。我们想象这样一个场景，当系统检测到异常时，发送讨论到群组，即可展开讨论，insight,这是github对hubot的用法(帮助运维的聊天机器人)&lt;/li&gt;
&lt;li&gt;用于实时课堂&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-07-04:build-im.html</guid><category>tools</category></item><item><title>我的vim/mavim/neovim配置</title><link>/vim-setting.html</link><description>&lt;h3&gt;历史负担&lt;/h3&gt;
&lt;p&gt;之前用的配置是&lt;a href="http://wklken.me/"&gt;wklken&lt;/a&gt;的&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;，wklken的vim插件相关的文章写得很棒&lt;/p&gt;
&lt;p&gt;近来觉得vim打开速度慢的让人无法忍受，想来是配置（插件）造成的，于是在目录中频繁打开关闭的文件偏好用sublime来编辑了&lt;/p&gt;
&lt;p&gt;可我对sublime的快捷键总也记不住，用了就丢那种，连跳转到行的快捷键都记不得，全局替换也要去按按钮，手指远远跟不上脑袋，有种播放视频卡顿的感觉，很是不爽。想想还是重写把vim配置好划算些。&lt;/p&gt;
&lt;h3&gt;需求分析&lt;/h3&gt;
&lt;p&gt;我发现实际上k-vim的大多配置，对我而言是多余的，而许多配置，又不舍得任，不妨从这里入手，只挑出非用不可的特性，翻&lt;a href="http://wklken.me/"&gt;wklken&lt;/a&gt;的&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;博客，恰好看到他的这篇文章：&lt;a href="http://www.wklken.me/posts/2016/02/03/some-vim-configs.html"&gt;一些VIM的个性化配置&lt;/a&gt;，里边把定制配置分条整理了，按需索取就行，我尽量少选&lt;/p&gt;
&lt;p&gt;先列出我偏好的配置，之后给出配置文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改leader键&lt;/li&gt;
&lt;li&gt;移动时, 保留到底部的空间&lt;/li&gt;
&lt;li&gt;自定义代码折叠toggle&lt;/li&gt;
&lt;li&gt;ctrl-n进行相对行号/绝对行号切换&lt;/li&gt;
&lt;li&gt;打开vim, 自动定位到上次最后变更位置&lt;/li&gt;
&lt;li&gt;F键区的映射&lt;/li&gt;
&lt;li&gt;分屏窗口切换时, 直接使用ctrl-h/j/k/l&lt;/li&gt;
&lt;li&gt;leader-/ 关闭掉上次搜索的高亮&lt;/li&gt;
&lt;li&gt;Python 写入注释#号时, 不每次都跳到行首&lt;/li&gt;
&lt;li&gt;强制保存:w!!, 没权限的时候&lt;/li&gt;
&lt;li&gt;保存文件时, 自动移除多余空格&lt;/li&gt;
&lt;li&gt;shell和python文件新建时, 自动插入行头&lt;/li&gt;
&lt;li&gt;启动的时候不显示那个援助索马里儿童的提示&lt;/li&gt;
&lt;li&gt;退出vim后，内容显示在终端屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;常用插件&lt;/h4&gt;
&lt;p&gt;首先是插件管理&lt;/p&gt;
&lt;p&gt;我们采用&lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle.vim&lt;/a&gt;,之前的&lt;a href="https://github.com/gmarik/vundle.git"&gt;gmarik/vundle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用方法很简单，先git clone到本地&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在配置文件里加上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set nocompatible              &amp;quot; be iMproved, required
filetype off                  &amp;quot; required

&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&amp;quot; let Vundle manage Vundle, required
Plugin &amp;#39;VundleVim/Vundle.vim&amp;#39;
Plugin &amp;#39;scrooloose/nerdtree&amp;#39;

&amp;quot; All of your Plugins must be added before the following line
call vundle#end()            &amp;quot; required
filetype plugin indent on    &amp;quot; required
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及我需要使用一些常见插件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;scrooloose/nerdtree&amp;#39;
Plugin &amp;#39;davidhalter/jedi-vim&amp;#39;
Plugin &amp;#39;scrooloose/syntastic&amp;#39;
Plugin &amp;#39;msanders/snipmate.vim&amp;#39;
Plugin &amp;#39;mattn/emmet-vim&amp;#39;
&amp;quot;Plugin &amp;#39;Valloric/YouCompleteMe&amp;#39; &amp;quot;YouCompleteMe编译比较麻烦，选用
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装插件只需要":PluginInstall"&lt;/p&gt;
&lt;h3&gt;插件笔记&lt;/h3&gt;
&lt;h5&gt;youcomplateme&lt;/h5&gt;
&lt;p&gt;youcomplateme值得学习&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/58978/"&gt; Vim自动补全神器:YouCompleteMe&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;ps:在我的环境里，需要进入virtualenv里才正常（这是我的个人笔记）&lt;/p&gt;
&lt;h5&gt;jedi-vim&lt;/h5&gt;
&lt;p&gt;jedi-vim 能智能理解python代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Completion &amp;lt;C-Space&amp;gt;
Goto assignments &amp;lt;leader&amp;gt;g (typical goto function)
Goto definitions &amp;lt;leader&amp;gt;d (follow identifier as far as possible, includes imports and statements)
Show Documentation/Pydoc K (shows a popup with assignments)
Renaming &amp;lt;leader&amp;gt;r
Usages &amp;lt;leader&amp;gt;n (shows all the usages of a name)
Open module, e.g. :Pyimport os (opens the os module)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jedi-vim 可以在写python时拥有ipython的感觉，&lt;code&gt;K&lt;/code&gt;文档查询&lt;/p&gt;
&lt;h3&gt;macvim&lt;/h3&gt;
&lt;p&gt;想用macvim的动机是，鼠标的移动能力是目之所及，即可操作，一些非批量化，零碎的任务是很适合用鼠标的，诸如移动到某个位置，切换版块，跳到tab标签，菜单功能。免去记忆很多实用频率不高，记了又忘的快捷键。同时不丧失vim的编辑优势，我可能没有十分强烈cui的原教旨倾向，在工具这方便大概算是实用主义者吧。我想用macvim这种带有gui功能的编辑器，使用场景主要是在gui文件夹中临时想编辑文件时。&lt;/p&gt;
&lt;h3&gt;neovim&lt;/h3&gt;
&lt;p&gt;使用neovim则是，反正都要重新配置，不如换用为新世纪倒灶的neovim，甩下vim的历史包袱，由于neovim和vim配置基本相同，所以neovim的配置和vim重叠，并不带来新的学习成本&lt;/p&gt;
&lt;p&gt;配置文件：&lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;配置文件和文档&lt;/h1&gt;
&lt;p&gt;具体的配置文档可以参考&lt;a href="https://github.com/wwj718/wwj718-vim"&gt;/wwj718-vim)&lt;/a&gt;，里边给出了使用的细节&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-26:vim-setting.html</guid><category>tools</category></item><item><title>使用Let’s Encrypt(certbot)为你的网站生成免费的 SSL 证书</title><link>/https-note.html</link><description>&lt;p&gt;--- 2018.08.15更新&lt;/p&gt;
&lt;p&gt;推荐使用&lt;a href="https://github.com/Neilpang/acme.sh"&gt;acme.sh&lt;/a&gt;,教材参考:&lt;a href="https://my.oschina.net/kimver/blog/1634575"&gt;申请Let's Encrypt通配符HTTPS证书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单易用，且没有cerbot的各种安装问题，连证书的自动更新都不必操心!&lt;/p&gt;
&lt;h3&gt;关于HTTPS&lt;/h3&gt;
&lt;p&gt;引维基百科的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来对数据包进行加密。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性&lt;/p&gt;
&lt;p&gt;HTTPS的主要思想是在不安全的网络上创建一安全信道，并可在使用适当的加密包和服务器证书可被验证且可被信任时，对窃听和中间人攻击提供合理的防护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;关于TLS/SSL&lt;/h3&gt;
&lt;p&gt;依然引用维基百科&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传输层安全协议（英语：Transport Layer Security，缩写：TLS），及其前身安全套接层（Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;相关算法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;TLS利用密钥算法在互联网上提供端点身份认证与通讯保密，其基础是公钥基础设施。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TLS包含三个基本阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对等协商支持的密钥算法&lt;/li&gt;
&lt;li&gt;基于非对称密钥的信息传输加密和身份认证、基于PKI证书的身份认证&lt;/li&gt;
&lt;li&gt;基于对称密钥的数据传输保密&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;国内现状&lt;/h3&gt;
&lt;p&gt;由于运营商的劫持，国内公司不堪其扰，纷纷将全站采用https&lt;/p&gt;
&lt;h3&gt;安装配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wget https://dl.eff.org/certbot-auto&lt;/li&gt;
&lt;li&gt;chmod a+x ./certbot-auto&lt;/li&gt;
&lt;li&gt;./certbot-auto --help all&lt;/li&gt;
&lt;li&gt;./certbot-auto certonly --standalone --email wwj@example.com  -d www.just4fun.site (可以使用二级域名)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果最后一条命令报错:&lt;code&gt;setuptools pkg_resources pip wheel failed with error code 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决方案是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install letsencryp

sudo apt-get purge python-virtualenv python3-virtualenv virtualenv

sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是，验证的时候保证80/443端口对外开放，且不被占用，如果这些端口实现被nginx占用，先停掉nginx&lt;/p&gt;
&lt;p&gt;完成后查看生成的证书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo tree /etc/letsencrypt/live/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;证书续签&lt;/h3&gt;
&lt;p&gt;证书的失效期是3个月，&lt;/p&gt;
&lt;p&gt;续签的命令为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./certbot-auto renew 或&lt;/li&gt;
&lt;li&gt;./certbot-auto renew --standalone --pre-hook "service nginx stop" --post-hook "service nginx start"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用cron添加一个定时任务，自动续签。&lt;/p&gt;
&lt;h3&gt;将证书用于nginx&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;upstream minio_server {
            server 127.0.0.1:9000 fail_timeout=0;
    }

# 监听 HTTPS 请求
server {
        #server_name example.com;
        listen 8443 ssl;

        # TLS 基本设置
        ssl_certificate /etc/letsencrypt/live/www.just4fun.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.just4fun.site/privkey.pem;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # 网站的其它设置不变
        # [...]
  location / {
        try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it


  location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://minio_server;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然我们可以将任意端口用于https，不过证书无法移植到其他服务器（可能是我还不熟悉）&lt;/p&gt;
&lt;p&gt;访问https://www.just4fun.site:18443，一切正常（我在青云的路由器上将8443端口映射为18443）&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE"&gt;超文本传输安全协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0"&gt;传输层安全协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html"&gt;SSL/TLS协议运行机制的概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/certbot/certbot"&gt;certbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.windrunner.info/sa/lets-encrypt.html"&gt;使用 Let's Encrypt 生成免费的 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/certbot.html"&gt;Certbot：自动部署 Let's Encrypt 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/c5c9d071e395"&gt;Let's Encrypt 终于支持通配符证书了&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;--no-bootstrap 不检测系统依赖 --verbose pip详细输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://my.oschina.net/kimver/blog/1634575"&gt;申请Let's Encrypt通配符HTTPS证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-19:https-note.html</guid><category>tools</category></item><item><title>构建类s3存储系统（Minio）</title><link>/install-Minio-Cloud-Storage.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;Open edX跟S3有许多整合，包括日志的存储，成绩单的存储，静态文件的存储和加速等，当然需要开启才被采用.亚马逊的服务真是业界标杆式的存在，一旦用过，便曾经沧海。&lt;/p&gt;
&lt;p&gt;可惜我们与S3无缘。&lt;/p&gt;
&lt;p&gt;后来想做edxapp负载均衡的时候，又想到这个问题，edxapp是有状态的，主要是涉及静态文件的时候，所以想用s3的开源实现，来替代S3，如此一来可以让代码的修改降到最低。把静态文件挪到云中，edxapp就无状态了&lt;/p&gt;
&lt;p&gt;github一番，也没找到特别合适的，所以用了七牛来替代，七牛的直传功能很不错，而且有各个平台的sdk！&lt;/p&gt;
&lt;h1&gt;S3的开源实现&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://github.com/jubos/fake-s3"&gt;fake-s3&lt;/a&gt;：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal of Fake S3 is to minimize runtime dependencies and be more of a development tool to test S3 calls in your code rather than a production server looking to duplicate S3 functionality. Trying RiakCS, ParkPlace/Boardwalk, or Ceph might be a place to start if that is your goal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可知，fake-s3适合看做一个开发测试环境，而不是生产可用的环境，类s3的生产系统，可以试试：RiakCS, ParkPlace/Boardwalk, or Ceph&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/minio/minio"&gt;minio&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Minio is an object storage server compatible with Amazon S3 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;minio&lt;/h1&gt;
&lt;h3&gt;minio是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike databases, Minio stores objects such as photos, videos, log files, backups, container / VM images and so on. Minio is best suited for storing blobs of information ranging from KBs to 5 TBs each. In a simplistic sense, it is like a FTP server with a simple get / put API over HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;minio是Go实现的一个类s3服务，和大多go项目一样，干净小巧，没有依赖，整个就一可运行。便利之极&lt;/p&gt;
&lt;h3&gt;不足&lt;/h3&gt;
&lt;p&gt;目前minio还很年轻，使用过程我遇到过一些bug&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web端没有用户概念，当然可以采用sdk来自行构建，稍后我会演示python的例子&lt;/li&gt;
&lt;li&gt;上传的文件不完整（损坏）&lt;/li&gt;
&lt;li&gt;提示上传成功后，却不予显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;构建外部存储系统的实践&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.minio.io/object-storage-in-practice-creating-a-reliable-data-store-9b424a22e8e"&gt;Object storage in practice: Creating a reliable data store&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章讨论了这样一种思路， 把存储任务分离出去，只留下 putObject()和 getObject()接口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;files sit in the object store, metadata goes to the database&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过这里没有用到直传&lt;/p&gt;
&lt;h3&gt;安装与启动&lt;/h3&gt;
&lt;p&gt;过程简单至极&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;curl -O https://dl.minio.io/server/minio/release/linux-amd64/minio&lt;/li&gt;
&lt;li&gt;chmod +x minio&lt;/li&gt;
&lt;li&gt;./minio --help&lt;/li&gt;
&lt;li&gt;./minio server /tmp/test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="minio" src="http://7xrc4h.com1.z0.glb.clouddn.com/MINIO.png?imageView2/2/w/1000" /&gt;&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.minio.io/docs/minio-server-configuration-files-guide"&gt;Minio Server Configuration Files Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;存储结构&lt;/h3&gt;
&lt;p&gt;就是原始目录，很好地与其他整合（诸如nginx）&lt;/p&gt;
&lt;h3&gt;可能的场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作为内容管理平台是完备的&lt;/li&gt;
&lt;li&gt;作为用户级别的资源管理平台（诸如视频的管理平台，播放使用nginx），还有些问题&lt;/li&gt;
&lt;li&gt;没有用户级别的权限&lt;/li&gt;
&lt;li&gt;没有用户系统&lt;/li&gt;
&lt;li&gt;可能的出路&lt;ul&gt;
&lt;li&gt;期待之后有用户系统，可以对接到cas/oauth2&lt;/li&gt;
&lt;li&gt;在nginx这里加一层？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也许你期待的云盘，可以试试seafile和owncloud&lt;/li&gt;
&lt;li&gt;作为抽象存储服务，采用sdk才做这个服务，可以想象为局域网中的七牛，不足是没有webhook（callback）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;client/sdk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://minio.io/download/#minio-client"&gt;minio-client&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minio/mc"&gt;mc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minio/minio-py"&gt;minio-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minio/minio-py/blob/master/API.md#presigned_post_policy"&gt;presigned_post_policy&lt;/a&gt; 控制权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;采用s3客户端&lt;/h3&gt;
&lt;p&gt;有没有可能采用s3的生态链，诸如上传前端&lt;/p&gt;
&lt;h4&gt;s3cmd&lt;/h4&gt;
&lt;p&gt;sudo pip install s3cmd&lt;/p&gt;
&lt;p&gt;创建~/.s3cfg&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;host_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; http://s3.just4fun.site/
&lt;span class="nv"&gt;host_bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; http://s3.just4fun.site/
&lt;span class="nv"&gt;access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; xxx
&lt;span class="nv"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; xxx
&lt;span class="nv"&gt;signature_v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;bucket_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; us-east-1
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd mb s3://www.just4fun.com  &lt;span class="c1"&gt;#create&lt;/span&gt;
s3cmd ls
s3cmd ls s3://www.just4fun.com 
s3cmd put some-file.xml s3://www.just4fun.com /somefile.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;awscli&lt;/h3&gt;
&lt;p&gt;pip install awscli&lt;/p&gt;
&lt;p&gt;文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.aws.amazon.com/cli/latest/reference/s3/index.html &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aws configure //配置文件位置在哪里 ~/.aws/
aws configure &lt;span class="nb"&gt;set&lt;/span&gt; default.s3.signature_version s3v4
aws --endpoint-url http://s3.just4fun.site s3 ls
aws --endpoint-url http://s3.just4fun.site s3 ls  //list your buckets
aws --endpoint-url http://s3.just4fun.site s3 ls  s3://edx  // list contents inside bucket
aws --endpoint-url http://s3.just4fun.site  s3 mb s3://mybucket   // make a bucket
aws --endpoint-url http://s3.just4fun.site s3 cp /tmp/aa.html s3://mybucket //add an object to a bucket
aws  s3api list-objects --bucket edx --query Contents&lt;span class="o"&gt;[]&lt;/span&gt;.&lt;span class="o"&gt;[&lt;/span&gt;Key,Size&lt;span class="o"&gt;]&lt;/span&gt; --endpoint-url http://s3.just4fun.site  //列出文件大小
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;前端上传：&lt;a href="https://github.com/FineUploader/fine-uploader"&gt;fine-uploader&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fineuploader.com/demos.html#amazon-demo"&gt;demo&lt;/a&gt;:是否支持回调 类似七牛 s3支持，minio不确定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前端通过凭证操作，这是后端sdk构建的，和存储层无关&lt;/p&gt;
&lt;h4&gt;boto&lt;/h4&gt;
&lt;p&gt;edx是用boto，不过boto和s3耦合，不容易替换为s3开源实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boto.s3.connection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;S3Connection&lt;/span&gt;  &lt;span class="c1"&gt;#可查看细节，可以不连默认host&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt; 
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3.just4fun.site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以试试&lt;a href="https://github.com/boto/botocore/issues/424"&gt;这里&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2016.09.18更新&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.minio.io/docs/how-to-use-aws-sdk-for-python-with-minio-server"&gt;How to use AWS SDK for Python with Minio Server&lt;/a&gt;给出了boto3中可以如何十一minio替代s3&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;构建带有身份的存储系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;minio仅仅视为存储层&lt;/li&gt;
&lt;li&gt;采用&lt;a href="https://github.com/minio/minio-py#presigned-operations"&gt;Presigned Operations&lt;/a&gt;,控制细粒度的存储，上传凭证是核心所在&lt;/li&gt;
&lt;li&gt;之后采用通用的上传前端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;凭证相关：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;minio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minio&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;minio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostPolicy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;minio.error&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ResponseError&lt;/span&gt;

&lt;span class="n"&gt;post_policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostPolicy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# set bucket name location for uploads.&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_bucket_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# set key prefix for all incoming uploads.&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_key_startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# set content length for incoming uploads.&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_content_length_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# set expiry 10 days into future.&lt;/span&gt;
&lt;span class="n"&gt;expires_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_expires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expires_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Minio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3.just4fun.site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 默认采用的是https，否则报错&lt;/span&gt;
               &lt;span class="n"&gt;access_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AN0GSB29FGW7UXQ6WIEM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wyyzr8/D5lEOoCfZymID4ZG/PNhb6th7YAdVT/Zs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;url_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;presigned_post_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_policy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;curl -X POST {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curl_str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;curl_cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-F {0}={1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signed_form_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

        &lt;span class="c1"&gt;# print curl command to upload files.&lt;/span&gt;
        &lt;span class="n"&gt;curl_cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-F file=@/tmp/aa.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curl_cmd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ResponseError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;支持多用户吗？&lt;/p&gt;
&lt;p&gt;ACCESSKEYID是全局只有一个？无法天然支持多client？需要在应用逻辑里做？&lt;/p&gt;
&lt;p&gt;可以使用这个机制:&lt;a href="https://docs.minio.io/docs/upload-files-from-browser-using-pre-signed-urls"&gt;Upload files from browser using pre-signed URLs&lt;/a&gt;，类似七牛&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-19:install-Minio-Cloud-Storage.html</guid><category>技术</category></item><item><title>消息队列中间件学习笔记</title><link>/mq-note.html</link><description>&lt;h1&gt;中间件（Middleware）&lt;/h1&gt;
&lt;p&gt;根据维基百科的说法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中间件（英语：Middleware）提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通，特别是应用软件对于系统软件的集中的逻辑，在现代信息技术应用框架如Web服务、面向服务的体系结构等中应用比较广泛。如数据库、Apache的Tomcat。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;中间件技术创建在对应用软件部分常用功能的抽象上，将常用且重要的过程调用、分布式组件、消息队列、事务、安全、连结器、商业流程、网络并发、HTTP服务器、Web Service等功能集于一身或者分别在不同品牌的不同产品中分别完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;一般认为在商业中间件及信息化市场主要存在微软阵营、Java阵营、开源阵营。阵营的区分主要体现在对下层操作系统的选择以及对上层组件标准的制订&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;我此前对中间件的理解是&lt;code&gt;对应用软件部分常用功能的抽象&lt;/code&gt;，它运行在操作系统之上，对外提供一种常用而抽象的服务，典型代表有数据库、缓存、消息队列&lt;/p&gt;
&lt;h1&gt;消息队列(Message queue)&lt;/h1&gt;
&lt;p&gt;我们同样引用维基百科&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式.消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列互交。消息会保存在队列中，直到接收者取回它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了消息队列，事件可以异步地发生&lt;/p&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;消息队列常常保存在链表结构中。拥有权限的进程可以向消息队列中写入或读取消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;优缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;很多情况下我们需要异步的通信协议。比如，一个进程通知另一个进程发生了一个事件，但不需要等待回应。但消息队列的异步特点，也造成了一个缺点，就是接收者必须轮询消息队列，才能收到最近的消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;和信号相比，消息队列能够传递更多的信息。与管道相比，消息队列提供了有格式的数据，这可以减少开发人员的工作量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;ZeroMQ&lt;/h1&gt;
&lt;h3&gt;是什么&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;所有网络交互所使用的API实际上是Berkeley套接字(BSD) 。这个源自1980年代早期的协议是TCP/IP协议的最原始实现。而且可以说，在当今各操作系统中，它是受到最广泛支持的API，也是这些操作系统的核心组件之一。人们对BSD套接字的了解较多的是点对点的连接。点对点连接需要显式地建立连接、销毁连接、选择协议（TCP/UDP）和处理错误等。一旦你解决了以上所有问题，你就进入应用协议层（如HTTP）的世界了，这里需要的是组帧、缓存和处理逻辑等。换言之，编写高性能网络协议的应用程序一点儿也不复杂。
  如果我们能对各种套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，这不是件很好的事情吗？这正是ZeroMQ（ØMQ/ZMQ）网络库的由来：“它提供一些跨多种传输协议（如进程内通讯、IPC、TCP和广播）的套接字供你使用。你可使用多种方式实现N对N的套接字连接，譬如：扇出、发布订阅、任务分发以及请求响应。”&lt;/p&gt;
&lt;p&gt;它更像是一个底层的网络通讯库，在Socket API之上做了一层封装，将网络通讯、进程通讯和线程通讯抽象为统一的API接口&lt;/p&gt;
&lt;p&gt;这是个类似于Socket的一系列接口，他跟Socket的区别是：普通的socket是端到端的（1:1的关系），而ZMQ却是可以N：M 的关系，人们对BSD套接字的了解较多的是点对点的连接，点对点连接需要显式地建立连接、销毁连接、选择协议（TCP/UDP）和处理错误等，而ZMQ屏蔽了这些细节，让你的网络编程更为简单。ZMQ用于node与node间的通信，node可以是主机或者是进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;优势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP：ZeroMQ基于消息，消息模式，而非字节流。&lt;/li&gt;
&lt;li&gt;RPC：ZeroMQ完全是异步的，你可以随时增加/删除参与者。&lt;/li&gt;
&lt;li&gt;XMPP：ZeroMQ更简单、快速、更底层。Jabber可建在ØMQ之上。&lt;/li&gt;
&lt;li&gt;AMQP：完成相同的工作，ZeroMQ要快100倍，而且不需要代理（规范更简洁——少278页）&lt;/li&gt;
&lt;li&gt;IPC：ZeroMQ可以跨多个主机盒，而非单台机器。&lt;/li&gt;
&lt;li&gt;CORBA：ZeroMQ不会将复杂到恐怖的消息格式强加于你。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;三个基本模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Request-Reply&lt;/li&gt;
&lt;li&gt;Publisher-Subscriber&lt;/li&gt;
&lt;li&gt;Parallel Pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.searchtb.com/2012/08/zeromq-primer.html"&gt;ZeroMQ的学习和研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/news/2010/09/introduction-zero-mq"&gt;ØMQ(ZeroMQ)简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/kent45/article/details/10397917"&gt;在python中引入zeromq消息中间件环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/anjuke/zguide-cn/blob/master/chapter1.md"&gt;ZMQ 指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;RabbitMQ&lt;/h1&gt;
&lt;p&gt;RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件的一种&lt;/p&gt;
&lt;p&gt;ZeroMQ 和 RabbitMQ 都支持一个开源的消息协议:&lt;code&gt;AMQP&lt;/code&gt;。AMQP的一个优点是它是一个灵活和开放的协议.不过ZeroMQ不支持消息持久化和崩溃恢复，&lt;code&gt;RabbitMQ支持持久化&lt;/code&gt;。如果RabbitMQ死掉了，消息并不会丢失，当队列重启，一切都会回来&lt;/p&gt;
&lt;h3&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何保证消息被某个消费者取得：当从队列当中取出一个消息的时候，RabbitMQ需要应用显式地回馈说已经获取到了该消息。如果一段时间内不回馈，RabbitMQ会将该消息重新分配给另外一个绑定在该队列上的消费者。另一种情况是消费者断开连接，但是获取到的消息没有回馈，则RabbitMQ同样重新分配&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14659335/rabbitmq-server-fails-to-start-after-hostname-has-changed-for-first-time"&gt;rabbitmq-server fails to start after hostname has changed for first time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://rabbitmq.mr-ping.com/"&gt;RabbitMQ 中文文档&lt;/a&gt;摘记&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以做什么&lt;ul&gt;
&lt;li&gt;消息系统允许软件、应用相互连接和扩展．这些应用可以相互链接起来组成一个更大的应用&lt;/li&gt;
&lt;li&gt;消息系统通过将消息的发送和接收分离来实现应用程序的异步和解偶&lt;/li&gt;
&lt;li&gt;或许你正在考虑进行数据投递，非阻塞操作或推送通知。或许你想要实现发布／订阅，异步处理，或者工作队列。所有这些都可以通过消息系统实现&lt;/li&gt;
&lt;li&gt;RabbitMQ附带了一个易于使用的可视化管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装&lt;ul&gt;
&lt;li&gt;默认用户访问：guest：guest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/AMQP/AMQP_0-9-1_Model_Explained.html"&gt;AMQP 0.9.1 模型解析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;消息代理（message brokers）从发布者（publishers）亦称生产者（producers）那儿接收消息，并根据既定的路由规则把接收到的消息发送给处理消息的消费者（consumers）。由于AMQP是一个网络协议，所以这个过程中的发布者，消费者，消息代理 可以存在于不同的设备上。&lt;/li&gt;
&lt;li&gt;AMQP 0-9-1 模型简介:消息（message）被发布者（publisher）发送给交换机（exchange），交换机常常被比喻成邮局或者邮箱。然后交换机将收到的消息根据路由规则分发给绑定的队列（queue）。最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。&lt;/li&gt;
&lt;li&gt;当“消息确认”被启用的时候，消息代理不会完全将消息从队列中删除，直到它收到来自消费者的确认回执（acknowledgement）&lt;/li&gt;
&lt;li&gt;消费者&lt;ul&gt;
&lt;li&gt;将消息投递给应用 ("push API")&lt;/li&gt;
&lt;li&gt;应用根据需要主动获取消息 ("pull API")&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMQP连接通常是长连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用教程（python版）&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[1]Hello_World.html"&gt;hello world&lt;/a&gt;:使用pika库&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/send.py"&gt;send.py 源码&lt;/a&gt;、&lt;a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/receive.py"&gt;receive.py源码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列出所有队列:sudo rabbitmqctl list_queues&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[3]Publish_Subscribe.html"&gt;发布、订阅&lt;/a&gt;：在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上&lt;ul&gt;
&lt;li&gt;交换器和队列之间的联系我们称之为绑定（binding）&lt;ul&gt;
&lt;li&gt;列出所有绑定rabbitmqctl list_bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[6]RPC.html"&gt;远程过程调用&lt;/a&gt;：用celery吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rabbitmq.mr-ping.com/"&gt;RabbitMQ 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ftofficer.com/2010/03/translation-rabbitmq-python-rabbits-and-warrens/"&gt;兔子和兔子窝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://my.oschina.net/guol/blog/186432?fromerr=IGi2rm5U"&gt;Rabbitmq学习之路1-基本概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;选择&lt;/h3&gt;
&lt;p&gt;仔细分析应用程序的需求就能让更加清楚哪种交互机制才是解决问题的最佳之选&lt;/p&gt;
&lt;h3&gt;RabbitMQ in edx&lt;/h3&gt;
&lt;h4&gt;configuration中的一些配置&lt;/h4&gt;
&lt;p&gt;详情参考&lt;a href="https://github.com/edx/configuration/blob/named-release/dogwood.rc/playbooks/roles/rabbitmq/defaults/main.yml"&gt;rabbitmq/defaults/main.yml&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EDXAPP_RABBIT_HOSTNAME: &amp;#39;localhost&amp;#39;
rabbitmq_port: 5672
rabbitmq_management_port: 15672
rabbitmq_ip: &amp;quot;{{ ansible_default_ipv4.address }}&amp;quot;

XQUEUE_RABBITMQ_HOSTNAME: &amp;#39;localhost&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在edx中RabbitMQ被当做服务使用，基本是透明的&lt;/p&gt;
&lt;h3&gt;一些有用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看帮助：sudo rabbitmqctl -h&lt;/li&gt;
&lt;li&gt;列出所有用户&lt;ul&gt;
&lt;li&gt;admin[administrator]、celery  [administrator]、edx [administrator]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看绑定：sudo rabbitmqctl list_bindings&lt;ul&gt;
&lt;li&gt;参考:&lt;a href="http://rabbitmq.mr-ping.com/tutorials_with_python/[3]Publish_Subscribe.html"&gt;发布/订阅&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列出所有队列:sudo rabbitmqctl list_queues&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-06-02:mq-note.html</guid><category>技术</category></item><item><title>如何架空经常500的后端程序员</title><link>/kinto-note-05-31.html</link><description>&lt;blockquote&gt;
&lt;p&gt;当你知道自己要做什么，才存在适合你的工具。这个时候，你与捷径仅有github的距离   --by 我（偶尔500的后端程序员）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上边这句话，可以看做对“没有银弹”的一种解读&lt;/p&gt;
&lt;p&gt;创世初，荆棘遍地，百废待兴，先民试图通过发明一种新的编程语言，来救济陷入沼泽的巨兽，一时间，倚天屠龙，寒光夺目，庙堂、江湖，英雄辈出。&lt;/p&gt;
&lt;p&gt;直到后来，人类发现甚至就“php是不是最好的语言”都无法达成一致，拉黑取关，火把相向&lt;/p&gt;
&lt;p&gt;人们才痛心疾首地发现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有银弹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对这段历史有更多兴趣的同学可以自行坠崖，以获上古秘籍《人月神话》于山洞&lt;/p&gt;
&lt;p&gt;如果你想要的是，“最强大最好的最快的通用后端”，那你可以关掉网页看冰与火之歌去啦！（这周的更新啦！感谢小钗~）。如果你只是需要一个轻巧的抽象数据存储服务，有一般的身份验证，版本递增的功能，又或者如果你喜欢google的firebase这类东西（什么？你还不知道firebase这种神器？！google！），那么你说不定会喜欢我要推荐的这个东西&lt;/p&gt;
&lt;h1&gt;kinto&lt;/h1&gt;
&lt;p&gt;我将kinto看做python的BaaS(Backend as a Services)实现，你可以把它看做一个json server，如果你用过json-server，你应该对它很有好感，json-server是我最喜欢的工具之一，如果你对它不了解可以查看我之前的这篇文章:&lt;a href="http://blog.just4fun.site/use-json-server.html"&gt;使用json-server来帮助前后端分离&lt;/a&gt;，但是json server仅仅是个作为测试用的server，不具备作为BaaS的能力，首先它没有身份的概念，任何用户可以改写数据&lt;/p&gt;
&lt;p&gt;kinto支持用户身份认证，支持细粒度的权限，支持建议的查询，支持数据验证，它与同类产品的比较可以看这里:&lt;a href="http://kinto.readthedocs.io/en/latest/faq.html#how-does-kinto-compare-to-other-solutions"&gt;How does Kinto compare to other solutions&lt;/a&gt;，你可以把它看做生产可用的json—server&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;p&gt;这是官方的&lt;a href="https://kinto.dev.mozaws.net/v1/"&gt;demo&lt;/a&gt;,我们也可以自行搭建&lt;/p&gt;
&lt;h3&gt;test by httpie/postman&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;data&amp;quot;: {&amp;quot;description&amp;quot;: &amp;quot;Write a tutorial explaining Kinto&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;todo&amp;quot;}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
http POST https://kinto.dev.mozaws.net/v1/buckets/default/collections/tasks/records &lt;span class="se"&gt;\&lt;/span&gt;
-v --auth &lt;span class="s1"&gt;&amp;#39;wwj:wwj-secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;response为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Write a tutorial explaining Kinto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0d59f3db-0c5b-449a-8d12-e3408311ae8b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;last_modified&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1464699069634&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;permissions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;basicauth:d6b8c4bd7214846a9b8c09842a2599bb299df0e68594b69ce18a63c6facec586&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们来看看我们存下的数据还在不在&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http  https://kinto.dev.mozaws.net/v1/buckets/default/collections/tasks/records &lt;span class="se"&gt;\&lt;/span&gt;
-v --auth &lt;span class="s1"&gt;&amp;#39;wwj:wwj-secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;哈哈，数据被存下了&lt;/p&gt;
&lt;p&gt;我们也可以在&lt;a href="http://kinto.github.io/kinto-admin/"&gt;kinto-admin&lt;/a&gt;中可以使用web界面来管理我们提交的东西&lt;/p&gt;
&lt;p&gt;聪明的你一定发现了，我们可以在任何时候任何client里保存这些数据，这样一来，我们可以写没有后端的应用！&lt;/p&gt;
&lt;p&gt;如果你熟悉restful风格的接口，上边的请求url你应该好不陌生&lt;code&gt;https://kinto.dev.mozaws.net/v1/buckets/default/collections/tasks/records&lt;/code&gt;，buckets/collections和tasks都是命名空间而已，你可以往里构建你的数据框架，就像在数据库里建库建表一样&lt;/p&gt;
&lt;p&gt;don't be shy，别被条条框框束缚，放手去做吧&lt;/p&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;更多的用法参考&lt;a href="http://kinto.readthedocs.io/en/latest/overview.html"&gt;kinto.readthedocs.io&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;关于后端的思考&lt;/h1&gt;
&lt;p&gt;如果我只是写一个&lt;a href="http://todomvc.com/"&gt;todo 
mvc&lt;/a&gt;应用，为何我需要构建一个后端呢，我要的仅仅是带有用户身份的存储功能，数据模型也很标准，无非是有一个 todo list，这个集合里是一堆item，每个item用json存储&lt;/p&gt;
&lt;p&gt;增删改的逻辑完全在web app或是mobile app里实现，后端仅仅是为了永久化和同步设备间的数据，这个需求看去如此常见，数据如此规则，为何不抽象出一个通用的后端&lt;/p&gt;
&lt;p&gt;当然早就有人帮你做好啦，这类的东西叫做BaaS&lt;/p&gt;
&lt;h1&gt;对前端的意义&lt;/h1&gt;
&lt;p&gt;我将手机端和web前端都视为client，广义上的前端&lt;/p&gt;
&lt;p&gt;BaaS让前端开发者一旦熟悉这些API，就可以抽象地使用后端，而不必求助于后端开发者提供接口，如此一来，大多的500就不会发生啦，前端开发者可以独立完成整个应用了！&lt;/p&gt;
&lt;p&gt;同时你还获得了横向拓展的能力，由于使用的基本是k-v存储，十分易于拓展，不必担心应用的负载能力。而我们知道，后端新手提供的接口，抗压能力往往很弱的&lt;/p&gt;
&lt;p&gt;那么代价呢，代价是BaaS给你提供抽象的后端的时候，让你对它产生了依赖，好比之前parse被收购不久，服务就喊停了。身家性命系于他人，好消息是BaaS已经有不少开源实现了。&lt;/p&gt;
&lt;h1&gt;对后端的的意义&lt;/h1&gt;
&lt;p&gt;如果你发现你写的接口多是是标准的RESTful风格，功能上以存储为中心，诸如我最近在做的拓展对象属性，为用户添加profile/头像之类的，业务逻辑清爽简单，那么你也许可以考虑不必自己写整个后端，直接使用BaaS就好了&lt;/p&gt;
&lt;p&gt;less code ， less bug&lt;/p&gt;
&lt;h1&gt;kinto的使用笔记&lt;/h1&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;h3&gt;pip&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install kinto
kinto init
kinto migrate
kinto start
&lt;span class="c1"&gt;# kinto --ini /etc/kinto/kinto.ini start #配置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/install.html#using-the-python-package"&gt;Install Kinto&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Running in production&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/configuration/production.html"&gt;Running in production&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最佳实践可以参考&lt;a href="http://kinto.readthedocs.io/en/latest/configuration/good-practices.html"&gt;Deployment good practices&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sudo docker run -d -p 8888:8888 kinto/kinto-server&lt;ul&gt;
&lt;li&gt;之后建议通过docker-compose分离出数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问：http://10.10.100.115:8888/v1/（公司内网）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/kinto/kinto-server/~/dockerfile/"&gt;dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;真实的命令：kinto --ini /etc/kinto/kinto.ini migrate &amp;amp;&amp;amp; kinto --ini /etc/kinto/kinto.ini start //可以将/etc/kinto/kinto.ini用-v映射出去&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入门教程&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/first-steps.html"&gt;offline-first application&lt;/a&gt;只有在线时才连接，平时使用js的本地存储功能&lt;/p&gt;
&lt;h3&gt;push notifications&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/notifications-websockets.html"&gt;How to setup push notifications using WebSockets?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href="https://pusher.com/"&gt;Pusher&lt;/a&gt;来实时推送消息，Pusher采用了websocket来建立长连接&lt;/p&gt;
&lt;p&gt;，当然我们也可以搭建Pusher的私有服务:&lt;a href="https://github.com/stevegraham/slanger"&gt;slanger&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;docker搭建&lt;/h5&gt;
&lt;p&gt;sudo docker run -d -p 8080:8080 -p 4567:4567 -it --link redis:redis dsninjas/slanger slanger --app_key 765ec374ae0a69f4ce44 --secret your-pusher-secret -r "redis://redis:6379/0”&lt;/p&gt;
&lt;p&gt;推送信息(基于python)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pusher&lt;/span&gt;
&lt;span class="n"&gt;pusher_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pusher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pusher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;765ec374ae0a69f4ce44&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;your-pusher-secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4567&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;push_client.tunnel.qydev.com&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pusher_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_channel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;# /usr/local/lib/python2.7/dist-packages/pusher/http.py 把200改为202&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;浏览器的代码为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;DOCTYPE&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pusher&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://js.pusher.com/3.1/pusher.min.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c1"&gt;// Enable pusher logging - don&amp;#39;t include this in production&lt;/span&gt;
    &lt;span class="nx"&gt;Pusher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logToConsole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pusher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pusher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;765ec374ae0a69f4ce44&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;wsHost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;wsPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;wssPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;enabledTransports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pusher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_channel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多细节参考pusher的文档，需要注意的是需要替换Host&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/Kinto/kinto/wiki/App-examples"&gt;App-examples&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Kinto/kinto-attachment/"&gt;kinto-attachment&lt;/a&gt;：文件存储&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kinto/kinto-admin"&gt;kinto-admin&lt;/a&gt;:是一个前端界面，可以对接任何kinto后端，用户凭证是安全的,需要https,无法使用http的server,可以直接把官方服务保存到本地即可用http&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leplatrem/kinto-telegram-wall"&gt;kinto-telegram-wall&lt;/a&gt;：消息墙，这是用es6写的一个项目（chrome运行正常，用到了Fetch替代ajax）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;permissions&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/permissions.html"&gt;Step by step permissions API tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Custom authentication&lt;/h3&gt;
&lt;p&gt;kinto是认证后端可插拔的&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/latest/tutorials/authentication-github.html"&gt;authentication-github&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;拓展功能&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kinto.readthedocs.io/en/stable/tutorials/write-plugin.html"&gt;How to write a Kinto plugin&lt;/a&gt;：增加搜索功能&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;其他的BaaS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.firebase.com/"&gt;firebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ithome.com.tw/news/106045"&gt;新版Firebase來了！Google要為App開發者打造一套萬用雲端後臺&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parse.com"&gt;parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ParsePlatform/Parse-Server"&gt;Parse-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parse.com/docs"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ParsePlatform/Parse-Server#parse-server--express"&gt;Parse Server + Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ParsePlatform/Parse-Server#basic-options"&gt;Basic options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ArnaudValensi/docker-parse-server-git-deploy"&gt;docker-parse-server-git-deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yongjhih/docker-parse-server"&gt;docker-parse-server&lt;/a&gt;:使用docker-compose，更新活跃&lt;ul&gt;
&lt;li&gt;直接部署到aws上比较简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述两者都带有各个平台的SDK，相较kinto，功能完备&lt;/p&gt;
&lt;h3&gt;我的建议&lt;/h3&gt;
&lt;p&gt;开发时候，使用云服务，选择不封锁数据的云平台（保障便捷的同时确保可以掌握自己的数据），如果有自行部署的需求，不妨等产品形态定型后再迁移&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-31:kinto-note-05-31.html</guid><category>tools</category></item><item><title>Ruby/Nodejs解释器版本依赖笔记</title><link>/language-version.html</link><description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近在折腾一个项目，对Ruby/Nodejs的版本有要求&lt;/p&gt;
&lt;h1&gt;版本目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ruby --version // ruby 2.2.3&lt;/li&gt;
&lt;li&gt;node --version // v0.12.4&lt;/li&gt;
&lt;li&gt;npm --version  // 2.10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;系统环境&lt;/h1&gt;
&lt;p&gt;Ubuntu14.04&lt;/p&gt;
&lt;h1&gt;Ruby&lt;/h1&gt;
&lt;h2&gt;RVM&lt;/h2&gt;
&lt;p&gt;采用&lt;a href="https://rvm.io/"&gt;RVM&lt;/a&gt;来管理Ruby版本，当然也可以使用&lt;a href="https://github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
curl -sSL https://get.rvm.io &lt;span class="p"&gt;|&lt;/span&gt; bash -s stable
&lt;span class="nb"&gt;source&lt;/span&gt; /home/ubuntu/.rvm/scripts/rvm
rvm install &lt;span class="m"&gt;2&lt;/span&gt;.2.3
rvm use &lt;span class="m"&gt;2&lt;/span&gt;.2.3 --default
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Nodejs&lt;/h1&gt;
&lt;h2&gt;update nodejs&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;NVM&lt;/h2&gt;
&lt;p&gt;采用&lt;a href="https://github.com/creationix/nvm"&gt;NVM&lt;/a&gt;来管理Nodejs版本&lt;/p&gt;
&lt;p&gt;使用n更方便(npm install -g n)&lt;/p&gt;
&lt;h3&gt;Ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh &lt;span class="p"&gt;|&lt;/span&gt; bash
nvm install &lt;span class="m"&gt;0&lt;/span&gt;.12.4
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mac&lt;/h3&gt;
&lt;p&gt;brew install nvm&lt;/p&gt;
&lt;p&gt;fish使用：https://github.com/Alex7Kom/nvm-fish&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;nvm install v4.2
nvm use V4.2&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brew install pyenv&lt;/li&gt;
&lt;li&gt;pyenv install 2.7.11&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在fish下需要在 .config/fish/config.fish添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setenv PATH &amp;quot;$HOME/.pyenv/bin&amp;quot; $PATH
eval (pyenv init - fish)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps:我的vim比较奇怪，需要在system版本的python下才正常，有时为了用ssl需要2.7.10以上的版本的python，所以策略是采用pyenv local 2.7.11,临时变更版本&lt;/p&gt;
&lt;h3&gt;手动&lt;/h3&gt;
&lt;p&gt;我们顺便也把python的依赖记录下，一般来说，python一般版本只区分2/3，所以直接用系统包管理来装就行，注意区分pip2/pip3就好&lt;/p&gt;
&lt;h3&gt;virtualenv&lt;/h3&gt;
&lt;p&gt;使用-p参数指定python版本&lt;/p&gt;
&lt;p&gt;virtualenv -p /usr/local/bin/python3 testenv3&lt;/p&gt;
&lt;h4&gt;ubuntu下安装&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="https://github.com/yyuu/pyenv-installer"&gt;pyenv-installer&lt;/a&gt;,最后需要:&lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果遇到requests的ssl问题，建议使用python2.7.11或以上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;import ssl&lt;span class="p"&gt;;&lt;/span&gt; print&lt;span class="o"&gt;(&lt;/span&gt;ssl.OPENSSL_VERSION&lt;span class="o"&gt;)&lt;/span&gt;’
&lt;span class="c1"&gt;# OpenSSL 1.0.2h  3 May 2016  才正常&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;问题&lt;/h3&gt;
&lt;h4&gt;sqlite3&lt;/h4&gt;
&lt;p&gt;参考&lt;a href="http://www.cnblogs.com/itflycat/p/4461897.html"&gt;关于 ImportError: No module named _sqlite3 报错解决方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github/pyenv/pyrnv/wiki&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-30:language-version.html</guid><category>tools</category></item><item><title>redis学习笔记</title><link>/learn-redis.html</link><description>&lt;h1&gt;动机&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;构建消息系统&lt;/li&gt;
&lt;li&gt;构建IM&lt;/li&gt;
&lt;li&gt;学习用缓存加速web应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;h3&gt;入门文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/01b37cdb3f33"&gt;告诉你Redis是一个牛逼货&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/10/19/redis-base.html"&gt;REDIS基础笔记&lt;/a&gt;:重点阅读&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wklken.me/posts/2013/10/19/redis-base.html#_1"&gt;资源链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://debugo.com/python-redis/"&gt;使用Python操作Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/3537.html"&gt;Redis资料汇总专题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;经验分享&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.phpchina.com/forum.php?mod=viewthread&amp;amp;tid=229629"&gt;Nginx与Redis解决高并发问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/44629/"&gt;成人网站YouPorn使用Redis之经验谈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/huacnlee/rails-app-redis"&gt;Rails App 运用 Redis 构建高性能的实时搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/3379.html?ref=rediszt"&gt;节约内存：Instagram的Redis实践&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;因为这个应用根本用不到数据库的update功能，事务功能和关联查询等等牛X功能，所以不必为这些用不到的功能去选择维护一个数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/1724.html?ref=rediszt"&gt;用Redis构建访问频率控制模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;游戏系统，Redis为其中的评级和统计功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;书籍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md"&gt;the-little-redis-book&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表格既复杂又灵活，基于表格的存储和管理，没有多少东西是你不能进行建模的，然而，这种通用性并不是没有缺点。具体来说就是，事情并不是总能达到假设中的简单或者快速&lt;/li&gt;
&lt;li&gt;针对特定类型的问题使用特定的数据结构？我们不就是这样进行编程的吗？&lt;/li&gt;
&lt;li&gt;典型的数据库应用案例是，将一个程序的所有数据组织起来，使之与另一个程序的数据保持独立。&lt;ul&gt;
&lt;li&gt;在Redis里，数据库简单的使用一个数字编号来进行辨认，默认数据库的数字编号是0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在大多数情况下，Redis会把值看做是一个字节序列，而不会关注它们实质上是什么。要注意，不同的Redis载体处理序列化会有所不同&lt;/li&gt;
&lt;li&gt;查询：对于Redis而言，关键字就是一切，而值是没有任何意义。更通俗来看就是，Redis不允许你通过值来进行查询&lt;ul&gt;
&lt;li&gt;在我们生活的世界里，数据查询是如此的灵活和强大，而Redis的方式看起来是这么的原始和不高效。Redis不是一种普遍使用（one-size-fits-all）的解决方案&lt;/li&gt;
&lt;li&gt;值可以是任何东西，因为Redis从来不需要去读取或理解它们。这也可以帮助我们理清思路，然后去思考如何在这个新世界里建立模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储器和持久化：你可以对此进行设置，如果X个关键字已变更，那么每隔Y秒存储数据库一次。&lt;/li&gt;
&lt;li&gt;“今天我们有多少个独立用户访问”是个在Web应用里常见的问题，有一篇精彩的博文，在里面可以看到Spool是如何使用这两个命令有效地解决此问题。对于1.28亿个用户，一部笔记本电脑在不到50毫秒的时间里就给出了答复，而且只用了16MB的存储空间。&lt;/li&gt;
&lt;li&gt;当你理解了那些常用的应用案例后，你将发现Redis对于许多类型的问题&lt;/li&gt;
&lt;li&gt;常数时间复杂度O(1)被认为是最快速的  &lt;ul&gt;
&lt;li&gt;许多Redis命令都具有O(1)的时间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对数时间复杂度O(log(N))被认为是第二快速的&lt;ul&gt;
&lt;li&gt;zadd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线性时间复杂度O(N)&lt;ul&gt;
&lt;li&gt;在一个表格的非索引列里进行查找就需要O(N)次操作。ltrim命令具有O(N)的时间复杂度&lt;ul&gt;
&lt;li&gt;N不是列表所拥有的元素数量，而是被删除的元素数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在Redis里，当我们发现一些操作具有O(N)的时间复杂度时，我们可能可以找到更为好的方法去处理&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md#仿多关键字查询pseudo-multi-key-queries"&gt;仿多关键字查询&lt;/a&gt;:很受启发&lt;/li&gt;
&lt;li&gt;性能或存储空间等问题，经过测试后，才会有真正的理解&lt;/li&gt;
&lt;li&gt;Redis命令都具有原子性，Redis实际上是单线程运行的&lt;ul&gt;
&lt;li&gt;使用multi运行具有原子性的一组命令，执行exec命令去实际执行命令，使用discard命令放弃执行命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关键是要理解基本的数据结构。你将能领悟到，这些数据结构是如何能够实现你最初视角之外的东西。&lt;/li&gt;
&lt;li&gt;使用期限（Expiration）：让Redis能成为一个理想的缓冲引擎&lt;/li&gt;
&lt;li&gt;发布和订阅：一流支持&lt;/li&gt;
&lt;li&gt;sort命令是Redis最强大的命令之一&lt;/li&gt;
&lt;li&gt;复制：当你向一个Redis实例（Master）进行写入时，一个或多个其他实例（Slaves）能通过Master实例来保持更新&lt;/li&gt;
&lt;li&gt;备份文件：Redis会把快照存储为一个名为dump.rdb的文件&lt;/li&gt;
&lt;li&gt;复制功能（Replication）是一个成长中的网站可以利用的第一个工具。有一些命令会比另外一些来的昂贵（例如sort命令），将这些运行载荷转移到一个Slave实例里，可以保持整体系统对于查询的快速响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://redis-cookbook.readthedocs.io/en/latest/j.html"&gt;redis-cookbook&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://redis-cookbook.readthedocs.io/en/latest/h.html#python"&gt;缓存(cache)&lt;/a&gt;:非常漂亮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;生产使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/_/redis/"&gt;docker redis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;docker run --name some-redis -d redis redis-server --appendonly yes : 持久化&lt;/li&gt;
&lt;li&gt;127.0.0.1可访问&lt;/li&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wandoulabs/codis"&gt;codis&lt;/a&gt;:Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别, 上层应用可以像使用单机的 Redis一样使用. 可以简单的认为后边连接的是一个内存无限大的 Redis 服务.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dockone.io/article/180"&gt;用Docker构建分布式Redis集群&lt;/a&gt;:十分简单&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/andymccurdy/redis-py"&gt;redis-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/steelThread/redmon"&gt;redmon&lt;/a&gt;:性能监控&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.nosqlfan.com/html/3644.html"&gt;redmon：Redis监控管理Web工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ErikDubbelboer/phpRedisAdmin"&gt;phpRedisAdmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;性能测试：&lt;a href="http://www.runoob.com/redis/redis-benchmarks.html"&gt;Redis 性能测试&lt;/a&gt;，采用redis-benchmark&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebookarchive/redis-faina"&gt;统计分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/monterail/redis-browser"&gt;redis-browser&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:4567/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JoneXiong/PyRedisAdmin"&gt;PyRedisAdmin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;论坛&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.redis.cn/"&gt;redis.cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文档&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://redisdoc.com/"&gt;Redis 命令参考&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;练习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://try.redis.io/"&gt;try.redis.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rolando/scrapy-redis"&gt;scrapy-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gnemoug/distribute_crawler"&gt;distribute_crawler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000002906345"&gt;Redis的持久化&lt;/a&gt;:默认会持久化&lt;/li&gt;
&lt;li&gt;数据库是由一个整数索引标识，而不是由一个数据库名称 默认16个&lt;/li&gt;
&lt;li&gt;应用场景:&lt;a href="http://debugo.com/python-redis/"&gt;使用Python操作Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;我的理解&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;redis是个类似数据库的东西，支持更丰富的数据结构，更少的约束&lt;/li&gt;
&lt;li&gt;如何将这些数据结构用于典型案例，捷径是一边理解redis的数据结构一遍看别人的案例&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-26:learn-redis.html</guid><category>tools</category></item><item><title>requirejs学习笔记及requirejs在Open edX中的使用</title><link>/requirejs-note.html</link><description>&lt;h1&gt;原理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html"&gt;Javascript模块化编程（一）：模块的写法&lt;/a&gt;:Javascript模块化编程&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html"&gt;Javascript模块化编程（二）：AMD规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html"&gt;javascript模块化编程（三）：require.js的用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;解决的问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;实现js文件的&lt;code&gt;异步&lt;/code&gt;加载，避免网页失去响应；&lt;/li&gt;
&lt;li&gt;管理模块之间的依赖性，便于代码的编写和维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Require.JS 是一个基于 AMD 规范的 JavaScript 模块加载框架  &lt;/li&gt;
&lt;li&gt;实现 JavaScript 文件的异步加载，管理模块之间的依赖性，提升网页的加载速度。&lt;/li&gt;
&lt;li&gt;AMD 是 Asynchronous Module Definition 的缩写，意思就是 异步模块定义。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html"&gt;javascript模块化编程（三）：require.js的用法&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;模块的加载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用require.config()方法，我们可以对模块的加载行为进行自定义&lt;ul&gt;
&lt;li&gt;require.config()就写在主模块（main.js）的头部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。&lt;/li&gt;
&lt;li&gt;如果某个模块在另一台主机上，也可以直接指定它的网址&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;　require.config({
　　　　paths: {
　　　　　　&amp;quot;jquery&amp;quot;: &amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&amp;quot;
　　　　}
　　});
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;加载非规范的模块&lt;/h3&gt;
&lt;p&gt;require.config()接受一个配置对象，这个对象有一个shim属性，专门用来配置不兼容的模块。&lt;/p&gt;
&lt;h1&gt;入门&lt;/h1&gt;
&lt;h3&gt;require.js插件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;domready插件，可以让回调函数在页面DOM结构加载完成后再运行。&lt;/li&gt;
&lt;li&gt;text和image插件，允许require.js加载文本和图片文件&lt;/li&gt;
&lt;li&gt;json和mdown，用于加载json文件和markdown文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;requirejs官方入门文档&lt;/h1&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://requirejs.org/docs/start.html"&gt;HOW TO GET STARTED WITH REQUIREJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/volojs/create-template"&gt;Simple one page app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requirejs/example-multipage"&gt;Multipage app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requirejs/example-multipage-shim"&gt;Multipage app with shim config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Open edX与requirejs&lt;/h1&gt;
&lt;p&gt;Open edX前端采用了requirejs来管理模块依赖，这方面的相关文档可参考：&lt;openedx.atlassian.net/wiki&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/How+to+add+a+new+page+to+LMS+or+Studio"&gt;How to add a new page to LMS or Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/RequireJS+at+edX"&gt;RequireJS at edX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/Integration+of+Require+JS+into+the+system"&gt;Integration of Require JS into the system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;细节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/static/js/base.js&lt;/li&gt;
&lt;li&gt;require-config.js (ack-grep  -g "require-config.js")&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/lms/static/lms/js/require-config.js&lt;/li&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/static/cms/js/require-config.js&lt;ul&gt;
&lt;li&gt;在此可以写给mathjax cdn路径,mathjax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;来看一下引用了require-config.js的地方(ack-grep  require-config.js)&lt;ul&gt;
&lt;li&gt;lms/templates/main.html&lt;ul&gt;
&lt;li&gt;页面开始的static_content.html来自common/djangoapps/pipeline_mako/templates/static_content.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lms/static/lms/js/build.js&lt;/li&gt;
&lt;li&gt;cms/templates/base.html&lt;/li&gt;
&lt;li&gt;cms/static/cms/js/build.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引用require.js的地方 （ack-grep require.js）&lt;ul&gt;
&lt;li&gt;cms/templates/base.html&lt;/li&gt;
&lt;li&gt;cms/envs/common.py&lt;/li&gt;
&lt;li&gt;lms/envs/common.py ，require.js被放在base_vendor_js里 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base_vendor_js&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/jquery.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/jquery.cookie.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/url.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/underscore-min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/require.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/RequireJS-namespace-undefine.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/URI.min.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;js/vendor/backbone-min.js&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;main_vendor_js由包括了base_vendor_js，之后lms/templates/main_django.html中有：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  {% block main_vendor_js %}
  {% javascript &amp;#39;main_vendor&amp;#39; %}
  {% endblock %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;案例cms login&lt;/h3&gt;
&lt;p&gt;我们以cms的login.html为例(/edx/app/edxapp/edx-platform/cms/templates/login.html)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%block name=&amp;quot;requirejs&amp;quot;&amp;gt;
  require([&amp;quot;js/factories/login&amp;quot;], function(LoginFactory) {
      LoginFactory(&amp;quot;${reverse(&amp;#39;homepage&amp;#39;)}&amp;quot;);
  });
&amp;lt;/%block&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这部分就是添加自己逻辑的地方: /edx/app/edxapp/edx-platform/cms/static/js/factories/login.js&lt;/p&gt;
&lt;p&gt;可以看到这是按照AMD规范写的模块&lt;/p&gt;
&lt;p&gt;从这里我们也可以看到mako如何把参数传到js里&lt;/p&gt;
&lt;h3&gt;案例 search_results_view&lt;/h3&gt;
&lt;p&gt;其他案例包括&lt;a href="https://openedx.atlassian.net/wiki/display/FEDX/How+to+add+a+new+page+to+LMS+or+Studio"&gt;How to add a new page to LMS or Studio&lt;/a&gt;推荐的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/blob/master/lms/static/js/search/course/views/search_results_view.js"&gt;search_results_view.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于ui方便，官方推荐使用backbone.js来写&lt;/p&gt;
&lt;h3&gt;案例asset（观察backbone的使用）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ack-grep backbone ，跟踪asset.js&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/static/js/collections/asset.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ack-grep js/collections/asset&lt;ul&gt;
&lt;li&gt;static/js/factories/asset_index.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ack-grep "js/factories/asset_index"&lt;ul&gt;
&lt;li&gt;/edx/app/edxapp/edx-platform/cms/templates/asset_index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%block name=&amp;quot;requirejs&amp;quot;&amp;gt;
    require([&amp;quot;js/factories/asset_index&amp;quot;], function (AssetIndexFactory) {
        AssetIndexFactory({
          assetCallbackUrl: &amp;quot;${asset_callback_url}&amp;quot;,
          uploadChunkSizeInMBs: ${chunk_size_in_mbs},
          maxFileSizeInMBs: ${max_file_size_in_mbs},
          maxFileSizeRedirectUrl: &amp;quot;${max_file_size_redirect_url}&amp;quot;
        });
    });
&amp;lt;/%block&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ack-grep asset_index.html&lt;ul&gt;
&lt;li&gt;djangoapps/contentstore/views/assets.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-&amp;gt; def assets_handler&lt;/li&gt;
&lt;li&gt;-&amp;gt; url(r'^assets/{}/{}?$'.format(settings.COURSE_KEY_PATTERN, settings.ASSET_KEY_PATTERN), 'assets_handler')&lt;ul&gt;
&lt;li&gt;对于studio课程里的&lt;code&gt;文件&amp;amp;上传&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-05:requirejs-note.html</guid><category>tools</category></item><item><title>前端近期观望与学习</title><link>/front-end-note.html</link><description>&lt;p&gt;如&lt;a href="https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b"&gt;State of the Art JavaScript in 2016&lt;/a&gt;一文中所言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JS生态的最佳实践不再剧烈变更着，现在关于需要学什么越来越明确了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话的意思是在过去它曾剧烈变化着，今天不过是缓和一些，相对于自身的那种缓和&lt;/p&gt;
&lt;p&gt;我很喜欢《JavaScript 生态之乱象》里的这个批评：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事实证明，我根本无法着手编写这个简单的项目，因为我陷入了一种分析瘫痪循环.到目前为止，我已经有了四到五次“失败的开始”。问题的核心是在 选择 上，以及要如何从过度繁多的工具库中挑选出合适的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对我而言，前端是个炫酷而实用的领域，有趣却变化多端，在它稳定下来，并且人们就最佳实践达成一致的看法之前，我可能不打算把时间砸到某个具体框架里&lt;/p&gt;
&lt;p&gt;如果同样是探索，我可能更愿意把时间花在数据和机器学习上边&lt;/p&gt;
&lt;p&gt;所以对前端，保持关注和观望的状态&lt;/p&gt;
&lt;h1&gt;选型&lt;/h1&gt;
&lt;p&gt;以下是我保持关注，并试图学习的一些工具&lt;/p&gt;
&lt;h3&gt;语言&lt;/h3&gt;
&lt;p&gt;ES6配合&lt;a href="https://github.com/babel/babel"&gt;Babel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Babel是个可插拔ES6编译器&lt;/p&gt;
&lt;p&gt;ES6相关的资料可以参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lukehoban/es6features"&gt;es6features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DrkSephy/es6-cheatsheet"&gt;es6-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://es6.ruanyifeng.com/"&gt;ECMAScript 6入门(阮一峰)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;核心库&lt;/h3&gt;
&lt;p&gt;暂时关注&lt;a href="https://github.com/vuejs/vue"&gt;vue&lt;/a&gt;而不是&lt;a href="https://github.com/facebook/react"&gt;react&lt;/a&gt;，因为我的大多使用场景是个人或小团队，取其敏捷性&lt;/p&gt;
&lt;p&gt;vue的中文文档为&lt;a href="https://vuejs.org.cn/guide/"&gt;vuejs.org.cn&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;依赖管理&lt;/h3&gt;
&lt;p&gt;仅考虑NPM，CommonJS 和ES6模块&lt;/p&gt;
&lt;p&gt;放弃bower，使用webpack&lt;/p&gt;
&lt;h3&gt;构建工具&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/webpack/webpack"&gt;Webpack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不想在你的页面文件中加入非常多的外链Script引用，那你就需要一个构建工具来打包你的依赖。&lt;/p&gt;
&lt;p&gt;那么Gulp或Grunt呢？ Webpack比起来最适合处理静态资源。所以他们开始可以用来跑一些其他的任务（但是也不推荐），现在更简单的方法是直接用上 npm scripts&lt;/p&gt;
&lt;h3&gt;工具库&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lodash/lodash"&gt;Lodash&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Http请求&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/github/fetch"&gt;fetch&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gold.xitu.io/entry/5705e71ed342d3005418ea66"&gt;JavaScript 生态之乱象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gaohailang/blog/issues/12"&gt;2016/04/07 展望 Javascript 2016年的趋势和生态发展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/news/69039/javascript-developer-survey-results"&gt;2015 年 JavaScript 开发者调查报告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 04 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-05-04:front-end-note.html</guid><category>tools</category></item><item><title>vuejs与webpack学习笔记</title><link>/vue-and-webpack-note.html</link><description>&lt;p&gt;阮一峰在微博里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前端变化有多快？两年前，大家都用Grunt构建，去年用Gulp + Browserify构建，今年用Webpack构建，明年可能会使用纯ES6的构建工具。每变一次，前面的那些工具就全没用，都白学。要知道，这些工具每一个都是软件系统，单单Grunt就有4千个插件，然而全没用了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;nodejs相关&lt;/h1&gt;
&lt;p&gt;国内使用npm有时候不太顺利，可以考虑使用淘宝的镜像。&lt;/p&gt;
&lt;p&gt;npm install -g webpack  --registry=http://registry.npm.taobao.org&lt;/p&gt;
&lt;h1&gt;vuejs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文档 ：&lt;a href="https://vuejs.org.cn/guide/"&gt;vuejs.org.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.webpackbin.com/vue"&gt;在线体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;官方索引: &lt;a href="https://github.com/vuejs/awesome-vue"&gt;awesome-vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发工具:&lt;/li&gt;
&lt;li&gt;命令行工具 vue-cli （面向组件开放的项目都建议使用这个官方工具初始化）&lt;/li&gt;
&lt;li&gt;命令行工具Webpack 插件 &lt;a href="https://github.com/vuejs/vue-loader"&gt;vue-loader&lt;/a&gt; ： for single file Vue components&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue-loader-example/"&gt;vue-loader-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://segmentfault.com/a/1190000004060034"&gt;vue组件化开发初体验-示例vue-loader-example学习记录&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;源码:&lt;a href="https://github.com/dingyiming/learn-Js-vuejs/tree/master/demos/demo-vue-loader-example/demo1"&gt;dingyiming/learn-Js-vuejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vue文件将由vue-loader进行加载，.vue内同时包含html、css、js源码，使组件的独立，组件之间可以尽可能地解耦，便于开发维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令行工具Browserify 插件 vueify&lt;/li&gt;
&lt;li&gt;命令行工具Chrome 插件 vue-devtools&lt;/li&gt;
&lt;li&gt;xhr&lt;/li&gt;
&lt;li&gt;vue-resource &lt;/li&gt;
&lt;li&gt;UI 库：&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yuche/vue-strap"&gt;vue-strap&lt;/a&gt; （不依赖 BootStrap 的 JS 和 jQurey，但是仍需要 BootStrap 的 CSS。）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/okoala/vue-antd"&gt;vue-antd&lt;/a&gt; 蚂蚁金服 ant design 的 Vue 实现（不够完善，但是看起来比 vue-strap 好看些。&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue-router"&gt;vue-router&lt;/a&gt;（官方 router）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;目前前端领域工具异常丰富，webpack是黏合它们的胶水，可以作为入口，如果手动拼接，极其琐碎&lt;/p&gt;
&lt;h3&gt;demo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webpack/webpack/tree/master/examples"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruanyf/webpack-demos"&gt;ruanyf/webpack-demos&lt;/a&gt;：建议以这个作为入门&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yesvods/Blog/issues/3"&gt;前端webpack workflow（二）——Webpack基本使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/1c4fd72b84e8"&gt;webpack入门(译)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gitbook:&lt;a href="http://webpack.toobug.net/zh-cn/chapter1/index.html"&gt;webpack指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zfanw.com/blog/webpack-tutorial.html"&gt;webpack 使用教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;vuejs与webpack相关案例&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/vuejs/vue-hackernews"&gt;vue-hackernews&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;HackerNews clone with Vue.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vuejs官方的案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vuejs.org.cn/guide/application.html"&gt;构建大型应用 组件化&lt;/a&gt;：组件（Component）是 Vue.js 最强大的功能之一&lt;/li&gt;
&lt;li&gt;sudo npm install --registry=http://registry.npm.taobao.org&lt;/li&gt;
&lt;li&gt;网站的信息来自: wss://s-usc1c-nss-136.firebaseio.com/.ws?v=5&amp;amp;ns=hacker-news&lt;ul&gt;
&lt;li&gt;用到了firebase&lt;/li&gt;
&lt;li&gt;调试wss&lt;ul&gt;
&lt;li&gt;python3， pip install websocket&lt;/li&gt;
&lt;li&gt;wsdump.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/zerqu/qingcheng"&gt;qingcheng&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;qingcheng是&lt;a href="http://python-china.org/"&gt;python-china&lt;/a&gt;的前端&lt;/p&gt;
&lt;p&gt;qingcheng的后端为&lt;a href="https://github.com/lepture/zerqu"&gt;zerqu&lt;/a&gt;,基于flask写的，专注于提供api&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;not a forum, it is an API based application&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;开发&lt;/h3&gt;
&lt;p&gt;mac下，nodejs升级为v5.0,nodejs太旧会有问题&lt;/p&gt;
&lt;p&gt;开始：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo npm install&lt;/li&gt;
&lt;li&gt;make dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意: webpack-dev-server&lt;/p&gt;
&lt;h3&gt;生产环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;make build&lt;/li&gt;
&lt;li&gt;python -m SimpleHTTPServer 8000&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/kxxoling/vue-demos"&gt;vue-demos&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sudo npm install sass-loader node-sass webpack --save-dev --registry=http://registry.npm.taobao.org&lt;/li&gt;
&lt;li&gt;sudo npm install &lt;/li&gt;
&lt;li&gt;npm run dev&lt;ul&gt;
&lt;li&gt;会解释为：webpack-dev-server --inline --hot --config webpack.dev.conf.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;npm run build&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="https://github.com/dingyiming/demo-Vue-sign"&gt;demo-Vue-sign&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;用vue组件化做个简单的注册登陆SPA页面示例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://www.jianshu.com/p/941bfaf13be1"&gt;webpack-dev-server&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;webpack 提供了 webpack-dev-server 解决实时刷新页面的问题，同时解决实时构建的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js 文件修改&lt;/li&gt;
&lt;li&gt;webpack-dev-server 监控到变化&lt;/li&gt;
&lt;li&gt;webpack 在内存中重新构建 bundle.js&lt;/li&gt;
&lt;li&gt;webpack-dev-server 保证页面引用的 bundle.js 文件与内存中一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/34449620"&gt;如何评价阮一峰关于前端工具变化快的言论？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.windrunner.info/fe/vue-note.html"&gt;Vue.js 学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-04-30:vue-and-webpack-note.html</guid><category>tools</category></item><item><title>区块链学习笔记</title><link>/blockchain-note.html</link><description>&lt;p&gt;未来正不断到来，而当下不断成为过去&lt;/p&gt;
&lt;p&gt;过去人们眼中惊世骇俗的事物，今天的人已经习以为常，他们不能相信曾经居然有人会对此感到惊讶&lt;/p&gt;
&lt;p&gt;他们同时又惊讶于，当下居然有人会激进和愚蠢到相信眼前这些惊世骇俗的事物在将来能被人广泛接受。它们多么有悖于今天的常识啊&lt;/p&gt;
&lt;p&gt;当尼尼微城昌盛一时，新福音书已经老旧&lt;/p&gt;
&lt;h1&gt;区块链&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;区块链（英语：Blockchain或Block chain）是一种分布式数据库，起源自比特币。&lt;/li&gt;
&lt;li&gt;区块链是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易的信息，用于验证其信息的有效性（防伪）和生成下一个区块。&lt;/li&gt;
&lt;li&gt;区块链在网络上是公开的，可以在每一个离线比特币钱包数据中查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;问题背景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/27687960/answer/94011340"&gt;区块链技术是什么？未来可能用于哪些方面？ 文浩的回答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;“原理"和"意义/用途"&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/27687960/answer/38301765"&gt;区块链技术是什么？未来可能用于哪些方面？ Alex Zhao的回答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;区块链的一些要素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;包含一个分布式数据库&lt;/li&gt;
&lt;li&gt;分布式数据库是BC的物理载体，BC是交易的逻辑载体，所有核心节点都应包含该条BC数据的全副本&lt;/li&gt;
&lt;li&gt;BC按时间序列化Block，且是整个网络交易数据的主体&lt;/li&gt;
&lt;li&gt;BC只对添加有效，对其他操作无效&lt;/li&gt;
&lt;li&gt;基于非对称加密的公私钥验证&lt;/li&gt;
&lt;li&gt;记账节点要求拜占庭将军问题可解/避免&lt;/li&gt;
&lt;li&gt;共识过程(consensus progress)是演化稳定的，即面对一定量的不同节点的矛盾数据不会崩溃。&lt;/li&gt;
&lt;li&gt;共识过程能够解决double-spending问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;系统特征&lt;/h3&gt;
&lt;p&gt;它几乎无懈可击。首先你不能凭空造出比特币，只能挖矿获得；其次你无法伪造交易，无法控制不属于你的账户。一旦交易被确认，几乎无法取消。我这里说“几乎”，是因为有“51%攻击”的存在。而51%攻击条件非常苛刻。&lt;/p&gt;
&lt;h1&gt;相关知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;密码学&lt;ul&gt;
&lt;li&gt;非对称加密，公钥和私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;p2p&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;一些理解角度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比特币本质是构造了一个永不停息、无坚不摧的时间戳系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;比特币&lt;/h1&gt;
&lt;p&gt;参考&lt;a href="https://www.zhihu.com/question/20941124"&gt;比特币 (Bitcoin) 系统是如何运行的？&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;公钥私钥&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;公钥私钥是现代密码学分支非对称性加密里面的名词，通常都是用公钥加密信息，用私钥解密信息，为什么要这样？ 因为你看电视剧的时候，发电报那种都是对称性加密，这种加密方式缺点是显而易见的，如果被人知道了密钥和加密方法，于是按照加密方法反着来就能解密。 一直到非对称性加密这种情况才有所改观，公钥就是可以对全世界公开的密钥，比如你和google通讯，用google给的1024位的公钥加密，送到google那里只有他有对应的私钥，只有他能解密，于是就保证了通讯安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;椭圆曲线签名算法(ECDSA)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只要知道私钥，可以算出相应的公钥；&lt;/li&gt;
&lt;li&gt;你用私钥签名过的东西，可以用公钥算一下是不是你签的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;交易账单&lt;/h3&gt;
&lt;p&gt;比特币其实没有钱包，只有交易账单，整个比特币就是一大堆交易账单&lt;/p&gt;
&lt;h3&gt;账户&lt;/h3&gt;
&lt;p&gt;比特币的账户，就是一段公钥&lt;/p&gt;
&lt;h3&gt;比特币的账单&lt;/h3&gt;
&lt;p&gt;FROM（谁发送的，包括两部分）&lt;br /&gt;
Previous tx: 你要花的这笔钱的那个账单的id， 也就是说，你花的任何一笔钱都应该有人转给你过，需要出示那个账单的id&lt;br /&gt;
scriptSig: 你对这笔交易的签名，就是把单子用你的私钥做hash，只有你能做这个hash  &lt;/p&gt;
&lt;p&gt;TO（谁接受，包括两部分）&lt;br /&gt;
Value: 要发多少&lt;br /&gt;
scriptPubKey: 对方的公钥，比特币账户就是一段公钥  &lt;/p&gt;
&lt;h1&gt;以太坊&lt;/h1&gt;
&lt;h2&gt;关于以太坊&lt;/h2&gt;
&lt;p&gt;简而言之，以太坊（Ethereum）是一项将比特币中的一些技术和概念运用于计算领域的创新。&lt;br /&gt;
比特币被认为是一个系统，该系统维护了一个安全地记录了所有比特币账单的共享的全球账簿。以太坊，则是利用了很多跟比特币类似的机制（比如区块链技术和 P2P 网络），来维护一个共享的计算平台，这个平台可以灵活且安全地运行用户想要的任何程序（当然也包括类似比特币的区块链程序）&lt;/p&gt;
&lt;p&gt;以太坊要实现的是一个内置了编程语言的区块链协议，由于支持了编程语言，那么理论上任何区块链应用都可以用这门语言进行定义，进而作为一种应用，运行于以太坊的区块链协议之上（译注：该协议的意义与互联网时代的 TCP/IP 协议有的一拼）&lt;/p&gt;
&lt;p&gt;比特币经常被称之为"全球账簿"，以太坊可以被看作一台“全球计算机”&lt;/p&gt;
&lt;p&gt;本质上，以太坊的目标，就是将区块链技术所具有的去中心化、开放、和安全这三大特点，引入到几乎所有能被计算的领域。&lt;/p&gt;
&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;h4&gt;公钥加密系统&lt;/h4&gt;
&lt;p&gt;Alice有一把公钥和一把私钥。她可以用她的私钥创建数字签名，而Bob可以用她的公钥来验证这个签名确实是用Alice的私钥创建的，也就是说，确实是Alice的签名&lt;/p&gt;
&lt;h4&gt;点对点网络&lt;/h4&gt;
&lt;p&gt;就像BitTorrent, 以太坊分布式网络中的所有节点都地位平等，没有中心服务器&lt;/p&gt;
&lt;h4&gt;区块链&lt;/h4&gt;
&lt;p&gt;区块链就像是一个全球唯一的帐簿，或者说是数据库，记录了网络中所有交易历史。&lt;/p&gt;
&lt;h4&gt;节点&lt;/h4&gt;
&lt;p&gt;你可以运行节点，通过它读写以太坊区块链，也即使用以太坊虚拟机。完全节点需要下载整个区块链。轻节点仍在开发中。&lt;/p&gt;
&lt;h4&gt;矿工&lt;/h4&gt;
&lt;p&gt;挖矿，也就是处理区块链上的区块的节点。&lt;/p&gt;
&lt;h4&gt;以太币&lt;/h4&gt;
&lt;p&gt;缩写ETH。一种你可以购买和使用的真正的数字货币&lt;/p&gt;
&lt;h4&gt;工作量证明&lt;/h4&gt;
&lt;p&gt;矿工们总是在竞争解决一些数学问题。第一个解出答案的(算出下一个区块)将获得以太币作为奖励&lt;/p&gt;
&lt;h4&gt;Gas&lt;/h4&gt;
&lt;p&gt;(汽油) 在以太坊上执行程序以及保存数据都要消耗一定量的以太币，&lt;/p&gt;
&lt;h4&gt;DApp&lt;/h4&gt;
&lt;p&gt;以太坊社区把基于智能合约的应用称为去中心化的应用程序(Decentralized App)。DApp的目标是(或者应该是)让你的智能合约有一个友好的界面，外加一些额外的东西，例如IPFS（可以存储和读取数据的去中心化网络，不是出自以太坊团队但有类似的精神)&lt;/p&gt;
&lt;h2&gt;运行以太坊节点可用的客户端&lt;/h2&gt;
&lt;p&gt;Go语言实现的客户端geth (go-ethereum)。 testrpc：使用了Python客户端pyethereum&lt;/p&gt;
&lt;h2&gt;写智能合约用的编程语言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类似Javascript的Solidity（主导）&lt;/li&gt;
&lt;li&gt;类Python的Serpent&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;区块链&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE"&gt;区块链 wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/27687960/answer/94011340"&gt;区块链技术是什么？未来可能用于哪些方面？ 文浩的回答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/27687960/answer/38301765"&gt;区块链技术是什么？未来可能用于哪些方面？ Alex Zhao的回答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethfans.org/posts/You-Can%E2%80%99t-Do-It-Without-a-Blockchain-Here%E2%80%99s-Why"&gt;为什么有些事没有区块链做不了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blockchaindev.org/article/introduce_blockchain.html"&gt;区块链(BlockChain)的深入介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/bitcoin"&gt;知乎 区块链技术专栏&lt;/a&gt;：维护者：赵余 （扇贝）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比特率&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/20941124"&gt;比特币 (Bitcoin) 系统是如何运行的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以太坊：&lt;a href="https://github.com/ethereum"&gt;ethereum&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6"&gt;(中文) 以太坊白皮书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethfans.org/"&gt;ethfans&lt;/a&gt;:论坛&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ethfans.org/posts/101-noob-intro"&gt;以太坊智能合约编程之菜鸟教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethfans.org/posts/what-is-ethereum"&gt;以太坊是什么——以太坊创始人 Vitalik Buterin 的亲自解答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vbuterin/pybitcointools"&gt;pybitcointools&lt;/a&gt;:SImple, common-sense Bitcoin-themed Python ECC library&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;开发者&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ethereum.org/author/vitalik-buterin/"&gt;vitalik-buterin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vbuterin"&gt;vbuterin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;资讯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.8btc.com/"&gt;8btc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qukuai.com/"&gt;qukuai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-04-28:blockchain-note.html</guid><category>tools</category></item><item><title>elasticsearch学习笔记</title><link>/elasticsearch-note.html</link><description>&lt;h1&gt;介绍&lt;/h1&gt;
&lt;p&gt;Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎。它能帮助你搜索、分析和浏览数据，而往往大家并没有在某个项目一开始就预料到需要这些功能。Elasticsearch之所以出现就是为了重新赋予原始数据新的活力。&lt;/p&gt;
&lt;p&gt;学习过程中主要参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/index.html"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/looly/elasticsearch-the-definitive-guide-cn/details"&gt;Elasticsearch权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github中的案例&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;提醒&lt;/h1&gt;
&lt;p&gt;注意先查看自己使用的elasticsearch的版本。Open edX中目前使用的elasticsearch为0.92版，十分落后，以至于许多特性都和最新的版本不一致&lt;/p&gt;
&lt;h1&gt;目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;for open edx&lt;/li&gt;
&lt;li&gt;for my note system&lt;/li&gt;
&lt;li&gt;full-text search&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;关键概念&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;index -&amp;gt; type -&amp;gt; document&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;类比数据库的话，我们可以认为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Relational DB -&amp;gt; Databases -&amp;gt; Tables -&amp;gt; Rows -&amp;gt; Columns
Elasticsearch -&amp;gt; Indices   -&amp;gt; Types  -&amp;gt; Documents -&amp;gt; Fields
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;install&lt;/h1&gt;
&lt;p&gt;当然是使用docker，最为方便啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo docker pull elasticsearch
sudo mkdir -p /data/elasticsearch
sudo docker run -d --name elasticsearch -p &lt;span class="m"&gt;9200&lt;/span&gt;:9200 -v /data/elasticsearch:/usr/share/elasticsearch/data elasticsearch
sudo docker &lt;span class="nb"&gt;exec&lt;/span&gt;  elasticsearch env &lt;span class="c1"&gt;#我的是：ELASTICSEARCH_VERSION=2.3.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;quick start&lt;/h1&gt;
&lt;p&gt;我们跟着这个案例走一遍:&lt;a href="https://github.com/siddontang/elasticsearch-note/blob/master/searching_data.md"&gt;searching_data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;案例中有用到&lt;code&gt;_bulk&lt;/code&gt;，关于&lt;code&gt;_bulk&lt;/code&gt;,参考这里:&lt;a href="http://stackoverflow.com/questions/23798433/json-bulk-import-to-elasticstearch"&gt;JSON Bulk import to Elasticstearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们来看一下原始数据(&lt;a href="https://raw.githubusercontent.com/siddontang/elasticsearch-note/master/data/book_document.json"&gt;book_document.json&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;All Quiet on the Western Front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;otitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Im Westen nichts Neues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Erich Maria Remarque&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1929&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paul Bäumer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Albert Kropp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Haie Westhus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fredrich Müller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stanislaus Katczinsky&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tjaden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;novel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Catch-22&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joseph Heller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1961&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John Yossarian&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Captain Aardvark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Chaplain Tappman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Colonel Cathcart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Doctor Daneeka&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;novel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Complete Sherlock Holmes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Arthur Conan Doyle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1936&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sherlock Holmes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dr. Watson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;G. Lestrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;section&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;library&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Crime and Punishment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;otitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Преступлéние и наказáние&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fyodor Dostoevsky&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1886&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;characters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Raskolnikov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sofia Semyonovna Marmeladova&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;copies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;available&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;交互工具使用httpie取代curl&lt;/p&gt;
&lt;h3&gt;导入数据&lt;/h3&gt;
&lt;p&gt;http POST :9200/_bulk &amp;lt; book_document.json &lt;/p&gt;
&lt;p&gt;http http://localhost:9200/library/book/_count , 一共有4条数据&lt;/p&gt;
&lt;h3&gt;搜索&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http GET :9200/library/book/_search query:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;query_string&amp;quot;:{&amp;quot;query&amp;quot;:&amp;quot;title:crime&amp;quot;}}&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;#/&amp;lt;index&amp;gt;/&amp;lt;type&amp;gt;&lt;/span&gt;

http GET :9200/library/book/_search query:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;query&amp;quot;:{&amp;quot;match_all&amp;quot;:{}}}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;日常管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;列出所有index：/_cat/indices?v (http localhost:9200/_cat/indices?v)&lt;ul&gt;
&lt;li&gt;而在0.92版本中则要使用/_status (http localhost:9200/_status),旧版的文档参考&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/0.90/index.html"&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用例&lt;/h3&gt;
&lt;p&gt;如果你在Open edX中启用课程/内容搜索功能，那么课程数据将被索引到elasticsearch里。目前这部分有一个问题，当课程被删除后索引还存在，如果不手动删除，用户还能检索出课程。这是个bug&lt;/p&gt;
&lt;p&gt;我们先探索索引的结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http localhost:9200/_status
http localhost:9200/courseware_index/_status
http localhost:9200/courseware_index/_search
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#查找特定课程索引&lt;/span&gt;
http  localhost:9200/courseware_index/_search?q&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#可以看到index和type&lt;/span&gt;

&lt;span class="c1"&gt;#删除特定课程索引&lt;/span&gt;
http delete &lt;span class="s2"&gt;&amp;quot;localhost:9200/courseware_index/course_info/_query?q=course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#or&lt;/span&gt;
curl -XDELETE &lt;span class="s2"&gt;&amp;quot;localhost:9200/courseware_index/course_info/_query?q=course-v1:edX+DemoX+Demo_Course&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;一些学习笔记&lt;/h1&gt;
&lt;h3&gt;&lt;a href="http://es.xiaoleilu.com/052_Mapping_Analysis/40_Analysis.html"&gt;分析和分析器&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;标准化这些词为标准形式，提高它们的“可搜索性”或“查全率”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;标准分析器&lt;/h4&gt;
&lt;p&gt;标准分析器是Elasticsearch默认使用的分析器。对于文本分析，它对于任何语言都是最佳选择（译者注：就是没啥特殊需求，对于任何一个国家的语言，这个分析器就够用了）
它根据Unicode Consortium的定义的单词边界(word boundaries)来切分文本，然后去掉大部分标点符号。最后，把所有词转为小写&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://es.xiaoleilu.com/052_Mapping_Analysis/50_Complex_datatypes.html"&gt;object嵌套的索引&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lucene 并不了解内部对象。 一个 Lucene 文件包含一个键-值对应的扁平表单。 为了让 Elasticsearch 可以有效的索引内部对象，将文件转换为扁平格式&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;tweet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;elasticsearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;flexible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;very&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@johnsmith&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;male&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.name.full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;john&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;smith&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.name.first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;john&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user.name.last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;smith&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关联内部对象可解决此类问题，我们称之为嵌套对象&lt;/p&gt;
&lt;h3&gt;&lt;a href="http://es.xiaoleilu.com/052_Mapping_Analysis/00_Intro.html"&gt;映射和分析&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;映射(mapping)机制用于进行字段类型确认，将每个字段匹配为一种确定的数据类型(string, number, booleans, date等)。&lt;/p&gt;
&lt;h5&gt;查看映射&lt;/h5&gt;
&lt;p&gt;GET /edx_tracking_log/_mapping/logs&lt;/p&gt;
&lt;p&gt;string类型字段默认值是analyzed，对于不允许全文索引的字段需要注明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;tag&amp;quot;: {
        &amp;quot;type&amp;quot;:     &amp;quot;string&amp;quot;,
        &amp;quot;index&amp;quot;:    &amp;quot;not_analyzed&amp;quot;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;周边&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dzharii/awesome-elasticsearch"&gt;awesome-elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/medcl/elasticsearch-analysis-ik"&gt;中文分词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/medcl/elasticsearch-rtf"&gt;elasticsearch-rtf&lt;/a&gt;：elasticsearch中文发行版&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/taskrabbit/elasticsearch-dump"&gt;elasticsearch-dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NLPchina/elasticsearch-sql"&gt;elasticsearch-sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/elasticsearch-dsl-py"&gt;elasticsearch-dsl-py&lt;/a&gt; : High level Python client for Elasticsearch&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/elasticsearch-py"&gt;elasticsearch-py&lt;/a&gt;:Official Python low-level client for Elasticsearch.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Yelp/elastalert"&gt;elastalert&lt;/a&gt;:找出elk中有问题的数据&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/oliver006/elasticsearch-gmail"&gt;elasticsearch-gmail&lt;/a&gt;: use python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于&lt;a href="https://github.com/elastic/logstash"&gt;logstash&lt;/a&gt;和&lt;a href="https://github.com/elastic/kibana"&gt;kibana&lt;/a&gt;,将作为单独的章节介绍&lt;/p&gt;
&lt;p&gt;更多案例参考&lt;a href="https://github.com/elastic/examples"&gt;elastic/examples&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.coding.net/blog/elastic-search"&gt;如何使用正确的姿势进行搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://es.xiaoleilu.com/"&gt;Elasticsearch 权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnes.net/"&gt;Elasticsearch 权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/05cff717563c"&gt;Elasticsearch学习笔记&lt;/a&gt;:概念清晰&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/siddontang/elasticsearch-note"&gt;elasticsearch-note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/2c7b0c76fa04"&gt;Elasticsearch、MongoDB和Hadoop比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.searchtech.pro/elasticsearch-users-case"&gt;一些国外优秀的elasticsearch使用案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/25535889"&gt;elasticsearch（lucene）可以代替NoSQL（mongodb）吗&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-04-16:elasticsearch-note.html</guid><category>dev-tools</category></item><item><title>kibana4学习笔记</title><link>/kibana4-note.html</link><description>&lt;p&gt;以下是学习Kibana时做的笔记&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Kibana 是为 Elasticsearch设计的开源分析和可视化平台。你可以使用 Kibana 来搜索，查看存储在 Elasticsearch 索引中的数据并与之交互。你可以很容易实现高级的数据分析和可视化，以图标的形式展现出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kibana 是 Elasticsearch 分析和搜索仪表板。已经历经了 v1, v2, v3, v4 个版本，分别采用了 PHP，Ruby，AngularJS，JRuby，NodeJS 等不同语言编写。我们主要关注v3 和 v4 的区别。实际项目中尽量用v4&lt;/p&gt;
&lt;p&gt;Kibana 非常容易安装和使用。整个项目都是用 HTML 和 Javascript 写的，所以 Kibana 不需要任何服务器端组件，一个纯文本发布服务器就够了&lt;/p&gt;
&lt;p&gt;ELK 这一套体系，不应该和 Hadoop 体系同质化。定期的离线报表，不是 Elasticsearch 专长所在.&lt;/p&gt;
&lt;p&gt;Kibana 的使用场景，应该集中在两方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时监控&lt;ul&gt;
&lt;li&gt;通过 histogram 面板，配合不同条件的多个 queries 可以对一个事件走很多个维度组合出不同的时间序列走势。时间序列数据是最常见的监控报警了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 elk 的用途，可以参照其对应的商业产品 splunk 的场景：使用 Splunk 的意义在于使信息收集和处理智能化。而其操作智能化表现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索，通过下钻数据排查问题，通过分析根本原因来解决问题；&lt;/li&gt;
&lt;li&gt;实时可见性，可以将对系统的检测和警报结合在一起，便于跟踪 SLA 和性能问题；&lt;/li&gt;
&lt;li&gt;历史分析，可以从中找出趋势和历史模式，行为基线和阈值，生成一致性报告。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;v3 / v4对比&lt;/h1&gt;
&lt;p&gt;Kibana4 在使用 &lt;code&gt;Aggregation&lt;/code&gt; 接口提供更复杂功能和更高性能的同时，彻底改变了用户的使用形式。用户必须明确了解 ES 各个 aggs 接口的意义，请求和响应体的数据情况；还要想清楚可视化的展现形式，充分理解数据字段的作用。然后才能实现想要的结果。毫无疑问，这是有学习成本的。&lt;/p&gt;
&lt;h1&gt;metric 和 bucket是什么&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html#search-aggregations"&gt;aggregations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qbox.io/blog/elasticsearch-aggregations"&gt;An Introduction to Elasticsearch Aggregations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;知识点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;你可以在 Visualization页为你的搜索结构构造可视化。每个可视化都是跟一个搜索关联着的&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.code123.cc/docs/kibana-logstash/v4/setup.html"&gt;本地安装&lt;/a&gt;：跨平台，无依赖&lt;ul&gt;
&lt;li&gt;5601端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认情况下，Kibana 会连接运行在 localhost 的 Elasticsearch。要连接其他 Elasticsearch 实例，修改 kibana.yml 里的 Elasticsearch URL，然后重启 Kibana。如何在生产环境下使用 Kibana，阅读 [Using Kibana in a Production Environment].&lt;/li&gt;
&lt;li&gt;索引：&lt;ul&gt;
&lt;li&gt;默认情况下，Kibana 认为你要访问的是通过 Logstash 导入 Elasticsearch 的数据。这时候你可以用默认的 logstash-* 作为你的 index pattern。&lt;/li&gt;
&lt;li&gt;选择一个包含了时间戳的索引字段，可以用来做基于时间的处理。Kibana 会读取索引的映射，然后列出所有包含了时间戳的字段(译者注：实际是字段类型为 date 的字段，而不是“看起来像时间戳”的字段)。如果你的索引没有基于时间的数据，关闭 Index contains time-based events 参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认的时间过滤器设置为最近 15 分钟&lt;ul&gt;
&lt;li&gt;发挥：意味着这是一个real-time展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;discover&lt;ul&gt;
&lt;li&gt;你可以直接输入简单的请求字符串，也就是用 Lucene query syntax，也可以用完整的基于 JSON 的 Elasticsearch Query DSL。&lt;/li&gt;
&lt;li&gt;当你提交搜索的时候，直方图，文档表格，字段列表，都会自动反映成搜索的结果。hits(匹配的文档)总数会在直方图的右上角显示。文档表格显示前 500 个匹配文档。&lt;/li&gt;
&lt;li&gt;默认的，文档倒序排列，最新的文档最先显示&lt;/li&gt;
&lt;li&gt;发挥：要搜素课程太容易了，探索课程和学生staff&lt;ul&gt;
&lt;li&gt;使用 Lucene query syntax就可以做简易搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以在 Discover 页加载已保存的搜索，也可以用作 visualizations 的基础。保存一个搜索，意味着同时保存下了搜索请求字符串和当前选择的索引模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualize&lt;ul&gt;
&lt;li&gt;你可以保存可视化，以后再用，或者合并到 dashboard 里。一个可视化可以基于以下几种数据源类型：&lt;ul&gt;
&lt;li&gt;一个新的交互式搜索&lt;/li&gt;
&lt;li&gt;一个已保存的搜索&lt;/li&gt;
&lt;li&gt;一个已保存的可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可视化是基于 Elasticsearch 1 引入的聚合(aggregation) 特性。&lt;/li&gt;
&lt;li&gt;可以通过Settings &amp;gt; Edit Saved Objects 来管理已存的可视化。&lt;/li&gt;
&lt;li&gt;用页面左侧的聚合构建器配置你的可视化要用的 metric 和 bucket 聚合。&lt;code&gt;桶(Buckets) 的效果类似于 SQL GROUP BY&lt;/code&gt; 语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dashboard&lt;ul&gt;
&lt;li&gt;要用仪表板，你需要至少有一个已保存的 visualization。&lt;/li&gt;
&lt;li&gt;分享仪表板&lt;ul&gt;
&lt;li&gt;你可以分享仪表板给其他用户。可以直接分享 Kibana 的仪表板链接，也可以嵌入到你的网页里。&lt;/li&gt;
&lt;li&gt;用户必须有 Kibana 的访问权限才能看到嵌入的仪表板。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;认证鉴权&lt;/h1&gt;
&lt;h3&gt;v3&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href="http://www.code123.cc/docs/kibana-logstash/v3/auth/nodejs-cas.html"&gt;用 nodejs 实现 CAS 认证&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;v4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/trevan/oauth2"&gt;oauth2&lt;/a&gt;:k4的oauth2插件&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fangli/kibana-authentication-proxy"&gt;kibana-authentication-proxy&lt;/a&gt;:kibana的认证机制（cas）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Todo:思考&lt;/h1&gt;
&lt;p&gt;关于可视化 ， 二维平面在展示什么 每种图表的特性。&lt;br /&gt;
一些概念：向量，特征值，降维，桶(Buckets) &lt;/p&gt;
&lt;p&gt;关于图表的可视化，推荐阅读《数据可视化的基本原理与方法》&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.code123.cc/docs/kibana-logstash/v4/discover.html"&gt;Elasticsearch 官方指南 Kibana 部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/kibana"&gt;kibana&lt;/a&gt;:Kibana analytics and search dashboard for Elasticsearch&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-04-16:kibana4-note.html</guid><category>dev-tools</category></item><item><title>logstash学习笔记</title><link>/logstash-note.html</link><description>&lt;p&gt;以下是学习Kibana时做的笔记&lt;/p&gt;
&lt;h1&gt;优点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 全部采用 JSON 接口，Logstash 是 Ruby DSL 设计，都是目前业界最通用的配置语法设计&lt;/li&gt;
&lt;li&gt;不管是 Elasticsearch 集群还是 Logstash 集群都是可以线性扩展的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;理解&lt;/h1&gt;
&lt;p&gt;把它理解为管道&lt;/p&gt;
&lt;h1&gt;知识点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Logstash 会给事件添加一些额外信息。最重要的就是 @timestamp，用来标记事件的发生时间。因为这个字段涉及到 Logstash 的内部流转&lt;/li&gt;
&lt;li&gt;大多数时候，还可以见到另外几个：&lt;ul&gt;
&lt;li&gt;host 标记事件发生在哪里。&lt;/li&gt;
&lt;li&gt;type 标记事件的唯一类型。&lt;/li&gt;
&lt;li&gt;tags 标记事件的某方面属性。这是一个数组，一个事件可以有多个标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以随意给事件添加字段或者从事件里删除字段。事实上事件就是一个 Ruby 对象，或者更简单的理解为就是一个哈希也行。&lt;/li&gt;
&lt;li&gt;插件机制&lt;ul&gt;
&lt;li&gt;输入插件(Input)：input是个插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;input&lt;/h1&gt;
&lt;h3&gt;file&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Logstash 使用一个名叫 FileWatch 的 Ruby Gem 库来监听文件变化。这个库支持 glob 展开文件路径，而且会记录一个叫 .sincedb 的数据库文件来跟踪被监听的日志文件的当前读取位置。所以，不要担心 logstash 会漏过你的数据。&lt;/li&gt;
&lt;li&gt;FileWatch 只支持文件的绝对路径&lt;/li&gt;
&lt;li&gt;默认15秒刷新一次更新&lt;/li&gt;
&lt;li&gt;/path/to/&lt;strong&gt;/*.log，用 &lt;/strong&gt; 来缩写表示递归全部子目录&lt;/li&gt;
&lt;li&gt;最简单的输入输出，&lt;a href="http://kibana.logstash.es/content/logstash/plugins/input/stdin.html"&gt;stdin.html&lt;/a&gt;,便于做实验&lt;/li&gt;
&lt;li&gt;type 和 tags 是 logstash 事件中两个特殊的字段。通常来说我们会在输入区段中通过 type 来标记事件类型 —— 我们肯定是提前能知道这个事件属于什么类型的。而 tags 则是在数据处理过程中，由具体的插件来添加或者删除的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tcp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;但 Logstash 本身只能在 SizedQueue 中缓存 20 个事件。这就是我们建议在生产环境中换用其他消息队列的原因。&lt;/li&gt;
&lt;li&gt;最常见的用法就是配合 nc 命令导入旧数据&lt;/li&gt;
&lt;li&gt;这种做法比用 LogStash::Inputs::File 好，因为当 nc 命令结束，我们就知道数据导入完毕了。而用 input/file 方式，logstash 进程还会一直等待新数据输入被监听的文件，不能直接看出是否任务完成了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;codec&lt;/h1&gt;
&lt;p&gt;Logstash 不只是一个input | filter | output 的数据流，而是一个 input | decode | filter | encode | output 的数据流！codec 就是用来 decode、encode 事件的。&lt;/p&gt;
&lt;h1&gt;过滤器插件(Filter)&lt;/h1&gt;
&lt;h2&gt;data&lt;/h2&gt;
&lt;h3&gt;filters/date 插件支持五种时间格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ISO8601&lt;ul&gt;
&lt;li&gt;类似 "2011-04-19T03:44:01.103Z" 这样的格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UNIX&lt;/li&gt;
&lt;li&gt;UNIX_MS&lt;ul&gt;
&lt;li&gt;JavaScript 里经常使用这个时间格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;时区问题的解释&lt;/h3&gt;
&lt;p&gt;为什么 @timestamp 比我们早了 8 个小时？怎么修改成北京时间？ &lt;br /&gt;
Elasticsearch 内部，对时间类型字段，是统一采用 UTC 时间，对于页面查看，ELK 的解决方案是在 Kibana 上，读取浏览器的当前时区，然后在页面上转换时间内容的显示。建议大家接受这种设定&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Grok 正则捕获&lt;/h2&gt;
&lt;p&gt;Grok 是 Logstash 最重要的插件。你可以在 grok 里预定义好命名正则表达式，在稍后引用它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\s+(?&amp;lt;request_time&amp;gt;\d+(?:\.\d+)?)\s+&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;对于 Perl 或者 Ruby 程序员应该很熟悉了，Python 程序员可能更习惯写 (?P&lt;name&gt;pattern)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="http://kibana.logstash.es/content/logstash/plugins/filter/json.html"&gt;JSON 编解码&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有些日志可能是一种复合的数据结构，其中只是一部分记录是 JSON 格式的。这时候，我们依然需要在 filter 阶段，单独启用 JSON 解码插件&lt;/p&gt;
&lt;h2&gt;随心所欲的 Ruby 处理&lt;/h2&gt;
&lt;p&gt;通常我们都是用 filters/grok 插件来捕获字段的，正则耗费大量的 CPU 资源。
很多流经 Logstash 的数据都是有自己预定义的特殊分隔符的，我们可以很简单的直接切割成多个字段。&lt;/p&gt;
&lt;h1&gt;output&lt;/h1&gt;
&lt;h2&gt;&lt;a href="http://kibana.logstash.es/content/logstash/plugins/output/elasticsearch.html"&gt;保存进 Elasticsearch&lt;/a&gt;:这节是匹配最新版本的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flush_size 和 idle_flush_time 共同控制 Logstash 向 Elasticsearch 发送批量数据的行为。以上面示例来说：Logstash 会努力攒到 20000 条数据一次性发送出去，但是如果 10 秒钟内也没攒够 20000 条，Logstash 还是会以当前攒到的数据量发一次。&lt;/li&gt;
&lt;li&gt;logstash能向远方机器发送log&lt;/li&gt;
&lt;li&gt;注意索引名中不能有大写字母&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 支持给索引预定义设置和 mapping。Logstash 自带有一个优化好的模板，默认模板的"template" 为"logstash-*"&lt;/li&gt;
&lt;li&gt;Elasticsearch 是一个近实时搜索引擎。它实际上是每 1 秒钟刷新一次数据。对于日志分析应用，我们用不着这么实时，所以 logstash 自带的模板修改成了 5 秒钟&lt;/li&gt;
&lt;li&gt;这种类型会自动添加一个 ".raw" 结尾的字段，并给这个字段设置为不启用分词器。简单说，你想获取 url 字段的聚合结果的时候，不要直接用 "url" ，而是用 "url.raw" 作为字段名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kibana.logstash.es/content/"&gt;ELKstack 中文指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-04-16:logstash-note.html</guid><category>dev-tools</category></item><item><title>珍爱生命，慎用shell</title><link>/shell-and-shellpy.html</link><description>&lt;h1&gt;引子&lt;/h1&gt;
&lt;p&gt;使用linux有几个年头了，老实说，我不能想象没有shell的世界，那些精巧灵活的工具（管道/find/grep/sed/vim...）让琐事变得容易。同时我也害怕shell脚本满天飞的世界，还好大多时候我们在shell都是敲些短命令。就像害怕perl/php/javascript脚本满天飞的世界，尽管它们确实满天在飞了。。。。它们都有独到的设计，对特定问题的解决也出类拔萃，可是就语法本身而言读写起来真的不是很愉快的体验&lt;/p&gt;
&lt;h1&gt;bash的语法&lt;/h1&gt;
&lt;p&gt;相比于shell中各类工具的灵活的强大，bash语法的丑陋简直令人咋舌&lt;/p&gt;
&lt;p&gt;这是一种典型的&lt;code&gt;quick and dirty&lt;/code&gt;,各种临时方案风格的设计，一致性很糟糕&lt;/p&gt;
&lt;p&gt;如果仅是使用单行命令还好，一旦试图在bash中变大逻辑，写脚本，就很痛苦了，痛苦程度要比写perl好些&lt;/p&gt;
&lt;p&gt;带着这种既爱又恨的心情，每当看到有助于书写shell的工具，都会留意。分享一些还不错的&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;a static analysis tool for shell scripts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你非要用bash编程，可以试试fish，对bash的许多恶心语法做了改进，换句话说，如果你是新手，且使用fish，你需要注意它的语法和bash有不少差异，这意味着你照着书本敲的指令很可能无法运行&lt;/p&gt;
&lt;h1&gt;python&lt;/h1&gt;
&lt;p&gt;已经越来越多的系统管理员，使用python来运维系统，尤其是ansible这样的神器发布之后&lt;/p&gt;
&lt;p&gt;对于日常的系统管理任务，python也基本都能胜任，尤其是需要写复杂逻辑的时候，bash的&lt;code&gt;&amp;amp;{}&amp;gt;.[[=]]&lt;/code&gt;会让你发疯的，快投入python怀抱吧&lt;/p&gt;
&lt;p&gt;我之前写的这篇文章把我日常与系统打交道用到的工具罗列了一下：&lt;a href="http://blog.just4fun.site/Python-for-system-administrators.html"&gt;Python与系统日常管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢shell，又为其语法所累，我也是这样，我现在的偏好是：以python的方式使用shell，也许你也可以试试&lt;/p&gt;
&lt;h1&gt;shellpy&lt;/h1&gt;
&lt;p&gt;这是我今天早上醒来逛github看到的一个东西&lt;/p&gt;
&lt;p&gt;日常而言，对于具体的任务，我们都习惯在shell里直接敲命令，好比&lt;code&gt;git add common&lt;/code&gt;/&lt;code&gt;ack class --python&lt;/code&gt;/&lt;code&gt;http GET www.google.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果这些命令都在python用subprocess写可能会比较费事，即便使用&lt;code&gt;sh&lt;/code&gt;这样的神器，写起来感觉还是需要看看文档，有没有一种能让我们在python更自然地书写bash的方式呢，这就是&lt;a href="https://github.com/lamerman/shellpy"&gt;shellpy&lt;/a&gt;项目的初衷，它实际上是包装了subprocess&lt;/p&gt;
&lt;p&gt;这样一来，我们能自然地使用bash中各类神器，同时使用python来控制逻辑&lt;/p&gt;
&lt;p&gt;整个世界一下变得干净而清爽&lt;/p&gt;
&lt;h3&gt;上手&lt;/h3&gt;
&lt;p&gt;上手很简单，看一下官方的示例就好了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import tempfile
import os.path
from shellpython.helpers import Dir

# We will make everything in temp directory. Dir helper allows you to change current directory
# withing &amp;#39;with&amp;#39; block
with Dir(tempfile.gettempdir()):
    if not os.path.exists(&amp;#39;shellpy&amp;#39;):
        # just executes shell command
        `git clone https://github.com/lamerman/shellpy.git

    # switch to newly created tempdirectory/shellpy
    with Dir(&amp;#39;shellpy&amp;#39;):
        # here we capture result of shell execution. log here is an instance of Result class
        log = `git log --pretty=oneline --grep=&amp;#39;Create&amp;#39;

        # shellpy allows you to iterate over lines in stdout with this syntactic sugar
        for line in log:
            if line.find(&amp;#39;README.md&amp;#39;):
                hashcode = log.stdout.split(&amp;#39; &amp;#39;)[0]
                print hashcode
                exit(0)

        print &amp;#39;The commit where the readme was created was not found&amp;#39;

exit(1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行它：&lt;code&gt;shellpy example/git.spy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你熟悉ipython，你可能觉得这不就是把ipython的&lt;code&gt;!&lt;/code&gt;换成`么。哈哈，我也这样觉得，不过好处在于，这样我们脱离终端，可以在python脚本里写bash啦，而不只是在ipython里&lt;/p&gt;
&lt;h3&gt;import_from_python&lt;/h3&gt;
&lt;p&gt;我们也可以在pyhton代码中直接调用spy文件，参考：&lt;a href="https://github.com/lamerman/shellpy/blob/master/example/import_from_python/import.py"&gt;import_from_python&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;更多demo&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lamerman/shellpy/tree/master/example"&gt;example&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jlevy/the-art-of-command-line"&gt;the-art-of-command-line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-04-10:shell-and-shellpy.html</guid><category>dev-tools</category></item><item><title>一些有趣的项目-2</title><link>/something-geek-and-interesting-2.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;share something  interesting and geek&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/0rpc/zerorpc-python"&gt;zerorpc-python&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;zerorpc is a flexible RPC implementation based on zeromq and messagepack. Service APIs exposed with zerorpc are called "zeroservices".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sloria/cookiecutter-flask"&gt;cookiecutter-flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sloria/cookiecutter-docopt"&gt;cookiecutter-docopt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/agconti/cookiecutter-django-rest"&gt;cookiecutter-django-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://pythonhosted.org/six/"&gt;Six&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Six provides simple utilities for wrapping over differences between Python 2 and Python 3. It is intended to support codebases that work on both Python 2 and 3 without modification. six consists of only one Python file, so it is painless to copy into a project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/deepgram/sidomo"&gt;sidomo&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can get your software to work in a docker container, then this module will make it work in Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/docker/docker-py"&gt;docker-py&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An API client for docker written in Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverascode.com/2014/06/05/docker-python.html"&gt;Using Docker with Python and iPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$  &lt;a href="https://github.com/denysdovhan/bash-handbook"&gt;bash-handbook&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/denysdovhan/bash-handbook#streams"&gt;streams&lt;/a&gt;:重定向的问题这里说清楚啦，python中的log stream，原理上会被run pyhton时的系统设置重定向到日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/p-e-w/maybe"&gt;maybe&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;See what a program does before deciding whether you really want it to happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/cloudera/hue"&gt;hue&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s Big Data. Hue is an open source Web interface for analyzing data with Hadoop and Spark. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/studioetrange/docker-hue/"&gt;docker-hue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/facebook/PathPicker"&gt;PathPicker&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Facebook PathPicker is a simple command line tool that solves the perpetual problem of selecting files out of bash output. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mooz/percol"&gt;percol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/masr/pynlpini"&gt;pynlpini&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;the Chinese NLP full stack toolkit&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/ericchiang/pup"&gt;pup&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Parsing HTML at the command line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/micha/resty"&gt;resty&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Little command line REST client that you can use in pipelines (bash or zsh)&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-03-12:something-geek-and-interesting-2.html</guid><category>dev-tools</category></item><item><title>使用命令行操作青云</title><link>/use-qingcloud-cli-contral-qingcloud.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;学会在命令行下，对云主机进行日常的操控&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;pip install qingcloud-cli&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;新手指南&lt;/h1&gt;
&lt;p&gt;将你的&lt;a href="https://console.qingcloud.com/access_keys/"&gt;access key&lt;/a&gt;填入&lt;code&gt;~/.qingcloud/config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列出所有命令 ： &lt;code&gt;qingcloud&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;help ： &lt;code&gt;qingcloud iaas run-instances -h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;命令列表&lt;/h1&gt;
&lt;p&gt;只列出我日常常用的&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;主机相关&lt;/h3&gt;
&lt;h5&gt;describe-instances&lt;/h5&gt;
&lt;p&gt;describe-instances（实例描述）：&lt;code&gt;qingcloud iaas describe-instances&lt;/code&gt;，返回一串json，可以使用 &lt;code&gt;| jq "."&lt;/code&gt;来美化输出，关于jq可以参考&lt;a href="http://blog.just4fun.site/command-tool-jq.html"&gt;命令行神器之jq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;qingcloud iaas describe-instances|ack 209 -C 17&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;qingcloud iaas describe-instances|jq '.instance_set[].instance_name'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qingcloud iaas describe-instances|jq '.instance_set[]|.memory_current,.vcpus_current,.instance_name'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance_id ： 主机id&lt;/li&gt;
&lt;li&gt;status : 主机状态，可通过获得 jq ".instance_set[].status"获得&lt;/li&gt;
&lt;li&gt;instance_name ： 主机名&lt;/li&gt;
&lt;li&gt;vcpus_current : 核数 &lt;/li&gt;
&lt;li&gt;memory_current ： 内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;start-instances&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;qingcloud iaas start-instances &amp;lt;instance_id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;stop-instances&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;qingcloud iaas stop-instances &amp;lt;instance_id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其他的命令使用时再记录&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;p&gt;附上我的这个项目:&lt;a href="https://github.com/wwj718/qingcloud_cron"&gt;qingcloud_cron&lt;/a&gt;：使用定时任务控制青云服务器&lt;/p&gt;
&lt;p&gt;参考: &lt;a href="https://docs.qingcloud.com/api/common/cli/index.html#id7"&gt;命令列表&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.qingcloud.com/api/common/cli/index.html#qingcloud-cli"&gt;CLI 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;延伸&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.qingcloud.com/api/common/sdk/index.html"&gt;SDK 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-03-04:use-qingcloud-cli-contral-qingcloud.html</guid><category>dev-tools</category></item><item><title>jupyter使用小结</title><link>/jupyter-summary.html</link><description>&lt;p&gt;&lt;a href="https://github.com/jupyter/jupyter"&gt;jupyter&lt;/a&gt;(之前的&lt;code&gt;ipython notebook&lt;/code&gt;)于我的最大意义在于,让学习进程和探索进程变得可累积，正如它的原先名字中的&lt;code&gt;notebook&lt;/code&gt;所暗示的那样,作为学习的记录者，方便你随时捡起学习的进度，增量式地前进&lt;/p&gt;
&lt;p&gt;李笑来在《把时间当做朋友》里说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相信积累的力量，本质上就是相信复利的力量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每天进步一点，一年下来，最终的收获就是365点，这是莎士比亚的算法--以为应该用简单加法计算；&lt;br /&gt;
实际上，如若真的每天进步一点点，一年下来，你的收获最终很可能是&lt;code&gt;S = P*(1 + i)^365&lt;/code&gt;，看你每天进步的是多少（i）（如果i变化你应该用∑求和），看你起步时的实力如何（P）--这是夏洛克的算法，那可是指数级增长。&lt;/p&gt;
&lt;p&gt;而我们知道，技术和知识的增长曲线往往以指数形式。所有已掌握的知识/技术都将帮助你探索新的知识。这便是经济学上复利玩的魔法&lt;/p&gt;
&lt;p&gt;所以常常，我们看到巨人随手扔下的鹅软石都是巨石，此处可以弹幕飘过一串名字：John McCarthy、Kenneth Lane Thompson、Linus Torvalds&lt;/p&gt;
&lt;p&gt;一以当千的一群人&lt;/p&gt;
&lt;h1&gt;介绍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mindonmind.github.io/2013/02/08/ipython-notebook-interactive-computing-new-era/#相关链接"&gt;IPython Notebook: 交互计算新时代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://site.douban.com/146782/widget/notes/15468638/note/505327095/"&gt;交互笔记：共享你的思想 一种新软件有望成为科学数据分享新利器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;pip install jupyter&lt;/p&gt;
&lt;p&gt;如果在windows下直接装anaconda吧！不想折腾的你在任何平台下都可以装anaconda&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook 
jupyter notebook --no-browser
jupyter notebook --port 9999
jupyter notebook --help
jupyter notebook --ip=0.0.0.0 #外部访问

#常用：jupyter notebook --no-browser --port 5000 --ip=0.0.0.0 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;rich output&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from IPython.display import HTML, Image, YouTubeVideo
from IPython.display import Image
Image(url=&amp;#39;http://python.org/images/python-logo.gif&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nbviewer.jupyter.org/github/ipython/ipython/blob/master/examples/IPython%20Kernel/Rich%20Output.ipynb"&gt;Rich Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/ipython-books/minibook-2nd-code/blob/master/chapter6/63-rich.ipynb"&gt;Displaying rich HTML elements in the Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学公式&lt;/h3&gt;
&lt;p&gt;在jupyter中写markdown，支持mathjax，&lt;code&gt;$$e=mc^2$$&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;书签&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;%bookmark -l  #结合cd使用，方便切换目录&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ipython locate : 查看配置&lt;/li&gt;
&lt;li&gt;jupyter notebook --generate-config ： 如果没有&lt;code&gt;~/.jupyter/jupyter_notebook_config.py&lt;/code&gt;，则执行这条命令，之后在此做配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vim ~/.jupyter/jupyter_notebook_config.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# The directory to use for notebooks.这决定了jupyter启动目录
c.NotebookApp.notebook_dir = u&amp;#39;/path/to/your/notebooks&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;绑定vim&lt;a href="https://github.com/lambdalisue/jupyter-vim-binding"&gt;jupyter-vim-binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主题：&lt;a href="https://github.com/transcranial/jupyter-themer"&gt;jupyter-themer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;拓展：&lt;a href="https://github.com/ipython-contrib/IPython-notebook-extensions"&gt;IPython-notebook-extensions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;http://127.0.0.1:8888/nbextensions : 设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;文档&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jupyter.readthedocs.org/en/latest/index.html"&gt;Jupyter Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ipynb&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/danielfrg/pelican-ipynb"&gt;pelican-ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;github直接支持ipynb文件预览&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.datahub.top/home/"&gt;http://www.datahub.top/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用jupyter写ppt&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;jupyter-nbconvert --to slides How-to.ipynb --reveal-prefix '//cdn.bootcss.com/reveal.js/3.2.0' --output slides&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;a href="http://rainy.im/nb/How-to.html#/3"&gt;how-to&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是我用jupyter写的ppt：&lt;a href="https://github.com/wwj718/presentation-edx"&gt;presentation-edx&lt;/a&gt; (Open edX Beijing meetup上的一个分享)&lt;/p&gt;
&lt;h1&gt;IPython kernels for other languages&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages"&gt;IPython kernels for other languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;实验特性:&lt;a href="https://github.com/jupyter/jupyterlab"&gt;jupyterlab&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;增强jupyter的编辑能力(强烈推荐！)，使jupyter如IDE一般强大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip install &lt;a href="https://github.com/jupyter/jupyterlab"&gt;jupyterlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jupyter serverextension enable --py jupyterlab&lt;/li&gt;
&lt;li&gt;jupyter lab --notebook-dir="."&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我关注的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/igo"&gt;igo&lt;/a&gt; : 会报错&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver/bash_kernel"&gt;bash_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bollwyvl/hy_kernel/"&gt;hy_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/n-riesco/ijavascript"&gt;ijavascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;同时支持pyhton2，python3&lt;ul&gt;
&lt;li&gt;source ~/py3/bin/activate.fish&lt;/li&gt;
&lt;li&gt;pip3 install jupyter"&lt;/li&gt;
&lt;li&gt;ipython3 kernelspec install-self&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;资源汇总&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks"&gt;A gallery of interesting IPython Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython-books/minibook-2nd-code"&gt;python minibooks&lt;/a&gt;：书籍&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我喜欢的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks#pandas-for-data-analysis"&gt;Pandas for data analysis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/url/taaviburns.ca/presentations/log_analysis_with_pandas/nb/5-Scatterplots.ipynb"&gt;log_analysis_with_pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb"&gt;Apache log analysis with Pandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="Key differences between Python 2.7.x and Python 3.x"&gt;http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/not_so_obvious_python_stuff.ipynb?create=1"&gt;A collection of not-so-obvious Python stuff you should know!
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/28831854/how-do-i-add-python3-kernel-to-jupyter-ipython"&gt;How do I add python3 kernel to jupyter (Ipython)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在python2的虚拟环境张执行：&lt;code&gt;python3 -m pip install ipykernel &amp;amp; python3 -m ipykernel install --user&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!python3 -m pip freeze&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.damian.oquanta.info/posts/make-your-slides-with-ipython.html"&gt;Make your slides with IPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hack it&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/gist/minrk/6011986"&gt;Importing IPython Notebooks as Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yoavram/CS1001.py"&gt;Computer Science with Python as Tel-Aviv University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DrSkippy/Data-Science-45min-Intros"&gt;Data-Science-45min-Intros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;坑&lt;/h1&gt;
&lt;h3&gt;zmq相关问题&lt;/h3&gt;
&lt;p&gt;sudo pip install pyzmq --upgrade&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-02-26:jupyter-summary.html</guid><category>dev-tools</category></item><item><title>使用ImageMagick在命令行下处理图片</title><link>/use-ImageMagick.html</link><description>&lt;p&gt;一直不会用ps之类的处理软件，花花绿绿遍布按钮的界面令人很是头疼&lt;/p&gt;
&lt;p&gt;偶尔又有处理图片的需求，转化一下图片格式，或是调整一下图片尺寸&lt;/p&gt;
&lt;p&gt;每当遇到这种需求，总是习惯性地打开&lt;a href="http://xiuxiu.web.meitu.com/"&gt;美图秀秀网页版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于批量处理图片，最好的方式当然是命令行了，一翻搜索，找到了&lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;ImageMagick&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ImageMagick is a software suite to create, edit, compose, or convert bitmap images. It can read and write images in a variety of formats (over 200) including PNG, JPEG, JPEG-2000, GIF, TIFF, DPX, EXR, WebP, Postscript, PDF, and SVG. Use ImageMagick to resize, flip, mirror, rotate, distort, shear and transform images, adjust image colors, apply various special effects, or draw text, lines, polygons, ellipses and Bézier curves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ImageMagick的强大可见一斑&lt;/p&gt;
&lt;p&gt;ImageMagick既提供命令行操作，当然你也可以选择你喜欢的语言的客户端，好比python的&lt;a href="https://github.com/dahlia/wand"&gt;wand&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;brew install ImageMagick&lt;/p&gt;
&lt;h3&gt;命令概览&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;convert：转换图像格式和大小，模糊，裁剪，驱除污点，抖动，临近，图片上画图片，加入新图片，生成缩略图等。 &lt;/li&gt;
&lt;li&gt;identify：描述一个或较多图像文件的格式和特性。 &lt;/li&gt;
&lt;li&gt;mogrify：Mogrify改写最初的图像文件然后写到一个不同的图像文件。 &lt;/li&gt;
&lt;li&gt;composite：根据一个图片或多个图片组合生成图片。 &lt;/li&gt;
&lt;li&gt;montage：创建一些分开的要素图像。在含有要素图像任意的装饰图片，如边框、结构、图片名称等。 &lt;/li&gt;
&lt;li&gt;display：如果你拥有一个X server的系统，它可以按次序的显示图片 &lt;/li&gt;
&lt;li&gt;animate：利用X server显示动画图片 &lt;/li&gt;
&lt;li&gt;import：在X server或任何可见的窗口上输出图片文件。 你可以捕获单一窗口，整个的荧屏或任何荧屏的矩形部分。用于截屏 &lt;/li&gt;
&lt;li&gt;conjure：解释执行 MSL (Magick Scripting Language) 写的脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage(command-line)&lt;/h3&gt;
&lt;h3&gt;identify&lt;/h3&gt;
&lt;p&gt;identify var.jpg&lt;/p&gt;
&lt;p&gt;ImageMagick有一个小工具identify，它可以用来显示一个图片文件的详悉信息，比如格式、分辨率、大小、色深等等&lt;/p&gt;
&lt;h4&gt;begin&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;convert image.jpg image.png&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;文件名通配符&lt;/h4&gt;
&lt;p&gt;convert *.jpg images.gif&lt;/p&gt;
&lt;h4&gt;Built-in Images and Patterns&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert -size 640x480 pattern:checkerboard checkerboard.png 
convert -size 32x32 pattern:BRICKS BRICKS.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有可用的pattern参考&lt;a href="http://www.imagemagick.org/script/formats.php#builtin-patterns"&gt;Built-in Patterns&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;选取图片的某些帧(Selecting Frames)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert &lt;span class="s1"&gt;&amp;#39;dog.gif[0]&amp;#39;&lt;/span&gt; dog.png
convert &lt;span class="s1"&gt;&amp;#39;images.gif[0-3]&amp;#39;&lt;/span&gt; images.mng
convert &lt;span class="s1"&gt;&amp;#39;images.gif[3,2,4]&amp;#39;&lt;/span&gt; images.mng
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;选取一张图片中的部分区域&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;convert -size 6000x4000 -depth 8 -extract 600x400+1900+2900 rgb:image image.jpg&lt;/code&gt;&lt;br /&gt;
我们要处理的图片是一个8位的 RGB 位图, 宽是 6000, 高为 4000, 而我们只需要获取一块中心附近 600×400 的图像信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert -crop 300x300+0+0 -resize 200x200 -colors 100 +profile "*" 1.jpg 1.png&lt;/code&gt; &lt;br /&gt;
把当前目录1.jpg图片文件，从左上角(0,0)坐标为起点，裁剪一块300x300像素的部分。&lt;/p&gt;
&lt;p&gt;convert -crop  100(长)x200(高)+10(x坐标)+10(y坐标)   22.jpg(源图片路径)   11.jpg(缩放后存放路径)    &lt;/p&gt;
&lt;h4&gt;缩放内嵌图像(缩略图)&lt;/h4&gt;
&lt;p&gt;convert '*.jpg' -resize 120x120 thumbnail%03d.png&lt;/p&gt;
&lt;h4&gt;裁切内嵌图像&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert &lt;span class="s1"&gt;&amp;#39;*.jpg&amp;#39;&lt;/span&gt; -crop 120x120+10+5 thumbnail%03d.png &lt;span class="c1"&gt;#or&lt;/span&gt;
convert &lt;span class="s1"&gt;&amp;#39;*.jpg[120x120+10+5]&amp;#39;&lt;/span&gt; thumbnail%03d.png
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;实用例子&lt;/h3&gt;
&lt;h5&gt;把图片变为黑白颜色&lt;/h5&gt;
&lt;p&gt;convert -monochrome foo.png bar.png  &lt;/p&gt;
&lt;h5&gt;添加图片水印处理&lt;/h5&gt;
&lt;p&gt;convert src.jpg logo.gif -gravity southeast -geometry +5+10 -composite dest.jpg  &lt;/p&gt;
&lt;p&gt;把名为logo.gif的水印图标添加在原始图片（src.jpg）右下角，且水印的下边缘距原始图片10像素、右边缘距原始图片5像素&lt;/p&gt;
&lt;p&gt;先安装ghostscript：&lt;code&gt;brew install ghostscript&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;convert  -fill red -pointsize 24 -draw "text 10,15 'lifesinger 2006' "  1.png  2.png&lt;/p&gt;
&lt;p&gt;convert  -fill green -pointsize 40 -draw "text 10,50 '添加中文'" 1.jpg 2.jpg  #添加中文&lt;/p&gt;
&lt;p&gt;mac下字体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-us/HT201722"&gt;Mac OS X: Font locations and their purposes
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gothick.org.uk/2008/03/14/using-os-x-fonts-in-imagemagick/"&gt;Using OS X fonts in ImageMagick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;旋转&lt;/h5&gt;
&lt;p&gt;convert -rotate 30 foo.png bar.png&lt;/p&gt;
&lt;h5&gt;批量转化&lt;/h5&gt;
&lt;p&gt;mogrify -format png *.jpg #把目录下面所有的jpg文件转化为png格式&lt;/p&gt;
&lt;h5&gt;按百分比缩略图像&lt;/h5&gt;
&lt;p&gt;convert -resize 50%x50% foo.jpg thumbnail.jpg&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.imagemagick.org/script/command-line-processing.php"&gt;Command Line Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zouyesheng.com/imagemagick.html"&gt;ImageMagick命令行使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.charry.org/docs/linux/ImageMagick/ImageMagick.html"&gt;我的ImageMagick使用心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-01-27:use-ImageMagick.html</guid><category>dev-tools</category></item><item><title>command tricks</title><link>/command-tricks.html</link><description>&lt;p&gt;列出一些常用的命令的参数和例子,方便自己查阅和上手&lt;/p&gt;
&lt;p&gt;建议采用command 小抄！！ &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install cheat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;cheat tar&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;find&lt;/h1&gt;
&lt;p&gt;find命令用来在指定目录下查找文件，默认以递归的方式&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-maxdepth &amp;lt;目录层级&amp;gt; : 设置最大目录层级；
-exec &amp;lt;执行指令&amp;gt; : 假设find指令的回传值为True，就执行该指令；
-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；
-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；
-printf &amp;lt;输出格式&amp;gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /home -name &amp;quot;*.txt&amp;quot;  #在/home目录下查找以.txt结尾的文件名
find /home -iname &amp;quot;*.txt&amp;quot; #同上，但忽略大小写
find /usr/ -path &amp;quot;*local*&amp;quot; #匹配文件路径或者文件
find . -regex &amp;quot;.*\(\.txt\|\.pdf\)$&amp;quot; #基于正则表达式匹配文件路径
find . -iregex &amp;quot;.*\(\.txt\|\.pdf\)$&amp;quot; #同上，但忽略大小写

#根据文件时间戳进行搜索
find . -type f -atime -7  #搜索最近七天内被访问过的所有文件
find . -type f -amin +10  #搜索访问时间超过10分钟的所有文件

#根据文件类型进行搜索
find . -type 类型参数(f 普通文件/d 目录)


#根据文件大小进行匹配
find . -type f -size +10k  #搜索大于10KB的文件 (M:兆字节,G:吉字节)
find . -type f -size +1G   #搜索大于1G的文件

#根据文件权限/所有权进行匹配
find . -type f -user wwj  #找出当前目录用户wwj拥有的所有文件
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;grep&lt;/h1&gt;
&lt;p&gt;grep（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-i : 不区分大小写地搜索。默认情况区分大小写 （ignore case）
-l : 只列出匹配的文件名 （ls？）
-r/R : 递归(recurse)搜索
-n : 显示行号信息（num）
-c : 计算符合pattern的列数。（count）
-C : 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。
-v : 反转(reverse)查找（不匹配）
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep match_pattern file_name 
grep &amp;quot;match_pattern&amp;quot; file_name
grep &amp;quot;match_pattern&amp;quot; file_name --color=auto #标记匹配颜色
grep -E &amp;quot;[1-9]+&amp;quot;  #使用正则表达式,等效于egrep
grep &amp;quot;text&amp;quot; . -r -n #当前目录下递归搜索
echo this is a text line | grep -e &amp;quot;is&amp;quot; -e &amp;quot;line&amp;quot; -o  #多种匹配方式
seq 10 | grep &amp;quot;5&amp;quot; -C 3  # 显示匹配某个结果的前三行和后三行
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;sed&lt;/h1&gt;
&lt;p&gt;sed是一种流编辑器，用程序的方式来编辑文本。sed 是基于行的，因此按顺序对每一行执行命令。&lt;br /&gt;
使用单引号来括起 sed 命令的习惯&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s : 替换指定字符
/g : 替换每一行中的所有匹配,当需要从第N处匹配开始替换时，可以使用 /Ng
d : 删除操作
-e: 允许在同一行里执行多条命令
a\ : 追加到行下，i\ 追加到行上
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -rl picDir ./ | xargs sed -i &amp;#39;s/picDir/picPath/g&amp;#39; # 重构项目时，重命名变量
sed &amp;#39;s/book/books/&amp;#39; file #替换文本中的字符串
sed -n &amp;#39;s/test/TEST/p&amp;#39; file #-n选项和p命令一起使用表示只打印那些发生替换的行
sed -i &amp;#39;s/book/books/g&amp;#39; file #匹配file文件中每一行的第一个book替换为books
sed &amp;#39;s:test:TEXT:g&amp;#39; #可以使用任意的定界符
sed &amp;#39;/^$/d&amp;#39; file #删除空白行
sed &amp;#39;2,$d&amp;#39; file #删除文件的第2行到末尾所有行
sed &amp;#39;/^test/d&amp;#39; file #删除文件中所有开头是test的行
echo this is a test line | sed &amp;#39;s/\w\+/[&amp;amp;]/g&amp;#39; 
#[this] [is] [a] [test] [line]
echo this is digit 7 in a number | sed &amp;#39;s/digit \([0-9]\)/\1/&amp;#39;
#this is 7 in a number
sed -n &amp;#39;/test/,/check/p&amp;#39; file #test和check所确定的范围内的行都被打印
sed -n &amp;#39;5,/^test/p&amp;#39; file #打印从第5行开始到第一个包含以test开始的行之间的所有行
sed &amp;#39;/test/,/west/s/$/aaa bbb/&amp;#39; file #test和west之间的行，每行的末尾用字符串aaa bbb替换
sed -e &amp;#39;1,5d&amp;#39; -e &amp;#39;s/test/check/&amp;#39; file #第一条命令删除1至5行，第二条命令用check替换test
sed &amp;#39;/^test/a\this is a test line&amp;#39; file #将 this is a test line 追加到 以test 开头的行后面

#正则
sed -n &amp;#39;/[34]/ p &amp;#39; source.txt  #匹配包含3或4的行
sed -n &amp;#39;/^[0-9]\{3,5\}$/ p&amp;#39; numbers.txt
$sed -e &amp;#39;s/#.*//&amp;#39; -e &amp;#39;/^$/ d&amp;#39; /etc/profile #删除所有注释行和空行

#修改源文件和备份
sed -ibak &amp;#39;s/Ian/IAN/&amp;#39; source.txt #-i会修改源文件,但是可以同时使用bak备份
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;xargs&lt;/h1&gt;
&lt;p&gt;xargs命令是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。&lt;br /&gt;
xargs的默认命令是echo，空格是默认定界符&lt;/p&gt;
&lt;p&gt;xargs与-exec的区别：-exec会为处理每一个匹配到的文件而发起一个相应的进程。可能占用过多资源。
而使用xargs命令则只有一个进程，顺序执行&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d : 指定定界符
-I : 指定一个替换字符串{}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;nameXnameXnameXname&amp;quot; | xargs -dX  
#name name name name

echo &amp;quot;nameXnameXnameXname&amp;quot; | xargs -dX -n2 
#name name 
#name name

echo &amp;#39;axaxa&amp;#39; |xargs -dx -n1 -I {} echo b{}
#ba
#ba
#ba

ls *.jpg | xargs -n1 -I cp {} /data/images #复制所有图片文件到 /data/images 目录下
find . -type f -name &amp;quot;*.py&amp;quot; -print0 | xargs -0 wc -l  #统计python代码行数
#等效于find . -type f -name &amp;quot;*.py&amp;quot;  | xargs  wc -l 吧

cat url-list.txt | xargs wget -c #下载文件里的所有链接
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;seq&lt;/h1&gt;
&lt;p&gt;seq命令用于产生从某个数到另外一个数之间的所有整数&lt;/p&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-f : 使用printf 样式的浮点格式
-s : 使用指定字符串分隔数字（默认使用：\n）
-w : 在列前添加0 使得宽度相同
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;p&gt;touch (seq -f "%03g-4.mp3" 1 10)&lt;/p&gt;
&lt;h1&gt;$()&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;p&gt;cp gogs-repositories/ gogs-repositories_$(date "+%Y-%m%d") -R&lt;/p&gt;
&lt;h1&gt;tree&lt;/h1&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d : 仅显示目录
-L : 限制目录的最大深度
-C : 在文件和目录清单加上色彩，便于区分各种类型；
-f：在每个文件或目录之前，显示完整的相对路径名称；
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;p&gt;tree -ah --du&lt;/p&gt;
&lt;h1&gt;ln&lt;/h1&gt;
&lt;h3&gt;选项&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-s或--symbolic：对源文件建立符号连接，而非硬连接；
-d或-F或--directory：建立目录的硬连接；
-i或--interactive：覆盖既有文件之前先询问用户；
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /usr/mengqc/mub1 /usr/liu/abc  #在目录/usr/liu下建立一个符号链接文件abc，使它指向目录/usr/mengqc/mub1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;streams(input，output and redirect)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/denysdovhan/bash-handbook#streams"&gt;streams&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# output of ls will be written to list.txt
ls -l &amp;gt; list.txt

# append output to list.txt
ls -a &amp;gt;&amp;gt; list.txt

# all errors will be written to errors.txt
grep da * 2&amp;gt; errors.txt

# read from errors.txt
less &amp;lt; errors.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://github.com/denysdovhan/bash-handbook#using-an-if-statement"&gt;逻辑判断&lt;/a&gt;&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if [[ 2 -ne 1 ]]; then
  echo &amp;quot;true&amp;quot;
else
  echo &amp;quot;false&amp;quot;
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;实用案例&lt;/h1&gt;
&lt;h3&gt;递归替换&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep -rl 'ajax.googleapis.com' ./ | xargs sed -i 's#ajax.googleapis.com#ajax.useso.com#g'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;作用 : 把./目录及其子目录下的&lt;code&gt;ajax.googleapis.com&lt;/code&gt;替换为&lt;code&gt;ajax.useso.com&lt;/code&gt;(实用360CDN替换google CDN)&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-r : 递归
-l : 只列出文件名
xargs : 拼接命令
-i : sed 原地替换
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;批量生成文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;touch (seq -f "%03g-1.mp3" 1 10)&lt;/code&gt;(fish下用()替代$()) &lt;/p&gt;
&lt;p&gt;批量生成001-1.mp3到010-1.mp3&lt;/p&gt;
&lt;h1&gt;date&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;echo $(date +"%Y_%m_%d_%S") #2016_02_22_53&lt;/li&gt;
&lt;li&gt;echo $(date +"s") #从1970至今的秒数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;tar&lt;/h1&gt;
&lt;h3&gt;常见用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -zcvf /tmp/etc.tar.gz /etc &lt;span class="c1"&gt;#打包后，以 gzip 压缩&lt;/span&gt;
tar -zxvf /tmp/etc.tar.gz &lt;span class="c1"&gt;#解压&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;du&lt;/h1&gt;
&lt;p&gt;du -hls * // 列出当前目录下所有文件/目录的大小
du -hls * | grep G //查找大目录&lt;/p&gt;
&lt;h1&gt;定时任务&lt;/h1&gt;
&lt;p&gt;cron用于例行性的任务，at用于一次性的任务&lt;/p&gt;
&lt;h3&gt;at&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;at now+1 minute
cowsay &amp;#39;hello at&amp;#39;  &amp;gt;/tmp/test
#atq 查看任务
# at -c 8 #查看数字对应任务的具体内容
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mac下有问题:&lt;a href="http://superuser.com/questions/43678/mac-os-x-at-command-not-working"&gt;Mac OS X: at command not working&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;cron&lt;/h3&gt;
&lt;p&gt;sudo crontab -e&lt;/p&gt;
&lt;h3&gt;暂停并在后台运行命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CTRL + Z -暂停应用程序&lt;/li&gt;
&lt;li&gt;fg -重新将程序唤到前台&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://man.linuxde.net/grep"&gt;Linux命令大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-01-26:command-tricks.html</guid><category>dev-tools</category></item><item><title>ansible使用笔记</title><link>/ansible-note.html</link><description>&lt;p&gt;手头的服务器越来越多，下决心好好学学ansible了&lt;/p&gt;
&lt;h1&gt;本机安装&lt;/h1&gt;
&lt;p&gt;使用本地机器（mac）作为控制端&lt;/p&gt;
&lt;p&gt;pip install ansible&lt;/p&gt;
&lt;h1&gt;加入被控机器&lt;/h1&gt;
&lt;p&gt;以青云上的两台服务器为例(ubuntu12.04 64bit)，地址分别为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;209.9.106.126 (insight)&lt;/li&gt;
&lt;li&gt;207.226.143.91 (cypress)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及内网的一台机器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.10.100.114 (gogs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vim Inventory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[insight]&lt;/span&gt;
&lt;span class="na"&gt;insight 209.9.106.126 ansible_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh  ansible_ssh_user=ubuntu&lt;/span&gt;

&lt;span class="k"&gt;[cypress]&lt;/span&gt;
&lt;span class="na"&gt;cypress 207.226.143.91  ansible_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh  ansible_ssh_user=ubuntu&lt;/span&gt;

&lt;span class="k"&gt;[gogs]&lt;/span&gt;
&lt;span class="na"&gt;10.10.100.114 ansible_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh  ansible_ssh_user=ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;ssh免密码配置&lt;/h3&gt;
&lt;p&gt;最简单的方式是：&lt;code&gt;ssh-copy-id -i ~/.ssh/id_rsa.pub 209.9.106.126&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;跑跑看&lt;/h3&gt;
&lt;p&gt;ansible -i Inventory  all -m ping (以下为输出)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;insight | SUCCESS =&amp;gt; {
    &amp;quot;changed&amp;quot;: false,
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
cypress | SUCCESS =&amp;gt; {
    &amp;quot;changed&amp;quot;: false,
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;默认配置&lt;/h1&gt;
&lt;p&gt;vim ~/.ansible.cfg&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# .ansible.cfg&lt;/span&gt;
&lt;span class="k"&gt;[defaults]&lt;/span&gt;
&lt;span class="na"&gt;hostfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;~/ansible_workplace/Inventory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以不用-i了&lt;/p&gt;
&lt;h3&gt;给受控机器添加SSH authorized key&lt;/h3&gt;
&lt;p&gt;批量配置authorized key的话，使用核心模块&lt;a href="http://docs.ansible.com/ansible/authorized_key_module.html"&gt;authorized_key_module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ansible -i Inventory insight -m authorized_key -a "user=ubuntu key=https://github.com/wwj718.keys"  #使用核心模块-m authorized_key，使用Ad-hoc（快速运行）&lt;/p&gt;
&lt;h1&gt;随便做些探索&lt;/h1&gt;
&lt;p&gt;ansible  cypress -a "ls ~"
ansible  insight -a "ls ~"
ansible  all -a "ls ~"&lt;/p&gt;
&lt;h3&gt;copy file（local =&amp;gt; remote）&lt;/h3&gt;
&lt;p&gt;echo "#hello ansible copy" &amp;gt; /tmp/hello.py 
ansible  all -m copy -a "src=/tmp/hello.py dest=/tmp"
ansible  all -a "cat /tmp/hello.py"&lt;/p&gt;
&lt;p&gt;以下为输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cypress | SUCCESS | rc=0 &amp;gt;&amp;gt;
#hello ansible copy

insight | SUCCESS | rc=0 &amp;gt;&amp;gt;
#hello ansible copy
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装软件包&lt;/h3&gt;
&lt;p&gt;ansible gogs -m apt -a 'name=nethogs' -u wwj718  --sudo -K&lt;/p&gt;
&lt;h1&gt;资源&lt;/h1&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-01-14:ansible-note.html</guid><category>dev-tools</category></item><item><title>一些有趣的项目</title><link>/something-geek-and-interesting.html</link><description>&lt;h1&gt;目的&lt;/h1&gt;
&lt;p&gt;share something  interesting and geek&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;截图&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="https://github.com/MycroftAI/adapt"&gt;adapt&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://news.softpedia.com/news/mycroft-releases-key-ai-component-as-open-source-498567.shtml"&gt;Mycroft Releases Key AI Component as Open Source&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/unbug/codelf"&gt;codelf&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Search over projects from Github, Bitbucket, Google Code, Codeplex, Sourceforge, Fedora Project to find real-world usage variable names &lt;a href="http://unbug.github.io/codelf/"&gt;http://unbug.github.io/codelf/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;计算机科学里两件最难的事：缓存失效和命名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Codelf试图去解决命名的问题.支持直接搜索中文。&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/zolrath/wemux"&gt;wemux&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;wemux enhances tmux to make multi-user terminal multiplexing both easier and more powerful. It allows users to host a wemux server and have clients join in&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/amoffat/snake"&gt;snake&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Snake lets you use Python to its fullest extent to write Vim plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/google/yapf"&gt;yapf&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A formatter for Python files&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/bordaigorl/sublime-evernote"&gt;sublime-evernote&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Evernote for Sublime Text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/jonathanslenders/ptpython"&gt;ptpython&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A better Python REPL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;if you love ipython ,use &lt;code&gt;ptipython&lt;/code&gt;.if you love vim ,please use F4 to use VI mode&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://github.com/dbcli/mycli"&gt;mycli&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/docker/dockercraft"&gt;dockercraft&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple Minecraft Docker client, to visualize and manage Docker containers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://github.com/syl20bnr/spacemacs"&gt;spacemacs&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A community-driven Emacs distribution - The best editor is neither Emacs nor Vim, it's Emacs &lt;em&gt;and&lt;/em&gt; Vim&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2016-01-11:something-geek-and-interesting.html</guid><category>dev-tools</category></item><item><title>从zsh切换到fish</title><link>/from-zsh-to-fish.html</link><description>&lt;p&gt;大半年来在服务器上，一直用fish&lt;/p&gt;
&lt;p&gt;最近下定决心把mac上的&lt;a href="https://github.com/zsh-users/zsh"&gt;zsh&lt;/a&gt;也替换为&lt;a href="https://github.com/fish-shell/fish-shell"&gt;fish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两者的差异并没太大，当然都比bash好用得多 :），fish给我感觉更轻巧和fashion些&lt;/p&gt;
&lt;h1&gt;zsh&lt;/h1&gt;
&lt;p&gt;zsh用了1年多了，最初对扩展语法不熟，写了些乱七八糟的东西，导致现在运行起来很慢，也不想去修复了（这主要怪我）。再者每次cd进入中文文件夹，都报编码错误，好几次因此在同事面前装逼失败，很是忧伤（这也是我决定放弃zsh的主要原因之一）&lt;/p&gt;
&lt;p&gt;给它截个图留念好了&lt;/p&gt;
&lt;p&gt;&lt;img alt="zsh" src="img/tools/zsh.jpeg" /&gt;&lt;/p&gt;
&lt;h1&gt;fish&lt;/h1&gt;
&lt;p&gt;fish正如它的全称&lt;code&gt;Friendly Interactive Shell&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;fish的好处之一是安装配置都极其简易，而且装上就能用中文，不需要对系统做配置之类的，所以每当ssh到新的服务器，第一件事就是装上fish&lt;/p&gt;
&lt;p&gt;其次fish现代感十足，开箱可用可用的大多数功能都贴心之极&lt;/p&gt;
&lt;p&gt;当当当当：&lt;/p&gt;
&lt;p&gt;&lt;img alt="fish" src="img/tools/fish.jpeg" /&gt;&lt;/p&gt;
&lt;h2&gt;安装fish和oh-my-fish&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install fish
curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install &lt;span class="p"&gt;|&lt;/span&gt; fish
omf &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;设置fish为默认shell&lt;/h2&gt;
&lt;p&gt;chsh -s /usr/local/bin/fish&lt;/p&gt;
&lt;p&gt;在mac下的iTerm2里，你需要打开： &lt;code&gt;iTerm2 &amp;gt; Preferences &amp;gt; Profiles&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在Command里写入&lt;code&gt;/usr/local/bin/fish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;与tmux整合&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;~/.tmux.conf&lt;/code&gt;里加上：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set -g default-command /usr/local/bin/fish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;vim模式&lt;/h2&gt;
&lt;p&gt;fish_vi_mode&lt;/p&gt;
&lt;h2&gt;在线设置&lt;/h2&gt;
&lt;p&gt;fish_config&lt;/p&gt;
&lt;h2&gt;可选主题&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md"&gt;fish themes&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;安装主题&lt;/h3&gt;
&lt;p&gt;omf install  agnoster&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;python 环境&lt;/h2&gt;
&lt;p&gt;需要注意的是使用virtualenv创建的python env，需要使用以下指令进入：&lt;code&gt;source env/bin/activate.fish&lt;/code&gt;,而不是bash和zsh下的&lt;code&gt;source env/bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;资料&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hackercodex.com/guide/install-fish-shell-mac-ubuntu/"&gt;Install Fish Shell on Mac OS X and Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;插件&lt;/h1&gt;
&lt;h2&gt;&lt;a href="https://github.com/sjl/z-fish"&gt;z-fish&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目录快速移动&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;git clone https://github.com/sjl/z-fish.git&lt;/li&gt;
&lt;li&gt;. /path/to/z.fish添加到 ~/.config/fish/config.fish&lt;/li&gt;
&lt;li&gt;z --add "$PWD"&lt;/li&gt;
&lt;li&gt;z [-h/-l]&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;问题&lt;/h1&gt;
&lt;h3&gt;history&lt;/h3&gt;
&lt;p&gt;ubuntu上默认的fish版本太久，需要用新版的fish，这样在tmux中的历史也可用&lt;/p&gt;
&lt;h1&gt;与bash不一致处&lt;/h1&gt;
&lt;p&gt;主要列出影响我日常使用的&lt;/p&gt;
&lt;h3&gt;环境变量&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;env name="wwj" python test.py&lt;/code&gt; 这样在test.py里可以通过&lt;code&gt;os.environ.get("name")&lt;/code&gt;得到&lt;code&gt;wwj&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;code&gt;set -x yige_key my_key&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-12-03:from-zsh-to-fish.html</guid><category>dev-tools</category></item><item><title>文档格式转化神器pandoc</title><link>/document-factory-pandoc.html</link><description>&lt;p&gt;作为一个工具控，喜欢被别人安利有趣的东西，我就很喜欢@XD小伙伴时不时的分享，遇到喜欢的东西也不能藏过夜，想快快安利给大家&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jgm/pandoc"&gt;pandoc&lt;/a&gt;的惊艳是那种 风陵渡口，人间初见误终身。&lt;/p&gt;
&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;最近要给公司提供一堆文档，作为过去技术开发的总结，其实大多都已经整理在我的个人博客中了。可毕竟我不能ctrl-s下来吧，文档要的是干净利落整洁清晰，html参杂了博客的样式，显然不合适，同时公司喜欢归档pdf或是word格式的文件&lt;/p&gt;
&lt;p&gt;而我又习惯使用markdown写文档，我想大多程序员也是如此吧，在word里写会做噩梦的&lt;/p&gt;
&lt;p&gt;于是我找到&lt;code&gt;Mou&lt;/code&gt;(一款优秀的markdown写作工具)的导出功能，导出为PDF，可效果丑的不要不要的&lt;/p&gt;
&lt;p&gt;祭出神器Github，分分钟，找到pandoc&lt;/p&gt;
&lt;p&gt;一看源码吓的我都坐到地上了，90.5%的代码是Haskell写的，Haskell写的！写的！的！&lt;/p&gt;
&lt;p&gt;Pandoc作者是John MacFarlane，一位来自美国加州大学伯克利分校的哲学教授&lt;/p&gt;
&lt;p&gt;抛开Haskell的贵族血统不说，稳定和易用程度也是惊人&lt;/p&gt;
&lt;h1&gt;特性&lt;/h1&gt;
&lt;p&gt;pandoc能轻易把文件从一种标记语言格式转换到另一种格式，瑞士军刀一般全面而锋利。&lt;/p&gt;
&lt;p&gt;允许的input file：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;reStructuredText  &lt;/li&gt;
&lt;li&gt;GitHub-Flavored Markdown&lt;/li&gt;
&lt;li&gt;Word docx&lt;/li&gt;
&lt;li&gt;ODT&lt;/li&gt;
&lt;li&gt;HTML &lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;EPUB(v2 or v3)&lt;/li&gt;
&lt;li&gt;CommonMark&lt;/li&gt;
&lt;li&gt;PHP Markdown Extra&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;li&gt;MediaWiki markup&lt;/li&gt;
&lt;li&gt;TWiki markup &lt;/li&gt;
&lt;li&gt;Haddock markup&lt;/li&gt;
&lt;li&gt;OPML &lt;/li&gt;
&lt;li&gt;Emacs Org mode &lt;/li&gt;
&lt;li&gt;DocBook&lt;/li&gt;
&lt;li&gt;txt2tags &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选的output file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PDF&lt;/li&gt;
&lt;li&gt;plain text,&lt;/li&gt;
&lt;li&gt;Markdown &lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;Word docx&lt;/li&gt;
&lt;li&gt;OpenDocument&lt;/li&gt;
&lt;li&gt;ODT&lt;/li&gt;
&lt;li&gt;reveal.js或是S5 HTML 幻灯片&lt;/li&gt;
&lt;li&gt;CommonMark&lt;/li&gt;
&lt;li&gt;PHP Markdown Extra&lt;/li&gt;
&lt;li&gt;GitHub-Flavored Markdown&lt;/li&gt;
&lt;li&gt;reStructuredText&lt;/li&gt;
&lt;li&gt;XHTML&lt;/li&gt;
&lt;li&gt;ConTeXt&lt;/li&gt;
&lt;li&gt;RTF&lt;/li&gt;
&lt;li&gt;OPML&lt;/li&gt;
&lt;li&gt;DocBook&lt;/li&gt;
&lt;li&gt;OpenDocument&lt;/li&gt;
&lt;li&gt;ODT&lt;/li&gt;
&lt;li&gt;GNU Texinfo&lt;/li&gt;
&lt;li&gt;MediaWiki markup&lt;/li&gt;
&lt;li&gt;DokuWiki markup&lt;/li&gt;
&lt;li&gt;Haddock markup&lt;/li&gt;
&lt;li&gt;EPUB(v2 or v3)&lt;/li&gt;
&lt;li&gt;FictionBook2&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;li&gt;groff man&lt;/li&gt;
&lt;li&gt;Emacs Org mode&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;InDesign ICML&lt;/li&gt;
&lt;li&gt;Slidy&lt;/li&gt;
&lt;li&gt;Slideous&lt;/li&gt;
&lt;li&gt;DZSlides] &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://yanping.me/cn/blog/2012/03/13/pandoc/"&gt;这篇文章&lt;/a&gt;做了更好的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML格式: XHTML, HTML5, 以及HTML幻灯片Slidy， S5，或者DZSlides.&lt;/li&gt;
&lt;li&gt;文字处理软件格式： Microsoft Word docx, OpenOffice/LibreOffice ODT, OpenDocument XML&lt;/li&gt;
&lt;li&gt;电子书： EPUB&lt;/li&gt;
&lt;li&gt;文档格式： DocBook, GNU TexInfo, Groff man pages&lt;/li&gt;
&lt;li&gt;TeX格式： LaTeX, ConTeXt, LaTeX Beamer slides&lt;/li&gt;
&lt;li&gt;PDF via LaTeX&lt;/li&gt;
&lt;li&gt;轻量级标记语言格式： Markdown, reStructuredText, AsciiDoc, MediaWiki markup, Emacs Org-Mode, Textile&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装（Mac下）&lt;/h1&gt;
&lt;p&gt;brew install pandoc&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;pandoc Open edX体系架构.md -o test.docx -c Github.css&lt;/p&gt;
&lt;p&gt;你看pandoc很聪明的，它会根据后缀自动判断格式&lt;/p&gt;
&lt;p&gt;于是我们看到格式从markdown：&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandoc1" src="img/tools/pandoc1.png" /&gt;&lt;/p&gt;
&lt;p&gt;转化到docx，以Github的样式风格&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandoc2" src="img/tools/pandoc2.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Todo&lt;/h1&gt;
&lt;h2&gt;md2docx.py&lt;/h2&gt;
&lt;p&gt;写个脚本把当前目录下所有md文件装化为同名docx&lt;/p&gt;
&lt;h2&gt;md2webppt&lt;/h2&gt;
&lt;p&gt;也不想写ppt，折腾半天的字号好烦&lt;/p&gt;
&lt;p&gt;vim slides.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% md2webppt&lt;/span&gt;
&lt;span class="c"&gt;% wwj&lt;/span&gt;
&lt;span class="c"&gt;% 2015/11/24&lt;/span&gt;

# 第一页

&lt;span class="o"&gt;-&lt;/span&gt; 第一项
&lt;span class="o"&gt;-&lt;/span&gt; 第二项

# 第一页

&lt;span class="o"&gt;-&lt;/span&gt; 第三项
&lt;span class="o"&gt;-&lt;/span&gt; 第四项

# 第一页

&lt;span class="o"&gt;-&lt;/span&gt; 第五项
&lt;span class="o"&gt;-&lt;/span&gt; 第六项
&lt;span class="o"&gt;-&lt;/span&gt; !&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pandoc slides.md -o slides.html -t dzslides -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们也可以使用流行的&lt;a href="https://github.com/hakimel/reveal.js"&gt;reveal.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pandoc slides.md -o slides.html -t revealjs -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们还有一些主题可选：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pandoc slides.md -o slides.html -t revealjs -s -V theme=solarized&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default：（默认）深灰色背景，白色文字&lt;/li&gt;
&lt;li&gt;beige：米色背景，深色文字&lt;/li&gt;
&lt;li&gt;sky：天蓝色背景，白色细文字&lt;/li&gt;
&lt;li&gt;night：黑色背景，白色粗文字&lt;/li&gt;
&lt;li&gt;serif：浅色背景，灰色衬线文字&lt;/li&gt;
&lt;li&gt;simple：白色背景，黑色文字&lt;/li&gt;
&lt;li&gt;solarized：奶油色背景，深青色文字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更完备的案例参考&lt;a href="https://github.com/wwj718/reveal.js-with-pandoc"&gt;reveal.js-with-pandoc&lt;/a&gt;.这也是我自己在用的模板&lt;/p&gt;
&lt;p&gt;用markdown写PPT真是爽嗨&lt;/p&gt;
&lt;h1&gt;more&lt;/h1&gt;
&lt;p&gt;更多强大的特性，参考&lt;a href="https://github.com/jgm/pandoc"&gt;jgm/pandoc&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;附&lt;/h1&gt;
&lt;p&gt;如果你想convert pdf，请使用&lt;a href="https://github.com/coolwanglu/pdf2htmlEX"&gt;pdf2htmlEX&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;pdf2htmlEX --fit-width 1024 integral.pdf&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jgm/pandoc-templates"&gt;pandoc-templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wwj718/reveal.js-with-pandoc"&gt;reveal.js-with-pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/6e2ec0b8fff1"&gt;利用pandoc把markdown转换为doc和ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-11-23:document-factory-pandoc.html</guid><category>dev-tools</category></item><item><title>伪数据工厂faker</title><link>/fake-data-factory.html</link><description>&lt;p&gt;睁眼说瞎话并不为程序员所擅长，大多码农都避之不及，可在编程过程中，出于测试或是临时提供接口的目的，我们总得制造伪数据。如果需要伪造人名，三个以内还好，张三李四王五，可超过10个的话，我不知道你是不是就要侵犯你好朋友的姓名权了&lt;/p&gt;
&lt;p&gt;而如果是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你要怎么办呢？&lt;/p&gt;
&lt;h1&gt;faker闪亮登场&lt;/h1&gt;
&lt;h2&gt;Install faker&lt;/h2&gt;
&lt;p&gt;pip install fake-factory&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;拿上边的问题来说，我们需要产生一组&lt;code&gt;(name,address,phone_number)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;faker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt;
&lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zh_CN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="c1"&gt;#Student(name,address,phone_number)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;危莉 超市皇路u座 109784 18689765254
富东 琴市东街Q座 532875 15549156990
白宇 帆市闵街Y座 106094 14580766320
俞玉英 坤市督街k座 509819 13771875966
陆淑珍 娟市乐路X座 113166 15929147106
束红梅 磊市贲街h座 699061 15315800191
牧秀云 杰市滕街l座 315704 14564550529
游平 敏市牧街D座 152585 18580747599
万雷 桂花市屈路t座 423929 15649801854
司华 慧市索街b座 208656 13748193777
尹华 春梅市荀街d座 834796 13621273546
赖桂兰 丽丽市白街Z座 759194 18948910936
卜勇 秀珍市冷路r座 589146 15565418368
终婷婷 军市丁路v座 724209 14720124023
东芳 桂英市谭街Z座 570071 18558694020
羊红霞 丹市柴街q座 806049 13153710279
芮倩 琴市席街p座 291743 15030602445
阮淑珍 丽丽市滕路q座 911886 18900809224
丁芳 冬梅市佴路V座 424657 13332629139
车畅 玉珍市蓝路v座 549485 15826010349
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你看睁眼说瞎话容易多了吧！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;例子过后，下边我们来正式介绍下faker&lt;/p&gt;
&lt;h1&gt;What&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Faker is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少量数据我们还可以自己瞎编，一旦数据变多，faker的好处就体现出来了，这对自动化很有好处&lt;/p&gt;
&lt;h1&gt;使用演示&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;Lucy Cechtelar&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;426 Jordy Lodge&lt;/span&gt;
&lt;span class="c1"&gt;#  Cartwrightshire, SC 88120-6700&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi&lt;/span&gt;
&lt;span class="c1"&gt;# beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt&lt;/span&gt;
&lt;span class="c1"&gt;# amet quidem. Iusto deleniti cum autem ad quia aperiam.&lt;/span&gt;
&lt;span class="c1"&gt;# A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui&lt;/span&gt;
&lt;span class="c1"&gt;# quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur&lt;/span&gt;
&lt;span class="c1"&gt;# voluptatem sit aliquam. Dolores voluptatum est.&lt;/span&gt;
&lt;span class="c1"&gt;# Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.&lt;/span&gt;
&lt;span class="c1"&gt;# Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.&lt;/span&gt;
&lt;span class="c1"&gt;# Et sint et. Ut ducimus quod nemo ab voluptatum.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;中文本地化相关&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://fake-factory.readthedocs.org/en/master/locales/zh_CN.html"&gt;locales/zh_CN&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/joke2k/faker"&gt;joke2k/faker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fake-factory.readthedocs.org/en/master/index.html"&gt;fake-factory factory.readthedocs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-11-23:fake-data-factory.html</guid><category>dev-tools</category></item><item><title>vim tricks</title><link>/vim-tricks.html</link><description>&lt;p&gt;我是vim重度用户，在这里记录平时自己平时比较喜欢的小技巧&lt;/p&gt;
&lt;p&gt;许多命令看去作用很具体，如果你熟悉vim的一般规则(可以参考《Vim实用技巧》)，将以下例子视为脚手架，可以百般变化&lt;/p&gt;
&lt;p&gt;一个常用的规则是 &lt;code&gt;(number) (command) (text object)&lt;/code&gt;:number是可选的数值参数，command是c/d/y，text object是一个移动命令&lt;/p&gt;
&lt;h3&gt;format&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gg=G&lt;/code&gt;：&lt;code&gt;gg&lt;/code&gt; to get the start of the file, &lt;code&gt;=&lt;/code&gt; to indent, &lt;code&gt;G&lt;/code&gt; to the end of the file&lt;/p&gt;
&lt;h3&gt;comment/uncomment&lt;/h3&gt;
&lt;p&gt;使用插件:&lt;code&gt;Bundle 'scrooloose/nerdcommenter'&lt;/code&gt; (k-vim已带)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/code&gt;  加上/解开注释, 智能判断&lt;/p&gt;
&lt;h3&gt;vim and command&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:!open %&lt;/code&gt;:mac下打开当前文件，&lt;code&gt;%&lt;/code&gt;代表当前文件，open只是command，所以你可以&lt;code&gt;:python %:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:read !ls&lt;/code&gt;: read command output（into buffer）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:write !sh&lt;/code&gt;:类似于管道，把当前文本传入命令中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;块操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;di(&lt;/code&gt;:删除括号里的内容，&lt;code&gt;'vi('&lt;/code&gt;选中括号里的内容，同理就有&lt;code&gt;di'&lt;/code&gt;，&lt;code&gt;vi]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;移动&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;:跳到与之匹配的括号&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;显示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:set list&lt;/code&gt;:显示不可见字符 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;剪切板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reg&lt;/code&gt; : 列出剪切板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"d3yy&lt;/code&gt; :  将后续3行拖曳到缓冲区d中(&lt;code&gt;"x&lt;/code&gt;表示记号)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"dp&lt;/code&gt; : 将缓冲区内容放置在光标后&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;mark&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;marks&lt;/code&gt; : show marks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ma&lt;/code&gt; : 用 &lt;code&gt;a&lt;/code&gt; 标记当前的光标位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'a&lt;/code&gt; : 调到a位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;replace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:1,10s/\n//g&lt;/code&gt;:将1到10行合并为一行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:1,10s:\n::g&lt;/code&gt;:使用&lt;code&gt;:&lt;/code&gt;来分割&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%s/\/\/.*$//g&lt;/code&gt;: 去掉所有js注释&lt;code&gt;（//）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$s/\s//g&lt;/code&gt;:去掉所有的空格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;后向引用&lt;/code&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:%s/\(\d\)/[\1]/g&lt;/code&gt;:把数字用&lt;code&gt;[]&lt;/code&gt;包裹起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-11-06:vim-tricks.html</guid><category>dev-tools</category></item><item><title>命令行神器之jq</title><link>/command-tool-jq.html</link><description>&lt;p&gt;神器有很多种，有一种是你一旦试用，就无法想象遇到它之前都是怎么过来的&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/stedolan/jq"&gt;jq&lt;/a&gt;属于这种&lt;/p&gt;
&lt;h1&gt;是什么&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;jq is a lightweight and flexible command-line JSON processor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jq是一款命令行工具，专门用来处理json文件，与所有优秀的命令行工具一样，短小精悍，通过管道他们相互协作，组合出惊人的效果&lt;/p&gt;
&lt;p&gt;jq的使用习惯和sed/grep相似&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;mac: &lt;code&gt;brew install jq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ubuntu: &lt;code&gt;sudo apt-get install jq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;cat account.json&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;bio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;requires_parental_consent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;is_active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;profile_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;image_url_full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;image_url_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;image_url_medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;image_url_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;has_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;year_of_birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;level_of_education&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;goals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;language_proficiencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;mailing_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;date_joined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-05-13T09:42:45Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;原文输出(格式化json)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;bio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;requires_parental_consent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;is_active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;profile_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image_url_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;has_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;year_of_birth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;level_of_education&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;goals&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;language_proficiencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;mailing_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wwj@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;date_joined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-05-13T09:42:45Z&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;过滤&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.profile_image'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_120.33ad4f755071.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_50.5fb006f96a15.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;image_url_small&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.com/static/images/default-theme/default-profile_30.ae6a9ca9b390.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;has_image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果key不存在则返回null&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.testname'&lt;/code&gt; 返回null&lt;/p&gt;
&lt;h3&gt;支持嵌套&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat  ./account.json|jq '.profile_image.image_url_full'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"http://example.com/static/images/default-theme/default-profile_500.de2c6854f1eb.png"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;语法检查&lt;/h3&gt;
&lt;p&gt;cat test.json&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;ddd&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cat test.json | jq '.'&lt;/code&gt;返回&lt;code&gt;parse error: Invalid numeric literal at line 3, column 8&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;在线体验&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jqplay.org/"&gt;jqplay.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;上手&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/tutorial/"&gt;Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文档&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/manual/"&gt;manual&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;进阶&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/stedolan/jq/wiki/Cookbook"&gt;Cookbook&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;在edx-platform中使用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/edx/app/edxapp/*.*.json&lt;/code&gt;用于覆盖aws.py和devstack.py里的配置参数，为用户配置edx提供了便利，但是由于缺乏语法检查一个小失误（诸如漏了逗号，漏了引号），就会造成edx启动失败，而且错误信息几乎无法定位。&lt;/p&gt;
&lt;p&gt;有了jq，可以方便地检查语法以及查看参数&lt;/p&gt;
&lt;p&gt;如果我们把jq当做处理json数据的sed，还可以方便用来写配置edx的脚本&lt;/p&gt;
&lt;h3&gt;我的实践&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/use-qingcloud-cli-contral-qingcloud.html"&gt;使用命令行操作青云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.just4fun.site/edx-data-migrate.html"&gt;edx数据迁移&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-10-29:command-tool-jq.html</guid><category>dev-tools</category></item><item><title>使用json-server来帮助前后端分离</title><link>/use-json-server.html</link><description>&lt;p&gt;我是个挺工具控的人，平时喜欢收集各种能提高生活质量/工作效率的小工具。&lt;/p&gt;
&lt;p&gt;同时也挺热衷于分享，对于自己爱不释手的工具，总会忍不住想安利给周围的人。&lt;/p&gt;
&lt;p&gt;如果大家用着开心，因为这些工具的帮助，能省下更多的时间去看书/约会/看电影，那么编写这些工具本身，成了一件多么性感而浪漫的事呀&lt;/p&gt;
&lt;p&gt;今天推荐的一款工具叫：&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;，在它的帮助下，你能在半分钟之内搭建一个REST API服务器，支持CURD操作&lt;/p&gt;
&lt;h2&gt;前后端分离&lt;/h2&gt;
&lt;p&gt;前后端分离是个很棒的想法。一般而言，开发一个Web应用的时候，我们都会简单地分为前端工程师和后端工程师。职责划分时，通常的做法是前端工程师负责浏览器端用户交互界面和逻辑等，后端负责数据的处理和存储等。可以概括为：后端提供数据，前端负责显示数据。&lt;/p&gt;
&lt;p&gt;在前后端通信中，当前流行的的做法是采用json作为中介，接口采用RESTful的风格&lt;/p&gt;
&lt;p&gt;我们时常面对这样一个问题，前端的工作似乎依赖于后端提供的接口，那么在后端构建好应用之前，前端除了逛github外，就无事可做了，卧槽这不敏捷呀。&lt;/p&gt;
&lt;p&gt;一般公司的做法可能是，先约定好接口，大家按照规范来编程，的确，这样做之后，开发工作就能并行开展了。可是伪造数据是个很烦人的工作呀，尤其是数据的增删改，前端都得手动来写，json这种东西一不小心又容易写错，而且前端开发如果是个团队的话，大家其实都期待有个一致的数据源，基于同样的数据，这样交流起来容易许多。&lt;/p&gt;
&lt;p&gt;在这种情况下你如果遇到&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;，该是怎样一种相见恨晚的感觉。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt;让你迅速搭建器一个REST API服务器，你要做的仅仅需要创建一个json文件即可，完全不必有任何服务器和后端的知识。&lt;/p&gt;
&lt;p&gt;如此一来，前后端分离中容易耦合的部分（接口数据），在开发阶段就被解耦了&lt;/p&gt;
&lt;p&gt;另外，关于前后端分离，阿里内部对此的实践很多，有兴趣的同学可以围观&lt;a href="http://ued.taobao.org/blog/2014/04/full-stack-development-with-nodejs/"&gt;前后端分离的思考与实践&lt;/a&gt;.去年去阿里参加了一个会议，他们分享了不少这一块的经验和前车之鉴，挺引人深思的。&lt;/p&gt;
&lt;h2&gt;json-server的安装与使用&lt;/h2&gt;
&lt;h3&gt;本地安装&lt;/h3&gt;
&lt;p&gt;首先你本地要装有nodejs。之后直接安装json-server：&lt;code&gt;sudo npm install -g json-server&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;使用docker&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://github.com/clue/docker-json-server"&gt;这里&lt;/a&gt;.&lt;br /&gt;
几乎也是一键式的：&lt;code&gt;docker run -d -p 80:80 -v /home/user/articles.json:/data/db.json clue/json-server&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;创建一个json文件，类似这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json-server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;typicode&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;some comment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;postId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;typicode&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;万事具备，可以开始啦：&lt;code&gt;json-server --watch db.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中打开&lt;code&gt;http://127.0.0.1:3000/&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;对于当前这个例子，请求所有数据为http://127.0.0.1:3000/db&lt;/p&gt;
&lt;h3&gt;CURD操作&lt;/h3&gt;
&lt;p&gt;采用RESTful风格，可以使用Postman或httpie来测试&lt;/p&gt;
&lt;p&gt;以httpie来演示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http delete &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:3000/posts &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wwj
&lt;span class="c1"&gt;#response: HTTP/1.1 201 Created&lt;/span&gt;
http post &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:3000/posts/2 
&lt;span class="c1"&gt;#response: HTTP/1.1 200 OK &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;值得说明的一点是，json-server支持跨域请求（实际上跨域是一个安全策略问题，浏览器端总是能发送跨域请求的，重点在服务器端是不是愿意接受，json-server处于开发的便利愿意接受跨域请求，所以用户直接在静态文件里就能开发ajax程序！）,如果我们在ubuntu上部署的话，记得&lt;code&gt;ln -s /usr/bin/nodejs /usr/bin/node&lt;/code&gt;,否则会说找不到node&lt;/p&gt;
&lt;h2&gt;在edX开发中的应用&lt;/h2&gt;
&lt;p&gt;开发xblock组件时，前后端通信也是采用json，json-server很适合用来模拟后端的数据&lt;/p&gt;
&lt;h2&gt;后记&lt;/h2&gt;
&lt;p&gt;这半年来，对优化workflow兴趣浓厚，大概可以表述为对如下命题的兴趣：如何使用开源工具来优化公司内部的日常工作流，包括但不限于自动化测试，提供基础服务，自动化办公 。 先后在公司内部搭建了私有论坛，代码托管，私有文件存储，内网映射服务&lt;/p&gt;
&lt;p&gt;之后有可能，很适合将json-server构建为公司内部使用的在线服务，开发者们只需要在线编写初始化的json文件，服务便可跑起来，为前端开发者提供 REST API&lt;/p&gt;
&lt;p&gt;技术上实现很简单，使用flask搭建一个在线服务,提供一个在线编辑器&lt;a href="https://github.com/codemirror/CodeMirror"&gt;CodeMirror&lt;/a&gt;，将格式正确的json保存为文件，之后在flask中调用子线程把服务跑起来就行&lt;/p&gt;
&lt;p&gt;如果不考虑安全的话，就更简单，启用一个json-server即可，用户各自在自己的区域做操作即可（诸如我只在/wwj下做操作），互不干扰。初始化的数据，可以用httpie脚本化生成&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-10-23:use-json-server.html</guid><category>dev-tools</category></item><item><title>docker使用小结</title><link>/docker-summary.html</link><description>&lt;h1&gt;安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/installation/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;国内用户推荐使用&lt;a href="http://get.daocloud.io/"&gt;get.daocloud.io&lt;/a&gt;来方便安装docker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确保docker运行正常：&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;卸载&lt;/h3&gt;
&lt;p&gt;针对使用wget安装的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get purge docker-engine
sudo apt-get autoremove --purge docker-engine
rm -rf /var/lib/docker
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;设置&lt;/h1&gt;
&lt;h3&gt;修改docker存储目录&lt;/h3&gt;
&lt;p&gt;ubuntu : /etc/default/docker ,使得：DOCKER_OPTS="-g /somewhere/else/docker/"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service docker stop
sudo cp -r /var/lib/docker /somewhere/else/docker &lt;span class="c1"&gt;#/somewhere/else/docker目录本来不存在&lt;/span&gt;
sudo service docker restar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;centos参考这里:&lt;a href="https://github.com/docker/docker/issues/3127"&gt;Best way to move docker directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过修改配置，可以让docker远程可访问&lt;/p&gt;
&lt;p&gt;/etc/default/docker &lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;所有的指令示意图可参考：&lt;/p&gt;
&lt;p&gt;&lt;img alt="all_command" src="img/edx/docker/all_command.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;列出docker的常用指令,主要便于参考,(以下命令可能需要带上sudo),其实我日常使用的基本只有4-5条&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker version&lt;/code&gt; : 可用于查看docker是否安装完成&lt;/p&gt;
&lt;h2&gt;对image的操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker search image_name : 在docker hub上搜索镜像&lt;/li&gt;
&lt;li&gt;docker pull image_name:tag_name : 拉取镜像&lt;/li&gt;
&lt;li&gt;docker images : 列出镜像列表&lt;/li&gt;
&lt;li&gt;docker rmi image_name : 删除镜像&lt;/li&gt;
&lt;li&gt;docker history image_name : 显示镜像的历史&lt;/li&gt;
&lt;li&gt;docker inspect image_name : 检查镜像底层信息，json化输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;保存和加载镜像&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker save ubuntu:latest &amp;gt; ubuntu_save.tar : 保存镜像到一个tar包&lt;/li&gt;
&lt;li&gt;docker load &amp;lt; ubuntu_save.tar : 加载一个tar包格式的镜像(之后的镜像信息都在，包括名字)&lt;/li&gt;
&lt;li&gt;sudo docker export &lt;CONTAINER ID&gt; &amp;gt; ubuntu_export.tar : 保存容器到一个tar包&lt;/li&gt;
&lt;li&gt;cat ubuntu_export.tar | docker import - wwj/ubuntu : 加载容器到一个印象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;save和export的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Export命令用于持久化容器（不是镜像） (sudo docker ps列出容器）&lt;/li&gt;
&lt;li&gt;Save命令用于持久化镜像（不是容器）(sudo docker images列出镜像)&lt;/li&gt;
&lt;li&gt;The exported image will not have any layer or history information saved, so it will be smaller and you will not be able to rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;发布image&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker push image_name &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;对container的操作&lt;/h2&gt;
&lt;h3&gt;启动容器（run）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好比我通常使用edx_cypress_docker时时这样run的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker run -itd -P wwj718/edx_cypress_docker:1.05&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d:后台模式&lt;/li&gt;
&lt;li&gt;-i -t参数是为了同容器进行数据交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可选：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--rm : Docker能在容器结束时自动清理其所产生的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的使用细节参考&lt;a href="http://dockone.io/article/152"&gt;Docker run 命令的使用方法&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;查看容器（ps）&lt;/h2&gt;
&lt;p&gt;docker ps&lt;/p&gt;
&lt;h3&gt;对容器的日常操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker commit ID image_name:tag_name&lt;/li&gt;
&lt;li&gt;docker rm -f $(docker ps -aq) : 删除所有容器&lt;/li&gt;
&lt;li&gt;docker rm Name/ID : 删除单个容器&lt;/li&gt;
&lt;li&gt;docker kill Name/ID : kill一个容器&lt;/li&gt;
&lt;li&gt;docker restart Name/ID : 重启一个正在运行的容器&lt;/li&gt;
&lt;li&gt;docker logs Name/ID : 从一个容器中取日志&lt;/li&gt;
&lt;li&gt;docker diff Name/ID : 列出一个容器里面被改变的文件或者目录&lt;/li&gt;
&lt;li&gt;docker top Name/ID : 显示一个运行的容器里面的进程信息&lt;/li&gt;
&lt;li&gt;docker cp Name:/container_path to_path : 从容器里面拷贝文件/目录到本地一个路径&lt;/li&gt;
&lt;li&gt;docker exec Name/ID /bin/bash&lt;/li&gt;
&lt;li&gt;exec与attach的区别参考&lt;a href="http://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec"&gt;这里&lt;/a&gt;     &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Dockerfile&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/reference/builder/"&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oschina.net/news/64396/dockerfile-instructions"&gt;Dockerfile 简版大全，附赠编写实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;相关服务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/"&gt;docker hub&lt;/a&gt;:docker官方镜像托管，支持在线Build&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;学习资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dockerpool.com/static/books/docker_practice/index.html"&gt;Docker —— 从入门到实践&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;手册&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wsargent/docker-cheat-sheet"&gt;docker-cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tedblog.cc/wordpress/?p=49"&gt;docker使用小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2015-10-13:docker-summary.html</guid><category>tools</category></item><item><title>tmux使用笔记</title><link>/screen-and-tmux.html</link><description>&lt;h2&gt;why&lt;/h2&gt;
&lt;p&gt;tmux 是一个优秀的终端复用软件，类似 GNU Screen&lt;/p&gt;
&lt;p&gt;通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台&lt;/p&gt;
&lt;p&gt;并且支持session&lt;/p&gt;
&lt;h2&gt;相关概念&lt;/h2&gt;
&lt;p&gt;有如下几个概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;session. session是一个特定的终端组合。输入tmux就可以打开一个新的session。&lt;/li&gt;
&lt;li&gt;window。window 为session中的终端。&lt;/li&gt;
&lt;li&gt;pane 。pane为一个window分隔出来的各个间隔，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常用命令&lt;/h2&gt;
&lt;p&gt;记得加前缀 ctrl+b&lt;/p&gt;
&lt;h3&gt;session操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; 列出所有session。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 选择session&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl-b d&lt;/code&gt;, 退出当前session。输入&lt;code&gt;tmux attach [-t sessionname]&lt;/code&gt;重新进入该session。例如&lt;code&gt;tmux attach -t 1&lt;/code&gt;即可切换到名字为1的session。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 重命名当前session&lt;/li&gt;
&lt;li&gt;&lt;c-z&gt; 挂起当前session&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;window操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ctrl+b&lt;/code&gt;是前提操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 创建一个新的window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; 重命名当前window (切换后名字会消失 why？zsh造成的？)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 关闭当前window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 移动到下一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; 移动到前一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; 切换到上一个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; 列出所有窗口编号,并进行选择切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;编号&lt;/code&gt; 移动到指定编号的窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; 修改窗口编号，相当于排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; 搜索所有的窗口。非常方便的功能。如图&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;pane操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"&lt;/code&gt; 横向分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 纵向分割&lt;/li&gt;
&lt;li&gt;&lt;code&gt;方向键&lt;/code&gt; 在pane直接移动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; 到下一个pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+方向键&lt;/code&gt;   以1个单元格为单位移动边缘以调整当前面板大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt+方向键&lt;/code&gt;    以5个单元格为单位移动边缘以调整当前面板大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ / }&lt;/code&gt;左右pane交换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;空格&lt;/code&gt; 横竖切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; 显示pane的编号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 关闭当前pane&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;pane 聚焦当前窗口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;开多个pane，一个页面多任务 (记得加前缀)&lt;ul&gt;
&lt;li&gt;Ctrl+o:顺时针旋转当前窗口的面板&lt;/li&gt;
&lt;li&gt;z    tmux 1.8新特性，最大化当前所在面板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;p&gt;~/.tmux&lt;/p&gt;
&lt;h3&gt;翻页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt; 之后按翻页键就行，mac下是fn+方向键&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;典型用例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux new -s wwj # 创建命名session
tmux attach -t wwj #登录
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;结对编程&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#需要使用同个用户操作，可以建立tmux用户
tmux new-session -s insight #创建一个组会话，名为insight
tmux new-session -t insight -s wwj #新建会话wwj到insight组
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;tmux+vim&lt;/h1&gt;
&lt;p&gt;Tmux 最经典的使用场景便是用 Tmux+Vim 来做一个IDE&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.freebsdchina.org/software/t/tmux"&gt;使用tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://foocoder.com/blog/zhong-duan-huan-jing-zhi-tmux.html/"&gt;终端环境之tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/MohamedAlaa/2961058"&gt;tmux-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kancloud.cn/kancloud/tmux/62466"&gt;使用 tmux 结对编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/tmux/"&gt;Tmux - Linux从业者必备利器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/86571/"&gt;文本三巨头：zsh、tmux 和 vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-08-27:screen-and-tmux.html</guid><category>ubuntu</category></item><item><title>mongo学习笔记</title><link>/learn-mongo.html</link><description>&lt;p&gt;edx生产环境使用了mongo数据库。&lt;/p&gt;
&lt;p&gt;对mongo数据库垂涎已久，其高性能/开源/无模式/文档型数据库/...多么诱人的特性，之前也偶尔折腾着玩过，不过都没做笔记，趁此机会重新捡起来。&lt;/p&gt;
&lt;h2&gt;关于mongo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mongo支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能&lt;/p&gt;
&lt;p&gt;&lt;img alt="a-mongo-document" src="http://wwjpic.qiniudn.com/mongo-document.png" /&gt;&lt;/p&gt;
&lt;h2&gt;mongo是一种NoSql数据库&lt;/h2&gt;
&lt;p&gt;NoSql，全称是 Not Only Sql,指的是非关系型的数据库。主要解决几个要点：非关系型的、分布式的、开源的、水平可扩展的。原始的目的是为了大规模web应用。通常特性应用如：模式自由、支持简易复制、简单的API、最终的一致性（非ACID）、大容量数据等。NoSQL被我们用得最多的当数key-value存储。&lt;/p&gt;
&lt;h3&gt;mongo特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;模式自由。&lt;/li&gt;
&lt;li&gt;支持动态查询。&lt;/li&gt;
&lt;li&gt;支持完全索引，包含内部对象。&lt;/li&gt;
&lt;li&gt;支持查询。&lt;/li&gt;
&lt;li&gt;支持复制和故障恢复。&lt;/li&gt;
&lt;li&gt;文件存储格式为BSON（一种JSON的扩展）。&lt;/li&gt;
&lt;li&gt;可通过网络访问。&lt;/li&gt;
&lt;li&gt;支持Python，PHP，Ruby，Java，C，C#，Javascript，Perl及C++语言的驱动程序&lt;/li&gt;
&lt;li&gt;使用高效的二进制数据存储，包括大型对象（如视频等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;软件即服务&lt;/h2&gt;
&lt;p&gt;将mongo当做一个服务，通过接口CRUD我们的数据。&lt;/p&gt;
&lt;p&gt;对于不同用户角色，对mongo所需的了解方面是不同的，我们的角色是Developers，我们主要将它作为服务来使用。&lt;/p&gt;
&lt;p&gt;细节可以参考&lt;a href="http://docs.mongodb.org/manual/reference/"&gt;reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而作为python开发者，我们使用mongo的&lt;a href="http://docs.mongodb.org/ecosystem/drivers/python/"&gt;python驱动&lt;/a&gt;来CRUD数据&lt;/p&gt;
&lt;p&gt;&lt;img alt="mongo-use" src="http://wwjpic.qiniudn.com/mongo-use.png" /&gt;&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;ubuntu下安装mongo比较简单，直接&lt;code&gt;sudo apt-get install mongodb&lt;/code&gt;就行。&lt;/p&gt;
&lt;p&gt;当然也可以去&lt;a href="http://www.mongodb.org/downloads"&gt;官网下载安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;端口号是&lt;code&gt;27017&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入mongo shell:&lt;code&gt;mongo&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;基础&lt;/h2&gt;
&lt;h3&gt;6个简单的概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB有着与您熟知的‘数据库’一样的概念。每一个数据库都是高层次的容器，用来储存其他的所有数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个数据库可以有若干‘集合’（collection）。集合和传统概念中的‘表’有着足够多的共同点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集合由若干‘文档’（document）组成,可以认为这里的文档就是‘行’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档又由若干‘域’（field）组成，域就像是‘列’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;索引&lt;/code&gt;（index）在MongoDB中的意义就如同索引在RDBMS中一样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;游标&lt;/code&gt;（cursor）和以上5个概念不同.每当向MongoDB索要数据时，它总是返回一个游标。基于游标我们可以作诸如计数或是直接跳过之类的操作，而不需要真正去读数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小结一下，MongoDB由&lt;code&gt;数据库&lt;/code&gt;组成，数据库由&lt;code&gt;集合&lt;/code&gt;组成，集合由&lt;code&gt;文档&lt;/code&gt;组成。&lt;code&gt;域&lt;/code&gt;组成了文档，集合可以被&lt;code&gt;索引&lt;/code&gt;，从而提高了查找和排序的性能。最后，我们从MongoDB读取数据的时候是通过&lt;code&gt;游标&lt;/code&gt;进行的，除非需要，游标不会真正去作读的操作。&lt;/p&gt;
&lt;p&gt;关系数据库是在&lt;code&gt;表&lt;/code&gt;这一层次定义&lt;code&gt;列&lt;/code&gt;的，而一个面向文档的数据库则是在&lt;code&gt;文档&lt;/code&gt;这一层次定义&lt;code&gt;域&lt;/code&gt;的。也就是说，集合中的每个文档都可以有独立的域。因此，虽说集合相对于表来说是一个简化了的容器，而文档则包含了比行要多得多的信息。&lt;/p&gt;
&lt;h2&gt;mongo shell&lt;/h2&gt;
&lt;h3&gt;入口&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;help&lt;/code&gt;。shell会返回全局可用的操作。比如&lt;code&gt;show dbs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mongo的shell运行在JavaScript之上.&lt;br /&gt;
您可以执行一些全局的指令，如help或者exit.&lt;br /&gt;
操作对象db来执行针对当前数据库的操作，例如db.help()或是db.stats()。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先我们用全局命令use来切换数据库。输入&lt;code&gt;use learn&lt;/code&gt;。这个数据库是否存在并没有关系，若不存在则新建.z执行完后您就已经在一个数据库里面了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.unicorns.insert({name: 'Aurora', gender: 'f', weight: 450})&lt;/code&gt;&lt;br /&gt;
以上命令对unicorns对象执行insert操作，并传入一个参数。在MongoDB内部，数据是以二进制的串行JSON格式存储的。  &lt;/li&gt;
&lt;li&gt;如果我们现在执行db.getCollectionNames()，将看到两个集合：unicorns以及system.indexes。system.indexes在每个数据库中都会创建，它包含了数据库中的索引信息。&lt;/li&gt;
&lt;li&gt;现在您可以对unicorns对象执行find命令，  列出所有文档:&lt;code&gt;db.unicorns.find()&lt;/code&gt;&lt;br /&gt;
请注意，除了您在文档中输入的各个域，还有一个一个叫做_id的域。&lt;/li&gt;
&lt;li&gt;往unicorns插入一个完全不同的文档。&lt;code&gt;db.unicorns.insert({name: 'Leto', gender: 'm', home: 'Arrakeen', worm: false})&lt;/code&gt;再次用find可以列出所有的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;掌握选择器（selector）&lt;/h3&gt;
&lt;p&gt;MongoDB还有一个很实用的概念：查询选择器（query selector）。&lt;br /&gt;
MongoDB的查询选择器就像SQL代码中的where语句。&lt;br /&gt;
因此您可以用它在集合中查找，统计，更新或是删除文档。&lt;br /&gt;
选择器就是一个JSON对象，最简单的形式就是{}，用来匹配所有的文档。&lt;br /&gt;
如果我们需要找到所有雌性的独角兽(unicorn)，我们可以用选择器{gender:'f'}来匹配。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;db.unicorns.remove&lt;/code&gt;删除之前我们在unicorns集合中输入的所有数据 &lt;/li&gt;
&lt;li&gt;插入以下数据:  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.unicorns.insert({name: &amp;#39;Horny&amp;#39;, dob: new Date(1992,2,13,7,47), loves: [&amp;#39;carrot&amp;#39;,&amp;#39;papaya&amp;#39;], weight: 600, gender: &amp;#39;m&amp;#39;, vampires: 63});
db.unicorns.insert({name: &amp;#39;Aurora&amp;#39;, dob: new Date(1991, 0, 24, 13, 0), loves: [&amp;#39;carrot&amp;#39;, &amp;#39;grape&amp;#39;], weight: 450, gender: &amp;#39;f&amp;#39;, vampires: 43});
db.unicorns.insert({name: &amp;#39;Unicrom&amp;#39;, dob: new Date(1973, 1, 9, 22, 10), loves: [&amp;#39;energon&amp;#39;, &amp;#39;redbull&amp;#39;], weight: 984, gender: &amp;#39;m&amp;#39;, vampires: 182});
db.unicorns.insert({name: &amp;#39;Roooooodles&amp;#39;, dob: new Date(1979, 7, 18, 18, 44), loves: [&amp;#39;apple&amp;#39;], weight: 575, gender: &amp;#39;m&amp;#39;, vampires: 99});
db.unicorns.insert({name: &amp;#39;Solnara&amp;#39;, dob: new Date(1985, 6, 4, 2, 1), loves:[&amp;#39;apple&amp;#39;, &amp;#39;carrot&amp;#39;, &amp;#39;chocolate&amp;#39;], weight:550, gender:&amp;#39;f&amp;#39;, vampires:80});
db.unicorns.insert({name:&amp;#39;Ayna&amp;#39;, dob: new Date(1998, 2, 7, 8, 30), loves: [&amp;#39;strawberry&amp;#39;, &amp;#39;lemon&amp;#39;], weight: 733, gender: &amp;#39;f&amp;#39;, vampires: 40});
db.unicorns.insert({name:&amp;#39;Kenny&amp;#39;, dob: new Date(1997, 6, 1, 10, 42), loves: [&amp;#39;grape&amp;#39;, &amp;#39;lemon&amp;#39;], weight: 690,  gender: &amp;#39;m&amp;#39;, vampires: 39});
db.unicorns.insert({name: &amp;#39;Raleigh&amp;#39;, dob: new Date(2005, 4, 3, 0, 57), loves: [&amp;#39;apple&amp;#39;, &amp;#39;sugar&amp;#39;], weight: 421, gender: &amp;#39;m&amp;#39;, vampires: 2});
db.unicorns.insert({name: &amp;#39;Leia&amp;#39;, dob: new Date(2001, 9, 8, 14, 53), loves: [&amp;#39;apple&amp;#39;, &amp;#39;watermelon&amp;#39;], weight: 601, gender: &amp;#39;f&amp;#39;, vampires: 33});
db.unicorns.insert({name: &amp;#39;Pilot&amp;#39;, dob: new Date(1997, 2, 1, 5, 3), loves: [&amp;#39;apple&amp;#39;, &amp;#39;watermelon&amp;#39;], weight: 650, gender: &amp;#39;m&amp;#39;, vampires: 54});
db.unicorns.insert({name: &amp;#39;Nimue&amp;#39;, dob: new Date(1999, 11, 20, 16, 15), loves: [&amp;#39;grape&amp;#39;, &amp;#39;carrot&amp;#39;], weight: 540, gender: &amp;#39;f&amp;#39;});
db.unicorns.insert({name: &amp;#39;Dunx&amp;#39;, dob: new Date(1976, 6, 18, 18, 18), loves: [&amp;#39;grape&amp;#39;, &amp;#39;watermelon&amp;#39;], weight: 704, gender: &amp;#39;m&amp;#39;, vampires: 165});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{field: value}用来查找所有field等于value的文档。通过{field1: value1, field2: value2}的形式可以实现与操作。&lt;code&gt;$lt&lt;/code&gt;、&lt;code&gt;$lte&lt;/code&gt;、&lt;code&gt;$gt&lt;/code&gt;、&lt;code&gt;$gte&lt;/code&gt;以及&lt;code&gt;$ne&lt;/code&gt;分别表示&lt;code&gt;小于、小于或等于、大于、大于或等于以及不等于&lt;/code&gt;。举个例子，查找所有体重超过700磅的雄性独角兽的命令是：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.unicorns.find({gender: &amp;#39;m&amp;#39;, weight: {$gt: 700}})
//或者 (效果并不完全一样，仅用来为了演示不同的方法)
db.unicorns.find({gender: {$ne: &amp;#39;f&amp;#39;}, weight: {$gte: 701}})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要或而不是与，可以用$or操作符并作用于需要进行或操作的数组：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.unicorns.find({gender: &amp;#39;f&amp;#39;, $or: [{loves: &amp;#39;apple&amp;#39;}, {loves: &amp;#39;orange&amp;#39;}, {weight: {$lt: 500}}]})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93"&gt;go on ...&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;pymongo&lt;/h2&gt;
&lt;h3&gt;参考子资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.chinaunix.net/uid-670606-id-3574914.html"&gt;pymongo 使用小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/libingql/archive/2011/06/15/2081545.html"&gt;PyMongo基本使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/wwj718/534c6d343b25c210faf8"&gt;pymongo_operate.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#首先pip install pymongo&lt;/span&gt;
&lt;span class="c1"&gt;#连接mongodb&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# mongo 3.2, pymongo 3.5.1: client = pymongo.MongoClient(&amp;#39;localhost&amp;#39;, 27017)&lt;/span&gt;
&lt;span class="c1"&gt;#获取数据库列表&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#连接数据库&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt;  &lt;span class="c1"&gt;#或者db = conn[&amp;#39;test1&amp;#39;] 偏好后者，类似python dict&lt;/span&gt;
&lt;span class="c1"&gt;#权限验证&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;#获取聚集列表 (聚集的概念类似于关系型数据库中的表)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;online&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;#连接聚集&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="c1"&gt;#或account = db[&amp;#39;account&amp;#39;]&lt;/span&gt;
&lt;span class="c1"&gt;#查看聚集的一条记录&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#查看聚集的所有key (类似于关系型数据库中的字段)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#查看聚集的所有记录&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#查看记录总数&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#根据条件查询多条记录&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#对查询结果进行排序 (默认升序ASCENDING)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;active_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DESCENDING&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="c1"&gt;#新增记录&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;active_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;20130408&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;#更新记录&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;active_time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;20130408120000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="c1"&gt;#删除记录 (不带条件表示全部删除)&lt;/span&gt;
&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;数据备份&lt;/h1&gt;
&lt;h2&gt;参开资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md"&gt;the-little-mongodb-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.mongodb.org/manual/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/xumingxiang/archive/2012/04/08/2437468.html"&gt;MongoDB开发学习（1）开天辟地，经典入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-07-19:learn-mongo.html</guid><category>edx</category></item><item><title>mysql学习笔记</title><link>/learn-mysql.html</link><description>&lt;p&gt;edx生产环境使用了mongo/mysql数据库。&lt;/p&gt;
&lt;p&gt;edx中这两个数据库都用来干嘛呢，看&lt;a href="https://github.com/edx/edx-platform/wiki/Frequently-Asked-Questions#are-the-cms-and-lms-supposed-to-use-the-same-database-or-separate-ones-when-in-production"&gt;这里&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql/RDS for user-data and MongoDB for courseware content and discussion forums&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然总结了mongo，也顺便对mysql做个总结。&lt;/p&gt;
&lt;h2&gt;mysql安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install mysql-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一路回车，root密码为空&lt;/p&gt;
&lt;h2&gt;卸载（可能是为了重装）&lt;/h2&gt;
&lt;p&gt;sudo apt-get purge mysql-server mysql-client mysql-common mysql-client mysql-server&lt;/p&gt;
&lt;h2&gt;管理&lt;/h2&gt;
&lt;h3&gt;权限管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CREATE USER username IDENTIFIED BY 'password'; //之后要使用GRANT分配权限，否则登录会错误，所以一般用下边的指令&lt;/li&gt;
&lt;li&gt;GRANT ALL PRIVILEGES ON wordpress.* TO 'username'@'localhost' IDENTIFIED BY 'password'; //创建并赋予用户在wordpress数据库中的所有权限&lt;/li&gt;
&lt;li&gt;GRANT ALL PRIVILEGES ON wordpress.* TO 'username'@'%' IDENTIFIED BY 'password'; //任意ip，注意需要把/etc/mysql/my.cnf的bind-address 注释&lt;/li&gt;
&lt;li&gt;GRANT SELECT, UPDATE ON wordpress.* TO 'username'@'localhost' IDENTIFIED BY 'password'; //只能执行 select 和 update 命令&lt;/li&gt;
&lt;li&gt;GRANT Select ON &lt;em&gt;.&lt;/em&gt; TO reader@192.168.1.123  IDENTIFIED BY "123456" //创建用户reader，只能从192.168.1.123访问，权限为所有数据库只读&lt;/li&gt;
&lt;li&gt;REVOKE ALL PRIVILEGES ON &lt;em&gt;.&lt;/em&gt; FROM 'username'@'localhost'; //回收所有权限&lt;/li&gt;
&lt;li&gt;查看所有用户：select host,user,password from mysql.user;&lt;/li&gt;
&lt;li&gt;删除用户：drop user 'jack'@'localhost';&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权限相关的细节参考&lt;a href="https://libuchao.com/2013/04/06/mysql-user-and-privilege"&gt;MySQL 用户管理及权限管理&lt;/a&gt; 、&lt;a href="http://www.cnblogs.com/cnblogsfans/archive/2009/09/21/1570942.html"&gt;Mysql初始化root密码和允许远程访问&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;创建数据库&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--创建数据库&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mytest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;--进入数据库&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;删除关联表&lt;/h3&gt;
&lt;p&gt;暂时弃用检查： &lt;code&gt;SET FOREIGN_KEY_CHECKS=0;&lt;/code&gt;,完成之后 &lt;code&gt;SET FOREIGN_KEY_CHECKS=1;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;重设root 密码&lt;/h3&gt;
&lt;p&gt;以安全模式启动mysql，这样不需要密码可以直接以root身份登录，然后重设密码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service mysql stop 
sudo mysqld_safe --skip-grant-tables --skip-networking &amp;amp;
mysql -u root  

mysql&amp;gt; use mysql;  
mysql&amp;gt; update user set password=PASSWORD(&amp;quot;mynewpassword&amp;quot;) where User=&amp;#39;root&amp;#39;;  
mysql&amp;gt; flush privileges;  
mysql &amp;gt; quit  

sudo service mysql restart 
mysql -u root -pmynewpassword  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以直接修改&lt;code&gt;/etc/mysql/debian.cnf&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;数据备份&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="http://blog.just4fun.site/edx-data-migrate.html"&gt;edx数据迁移&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;gui工具&lt;/h2&gt;
&lt;p&gt;MySQLWorkbench&lt;/p&gt;
&lt;h2&gt;数据&lt;/h2&gt;
&lt;p&gt;MYSQL默认的数据文件存储目录为/var/lib/mysql，在docker中可能这个信息有用（-v）&lt;/p&gt;
&lt;h2&gt;docker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/docker-library/mysql"&gt;docker-library/mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/_/mysql/"&gt;the Docker Hub page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker-library/docs/tree/master/mysql"&gt;docker-library/docs/mysql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;run it&lt;/h4&gt;
&lt;p&gt;docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;some-mysql&lt;/code&gt; is the name you want to assign to your container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my-secret-pw&lt;/code&gt; is the password to be set for the MySQL &lt;code&gt;root&lt;/code&gt; user &lt;/li&gt;
&lt;li&gt;&lt;code&gt;tag&lt;/code&gt; is the tag specifying the MySQL version you want tags.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;既有数据问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;采用同版本mysql&lt;/li&gt;
&lt;li&gt;挂载/var/lib/mysql和/etc/mysql/conf.d，是否可能完全一样，换句话说这两个是文件，直接复制是否可用，相同的操作系统的话&lt;/li&gt;
&lt;li&gt;做个试验，设立新的用户，然后migrate，或者重跑ansible playbook&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://user.frdm.info/ckhung/b/sa/mysql.php"&gt;mysql逃兵筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/wuhou/archive/2008/09/28/1301071.html"&gt;Ubuntu安装配置Mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/hateislove214/archive/2010/11/05/1869889.html"&gt;MYSQL常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html"&gt;21分钟 MySQL 入门教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-07-19:learn-mysql.html</guid><category>edx</category></item><item><title>ssh相关</title><link>/ssh.html</link><description>&lt;h2&gt;安装（ubuntu）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;允许密码配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vim /etc/ssh/sshd_config&lt;/code&gt;使：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PasswordAuthentication yes&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;安全相关&lt;/h3&gt;
&lt;p&gt;修改登录端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim /etc/ssh/sshd_config&lt;/code&gt;使：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Port [port]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;端口号选择大一些，被随机扫描的可能性更小&lt;/p&gt;
&lt;h3&gt;使用密钥登录并禁止口令登录实践&lt;/h3&gt;
&lt;p&gt;这是最相对安全的登录管理方式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#以下用户都是root（sudo）

#生成SSH密钥对，一路回车就行
ssh-keygen -t rsa

#复制公钥到无密码登录的服务器上,22端口改变可以使用下面的命令
#ssh-copy-id -i ~/.ssh/id_rsa.pub -p 10022 user@server
ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.15.241
#登录时需要使用相应账号登录

#也可以登录被控机器后 cd .ssh，wget https://github.com/wwj718.keys 之后chmod 600 authorized_keys
#authorized_keys 文件必须是600权限或者644
#.ssh目录必须是700权限
#/home/ubuntu 目录必须是755权限

#修改SSH配置文件
#编辑sshd_config文件
vi /etc/ssh/sshd_config

#禁用密码验证
PasswordAuthentication no
#启用密钥验证
RSAAuthentication yes
PubkeyAuthentication yes
#指定公钥数据库文件
AuthorsizedKeysFile .ssh/authorized_keys

#重启SSH服务前建议多保留一个会话以防不测

#手动增加管理用户
echo &amp;#39;ssh-rsa XXXX&amp;#39; &amp;gt;&amp;gt;/root/.ssh/authorized_keys

# 复查
cat /root/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重启&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#RHEL/CentOS系统
service sshd restart
#ubuntu系统
service ssh restart
#debian系统
/etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;补遗&lt;/h1&gt;
&lt;h3&gt;X11 Forwarding&lt;/h3&gt;
&lt;p&gt;通过使用ssh -X user@host，可以做到开启远端GUI应用，就像在本地开启一样,max下需要安装Quartz&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2016-05-04修改&lt;/p&gt;
&lt;h1&gt;SSH 简化配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;强烈建议使用 ssh-copy-id来移动你的公共密钥&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;~/.ssh/config&lt;/code&gt;, 你可以在~/.ssh/config里面指定相当数量的配置选项，强烈建议看网上的文档或者 ssh_config 手册页&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# contents of $HOME/.ssh/config
Host dev
    HostName dev.example.com
    Port 22000
    User fooey
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;ssh startx&lt;/h1&gt;
&lt;p&gt;使用ssh进入图形界面&lt;/p&gt;
&lt;p&gt;&lt;a href="http://askubuntu.com/questions/163155/how-do-i-access-my-remote-ubuntu-server-via-x-windows-from-my-mac"&gt;How do I access my remote Ubuntu server via X-windows from my Mac&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xitu/gold-miner/blob/master/TODO/simplify-your-life-with-an-ssh-config-file.md"&gt;SSH 简化配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-07-10:ssh.html</guid><category>ubuntu</category></item><item><title>几个工具</title><link>/something-interesting.html</link><description>&lt;p&gt;晚上去教十旭东那边,碰到辰瑀学长,聊了挺久,很是获益,从毕业求职谈到技术相关,很有趣.&lt;/p&gt;
&lt;p&gt;在技术方面我们有不少兴趣点相似,交谈甚欢,当然大部分都是我在请教啦:linux,安全相关,vim...&lt;/p&gt;
&lt;p&gt;辰瑀学长是重度vim用户,也是身边的小伙伴中vim用得最炫酷的,而我刚入门,却也狂热的喜欢上vim了,见其弹指如飞,煞是羡慕.&lt;/p&gt;
&lt;p&gt;这种感觉就像我当时还在使用windows时,初次见何金良学长用ubuntu和python,简直被炫酷得目瞪口呆.&lt;/p&gt;
&lt;p&gt;于是换了套他所使用的的装备.&lt;/p&gt;
&lt;p&gt;看来这次又可以换上不少强大的装备了.&lt;/p&gt;
&lt;p&gt;于是记下了不少强大的工具,做个记录:&lt;/p&gt;
&lt;h3&gt;vim相关:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;Vundle.vim&lt;/a&gt; , vim杀手级插件,用来管理插件&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Valloric/YouCompleteMe"&gt;YouCompleteMe&lt;/a&gt; ,代码补全&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-scripts/taglist.vim"&gt;taglist.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;linux相关&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;tmux  , 用来把终端分屏,使用ssh的时候就很爽啦&lt;/li&gt;
&lt;li&gt;zsh , 当然是使用&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt;啦  , 对zsh觊觎已久,觉得bash还顺手一直没换,今天看到zsh如此炫酷的演示,果断换上&lt;/li&gt;
&lt;li&gt;keynav , 把键盘当鼠标用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;tmux使用笔记&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="https://wiki.freebsdchina.org/software/t/tmux"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+b&lt;/code&gt;:激活控制台；此时以下按键生效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;: 列出所有快捷键；按q返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;“&lt;/code&gt;: 将当前面板平分为上下两块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt;: 在当前窗口中选择下一面板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;what an interesting day ~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wuwenjie</dc:creator><pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:,2014-05-30:something-interesting.html</guid><category>ubuntu</category></item></channel></rss>